record_number,buggy_code,fixed_code,code_similarity
66001,"public DesignElementHandle createView(DesignElementHandle host) throws BirtException {
  ChartWithAxes cm=ChartWithAxesImpl.create();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  cm.setUnits(""String_Node_Str"");
  cm.setUnitSpacing(50);
  cm.getTitle().getLabel().getCaption().setValue(Messages.getString(""String_Node_Str""));
  SeriesDefinition sdBase=SeriesDefinitionImpl.create();
  sdBase.getSeriesPalette().shift(0);
  Series series=SeriesImpl.create();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  cm.getBaseAxes()[0].setCategoryAxis(true);
  SeriesDefinition sdOrth=SeriesDefinitionImpl.create();
  sdOrth.getSeriesPalette().shift(0);
  series=BarSeriesImpl.create();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  ChartUIUtil.setSeriesName(cm);
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
  ExtendedItemHandle itemHandle=host.getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
  itemHandle.getReportItem().setProperty(ChartReportItemConstants.PROPERTY_CHART,cm);
  return itemHandle;
}","public DesignElementHandle createView(DesignElementHandle host) throws BirtException {
  ChartWithAxes cm=ChartWithAxesImpl.createDefault();
  cm.setType(""String_Node_Str"");
  cm.setSubType(""String_Node_Str"");
  SeriesDefinition sdBase=SeriesDefinitionImpl.createDefault();
  Series series=SeriesImpl.createDefault();
  sdBase.getSeries().add(series);
  cm.getBaseAxes()[0].getSeriesDefinitions().add(sdBase);
  SeriesDefinition sdOrth=SeriesDefinitionImpl.createDefault();
  series=BarSeriesImpl.createDefault();
  sdOrth.getSeries().add(series);
  cm.getOrthogonalAxes(cm.getBaseAxes()[0],true)[0].getSeriesDefinitions().add(sdOrth);
  ChartUIUtil.setSeriesName(cm);
  SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
  sampleData.getBaseSampleData().clear();
  sampleData.getOrthogonalSampleData().clear();
  BaseSampleData sampleDataBase=DataFactory.eINSTANCE.createBaseSampleData();
  sampleDataBase.setDataSetRepresentation(""String_Node_Str"");
  sampleData.getBaseSampleData().add(sampleDataBase);
  OrthogonalSampleData sampleDataOrth=DataFactory.eINSTANCE.createOrthogonalSampleData();
  sampleDataOrth.setDataSetRepresentation(""String_Node_Str"");
  sampleDataOrth.setSeriesDefinitionIndex(0);
  sampleData.getOrthogonalSampleData().add(sampleDataOrth);
  cm.setSampleData(sampleData);
  String name=ReportPlugin.getDefault().getCustomName(ChartReportItemConstants.CHART_EXTENSION_NAME);
  ExtendedItemHandle itemHandle=host.getElementFactory().newExtendedItem(name,ChartReportItemConstants.CHART_EXTENSION_NAME);
  itemHandle.getReportItem().setProperty(ChartReportItemConstants.PROPERTY_CHART,cm);
  return itemHandle;
}",0.837116912599319
66002,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=4;
  flMain.marginWidth=2;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=0;
  glContent.marginWidth=0;
  glContent.numColumns=2;
  GridLayout glTicks=new GridLayout();
  glTicks.marginHeight=4;
  glTicks.marginWidth=4;
  glTicks.verticalSpacing=2;
  glTicks.horizontalSpacing=5;
  glTicks.numColumns=2;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  if (bLineGroupEnabled) {
    FillLayout flLines=new FillLayout();
    flLines.marginHeight=1;
    flLines.marginWidth=1;
    cmpLines=new Composite(cmpContent,SWT.NONE);
    GridData gdCMPLines=new GridData(GridData.FILL_BOTH);
    gdCMPLines.horizontalSpan=2;
    cmpLines.setLayoutData(gdCMPLines);
    cmpLines.setLayout(flLines);
    int lineStyels=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
    liacLines=new LineAttributesComposite(cmpLines,SWT.NONE,lineStyels,context,grid.getLineAttributes());
    liacLines.addListener(this);
    liacLines.setAttributesEnabled(ChartUIUtil.is3DWallFloorSet(context.getModel()));
  }
  boolean bTicksEnabled=this.context.getModel().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL;
  if (bTicksEnabled) {
    Group grpTicks=new Group(cmpContent,SWT.NONE);
{
      GridData gdGRPTicks=new GridData(GridData.FILL_BOTH);
      gdGRPTicks.horizontalSpan=2;
      grpTicks.setLayoutData(gdGRPTicks);
      grpTicks.setLayout(glTicks);
      grpTicks.setText(Messages.getString(""String_Node_Str""));
    }
    int lineStyels=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_COLOR | LineAttributesComposite.ENABLE_AUTO_COLOR;
    liacTicks=new LineAttributesComposite(grpTicks,SWT.NONE,lineStyels,context,grid.getTickAttributes());
{
      GridData gdLIACTicks=new GridData(GridData.FILL_HORIZONTAL);
      gdLIACTicks.horizontalSpan=2;
      liacTicks.setLayoutData(gdLIACTicks);
      liacTicks.addListener(this);
    }
    boolean tickUIEnabled=!ChartUIExtensionUtil.isSetInvisible(grid.getTickAttributes());
    lblStyle=new Label(grpTicks,SWT.NONE);
{
      GridData gdLBLStyle=new GridData();
      gdLBLStyle.horizontalIndent=4;
      lblStyle.setLayoutData(gdLBLStyle);
      lblStyle.setText(Messages.getString(""String_Node_Str""));
      lblStyle.setEnabled(tickUIEnabled);
    }
    cmbTickStyle=new Combo(grpTicks,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gdCMBTickStyle=new GridData(GridData.FILL_HORIZONTAL);
      cmbTickStyle.setLayoutData(gdCMBTickStyle);
      cmbTickStyle.addSelectionListener(this);
      cmbTickStyle.setEnabled(tickUIEnabled);
    }
    populateLists();
    setDefaultSelections();
  }
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=4;
  flMain.marginWidth=2;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=0;
  glContent.marginWidth=0;
  glContent.numColumns=2;
  GridLayout glTicks=new GridLayout();
  glTicks.marginHeight=4;
  glTicks.marginWidth=4;
  glTicks.verticalSpacing=2;
  glTicks.horizontalSpacing=5;
  glTicks.numColumns=2;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  if (bLineGroupEnabled) {
    FillLayout flLines=new FillLayout();
    flLines.marginHeight=1;
    flLines.marginWidth=1;
    cmpLines=new Composite(cmpContent,SWT.NONE);
    GridData gdCMPLines=new GridData(GridData.FILL_BOTH);
    gdCMPLines.horizontalSpan=2;
    cmpLines.setLayoutData(gdCMPLines);
    cmpLines.setLayout(flLines);
    int lineStyels=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
    liacLines=new LineAttributesComposite(cmpLines,SWT.NONE,lineStyels,context,grid.getLineAttributes());
    liacLines.addListener(this);
    liacLines.setAttributesEnabled(ChartUIUtil.is3DWallFloorSet(context.getModel()));
  }
  if (bTicksVisible) {
    Group grpTicks=new Group(cmpContent,SWT.NONE);
{
      GridData gdGRPTicks=new GridData(GridData.FILL_BOTH);
      gdGRPTicks.horizontalSpan=2;
      grpTicks.setLayoutData(gdGRPTicks);
      grpTicks.setLayout(glTicks);
      grpTicks.setText(Messages.getString(""String_Node_Str""));
    }
    int lineStyels=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_COLOR | LineAttributesComposite.ENABLE_AUTO_COLOR;
    liacTicks=new LineAttributesComposite(grpTicks,SWT.NONE,lineStyels,context,grid.getTickAttributes());
{
      GridData gdLIACTicks=new GridData(GridData.FILL_HORIZONTAL);
      gdLIACTicks.horizontalSpan=2;
      liacTicks.setLayoutData(gdLIACTicks);
      liacTicks.addListener(this);
    }
    boolean tickUIEnabled=!ChartUIExtensionUtil.isSetInvisible(grid.getTickAttributes());
    lblStyle=new Label(grpTicks,SWT.NONE);
{
      GridData gdLBLStyle=new GridData();
      gdLBLStyle.horizontalIndent=4;
      lblStyle.setLayoutData(gdLBLStyle);
      lblStyle.setText(Messages.getString(""String_Node_Str""));
      lblStyle.setEnabled(tickUIEnabled);
    }
    cmbTickStyle=new Combo(grpTicks,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gdCMBTickStyle=new GridData(GridData.FILL_HORIZONTAL);
      cmbTickStyle.setLayoutData(gdCMBTickStyle);
      cmbTickStyle.addSelectionListener(this);
      cmbTickStyle.setEnabled(tickUIEnabled);
    }
    populateLists();
    setDefaultSelections();
  }
}",0.9753660637381568
66003,"@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnCategoryAxis.setLayoutData(gd);
    btnCategoryAxis.setSelectionState(getAxisForProcessing().isSetCategoryAxis() ? (getAxisForProcessing().isCategoryAxis() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateCategoryAxisUI(!getAxisForProcessing().isSetType() || !AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    btnCategoryAxis.addSelectionListener(this);
    btnReverse=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnReverse.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    gd.horizontalSpan=2;
    btnReverse.setLayoutData(gd);
    btnReverse.setSelectionState(((ChartWithAxes)getChart()).isSetReverseCategory() ? (((ChartWithAxes)getChart()).isReverseCategory() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateReverseUI(ChartUIExtensionUtil.canEnableUI(btnCategoryAxis));
    btnReverse.addSelectionListener(this);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getTitleValue());
{
    GridData gd=new GridData();
    gd.widthHint=230;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleVisible.setSelectionState(getAxisForProcessing().getTitle().isSetVisible() ? (getAxisForProcessing().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnTitleVisible.addSelectionListener(this);
  btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
  btnTitleContentAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitleContentAuto.setSelection(getAxisForProcessing().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      gdBTNFormatSpecifier.horizontalSpan=2;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=3;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (!getAxisForProcessing().getOrigin().isSetType() || (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL))) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=1;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
      btnTxtValueAuto=new Button(cmpBasic,SWT.CHECK);
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnTxtValueAuto.setLayoutData(gd);
      btnTxtValueAuto.setText(ChartUIExtensionUtil.getAutoMessage());
      btnTxtValueAuto.setSelection(getAxisForProcessing().getOrigin().getValue() == null);
      btnTxtValueAuto.setEnabled(bValueOrigin);
      txtValue.setEnabled(bValueOrigin && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.addSelectionListener(this);
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  cmpLabel.setLayoutData(gd);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  btnLabelVisible.setLayoutData(gd);
  btnLabelVisible.setSelectionState(getAxisForProcessing().getLabel().isSetVisible() ? (getAxisForProcessing().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  btnStaggered=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnStaggered.setText(Messages.getString(""String_Node_Str""));
{
    Axis ax=getAxisForProcessing();
    boolean bNot3D=!isChart3D();
    btnStaggered.setSelectionState(ax.isSetStaggered() ? ((ax.isStaggered() && bNot3D) ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStaggered.setEnabled(bNot3D);
    btnStaggered.setVisible(isStaggerSupported());
    btnStaggered.addSelectionListener(this);
  }
  createLabelSpan(cmpBasic);
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnCategoryAxis.setLayoutData(gd);
    btnCategoryAxis.setSelectionState(getAxisForProcessing().isSetCategoryAxis() ? (getAxisForProcessing().isCategoryAxis() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateCategoryAxisUI(!getAxisForProcessing().isSetType() || !AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    btnCategoryAxis.addSelectionListener(this);
    btnReverse=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnReverse.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    gd.horizontalSpan=2;
    btnReverse.setLayoutData(gd);
    btnReverse.setSelectionState(((ChartWithAxes)getChart()).isSetReverseCategory() ? (((ChartWithAxes)getChart()).isReverseCategory() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateReverseUI(ChartUIExtensionUtil.canEnableUI(btnCategoryAxis));
    btnReverse.addSelectionListener(this);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getTitleValue());
{
    GridData gd=new GridData();
    gd.widthHint=230;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleVisible.setSelectionState(getAxisForProcessing().getTitle().isSetVisible() ? (getAxisForProcessing().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnTitleVisible.addSelectionListener(this);
  btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
  btnTitleContentAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitleContentAuto.setSelection(getAxisForProcessing().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      gdBTNFormatSpecifier.horizontalSpan=2;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (!isChart3D()) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=3;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (!getAxisForProcessing().getOrigin().isSetType() || (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL))) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=1;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
      btnTxtValueAuto=new Button(cmpBasic,SWT.CHECK);
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnTxtValueAuto.setLayoutData(gd);
      btnTxtValueAuto.setText(ChartUIExtensionUtil.getAutoMessage());
      btnTxtValueAuto.setSelection(getAxisForProcessing().getOrigin().getValue() == null);
      btnTxtValueAuto.setEnabled(bValueOrigin);
      txtValue.setEnabled(bValueOrigin && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.addSelectionListener(this);
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  cmpLabel.setLayoutData(gd);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  btnLabelVisible.setLayoutData(gd);
  btnLabelVisible.setSelectionState(getAxisForProcessing().getLabel().isSetVisible() ? (getAxisForProcessing().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  btnStaggered=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnStaggered.setText(Messages.getString(""String_Node_Str""));
{
    Axis ax=getAxisForProcessing();
    boolean bNot3D=!isChart3D();
    btnStaggered.setSelectionState(ax.isSetStaggered() ? ((ax.isStaggered() && bNot3D) ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStaggered.setEnabled(bNot3D);
    btnStaggered.setVisible(isStaggerSupported());
    btnStaggered.addSelectionListener(this);
  }
  createLabelSpan(cmpBasic);
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9951495553759094
66004,"protected void createLabelSpan(Composite cmpBasic){
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
}","protected void createLabelSpan(Composite cmpBasic){
  if (!isChart3D()) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
}",0.9745583038869258
66005,"private void populateLists(){
  NameSet ns=LiteralHelper.axisTypeSet;
  if (getAxisAngleType() == AngleType.Y) {
    ns=ChartUIUtil.getCompatibleAxisType(getAxisForProcessing().getSeriesDefinitions().get(0).getDesignTimeSeries());
  }
  cmbTypes.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  String[] names=ns.getNames();
  cmbTypes.setData(KEY_TYPE_NAMES,names);
  if (!getAxisForProcessing().isSetType()) {
    cmbTypes.select(0);
  }
 else {
    cmbTypes.setText(ns.getDisplayNameByName(getAxisForProcessing().getType().getName()));
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    ns=LiteralHelper.intersectionTypeSet;
    cmbOrigin.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
    if (!getAxisForProcessing().getOrigin().isSetType()) {
      cmbOrigin.select(0);
    }
 else {
      cmbOrigin.select(ns.getSafeNameIndex(getAxisForProcessing().getOrigin().getType().getName()) + 1);
    }
  }
  if (txtValue != null && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
    txtValue.setDataElement(getAxisForProcessing().getOrigin().getValue());
  }
}","private void populateLists(){
  NameSet ns=LiteralHelper.axisTypeSet;
  if (getAxisAngleType() == AngleType.Y) {
    ns=ChartUIUtil.getCompatibleAxisType(getAxisForProcessing().getSeriesDefinitions().get(0).getDesignTimeSeries());
  }
  cmbTypes.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  String[] names=ns.getNames();
  cmbTypes.setData(KEY_TYPE_NAMES,names);
  if (!getAxisForProcessing().isSetType()) {
    cmbTypes.select(0);
  }
 else {
    cmbTypes.setText(ns.getDisplayNameByName(getAxisForProcessing().getType().getName()));
  }
  if (!isChart3D()) {
    ns=LiteralHelper.intersectionTypeSet;
    cmbOrigin.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
    if (!getAxisForProcessing().getOrigin().isSetType()) {
      cmbOrigin.select(0);
    }
 else {
      cmbOrigin.select(ns.getSafeNameIndex(getAxisForProcessing().getOrigin().getType().getName()) + 1);
    }
  }
  if (txtValue != null && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
    txtValue.setDataElement(getAxisForProcessing().getOrigin().getValue());
  }
}",0.9688311688311688
66006,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  initOptionUI(cmpBasic);
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getBackgroundFillStyles(),getContext(),getChart().getBlock().getBackground());
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  createStyleNPreviewUI(cmpBasic);
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(1,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnMegAuto=new Button(grpEmptyMsg,SWT.RADIO);
    btnMegAuto.setText(ChartUIExtensionUtil.getAutoMessage());
    btnMegAuto.setSelection(!laEmptyMsg.isSetVisible());
    btnMegAuto.addListener(SWT.Selection,this);
    btnAutoHide=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(laEmptyMsg.isSetVisible() && !laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    btnShowEmptyMsg=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnShowEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnShowEmptyMsg.setLayoutData(gd);
      btnShowEmptyMsg.setSelection(laEmptyMsg.isSetVisible() && laEmptyMsg.isVisible());
      btnShowEmptyMsg.addListener(SWT.Selection,this);
    }
    Composite cmpEmptyText=new Composite(grpEmptyMsg,SWT.NONE);
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.horizontalIndent=12;
      cmpEmptyText.setLayoutData(gd);
      cmpEmptyText.setLayout(new GridLayout(2,false));
    }
    lbTxtEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbTxtEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(cmpEmptyText,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.addListener(this);
    }
    lbFdcEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbFdcEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(cmpEmptyText,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.addListener(this);
    }
    updateEmptyMessageUIStates();
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  if ((getChart() instanceof ChartWithAxes) && is3DEnabled()) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      if (!cwa.isSetCoverage()) {
        spnValue=DEFAULT_COVERAGE;
      }
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new TristateCheckbox(cmpBasic,SWT.NONE);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelectionState(!getChart().getInteractivity().isSetEnable() ? TristateCheckbox.STATE_GRAYED : (getChart().getInteractivity().isEnable() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED));
    btnEnable.addSelectionListener(this);
  }
  if (ChartUtil.hasMultipleYAxes(getChart())) {
    btnStudyLayout=new TristateCheckbox(cmpBasic,SWT.NONE);
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnStudyLayout.setLayoutData(gridData);
    btnStudyLayout.setText(Messages.getString(""String_Node_Str""));
    btnStudyLayout.setSelectionState(((ChartWithAxes)getChart()).isSetStudyLayout() ? (((ChartWithAxes)getChart()).isStudyLayout() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStudyLayout.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  initOptionUI(cmpBasic);
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getBackgroundFillStyles(),getContext(),getChart().getBlock().getBackground());
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  createStyleNPreviewUI(cmpBasic);
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(1,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnMegAuto=new Button(grpEmptyMsg,SWT.RADIO);
    btnMegAuto.setText(ChartUIExtensionUtil.getAutoMessage());
    btnMegAuto.setSelection(!laEmptyMsg.isSetVisible());
    btnMegAuto.addListener(SWT.Selection,this);
    btnAutoHide=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(laEmptyMsg.isSetVisible() && !laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    btnShowEmptyMsg=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnShowEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnShowEmptyMsg.setLayoutData(gd);
      btnShowEmptyMsg.setSelection(laEmptyMsg.isSetVisible() && laEmptyMsg.isVisible());
      btnShowEmptyMsg.addListener(SWT.Selection,this);
    }
    Composite cmpEmptyText=new Composite(grpEmptyMsg,SWT.NONE);
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.horizontalIndent=12;
      cmpEmptyText.setLayoutData(gd);
      cmpEmptyText.setLayout(new GridLayout(2,false));
    }
    lbTxtEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbTxtEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(cmpEmptyText,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.addListener(this);
    }
    lbFdcEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbFdcEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(cmpEmptyText,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.addListener(this);
    }
    updateEmptyMessageUIStates();
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  if ((getChart() instanceof ChartWithAxes) && is3DEnabled()) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      if (!cwa.isSetCoverage()) {
        spnValue=DEFAULT_COVERAGE;
      }
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new TristateCheckbox(cmpBasic,SWT.NONE);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelectionState(!getChart().getInteractivity().isSetEnable() ? TristateCheckbox.STATE_GRAYED : (getChart().getInteractivity().isEnable() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED));
    btnEnable.addSelectionListener(this);
  }
  if (enableStudyLayout()) {
    btnStudyLayout=new TristateCheckbox(cmpBasic,SWT.NONE);
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnStudyLayout.setLayoutData(gridData);
    btnStudyLayout.setText(Messages.getString(""String_Node_Str""));
    btnStudyLayout.setSelectionState(((ChartWithAxes)getChart()).isSetStudyLayout() ? (((ChartWithAxes)getChart()).isStudyLayout() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStudyLayout.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}",0.9966648474925716
66007,"protected Composite getComponent(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  btnShow=new TristateCheckbox(cmpContent,SWT.NONE);
  btnShow.setText(Messages.getString(""String_Node_Str""));
  btnShow.setLayoutData(new GridData(GridData.FILL_BOTH));
  btnShow.setSelectionState(axis.getLineAttributes().isSetVisible() ? (axis.getLineAttributes().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnShow.addSelectionListener(this);
  if (isTickBetweenCategory()) {
    btnTickBetweenCategory=new TristateCheckbox(cmpContent,SWT.NONE);
    btnTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
    btnTickBetweenCategory.setSelectionState(axis.getScale().isSetTickBetweenCategories() ? (axis.getScale().isTickBetweenCategories() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnTickBetweenCategory.addSelectionListener(this);
    btnTickBetweenCategory.setEnabled(!(axis.isSetCategoryAxis() && !axis.isCategoryAxis()));
  }
 else {
    new Label(cmpContent,SWT.NONE);
  }
  lblColor=new Label(cmpContent,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpContent,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=1;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblColor.setEnabled(ChartUIExtensionUtil.canEnableUI(btnShow));
  fccLine.setEnabled(ChartUIExtensionUtil.canEnableUI(btnShow));
  createGridSteps();
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  btnShow=new TristateCheckbox(cmpContent,SWT.NONE);
  btnShow.setText(Messages.getString(""String_Node_Str""));
  btnShow.setLayoutData(new GridData(GridData.FILL_BOTH));
  btnShow.setSelectionState(axis.getLineAttributes().isSetVisible() ? (axis.getLineAttributes().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnShow.addSelectionListener(this);
  if (isTickBetweenCategory()) {
    btnTickBetweenCategory=new TristateCheckbox(cmpContent,SWT.NONE);
    btnTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
    btnTickBetweenCategory.setSelectionState(axis.getScale().isSetTickBetweenCategories() ? (axis.getScale().isTickBetweenCategories() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnTickBetweenCategory.addSelectionListener(this);
    btnTickBetweenCategory.setEnabled(!(axis.isSetCategoryAxis() && !axis.isCategoryAxis()));
  }
 else {
    new Label(cmpContent,SWT.NONE);
  }
  lblColor=new Label(cmpContent,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpContent,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=1;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblColor.setEnabled(ChartUIExtensionUtil.canEnableUI(btnShow));
  fccLine.setEnabled(ChartUIExtensionUtil.canEnableUI(btnShow));
  createGridSteps();
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  boolean ticksVisible=(this.angleType != AngleType.Z) && (getContext().getModel().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue(),ticksVisible);
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue(),ticksVisible);
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}",0.9746371499780092
66008,"public final IReportItem copy(){
  final ChartReportItemImpl crii=new ChartReportItemImpl(handle);
  crii.bCopied=true;
  if (!ChartCubeUtil.isAxisChart(handle)) {
    if (cm == null) {
      crii.cm=null;
    }
 else {
synchronized (this) {
        try {
          crii.cm=cm.copyInstance();
        }
 catch (        ConcurrentModificationException e) {
          crii.cm=cm.copyInstance();
        }
catch (        NullPointerException e) {
          crii.cm=cm.copyInstance();
        }
      }
    }
  }
  return crii;
}","public final IReportItem copy(){
  final ChartReportItemImpl crii=(ChartReportItemImpl)ChartReportItemUtil.instanceChartReportItem(handle);
  crii.bCopied=true;
  if (!ChartCubeUtil.isAxisChart(handle)) {
    if (cm == null) {
      crii.cm=null;
    }
 else {
synchronized (this) {
        try {
          crii.cm=cm.copyInstance();
        }
 catch (        ConcurrentModificationException e) {
          crii.cm=cm.copyInstance();
        }
catch (        NullPointerException e) {
          crii.cm=cm.copyInstance();
        }
      }
    }
  }
  return crii;
}",0.9550870760769936
66009,"private String getTitleText(){
  if (getChart().getTitle().isAuto()) {
    return getContext().getUIFactory().createUIHelper().getDefaultTitle(getContext());
  }
  String title=getChart().getTitle().getLabel().getCaption().getValue();
  return (title == null) ? ""String_Node_Str"" : title;
}","private String getTitleText(){
  if (getChart().getTitle().isAuto() && getContext().getExtendedItem() != null) {
    return getContext().getUIFactory().createUIHelper().getDefaultTitle(getContext());
  }
  String title=getChart().getTitle().getLabel().getCaption().getValue();
  return (title == null) ? ""String_Node_Str"" : title;
}",0.932475884244373
66010,"protected String getTrendlineText(){
  if (getTrendline().getLabel().getCaption().getValue() == null) {
    return ""String_Node_Str"";
  }
  return getTrendline().getLabel().getCaption().getValue();
}","protected String getTrendlineText(){
  if (getTrendline().getLabel().getCaption() == null) {
    Text caption=CurveFittingImpl.createDefault().getLabel().getCaption();
    getTrendline().getLabel().setCaption(caption);
    caption.eAdapters().addAll(getTrendline().getLabel().eAdapters());
  }
  if (getTrendline().getLabel().getCaption().getValue() == null) {
    return ""String_Node_Str"";
  }
  return getTrendline().getLabel().getCaption().getValue();
}",0.5740458015267176
66011,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendlineText());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,lineStyles,getContext(),getTrendline().getLineAttributes());
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabelInner,SWT.NONE);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnLabelVisible.setLayoutData(gdCBVisible);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  btnLabelVisible.setSelectionState(getTrendline().getLabel().isSetVisible() ? (getTrendline().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  int fillStyles=FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER | FillChooserComposite.ENABLE_AUTO| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getTrendline().getLabel().getOutline());
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  icLabel.setDefaultInsetsValue(DefaultValueProvider.defSeries().getLabel().getInsets());
  populateLists();
  setState(ChartUIExtensionUtil.canEnableUI(btnLabelVisible));
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendlineText());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,lineStyles,getContext(),getTrendline().getLineAttributes());
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabelInner,SWT.NONE);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnLabelVisible.setLayoutData(gdCBVisible);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  btnLabelVisible.setSelectionState(getTrendline().getLabel().isSetVisible() ? (getTrendline().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  int fillStyles=FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER | FillChooserComposite.ENABLE_AUTO| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getTrendline().getLabel().getOutline());
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  icLabel.setDefaultInsetsValue(DefaultValueProvider.defSeries().getLabel().getInsets());
  populateLists();
  setState(ChartUIExtensionUtil.canEnableUI(btnLabelVisible));
  return cmpContent;
}",0.9977958630044084
66012,"/** 
 * get the description for a specific time function
 * @param column
 * @param locale
 * @return
 * @throws BirtException 
 */
public static String getTooltipForTimeFunction(ComputedColumnHandle column,ULocale locale) throws BirtException {
  String desc=null;
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  IBinding functionBinding=session.getModelAdaptor().adaptBinding(column);
  session.shutdown();
  ITimePeriod basePeriod=functionBinding.getTimeFunction().getBaseTimePeriod();
  ITimePeriod relativePeriod=functionBinding.getTimeFunction().getRelativeTimePeriod();
  Date date=functionBinding.getTimeFunction().getReferenceDate().getDate();
  Calendar cal=Calendar.getInstance(locale);
  cal.setTime(date);
  int[] values=new int[3];
  String[] levelTypes=new String[3];
  levelTypes[0]=TimeMember.TIME_LEVEL_TYPE_YEAR;
  levelTypes[1]=TimeMember.TIME_LEVEL_TYPE_MONTH;
  levelTypes[2]=TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH;
  values=getValueFromCal(cal,levelTypes);
  TimeMember member=new TimeMember(values,levelTypes);
  IPeriodsFunction periodsFunction=null;
  String toDatelevelType=null;
  String paralevelType=null;
  toDatelevelType=toLevelType(basePeriod.getType());
  boolean reverse=false;
  if (basePeriod.countOfUnit() == 0) {
    periodsFunction=TimeFunctionCreatorEngine.newTimeFunctionCreator().createPeriodsToDateFunction(toDatelevelType,basePeriod.isCurrent());
  }
 else {
    periodsFunction=TimeFunctionCreatorEngine.newTimeFunctionCreator().createTrailingFunction(toDatelevelType,basePeriod.countOfUnit());
    if (basePeriod.countOfUnit() < 0)     reverse=true;
  }
  List<TimeMember> list=null;
  if (relativePeriod != null) {
    paralevelType=toLevelType(relativePeriod.getType());
    IParallelPeriod parallelPeriod=TimeFunctionCreatorEngine.newTimeFunctionCreator().createParallelPeriodFunction(paralevelType,relativePeriod.countOfUnit());
    list=periodsFunction.getResult(parallelPeriod.getResult(member));
  }
 else {
    list=periodsFunction.getResult(member);
  }
  if (reverse) {
    desc=constructTimeFunctionToolTip(list.get(list.size() - 1),list.get(0),getCalculationType(column.getCalculationType(),locale).getDisplayName(),locale);
  }
 else {
    desc=constructTimeFunctionToolTip(list.get(0),list.get(list.size() - 1),getCalculationType(column.getCalculationType(),locale).getDisplayName(),locale);
  }
  return desc;
}","/** 
 * get the description for a specific time function
 * @param column
 * @param locale
 * @return
 * @throws BirtException 
 */
public static String getTooltipForTimeFunction(ComputedColumnHandle column,ULocale locale) throws BirtException {
  String desc=null;
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  IBinding functionBinding=session.getModelAdaptor().adaptBinding(column);
  session.shutdown();
  ITimePeriod basePeriod=functionBinding.getTimeFunction().getBaseTimePeriod();
  ITimePeriod relativePeriod=functionBinding.getTimeFunction().getRelativeTimePeriod();
  Date date=functionBinding.getTimeFunction().getReferenceDate().getDate();
  Calendar cal=Calendar.getInstance(locale);
  cal.setTime(date);
  int[] values=new int[3];
  String[] levelTypes=new String[3];
  levelTypes[0]=TimeMember.TIME_LEVEL_TYPE_YEAR;
  levelTypes[1]=TimeMember.TIME_LEVEL_TYPE_MONTH;
  levelTypes[2]=TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH;
  values=getValueFromCal(cal,levelTypes);
  TimeMember member=new TimeMember(values,levelTypes);
  DesignElementHandle dHandle=column.getElementHandle();
  DimensionHandle dim=((ReportItemHandle)dHandle).getCube().getDimension(functionBinding.getTimeFunction().getTimeDimension());
  int levelCount=dim.getDefaultHierarchy().getLevelCount();
  String type=dim.getDefaultHierarchy().getLevel(levelCount - 1).getDateTimeLevelType();
  IPeriodsFunction periodsFunction=null;
  String toDatelevelType=null;
  String paralevelType=null;
  toDatelevelType=toLevelType(basePeriod.getType());
  boolean reverse=false;
  if (basePeriod.countOfUnit() == 0) {
    periodsFunction=TimeFunctionCreatorEngine.newTimeFunctionCreator().createPeriodsToDateFunction(toDatelevelType,basePeriod.isCurrent());
  }
 else {
    periodsFunction=TimeFunctionCreatorEngine.newTimeFunctionCreator().createTrailingFunction(toDatelevelType,basePeriod.countOfUnit());
    if (basePeriod.countOfUnit() < 0)     reverse=true;
  }
  List<TimeMember> list=null;
  if (relativePeriod != null) {
    paralevelType=toLevelType(relativePeriod.getType());
    IParallelPeriod parallelPeriod=TimeFunctionCreatorEngine.newTimeFunctionCreator().createParallelPeriodFunction(paralevelType,relativePeriod.countOfUnit());
    list=periodsFunction.getResult(parallelPeriod.getResult(member));
  }
 else {
    list=periodsFunction.getResult(member);
  }
  TimeMember memberFrom=null;
  TimeMember memberTo=null;
  TimeMember tmpMember1=null;
  TimeMember tmpMember2=null;
  if (reverse) {
    tmpMember1=list.get(list.size() - 1);
    tmpMember2=list.get(0);
  }
 else {
    tmpMember1=list.get(0);
    tmpMember2=list.get(list.size() - 1);
  }
  int[] valuesFrom=tmpMember1.getMemberValue().clone();
  int[] valuesTo=tmpMember2.getMemberValue().clone();
  cal.clear();
  if (type.equals(""String_Node_Str"")) {
    valuesFrom[1]=1;
    valuesFrom[2]=2;
    valuesTo[1]=12;
    valuesTo[2]=31;
  }
 else   if (type.equals(""String_Node_Str"")) {
    int quarter=(valuesFrom[1] - 1) / 3 + 1;
    valuesFrom[1]=(quarter - 1) * 3 + 1;
    valuesFrom[2]=1;
    quarter=(valuesTo[1] - 1) / 3 + 1;
    valuesTo[1]=quarter * 3;
    valuesTo[2]=quarterDay[quarter - 1];
  }
 else   if (type.equals(""String_Node_Str"")) {
    valuesFrom[2]=1;
    if (valuesTo[1] == 2 && ((GregorianCalendar)cal).isLeapYear(valuesTo[0])) {
      valuesTo[2]=29;
    }
 else {
      valuesTo[2]=monthDay[valuesTo[1] - 1];
    }
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    cal.set(Calendar.YEAR,valuesFrom[0]);
    cal.set(Calendar.MONTH,valuesFrom[1] - 1);
    cal.set(Calendar.DAY_OF_MONTH,valuesFrom[2]);
    int dayofweek=cal.get(Calendar.DAY_OF_WEEK);
    cal.add(Calendar.DAY_OF_WEEK,1 - dayofweek);
    valuesFrom[0]=cal.get(Calendar.YEAR);
    valuesFrom[1]=cal.get(Calendar.MONTH) + 1;
    valuesFrom[2]=cal.get(Calendar.DAY_OF_MONTH);
    cal.clear();
    cal.set(Calendar.YEAR,valuesTo[0]);
    cal.set(Calendar.MONTH,valuesTo[1] - 1);
    cal.set(Calendar.DAY_OF_MONTH,valuesTo[2]);
    dayofweek=cal.get(Calendar.DAY_OF_WEEK);
    cal.add(Calendar.DAY_OF_WEEK,7 - dayofweek);
    valuesTo[0]=cal.get(Calendar.YEAR);
    valuesTo[1]=cal.get(Calendar.MONTH) + 1;
    valuesTo[2]=cal.get(Calendar.DAY_OF_MONTH);
  }
  memberFrom=new TimeMember(valuesFrom,levelTypes.clone());
  memberTo=new TimeMember(valuesTo,levelTypes.clone());
  desc=constructTimeFunctionToolTip(memberFrom,memberTo,getCalculationType(column.getCalculationType(),locale).getDisplayName(),locale);
  return desc;
}",0.6330444665435431
66013,"public void testTrailing18() throws IOException {
  int[] values=new int[]{2011,1,0,53};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,-3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,28));
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing18() throws IOException {
  int[] values=new int[]{2011,1,0,52};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,-3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,28));
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.9984251968503935
66014,"private void populateMeasureDefinitionForCalculateMeasures(ICubeQueryDefinition query) throws DataException, AdapterException {
  List calculatedMeasures=query.getDerivedMeasures();
  if (calculatedMeasures == null || calculatedMeasures.size() == 0)   return;
  List measures=query.getMeasures();
  List measureNameList=new ArrayList();
  for (int i=0; i < measures.size(); i++) {
    measureNameList.add(((IMeasureDefinition)measures.get(i)).getName());
  }
  List derivedMeasureNameList=new ArrayList();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureNameList.add(((IDerivedMeasureDefinition)calculatedMeasures.get(i)).getName());
  }
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measureGroup=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measureGroup.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measureGroup.get(j);
        if (measure.isCalculated() && !derivedMeasureNameList.contains(measure.getName())) {
          derivedMeasureNameList.add(measure.getName());
          query.createDerivedMeasure(measure.getName(),DataAdapterUtil.adaptModelDataType(measure.getDataType()),modelAdaptor.adaptExpression((Expression)measure.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
        }
      }
    }
  }
  for (int i=0; i < calculatedMeasures.size(); i++) {
    IDerivedMeasureDefinition dmd=(IDerivedMeasureDefinition)calculatedMeasures.get(i);
    List measureNames=ExpressionCompilerUtil.extractColumnExpression(dmd.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < measureNames.size(); j++) {
      if (!measureNameList.contains(measureNames.get(j).toString()) && !derivedMeasureNameList.contains(measureNames.get(j).toString())) {
        IMeasureDefinition md=query.createMeasure(measureNames.get(j).toString());
        if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
          CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
          MeasureHandle measureHandle=cubeHandle.getMeasure(measureNames.get(j).toString());
          md.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(measureHandle.getFunction()));
        }
      }
    }
  }
}","private void populateMeasureDefinitionForCalculateMeasures(ICubeQueryDefinition query) throws DataException, AdapterException {
  List calculatedMeasures=query.getDerivedMeasures();
  List measures=query.getMeasures();
  List measureNameList=new ArrayList();
  for (int i=0; i < measures.size(); i++) {
    measureNameList.add(((IMeasureDefinition)measures.get(i)).getName());
  }
  List derivedMeasureNameList=new ArrayList();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureNameList.add(((IDerivedMeasureDefinition)calculatedMeasures.get(i)).getName());
  }
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measureGroup=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measureGroup.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measureGroup.get(j);
        if (measure.isCalculated() && !derivedMeasureNameList.contains(measure.getName())) {
          derivedMeasureNameList.add(measure.getName());
          query.createDerivedMeasure(measure.getName(),DataAdapterUtil.adaptModelDataType(measure.getDataType()),modelAdaptor.adaptExpression((Expression)measure.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
        }
      }
    }
  }
  calculatedMeasures=query.getDerivedMeasures();
  if (calculatedMeasures == null || calculatedMeasures.size() == 0)   return;
  for (int i=0; i < calculatedMeasures.size(); i++) {
    IDerivedMeasureDefinition dmd=(IDerivedMeasureDefinition)calculatedMeasures.get(i);
    List measureNames=ExpressionCompilerUtil.extractColumnExpression(dmd.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < measureNames.size(); j++) {
      if (!measureNameList.contains(measureNames.get(j).toString()) && !derivedMeasureNameList.contains(measureNames.get(j).toString())) {
        IMeasureDefinition md=query.createMeasure(measureNames.get(j).toString());
        if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
          CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
          MeasureHandle measureHandle=cubeHandle.getMeasure(measureNames.get(j).toString());
          md.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(measureHandle.getFunction()));
        }
      }
    }
  }
}",0.961660744342622
66015,"/** 
 * @throws IOException 
 */
private void setTimeDataType() throws IOException {
  TimeResultRow timeResultRow=null;
  int[] timeAggregationDataType=null;
  for (int i=0; i < this.timeResultSet.size(); i++) {
    timeResultRow=(TimeResultRow)timeResultSet.get(0);
    if (timeResultRow.getValue() == null)     continue;
    boolean existUnknown=false;
    if (timeAggregationDataType == null)     timeAggregationDataType=new int[timeResultRow.getValue().length];
    for (int j=0; j < timeResultRow.getValue().length; j++) {
      if (timeAggregationDataType[j] == DataType.UNKNOWN_TYPE) {
        if (timeResultRow.getValue()[j] != null)         timeAggregationDataType[j]=DataType.getDataType(timeResultRow.getValue()[j].getClass());
 else         existUnknown=true;
      }
    }
    if (!existUnknown) {
      break;
    }
  }
  int[] newAggregationDataType=new int[aggregationDataType.length + timeAggregationDataType.length];
  System.arraycopy(aggregationDataType,0,newAggregationDataType,0,aggregationDataType.length);
  System.arraycopy(timeAggregationDataType,0,newAggregationDataType,aggregationDataType.length,timeAggregationDataType.length);
  aggregationDataType=newAggregationDataType;
}","/** 
 * @throws IOException 
 */
private void setTimeDataType() throws IOException {
  TimeResultRow timeResultRow=null;
  int[] timeAggregationDataType=null;
  for (int i=0; i < this.timeResultSet.size(); i++) {
    timeResultRow=(TimeResultRow)timeResultSet.get(0);
    if (timeResultRow.getValue() == null)     continue;
    boolean existUnknown=false;
    if (timeAggregationDataType == null)     timeAggregationDataType=new int[timeResultRow.getValue().length];
    for (int j=0; j < timeResultRow.getValue().length; j++) {
      if (timeAggregationDataType[j] == DataType.UNKNOWN_TYPE) {
        if (timeResultRow.getValue()[j] != null)         timeAggregationDataType[j]=DataType.getDataType(timeResultRow.getValue()[j].getClass());
 else         existUnknown=true;
      }
    }
    if (!existUnknown) {
      break;
    }
  }
}",0.8188050930460333
66016,"@SuppressWarnings(""String_Node_Str"") private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator<ComputedColumnHandle> bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=bindings.next();
    IBinding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    ChartItemUtil.loadExpression(exprCodec,column);
    binding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,true));
    List<String> lstAggOn=column.getAggregateOnList();
    if (column.getExpression() == null || !bSingleChart && !lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
    }
    registeredBindings.put(binding.getBindingName(),binding);
    registeredQueries.put(binding.getBindingName(),exprCodec.encode());
  }
}","@SuppressWarnings(""String_Node_Str"") private void initBindings(ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  for (Iterator<ComputedColumnHandle> bindings=ChartReportItemUtil.getAllColumnBindingsIterator(handle); bindings.hasNext(); ) {
    ComputedColumnHandle column=bindings.next();
    IBinding binding=new Binding(column.getName());
    binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
    binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
    if (modelAdapter instanceof ModelAdapter) {
      binding.setTimeFunction(((ModelAdapter)modelAdapter).adaptTimeFunction(column));
    }
    ChartItemUtil.loadExpression(exprCodec,column);
    binding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,modelAdapter,true));
    List<String> lstAggOn=column.getAggregateOnList();
    if (column.getExpression() == null || !bSingleChart && !lstAggOn.isEmpty()) {
      addAggregateOn(binding,lstAggOn,cubeQuery,cube);
    }
    registeredBindings.put(binding.getBindingName(),binding);
    registeredQueries.put(binding.getBindingName(),exprCodec.encode());
  }
}",0.9386689865158764
66017,"private ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  if (handle.getCalculationType() == null || handle.getCalculationType().trim().length() == 0)   return null;
  TimeFunction timeFunction=new TimeFunction();
  Object referenceDate=null;
  if (DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY.equals(handle.getReferenceDateType())) {
    referenceDate=ScriptEvalUtil.evalExpr(new ScriptExpression(""String_Node_Str""),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
 else   if (DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE.equals(handle.getReferenceDateType())) {
    IBaseExpression sciptExpr=this.adaptExpression((Expression)(handle.getReferenceDateValue().getValue()));
    referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension());
  timeFunction.setBaseTimePeriod(populateBaseTimePeriod(handle));
  timeFunction.setRelativeTimePeriod(populateRelativeTimePeriod(handle));
  return timeFunction;
}","public ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  if (handle.getCalculationType() == null || handle.getCalculationType().trim().length() == 0)   return null;
  TimeFunction timeFunction=new TimeFunction();
  Object referenceDate=null;
  if (DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY.equals(handle.getReferenceDateType())) {
    referenceDate=ScriptEvalUtil.evalExpr(new ScriptExpression(""String_Node_Str""),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
 else   if (DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE.equals(handle.getReferenceDateType())) {
    IBaseExpression sciptExpr=this.adaptExpression((Expression)(handle.getReferenceDateValue().getValue()));
    referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension());
  timeFunction.setBaseTimePeriod(populateBaseTimePeriod(handle));
  timeFunction.setRelativeTimePeriod(populateRelativeTimePeriod(handle));
  return timeFunction;
}",0.9954601733388362
66018,"private void updateAttrs(EClass eClass,EObject eParentObj,EObject eObj,EObject eRef,EObject eDef){
  List<EAttribute> listMany=new LinkedList<EAttribute>();
  List<EAttribute> list=new LinkedList<EAttribute>();
  for (  EAttribute eAttr : eClass.getEAllAttributes()) {
    if (eAttr.isMany()) {
      listMany.add(eAttr);
    }
 else {
      list.add(eAttr);
    }
  }
  for (  EAttribute eAttr : listMany) {
    List<?> vList=(List<?>)eObj.eGet(eAttr);
    if (vList.size() == 0) {
      if (eRef != null && ((List<?>)eRef.eGet(eAttr)).size() > 0) {
        vList.addAll((List)eRef.eGet(eAttr));
      }
 else       if (eDef != null) {
        vList.addAll((List)eDef.eGet(eAttr));
      }
    }
  }
  for (  EAttribute eAttr : list) {
    Object val=eObj.eGet(eAttr);
    if (eAttr.isUnsettable()) {
      if (!eObj.eIsSet(eAttr)) {
        if (eRef != null && eRef.eIsSet(eAttr)) {
          eObj.eSet(eAttr,eRef.eGet(eAttr));
        }
 else         if (eDef != null) {
          eObj.eSet(eAttr,eDef.eGet(eAttr));
        }
      }
    }
 else     if (val == null) {
      if (eRef != null && eRef.eGet(eAttr) != null) {
        eObj.eSet(eAttr,eRef.eGet(eAttr));
      }
 else       if (eDef != null) {
        eObj.eSet(eAttr,eDef.eGet(eAttr));
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void updateAttrs(EClass eClass,EObject eParentObj,EObject eObj,EObject eRef,EObject eDef){
  List<EAttribute> listMany=new LinkedList<EAttribute>();
  List<EAttribute> list=new LinkedList<EAttribute>();
  for (  EAttribute eAttr : eClass.getEAllAttributes()) {
    if (eAttr.isMany()) {
      listMany.add(eAttr);
    }
 else {
      list.add(eAttr);
    }
  }
  for (  EAttribute eAttr : listMany) {
    List<?> vList=(List<?>)eObj.eGet(eAttr);
    if (vList.size() == 0) {
      if (eRef != null && ((List<?>)eRef.eGet(eAttr)).size() > 0) {
        vList.addAll((List)eRef.eGet(eAttr));
      }
 else       if (eDef != null) {
        vList.addAll((List)eDef.eGet(eAttr));
      }
    }
  }
  for (  EAttribute eAttr : list) {
    Object val=eObj.eGet(eAttr);
    if (eAttr.isUnsettable()) {
      if (!eObj.eIsSet(eAttr)) {
        if (eRef != null && eRef.eIsSet(eAttr)) {
          eObj.eSet(eAttr,eRef.eGet(eAttr));
        }
 else         if (eDef != null && eDef.eIsSet(eAttr)) {
          eObj.eSet(eAttr,eDef.eGet(eAttr));
        }
      }
    }
 else     if (val == null) {
      if (eRef != null && eRef.eGet(eAttr) != null) {
        eObj.eSet(eAttr,eRef.eGet(eAttr));
      }
 else       if (eDef != null) {
        eObj.eSet(eAttr,eDef.eGet(eAttr));
      }
    }
  }
}",0.8752384586035864
66019,"/** 
 * Returns a chart element instance with default value.
 * @param expected
 * @param name
 * @param eObj
 * @return
 */
public EObject getDefault(EClass expected,String name,EObject eObj){
  EObject def=defaultObjCache.get(eObj.getClass().getSimpleName());
  if (def != null) {
    return def;
  }
  Method m;
  try {
    m=eObj.getClass().getMethod(""String_Node_Str"");
    EObject object=(EObject)m.invoke(eObj);
    defaultObjCache.put(eObj.getClass().getSimpleName(),object);
    return object;
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  NoSuchMethodException e) {
    logger.log(e);
  }
catch (  IllegalArgumentException e) {
    logger.log(e);
  }
catch (  IllegalAccessException e) {
    logger.log(e);
  }
catch (  InvocationTargetException e) {
    logger.log(e);
  }
  return null;
}","/** 
 * Returns a chart element instance with default value.
 * @param expected
 * @param name
 * @param eObj
 * @return a chart element instance with default value.
 */
public EObject getDefault(EClass expected,String name,EObject eObj){
  EObject def=defaultObjCache.get(eObj.getClass().getSimpleName());
  if (def != null) {
    return def;
  }
  Method m;
  try {
    m=eObj.getClass().getMethod(""String_Node_Str"");
    EObject object=(EObject)m.invoke(eObj);
    defaultObjCache.put(eObj.getClass().getSimpleName(),object);
    return object;
  }
 catch (  SecurityException e) {
    logger.log(e);
  }
catch (  NoSuchMethodException e) {
    logger.log(e);
  }
catch (  IllegalArgumentException e) {
    logger.log(e);
  }
catch (  IllegalAccessException e) {
    logger.log(e);
  }
catch (  InvocationTargetException e) {
    logger.log(e);
  }
  return null;
}",0.9733885274985216
66020,"/** 
 * Initializes all member variables within this object recursively Note: Manually written
 */
protected void initialize(){
  super.initialize();
  final LineAttributes lia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)lia).set(null,LineStyle.SOLID_LITERAL,1);
  lia.setVisible(true);
  setLineAttributes(lia);
  final LineAttributes weblia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)weblia).set(null,LineStyle.SOLID_LITERAL,1);
  weblia.setVisible(true);
  setWebLineAttributes(weblia);
  final Marker m=AttributeFactory.eINSTANCE.createMarker();
  m.setType(MarkerType.BOX_LITERAL);
  m.setSize(4);
  m.setVisible(true);
  LineAttributes la=AttributeFactory.eINSTANCE.createLineAttributes();
  la.setVisible(true);
  m.setOutline(la);
  setMarker(m);
  final Label lab=LabelImpl.create();
  setWebLabel(lab);
  final Label clab=LabelImpl.create();
  setCatLabel(clab);
  setPaletteLineColor(true);
}","/** 
 * Initializes all member variables within this object recursively Note: Manually written
 */
protected void initialize(){
  super.initialize();
  final LineAttributes lia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)lia).set(null,LineStyle.SOLID_LITERAL,1);
  lia.setVisible(true);
  setLineAttributes(lia);
  final LineAttributes weblia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)weblia).set(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  weblia.setVisible(true);
  setWebLineAttributes(weblia);
  final Marker m=AttributeFactory.eINSTANCE.createMarker();
  m.setType(MarkerType.BOX_LITERAL);
  m.setSize(4);
  m.setVisible(true);
  LineAttributes la=AttributeFactory.eINSTANCE.createLineAttributes();
  la.setVisible(true);
  m.setOutline(la);
  setMarker(m);
  final Label lab=LabelImpl.create();
  setWebLabel(lab);
  final Label clab=LabelImpl.create();
  setCatLabel(clab);
  setPaletteLineColor(true);
}",0.9841107124551512
66021,"/** 
 * Return available orientation even if it is not set.
 * @param chartType
 * @param dimension
 * @param refOrientation
 * @return available orientation
 */
public Orientation getAvailableOrientation(IChartType chartType,String dimension,Orientation refOrientation){
  if (refOrientation == null) {
    return chartType.getDefaultOrientation();
  }
 else   if (refOrientation == Orientation.HORIZONTAL_LITERAL && !chartType.supportsTransposition(dimension)) {
    return chartType.getDefaultOrientation();
  }
  return refOrientation;
}","/** 
 * Return available orientation even if it is not set.
 * @param chartType
 * @param dimension
 * @param refOrientation
 * @return available orientation
 */
protected Orientation getAvailableOrientation(IChartType chartType,String dimension,Orientation refOrientation){
  if (refOrientation == null) {
    return chartType.getDefaultOrientation();
  }
 else   if (refOrientation == Orientation.HORIZONTAL_LITERAL && !chartType.supportsTransposition(dimension)) {
    return chartType.getDefaultOrientation();
  }
  return refOrientation;
}",0.9898617511520738
66022,"/** 
 * Returns available dimension.
 * @param ct
 * @param refDimension
 * @return dimension
 */
public String getAvailableDimension(IChartType ct,String refDimension){
  if (refDimension == null) {
    return ct.getDefaultDimension();
  }
  return refDimension;
}","/** 
 * Returns available dimension.
 * @param ct
 * @param refDimension
 * @return dimension available dimension.
 */
protected String getAvailableDimension(IChartType ct,String refDimension){
  if (refDimension == null) {
    return ct.getDefaultDimension();
  }
  return refDimension;
}",0.9386281588447654
66023,"/** 
 * This method populates the subtype panel (creating its components if necessary). It gets called when the type selection changes or when the dimension selection changes (since not all sub types are supported for all dimension selections).
 * @param sSelectedType Type from Type List
 */
protected void createAndDisplayTypesSheet(String sSelectedType){
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  if (cbOrientation != null) {
    lblOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
    cbOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
  }
  updateDimensionCombo(sSelectedType);
  Vector<IChartSubType> vSubTypes=new Vector<IChartSubType>(chartType.getChartSubtypes(getAvailableDimension(chartType,sDimension),getAvailableOrientation(chartType,sDimension,this.orientation)));
  if (vSubTypes.size() == 0) {
    vSubTypes=new Vector<IChartSubType>(chartType.getChartSubtypes(chartType.getDefaultDimension(),chartType.getDefaultOrientation()));
    this.sDimension=null;
    this.orientation=null;
  }
  if (cbOrientation == null || !cbOrientation.isEnabled()) {
    this.orientation=null;
  }
  ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
  if (chartModel == null) {
    ChartCacheManager.getInstance().cacheCategory(sType,true);
  }
 else   if (chartModel instanceof ChartWithAxes) {
    ChartCacheManager.getInstance().cacheCategory(sType,(((ChartWithAxes)chartModel).getAxes().get(0)).isCategoryAxis());
  }
  createSubtypeBtnGroups(vSubTypes);
  updateOrientationUIState();
  cmpRight.layout();
}","/** 
 * This method populates the subtype panel (creating its components if necessary). It gets called when the type selection changes or when the dimension selection changes (since not all sub types are supported for all dimension selections).
 * @param sSelectedType Type from Type List
 */
protected void createAndDisplayTypesSheet(String sSelectedType){
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  if (cbOrientation != null) {
    lblOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
    cbOrientation.setEnabled(chartType.supportsTransposition() && !is3D());
  }
  updateDimensionCombo(sSelectedType);
  String availDim=getAvailableDimension(chartType,sDimension);
  Vector<IChartSubType> vSubTypes=new Vector<IChartSubType>(chartType.getChartSubtypes(availDim,getAvailableOrientation(chartType,availDim,this.orientation)));
  if (vSubTypes.size() == 0) {
    vSubTypes=new Vector<IChartSubType>(chartType.getChartSubtypes(chartType.getDefaultDimension(),chartType.getDefaultOrientation()));
    this.sDimension=null;
    this.orientation=null;
  }
  if (cbOrientation == null || !cbOrientation.isEnabled()) {
    this.orientation=null;
  }
  ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
  if (chartModel == null) {
    ChartCacheManager.getInstance().cacheCategory(sType,true);
  }
 else   if (chartModel instanceof ChartWithAxes) {
    ChartCacheManager.getInstance().cacheCategory(sType,(((ChartWithAxes)chartModel).getAxes().get(0)).isCategoryAxis());
  }
  createSubtypeBtnGroups(vSubTypes);
  updateOrientationUIState();
  cmpRight.layout();
}",0.9464841319228376
66024,"/** 
 * Initializes all member variables Note: Manually written
 */
protected final void initDefault(){
  super.initDefault();
  Axis xAxisBase=AxisImpl.createDefault(Axis.BASE);
  try {
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    xAxisBase.getOrigin().setValue(null);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",AxisType.TEXT_LITERAL);
    Axis yAxisOrthogonal=AxisImpl.createDefault(Axis.ORTHOGONAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle().getCaption().getFont(),""String_Node_Str"",90);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Orientation.VERTICAL_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    yAxisOrthogonal.getOrigin().setValue(null);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",AxisType.LINEAR_LITERAL);
    xAxisBase.getAssociatedAxes().add(yAxisOrthogonal);
    getAxes().add(xAxisBase);
    setRotation(Rotation3DImpl.createDefault());
  }
 catch (  ChartException e) {
  }
}","/** 
 * Initializes all member variables Note: Manually written
 */
protected final void initDefault(){
  super.initDefault();
  Axis xAxisBase=AxisImpl.createDefault(Axis.BASE);
  try {
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    xAxisBase.getOrigin().setValue(null);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",AxisType.TEXT_LITERAL);
    Axis yAxisOrthogonal=AxisImpl.createDefault(Axis.ORTHOGONAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle().getCaption().getFont(),""String_Node_Str"",90);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Orientation.VERTICAL_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    yAxisOrthogonal.getOrigin().setValue(null);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",AxisType.LINEAR_LITERAL);
    xAxisBase.getAssociatedAxes().add(yAxisOrthogonal);
    getAxes().add(xAxisBase);
    setRotation(Rotation3DImpl.createDefault(new Angle3D[]{Angle3DImpl.createDefault(-20,45,0)}));
  }
 catch (  ChartException e) {
  }
}",0.9841351074718526
66025,"/** 
 * Updates chart element FormatSpecifier.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @generated Don't change this method manually.
 */
protected void updateFormatSpecifierImpl(String name,EObject eParentObj,FormatSpecifier eObj,FormatSpecifier eRefObj,FormatSpecifier eDefObj,boolean eDefOverride){
  if (eObj != null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eRefObj != null) {
    ChartElementUtil.setEObjectAttribute(eParentObj,name,eRefObj,false);
  }
  if (eDefObj != null) {
    ChartElementUtil.setEObjectAttribute(eParentObj,name,eDefObj,false);
  }
}","/** 
 * Updates chart element FormatSpecifier.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @generated Don't change this method manually.
 */
protected void updateFormatSpecifierImpl(String name,EObject eParentObj,FormatSpecifier eObj,FormatSpecifier eRefObj,FormatSpecifier eDefObj,boolean eDefOverride){
  if (eObj != null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eRefObj != null) {
    Object v=eRefObj;
    if (eRefObj instanceof IChartObject) {
      v=eRefObj.copyInstance();
    }
    ChartElementUtil.setEObjectAttribute(eParentObj,name,v,false);
  }
 else   if (eDefObj != null) {
    Object v=eDefObj;
    if (eDefObj instanceof IChartObject) {
      v=eDefObj.copyInstance();
    }
    ChartElementUtil.setEObjectAttribute(eParentObj,name,v,false);
  }
}",0.8710407239819005
66026,"/** 
 * Updates chart element Fill.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @generated Don't change this method manually.
 */
protected void updateFillImpl(String name,EObject eParentObj,Fill eObj,Fill eRefObj,Fill eDefObj,boolean eDefOverride){
  if (eObj != null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eRefObj != null) {
    ChartElementUtil.setEObjectAttribute(eParentObj,name,eRefObj,false);
  }
  if (eDefObj != null) {
    ChartElementUtil.setEObjectAttribute(eParentObj,name,eDefObj,false);
  }
}","/** 
 * Updates chart element Fill.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @generated Don't change this method manually.
 */
protected void updateFillImpl(String name,EObject eParentObj,Fill eObj,Fill eRefObj,Fill eDefObj,boolean eDefOverride){
  if (eObj != null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eRefObj != null) {
    Object v=eRefObj;
    if (eRefObj instanceof IChartObject) {
      v=eRefObj.copyInstance();
    }
    ChartElementUtil.setEObjectAttribute(eParentObj,name,v,false);
  }
 else   if (eDefObj != null) {
    Object v=eDefObj;
    if (eDefObj instanceof IChartObject) {
      v=eDefObj.copyInstance();
    }
    ChartElementUtil.setEObjectAttribute(eParentObj,name,v,false);
  }
}",0.8624849215922799
66027,"private boolean hasWallAndFloor(){
  return (getChart() instanceof ChartWithAxes) && (getChart().getDimension().getValue() != ChartDimension.TWO_DIMENSIONAL);
}","protected boolean hasWallAndFloor(){
  return (getChart() instanceof ChartWithAxes) && (getChart().getDimension().getValue() != ChartDimension.TWO_DIMENSIONAL);
}",0.9751552795031057
66028,"public void doPreview(){
  final Chart chart=getPreviewChartModel();
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chart,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              previewPainter.renderModel((IChartObject)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL));
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}","public void doPreview(){
  try {
    final Chart chart=getPreviewChartModel();
    LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
    lpt.addTask(new LivePreviewTask(){
      public void run(){
        if (previewPainter != null) {
          setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chart,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
        }
      }
    }
);
    lpt.addTask(new LivePreviewTask(){
      public void run(){
        if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
          previewCanvas.getDisplay().syncExec(new Runnable(){
            public void run(){
              if (previewPainter != null) {
                previewPainter.renderModel((IChartObject)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL));
              }
            }
          }
);
        }
      }
    }
);
    ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
    ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
  }
 catch (  ChartException e) {
    WizardBase.showException(e.getMessage());
  }
}",0.9426699426699426
66029,"protected Chart getPreviewChartModel(){
  return getCurrentModelState();
}","protected Chart getPreviewChartModel() throws ChartException {
  return getCurrentModelState();
}",0.8654970760233918
66030,"public void doPreview(){
  final Chart chart=getPreviewChartModel();
  if (chart instanceof ChartWithAxes) {
    ChartAdapter.beginIgnoreNotifications();
    checkDataTypeForChartWithAxes();
    ChartAdapter.endIgnoreNotifications();
  }
 else {
    ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
  }
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chart,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}","public void doPreview(){
  try {
    final Chart chart=getPreviewChartModel();
    if (chart instanceof ChartWithAxes) {
      ChartAdapter.beginIgnoreNotifications();
      checkDataTypeForChartWithAxes();
      ChartAdapter.endIgnoreNotifications();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
    lpt.addTask(new LivePreviewTask(){
      public void run(){
        if (previewPainter != null) {
          setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chart,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
        }
      }
    }
);
    lpt.addTask(new LivePreviewTask(){
      public void run(){
        if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
          previewCanvas.getDisplay().syncExec(new Runnable(){
            public void run(){
              if (previewPainter != null) {
                Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
                previewPainter.renderModel(cm);
              }
            }
          }
);
        }
      }
    }
);
    ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
    ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
  }
 catch (  ChartException e) {
    WizardBase.showException(e.getMessage());
  }
}",0.9482071713147412
66031,"protected Chart getPreviewChartModel(){
  if (getContext() == null) {
    return null;
  }
  return getContext().getModel();
}","protected Chart getPreviewChartModel() throws ChartException {
  if (getContext() == null) {
    return null;
  }
  return getContext().getModel();
}",0.9163636363636364
66032,"public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    seriesDefn.getDesignTimeSeries().setSeriesIdentifier(txtTitle.getText());
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    String text=txtTitle.getText();
    if (text == null || text.trim().length() == 0) {
      seriesDefn.getDesignTimeSeries().setSeriesIdentifier(null);
    }
 else {
      seriesDefn.getDesignTimeSeries().setSeriesIdentifier(txtTitle.getText());
    }
  }
}",0.5714285714285714
66033,"public void placeComponents(Composite parent){
  Series series=seriesDefn.getDesignTimeSeries();
  linkSeries=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkSeries.setLayoutData(gd);
    linkSeries.setText(""String_Node_Str"" + seriesName + ""String_Node_Str"");
    linkSeries.addSelectionListener(this);
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(parent,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),series.getSeriesIdentifier().toString());
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbTypes.setLayoutData(gd);
    cmbTypes.addSelectionListener(this);
    if (iSeriesDefinitionIndex == 0) {
      cmbTypes.setEnabled(false);
    }
  }
  if (!series.getClass().isAssignableFrom(SeriesImpl.class)) {
    initZOrderUI(parent);
    initVisibleUI(parent,series);
    initStackUI(parent,series);
    initTranslucentUI(parent,series);
    setTypeComboState();
    setStackedBoxState();
  }
 else {
    Label dummy=new Label(parent,SWT.CHECK);
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    dummy.setLayoutData(gd);
  }
  populateLists(seriesDefn.getDesignTimeSeries());
}","public void placeComponents(Composite parent){
  Series series=seriesDefn.getDesignTimeSeries();
  linkSeries=new Link(parent,SWT.NONE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    linkSeries.setLayoutData(gd);
    linkSeries.setText(""String_Node_Str"" + seriesName + ""String_Node_Str"");
    linkSeries.addSelectionListener(this);
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(parent,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getSeriesIdentifierText(series));
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  cmbTypes=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmbTypes.setLayoutData(gd);
    cmbTypes.addSelectionListener(this);
    if (iSeriesDefinitionIndex == 0) {
      cmbTypes.setEnabled(false);
    }
  }
  if (!series.getClass().isAssignableFrom(SeriesImpl.class)) {
    initZOrderUI(parent);
    initVisibleUI(parent,series);
    initStackUI(parent,series);
    initTranslucentUI(parent,series);
    setTypeComboState();
    setStackedBoxState();
  }
 else {
    Label dummy=new Label(parent,SWT.CHECK);
    GridData gd=new GridData();
    gd.horizontalSpan=4;
    dummy.setLayoutData(gd);
  }
  populateLists(seriesDefn.getDesignTimeSeries());
}",0.9900464499004644
66034,"private static boolean needSeriesName(String name,String seriesText){
  String pattern=MessageFormat.format(seriesText,new Object[]{""String_Node_Str""});
  return name.trim().matches(pattern) || name.trim().length() == 0;
}","private static boolean needSeriesName(String name,String seriesText){
  if (name == null) {
    return false;
  }
  String pattern=MessageFormat.format(seriesText,new Object[]{""String_Node_Str""});
  return name.trim().matches(pattern) || name.trim().length() == 0;
}",0.9098360655737704
66035,"/** 
 * Returns all chart type instances.
 * @return
 */
public static Iterator<IChartType> getChartTypeInstancesIterator(){
  return htTypes.values().iterator();
}","/** 
 * Returns all chart type instances.
 * @return chart type iterator.
 */
public static Iterator<IChartType> getChartTypeInstancesIterator(){
  return htTypes.values().iterator();
}",0.9398280802292264
66036,"/** 
 * Add default name for series.
 * @param chart
 * @param series
 * @since 2.3
 */
public static void setSeriesName(Chart chart){
  List<SeriesDefinition> seriesDefinitions=getAllOrthogonalSeriesDefinitions(chart);
  String seriesText=Messages.getString(""String_Node_Str"");
  SeriesDefinition sd;
  for (int i=0; i < seriesDefinitions.size(); i++) {
    sd=seriesDefinitions.get(i);
    if (needSeriesName(sd.getDesignTimeSeries().getSeriesIdentifier().toString(),seriesText)) {
      sd.getDesignTimeSeries().setSeriesIdentifier(MessageFormat.format(seriesText,new Object[]{Integer.valueOf(i + 1)}));
    }
  }
}","/** 
 * Add default name for series.
 * @param chart
 * @param series
 * @since 2.3
 */
public static void setSeriesName(Chart chart){
  List<SeriesDefinition> seriesDefinitions=getAllOrthogonalSeriesDefinitions(chart);
  String seriesText=Messages.getString(""String_Node_Str"");
  SeriesDefinition sd;
  for (int i=0; i < seriesDefinitions.size(); i++) {
    sd=seriesDefinitions.get(i);
    if (needSeriesName(sd.getDesignTimeSeries().getSeriesIdentifier() == null ? null : sd.getDesignTimeSeries().getSeriesIdentifier().toString(),seriesText)) {
      sd.getDesignTimeSeries().setSeriesIdentifier(MessageFormat.format(seriesText,new Object[]{Integer.valueOf(i + 1)}));
    }
  }
}",0.9507692307692308
66037,"public void startPage(float pageWidth,float pageHeight,String orientation){
  this.orientation=orientation;
  this.pageHeight=pageHeight;
  out.println(""String_Node_Str"" + pageIndex + ""String_Node_Str""+ pageIndex);
  boolean isLandscape=orientation != null && orientation.equalsIgnoreCase(""String_Node_Str"");
  if (autoPaperSizeSelection) {
    if (isLandscape) {
      setPaperSize(""String_Node_Str"",(int)pageHeight,(int)pageWidth);
    }
 else {
      setPaperSize(""String_Node_Str"",(int)pageWidth,(int)pageHeight);
    }
    setPaperTray(AUTO_PAPER_TRAY_STRING);
  }
  out.println(""String_Node_Str"" + (int)Math.round(pageWidth) + ""String_Node_Str""+ (int)Math.round(pageHeight));
  out.println(""String_Node_Str"");
  if (fitToPaper && paperWidth != 0 && paperHeight != 0) {
    int height=isLandscape ? (int)pageWidth : (int)pageHeight;
    int width=isLandscape ? (int)pageHeight : (int)pageWidth;
    out.println(paperWidth + ""String_Node_Str"" + width+ ""String_Node_Str""+ paperHeight+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  }
  if (isLandscape) {
    gSave();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.print(""String_Node_Str"");
    out.println(pageHeight + ""String_Node_Str"");
  }
  setScale((int)pageHeight,scale);
  ++pageIndex;
}","public void startPage(float pageWidth,float pageHeight,String orientation){
  boolean isLandscape=isLandscape(orientation);
  boolean paperChanged=this.pageHeight == pageHeight && this.pageWidth == pageWidth && isLandscape == isLandscape(this.orientation);
  this.orientation=orientation;
  this.pageHeight=pageHeight;
  this.pageWidth=pageWidth;
  out.println(""String_Node_Str"" + pageIndex + ""String_Node_Str""+ pageIndex);
  if (autoPaperSizeSelection && (!isDuplex || paperChanged)) {
    if (isLandscape) {
      setPaperSize(""String_Node_Str"",(int)pageHeight,(int)pageWidth);
    }
 else {
      setPaperSize(""String_Node_Str"",(int)pageWidth,(int)pageHeight);
    }
    setPaperTray(AUTO_PAPER_TRAY_STRING);
  }
  out.println(""String_Node_Str"" + (int)Math.round(pageWidth) + ""String_Node_Str""+ (int)Math.round(pageHeight));
  out.println(""String_Node_Str"");
  if (fitToPaper && paperWidth != 0 && paperHeight != 0) {
    int height=isLandscape ? (int)pageWidth : (int)pageHeight;
    int width=isLandscape ? (int)pageHeight : (int)pageWidth;
    out.println(paperWidth + ""String_Node_Str"" + width+ ""String_Node_Str""+ paperHeight+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  }
  if (isLandscape) {
    gSave();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.print(""String_Node_Str"");
    out.println(pageHeight + ""String_Node_Str"");
  }
  setScale((int)pageHeight,scale);
  ++pageIndex;
}",0.7802359882005899
66038,"private void setDuplex(Object duplex){
  String duplexValue=null;
  boolean tumble=false;
  if (duplex instanceof String) {
    String value=(String)duplex;
    if (""String_Node_Str"".equalsIgnoreCase(value)) {
      return;
    }
    if (""String_Node_Str"".equalsIgnoreCase(value)) {
      duplexValue=""String_Node_Str"";
      tumble=false;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(value)) {
      duplexValue=""String_Node_Str"";
      tumble=true;
    }
  }
 else   if (duplex instanceof Integer) {
    int value=(Integer)duplex;
    if (value == IPostscriptRenderOption.DUPLEX_SIMPLEX) {
      return;
    }
    if (value == IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE) {
      duplexValue=""String_Node_Str"";
      tumble=false;
    }
 else     if (value == IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE) {
      duplexValue=""String_Node_Str"";
      tumble=true;
    }
  }
  out.println(""String_Node_Str"" + duplexValue);
  out.println(""String_Node_Str"" + tumble + ""String_Node_Str"");
  if (tumble) {
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
}","private void setDuplex(Object duplex){
  String duplexValue=null;
  boolean tumble=false;
  if (duplex instanceof String) {
    String value=(String)duplex;
    if (""String_Node_Str"".equalsIgnoreCase(value)) {
      return;
    }
    isDuplex=true;
    if (""String_Node_Str"".equalsIgnoreCase(value)) {
      duplexValue=""String_Node_Str"";
      tumble=false;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(value)) {
      duplexValue=""String_Node_Str"";
      tumble=true;
    }
  }
 else   if (duplex instanceof Integer) {
    int value=(Integer)duplex;
    if (value == IPostscriptRenderOption.DUPLEX_SIMPLEX) {
      return;
    }
    isDuplex=true;
    if (value == IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE) {
      duplexValue=""String_Node_Str"";
      tumble=false;
    }
 else     if (value == IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE) {
      duplexValue=""String_Node_Str"";
      tumble=true;
    }
  }
  out.println(""String_Node_Str"" + duplexValue);
  out.println(""String_Node_Str"" + tumble + ""String_Node_Str"");
  if (tumble) {
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
}",0.9829901521933752
66039,"private void populateMeasureDefinitionForCalculateMeasures(ICubeQueryDefinition query) throws DataException, AdapterException {
  List calculatedMeasures=query.getDerivedMeasures();
  if (calculatedMeasures == null || calculatedMeasures.size() == 0)   return;
  List measures=query.getMeasures();
  List measureNameList=new ArrayList();
  for (int i=0; i < measures.size(); i++) {
    measureNameList.add(((IMeasureDefinition)measures.get(i)).getName());
  }
  List derivedMeasureNameList=new ArrayList();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureNameList.add(((IDerivedMeasureDefinition)calculatedMeasures.get(i)).getName());
  }
  for (int i=0; i < calculatedMeasures.size(); i++) {
    IDerivedMeasureDefinition dmd=(IDerivedMeasureDefinition)calculatedMeasures.get(i);
    List measureNames=ExpressionCompilerUtil.extractColumnExpression(dmd.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < measureNames.size(); j++) {
      if (!measureNameList.contains(measureNames.get(j).toString()) && !derivedMeasureNameList.contains(measureNames.get(j).toString())) {
        IMeasureDefinition md=query.createMeasure(measureNames.get(j).toString());
        if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
          CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
          MeasureHandle measureHandle=cubeHandle.getMeasure(measureNames.get(j).toString());
          md.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(measureHandle.getFunction()));
        }
      }
    }
  }
}","private void populateMeasureDefinitionForCalculateMeasures(ICubeQueryDefinition query) throws DataException, AdapterException {
  List calculatedMeasures=query.getDerivedMeasures();
  if (calculatedMeasures == null || calculatedMeasures.size() == 0)   return;
  List measures=query.getMeasures();
  List measureNameList=new ArrayList();
  for (int i=0; i < measures.size(); i++) {
    measureNameList.add(((IMeasureDefinition)measures.get(i)).getName());
  }
  List derivedMeasureNameList=new ArrayList();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureNameList.add(((IDerivedMeasureDefinition)calculatedMeasures.get(i)).getName());
  }
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measureGroup=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measureGroup.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measureGroup.get(j);
        if (measure.isCalculated() && !derivedMeasureNameList.contains(measure.getName())) {
          derivedMeasureNameList.add(measure.getName());
          query.createDerivedMeasure(measure.getName(),DataAdapterUtil.adaptModelDataType(measure.getDataType()),modelAdaptor.adaptExpression((Expression)measure.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
        }
      }
    }
  }
  for (int i=0; i < calculatedMeasures.size(); i++) {
    IDerivedMeasureDefinition dmd=(IDerivedMeasureDefinition)calculatedMeasures.get(i);
    List measureNames=ExpressionCompilerUtil.extractColumnExpression(dmd.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < measureNames.size(); j++) {
      if (!measureNameList.contains(measureNames.get(j).toString()) && !derivedMeasureNameList.contains(measureNames.get(j).toString())) {
        IMeasureDefinition md=query.createMeasure(measureNames.get(j).toString());
        if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
          CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
          MeasureHandle measureHandle=cubeHandle.getMeasure(measureNames.get(j).toString());
          md.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(measureHandle.getFunction()));
        }
      }
    }
  }
}",0.7607017543859649
66040,"protected void retrieveWeek(List<TimeMember> list,Calendar cal,String[] levels,String type){
  int endWeek=cal.get(Calendar.WEEK_OF_YEAR);
  int startWeek=1;
  int startMonth=1;
  Calendar startCal=(Calendar)cal.clone();
  if (type.equals(""String_Node_Str"")) {
    startCal.set(Calendar.MONTH,0);
    startCal.set(Calendar.DAY_OF_MONTH,1);
    if (startCal.get(Calendar.WEEK_OF_YEAR) > 1) {
      int[] newValues=getValueFromCal(startCal,levels);
      TimeMember newMember=new TimeMember(newValues,levels);
      list.add(newMember);
      startCal.add(Calendar.WEEK_OF_YEAR,1);
    }
    startWeek=1;
  }
 else   if (type.equals(""String_Node_Str"")) {
    int quarter=cal.get(Calendar.MONTH) / 3 + 1;
    startMonth=quarter * 3 - 2;
    startCal.set(Calendar.MONTH,startMonth - 1);
    startCal.set(Calendar.DAY_OF_MONTH,1);
    startWeek=startCal.get(Calendar.WEEK_OF_YEAR);
  }
 else   if (type.equals(""String_Node_Str"")) {
    startMonth=cal.get(Calendar.MONTH);
    startCal.set(Calendar.MONTH,startMonth);
    startCal.set(Calendar.DAY_OF_MONTH,1);
    startWeek=startCal.get(Calendar.WEEK_OF_YEAR);
  }
  TimeMember newMember=null;
  for (int i=startWeek; i <= endWeek; i++) {
    int[] newValues=getValueFromCal(startCal,levels);
    newMember=new TimeMember(newValues,levels);
    list.add(newMember);
    if (i != startWeek && isAddExtraWeek(type,startCal)) {
      addExtraWeek(list,startCal,newMember,levels);
    }
    startCal.add(Calendar.WEEK_OF_YEAR,1);
    startCal.set(Calendar.DAY_OF_WEEK,1);
  }
}","protected void retrieveWeek(List<TimeMember> list,Calendar cal,String[] levels,String type){
  int endWeek=cal.get(Calendar.WEEK_OF_YEAR);
  int startWeek=1;
  int startMonth=1;
  Calendar startCal=(Calendar)cal.clone();
  if (type.equals(""String_Node_Str"")) {
    startCal.set(Calendar.MONTH,0);
    startCal.set(Calendar.DAY_OF_MONTH,1);
    if (startCal.get(Calendar.WEEK_OF_YEAR) > 1) {
      int[] newValues=getValueFromCal(startCal,levels);
      TimeMember newMember=new TimeMember(newValues,levels);
      list.add(newMember);
      startCal.add(Calendar.WEEK_OF_YEAR,1);
    }
    startWeek=1;
  }
 else   if (type.equals(""String_Node_Str"")) {
    int quarter=cal.get(Calendar.MONTH) / 3 + 1;
    startMonth=quarter * 3 - 3;
    startCal.set(Calendar.MONTH,startMonth);
    startCal.set(Calendar.DAY_OF_MONTH,1);
    if (startMonth == 0 && startCal.get(Calendar.WEEK_OF_YEAR) > 1) {
      int[] newValues=getValueFromCal(startCal,levels);
      TimeMember newMember=new TimeMember(newValues,levels);
      list.add(newMember);
      startCal.add(Calendar.WEEK_OF_YEAR,1);
    }
    startWeek=startCal.get(Calendar.WEEK_OF_YEAR);
  }
 else   if (type.equals(""String_Node_Str"")) {
    startMonth=cal.get(Calendar.MONTH);
    startCal.set(Calendar.MONTH,startMonth);
    startCal.set(Calendar.DAY_OF_MONTH,1);
    if (startMonth == 0 && startCal.get(Calendar.WEEK_OF_YEAR) > 1) {
      int[] newValues=getValueFromCal(startCal,levels);
      TimeMember newMember=new TimeMember(newValues,levels);
      list.add(newMember);
      startCal.add(Calendar.WEEK_OF_YEAR,1);
    }
    startWeek=startCal.get(Calendar.WEEK_OF_YEAR);
  }
  TimeMember newMember=null;
  for (int i=startWeek; i <= endWeek; i++) {
    int[] newValues=getValueFromCal(startCal,levels);
    newMember=new TimeMember(newValues,levels);
    list.add(newMember);
    if (i != startWeek && isAddExtraWeek(type,startCal)) {
      addExtraWeek(list,startCal,newMember,levels);
    }
    startCal.add(Calendar.WEEK_OF_YEAR,1);
    startCal.set(Calendar.DAY_OF_WEEK,1);
  }
}",0.8495227400336889
66041,"/** 
 * translate the TimeMember.values to Calendar return the base level(""year"",""month"",""day""...)
 * @param cal
 * @param levelTypes
 * @param values
 * @return
 */
protected String translateToCal(Calendar cal,String[] levelTypes,int[] values){
  String type=""String_Node_Str"";
  int dayOfWeek=1;
  for (int i=0; i < values.length; i++) {
    if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_YEAR)) {
      cal.set(Calendar.YEAR,values[i]);
      type=YEAR;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_QUARTER)) {
      cal.set(Calendar.MONTH,values[i] * 3 - 1);
      type=QUARTER;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_MONTH)) {
      cal.set(Calendar.MONTH,values[i] - 1);
      type=MONTH;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH)) {
      if (referenceDate != null && referenceDate.getDate() != null) {
        dayOfWeek=referenceDate.getDate().getDay();
        cal.set(Calendar.DAY_OF_WEEK,dayOfWeek + 1);
      }
 else {
        int year_woy=cal.get(Calendar.YEAR_WOY);
        int year=cal.get(Calendar.YEAR);
        if (year_woy < year) {
          cal.add(Calendar.DAY_OF_WEEK,7);
        }
        cal.set(Calendar.DAY_OF_WEEK,1);
      }
      cal.set(Calendar.WEEK_OF_MONTH,values[i]);
      type=WEEK;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR)) {
      if (referenceDate != null && referenceDate.getDate() != null) {
        dayOfWeek=referenceDate.getDate().getDay();
        cal.set(Calendar.DAY_OF_WEEK,dayOfWeek + 1);
      }
 else {
        int year_woy=cal.get(Calendar.YEAR_WOY);
        int year=cal.get(Calendar.YEAR);
        if (year_woy < year) {
          cal.add(Calendar.DAY_OF_WEEK,7);
        }
        cal.set(Calendar.DAY_OF_WEEK,1);
      }
      cal.set(Calendar.WEEK_OF_YEAR,values[i]);
      type=WEEK;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK)) {
      cal.get(Calendar.DAY_OF_WEEK);
      cal.set(Calendar.DAY_OF_WEEK,values[i]);
      type=DAY;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH)) {
      cal.set(Calendar.DAY_OF_MONTH,values[i]);
      type=DAY;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR)) {
      cal.set(Calendar.DAY_OF_YEAR,values[i]);
      type=DAY;
    }
  }
  this.referenceDate=new ReferenceDate(cal.getTime());
  return type;
}","/** 
 * translate the TimeMember.values to Calendar return the base level(""year"",""month"",""day""...)
 * @param cal
 * @param levelTypes
 * @param values
 * @return
 */
protected String translateToCal(Calendar cal,String[] levelTypes,int[] values){
  String type=""String_Node_Str"";
  int dayOfWeek=1;
  int month=1;
  for (int i=0; i < values.length; i++) {
    if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_YEAR)) {
      cal.set(Calendar.YEAR,values[i]);
      type=YEAR;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_QUARTER)) {
      cal.set(Calendar.MONTH,values[i] * 3 - 1);
      type=QUARTER;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_MONTH)) {
      cal.set(Calendar.MONTH,values[i] - 1);
      type=MONTH;
      month=values[i] - 1;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH)) {
      if (referenceDate != null && referenceDate.getDate() != null) {
        dayOfWeek=referenceDate.getDate().getDay();
        cal.set(Calendar.DAY_OF_WEEK,dayOfWeek + 1);
      }
 else {
        int year_woy=cal.get(Calendar.YEAR_WOY);
        int year=cal.get(Calendar.YEAR);
        if (year_woy < year) {
          cal.add(Calendar.DAY_OF_WEEK,7);
        }
        cal.set(Calendar.DAY_OF_WEEK,1);
      }
      cal.set(Calendar.WEEK_OF_MONTH,values[i]);
      setAcrossMonthWeekDay(cal,month);
      type=WEEK;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR)) {
      if (referenceDate != null && referenceDate.getDate() != null) {
        dayOfWeek=referenceDate.getDate().getDay();
        cal.set(Calendar.DAY_OF_WEEK,dayOfWeek + 1);
      }
 else {
        int year_woy=cal.get(Calendar.YEAR_WOY);
        int year=cal.get(Calendar.YEAR);
        if (year_woy < year) {
          cal.add(Calendar.DAY_OF_WEEK,7);
        }
        cal.set(Calendar.DAY_OF_WEEK,1);
      }
      cal.set(Calendar.WEEK_OF_YEAR,values[i]);
      setAcrossMonthWeekDay(cal,month);
      type=WEEK;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK)) {
      cal.get(Calendar.DAY_OF_WEEK);
      cal.set(Calendar.DAY_OF_WEEK,values[i]);
      type=DAY;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH)) {
      cal.set(Calendar.DAY_OF_MONTH,values[i]);
      type=DAY;
    }
 else     if (levelTypes[i].equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR)) {
      cal.set(Calendar.DAY_OF_YEAR,values[i]);
      type=DAY;
    }
  }
  this.referenceDate=new ReferenceDate(cal.getTime());
  return type;
}",0.9756389776357828
66042,"public TimeMember getResult(TimeMember member){
  String[] levels=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar(TimeMemberUtil.getTimeZone(),TimeMemberUtil.getDefaultLocale());
  cal.clear();
  translateToCal(cal,levels,values);
  if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_YEAR))   cal.add(Calendar.YEAR,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_QUARTER))   cal.add(Calendar.MONTH,offset * 3);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_MONTH))   cal.add(Calendar.MONTH,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH))   cal.add(Calendar.WEEK_OF_MONTH,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR))   cal.add(Calendar.WEEK_OF_YEAR,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH))   cal.add(Calendar.DAY_OF_MONTH,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR))   cal.add(Calendar.DAY_OF_YEAR,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK))   cal.add(Calendar.DAY_OF_WEEK,offset);
  setReferenceDate(new ReferenceDate(cal.getTime()));
  int[] newValues=getValueFromCal(cal,levels);
  TimeMember newMember=new TimeMember(newValues,levels);
  return newMember;
}","public TimeMember getResult(TimeMember member){
  String[] levels=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar(TimeMemberUtil.getTimeZone(),TimeMemberUtil.getDefaultLocale());
  cal.clear();
  translateToCal(cal,levels,values);
  if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_YEAR))   cal.add(Calendar.YEAR,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_QUARTER))   cal.add(Calendar.MONTH,offset * 3);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_MONTH))   cal.add(Calendar.MONTH,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH))   cal.add(Calendar.WEEK_OF_MONTH,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR))   cal.add(Calendar.WEEK_OF_YEAR,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH))   cal.add(Calendar.DAY_OF_MONTH,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR))   cal.add(Calendar.DAY_OF_YEAR,offset);
 else   if (levelName.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK))   cal.add(Calendar.DAY_OF_WEEK,offset);
  int[] newValues=getValueFromCal(cal,levels);
  TimeMember newMember=new TimeMember(newValues,levels);
  return newMember;
}",0.978988326848249
66043,"protected void initUIComponents(Group grpLine){
  liacStock=new LineAttributesComposite(grpLine,SWT.NONE,context,series.getLineAttributes(),true,true,false,true,true);
  GridData gdLIACStock=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACStock.verticalSpan=3;
  liacStock.setLayoutData(gdLIACStock);
  liacStock.addListener(this);
  if (series.isShowAsBarStick()) {
    new Label(grpLine,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    iscStick=new Spinner(grpLine,SWT.BORDER);
    iscStick.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    iscStick.setMinimum(0);
    iscStick.setMaximum(Integer.MAX_VALUE);
    iscStick.setSelection(series.getStickLength());
    iscStick.addSelectionListener(this);
    btnAuto=new Button(grpLine,SWT.CHECK);
    btnAuto.setText(ChartUIExtensionUtil.getAutoMessage());
    btnAuto.addSelectionListener(this);
    GridData gd=new GridData();
    btnAuto.setLayoutData(gd);
    btnAuto.setSelection(!series.isSetStickLength());
    iscStick.setEnabled(!btnAuto.getSelection());
  }
}","protected void initUIComponents(Group grpLine){
  liacStock=new LineAttributesComposite(grpLine,SWT.NONE,context,series.getLineAttributes(),true,true,false,true,true);
  GridData gdLIACStock=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACStock.verticalSpan=3;
  liacStock.setLayoutData(gdLIACStock);
  liacStock.addListener(this);
  if (needStickLength()) {
    Composite comp=new Composite(grpLine,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    comp.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    gl.numColumns=3;
    gl.marginBottom=0;
    gl.marginHeight=0;
    gl.marginLeft=0;
    gl.marginRight=0;
    gl.marginTop=0;
    gl.marginWidth=0;
    comp.setLayout(gl);
    new Label(comp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    iscStick=new Spinner(comp,SWT.BORDER);
    iscStick.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    iscStick.setMinimum(0);
    iscStick.setMaximum(Integer.MAX_VALUE);
    iscStick.setSelection(series.getStickLength());
    iscStick.addSelectionListener(this);
    btnAuto=new Button(comp,SWT.CHECK);
    btnAuto.setText(ChartUIExtensionUtil.getAutoMessage());
    btnAuto.addSelectionListener(this);
    gd=new GridData();
    btnAuto.setLayoutData(gd);
    btnAuto.setSelection(!series.isSetShowAsBarStick() || series.isShowAsBarStick());
    iscStick.setEnabled(!btnAuto.getSelection());
  }
}",0.6298252742787485
66044,"protected void placeComponents(){
  this.setLayout(new GridLayout());
  Group grpLine=new Group(this,SWT.NONE);
{
    grpLine.setText(Messages.getString(""String_Node_Str""));
    GridLayout glLine=new GridLayout();
    glLine.numColumns=series.isShowAsBarStick() ? 4 : 1;
    grpLine.setLayout(glLine);
    grpLine.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  initUIComponents(grpLine);
}","protected void placeComponents(){
  this.setLayout(new GridLayout());
  Group grpLine=new Group(this,SWT.NONE);
{
    grpLine.setText(Messages.getString(""String_Node_Str""));
    GridLayout glLine=new GridLayout();
    glLine.numColumns=needStickLength() ? 4 : 1;
    grpLine.setLayout(glLine);
    grpLine.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  initUIComponents(grpLine);
}",0.9649122807017544
66045,"@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
  if (measureViewHandle == null) {
    return false;
  }
  if (DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle())) {
    return false;
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  CubeHandle cube=reportHandle.getCube();
  if (cube == null) {
    return false;
  }
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
  if (measureViewHandle == null) {
    return false;
  }
  if (DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle())) {
    return false;
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  CubeHandle cube=reportHandle.getCube();
  if (cube == null) {
    return false;
  }
  if (cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP) == null) {
    return false;
  }
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9699453551912568
66046,"protected void bindBinding(IBinding colBinding,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (colBinding == null) {
    return;
  }
  String bindingName=colBinding.getBindingName();
  String expr=registeredQueries.get(bindingName);
  if (!cubeQuery.getBindings().contains(colBinding)) {
    cubeQuery.addBinding(colBinding);
  }
  String measure=exprCodec.getMeasureName(expr);
  if (measure != null) {
    if (registeredMeasures.containsKey(bindingName)) {
      return;
    }
    IMeasureDefinition mDef=cubeQuery.createMeasure(measure);
    String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
    mDef.setAggrFunction(aggFun);
    registeredMeasures.put(bindingName,mDef);
  }
 else   if (exprCodec.isDimensionExpresion()) {
    registerDimensionLevel(cubeQuery,cube,bindingName);
  }
 else   if (exprCodec.isCubeBinding(true)) {
    bindExpression(expr,cubeQuery,cube);
    return;
  }
}","protected void bindBinding(IBinding colBinding,ICubeQueryDefinition cubeQuery,CubeHandle cube) throws BirtException {
  if (colBinding == null) {
    return;
  }
  String bindingName=colBinding.getBindingName();
  String expr=registeredQueries.get(bindingName);
  if (!cubeQuery.getBindings().contains(colBinding)) {
    cubeQuery.addBinding(colBinding);
  }
  String measure=exprCodec.getMeasureName(expr);
  if (measure != null) {
    if (registeredMeasures.containsKey(bindingName)) {
      return;
    }
    IMeasureDefinition mDef=null;
    MeasureHandle measureHandle=cube.getMeasure(measure);
    if (measureHandle != null && measureHandle.isCalculated()) {
      mDef=cubeQuery.createDerivedMeasure(measure,DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()),modelAdapter.adaptExpression((Expression)measureHandle.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP).getValue(),ExpressionLocation.CUBE));
    }
 else {
      mDef=cubeQuery.createMeasure(measure);
    }
    registeredMeasures.put(bindingName,mDef);
    String aggFun=DataAdapterUtil.adaptModelAggregationType(cube.getMeasure(measure).getFunction());
    mDef.setAggrFunction(aggFun);
  }
 else   if (exprCodec.isDimensionExpresion()) {
    registerDimensionLevel(cubeQuery,cube,bindingName);
  }
 else   if (exprCodec.isCubeBinding(true)) {
    bindExpression(expr,cubeQuery,cube);
    return;
  }
}",0.7796610169491526
66047,"public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  super.translateFrom(series,iSeriesDefinitionIndex,chart);
  for (Iterator<Marker> itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=itr.next();
    mk.setVisible(false);
  }
}","public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  super.translateFrom(series,iSeriesDefinitionIndex,chart);
  for (Iterator<Marker> itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=itr.next();
    mk.unsetVisible();
  }
}",0.9869646182495344
66048,"public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  this.setLabel(series.getLabel());
  if (series.getLabelPosition().equals(Position.INSIDE_LITERAL) || series.getLabelPosition().equals(Position.OUTSIDE_LITERAL)) {
    this.setLabelPosition(series.getLabelPosition());
  }
 else {
    this.setLabelPosition(Position.OUTSIDE_LITERAL);
  }
  this.setVisible(series.isVisible());
  this.setStacked(series.isStacked());
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_Triggers())) {
    this.getTriggers().addAll(series.getTriggers());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataPoint())) {
    this.setDataPoint(series.getDataPoint());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataDefinition())) {
    this.getDataDefinition().add(series.getDataDefinition().get(0));
  }
  if (series instanceof BarSeries) {
    this.setRiserOutline(((BarSeries)series).getRiserOutline());
  }
 else   if (series instanceof PieSeries) {
    this.setRiserOutline(((PieSeries)series).getSliceOutline());
  }
 else   if (series instanceof StockSeries) {
    this.setRiserOutline(((StockSeries)series).getLineAttributes().getColor());
  }
  if (chart instanceof ChartWithAxes) {
    ((ChartWithAxes)chart).getAxes().get(0).setCategoryAxis(true);
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{chart.getClass().getName()},ULocale.getDefault()));
  }
  chart.setSampleData(getConvertedSampleData(chart.getSampleData(),iSeriesDefinitionIndex));
}","public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  this.setLabel(series.getLabel());
  if (series.isSetLabelPosition()) {
    if (series.getLabelPosition().equals(Position.INSIDE_LITERAL) || series.getLabelPosition().equals(Position.OUTSIDE_LITERAL)) {
      this.setLabelPosition(series.getLabelPosition());
    }
 else {
      this.setLabelPosition(Position.OUTSIDE_LITERAL);
    }
  }
  if (series.isSetVisible()) {
    this.setVisible(series.isVisible());
  }
  if (series.isSetStacked()) {
    this.setStacked(series.isStacked());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_Triggers())) {
    this.getTriggers().addAll(series.getTriggers());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataPoint())) {
    this.setDataPoint(series.getDataPoint());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataDefinition())) {
    this.getDataDefinition().add(series.getDataDefinition().get(0));
  }
  if (series instanceof BarSeries) {
    this.setRiserOutline(((BarSeries)series).getRiserOutline());
  }
 else   if (series instanceof PieSeries) {
    this.setRiserOutline(((PieSeries)series).getSliceOutline());
  }
 else   if (series instanceof StockSeries) {
    this.setRiserOutline(((StockSeries)series).getLineAttributes().getColor());
  }
  if (!(chart instanceof ChartWithAxes)) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{chart.getClass().getName()},ULocale.getDefault()));
  }
  chart.setSampleData(getConvertedSampleData(chart.getSampleData(),iSeriesDefinitionIndex));
}",0.9154795821462488
66049,"public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  this.getLineAttributes().setVisible(true);
  this.getLineAttributes().setColor(ColorDefinitionImpl.BLACK());
  if (!(series instanceof ScatterSeries)) {
    getMarkers().clear();
    Marker marker=AttributeFactory.eINSTANCE.createMarker();
    marker.setSize(4);
    marker.setType(MarkerType.BOX_LITERAL);
    marker.setVisible(true);
    LineAttributes la=AttributeFactory.eINSTANCE.createLineAttributes();
    la.setVisible(true);
    marker.setOutline(la);
    getMarkers().add(marker);
  }
 else {
    getMarkers().clear();
    getMarkers().addAll(((ScatterSeries)series).getMarkers());
  }
  this.setLabel(series.getLabel());
  if (series.getLabelPosition().equals(Position.INSIDE_LITERAL) || series.getLabelPosition().equals(Position.OUTSIDE_LITERAL)) {
    this.setLabelPosition(Position.ABOVE_LITERAL);
  }
 else {
    this.setLabelPosition(series.getLabelPosition());
  }
  this.setVisible(series.isVisible());
  this.setStacked(series.isStacked());
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_Triggers())) {
    this.getTriggers().addAll(series.getTriggers());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataPoint())) {
    this.setDataPoint(series.getDataPoint());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataDefinition())) {
    this.getDataDefinition().add(series.getDataDefinition().get(0));
  }
  if (series instanceof StockSeries) {
    this.getLineAttributes().setColor(((StockSeries)series).getLineAttributes().getColor());
  }
  if (chart instanceof ChartWithAxes) {
    ((ChartWithAxes)chart).getAxes().get(0).setCategoryAxis(true);
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{chart.getClass().getName()},ULocale.getDefault()));
  }
  chart.setSampleData(getConvertedSampleData(chart.getSampleData(),iSeriesDefinitionIndex));
}","public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  if (series instanceof ScatterSeries && ((ScatterSeries)series).getMarkers().size() > 0) {
    getMarkers().addAll(((ScatterSeries)series).getMarkers());
  }
  this.setLabel(series.getLabel());
  if (series.isSetLabelPosition()) {
    if (series.getLabelPosition().equals(Position.INSIDE_LITERAL) || series.getLabelPosition().equals(Position.OUTSIDE_LITERAL)) {
      this.setLabelPosition(Position.ABOVE_LITERAL);
    }
 else {
      this.setLabelPosition(series.getLabelPosition());
    }
  }
  if (series.isSetVisible()) {
    this.setVisible(series.isVisible());
  }
  if (series.isSetStacked()) {
    this.setStacked(series.isStacked());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_Triggers())) {
    this.getTriggers().addAll(series.getTriggers());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataPoint())) {
    this.setDataPoint(series.getDataPoint());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataDefinition())) {
    this.getDataDefinition().add(series.getDataDefinition().get(0));
  }
  if (series instanceof StockSeries) {
    this.getLineAttributes().setColor(((StockSeries)series).getLineAttributes().getColor());
  }
  if (!(chart instanceof ChartWithAxes)) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{chart.getClass().getName()},ULocale.getDefault()));
  }
  chart.setSampleData(getConvertedSampleData(chart.getSampleData(),iSeriesDefinitionIndex));
}",0.6561604584527221
66050,"public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  this.getLineAttributes().setVisible(true);
  this.getLineAttributes().setColor(ColorDefinitionImpl.BLACK());
  this.setStacked(false);
  this.setLabel(series.getLabel());
  if (series.getLabelPosition().equals(Position.INSIDE_LITERAL) || series.getLabelPosition().equals(Position.OUTSIDE_LITERAL)) {
    this.setLabelPosition(series.getLabelPosition());
  }
 else {
    this.setLabelPosition(Position.OUTSIDE_LITERAL);
  }
  this.setVisible(series.isVisible());
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_Triggers())) {
    this.getTriggers().addAll(series.getTriggers());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataPoint())) {
    this.setDataPoint(series.getDataPoint());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataDefinition())) {
    this.getDataDefinition().addAll(series.getDataDefinition());
    if (!(series instanceof StockSeries)) {
      for (int length=this.getDataDefinition().size(); length < 4; length++) {
        this.getDataDefinition().add(QueryImpl.create(""String_Node_Str""));
      }
    }
  }
  if (series instanceof BarSeries && ((BarSeries)series).getRiserOutline() != null) {
    this.getLineAttributes().setColor(((BarSeries)series).getRiserOutline());
  }
 else   if (series instanceof LineSeries && ((LineSeries)series).getLineAttributes() != null) {
    this.setLineAttributes(((LineSeries)series).getLineAttributes());
  }
  chart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  if (chart instanceof ChartWithAxes) {
    ((ChartWithAxes)chart).getAxes().get(0).setCategoryAxis(true);
    EList<Axis> axes=((ChartWithAxes)chart).getAxes().get(0).getAssociatedAxes();
    for (int i=0; i < axes.size(); i++) {
      axes.get(i).setType(AxisType.LINEAR_LITERAL);
      axes.get(i).setPercent(false);
    }
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{chart.getClass().getName()},ULocale.getDefault()));
  }
  chart.setSampleData(getConvertedSampleData(chart.getSampleData(),iSeriesDefinitionIndex));
}","public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  this.setLabel(series.getLabel());
  if (series.isSetLabelPosition()) {
    if (series.getLabelPosition().equals(Position.INSIDE_LITERAL) || series.getLabelPosition().equals(Position.OUTSIDE_LITERAL)) {
      this.setLabelPosition(series.getLabelPosition());
    }
 else {
      this.setLabelPosition(Position.OUTSIDE_LITERAL);
    }
  }
  if (series.isSetVisible()) {
    this.setVisible(series.isVisible());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_Triggers())) {
    this.getTriggers().addAll(series.getTriggers());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataPoint())) {
    this.setDataPoint(series.getDataPoint());
  }
  if (series.eIsSet(ComponentPackage.eINSTANCE.getSeries_DataDefinition())) {
    this.getDataDefinition().addAll(series.getDataDefinition());
    if (!(series instanceof StockSeries)) {
      for (int length=this.getDataDefinition().size(); length < 4; length++) {
        this.getDataDefinition().add(QueryImpl.create(""String_Node_Str""));
      }
    }
  }
  if (series instanceof BarSeries && ((BarSeries)series).getRiserOutline() != null) {
    this.getLineAttributes().setColor(((BarSeries)series).getRiserOutline());
  }
 else   if (series instanceof LineSeries && ((LineSeries)series).getLineAttributes() != null) {
    this.setLineAttributes(((LineSeries)series).getLineAttributes());
  }
  chart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  if (chart instanceof ChartWithAxes) {
    EList<Axis> axes=((ChartWithAxes)chart).getAxes().get(0).getAssociatedAxes();
    for (int i=0; i < axes.size(); i++) {
      axes.get(i).setType(AxisType.LINEAR_LITERAL);
      axes.get(i).setPercent(false);
    }
  }
 else {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{chart.getClass().getName()},ULocale.getDefault()));
  }
  chart.setSampleData(getConvertedSampleData(chart.getSampleData(),iSeriesDefinitionIndex));
}",0.912289156626506
66051,"/** 
 * Get valid marker refenerce.
 * @param marker parentthe parent object which contains markers.
 * @param attribute attribute name of marker.
 * @param index the index of marker object.
 * @generated
 */
private Marker getValidMarkerRef(EObject obj,String attribute,int index){
  try {
    String methodName=""String_Node_Str"" + attribute.substring(0,1).toUpperCase() + attribute.substring(1);
    Method m=obj.getClass().getMethod(methodName);
    List<Marker> mList=(List<Marker>)m.invoke(obj);
    if ((mList.size() - 1) >= index) {
      return mList.get(index);
    }
 else     if (mList.size() == 1) {
      return mList.get(0);
    }
  }
 catch (  Exception e) {
  }
  return null;
}","/** 
 * Get valid marker refenerce.
 * @param marker parentthe parent object which contains markers.
 * @param attribute attribute name of marker.
 * @param index the index of marker object.
 * @generated
 */
private Marker getValidMarkerRef(EObject obj,String attribute,int index){
  if (obj == null) {
    return null;
  }
  try {
    String methodName=""String_Node_Str"" + attribute.substring(0,1).toUpperCase() + attribute.substring(1);
    Method m=obj.getClass().getMethod(methodName);
    List<Marker> mList=(List<Marker>)m.invoke(obj);
    if ((mList.size() - 1) >= index) {
      return mList.get(index);
    }
 else     if (mList.size() == 1) {
      return mList.get(0);
    }
  }
 catch (  Exception e) {
  }
  return null;
}",0.9706293706293706
66052,"/** 
 * Populates series type list.
 * @param htSeriesNames
 * @param cmbTypes
 * @param context
 * @param allChartType
 * @param currentSeries
 */
public static void populateSeriesTypesList(Hashtable<String,Series> htSeriesNames,Combo cmbTypes,ChartWizardContext context,Collection<IChartType> allChartType,Series currentSeries){
  IChartUIHelper helper=context.getUIFactory().createUIHelper();
  IChartType currentChartType=ChartUIUtil.getChartType(context.getModel().getType());
  cmbTypes.removeAll();
  if (helper.canCombine(currentChartType,context)) {
    Orientation orientation=((ChartWithAxes)context.getModel()).getOrientation();
    Iterator<IChartType> iterTypes=allChartType.iterator();
    while (iterTypes.hasNext()) {
      IChartType type=iterTypes.next();
      Series newSeries=type.getSeries();
      if (helper.canCombine(type,context)) {
        if (newSeries instanceof AreaSeries && context.getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
          continue;
        }
        if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
          String sDisplayName=newSeries.getDisplayName();
          htSeriesNames.put(sDisplayName,newSeries);
          cmbTypes.add(sDisplayName);
        }
        if (type.getName().equals(context.getModel().getType())) {
          cmbTypes.select(cmbTypes.getItemCount() - 1);
        }
      }
    }
    String sDisplayName=currentSeries.getDisplayName();
    cmbTypes.setText(sDisplayName);
  }
 else {
    String seriesName=currentSeries.getDisplayName();
    cmbTypes.add(seriesName);
    cmbTypes.select(0);
  }
}","/** 
 * Populates series type list.
 * @param htSeriesNames
 * @param cmbTypes
 * @param context
 * @param allChartType
 * @param currentSeries
 */
public static void populateSeriesTypesList(Hashtable<String,Series> htSeriesNames,Combo cmbTypes,ChartWizardContext context,Collection<IChartType> allChartType,Series currentSeries){
  IChartUIHelper helper=context.getUIFactory().createUIHelper();
  IChartType currentChartType=ChartUIUtil.getChartType(context.getModel().getType());
  cmbTypes.removeAll();
  if (helper.canCombine(currentChartType,context)) {
    Orientation orientation=((ChartWithAxes)context.getModel()).getOrientation();
    Iterator<IChartType> iterTypes=allChartType.iterator();
    while (iterTypes.hasNext()) {
      IChartType type=iterTypes.next();
      Series newSeries=type.getSeries(false);
      if (helper.canCombine(type,context)) {
        if (newSeries instanceof AreaSeries && context.getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
          continue;
        }
        if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
          String sDisplayName=newSeries.getDisplayName();
          htSeriesNames.put(sDisplayName,newSeries);
          cmbTypes.add(sDisplayName);
        }
        if (type.getName().equals(context.getModel().getType())) {
          cmbTypes.select(cmbTypes.getItemCount() - 1);
        }
      }
    }
    String sDisplayName=currentSeries.getDisplayName();
    cmbTypes.setText(sDisplayName);
  }
 else {
    String seriesName=currentSeries.getDisplayName();
    cmbTypes.add(seriesName);
    cmbTypes.select(0);
  }
}",0.9984907938424388
66053,"/** 
 * Check if the chart type supports axes.
 * @return
 */
boolean isChartWithAxes();","/** 
 * Check if the chart type supports axes.
 * @return true if chart has axis.
 */
boolean isChartWithAxes();",0.88
66054,"/** 
 * Creates the corresponding series model with set 'isSet' flag for series properties.
 * @param needInitialing
 * @return
 */
public Series getSeries(boolean needInitialing);","/** 
 * Creates the corresponding series model with set 'isSet' flag for series properties.
 * @param needInitialing
 * @return series instance
 */
public Series getSeries(boolean needInitialing);",0.9574468085106383
66055,"/** 
 * Adds an orthogonal axis. Ensures only one event is fired.
 * @param chartModel chart model
 */
public static void addAxis(final ChartWithAxes chartModel){
  ChartAdapter.beginIgnoreNotifications();
  Axis xAxis=chartModel.getAxes().get(0);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  Axis overlayAxis=yAxis.copyInstance();
  overlayAxis.setAligned(false);
  overlayAxis.setSideBySide(false);
  overlayAxis.setPrimaryAxis(false);
  overlayAxis.setOrigin(AxisOriginImpl.create(IntersectionType.MAX_LITERAL,null));
  overlayAxis.setLabelPosition(Position.RIGHT_LITERAL);
  overlayAxis.setTitlePosition(Position.RIGHT_LITERAL);
  overlayAxis.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
  overlayAxis.eAdapters().addAll(yAxis.eAdapters());
  if (overlayAxis.getSeriesDefinitions().size() > 1) {
    EList<SeriesDefinition> list=overlayAxis.getSeriesDefinitions();
    for (int i=list.size() - 1; i > 0; i--) {
      list.remove(i);
    }
  }
  SeriesDefinition sdOverlay=overlayAxis.getSeriesDefinitions().get(0);
  EList<Query> dds=sdOverlay.getDesignTimeSeries().getDataDefinition();
  for (int i=0; i < dds.size(); i++) {
    dds.get(i).setDefinition(""String_Node_Str"");
  }
  SampleData sd=chartModel.getSampleData();
  int currentSize=sd.getOrthogonalSampleData().size();
  OrthogonalSampleData sdOrthogonal=chartModel.getSampleData().getOrthogonalSampleData().get(0).copyInstance();
  sdOrthogonal.setDataSetRepresentation(ChartUtil.getNewSampleData(overlayAxis.getType(),currentSize));
  sdOrthogonal.setSeriesDefinitionIndex(currentSize);
  sdOrthogonal.eAdapters().addAll(sd.eAdapters());
  sd.getOrthogonalSampleData().add(sdOrthogonal);
  chartModel.getAxes().get(0).getAssociatedAxes().add(overlayAxis);
  ChartAdapter.endIgnoreNotifications();
  setSeriesName(chartModel);
}","/** 
 * Adds an orthogonal axis. Ensures only one event is fired.
 * @param chartModel chart model
 */
public static void addAxis(final ChartWithAxes chartModel){
  ChartAdapter.beginIgnoreNotifications();
  Axis xAxis=chartModel.getAxes().get(0);
  Axis yAxis=xAxis.getAssociatedAxes().get(0);
  Axis overlayAxis=yAxis.copyInstance();
  overlayAxis.setPrimaryAxis(false);
  overlayAxis.setOrigin(AxisOriginImpl.create(IntersectionType.MAX_LITERAL,null));
  overlayAxis.setLabelPosition(Position.RIGHT_LITERAL);
  overlayAxis.setTitlePosition(Position.RIGHT_LITERAL);
  overlayAxis.eAdapters().addAll(yAxis.eAdapters());
  if (overlayAxis.getSeriesDefinitions().size() > 1) {
    EList<SeriesDefinition> list=overlayAxis.getSeriesDefinitions();
    for (int i=list.size() - 1; i > 0; i--) {
      list.remove(i);
    }
  }
  SeriesDefinition sdOverlay=overlayAxis.getSeriesDefinitions().get(0);
  EList<Query> dds=sdOverlay.getDesignTimeSeries().getDataDefinition();
  for (int i=0; i < dds.size(); i++) {
    dds.get(i).setDefinition(""String_Node_Str"");
  }
  SampleData sd=chartModel.getSampleData();
  int currentSize=sd.getOrthogonalSampleData().size();
  OrthogonalSampleData sdOrthogonal=chartModel.getSampleData().getOrthogonalSampleData().get(0).copyInstance();
  sdOrthogonal.setDataSetRepresentation(ChartUtil.getNewSampleData(overlayAxis.getType(),currentSize));
  sdOrthogonal.setSeriesDefinitionIndex(currentSize);
  sdOrthogonal.eAdapters().addAll(sd.eAdapters());
  sd.getOrthogonalSampleData().add(sdOrthogonal);
  chartModel.getAxes().get(0).getAssociatedAxes().add(overlayAxis);
  ChartAdapter.endIgnoreNotifications();
  setSeriesName(chartModel);
}",0.9553264604810996
66056,"private void initAggOn(){
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    String[] aggOns=getAggOns(xtabHandle);
    cmbAggOn.setItems(aggOns);
    String aggstr=""String_Node_Str"";
    if (getBinding() != null) {
      List aggOnList=getBinding().getAggregateOnList();
      int i=0;
      for (Iterator iterator=aggOnList.iterator(); iterator.hasNext(); ) {
        if (i > 0)         aggstr+=""String_Node_Str"";
        String name=(String)iterator.next();
        aggstr+=name;
        i++;
      }
    }
 else     if (isTimePeriod()) {
      List rowLevelList=getCrosstabViewHandleLevels(xtabHandle,ICrosstabConstants.ROW_AXIS_TYPE);
      List columnLevelList=getCrosstabViewHandleLevels(xtabHandle,ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (rowLevelList.size() != 0 && columnLevelList.size() == 0) {
        aggstr=(String)rowLevelList.get(rowLevelList.size() - 1);
      }
 else       if (rowLevelList.size() == 0 && columnLevelList.size() != 0) {
        aggstr=(String)columnLevelList.get(columnLevelList.size() - 1);
      }
 else       if (rowLevelList.size() != 0 && columnLevelList.size() != 0) {
        aggstr=(String)rowLevelList.get(rowLevelList.size() - 1) + ""String_Node_Str"" + (String)columnLevelList.get(columnLevelList.size() - 1);
      }
    }
 else     if (getDataItemContainer() instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)getDataItemContainer();
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
 else     if (container instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)container;
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
    for (int j=0; j < aggOns.length; j++) {
      if (aggOns[j].equals(aggstr)) {
        cmbAggOn.select(j);
        return;
      }
    }
    cmbAggOn.select(0);
  }
 catch (  ExtendedElementException e) {
    ExceptionUtil.handle(e);
  }
}","private void initAggOn(){
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    String[] aggOns=getAggOns(xtabHandle);
    cmbAggOn.setItems(aggOns);
    String aggstr=""String_Node_Str"";
    if (getBinding() != null) {
      List aggOnList=getBinding().getAggregateOnList();
      int i=0;
      for (Iterator iterator=aggOnList.iterator(); iterator.hasNext(); ) {
        if (i > 0)         aggstr+=""String_Node_Str"";
        String name=(String)iterator.next();
        aggstr+=name;
        i++;
      }
    }
 else     if (isTimePeriod()) {
      List rowLevelList=getCrosstabViewHandleLevels(xtabHandle,ICrosstabConstants.ROW_AXIS_TYPE);
      List columnLevelList=getCrosstabViewHandleLevels(xtabHandle,ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (rowLevelList.size() != 0 && columnLevelList.size() == 0) {
        aggstr=(String)rowLevelList.get(rowLevelList.size() - 1);
      }
 else       if (rowLevelList.size() == 0 && columnLevelList.size() != 0) {
        aggstr=(String)columnLevelList.get(columnLevelList.size() - 1);
      }
 else       if (rowLevelList.size() != 0 && columnLevelList.size() != 0) {
        aggstr=(String)rowLevelList.get(rowLevelList.size() - 1) + ""String_Node_Str"" + (String)columnLevelList.get(columnLevelList.size() - 1);
      }
    }
 else     if (getDataItemContainer() instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)getDataItemContainer();
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
 else     if (container instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)container;
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
    String[] strs=aggstr.split(""String_Node_Str"");
    String temAddOns=""String_Node_Str"";
    if (strs != null && strs.length > 1) {
      for (int i=strs.length - 1; i >= 0; i--) {
        temAddOns=temAddOns + strs[i];
        if (i != 0) {
          temAddOns=temAddOns + ""String_Node_Str"";
        }
      }
    }
    for (int j=0; j < aggOns.length; j++) {
      if (aggOns[j].equals(aggstr)) {
        cmbAggOn.select(j);
        return;
      }
      if (aggOns[j].equals(temAddOns)) {
        cmbAggOn.select(j);
        return;
      }
    }
    cmbAggOn.select(0);
  }
 catch (  ExtendedElementException e) {
    ExceptionUtil.handle(e);
  }
}",0.9267605633802816
66057,"private void dataFileSeek() throws IOException {
  int blockIndex=(int)(position / FileDocumentManager.BLOCK_SIZE);
  int posInBlock=(int)(position % FileDocumentManager.BLOCK_SIZE);
  int dataFilePosition=((Integer)blockList.get(blockIndex)).intValue() * FileDocumentManager.BLOCK_SIZE + posInBlock;
  dataFile.seek(dataFilePosition);
}","private void dataFileSeek() throws IOException {
  int blockIndex=(int)(position / FileDocumentManager.BLOCK_SIZE);
  int posInBlock=(int)(position % FileDocumentManager.BLOCK_SIZE);
  long dataFilePosition=(long)(((Integer)blockList.get(blockIndex)).intValue()) * FileDocumentManager.BLOCK_SIZE + posInBlock;
  dataFile.seek(dataFilePosition);
}",0.9780380673499268
66058,"private static SeriesDefinition createDefaultSeriesDefinition(int paletteShift){
  SeriesDefinition sd=SeriesDefinitionImpl.createDefault();
  sd.getSeries().add(SeriesImpl.createDefault());
  return sd;
}","protected static SeriesDefinition createDefaultSeriesDefinition(int paletteShift){
  SeriesDefinition sd=SeriesDefinitionImpl.createDefault();
  sd.getSeries().add(SeriesImpl.createDefault());
  return sd;
}",0.970873786407767
66059,"@SuppressWarnings(""String_Node_Str"") protected void checkScriptSyntax(String string) throws RhinoException {
  if (string == null)   return;
  if (!isJavaClassName(string)) {
    try {
      Context cx=Context.enter();
      cx.compileString(string,""String_Node_Str"",1,null);
    }
  finally {
      Context.exit();
    }
  }
}","protected void checkScriptSyntax(String string) throws RhinoException {
  if (string == null)   return;
  if (!isJavaClassName(string)) {
    try {
      Context cx=Context.enter();
      cx.compileString(string,""String_Node_Str"",1,null);
    }
  finally {
      Context.exit();
    }
  }
}",0.940032414910859
66060,"@SuppressWarnings(""String_Node_Str"") public IMethodInfo[] getMethods(String scriptName){
  if (scriptName != null && scriptName.equals(ChartReportItemUtil.PROPERTY_ONRENDER)) {
    ScriptClassInfo info=new ScriptClassInfo(IChartEventHandler.class);
    List<IMethodInfo> list=info.getMethods();
    Collections.sort(list,new Comparator<IMethodInfo>(){
      public int compare(      IMethodInfo arg0,      IMethodInfo arg1){
        String name0=arg0.getName();
        String name1=arg1.getName();
        if (name0.startsWith(""String_Node_Str"") && name1.startsWith(""String_Node_Str"")) {
          return -1;
        }
        if (name0.startsWith(""String_Node_Str"") && name1.startsWith(""String_Node_Str"")) {
          return 1;
        }
        return (name0.compareToIgnoreCase(name1));
      }
    }
);
    return list.toArray(new IMethodInfo[list.size()]);
  }
 else   return null;
}","public IMethodInfo[] getMethods(String scriptName){
  if (scriptName != null && scriptName.equals(ChartReportItemUtil.PROPERTY_ONRENDER)) {
    ScriptClassInfo info=new ScriptClassInfo(IChartEventHandler.class);
    List<IMethodInfo> list=info.getMethods();
    Collections.sort(list,new Comparator<IMethodInfo>(){
      public int compare(      IMethodInfo arg0,      IMethodInfo arg1){
        String name0=arg0.getName();
        String name1=arg1.getName();
        if (name0.startsWith(""String_Node_Str"") && name1.startsWith(""String_Node_Str"")) {
          return -1;
        }
        if (name0.startsWith(""String_Node_Str"") && name1.startsWith(""String_Node_Str"")) {
          return 1;
        }
        return (name0.compareToIgnoreCase(name1));
      }
    }
);
    return list.toArray(new IMethodInfo[list.size()]);
  }
 else   return null;
}",0.9787478460654796
66061,"public void testMTD4() throws IOException {
  int[] values=new int[]{2002,1,2,4};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new MonthToDateFunction().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testMTD4() throws IOException {
  int[] values=new int[]{2002,1,2,4};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  MonthToDateFunction monthToDate=new MonthToDateFunction();
  ReferenceDate referenceDate=new ReferenceDate(new Date(2002,1,27));
  monthToDate.setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=monthToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.814176245210728
66062,"public void testMTD3() throws IOException {
  int[] values=new int[]{2011,3,9,4};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new MonthToDateFunction().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testMTD3() throws IOException {
  int[] values=new int[]{2011,3,9,4};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  MonthToDateFunction monthToDate=new MonthToDateFunction();
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,28));
  monthToDate.setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=monthToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.814176245210728
66063,"public void testMTD6() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new MonthToDateFunction().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testMTD6() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  MonthToDateFunction monthToDate=new MonthToDateFunction();
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  monthToDate.setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=monthToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8309248554913294
66064,"public void testMTD9() throws IOException {
  int[] values=new int[]{2011,4,10,2};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  MonthToDateFunction func=new MonthToDateFunction();
  func.setIsCurrent(true);
  List<TimeMember> timeMembers=func.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testMTD9() throws IOException {
  int[] values=new int[]{2011,4,10,2};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  MonthToDateFunction func=new MonthToDateFunction();
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,9,12));
  func.setReferenceDate(referenceDate);
  func.setIsCurrent(true);
  List<TimeMember> timeMembers=func.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.9010791366906474
66065,"public void testFunctions9() throws IOException {
  int[] values=new int[]{2002,23};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR};
  TimeMember member=new TimeMember(values,levels);
  TimeMember resultMember=TimeFunctionFactory.createParallelPeriodFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,-10).getResult(member);
  int[] result=new int[]{2002,13};
  assertEquals(resultMember.getMemberValue()[0],result[0]);
  assertEquals(resultMember.getMemberValue()[1],result[1]);
}","public void testFunctions9() throws IOException {
  int[] values=new int[]{2002,23};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR};
  TimeMember member=new TimeMember(values,levels);
  IParallelPeriod parallelPeriod=TimeFunctionFactory.createParallelPeriodFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,-10);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2002,5,5));
  ((AbstractMDX)parallelPeriod).setReferenceDate(referenceDate);
  TimeMember resultMember=parallelPeriod.getResult(member);
  int[] result=new int[]{2002,13};
  assertEquals(resultMember.getMemberValue()[0],result[0]);
  assertEquals(resultMember.getMemberValue()[1],result[1]);
}",0.8175298804780876
66066,"public void testFunctions7() throws IOException {
  int[] values=new int[]{2002,8,3};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember member=new TimeMember(values,levels);
  TimeMember resultMember=TimeFunctionFactory.createParallelPeriodFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,-5).getResult(member);
  int[] result=new int[]{2002,7,3};
  assertEquals(resultMember.getMemberValue()[0],result[0]);
  assertEquals(resultMember.getMemberValue()[1],result[1]);
  assertEquals(resultMember.getMemberValue()[2],result[2]);
}","public void testFunctions7() throws IOException {
  int[] values=new int[]{2002,8,3};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember member=new TimeMember(values,levels);
  IParallelPeriod parallelPeriod=TimeFunctionFactory.createParallelPeriodFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,-5);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2002,7,20));
  ((AbstractMDX)parallelPeriod).setReferenceDate(referenceDate);
  TimeMember resultMember=parallelPeriod.getResult(member);
  int[] result=new int[]{2002,7,3};
  assertEquals(resultMember.getMemberValue()[0],result[0]);
  assertEquals(resultMember.getMemberValue()[1],result[1]);
  assertEquals(resultMember.getMemberValue()[2],result[2]);
}",0.8411602209944752
66067,"public void testFunctions4() throws IOException {
  int[] values=new int[]{2002,3,8,3};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember member=new TimeMember(values,levels);
  List<TimeMember> resultMember=TimeFunctionFactory.createPeriodsToDateFunction(TimeMember.TIME_LEVEL_TYPE_QUARTER,false).getResult(member);
  printResult(resultMember);
  this.checkOutputFile();
}","public void testFunctions4() throws IOException {
  int[] values=new int[]{2002,3,8,3};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember member=new TimeMember(values,levels);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2002,7,20));
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createPeriodsToDateFunction(TimeMember.TIME_LEVEL_TYPE_QUARTER,false);
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> resultMember=periodsFunction.getResult(member);
  printResult(resultMember);
  this.checkOutputFile();
}",0.7963576158940397
66068,"public void testFunctions5() throws IOException {
  int[] values=new int[]{2002,3,8,3};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember member=new TimeMember(values,levels);
  List<TimeMember> resultMember=TimeFunctionFactory.createPeriodsToDateFunction(TimeMember.TIME_LEVEL_TYPE_QUARTER,true).getResult(member);
  printResult(resultMember);
  this.checkOutputFile();
}","public void testFunctions5() throws IOException {
  int[] values=new int[]{2002,3,8,3};
  String[] levels=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember member=new TimeMember(values,levels);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2002,7,20));
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createPeriodsToDateFunction(TimeMember.TIME_LEVEL_TYPE_QUARTER,true);
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> resultMember=periodsFunction.getResult(member);
  printResult(resultMember);
  this.checkOutputFile();
}",0.7960199004975125
66069,"public void testTrailing13() throws IOException {
  int[] values=new int[]{2011,3,9,4,39};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_MONTH,-3).getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing13() throws IOException {
  int[] values=new int[]{2011,3,9,4,39};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_MONTH,-3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,28));
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8084772370486656
66070,"public void testTrailing5() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR,3).getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing5() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR,3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.6783854166666666
66071,"public void testTrailing4() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,3).getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing4() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.6766233766233766
66072,"public void testTrailing3() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_MONTH,-3).getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing3() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_MONTH,-3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8401048492791612
66073,"public void testTrailing2() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_QUARTER,-3).getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing2() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_QUARTER,-3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8405228758169935
66074,"public void testTrailing1() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_YEAR,-3).getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testTrailing1() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  IPeriodsFunction periodsFunction=TimeFunctionFactory.createTrailingFunction(TimeMember.TIME_LEVEL_TYPE_YEAR,-3);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  ((AbstractMDX)periodsFunction).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=periodsFunction.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8398950131233596
66075,"public void testWTD3() throws IOException {
  int[] values=new int[]{2002,1,2,1,7};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new WeekToDateFunciton().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testWTD3() throws IOException {
  int[] values=new int[]{2002,1,2,1,7};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK};
  ReferenceDate referenceDate=new ReferenceDate(new Date(2002,1,9));
  WeekToDateFunciton weekToDate=new WeekToDateFunciton();
  ((AbstractMDX)weekToDate).setReferenceDate(referenceDate);
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=weekToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8201058201058201
66076,"public void testWTD4() throws IOException {
  int[] values=new int[]{2011,1,2,1};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new WeekToDateFunciton().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testWTD4() throws IOException {
  int[] values=new int[]{2011,1,2,1};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH};
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,1,5));
  WeekToDateFunciton weekToDate=new WeekToDateFunciton();
  ((AbstractMDX)weekToDate).setReferenceDate(referenceDate);
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=weekToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8060836501901141
66077,"public void testWTD1() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new WeekToDateFunciton().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testWTD1() throws IOException {
  int[] values=new int[]{2011,3,9,4,39,5,22,265};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_QUARTER,TimeMember.TIME_LEVEL_TYPE_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK,TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH,TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR};
  TimeMember timeMember=new TimeMember(values,types);
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,8,22));
  WeekToDateFunciton weekToDate=new WeekToDateFunciton();
  ((AbstractMDX)weekToDate).setReferenceDate(referenceDate);
  List<TimeMember> timeMembers=weekToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.8312993539124193
66078,"public void testWTD2() throws IOException {
  int[] values=new int[]{2011,20,5};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK};
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=new WeekToDateFunciton().getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}","public void testWTD2() throws IOException {
  int[] values=new int[]{2011,20,5};
  String[] types=new String[]{TimeMember.TIME_LEVEL_TYPE_YEAR,TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR,TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK};
  ReferenceDate referenceDate=new ReferenceDate(new Date(2011,4,19));
  WeekToDateFunciton weekToDate=new WeekToDateFunciton();
  ((AbstractMDX)weekToDate).setReferenceDate(referenceDate);
  TimeMember timeMember=new TimeMember(values,types);
  List<TimeMember> timeMembers=weekToDate.getResult(timeMember);
  printMembers(timeMembers);
  checkOutputFile();
}",0.79313824419778
66079,"private void populateMeasureDefinitionForCalculateMeasures(ICubeQueryDefinition query) throws DataException, AdapterException {
  List calculatedMeasures=query.getDerivedMeasures();
  if (calculatedMeasures == null || calculatedMeasures.size() == 0)   return;
  List measures=query.getMeasures();
  List measureNameList=new ArrayList();
  for (int i=0; i < measures.size(); i++) {
    measureNameList.add(((IMeasureDefinition)measures.get(i)).getName());
  }
  List derivedMeasureNameList=new ArrayList();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureNameList.add(((IDerivedMeasureDefinition)calculatedMeasures.get(i)).getName());
  }
  for (int i=0; i < calculatedMeasures.size(); i++) {
    IDerivedMeasureDefinition dmd=(IDerivedMeasureDefinition)calculatedMeasures.get(i);
    List measureNames=ExpressionCompilerUtil.extractColumnExpression(dmd.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < measureNames.size(); j++) {
      if (!measureNameList.contains(measureNames.get(j).toString()) && !derivedMeasureNameList.contains(measureNames.get(j).toString())) {
        IMeasureDefinition md=query.createMeasure(measureNames.get(j).toString());
        if (this.cubeHandleMap != null && this.cubeHandleMap.containsKey(query.getName())) {
          CubeHandle cubeHandle=(CubeHandle)this.cubeHandleMap.get(query.getName());
          MeasureHandle measureHandle=cubeHandle.getMeasure(measureNames.get(j).toString());
          md.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(measureHandle.getFunction()));
        }
      }
    }
  }
}","private void populateMeasureDefinitionForCalculateMeasures(ICubeQueryDefinition query) throws DataException, AdapterException {
  List calculatedMeasures=query.getDerivedMeasures();
  if (calculatedMeasures == null || calculatedMeasures.size() == 0)   return;
  List measures=query.getMeasures();
  List measureNameList=new ArrayList();
  for (int i=0; i < measures.size(); i++) {
    measureNameList.add(((IMeasureDefinition)measures.get(i)).getName());
  }
  List derivedMeasureNameList=new ArrayList();
  for (int i=0; i < calculatedMeasures.size(); i++) {
    derivedMeasureNameList.add(((IDerivedMeasureDefinition)calculatedMeasures.get(i)).getName());
  }
  for (int i=0; i < calculatedMeasures.size(); i++) {
    IDerivedMeasureDefinition dmd=(IDerivedMeasureDefinition)calculatedMeasures.get(i);
    List measureNames=ExpressionCompilerUtil.extractColumnExpression(dmd.getExpression(),ExpressionUtil.MEASURE_INDICATOR);
    for (int j=0; j < measureNames.size(); j++) {
      if (!measureNameList.contains(measureNames.get(j).toString()) && !derivedMeasureNameList.contains(measureNames.get(j).toString())) {
        IMeasureDefinition md=query.createMeasure(measureNames.get(j).toString());
        if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
          CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
          MeasureHandle measureHandle=cubeHandle.getMeasure(measureNames.get(j).toString());
          md.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(measureHandle.getFunction()));
        }
      }
    }
  }
}",0.9925650557620818
66080,"@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
  if (measureViewHandle == null) {
    return false;
  }
  if (DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle())) {
    return false;
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  CubeHandle cube=reportHandle.getCube();
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
  if (measureViewHandle == null) {
    return false;
  }
  if (DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle())) {
    return false;
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  CubeHandle cube=reportHandle.getCube();
  if (cube == null) {
    return false;
  }
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9875212705615428
66081,"public void testIVWithIncrementSorts() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  writter.flush();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),reader);
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  CubeSortDefinition csd=new CubeSortDefinition();
  csd.setSortDirection(ISortDefinition.SORT_DESC);
  csd.setExpression(new ScriptExpression(""String_Node_Str""));
  csd.setTargetLevel(dim2.getHierarchy().get(0).getLevels().get(0));
  cqd.addSort(csd);
  IncrementExecutionHint ieh=CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,cqd);
  assertTrue(ieh != null);
  assertEquals(0,ieh.getBindings().length);
  assertEquals(0,ieh.getFilters().length);
  assertEquals(1,ieh.getSorts().length);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  reader.close();
  engine.shutdown();
}","public void testIVWithIncrementSorts() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngineContext context=DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter);
  context.setTmpdir(this.getTempDir());
  DataEngineImpl engine=(DataEngineImpl)DataEngine.newDataEngine(context);
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  writter.flush();
  writter.finish();
  engine.shutdown();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(documentPath + ""String_Node_Str"",""String_Node_Str""));
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(queryResults.getID(),DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  cqd.setQueryResultsID(queryResults.getID());
  CubeSortDefinition csd=new CubeSortDefinition();
  csd.setSortDirection(ISortDefinition.SORT_DESC);
  csd.setExpression(new ScriptExpression(""String_Node_Str""));
  csd.setTargetLevel(dim2.getHierarchy().get(0).getLevels().get(0));
  cqd.addSort(csd);
  IncrementExecutionHint ieh=CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,cqd);
  assertTrue(ieh != null);
  assertEquals(0,ieh.getBindings().length);
  assertEquals(0,ieh.getFilters().length);
  assertEquals(1,ieh.getSorts().length);
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  reader.close();
  writer.finish();
  engine.shutdown();
  reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  reader.close();
  engine.shutdown();
}",0.9891011668162584
66082,"public void testSaveAndLoad() throws IOException, DataException {
  IDocArchiveWriter writer=new FileArchiveWriter(tempFile.getAbsolutePath());
  ICubeQueryDefinition toSave=createQueryDefn();
  CubeQueryDefinitionIOUtil.save(queryResultID,writer,toSave);
  writer.flush();
  writer.finish();
  IDocArchiveReader reader=new FileArchiveReader(tempFile.getAbsolutePath());
  ICubeQueryDefinition loaded=CubeQueryDefinitionIOUtil.load(queryResultID,reader);
  reader.close();
  assertEquals(toSave.getName(),loaded.getName());
  assertEquals(toSave.cacheQueryResults(),loaded.cacheQueryResults());
  assertEquals(toSave.getFilterOption(),loaded.getFilterOption());
  assertEqualBindings(toSave.getBindings(),loaded.getBindings());
  assertEquals(toSave.getFilters().size(),loaded.getFilters().size());
  for (int i=0; i < toSave.getFilters().size(); i++) {
    assertEqualFilter((IFilterDefinition)toSave.getFilters().get(i),(IFilterDefinition)loaded.getFilters().get(i));
  }
  assertEquals(toSave.getSorts().size(),loaded.getSorts().size());
  for (int i=0; i < toSave.getSorts().size(); i++) {
    assertEqualSortDefinition((ISortDefinition)toSave.getSorts().get(i),(ISortDefinition)loaded.getSorts().get(i));
  }
  assertEquals(toSave.getMeasures().size(),loaded.getMeasures().size());
  for (int i=0; i < toSave.getMeasures().size(); i++) {
    assertEqualMeasure((IMeasureDefinition)toSave.getMeasures().get(i),(IMeasureDefinition)loaded.getMeasures().get(i));
  }
  assertEquals(toSave.getComputedMeasures().size(),loaded.getComputedMeasures().size());
  for (int i=0; i < toSave.getComputedMeasures().size(); i++) {
    assertEqualComputedMeasure((IComputedMeasureDefinition)toSave.getComputedMeasures().get(i),(IComputedMeasureDefinition)loaded.getComputedMeasures().get(i));
  }
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.ROW_EDGE),loaded.getEdge(ICubeQueryDefinition.ROW_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.COLUMN_EDGE),loaded.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.PAGE_EDGE),loaded.getEdge(ICubeQueryDefinition.PAGE_EDGE));
  assertEquals(toSave.getCubeOperations().length,loaded.getCubeOperations().length);
  for (int i=0; i < toSave.getCubeOperations().length; i++) {
    assertEqualCubeOperation(toSave.getCubeOperations()[i],loaded.getCubeOperations()[i]);
  }
}","public void testSaveAndLoad() throws IOException, BirtException {
  IDocArchiveWriter writer=new FileArchiveWriter(tempFile.getAbsolutePath());
  ICubeQueryDefinition toSave=createQueryDefn();
  CubeQueryDefinitionIOUtil.save(queryResultID,writer,toSave);
  writer.flush();
  writer.finish();
  IDocArchiveReader reader=new FileArchiveReader(tempFile.getAbsolutePath());
  ICubeQueryDefinition loaded=CubeQueryDefinitionIOUtil.load(queryResultID,DataEngineContext.newInstance(DataEngineContext.MODE_UPDATE,null,reader,writer));
  reader.close();
  assertEquals(toSave.getName(),loaded.getName());
  assertEquals(toSave.cacheQueryResults(),loaded.cacheQueryResults());
  assertEquals(toSave.getFilterOption(),loaded.getFilterOption());
  assertEqualBindings(toSave.getBindings(),loaded.getBindings());
  assertEquals(toSave.getFilters().size(),loaded.getFilters().size());
  for (int i=0; i < toSave.getFilters().size(); i++) {
    assertEqualFilter((IFilterDefinition)toSave.getFilters().get(i),(IFilterDefinition)loaded.getFilters().get(i));
  }
  assertEquals(toSave.getSorts().size(),loaded.getSorts().size());
  for (int i=0; i < toSave.getSorts().size(); i++) {
    assertEqualSortDefinition((ISortDefinition)toSave.getSorts().get(i),(ISortDefinition)loaded.getSorts().get(i));
  }
  assertEquals(toSave.getMeasures().size(),loaded.getMeasures().size());
  for (int i=0; i < toSave.getMeasures().size(); i++) {
    assertEqualMeasure((IMeasureDefinition)toSave.getMeasures().get(i),(IMeasureDefinition)loaded.getMeasures().get(i));
  }
  assertEquals(toSave.getComputedMeasures().size(),loaded.getComputedMeasures().size());
  for (int i=0; i < toSave.getComputedMeasures().size(); i++) {
    assertEqualComputedMeasure((IComputedMeasureDefinition)toSave.getComputedMeasures().get(i),(IComputedMeasureDefinition)loaded.getComputedMeasures().get(i));
  }
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.ROW_EDGE),loaded.getEdge(ICubeQueryDefinition.ROW_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.COLUMN_EDGE),loaded.getEdge(ICubeQueryDefinition.COLUMN_EDGE));
  assertEqualEdge(toSave.getEdge(ICubeQueryDefinition.PAGE_EDGE),loaded.getEdge(ICubeQueryDefinition.PAGE_EDGE));
  assertEquals(toSave.getCubeOperations().length,loaded.getCubeOperations().length);
  for (int i=0; i < toSave.getCubeOperations().length; i++) {
    assertEqualCubeOperation(toSave.getCubeOperations()[i],loaded.getCubeOperations()[i]);
  }
}",0.980701390329944
66083,"public static IBinding loadBinding(DataInputStream dis) throws IOException, DataException {
  int type=IOUtil.readInt(dis);
  String name=IOUtil.readString(dis);
  String function=IOUtil.readString(dis);
  IBaseExpression expr=ExprUtil.loadBaseExpr(dis);
  IBaseExpression filter=ExprUtil.loadBaseExpr(dis);
  Binding binding=new Binding(name);
  binding.setAggrFunction(function);
  binding.setDataType(type);
  binding.setExpression(expr);
  binding.setFilter(filter);
  int argSize=IOUtil.readInt(dis);
  for (int i=0; i < argSize; i++) {
    binding.addArgument(ExprUtil.loadBaseExpr(dis));
  }
  int aggrSize=IOUtil.readInt(dis);
  for (int i=0; i < aggrSize; i++) {
    binding.addAggregateOn(IOUtil.readString(dis));
  }
  if (VersionManager.getLatestVersion() >= VersionManager.VERSION_2_6_3_1) {
    boolean hasTimeFunction=IOUtil.readBool(dis);
    if (hasTimeFunction) {
      String timeDimensionName=IOUtil.readString(dis);
      TimeFunction time=new TimeFunction();
      if (timeDimensionName != null) {
        time.setTimeDimension(timeDimensionName);
        Date referenceDate=(Date)IOUtil.readObject(dis);
        time.setReferenceDate(new ReferenceDate(referenceDate));
        boolean containsBasePeriod=IOUtil.readBool(dis);
        if (containsBasePeriod) {
          TimePeriodType periodType=getPeriodType(IOUtil.readString(dis));
          int unit=IOUtil.readInt(dis);
          boolean isCurrent=IOUtil.readBool(dis);
          TimePeriod basedTimePeriod=new TimePeriod(unit,periodType,isCurrent);
          time.setBaseTimePeriod(basedTimePeriod);
        }
        boolean containsRelativePeriod=IOUtil.readBool(dis);
        if (containsRelativePeriod) {
          TimePeriodType periodType=getPeriodType(IOUtil.readString(dis));
          int unit=IOUtil.readInt(dis);
          TimePeriod relativeTimePeriod=new TimePeriod(unit,periodType);
          time.setRelativeTimePeriod(relativeTimePeriod);
        }
      }
      binding.setTimeFunction(time);
    }
  }
  return binding;
}","public static IBinding loadBinding(DataInputStream dis,int version) throws IOException, DataException {
  int type=IOUtil.readInt(dis);
  String name=IOUtil.readString(dis);
  String function=IOUtil.readString(dis);
  IBaseExpression expr=ExprUtil.loadBaseExpr(dis);
  IBaseExpression filter=ExprUtil.loadBaseExpr(dis);
  Binding binding=new Binding(name);
  binding.setAggrFunction(function);
  binding.setDataType(type);
  binding.setExpression(expr);
  binding.setFilter(filter);
  int argSize=IOUtil.readInt(dis);
  for (int i=0; i < argSize; i++) {
    binding.addArgument(ExprUtil.loadBaseExpr(dis));
  }
  int aggrSize=IOUtil.readInt(dis);
  for (int i=0; i < aggrSize; i++) {
    binding.addAggregateOn(IOUtil.readString(dis));
  }
  if (version >= VersionManager.VERSION_2_6_3_1) {
    boolean hasTimeFunction=IOUtil.readBool(dis);
    if (hasTimeFunction) {
      String timeDimensionName=IOUtil.readString(dis);
      TimeFunction time=new TimeFunction();
      if (timeDimensionName != null) {
        time.setTimeDimension(timeDimensionName);
        Date referenceDate=(Date)IOUtil.readObject(dis);
        time.setReferenceDate(new ReferenceDate(referenceDate));
        boolean containsBasePeriod=IOUtil.readBool(dis);
        if (containsBasePeriod) {
          TimePeriodType periodType=getPeriodType(IOUtil.readString(dis));
          int unit=IOUtil.readInt(dis);
          boolean isCurrent=IOUtil.readBool(dis);
          TimePeriod basedTimePeriod=new TimePeriod(unit,periodType,isCurrent);
          time.setBaseTimePeriod(basedTimePeriod);
        }
        boolean containsRelativePeriod=IOUtil.readBool(dis);
        if (containsRelativePeriod) {
          TimePeriodType periodType=getPeriodType(IOUtil.readString(dis));
          int unit=IOUtil.readInt(dis);
          TimePeriod relativeTimePeriod=new TimePeriod(unit,periodType);
          time.setRelativeTimePeriod(relativeTimePeriod);
        }
      }
      binding.setTimeFunction(time);
    }
  }
  return binding;
}",0.9870711089010442
66084,"/** 
 * @param dos
 * @param binding
 * @throws DataException
 */
public static void saveBinding(DataOutputStream dos,IBinding binding) throws DataException {
  int type=binding.getDataType();
  String name=binding.getBindingName();
  String function=binding.getAggrFunction();
  IBaseExpression expr=binding.getExpression();
  IBaseExpression filter=binding.getFilter();
  List arguments=binding.getArguments();
  List aggregateOn=binding.getAggregatOns();
  ITimeFunction timeFunction=binding.getTimeFunction();
  try {
    IOUtil.writeInt(dos,type);
    IOUtil.writeString(dos,name);
    IOUtil.writeString(dos,function);
    ExprUtil.saveBaseExpr(dos,expr);
    ExprUtil.saveBaseExpr(dos,filter);
    IOUtil.writeInt(dos,arguments.size());
    for (int i=0; i < arguments.size(); i++) {
      ExprUtil.saveBaseExpr(dos,(IBaseExpression)arguments.get(i));
    }
    IOUtil.writeInt(dos,aggregateOn.size());
    for (int i=0; i < aggregateOn.size(); i++) {
      IOUtil.writeString(dos,aggregateOn.get(i).toString());
    }
    if (VersionManager.getLatestVersion() >= VersionManager.VERSION_2_6_3_1) {
      if (timeFunction != null) {
        IOUtil.writeBool(dos,true);
        IOUtil.writeString(dos,timeFunction.getTimeDimension());
        IOUtil.writeObject(dos,timeFunction.getReferenceDate().getDate());
        ITimePeriod baseTimePeriod=timeFunction.getBaseTimePeriod();
        ITimePeriod relativeTimePeriod=timeFunction.getRelativeTimePeriod();
        if (baseTimePeriod != null) {
          IOUtil.writeBool(dos,true);
          IOUtil.writeString(dos,baseTimePeriod.getType().toString());
          IOUtil.writeInt(dos,baseTimePeriod.countOfUnit());
          IOUtil.writeBool(dos,baseTimePeriod.isCurrent());
        }
 else {
          IOUtil.writeBool(dos,false);
        }
        if (relativeTimePeriod != null) {
          IOUtil.writeBool(dos,true);
          IOUtil.writeObject(dos,relativeTimePeriod.getType().toString());
          IOUtil.writeInt(dos,relativeTimePeriod.countOfUnit());
        }
 else {
          IOUtil.writeBool(dos,false);
        }
      }
 else {
        IOUtil.writeBool(dos,false);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param dos
 * @param binding
 * @throws DataException
 */
public static void saveBinding(DataOutputStream dos,IBinding binding,int version) throws DataException {
  int type=binding.getDataType();
  String name=binding.getBindingName();
  String function=binding.getAggrFunction();
  IBaseExpression expr=binding.getExpression();
  IBaseExpression filter=binding.getFilter();
  List arguments=binding.getArguments();
  List aggregateOn=binding.getAggregatOns();
  ITimeFunction timeFunction=binding.getTimeFunction();
  try {
    IOUtil.writeInt(dos,type);
    IOUtil.writeString(dos,name);
    IOUtil.writeString(dos,function);
    ExprUtil.saveBaseExpr(dos,expr);
    ExprUtil.saveBaseExpr(dos,filter);
    IOUtil.writeInt(dos,arguments.size());
    for (int i=0; i < arguments.size(); i++) {
      ExprUtil.saveBaseExpr(dos,(IBaseExpression)arguments.get(i));
    }
    IOUtil.writeInt(dos,aggregateOn.size());
    for (int i=0; i < aggregateOn.size(); i++) {
      IOUtil.writeString(dos,aggregateOn.get(i).toString());
    }
    if (version >= VersionManager.VERSION_2_6_3_1) {
      if (timeFunction != null) {
        IOUtil.writeBool(dos,true);
        IOUtil.writeString(dos,timeFunction.getTimeDimension());
        IOUtil.writeObject(dos,timeFunction.getReferenceDate().getDate());
        ITimePeriod baseTimePeriod=timeFunction.getBaseTimePeriod();
        ITimePeriod relativeTimePeriod=timeFunction.getRelativeTimePeriod();
        if (baseTimePeriod != null) {
          IOUtil.writeBool(dos,true);
          IOUtil.writeString(dos,baseTimePeriod.getType().toString());
          IOUtil.writeInt(dos,baseTimePeriod.countOfUnit());
          IOUtil.writeBool(dos,baseTimePeriod.isCurrent());
        }
 else {
          IOUtil.writeBool(dos,false);
        }
        if (relativeTimePeriod != null) {
          IOUtil.writeBool(dos,true);
          IOUtil.writeObject(dos,relativeTimePeriod.getType().toString());
          IOUtil.writeInt(dos,relativeTimePeriod.countOfUnit());
        }
 else {
          IOUtil.writeBool(dos,false);
        }
      }
 else {
        IOUtil.writeBool(dos,false);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9883668903803132
66085,"/** 
 * @param outputStream
 * @param exprMap
 * @throws IOException
 * @throws DataException 
 */
private static Map loadBinding(InputStream inputStream,int version) throws IOException, DataException {
  DataInputStream dis=new DataInputStream(inputStream);
  Map exprMap=new HashMap();
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    String exprName=IOUtil.readString(dis);
    if (version < VersionManager.VERSION_2_2_1)     exprMap.put(exprName,new Binding(exprName,ExprUtil.loadBaseExpr(dis)));
 else     exprMap.put(exprName,BindingIOUtil.loadBinding(dis));
  }
  return exprMap;
}","/** 
 * @param outputStream
 * @param exprMap
 * @throws IOException
 * @throws DataException 
 */
private static Map loadBinding(InputStream inputStream,int version) throws IOException, DataException {
  DataInputStream dis=new DataInputStream(inputStream);
  Map exprMap=new HashMap();
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    String exprName=IOUtil.readString(dis);
    if (version < VersionManager.VERSION_2_2_1)     exprMap.put(exprName,new Binding(exprName,ExprUtil.loadBaseExpr(dis)));
 else     exprMap.put(exprName,BindingIOUtil.loadBinding(dis,version));
  }
  return exprMap;
}",0.9934640522875816
66086,"/** 
 * @param outputStream
 * @param exprMap
 * @throws IOException
 * @throws DataException 
 */
private static void saveBinding(OutputStream outputStream,Map exprMap,int version) throws IOException, DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  if (exprMap == null) {
    IOUtil.writeInt(dos,0);
  }
 else {
    IOUtil.writeInt(dos,exprMap.size());
    Iterator it=exprMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Entry)it.next();
      IOUtil.writeString(dos,(String)entry.getKey());
      if (version < VersionManager.VERSION_2_2_1)       ExprUtil.saveBaseExpr(dos,((IBinding)entry.getValue()).getExpression());
 else       BindingIOUtil.saveBinding(dos,(IBinding)entry.getValue());
    }
  }
  dos.flush();
}","/** 
 * @param outputStream
 * @param exprMap
 * @throws IOException
 * @throws DataException 
 */
private static void saveBinding(OutputStream outputStream,Map exprMap,int version) throws IOException, DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  if (exprMap == null) {
    IOUtil.writeInt(dos,0);
  }
 else {
    IOUtil.writeInt(dos,exprMap.size());
    Iterator it=exprMap.entrySet().iterator();
    while (it.hasNext()) {
      Map.Entry entry=(Entry)it.next();
      IOUtil.writeString(dos,(String)entry.getKey());
      if (version < VersionManager.VERSION_2_2_1)       ExprUtil.saveBaseExpr(dos,((IBinding)entry.getValue()).getExpression());
 else       BindingIOUtil.saveBinding(dos,(IBinding)entry.getValue(),version);
    }
  }
  dos.flush();
}",0.9948783610755442
66087,"/** 
 * Saves   {@code CubeQueryDefinition} instance into report document
 * @param queryResultID
 * @param writer
 * @param qd
 * @throws DataException
 * @throws IOException
 */
public static void save(String queryResultID,IDocArchiveWriter writer,ICubeQueryDefinition qd) throws DataException, IOException {
  DataOutputStream dos=null;
  try {
    RAOutputStream outputStream=writer.createRandomAccessStream(queryResultID + STREAM_FLAG);
    dos=new DataOutputStream(outputStream);
    IOUtil.writeString(dos,qd.getName());
    IOUtil.writeBool(dos,qd.cacheQueryResults());
    IOUtil.writeInt(dos,qd.getFilterOption());
    saveBindings(dos,qd.getBindings());
    saveFilters(dos,qd.getFilters());
    saveSortDefns(dos,qd.getSorts());
    saveMeasures(dos,qd.getMeasures());
    saveComputedMeasures(dos,qd.getComputedMeasures());
    saveEdges(dos,qd);
    saveCubeOperations(dos,qd.getCubeOperations());
    dos.flush();
  }
  finally {
    if (dos != null) {
      dos.close();
    }
  }
}","/** 
 * Saves   {@code CubeQueryDefinition} instance into report document
 * @param queryResultID
 * @param writer
 * @param qd
 * @throws DataException
 * @throws IOException
 */
public static void save(String queryResultID,IDocArchiveWriter writer,ICubeQueryDefinition qd) throws DataException, IOException {
  DataOutputStream dos=null;
  try {
    RAOutputStream outputStream=writer.createRandomAccessStream(queryResultID + STREAM_FLAG);
    dos=new DataOutputStream(outputStream);
    IOUtil.writeString(dos,qd.getName());
    IOUtil.writeBool(dos,qd.cacheQueryResults());
    IOUtil.writeInt(dos,qd.getFilterOption());
    saveBindings(dos,qd.getBindings(),VersionManager.getLatestVersion());
    saveFilters(dos,qd.getFilters());
    saveSortDefns(dos,qd.getSorts());
    saveMeasures(dos,qd.getMeasures());
    saveComputedMeasures(dos,qd.getComputedMeasures());
    saveEdges(dos,qd);
    saveCubeOperations(dos,qd.getCubeOperations(),VersionManager.getLatestVersion());
    dos.flush();
    saveVersion(queryResultID,writer);
  }
  finally {
    if (dos != null) {
      dos.close();
    }
  }
}",0.9491203043271516
66088,"private static ICubeOperation loadCubeOperation(DataInputStream dis) throws DataException, IOException {
}","private static ICubeOperation loadCubeOperation(DataInputStream dis,int version) throws DataException, IOException {
}",0.9464285714285714
66089,"/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,IDocArchiveReader reader) throws DataException, IOException {
  DataInputStream dis=null;
  try {
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd);
    loadFilters(dis,cqd);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadEdges(dis,cqd);
    loadCubeOperations(dis,cqd);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}","/** 
 * Loads   {@code CubeQueryDefinition} instance from report document
 * @param queryResultID
 * @param reader
 * @return
 * @throws DataException
 * @throws IOException
 */
public static ICubeQueryDefinition load(String queryResultID,DataEngineContext context) throws DataException, IOException {
  DataInputStream dis=null;
  IDocArchiveReader reader=context.getDocReader();
  int version=0;
  try {
    if (reader.exists(queryResultID + ""String_Node_Str"")) {
      RAInputStream inputStream=reader.getStream(queryResultID + ""String_Node_Str"");
      DataInputStream stream=new DataInputStream(inputStream);
      version=IOUtil.readInt(stream);
    }
    RAInputStream inputStream=reader.getStream(queryResultID + STREAM_FLAG);
    dis=new DataInputStream(inputStream);
    String name=IOUtil.readString(dis);
    ICubeQueryDefinition cqd=new CubeQueryDefinition(name);
    cqd.setCacheQueryResults(IOUtil.readBool(dis));
    cqd.setFilterOption(IOUtil.readInt(dis));
    loadBindings(dis,cqd,version);
    loadFilters(dis,cqd);
    loadSortDefns(dis,cqd);
    loadMeasures(dis,cqd);
    loadComputedMeasures(dis,cqd);
    loadEdges(dis,cqd);
    loadCubeOperations(dis,cqd,version);
    return cqd;
  }
  finally {
    if (dis != null) {
      dis.close();
    }
  }
}",0.8261851015801355
66090,"private static void saveBindings(DataOutputStream dos,List<IBinding> bindings) throws DataException, IOException {
  if (writeSize(dos,bindings) > 0) {
    for (    IBinding b : bindings) {
      BindingIOUtil.saveBinding(dos,b);
    }
  }
}","private static void saveBindings(DataOutputStream dos,List<IBinding> bindings,int version) throws DataException, IOException {
  if (writeSize(dos,bindings) > 0) {
    for (    IBinding b : bindings) {
      BindingIOUtil.saveBinding(dos,b,version);
    }
  }
}",0.9601593625498008
66091,"private static void loadBindings(DataInputStream dis,ICubeQueryDefinition qd) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IBinding b=BindingIOUtil.loadBinding(dis);
    qd.addBinding(b);
  }
}","private static void loadBindings(DataInputStream dis,ICubeQueryDefinition qd,int version) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IBinding b=BindingIOUtil.loadBinding(dis,version);
    qd.addBinding(b);
  }
}",0.9619771863117872
66092,"private static void loadCubeOperations(DataInputStream dis,ICubeQueryDefinition qd) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    ICubeOperation co=loadCubeOperation(dis);
    qd.addCubeOperation(co);
  }
}","private static void loadCubeOperations(DataInputStream dis,ICubeQueryDefinition qd,int version) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    ICubeOperation co=loadCubeOperation(dis,version);
    qd.addCubeOperation(co);
  }
}",0.9636363636363636
66093,"private static void saveCubeOperations(DataOutputStream dos,ICubeOperation[] cos) throws DataException, IOException {
  if (writeSize(dos,cos) > 0) {
    for (    ICubeOperation co : cos) {
      saveCubeOperation(dos,co);
    }
  }
}","private static void saveCubeOperations(DataOutputStream dos,ICubeOperation[] cos,int version) throws DataException, IOException {
  if (writeSize(dos,cos) > 0) {
    for (    ICubeOperation co : cos) {
      saveCubeOperation(dos,co,version);
    }
  }
}",0.9590163934426228
66094,"private static void saveCubeOperation(DataOutputStream dos,ICubeOperation co) throws DataException, IOException {
  if (co == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  if (co instanceof AddingNestAggregations) {
    IOUtil.writeInt(dos,CUBE_OPERATION_FLAG_ADDING_NEST_AGGRS);
    saveBindings(dos,Arrays.asList(co.getNewBindings()));
  }
}","private static void saveCubeOperation(DataOutputStream dos,ICubeOperation co,int version) throws DataException, IOException {
  if (co == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  if (co instanceof AddingNestAggregations) {
    IOUtil.writeInt(dos,CUBE_OPERATION_FLAG_ADDING_NEST_AGGRS);
    saveBindings(dos,Arrays.asList(co.getNewBindings()),version);
  }
}",0.9747474747474748
66095,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9985370135570076
66096,"public void initDialog(){
  cmbType.setItems(dataTypes);
  txtDisplayName.setFocus();
  if (isAggregate()) {
    initFunction();
    initFilter();
{
      initAggOn();
    }
  }
  if (isTimePeriod()) {
    initTimeDimension();
    initReferenceDate();
    initCalculationTypeCombo(getTimeDimsionName());
  }
  if (getBinding() == null) {
    setTypeSelect(dataTypes[0]);
    if (isTimePeriod()) {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),DEFAULT_TIMEPERIOD_NAME);
    }
 else {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),isAggregate() ? DEFAULT_AGGREGATION_NAME : DEFAULT_ITEM_NAME);
    }
    setName(this.newBinding.getName());
  }
 else {
    setName(getBinding().getName());
    setDisplayName(getBinding().getDisplayName());
    setDisplayNameID(getBinding().getDisplayNameID());
    if (getBinding().getDataType() != null)     if (DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()) != null)     setTypeSelect(DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()).getDisplayName());
 else     cmbType.setText(""String_Node_Str"");
    if (getBinding().getExpression() != null)     setDataFieldExpression(getBinding());
  }
  if (this.getBinding() != null) {
    this.txtName.setEnabled(false);
  }
  validate();
  hasInitDialog=true;
  composite.getShell().pack();
}","public void initDialog(){
  cmbType.setItems(dataTypes);
  txtDisplayName.setFocus();
  if (isAggregate()) {
    initFunction();
    initFilter();
{
      initAggOn();
    }
  }
  if (isTimePeriod()) {
    initTimeDimension();
    initReferenceDate();
    initCalculationTypeCombo(getTimeDimsionName());
  }
  if (getBinding() == null) {
    if (cmbType.getSelectionIndex() < 0) {
      setTypeSelect(dataTypes[0]);
    }
    if (isTimePeriod()) {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),DEFAULT_TIMEPERIOD_NAME);
    }
 else {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),isAggregate() ? DEFAULT_AGGREGATION_NAME : DEFAULT_ITEM_NAME);
    }
    setName(this.newBinding.getName());
  }
 else {
    setName(getBinding().getName());
    setDisplayName(getBinding().getDisplayName());
    setDisplayNameID(getBinding().getDisplayNameID());
    if (getBinding().getDataType() != null)     if (DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()) != null)     setTypeSelect(DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()).getDisplayName());
 else     cmbType.setText(""String_Node_Str"");
    if (getBinding().getExpression() != null)     setDataFieldExpression(getBinding());
  }
  if (this.getBinding() != null) {
    this.txtName.setEnabled(false);
  }
  validate();
  hasInitDialog=true;
  composite.getShell().pack();
}",0.9814882032667877
66097,"/** 
 * This method revise property values according to limit of different chart types.
 * @param eObj
 * @param eRefObj
 */
protected void revise(Chart eObj,Chart eRefObj){
  if (hasStockSeries(eObj)) {
    ((ChartWithAxes)eObj).unsetOrientation();
  }
  if (eObj != null) {
    if (eObj instanceof ChartWithAxes && eObj.getDimension() != ChartDimension.THREE_DIMENSIONAL_LITERAL) {
      rotateAxesTitle((ChartWithAxes)eObj);
    }
  }
}","/** 
 * This method revise property values according to limit of different chart types.
 * @param eObj
 * @param eRefObj
 */
protected void revise(Chart eObj,Chart eRefObj){
  boolean[] hasSeries=hasSpecificSeries(eObj);
  if (hasSeries[0]) {
    ((ChartWithAxes)eObj).unsetOrientation();
  }
  if (hasSeries[1]) {
    ((ChartWithAxes)eObj).setOrientation(Orientation.HORIZONTAL_LITERAL);
  }
  if (eObj != null) {
    if (eObj instanceof ChartWithAxes && eObj.getDimension() != ChartDimension.THREE_DIMENSIONAL_LITERAL) {
      rotateAxesTitle((ChartWithAxes)eObj);
    }
  }
}",0.8259587020648967
66098,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (listAlignmentButtons.contains(oSource)) {
    if (!((Button)oSource).getSelection()) {
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
      updatePreview();
      return;
    }
    selectAllToggleButtons(false);
    ((Button)oSource).setSelection(true);
  }
 else   if (e.widget == btnAlignmentAuto) {
    if (btnAlignmentAuto.getSelection()) {
      disableAlignmentBtns();
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
    }
 else {
      for (int i=0; i < listAlignmentButtons.size(); i++) {
        listAlignmentButtons.get(i).setEnabled(true);
      }
    }
    updatePreview();
  }
 else   if (e.widget == btnAutoRotation) {
    if (btnAutoRotation.getSelection()) {
      iscRotation.setEnabled(false);
      ascRotation.setEnabled(false);
      fdCurrent.unsetRotation();
    }
 else {
      iscRotation.setEnabled(true);
      ascRotation.setEnabled(true);
      fdCurrent.setRotation(iscRotation.getValue());
    }
    iscRotation.setValue(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.setAngle(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.redraw();
    updatePreview();
  }
 else   if (oSource.equals(btnBold)) {
    if (btnBold.getSelection()) {
      fdCurrent.setBold(btnBold.getSelection());
    }
 else {
      fdCurrent.unsetBold();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnItalic)) {
    if (btnItalic.getSelection()) {
      fdCurrent.setItalic(btnItalic.getSelection());
    }
 else {
      fdCurrent.unsetItalic();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnUnderline)) {
    if (btnUnderline.getSelection()) {
      fdCurrent.setUnderline(btnUnderline.getSelection());
    }
 else {
      fdCurrent.unsetUnderline();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnStrikethru)) {
    if (btnStrikethru.getSelection()) {
      fdCurrent.setStrikethrough(btnStrikethru.getSelection());
    }
 else {
      fdCurrent.unsetStrikethrough();
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontNames)) {
    if (cmbFontNames.getText().equals(ChartUIUtil.FONT_AUTO)) {
      fdCurrent.setName(null);
    }
 else {
      fdCurrent.setName(cmbFontNames.getText());
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontSizes)) {
    handleFontSize();
  }
 else   if (oSource.equals(this.btnATopLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (listAlignmentButtons.contains(oSource)) {
    if (!((Button)oSource).getSelection()) {
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
      updatePreview();
      return;
    }
    selectAllToggleButtons(false);
    ((Button)oSource).setSelection(true);
  }
  if (e.widget == btnAlignmentAuto) {
    if (btnAlignmentAuto.getSelection()) {
      disableAlignmentBtns();
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
    }
 else {
      for (int i=0; i < listAlignmentButtons.size(); i++) {
        listAlignmentButtons.get(i).setEnabled(true);
      }
    }
    updatePreview();
  }
 else   if (e.widget == btnAutoRotation) {
    if (btnAutoRotation.getSelection()) {
      iscRotation.setEnabled(false);
      ascRotation.setEnabled(false);
      fdCurrent.unsetRotation();
    }
 else {
      iscRotation.setEnabled(true);
      ascRotation.setEnabled(true);
      fdCurrent.setRotation(iscRotation.getValue());
    }
    iscRotation.setValue(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.setAngle(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.redraw();
    updatePreview();
  }
 else   if (oSource.equals(btnBold)) {
    if (btnBold.getSelection()) {
      fdCurrent.setBold(btnBold.getSelection());
    }
 else {
      fdCurrent.unsetBold();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnItalic)) {
    if (btnItalic.getSelection()) {
      fdCurrent.setItalic(btnItalic.getSelection());
    }
 else {
      fdCurrent.unsetItalic();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnUnderline)) {
    if (btnUnderline.getSelection()) {
      fdCurrent.setUnderline(btnUnderline.getSelection());
    }
 else {
      fdCurrent.unsetUnderline();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnStrikethru)) {
    if (btnStrikethru.getSelection()) {
      fdCurrent.setStrikethrough(btnStrikethru.getSelection());
    }
 else {
      fdCurrent.unsetStrikethrough();
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontNames)) {
    if (cmbFontNames.getText().equals(ChartUIUtil.FONT_AUTO)) {
      fdCurrent.setName(null);
    }
 else {
      fdCurrent.setName(cmbFontNames.getText());
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontSizes)) {
    handleFontSize();
  }
 else   if (oSource.equals(this.btnATopLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
}",0.9993634627625716
66099,"public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    getChart().getTitle().getLabel().getCaption().setValue(txtTitle.getText());
  }
 else   if (event.widget.equals(fdcFont)) {
    if (event.type == FontDefinitionComposite.FONT_CHANTED_EVENT) {
      getChart().getTitle().getLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
      getChart().getTitle().getLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
    }
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(txtTitle)) {
    if (txtTitle.getText() == null || txtTitle.getText().trim().length() == 0) {
      getChart().getTitle().getLabel().getCaption().setValue(null);
    }
 else {
      getChart().getTitle().getLabel().getCaption().setValue(txtTitle.getText());
    }
  }
 else   if (event.widget.equals(fdcFont)) {
    if (event.type == FontDefinitionComposite.FONT_CHANTED_EVENT) {
      getChart().getTitle().getLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
      getChart().getTitle().getLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
    }
  }
}",0.8455565142364107
66100,"private void initAggOn(){
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    String[] aggOns=getAggOns(xtabHandle);
    cmbAggOn.setItems(aggOns);
    String aggstr=""String_Node_Str"";
    if (getBinding() != null) {
      List aggOnList=getBinding().getAggregateOnList();
      int i=0;
      for (Iterator iterator=aggOnList.iterator(); iterator.hasNext(); ) {
        if (i > 0)         aggstr+=""String_Node_Str"";
        String name=(String)iterator.next();
        aggstr+=name;
        i++;
      }
    }
 else     if (getDataItemContainer() instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)getDataItemContainer();
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
 else     if (container instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)container;
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
    for (int j=0; j < aggOns.length; j++) {
      if (aggOns[j].equals(aggstr)) {
        cmbAggOn.select(j);
        return;
      }
    }
    cmbAggOn.select(0);
  }
 catch (  ExtendedElementException e) {
    ExceptionUtil.handle(e);
  }
}","private void initAggOn(){
  try {
    CrosstabReportItemHandle xtabHandle=(CrosstabReportItemHandle)((ExtendedItemHandle)getBindingHolder()).getReportItem();
    String[] aggOns=getAggOns(xtabHandle);
    cmbAggOn.setItems(aggOns);
    String aggstr=""String_Node_Str"";
    if (getBinding() != null) {
      List aggOnList=getBinding().getAggregateOnList();
      int i=0;
      for (Iterator iterator=aggOnList.iterator(); iterator.hasNext(); ) {
        if (i > 0)         aggstr+=""String_Node_Str"";
        String name=(String)iterator.next();
        aggstr+=name;
        i++;
      }
    }
 else     if (isTimePeriod()) {
      List rowLevelList=getCrosstabViewHandleLevels(xtabHandle,ICrosstabConstants.ROW_AXIS_TYPE);
      List columnLevelList=getCrosstabViewHandleLevels(xtabHandle,ICrosstabConstants.COLUMN_AXIS_TYPE);
      if (rowLevelList.size() != 0 && columnLevelList.size() == 0) {
        aggstr=(String)rowLevelList.get(rowLevelList.size() - 1);
      }
 else       if (rowLevelList.size() == 0 && columnLevelList.size() != 0) {
        aggstr=(String)columnLevelList.get(columnLevelList.size() - 1);
      }
 else       if (rowLevelList.size() != 0 && columnLevelList.size() != 0) {
        aggstr=(String)rowLevelList.get(rowLevelList.size() - 1) + ""String_Node_Str"" + (String)columnLevelList.get(columnLevelList.size() - 1);
      }
    }
 else     if (getDataItemContainer() instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)getDataItemContainer();
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
 else     if (container instanceof AggregationCellHandle) {
      AggregationCellHandle cellHandle=(AggregationCellHandle)container;
      if (cellHandle.getAggregationOnRow() != null) {
        aggstr+=cellHandle.getAggregationOnRow().getFullName();
        if (cellHandle.getAggregationOnColumn() != null) {
          aggstr+=""String_Node_Str"";
        }
      }
      if (cellHandle.getAggregationOnColumn() != null) {
        aggstr+=cellHandle.getAggregationOnColumn().getFullName();
      }
    }
    for (int j=0; j < aggOns.length; j++) {
      if (aggOns[j].equals(aggstr)) {
        cmbAggOn.select(j);
        return;
      }
    }
    cmbAggOn.select(0);
  }
 catch (  ExtendedElementException e) {
    ExceptionUtil.handle(e);
  }
}",0.8301132578281146
66101,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (listAlignmentButtons.contains(oSource)) {
    if (!((Button)oSource).getSelection()) {
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
      updatePreview();
      return;
    }
    selectAllToggleButtons(false);
    ((Button)oSource).setSelection(true);
  }
 else   if (e.widget == btnAlignmentAuto) {
    if (btnAlignmentAuto.getSelection()) {
      disableAlignmentBtns();
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
    }
 else {
      for (int i=0; i < listAlignmentButtons.size(); i++) {
        listAlignmentButtons.get(i).setEnabled(true);
      }
    }
    updatePreview();
  }
 else   if (e.widget == btnAutoRotation) {
    if (btnAutoRotation.getSelection()) {
      iscRotation.setEnabled(false);
      ascRotation.setEnabled(false);
      fdCurrent.unsetRotation();
    }
 else {
      iscRotation.setEnabled(true);
      ascRotation.setEnabled(true);
    }
    iscRotation.setValue(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.setAngle(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.redraw();
    updatePreview();
  }
 else   if (oSource.equals(btnBold)) {
    if (btnBold.getSelection()) {
      fdCurrent.setBold(btnBold.getSelection());
    }
 else {
      fdCurrent.unsetBold();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnItalic)) {
    if (btnItalic.getSelection()) {
      fdCurrent.setItalic(btnItalic.getSelection());
    }
 else {
      fdCurrent.unsetItalic();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnUnderline)) {
    if (btnUnderline.getSelection()) {
      fdCurrent.setUnderline(btnUnderline.getSelection());
    }
 else {
      fdCurrent.unsetUnderline();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnStrikethru)) {
    if (btnStrikethru.getSelection()) {
      fdCurrent.setStrikethrough(btnStrikethru.getSelection());
    }
 else {
      fdCurrent.unsetStrikethrough();
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontNames)) {
    if (cmbFontNames.getText().equals(ChartUIUtil.FONT_AUTO)) {
      fdCurrent.setName(null);
    }
 else {
      fdCurrent.setName(cmbFontNames.getText());
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontSizes)) {
    handleFontSize();
  }
 else   if (oSource.equals(this.btnATopLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (listAlignmentButtons.contains(oSource)) {
    if (!((Button)oSource).getSelection()) {
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
      updatePreview();
      return;
    }
    selectAllToggleButtons(false);
    ((Button)oSource).setSelection(true);
  }
 else   if (e.widget == btnAlignmentAuto) {
    if (btnAlignmentAuto.getSelection()) {
      disableAlignmentBtns();
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
    }
 else {
      for (int i=0; i < listAlignmentButtons.size(); i++) {
        listAlignmentButtons.get(i).setEnabled(true);
      }
    }
    updatePreview();
  }
 else   if (e.widget == btnAutoRotation) {
    if (btnAutoRotation.getSelection()) {
      iscRotation.setEnabled(false);
      ascRotation.setEnabled(false);
      fdCurrent.unsetRotation();
    }
 else {
      iscRotation.setEnabled(true);
      ascRotation.setEnabled(true);
      fdCurrent.setRotation(iscRotation.getValue());
    }
    iscRotation.setValue(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.setAngle(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.redraw();
    updatePreview();
  }
 else   if (oSource.equals(btnBold)) {
    if (btnBold.getSelection()) {
      fdCurrent.setBold(btnBold.getSelection());
    }
 else {
      fdCurrent.unsetBold();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnItalic)) {
    if (btnItalic.getSelection()) {
      fdCurrent.setItalic(btnItalic.getSelection());
    }
 else {
      fdCurrent.unsetItalic();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnUnderline)) {
    if (btnUnderline.getSelection()) {
      fdCurrent.setUnderline(btnUnderline.getSelection());
    }
 else {
      fdCurrent.unsetUnderline();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnStrikethru)) {
    if (btnStrikethru.getSelection()) {
      fdCurrent.setStrikethrough(btnStrikethru.getSelection());
    }
 else {
      fdCurrent.unsetStrikethrough();
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontNames)) {
    if (cmbFontNames.getText().equals(ChartUIUtil.FONT_AUTO)) {
      fdCurrent.setName(null);
    }
 else {
      fdCurrent.setName(cmbFontNames.getText());
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontSizes)) {
    handleFontSize();
  }
 else   if (oSource.equals(this.btnATopLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
}",0.9943490777268366
66102,"public void widgetSelected(SelectionEvent event){
  if (event.widget == btnAuto) {
    if (btnAuto.getSelection()) {
      updateInsetsButtons(false);
      if (defaultInsets != null) {
        insets.unsetTop();
        insets.unsetBottom();
        insets.unsetLeft();
        insets.unsetRight();
        try {
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getTop());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getBottom());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getLeft());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getRight());
        }
 catch (        ChartException e) {
          ChartWizard.displayException(e);
        }
      }
    }
 else {
      updateInsetsButtons(true);
      insets.setTop(txtTop.getValue());
      insets.setLeft(txtLeft.getValue());
      insets.setRight(txtRight.getValue());
      insets.setBottom(txtBottom.getValue());
    }
    updateInsetsData(insets);
  }
}","public void widgetSelected(SelectionEvent event){
  if (event.widget == btnAuto) {
    if (btnAuto.getSelection()) {
      updateInsetsButtons(false);
      if (defaultInsets != null) {
        insets.unsetTop();
        insets.unsetBottom();
        insets.unsetLeft();
        insets.unsetRight();
        try {
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getTop());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getBottom());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getLeft());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getRight());
        }
 catch (        ChartException e) {
          ChartWizard.displayException(e);
        }
      }
    }
 else {
      updateInsetsButtons(true);
      insets.setTop(txtTop.getValue());
      insets.setLeft(txtLeft.getValue());
      insets.setRight(txtRight.getValue());
      insets.setBottom(txtBottom.getValue());
    }
    setModifyListener(false);
    updateInsetsData(insets);
    setModifyListener(true);
  }
}",0.9728984841525036
66103,"public void widgetSelected(SelectionEvent e){
  if (getChart() instanceof ChartWithoutAxes) {
    if (e.widget == cmbMinSlice) {
      if (cmbMinSlice.getSelectionIndex() == 0) {
        ((ChartWithoutAxes)getChart()).unsetMinSlicePercent();
      }
 else {
        ((ChartWithoutAxes)getChart()).setMinSlicePercent(cmbMinSlice.getSelectionIndex() == 1);
      }
      updateUIState();
    }
 else     if (e.widget == btnTxtMinSliceAuto) {
      if (btnTxtMinSliceAuto.getSelection()) {
        ((ChartWithoutAxes)getChart()).unsetMinSlice();
      }
 else {
        ((ChartWithoutAxes)getChart()).setMinSlice(txtMinSlice.getValue());
      }
      txtMinSlice.setValue(((ChartWithoutAxes)getChart()).getMinSlice());
      updateUIState();
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (getChart() instanceof ChartWithoutAxes) {
    if (e.widget == cmbMinSlice) {
      if (cmbMinSlice.getSelectionIndex() == 0) {
        ((ChartWithoutAxes)getChart()).unsetMinSlicePercent();
      }
 else {
        ((ChartWithoutAxes)getChart()).setMinSlicePercent(cmbMinSlice.getSelectionIndex() == 1);
      }
      updateUIState();
    }
 else     if (e.widget == btnTxtMinSliceAuto) {
      if (btnTxtMinSliceAuto.getSelection()) {
        ((ChartWithoutAxes)getChart()).unsetMinSlice();
      }
 else {
        ((ChartWithoutAxes)getChart()).setMinSlice(txtMinSlice.getValue());
      }
      txtMinSlice.removeModifyListener(this);
      txtMinSlice.setValue(((ChartWithoutAxes)getChart()).getMinSlice());
      txtMinSlice.addModifyListener(this);
      updateUIState();
    }
  }
}",0.9440603394091768
66104,"@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
  if (measureViewHandle == null) {
    return false;
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  CubeHandle cube=reportHandle.getCube();
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean isEnabled(){
  Object selection=getSelection();
  if (selection == null && !(selection instanceof DesignElementHandle)) {
    return false;
  }
  ExtendedItemHandle extendedHandle=CrosstabAdaptUtil.getExtendedItemHandle((DesignElementHandle)selection);
  if (extendedHandle == null) {
    return false;
  }
  measureViewHandle=CrosstabAdaptUtil.getMeasureViewHandle(extendedHandle);
  if (measureViewHandle == null) {
    return false;
  }
  if (DEUtil.isReferenceElement(measureViewHandle.getCrosstabHandle())) {
    return false;
  }
  CrosstabReportItemHandle reportHandle=measureViewHandle.getCrosstab();
  CubeHandle cube=reportHandle.getCube();
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (CrosstabAdaptUtil.isTimeDimension(dimension)) {
      DimensionViewHandle viewHandle=reportHandle.getDimension(dimension.getName());
      if (viewHandle == null) {
        int count=dimension.getDefaultHierarchy().getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelHandle levelHandle=dimension.getDefaultHierarchy().getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelHandle.getDateTimeLevelType())) {
          return true;
        }
      }
 else {
        int count=viewHandle.getLevelCount();
        if (count == 0) {
          continue;
        }
        LevelViewHandle levelViewHandle=viewHandle.getLevel(0);
        if (DesignChoiceConstants.DATE_TIME_LEVEL_TYPE_YEAR.equals(levelViewHandle.getCubeLevel().getDateTimeLevelType())) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9716479621972828
66105,"/** 
 * Note: Manually written
 */
protected void initialize(){
  setVersion(VERSION);
  block=BlockImpl.create();
  TitleBlock tb=(TitleBlock)TitleBlockImpl.create();
  Plot pl=(Plot)PlotImpl.create();
  Legend lg=(Legend)LegendImpl.create();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(Messages.getString(""String_Node_Str""));
  txtChartTitle.getFont().setSize(16);
  txtChartTitle.getFont().setBold(true);
  TextAlignment taTitle=TextAlignmentImpl.create();
  taTitle.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  taTitle.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  setSeriesThickness(10);
  setInteractivity(InteractivityImpl.create());
  setEmptyMessage(newEmptyMessage());
  ChartModelHelper.instance().updateExtendedProperties(getExtendedProperties());
}","/** 
 * Note: Manually written
 */
protected void initialize(){
  setVersion(VERSION);
  block=BlockImpl.create();
  TitleBlock tb=(TitleBlock)TitleBlockImpl.create();
  Plot pl=(Plot)PlotImpl.create();
  Legend lg=(Legend)LegendImpl.create();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(Messages.getString(""String_Node_Str""));
  txtChartTitle.getFont().setSize(16);
  txtChartTitle.getFont().setBold(true);
  TextAlignment taTitle=TextAlignmentImpl.create();
  taTitle.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  taTitle.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  setSeriesThickness(10);
  setInteractivity(InteractivityImpl.create());
  setEmptyMessage(newEmptyMessage());
  ChartModelHelper.instance().updateExtendedProperties(getExtendedProperties());
  units=""String_Node_Str"";
}",0.986356745831228
66106,"/** 
 * @param parent
 * @param style
 * @param numberRows specify row number. Valid number is 1,2,4.
 * @param insets
 * @param sUnits
 * @param serviceprovider
 */
public InsetsComposite(Composite parent,int style,int numberRows,Insets insets,String sUnits,IUIServiceProvider serviceprovider){
  super(parent,style);
  this.numberRows=numberRows;
  this.insets=insets;
  this.sUnits=sUnits;
  this.serviceprovider=serviceprovider;
  init();
  placeComponents();
}","/** 
 * @param parent
 * @param style
 * @param numberRows specify row number. Valid number is 1,2,4.
 * @param insets
 * @param sUnits
 * @param serviceprovider
 * @param context
 */
public InsetsComposite(Composite parent,int style,int numberRows,Insets insets,String sUnits,IUIServiceProvider serviceprovider,ChartWizardContext context){
  super(parent,style);
  this.numberRows=numberRows;
  this.insets=insets;
  this.sUnits=sUnits;
  this.serviceprovider=serviceprovider;
  this.context=context;
  if (this.sUnits == null) {
    this.sUnits=ChartDefaultValueUtil.getDefaultUnits(this.context.getModel());
  }
  init();
  placeComponents();
}",0.7949640287769785
66107,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && !ChartUIExtensionUtil.isSetInvisible(lblCurrent);
  if (attributesContext.isVisibilityEnabled) {
    btnVisible=new TristateCheckbox(cmpGeneral,SWT.NONE);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    btnVisible.setLayoutData(gdCBVisible);
    btnVisible.setSelectionState(lblCurrent.isSetVisible() ? (lblCurrent.isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=ChartUIExtensionUtil.canEnableUI(btnVisible);
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  if (attributesContext.isBackgroundEnabled) {
    lblFill=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFill=new GridData();
    lblFill.setLayoutData(gdLFill);
    lblFill.setText(Messages.getString(""String_Node_Str""));
    lblFill.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
    fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,iFillOption,wizardContext,fBackground);
    GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
    fccBackground.setLayoutData(gdFCCBackground);
    fccBackground.addListener(this);
    fccBackground.setEnabled(bEnableUI);
  }
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  if (attributesContext.isOutlineEnabled) {
    grpOutline=new Group(grpAttributes,SWT.NONE);
    GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
    grpOutline.setLayoutData(gdGOutline);
    grpOutline.setText(Messages.getString(""String_Node_Str""));
    grpOutline.setLayout(flOutline);
    grpOutline.setEnabled(bEnableUI);
    int optionalStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
    liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,optionalStyles,wizardContext,laCurrent);
    liacOutline.addListener(this);
    liacOutline.setAttributesEnabled(bEnableUI);
  }
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
    if (defLabel != null) {
      icInsets.setDefaultInsetsValue(defLabel.getInsets());
    }
  }
  populateLists();
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && !ChartUIExtensionUtil.isSetInvisible(lblCurrent);
  if (attributesContext.isVisibilityEnabled) {
    btnVisible=new TristateCheckbox(cmpGeneral,SWT.NONE);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    btnVisible.setLayoutData(gdCBVisible);
    btnVisible.setSelectionState(lblCurrent.isSetVisible() ? (lblCurrent.isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=ChartUIExtensionUtil.canEnableUI(btnVisible);
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  if (attributesContext.isBackgroundEnabled) {
    lblFill=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFill=new GridData();
    lblFill.setLayoutData(gdLFill);
    lblFill.setText(Messages.getString(""String_Node_Str""));
    lblFill.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
    fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,iFillOption,wizardContext,fBackground);
    GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
    fccBackground.setLayoutData(gdFCCBackground);
    fccBackground.addListener(this);
    fccBackground.setEnabled(bEnableUI);
  }
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  if (attributesContext.isOutlineEnabled) {
    grpOutline=new Group(grpAttributes,SWT.NONE);
    GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
    grpOutline.setLayoutData(gdGOutline);
    grpOutline.setText(Messages.getString(""String_Node_Str""));
    grpOutline.setLayout(flOutline);
    grpOutline.setEnabled(bEnableUI);
    int optionalStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
    liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,optionalStyles,wizardContext,laCurrent);
    liacOutline.addListener(this);
    liacOutline.setAttributesEnabled(bEnableUI);
  }
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider(),wizardContext);
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
    if (defLabel != null) {
      icInsets.setDefaultInsetsValue(defLabel.getInsets());
    }
  }
  populateLists();
}",0.9988678634966844
66108,"protected Composite getComponent(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    cmpContent.setLayout(glContent);
  }
  ic=new InsetsComposite(cmpContent,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.widthHint=300;
  ic.setLayoutData(gdInsets);
  ic.setDefaultInsetsValue(DefaultValueProvider.defChartWithAxes().getBlock().getInsets());
  grpOutline=new Group(cmpContent,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getOutlineAttributesStyle(),getContext(),getBlockForProcessing().getOutline());
  liacOutline.addListener(this);
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    cmpContent.setLayout(glContent);
  }
  ic=new InsetsComposite(cmpContent,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.widthHint=300;
  ic.setLayoutData(gdInsets);
  ic.setDefaultInsetsValue(DefaultValueProvider.defChartWithAxes().getBlock().getInsets());
  grpOutline=new Group(cmpContent,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getOutlineAttributesStyle(),getContext(),getBlockForProcessing().getOutline());
  liacOutline.addListener(this);
  return cmpContent;
}",0.9934310257705912
66109,"protected void createMisc(Group grpGeneral){
  if (getChart().getDimension().getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH) {
    Label lblUnit=new Label(grpGeneral,SWT.NONE);
    GridData gdLBLUnit=new GridData();
    gdLBLUnit.horizontalIndent=1;
    lblUnit.setLayoutData(gdLBLUnit);
    lblUnit.setText(Messages.getString(""String_Node_Str""));
    cmbUnits=new Combo(grpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBUnits=new GridData(GridData.FILL_HORIZONTAL);
    gdCMBUnits.horizontalSpan=2;
    cmbUnits.setLayoutData(gdCMBUnits);
    cmbUnits.addSelectionListener(this);
    lblSeriesThickness=new Label(grpGeneral,SWT.NONE);
    GridData gdLBLSeriesThickness=new GridData();
    gdLBLSeriesThickness.horizontalIndent=1;
    lblSeriesThickness.setLayoutData(gdLBLSeriesThickness);
    txtSeriesThickness=new LocalizedNumberEditorComposite(grpGeneral,SWT.BORDER | SWT.SINGLE);
    new TextNumberEditorAssistField(txtSeriesThickness.getTextControl(),null);
    GridData gdTXTSeriesThickness=new GridData(GridData.FILL_HORIZONTAL);
    txtSeriesThickness.setLayoutData(gdTXTSeriesThickness);
    double dblPoints=getChart().getSeriesThickness();
    double dblCurrent=getContext().getUIServiceProvider().getConvertedValue(dblPoints,""String_Node_Str"",getChart().getUnits());
    txtSeriesThickness.setValue(dblCurrent);
    txtSeriesThickness.addModifyListener(this);
    btnSeriesThickness=new Button(grpGeneral,SWT.CHECK);
    btnSeriesThickness.setText(ChartUIExtensionUtil.getAutoMessage());
    btnSeriesThickness.setSelection(!getChart().isSetSeriesThickness());
    btnSeriesThickness.addSelectionListener(this);
    txtSeriesThickness.setEnabled(!btnSeriesThickness.getSelection());
    populateLists();
  }
  if (getChart() instanceof ChartWithoutAxes) {
    Label lblColumnCount=new Label(grpGeneral,SWT.NONE);
    GridData gdLBLColumnCount=new GridData();
    gdLBLColumnCount.horizontalIndent=1;
    lblColumnCount.setLayoutData(gdLBLColumnCount);
    lblColumnCount.setText(Messages.getString(""String_Node_Str""));
    iscColumnCount=new Spinner(grpGeneral,SWT.BORDER);
    GridData gdISCColumnCount=new GridData(GridData.FILL_HORIZONTAL);
    iscColumnCount.setLayoutData(gdISCColumnCount);
    iscColumnCount.setMinimum(0);
    iscColumnCount.setMaximum(5);
    iscColumnCount.setSelection(getChart().getGridColumnCount());
    iscColumnCount.addSelectionListener(this);
    btnColumnCount=new Button(grpGeneral,SWT.CHECK);
    btnColumnCount.setText(ChartUIExtensionUtil.getAutoMessage());
    btnColumnCount.setSelection(!getChart().isSetGridColumnCount());
    btnColumnCount.addSelectionListener(this);
    iscColumnCount.setEnabled(!btnColumnCount.getSelection());
  }
 else   if (getChart() instanceof ChartWithAxes) {
    Label lblUnitSpacing=new Label(grpGeneral,SWT.NONE);
    GridData gdUnitSpacing=new GridData();
    gdUnitSpacing.horizontalIndent=1;
    lblUnitSpacing.setLayoutData(gdUnitSpacing);
    lblUnitSpacing.setText(Messages.getString(""String_Node_Str""));
    txtUnitSpacing=new Spinner(grpGeneral,SWT.BORDER);
    GridData gdTXTUnitSpacing=new GridData(GridData.FILL_HORIZONTAL);
    txtUnitSpacing.setLayoutData(gdTXTUnitSpacing);
    txtUnitSpacing.setMinimum(0);
    txtUnitSpacing.setMaximum(100);
    txtUnitSpacing.setIncrement(1);
    double unitSpacing=((ChartWithAxes)getChart()).getUnitSpacing();
    txtUnitSpacing.setSelection((int)unitSpacing);
    txtUnitSpacing.addSelectionListener(this);
    btnUnitSpacing=new Button(grpGeneral,SWT.CHECK);
    btnUnitSpacing.setText(ChartUIExtensionUtil.getAutoMessage());
    btnUnitSpacing.setSelection(!((ChartWithAxes)getChart()).isSetUnitSpacing());
    btnUnitSpacing.addSelectionListener(this);
    txtUnitSpacing.setEnabled(!btnUnitSpacing.getSelection());
  }
}","protected void createMisc(Group grpGeneral){
  if (getChart().getDimension().getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH) {
    Label lblUnit=new Label(grpGeneral,SWT.NONE);
    GridData gdLBLUnit=new GridData();
    gdLBLUnit.horizontalIndent=1;
    lblUnit.setLayoutData(gdLBLUnit);
    lblUnit.setText(Messages.getString(""String_Node_Str""));
    cmbUnits=new Combo(grpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBUnits=new GridData(GridData.FILL_HORIZONTAL);
    gdCMBUnits.horizontalSpan=2;
    cmbUnits.setLayoutData(gdCMBUnits);
    cmbUnits.addSelectionListener(this);
    lblSeriesThickness=new Label(grpGeneral,SWT.NONE);
    GridData gdLBLSeriesThickness=new GridData();
    gdLBLSeriesThickness.horizontalIndent=1;
    lblSeriesThickness.setLayoutData(gdLBLSeriesThickness);
    txtSeriesThickness=new LocalizedNumberEditorComposite(grpGeneral,SWT.BORDER | SWT.SINGLE);
    new TextNumberEditorAssistField(txtSeriesThickness.getTextControl(),null);
    GridData gdTXTSeriesThickness=new GridData(GridData.FILL_HORIZONTAL);
    txtSeriesThickness.setLayoutData(gdTXTSeriesThickness);
    double dblPoints=getChart().getSeriesThickness();
    double dblCurrent=getContext().getUIServiceProvider().getConvertedValue(dblPoints,""String_Node_Str"",getUnits());
    txtSeriesThickness.setValue(dblCurrent);
    txtSeriesThickness.addModifyListener(this);
    btnSeriesThickness=new Button(grpGeneral,SWT.CHECK);
    btnSeriesThickness.setText(ChartUIExtensionUtil.getAutoMessage());
    btnSeriesThickness.setSelection(!getChart().isSetSeriesThickness());
    btnSeriesThickness.addSelectionListener(this);
    txtSeriesThickness.setEnabled(!btnSeriesThickness.getSelection());
    populateLists();
  }
  if (getChart() instanceof ChartWithoutAxes) {
    Label lblColumnCount=new Label(grpGeneral,SWT.NONE);
    GridData gdLBLColumnCount=new GridData();
    gdLBLColumnCount.horizontalIndent=1;
    lblColumnCount.setLayoutData(gdLBLColumnCount);
    lblColumnCount.setText(Messages.getString(""String_Node_Str""));
    iscColumnCount=new Spinner(grpGeneral,SWT.BORDER);
    GridData gdISCColumnCount=new GridData(GridData.FILL_HORIZONTAL);
    iscColumnCount.setLayoutData(gdISCColumnCount);
    iscColumnCount.setMinimum(0);
    iscColumnCount.setMaximum(5);
    iscColumnCount.setSelection(getChart().getGridColumnCount());
    iscColumnCount.addSelectionListener(this);
    btnColumnCount=new Button(grpGeneral,SWT.CHECK);
    btnColumnCount.setText(ChartUIExtensionUtil.getAutoMessage());
    btnColumnCount.setSelection(!getChart().isSetGridColumnCount());
    btnColumnCount.addSelectionListener(this);
    iscColumnCount.setEnabled(!btnColumnCount.getSelection());
  }
 else   if (getChart() instanceof ChartWithAxes) {
    Label lblUnitSpacing=new Label(grpGeneral,SWT.NONE);
    GridData gdUnitSpacing=new GridData();
    gdUnitSpacing.horizontalIndent=1;
    lblUnitSpacing.setLayoutData(gdUnitSpacing);
    lblUnitSpacing.setText(Messages.getString(""String_Node_Str""));
    txtUnitSpacing=new Spinner(grpGeneral,SWT.BORDER);
    GridData gdTXTUnitSpacing=new GridData(GridData.FILL_HORIZONTAL);
    txtUnitSpacing.setLayoutData(gdTXTUnitSpacing);
    txtUnitSpacing.setMinimum(0);
    txtUnitSpacing.setMaximum(100);
    txtUnitSpacing.setIncrement(1);
    double unitSpacing=((ChartWithAxes)getChart()).getUnitSpacing();
    txtUnitSpacing.setSelection((int)unitSpacing);
    txtUnitSpacing.addSelectionListener(this);
    btnUnitSpacing=new Button(grpGeneral,SWT.CHECK);
    btnUnitSpacing.setText(ChartUIExtensionUtil.getAutoMessage());
    btnUnitSpacing.setSelection(!((ChartWithAxes)getChart()).isSetUnitSpacing());
    btnUnitSpacing.addSelectionListener(this);
    txtUnitSpacing.setEnabled(!btnUnitSpacing.getSelection());
  }
}",0.9985451659833356
66110,"public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(cmbUnits)) {
    getChart().setUnits(LiteralHelper.unitsOfMeasurementSet.getNameByDisplayName(cmbUnits.getText()));
    if (cmbUnits.getSelectionIndex() != 0 && !btnSeriesThickness.getSelection()) {
      txtSeriesThickness.setValue(recalculateUnitDependentValues(txtSeriesThickness.getValue()));
    }
    lblSeriesThickness.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{LiteralHelper.unitsOfMeasurementSet.getDisplayNameByName(getChart().getUnits())}));
    sOldUnits=getChart().getUnits();
  }
 else   if (e.getSource().equals(iscColumnCount)) {
    getChart().setGridColumnCount(iscColumnCount.getSelection());
  }
 else   if (e.getSource().equals(txtUnitSpacing)) {
    ((ChartWithAxes)getChart()).setUnitSpacing(txtUnitSpacing.getSelection());
  }
 else   if (e.widget == btnSeriesThickness) {
    if (btnSeriesThickness.getSelection()) {
      getChart().unsetSeriesThickness();
    }
 else {
      updateToSeriesThickness();
    }
    txtSeriesThickness.setEnabled(!btnSeriesThickness.getSelection());
  }
 else   if (e.widget == btnColumnCount) {
    if (btnColumnCount.getSelection()) {
      getChart().unsetGridColumnCount();
    }
 else {
      getChart().setGridColumnCount(iscColumnCount.getSelection());
    }
    iscColumnCount.setEnabled(!btnColumnCount.getSelection());
  }
 else   if (e.widget == btnUnitSpacing) {
    if (btnUnitSpacing.getSelection()) {
      ((ChartWithAxes)getChart()).unsetUnitSpacing();
    }
 else {
      ((ChartWithAxes)getChart()).setUnitSpacing(txtUnitSpacing.getSelection());
    }
    txtUnitSpacing.setEnabled(!btnUnitSpacing.getSelection());
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(cmbUnits)) {
    getChart().setUnits(LiteralHelper.unitsOfMeasurementSet.getNameByDisplayName(cmbUnits.getText()));
    if (cmbUnits.getSelectionIndex() != 0 && !btnSeriesThickness.getSelection()) {
      txtSeriesThickness.setValue(recalculateUnitDependentValues(txtSeriesThickness.getValue()));
    }
    lblSeriesThickness.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{LiteralHelper.unitsOfMeasurementSet.getDisplayNameByName(getUnits())}));
    sOldUnits=getUnits();
  }
 else   if (e.getSource().equals(iscColumnCount)) {
    getChart().setGridColumnCount(iscColumnCount.getSelection());
  }
 else   if (e.getSource().equals(txtUnitSpacing)) {
    ((ChartWithAxes)getChart()).setUnitSpacing(txtUnitSpacing.getSelection());
  }
 else   if (e.widget == btnSeriesThickness) {
    if (btnSeriesThickness.getSelection()) {
      getChart().unsetSeriesThickness();
    }
 else {
      updateToSeriesThickness();
    }
    txtSeriesThickness.setEnabled(!btnSeriesThickness.getSelection());
  }
 else   if (e.widget == btnColumnCount) {
    if (btnColumnCount.getSelection()) {
      getChart().unsetGridColumnCount();
    }
 else {
      getChart().setGridColumnCount(iscColumnCount.getSelection());
    }
    iscColumnCount.setEnabled(!btnColumnCount.getSelection());
  }
 else   if (e.widget == btnUnitSpacing) {
    if (btnUnitSpacing.getSelection()) {
      ((ChartWithAxes)getChart()).unsetUnitSpacing();
    }
 else {
      ((ChartWithAxes)getChart()).setUnitSpacing(txtUnitSpacing.getSelection());
    }
    txtUnitSpacing.setEnabled(!btnUnitSpacing.getSelection());
  }
}",0.993529411764706
66111,"private void populateLists(){
  NameSet ns=LiteralHelper.unitsOfMeasurementSet;
  cmbUnits.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  String str=getChart().getUnits();
  if (str != null && str.trim().length() != 0) {
    cmbUnits.setText(ns.getDisplayNameByName(str));
  }
 else {
    cmbUnits.select(0);
  }
  this.sOldUnits=ns.getNameByDisplayName(cmbUnits.getText());
  lblSeriesThickness.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{LiteralHelper.unitsOfMeasurementSet.getDisplayNameByName(getChart().getUnits())}));
}","private void populateLists(){
  NameSet ns=LiteralHelper.unitsOfMeasurementSet;
  cmbUnits.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  String str=getUnits();
  if (str != null && str.trim().length() != 0) {
    cmbUnits.setText(ns.getDisplayNameByName(str));
  }
 else {
    cmbUnits.select(0);
  }
  this.sOldUnits=ns.getNameByDisplayName(cmbUnits.getText());
  lblSeriesThickness.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{LiteralHelper.unitsOfMeasurementSet.getDisplayNameByName(getUnits())}));
}",0.9810671256454389
66112,"protected void getComponentLegendRightArea(Composite cmpLegRight){
  Group grpOutline=new Group(cmpLegRight,SWT.NONE);
{
    GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
    grpOutline.setLayoutData(gdGRPOutline);
    grpOutline.setLayout(new FillLayout());
    grpOutline.setText(Messages.getString(""String_Node_Str""));
  }
  boolean bEnableUI=getBlockForProcessing().isVisible();
  int lineOptions=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineLegend=new LineAttributesComposite(grpOutline,SWT.NONE,lineOptions,getContext(),getBlockForProcessing().getOutline());
{
    outlineLegend.addListener(this);
    outlineLegend.setAttributesEnabled(bEnableUI);
  }
  icLegend=new InsetsComposite(cmpLegRight,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
    icLegend.setLayoutData(gdICBlock);
    icLegend.addListener(this);
    icLegend.setEnabled(bEnableUI);
    icLegend.setDefaultInsetsValue(DefaultValueProvider.defLegend().getInsets());
  }
}","protected void getComponentLegendRightArea(Composite cmpLegRight){
  Group grpOutline=new Group(cmpLegRight,SWT.NONE);
{
    GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
    grpOutline.setLayoutData(gdGRPOutline);
    grpOutline.setLayout(new FillLayout());
    grpOutline.setText(Messages.getString(""String_Node_Str""));
  }
  boolean bEnableUI=getBlockForProcessing().isVisible();
  int lineOptions=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineLegend=new LineAttributesComposite(grpOutline,SWT.NONE,lineOptions,getContext(),getBlockForProcessing().getOutline());
{
    outlineLegend.addListener(this);
    outlineLegend.setAttributesEnabled(bEnableUI);
  }
  icLegend=new InsetsComposite(cmpLegRight,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
{
    GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
    icLegend.setLayoutData(gdICBlock);
    icLegend.addListener(this);
    icLegend.setEnabled(bEnableUI);
    icLegend.setDefaultInsetsValue(DefaultValueProvider.defLegend().getInsets());
  }
}",0.9948227797690165
66113,"@Override protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(3,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpFormat.setLayoutData(gd);
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  gdFDCFont.horizontalSpan=2;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  btnEllipsisAuto=new Button(grpTxtArea,SWT.CHECK);
  btnEllipsisAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnEllipsisAuto.setSelection(!getLegend().isSetEllipsis());
  spnEllipsis.setEnabled(!btnEllipsisAuto.getSelection());
  btnEllipsisAuto.addListener(SWT.Selection,this);
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int fillStyles=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,fillStyles,getContext(),getLegend().getClientArea().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCShadow.horizontalSpan=2;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fillStyles=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_IMAGE| FillChooserComposite.ENABLE_GRADIENT;
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,fillStyles,getContext(),getChart().getLegend().getClientArea().getBackground());
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=3;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getLegend().getClientArea().getOutline());
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=3;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  icText.setDefaultInsetsValue(DefaultValueProvider.defLegend().getClientArea().getInsets());
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,lineStyles,getContext(),getLegend().getSeparator());
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","@Override protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(3,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpFormat.setLayoutData(gd);
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  gdFDCFont.horizontalSpan=2;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  btnEllipsisAuto=new Button(grpTxtArea,SWT.CHECK);
  btnEllipsisAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnEllipsisAuto.setSelection(!getLegend().isSetEllipsis());
  spnEllipsis.setEnabled(!btnEllipsisAuto.getSelection());
  btnEllipsisAuto.addListener(SWT.Selection,this);
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int fillStyles=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,fillStyles,getContext(),getLegend().getClientArea().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCShadow.horizontalSpan=2;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fillStyles=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_IMAGE| FillChooserComposite.ENABLE_GRADIENT;
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,fillStyles,getContext(),getChart().getLegend().getClientArea().getBackground());
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=3;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getLegend().getClientArea().getOutline());
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=3;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  icText.setDefaultInsetsValue(DefaultValueProvider.defLegend().getClientArea().getInsets());
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,lineStyles,getContext(),getLegend().getSeparator());
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.9989404189420492
66114,"private void createClientArea(Group grpAreaWithin){
  boolean isNot3D=!ChartUIUtil.is3DType(getChart());
  Label lblShadow=new Label(grpAreaWithin,SWT.NONE);
{
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(isNot3D);
  }
  int fillStyles=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccShadow=new FillChooserComposite(grpAreaWithin,SWT.NONE,fillStyles,getContext(),getBlockForProcessing().getClientArea().getShadowColor());
{
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(isNot3D);
  }
  Group grpOutline=new Group(grpAreaWithin,SWT.NONE);
{
    GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
    gdGRPOutline.horizontalSpan=2;
    gdGRPOutline.verticalSpan=2;
    grpOutline.setLayoutData(gdGRPOutline);
    grpOutline.setLayout(new FillLayout());
    grpOutline.setText(Messages.getString(""String_Node_Str""));
  }
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineWithin=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getBlockForProcessing().getClientArea().getOutline());
{
    outlineWithin.addListener(this);
    outlineWithin.setAttributesEnabled(ChartUIUtil.is3DWallFloorSet(getChart()));
  }
  icWithin=new InsetsComposite(grpAreaWithin,SWT.NONE,getBlockForProcessing().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdInsets.horizontalSpan=2;
    icWithin.setLayoutData(gdInsets);
    icWithin.setEnabled(isNot3D);
    icWithin.setDefaultInsetsValue(DefaultValueProvider.defPlot().getClientArea().getInsets());
  }
}","private void createClientArea(Group grpAreaWithin){
  boolean isNot3D=!ChartUIUtil.is3DType(getChart());
  Label lblShadow=new Label(grpAreaWithin,SWT.NONE);
{
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(isNot3D);
  }
  int fillStyles=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccShadow=new FillChooserComposite(grpAreaWithin,SWT.NONE,fillStyles,getContext(),getBlockForProcessing().getClientArea().getShadowColor());
{
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(isNot3D);
  }
  Group grpOutline=new Group(grpAreaWithin,SWT.NONE);
{
    GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
    gdGRPOutline.horizontalSpan=2;
    gdGRPOutline.verticalSpan=2;
    grpOutline.setLayoutData(gdGRPOutline);
    grpOutline.setLayout(new FillLayout());
    grpOutline.setText(Messages.getString(""String_Node_Str""));
  }
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineWithin=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getBlockForProcessing().getClientArea().getOutline());
{
    outlineWithin.addListener(this);
    outlineWithin.setAttributesEnabled(ChartUIUtil.is3DWallFloorSet(getChart()));
  }
  icWithin=new InsetsComposite(grpAreaWithin,SWT.NONE,getBlockForProcessing().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
{
    GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdInsets.horizontalSpan=2;
    icWithin.setLayoutData(gdInsets);
    icWithin.setEnabled(isNot3D);
    icWithin.setDefaultInsetsValue(DefaultValueProvider.defPlot().getClientArea().getInsets());
  }
}",0.9968802495800336
66115,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_PLOT_AREA_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(new GridLayout());
  Group grpAreaIncluding=new Group(cmpContent,SWT.NONE);
{
    grpAreaIncluding.setLayout(new GridLayout(2,true));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaIncluding.setLayoutData(gd);
    grpAreaIncluding.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  Composite leftComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdL=new GridData(GridData.FILL_HORIZONTAL);
  leftComp.setLayout(new GridLayout(3,false));
  leftComp.setLayoutData(gdL);
  Composite rightComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdR=new GridData(GridData.FILL_HORIZONTAL);
  rightComp.setLayout(new GridLayout(1,false));
  rightComp.setLayoutData(gdR);
  Label lblAnchor=new Label(leftComp,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCBAnchor.horizontalSpan=2;
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Label lblStretch=new Label(leftComp,SWT.NONE);
{
    GridData gd=new GridData();
    lblStretch.setLayoutData(gd);
    lblStretch.setText(Messages.getString(""String_Node_Str""));
  }
  cmbStretch=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmbStretch.setLayoutData(gd);
    cmbStretch.addSelectionListener(this);
  }
  Label lblVerticalSpacing=new Label(leftComp,SWT.NONE);
  lblVerticalSpacing.setLayoutData(new GridData());
  lblVerticalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscVSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getVerticalSpacing());
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  iscVSpacing.setLayoutData(gd);
  iscVSpacing.addListener(this);
  btnVSpaceingAuto=new Button(leftComp,SWT.CHECK);
  btnVSpaceingAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnVSpaceingAuto.setSelection(!getBlockForProcessing().isSetVerticalSpacing());
  iscVSpacing.setEnabled(!btnVSpaceingAuto.getSelection());
  btnVSpaceingAuto.addSelectionListener(this);
  Label lblHorizontalSpacing=new Label(leftComp,SWT.NONE);
  lblHorizontalSpacing.setLayoutData(new GridData());
  lblHorizontalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscHSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getHorizontalSpacing());
  gd=new GridData(GridData.FILL_HORIZONTAL);
  iscHSpacing.setLayoutData(gd);
  iscHSpacing.addListener(this);
  btnHSpaceingAuto=new Button(leftComp,SWT.CHECK);
  btnHSpaceingAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnHSpaceingAuto.setSelection(!getBlockForProcessing().isSetHorizontalSpacing());
  iscHSpacing.setEnabled(!btnHSpaceingAuto.getSelection());
  btnHSpaceingAuto.addSelectionListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtHeight=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtHeight.getTextControl(),null);
{
    txtHeight.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtHeight.addModifyListener(this);
  }
  btnHeight=new Button(leftComp,SWT.CHECK);
  btnHeight.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnHeight.setLayoutData(gd);
  btnHeight.addSelectionListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtWidth=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtWidth.getTextControl(),null);
{
    txtWidth.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtWidth.addModifyListener(this);
  }
  btnWidth=new Button(leftComp,SWT.CHECK);
  btnWidth.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnWidth.setLayoutData(gd);
  btnWidth.addSelectionListener(this);
  updateHeightWidthHint();
  Group grpOutline=new Group(rightComp,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.widthHint=150;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineIncluding=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getBlockForProcessing().getOutline());
  outlineIncluding.addListener(this);
  icIncluding=new InsetsComposite(rightComp,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  icIncluding.setLayoutData(gdInsets);
  icIncluding.setDefaultInsetsValue(DefaultValueProvider.defPlot().getInsets());
  Group grpAreaWithin=new Group(cmpContent,SWT.NONE);
{
    grpAreaWithin.setLayout(new GridLayout(4,false));
    gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaWithin.setLayoutData(gd);
    grpAreaWithin.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  createClientArea(grpAreaWithin);
  populateLists();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_PLOT_AREA_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(new GridLayout());
  Group grpAreaIncluding=new Group(cmpContent,SWT.NONE);
{
    grpAreaIncluding.setLayout(new GridLayout(2,true));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaIncluding.setLayoutData(gd);
    grpAreaIncluding.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  Composite leftComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdL=new GridData(GridData.FILL_HORIZONTAL);
  leftComp.setLayout(new GridLayout(3,false));
  leftComp.setLayoutData(gdL);
  Composite rightComp=new Composite(grpAreaIncluding,SWT.NONE);
  GridData gdR=new GridData(GridData.FILL_HORIZONTAL);
  rightComp.setLayout(new GridLayout(1,false));
  rightComp.setLayoutData(gdR);
  Label lblAnchor=new Label(leftComp,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCBAnchor.horizontalSpan=2;
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Label lblStretch=new Label(leftComp,SWT.NONE);
{
    GridData gd=new GridData();
    lblStretch.setLayoutData(gd);
    lblStretch.setText(Messages.getString(""String_Node_Str""));
  }
  cmbStretch=new Combo(leftComp,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmbStretch.setLayoutData(gd);
    cmbStretch.addSelectionListener(this);
  }
  Label lblVerticalSpacing=new Label(leftComp,SWT.NONE);
  lblVerticalSpacing.setLayoutData(new GridData());
  lblVerticalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscVSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getVerticalSpacing());
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  iscVSpacing.setLayoutData(gd);
  iscVSpacing.addListener(this);
  btnVSpaceingAuto=new Button(leftComp,SWT.CHECK);
  btnVSpaceingAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnVSpaceingAuto.setSelection(!getBlockForProcessing().isSetVerticalSpacing());
  iscVSpacing.setEnabled(!btnVSpaceingAuto.getSelection());
  btnVSpaceingAuto.addSelectionListener(this);
  Label lblHorizontalSpacing=new Label(leftComp,SWT.NONE);
  lblHorizontalSpacing.setLayoutData(new GridData());
  lblHorizontalSpacing.setText(Messages.getString(""String_Node_Str""));
  iscHSpacing=new IntegerSpinControl(leftComp,SWT.NONE,getBlockForProcessing().getHorizontalSpacing());
  gd=new GridData(GridData.FILL_HORIZONTAL);
  iscHSpacing.setLayoutData(gd);
  iscHSpacing.addListener(this);
  btnHSpaceingAuto=new Button(leftComp,SWT.CHECK);
  btnHSpaceingAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnHSpaceingAuto.setSelection(!getBlockForProcessing().isSetHorizontalSpacing());
  iscHSpacing.setEnabled(!btnHSpaceingAuto.getSelection());
  btnHSpaceingAuto.addSelectionListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtHeight=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtHeight.getTextControl(),null);
{
    txtHeight.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtHeight.addModifyListener(this);
  }
  btnHeight=new Button(leftComp,SWT.CHECK);
  btnHeight.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnHeight.setLayoutData(gd);
  btnHeight.addSelectionListener(this);
  new Label(leftComp,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  txtWidth=new LocalizedNumberEditorComposite(leftComp,SWT.BORDER);
  new TextNumberEditorAssistField(txtWidth.getTextControl(),null);
{
    txtWidth.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    txtWidth.addModifyListener(this);
  }
  btnWidth=new Button(leftComp,SWT.CHECK);
  btnWidth.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnWidth.setLayoutData(gd);
  btnWidth.addSelectionListener(this);
  updateHeightWidthHint();
  Group grpOutline=new Group(rightComp,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.widthHint=150;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineIncluding=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getBlockForProcessing().getOutline());
  outlineIncluding.addListener(this);
  icIncluding=new InsetsComposite(rightComp,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  icIncluding.setLayoutData(gdInsets);
  icIncluding.setDefaultInsetsValue(DefaultValueProvider.defPlot().getInsets());
  Group grpAreaWithin=new Group(cmpContent,SWT.NONE);
{
    grpAreaWithin.setLayout(new GridLayout(4,false));
    gd=new GridData(GridData.FILL_HORIZONTAL);
    grpAreaWithin.setLayoutData(gd);
    grpAreaWithin.setText(getChart() instanceof ChartWithAxes ? Messages.getString(""String_Node_Str"") : Messages.getString(""String_Node_Str""));
  }
  createClientArea(grpAreaWithin);
  populateLists();
  return cmpContent;
}",0.9988627416673956
66116,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TITLE_BLOCK);
  GridLayout glContent=new GridLayout();
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  grpGeneral=new Group(cmpContent,SWT.NONE);
{
    GridLayout glGeneral=new GridLayout();
    glGeneral.verticalSpacing=10;
    glGeneral.marginHeight=7;
    glGeneral.marginWidth=7;
    GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    grpGeneral.setLayoutData(gdCMPGeneral);
    grpGeneral.setLayout(glGeneral);
    grpGeneral.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpGeneralTop=new Composite(grpGeneral,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.horizontalSpacing=5;
    layout.verticalSpacing=5;
    cmpGeneralTop.setLayout(layout);
    cmpGeneralTop.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label lblAnchor=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Label lblStretch=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLStretch=new GridData();
  lblStretch.setLayoutData(gdLBLStretch);
  lblStretch.setText(Messages.getString(""String_Node_Str""));
  cmbStretch=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBStretch=new GridData(GridData.FILL_HORIZONTAL);
  cmbStretch.setLayoutData(gdCBStretch);
  cmbStretch.addSelectionListener(this);
  Label lblBackground=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLBackground=new GridData();
  lblBackground.setLayoutData(gdLBLBackground);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  int fillStyels=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_GRADIENT | FillChooserComposite.ENABLE_IMAGE| FillChooserComposite.ENABLE_TRANSPARENT| FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccBackground=new FillChooserComposite(cmpGeneralTop,SWT.NONE,fillStyels,getContext(),getBlockForProcessing().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_HORIZONTAL);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  grpOutline=new Group(grpGeneral,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getBlockForProcessing().getOutline());
  liacOutline.addListener(this);
  ic=new InsetsComposite(grpGeneral,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  ic.setLayoutData(gdInsets);
  ic.setDefaultInsetsValue(DefaultValueProvider.defTitleBlock().getInsets());
  populateLists();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TITLE_BLOCK);
  GridLayout glContent=new GridLayout();
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  grpGeneral=new Group(cmpContent,SWT.NONE);
{
    GridLayout glGeneral=new GridLayout();
    glGeneral.verticalSpacing=10;
    glGeneral.marginHeight=7;
    glGeneral.marginWidth=7;
    GridData gdCMPGeneral=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    grpGeneral.setLayoutData(gdCMPGeneral);
    grpGeneral.setLayout(glGeneral);
    grpGeneral.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpGeneralTop=new Composite(grpGeneral,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.numColumns=2;
    layout.horizontalSpacing=5;
    layout.verticalSpacing=5;
    cmpGeneralTop.setLayout(layout);
    cmpGeneralTop.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label lblAnchor=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Label lblStretch=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLStretch=new GridData();
  lblStretch.setLayoutData(gdLBLStretch);
  lblStretch.setText(Messages.getString(""String_Node_Str""));
  cmbStretch=new Combo(cmpGeneralTop,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBStretch=new GridData(GridData.FILL_HORIZONTAL);
  cmbStretch.setLayoutData(gdCBStretch);
  cmbStretch.addSelectionListener(this);
  Label lblBackground=new Label(cmpGeneralTop,SWT.NONE);
  GridData gdLBLBackground=new GridData();
  lblBackground.setLayoutData(gdLBLBackground);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  int fillStyels=FillChooserComposite.ENABLE_AUTO | FillChooserComposite.ENABLE_GRADIENT | FillChooserComposite.ENABLE_IMAGE| FillChooserComposite.ENABLE_TRANSPARENT| FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccBackground=new FillChooserComposite(cmpGeneralTop,SWT.NONE,fillStyels,getContext(),getBlockForProcessing().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_HORIZONTAL);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  grpOutline=new Group(grpGeneral,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getBlockForProcessing().getOutline());
  liacOutline.addListener(this);
  ic=new InsetsComposite(grpGeneral,SWT.NONE,getBlockForProcessing().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  ic.setLayoutData(gdInsets);
  ic.setDefaultInsetsValue(DefaultValueProvider.defTitleBlock().getInsets());
  populateLists();
  return cmpContent;
}",0.9982164906022774
66117,"protected void createInsets(Composite cmpRight,boolean bEnableUI){
  icInsets=new InsetsComposite(cmpRight,SWT.NONE,getSeriesForProcessing().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.setLayoutData(gdICInsets);
    icInsets.addListener(this);
    icInsets.setDefaultInsetsValue(DefaultValueProvider.defSeries().getLabel().getInsets());
    icInsets.setEnabled(bEnableUI);
  }
}","protected void createInsets(Composite cmpRight,boolean bEnableUI){
  icInsets=new InsetsComposite(cmpRight,SWT.NONE,getSeriesForProcessing().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
{
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.setLayoutData(gdICInsets);
    icInsets.addListener(this);
    icInsets.setDefaultInsetsValue(DefaultValueProvider.defSeries().getLabel().getInsets());
    icInsets.setEnabled(bEnableUI);
  }
}",0.9881494986326343
66118,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendlineText());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,lineStyles,getContext(),getTrendline().getLineAttributes());
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabelInner,SWT.NONE);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnLabelVisible.setLayoutData(gdCBVisible);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  btnLabelVisible.setSelectionState(getTrendline().getLabel().isSetVisible() ? (getTrendline().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  int fillStyles=FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER | FillChooserComposite.ENABLE_AUTO| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getTrendline().getLabel().getOutline());
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  icLabel.setDefaultInsetsValue(DefaultValueProvider.defSeries().getLabel().getInsets());
  populateLists();
  setState(ChartUIExtensionUtil.canEnableUI(btnLabelVisible));
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendlineText());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  int lineStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH | LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,lineStyles,getContext(),getTrendline().getLineAttributes());
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabelInner,SWT.NONE);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnLabelVisible.setLayoutData(gdCBVisible);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  btnLabelVisible.setSelectionState(getTrendline().getLabel().isSetVisible() ? (getTrendline().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  int fillStyles=FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER | FillChooserComposite.ENABLE_AUTO| FillChooserComposite.DISABLE_PATTERN_FILL;
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,fillStyles,getContext(),getTrendline().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  lineStyles=LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,lineStyles,getContext(),getTrendline().getLabel().getOutline());
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider(),getContext());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  icLabel.setDefaultInsetsValue(DefaultValueProvider.defSeries().getLabel().getInsets());
  populateLists();
  setState(ChartUIExtensionUtil.canEnableUI(btnLabelVisible));
  return cmpContent;
}",0.9988991447201288
66119,"protected void getComponentLegendLeftArea(Composite cmpLegLeft){
  boolean bEnableUI=getBlockForProcessing().isVisible();
  Label lblOrientation=new Label(cmpLegLeft,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  lblOrientation.setEnabled(bEnableUI);
  cmbOrientation=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=2;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  cmbOrientation.setEnabled(bEnableUI);
  Label lblPosition=new Label(cmpLegLeft,SWT.NONE);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  lblPosition.setEnabled(bEnableUI);
  cmbPosition=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBPosition.horizontalSpan=2;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  cmbPosition.setEnabled(bEnableUI);
  Label lblAnchor=new Label(cmpLegLeft,SWT.NONE);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  lblAnchor.setEnabled(bEnableUI);
  cmbAnchor=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCBAnchor.horizontalSpan=2;
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setEnabled(bEnableUI);
  Label lblStretch=new Label(cmpLegLeft,SWT.NONE);
  lblStretch.setText(Messages.getString(""String_Node_Str""));
  lblStretch.setEnabled(bEnableUI);
  cmbStretch=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBStretch=new GridData(GridData.FILL_HORIZONTAL);
  gdCBStretch.horizontalSpan=2;
  cmbStretch.setLayoutData(gdCBStretch);
  cmbStretch.addSelectionListener(this);
  cmbStretch.setEnabled(bEnableUI);
  Label lblBackground=new Label(cmpLegLeft,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  lblBackground.setEnabled(bEnableUI);
  int fillOptions=FillChooserComposite.ENABLE_GRADIENT | FillChooserComposite.ENABLE_IMAGE | FillChooserComposite.ENABLE_AUTO| FillChooserComposite.ENABLE_TRANSPARENT| FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccBackground=new FillChooserComposite(cmpLegLeft,SWT.NONE,fillOptions,getContext(),getBlockForProcessing().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCBackground.horizontalSpan=2;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  fccBackground.setTextIndent(0);
  Label lblDirection=new Label(cmpLegLeft,SWT.NONE);
  lblDirection.setText(Messages.getString(""String_Node_Str""));
  lblDirection.setEnabled(bEnableUI);
  cmbDirection=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBDirection=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBDirection.horizontalSpan=2;
  cmbDirection.setLayoutData(gdCMBDirection);
  cmbDirection.addSelectionListener(this);
  cmbDirection.setEnabled(bEnableUI);
  Label lblWrapping=new Label(cmpLegLeft,SWT.NONE);
  lblWrapping.setText(Messages.getString(""String_Node_Str""));
  lblWrapping.setEnabled(bEnableUI);
  txtWrapping=new LocalizedNumberEditorComposite(cmpLegLeft,SWT.BORDER | SWT.SINGLE);
  new TextNumberEditorAssistField(txtWrapping.getTextControl(),null);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtWrapping.setLayoutData(gd);
    txtWrapping.setValue(getBlockForProcessing().getWrappingSize());
    txtWrapping.addModifyListener(this);
    txtWrapping.setEnabled(bEnableUI);
  }
  btnWrapping=new Button(cmpLegLeft,SWT.CHECK);
  btnWrapping.setText(ChartUIExtensionUtil.getAutoMessage());
  btnWrapping.setSelection(!getBlockForProcessing().isSetWrappingSize() && getBlockForProcessing().isSetWrappingSize());
  btnWrapping.addSelectionListener(this);
  spnMaxPercent=createSpinner(cmpLegLeft,Messages.getString(""String_Node_Str""),getBlockForProcessing().getMaxPercent(),bEnableUI);
  btnMaxPercent=new Button(cmpLegLeft,SWT.CHECK);
  btnMaxPercent.setText(ChartUIExtensionUtil.getAutoMessage());
  btnMaxPercent.setSelection(!getBlockForProcessing().isSetMaxPercent());
  btnMaxPercent.addSelectionListener(this);
  spnTitlePercent=createSpinner(cmpLegLeft,Messages.getString(""String_Node_Str""),getBlockForProcessing().getTitlePercent(),bEnableUI);
  btnTitlePercent=new Button(cmpLegLeft,SWT.CHECK);
  btnTitlePercent.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitlePercent.setSelection(!getBlockForProcessing().isSetTitlePercent());
  btnTitlePercent.addSelectionListener(this);
  updateUIState();
}","protected void getComponentLegendLeftArea(Composite cmpLegLeft){
  Label lblOrientation=new Label(cmpLegLeft,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBOrientation.horizontalSpan=2;
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  Label lblPosition=new Label(cmpLegLeft,SWT.NONE);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBPosition.horizontalSpan=2;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  Label lblAnchor=new Label(cmpLegLeft,SWT.NONE);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  gdCBAnchor.horizontalSpan=2;
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  Label lblStretch=new Label(cmpLegLeft,SWT.NONE);
  lblStretch.setText(Messages.getString(""String_Node_Str""));
  cmbStretch=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBStretch=new GridData(GridData.FILL_HORIZONTAL);
  gdCBStretch.horizontalSpan=2;
  cmbStretch.setLayoutData(gdCBStretch);
  cmbStretch.addSelectionListener(this);
  Label lblBackground=new Label(cmpLegLeft,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  int fillOptions=FillChooserComposite.ENABLE_GRADIENT | FillChooserComposite.ENABLE_IMAGE | FillChooserComposite.ENABLE_AUTO| FillChooserComposite.ENABLE_TRANSPARENT| FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccBackground=new FillChooserComposite(cmpLegLeft,SWT.NONE,fillOptions,getContext(),getBlockForProcessing().getBackground());
  GridData gdFCCBackground=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCBackground.horizontalSpan=2;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setTextIndent(0);
  Label lblDirection=new Label(cmpLegLeft,SWT.NONE);
  lblDirection.setText(Messages.getString(""String_Node_Str""));
  cmbDirection=new Combo(cmpLegLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBDirection=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBDirection.horizontalSpan=2;
  cmbDirection.setLayoutData(gdCMBDirection);
  cmbDirection.addSelectionListener(this);
  Label lblWrapping=new Label(cmpLegLeft,SWT.NONE);
  lblWrapping.setText(Messages.getString(""String_Node_Str""));
  txtWrapping=new LocalizedNumberEditorComposite(cmpLegLeft,SWT.BORDER | SWT.SINGLE);
  new TextNumberEditorAssistField(txtWrapping.getTextControl(),null);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtWrapping.setLayoutData(gd);
    txtWrapping.setValue(getBlockForProcessing().getWrappingSize());
    txtWrapping.addModifyListener(this);
    txtWrapping.setEnabled(getBlockForProcessing().isSetWrappingSize());
  }
  btnWrapping=new Button(cmpLegLeft,SWT.CHECK);
  btnWrapping.setText(ChartUIExtensionUtil.getAutoMessage());
  btnWrapping.setSelection(!getBlockForProcessing().isSetWrappingSize());
  btnWrapping.addSelectionListener(this);
  spnMaxPercent=createSpinner(cmpLegLeft,Messages.getString(""String_Node_Str""),getBlockForProcessing().getMaxPercent(),getBlockForProcessing().isSetMaxPercent());
  btnMaxPercent=new Button(cmpLegLeft,SWT.CHECK);
  btnMaxPercent.setText(ChartUIExtensionUtil.getAutoMessage());
  btnMaxPercent.setSelection(!getBlockForProcessing().isSetMaxPercent());
  btnMaxPercent.addSelectionListener(this);
  spnTitlePercent=createSpinner(cmpLegLeft,Messages.getString(""String_Node_Str""),getBlockForProcessing().getTitlePercent(),getBlockForProcessing().isSetTitlePercent());
  btnTitlePercent=new Button(cmpLegLeft,SWT.CHECK);
  btnTitlePercent.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitlePercent.setSelection(!getBlockForProcessing().isSetTitlePercent());
  btnTitlePercent.addSelectionListener(this);
}",0.8193343898573693
66120,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  this.validateLimitSetting(view,rs);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9963377023901312
66121,"protected Bounds getInnerRectangle(ArcRenderEvent are){
  Bounds rctInner;
  double innerRadius=are.getInnerRadius();
  if (innerRadius > 0) {
    if (innerRadius < 1d) {
      rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() * (1 - are.getInnerRadius()) / 2),are.getTopLeft().getY() + (are.getHeight() * (1 - are.getInnerRadius()) / 2),are.getInnerRadius() * are.getWidth(),are.getInnerRadius() * are.getHeight());
    }
 else {
      double radio=are.getHeight() / are.getWidth();
      rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius() * radio) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius() * radio);
    }
  }
 else {
    rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius());
  }
  return rctInner;
}","protected Bounds getInnerRectangle(ArcRenderEvent are){
  Bounds rctInner;
  if (are.getInnerRadius() > 0) {
    double radio=are.getHeight() / are.getWidth();
    rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius() * radio) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius() * radio);
  }
 else {
    rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius());
  }
  return rctInner;
}",0.5930710510863183
66122,"protected Bounds getInnerRectangle(ArcRenderEvent are,double dTranslateX,double dTranslateY,double dScale,Bounds bo){
  Bounds rctInner;
  if (are.getInnerRadius() > 0) {
    if (are.getInnerRadius() < 1d) {
      rctInner=goFactory.createBounds(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getInnerRadius() * bo.getWidth() / 2d)) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getInnerRadius() * bo.getHeight() / 2)) * dScale),(are.getInnerRadius() * bo.getWidth() * dScale),(are.getInnerRadius() * bo.getHeight() * dScale));
    }
 else {
      double radio=bo.getHeight() / bo.getWidth();
      rctInner=goFactory.createBounds(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getInnerRadius())) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getInnerRadius() * radio)) * dScale),(2 * are.getInnerRadius() * dScale),(2 * are.getInnerRadius() * dScale) * radio);
    }
  }
 else {
    rctInner=goFactory.createBounds(((bo.getLeft() + dTranslateX + bo.getWidth() / 2d) * dScale),((bo.getTop() + dTranslateY + bo.getHeight() / 2d) * dScale),0,0);
  }
  return rctInner;
}","protected Bounds getInnerRectangle(ArcRenderEvent are,double dTranslateX,double dTranslateY,double dScale,Bounds bo){
  Bounds rctInner;
  if (are.getInnerRadius() > 0) {
    double radio=bo.getHeight() / bo.getWidth();
    rctInner=goFactory.createBounds(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getInnerRadius())) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getInnerRadius() * radio)) * dScale),(2 * are.getInnerRadius() * dScale),(2 * are.getInnerRadius() * dScale) * radio);
  }
 else {
    rctInner=goFactory.createBounds(((bo.getLeft() + dTranslateX + bo.getWidth() / 2d) * dScale),((bo.getTop() + dTranslateY + bo.getHeight() / 2d) * dScale),0,0);
  }
  return rctInner;
}",0.3409090909090909
66123,"/** 
 * @param loC center coordinates of pie slice.
 * @param loOffset pie slice officeset for multiple dimension.
 * @param sz the width and height of pie slice.
 * @param fi the fill properties.
 * @param iPieceType
 * @throws ChartException
 */
private final void render(Location loC,Location loOffset,Size sz,Fill fi,int iPieceType) throws ChartException {
  boolean hasInnerRadius=ps.isSetInnerRadius() && ps.getInnerRadius() > 0d && Math.min(sz.getHeight(),sz.getWidth()) > ps.getInnerRadius();
  loC.translate(loOffset.getX() / 2d,loOffset.getY() / 2d);
  if (isExploded && dExplosion != 0) {
    double dMidAngleInRadians=Math.toRadians(getStartAngle() + getSliceLength() / 2d);
    double dSineThetaMid=(Math.sin(dMidAngleInRadians));
    double dCosThetaMid=(Math.cos(dMidAngleInRadians));
    double xDelta=(dExplosion * dCosThetaMid);
    double yDelta=(dExplosion * dSineThetaMid);
    if (ratio < 1) {
      yDelta=yDelta * ratio;
    }
 else {
      xDelta=xDelta / ratio;
    }
    loC.translate(xDelta,-yDelta);
  }
  Location loCTop=goFactory.createLocation(loC.getX() - loOffset.getX(),loC.getY() - loOffset.getY());
  double dAngleInRadians=Math.toRadians(getStartAngle());
  double dSineThetaStart=Math.sin(dAngleInRadians);
  double dCosThetaStart=Math.cos(dAngleInRadians);
  dAngleInRadians=Math.toRadians(getStartAngle() + getSliceLength());
  double dSineThetaEnd=Math.sin(dAngleInRadians);
  double dCosThetaEnd=Math.cos(dAngleInRadians);
  double xE=(sz.getWidth() * dCosThetaEnd);
  double yE=(sz.getHeight() * dSineThetaEnd);
  double xS=(sz.getWidth() * dCosThetaStart);
  double yS=(sz.getHeight() * dSineThetaStart);
  double xInnerE=0d;
  double yInnerE=0d;
  double xInnerS=0d;
  double yInnerS=0d;
  if (hasInnerRadius) {
    double innerRadius=ps.getInnerRadius();
    if (innerRadius < 1d) {
      xInnerE=innerRadius * sz.getWidth() * dCosThetaEnd;
      yInnerE=innerRadius * sz.getHeight() * dSineThetaEnd;
      xInnerS=innerRadius * sz.getWidth() * dCosThetaStart;
      yInnerS=innerRadius * sz.getHeight() * dSineThetaStart;
    }
 else {
      double radio=sz.getHeight() / sz.getWidth();
      xInnerE=innerRadius * dCosThetaEnd;
      yInnerE=innerRadius * radio * dSineThetaEnd;
      xInnerS=innerRadius * dCosThetaStart;
      yInnerS=innerRadius * radio * dSineThetaStart;
    }
  }
  ArcRenderEvent are=null;
  if (iPieceType == LOWER) {
    are=new ArcRenderEvent(WrappedStructureSource.createSeriesDataPoint(ps,dataPointHints));
  }
 else {
    are=((EventObjectCache)idr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ps,getDataPointHints()),ArcRenderEvent.class);
  }
  are.setBackground(fi);
  liaEdges.setColor(getSliceOutline(fi));
  are.setOutline(liaEdges);
  are.setTopLeft(goFactory.createLocation(loCTop.getX() - sz.getWidth(),loCTop.getY() - sz.getHeight() + (iPieceType == LOWER ? dThickness : 0)));
  are.setWidth(sz.getWidth() * 2);
  are.setHeight(sz.getHeight() * 2);
  if (hasInnerRadius) {
    are.setOuterRadius(sz.getWidth());
    are.setInnerRadius(ps.getInnerRadius());
  }
  are.setStartAngle(startAngle);
  are.setAngleExtent(sliceLength);
  are.setStyle(ArcRenderEvent.SECTOR);
  idr.fillArc(are);
  if (iPieceType == LOWER) {
    if (!hasInnerRadius) {
      double[] daXPoints={loC.getX(),loCTop.getX(),loCTop.getX() + xE,loC.getX() + xE};
      double[] daYPoints={loC.getY(),loCTop.getY(),loCTop.getY() - yE,loC.getY() - yE};
      deferFlatPlane(deferredPlanes,getStartAngle() + getSliceLength(),false,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX(),loC.getX() + xS,loCTop.getX() + xS,loCTop.getX()};
      daYPoints=new double[]{loC.getY(),loC.getY() - yS,loCTop.getY() - yS,loCTop.getY()};
      deferFlatPlane(deferredPlanes,getStartAngle(),true,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX() + xS,loCTop.getX() + xS,loCTop.getX() + xE,loC.getX() + xE};
      daYPoints=new double[]{loC.getY() - yS,loCTop.getY() - yS,loCTop.getY() - yE,loC.getY() - yE};
    }
 else {
      double[] daXPoints={loC.getX() + xInnerE,loCTop.getX() + xInnerE,loCTop.getX() + xE,loC.getX() + xE};
      double[] daYPoints={loC.getY() - yInnerE,loCTop.getY() - yInnerE,loCTop.getY() - yE,loC.getY() - yE};
      deferFlatPlane(deferredPlanes,getStartAngle() + getSliceLength(),false,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX() + xInnerS,loC.getX() + xS,loCTop.getX() + xS,loCTop.getX() + xInnerS};
      daYPoints=new double[]{loC.getY() - yInnerS,loC.getY() - yS,loCTop.getY() - yS,loCTop.getY() - yInnerS};
      deferFlatPlane(deferredPlanes,getStartAngle(),true,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX() + xS,loCTop.getX() + xS,loCTop.getX() + xE,loC.getX() + xE};
      daYPoints=new double[]{loC.getY() - yS,loCTop.getY() - yS,loCTop.getY() - yE,loC.getY() - yE};
    }
    if (hasInnerRadius) {
      if (ps.getInnerRadius() < 1d) {
        Size innerSize=SizeImpl.create(ps.getInnerRadius() * sz.getWidth(),ps.getInnerRadius() * sz.getHeight());
        renderCurvedSurface(loC,loCTop,innerSize,xInnerE,yInnerE,xInnerS,yInnerS,fi,true);
      }
 else {
        double radio=sz.getHeight() / sz.getWidth();
        Size innerSize=SizeImpl.create(ps.getInnerRadius(),ps.getInnerRadius() * radio);
        renderCurvedSurface(loC,loCTop,innerSize,xInnerE,yInnerE,xInnerS,yInnerS,fi,true);
      }
    }
    renderCurvedSurface(loC,loCTop,sz,xE,yE,xS,yS,fi,false);
  }
 else   if (iPieceType == UPPER) {
    if (ps.getSliceOutline() != null) {
      idr.drawArc(are);
    }
    if (pie.isInteractivityEnabled() && !bMinSlice) {
      final EList<Trigger> elTriggers=ps.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ps,dataPointHints);
        final InteractionEvent iev=((EventObjectCache)idr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(ps.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          pie.processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        iev.setHotSpot(are);
        idr.enableInteraction(iev);
      }
    }
  }
}","/** 
 * @param loC center coordinates of pie slice.
 * @param loOffset pie slice officeset for multiple dimension.
 * @param sz the width and height of pie slice.
 * @param fi the fill properties.
 * @param iPieceType
 * @throws ChartException
 */
private final void render(Location loC,Location loOffset,Size sz,Fill fi,int iPieceType) throws ChartException {
  boolean hasInnerRadius=ps.isSetInnerRadius() && ps.getInnerRadius() > 0d;
  if (!(ps.isSetInnerRadiusPercent() && ps.isInnerRadiusPercent())) {
    hasInnerRadius=hasInnerRadius && Math.min(sz.getHeight(),sz.getWidth()) > ps.getInnerRadius();
  }
  loC.translate(loOffset.getX() / 2d,loOffset.getY() / 2d);
  if (isExploded && dExplosion != 0) {
    double dMidAngleInRadians=Math.toRadians(getStartAngle() + getSliceLength() / 2d);
    double dSineThetaMid=(Math.sin(dMidAngleInRadians));
    double dCosThetaMid=(Math.cos(dMidAngleInRadians));
    double xDelta=(dExplosion * dCosThetaMid);
    double yDelta=(dExplosion * dSineThetaMid);
    if (ratio < 1) {
      yDelta=yDelta * ratio;
    }
 else {
      xDelta=xDelta / ratio;
    }
    loC.translate(xDelta,-yDelta);
  }
  Location loCTop=goFactory.createLocation(loC.getX() - loOffset.getX(),loC.getY() - loOffset.getY());
  double dAngleInRadians=Math.toRadians(getStartAngle());
  double dSineThetaStart=Math.sin(dAngleInRadians);
  double dCosThetaStart=Math.cos(dAngleInRadians);
  dAngleInRadians=Math.toRadians(getStartAngle() + getSliceLength());
  double dSineThetaEnd=Math.sin(dAngleInRadians);
  double dCosThetaEnd=Math.cos(dAngleInRadians);
  double xE=(sz.getWidth() * dCosThetaEnd);
  double yE=(sz.getHeight() * dSineThetaEnd);
  double xS=(sz.getWidth() * dCosThetaStart);
  double yS=(sz.getHeight() * dSineThetaStart);
  double xInnerE=0d;
  double yInnerE=0d;
  double xInnerS=0d;
  double yInnerS=0d;
  if (hasInnerRadius) {
    double innerRadius=ps.getInnerRadius();
    if (ps.isInnerRadiusPercent()) {
      innerRadius*=0.01d;
      xInnerE=innerRadius * sz.getWidth() * dCosThetaEnd;
      yInnerE=innerRadius * sz.getHeight() * dSineThetaEnd;
      xInnerS=innerRadius * sz.getWidth() * dCosThetaStart;
      yInnerS=innerRadius * sz.getHeight() * dSineThetaStart;
    }
 else {
      double radio=sz.getHeight() / sz.getWidth();
      xInnerE=innerRadius * dCosThetaEnd;
      yInnerE=innerRadius * radio * dSineThetaEnd;
      xInnerS=innerRadius * dCosThetaStart;
      yInnerS=innerRadius * radio * dSineThetaStart;
    }
  }
  ArcRenderEvent are=null;
  if (iPieceType == LOWER) {
    are=new ArcRenderEvent(WrappedStructureSource.createSeriesDataPoint(ps,dataPointHints));
  }
 else {
    are=((EventObjectCache)idr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ps,getDataPointHints()),ArcRenderEvent.class);
  }
  are.setBackground(fi);
  liaEdges.setColor(getSliceOutline(fi));
  are.setOutline(liaEdges);
  are.setTopLeft(goFactory.createLocation(loCTop.getX() - sz.getWidth(),loCTop.getY() - sz.getHeight() + (iPieceType == LOWER ? dThickness : 0)));
  are.setWidth(sz.getWidth() * 2);
  are.setHeight(sz.getHeight() * 2);
  if (hasInnerRadius) {
    are.setOuterRadius(sz.getWidth());
    if (ps.isInnerRadiusPercent()) {
      are.setInnerRadius(sz.getWidth() * ps.getInnerRadius() * 0.01d);
    }
 else {
      are.setInnerRadius(ps.getInnerRadius());
    }
  }
  are.setStartAngle(startAngle);
  are.setAngleExtent(sliceLength);
  are.setStyle(ArcRenderEvent.SECTOR);
  idr.fillArc(are);
  if (iPieceType == LOWER) {
    if (!hasInnerRadius) {
      double[] daXPoints={loC.getX(),loCTop.getX(),loCTop.getX() + xE,loC.getX() + xE};
      double[] daYPoints={loC.getY(),loCTop.getY(),loCTop.getY() - yE,loC.getY() - yE};
      deferFlatPlane(deferredPlanes,getStartAngle() + getSliceLength(),false,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX(),loC.getX() + xS,loCTop.getX() + xS,loCTop.getX()};
      daYPoints=new double[]{loC.getY(),loC.getY() - yS,loCTop.getY() - yS,loCTop.getY()};
      deferFlatPlane(deferredPlanes,getStartAngle(),true,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX() + xS,loCTop.getX() + xS,loCTop.getX() + xE,loC.getX() + xE};
      daYPoints=new double[]{loC.getY() - yS,loCTop.getY() - yS,loCTop.getY() - yE,loC.getY() - yE};
    }
 else {
      double[] daXPoints={loC.getX() + xInnerE,loCTop.getX() + xInnerE,loCTop.getX() + xE,loC.getX() + xE};
      double[] daYPoints={loC.getY() - yInnerE,loCTop.getY() - yInnerE,loCTop.getY() - yE,loC.getY() - yE};
      deferFlatPlane(deferredPlanes,getStartAngle() + getSliceLength(),false,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX() + xInnerS,loC.getX() + xS,loCTop.getX() + xS,loCTop.getX() + xInnerS};
      daYPoints=new double[]{loC.getY() - yInnerS,loC.getY() - yS,loCTop.getY() - yS,loCTop.getY() - yInnerS};
      deferFlatPlane(deferredPlanes,getStartAngle(),true,daXPoints,daYPoints,fi,dataPointHints);
      daXPoints=new double[]{loC.getX() + xS,loCTop.getX() + xS,loCTop.getX() + xE,loC.getX() + xE};
      daYPoints=new double[]{loC.getY() - yS,loCTop.getY() - yS,loCTop.getY() - yE,loC.getY() - yE};
    }
    if (hasInnerRadius) {
      if (ps.isInnerRadiusPercent()) {
        double innerRadius=ps.getInnerRadius() * 0.01d;
        Size innerSize=SizeImpl.create(innerRadius * sz.getWidth(),innerRadius * sz.getHeight());
        renderCurvedSurface(loC,loCTop,innerSize,xInnerE,yInnerE,xInnerS,yInnerS,fi,true);
      }
 else {
        double radio=sz.getHeight() / sz.getWidth();
        Size innerSize=SizeImpl.create(ps.getInnerRadius(),ps.getInnerRadius() * radio);
        renderCurvedSurface(loC,loCTop,innerSize,xInnerE,yInnerE,xInnerS,yInnerS,fi,true);
      }
    }
    renderCurvedSurface(loC,loCTop,sz,xE,yE,xS,yS,fi,false);
  }
 else   if (iPieceType == UPPER) {
    if (ps.getSliceOutline() != null) {
      idr.drawArc(are);
    }
    if (pie.isInteractivityEnabled() && !bMinSlice) {
      final EList<Trigger> elTriggers=ps.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ps,dataPointHints);
        final InteractionEvent iev=((EventObjectCache)idr).getEventObject(iSource,InteractionEvent.class);
        iev.setCursor(ps.getCursor());
        Trigger tg;
        for (int t=0; t < elTriggers.size(); t++) {
          tg=goFactory.copyOf(elTriggers.get(t));
          pie.processTrigger(tg,iSource);
          iev.addTrigger(tg);
        }
        iev.setHotSpot(are);
        idr.enableInteraction(iev);
      }
    }
  }
}",0.9676116504854368
66124,"public Tool createTool(){
  return new ReportCreationTool(factory,null){
    protected void performCreation(    int button){
      DNDService.getInstance().performDrop(""String_Node_Str"",getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getLocation()));
    }
    public void performCreation(    EditPart editPart){
      DNDService.getInstance().performDrop(""String_Node_Str"",editPart,DND.DROP_DEFAULT,new DNDLocation(getLocation()));
    }
    protected boolean handleMove(){
      updateTargetUnderMouse();
      boolean canMove=DNDService.getInstance().validDrop(getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getLocation()));
      if (canMove) {
        updateTargetRequest();
        setCurrentCommand(getCommand());
        showTargetFeedback();
      }
 else {
        setCurrentCommand(null);
      }
      return canMove;
    }
  }
;
}","public Tool createTool(){
  return new ReportCreationTool(factory,null){
    protected void performCreation(    int button){
      DNDService.getInstance().performDrop(getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getLocation()));
    }
    public void performCreation(    EditPart editPart){
      DNDService.getInstance().performDrop(getTemplate(),editPart,DND.DROP_DEFAULT,new DNDLocation(getLocation()));
    }
    protected boolean handleMove(){
      updateTargetUnderMouse();
      boolean canMove=DNDService.getInstance().validDrop(getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getLocation()));
      if (canMove) {
        updateTargetRequest();
        setCurrentCommand(getCommand());
        showTargetFeedback();
      }
 else {
        setCurrentCommand(null);
      }
      return canMove;
    }
  }
;
}",0.9652777777777778
66125,"public void performCreation(EditPart editPart){
  DNDService.getInstance().performDrop(""String_Node_Str"",editPart,DND.DROP_DEFAULT,new DNDLocation(getLocation()));
}","public void performCreation(EditPart editPart){
  DNDService.getInstance().performDrop(getTemplate(),editPart,DND.DROP_DEFAULT,new DNDLocation(getLocation()));
}",0.9263803680981596
66126,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException
 * @throws AdapterException
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        ExpressionHandle measureExprHandle=measure.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP);
        IScriptExpression expr=null;
        if (exprText != null && measureExprHandle != null) {
          expr=modelAdaptor.adaptJSExpression(measureExprHandle.getStringExpression(),measureExprHandle.getType());
        }
        Binding binding=new Binding(measure.getName(),expr);
        binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
        query.addBinding(binding);
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException
 * @throws AdapterException
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        if (measure.isCalculated()) {
          continue;
        }
        String function=measure.getFunction();
        String exprText=measure.getMeasureExpression();
        ExpressionHandle measureExprHandle=measure.getExpressionProperty(IMeasureModel.MEASURE_EXPRESSION_PROP);
        IScriptExpression expr=null;
        if (exprText != null && measureExprHandle != null) {
          expr=modelAdaptor.adaptJSExpression(measureExprHandle.getStringExpression(),measureExprHandle.getType());
        }
        Binding binding=new Binding(measure.getName(),expr);
        binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
        query.addBinding(binding);
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(measure.getName(),null,DataSetIterator.ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9793939393939394
66127,"/** 
 * Get the argument info list if the function has
 * @return the corresponding argument info in time functions.
 */
public List<IArgumentInfo> getArguments(){
  List<IArgumentInfo> arguments=new ArrayList<IArgumentInfo>();
  period1=new ArgumentInfo(IArgumentInfo.PERIOD_1,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1),false);
  period2=new ArgumentInfo(IArgumentInfo.PERIOD_2,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2),false);
  if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO)) {
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.NEXT_N_PERIODS)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
  }
  return arguments;
}","/** 
 * Get the argument info list if the function has
 * @return the corresponding argument info in time functions.
 */
public List<IArgumentInfo> getArguments(){
  List<IArgumentInfo> arguments=new ArrayList<IArgumentInfo>();
  period1=new ArgumentInfo(IArgumentInfo.PERIOD_1,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1),false);
  period2=new ArgumentInfo(IArgumentInfo.PERIOD_2,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2),false);
  if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_WEEK_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO)) {
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.NEXT_N_PERIODS)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
  }
  return arguments;
}",0.9996071498723236
66128,"/** 
 * @param idr
 * @param bo
 * @throws ChartException
 */
public final void render(IDeviceRenderer idr,Bounds bo) throws ChartException {
  dc=dial.getDeferredCache();
  Bounds boCA=goFactory.copyOf(bo);
  ChartWithoutAxes cwa=(ChartWithoutAxes)dial.getModel();
  if (cwa.isSetCoverage()) {
    double rate=cwa.getCoverage();
    double ww=0.5 * (1d - rate) * bo.getWidth();
    double hh=0.5 * (1d - rate) * bo.getHeight();
    insCA=goFactory.createInsets(hh,ww,hh,ww);
  }
  boCA.adjust(insCA);
  final boolean bDialSuperimposed=dial.isDialSuperimposed();
  final boolean bFirstSeries=dial.isFirstDial();
  final org.eclipse.birt.chart.model.component.Dial dialComponent=ds.getDial();
  final Needle needleComponent=ds.getNeedle();
  if (!bDialSuperimposed) {
    DataSetIterator dsi=new DataSetIterator(dial.getSeries().getDataSet());
    BigDecimal divisor=null;
    dsi.reset();
    while (dsi.hasNext()) {
      Object o=dsi.next();
      if (NumberUtil.isBigNumber(o)) {
        divisor=((BigNumber)o).getDivisor();
        break;
      }
    }
    dRadius=getDialRadius();
    dStartAngle=getDialStartAngle();
    dStopAngle=getDialStopAngle();
    inverseScale=isInverseScale();
    sc=getDialScale();
    asc=getAutoScale(dStartAngle,dStopAngle,sc,bo,divisor);
    dExtraSpacing=getDialExtraSpacing(asc);
  }
  if (dial.isRightToLeft()) {
    inverseScale=!inverseScale;
  }
  final boolean bFullDisc=dStopAngle < 0 || dStopAngle > 180 || dStartAngle < 0 || dStartAngle > 180;
  double dFullRadius=Math.min(boCA.getWidth() / 2d,boCA.getHeight() / 2d);
  if (dExtraSpacing > dFullRadius / 3) {
    dExtraSpacing=dFullRadius / 3;
    if (dSafeSpacing > dFullRadius / 10d) {
      dSafeSpacing=dFullRadius / 10d;
    }
  }
  if (dRadius > 0 && (dRadius + dExtraSpacing + dSafeSpacing * 2) < dFullRadius) {
    dFullRadius=dRadius + dExtraSpacing + dSafeSpacing * 2;
  }
  final ArcRenderEvent are=((EventObjectCache)idr).getEventObject(StructureSource.createUnknown(dialComponent),ArcRenderEvent.class);
  Bounds fullBounds=goFactory.createBounds(boCA.getLeft() + (boCA.getWidth() - 2 * dFullRadius) / 2,(boCA.getTop() + (boCA.getHeight() - (bFullDisc ? 2 : 1) * dFullRadius) / 2),2 * dFullRadius,2 * dFullRadius);
  if (!bDialSuperimposed || bFirstSeries) {
    final Fill dialFill=dialComponent.getFill();
    double safeAngle=Math.toDegrees(Math.abs(Math.asin(dSafeSpacing / dFullRadius)));
    are.setBounds(fullBounds);
    are.setStartAngle(bFullDisc ? 0 : -safeAngle);
    are.setAngleExtent(bFullDisc ? 360 : (180 + 2 * safeAngle));
    are.setOutline(dialComponent.getLineAttributes());
    are.setBackground(dialFill);
    are.setStyle(ArcRenderEvent.CLOSED);
    idr.fillArc(are);
    idr.drawArc(are);
  }
  Bounds dialBounds=goFactory.createBounds(fullBounds.getLeft() + dExtraSpacing + dSafeSpacing,fullBounds.getTop() + dExtraSpacing + dSafeSpacing,fullBounds.getWidth() - 2 * (dExtraSpacing + dSafeSpacing),fullBounds.getHeight() - 2 * (dExtraSpacing + dSafeSpacing));
  if (!bDialSuperimposed || bFirstSeries) {
    double tsa=dStartAngle;
    double tpa=dStopAngle;
    if (tsa > tpa) {
      double temp=tsa;
      tsa=tpa;
      tpa=temp;
    }
    are.setBounds(dialBounds);
    are.setStartAngle(tsa);
    are.setAngleExtent(tpa - tsa);
    are.setOutline(dialComponent.getMajorGrid().getLineAttributes());
    are.setStyle(Math.abs(dStopAngle - dStartAngle) < 360 ? ArcRenderEvent.SECTOR : ArcRenderEvent.OPEN);
    idr.drawArc(are);
  }
  double xc=dialBounds.getLeft() + dialBounds.getWidth() / 2d;
  double yc=dialBounds.getTop() + dialBounds.getHeight() / 2d;
  double dDialRadius=dialBounds.getHeight() / 2d;
  for (int i=0; i < dialComponent.getDialRegions().size(); i++) {
    DialRegion dregion=dialComponent.getDialRegions().get(i);
    double drStartValue=((NumberDataElement)dregion.getStartValue()).getValue();
    double drEndValue=((NumberDataElement)dregion.getEndValue()).getValue();
    double ascMinValue=Double.parseDouble(asc.getMinimum().toString());
    double ascMaxValue=Double.parseDouble(asc.getMaximum().toString());
    if (!((Math.max(drStartValue,drEndValue) <= ascMinValue) || (Math.min(drStartValue,drEndValue) >= (ascMaxValue)) || (drStartValue == drEndValue))) {
      double sAngle=Methods.getLocation(asc,drStartValue);
      double eAngle=Methods.getLocation(asc,drEndValue);
      if (sAngle < dStartAngle) {
        sAngle=dStartAngle;
      }
      if (sAngle > dStopAngle) {
        sAngle=dStopAngle;
      }
      if (eAngle < dStartAngle) {
        eAngle=dStartAngle;
      }
      if (eAngle > dStopAngle) {
        eAngle=dStopAngle;
      }
      double tsa=transformAngle(sAngle);
      double tpa=transformAngle(eAngle);
      if (tsa > tpa) {
        double temp=tsa;
        tsa=tpa;
        tpa=temp;
      }
      are.setBounds(dialBounds);
      are.setStartAngle(tsa);
      are.setAngleExtent(tpa - tsa);
      are.setBackground(dregion.getFill());
      are.setOutline(dregion.getOutline());
      are.setStyle(ArcRenderEvent.SECTOR);
      are.setInnerRadius(dregion.isSetInnerRadius() ? Math.min(dregion.getInnerRadius() * dScale,dDialRadius) : 0);
      if (dregion.isSetOuterRadius()) {
        if (dregion.getOuterRadius() == -1) {
          are.setOuterRadius(dDialRadius);
        }
 else {
          are.setOuterRadius(Math.min(dregion.getOuterRadius() * dScale,dDialRadius));
        }
      }
 else {
        are.setOuterRadius(0);
      }
      idr.fillArc(are);
      idr.drawArc(are);
    }
  }
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(StructureSource.createUnknown(dialComponent),LineRenderEvent.class);
  AxisTickCoordinates tickCoord=asc.getTickCordinates();
  if (!bDialSuperimposed || bFirstSeries) {
    if (dialComponent.getMajorGrid().getTickAttributes().isVisible() || dialComponent.getMinorGrid().getTickAttributes().isVisible()) {
      double[] minorCoord=asc.getMinorCoordinates(sc.getMinorGridsPerUnit());
      Location start=goFactory.createLocation(0,0);
      Location end=goFactory.createLocation(0,0);
      for (int i=0; i < asc.getTickCount(); i++) {
        double mtd=tickCoord.getCoordinate(i);
        mtd=transformAngle(mtd);
        double mtr=Math.toRadians(mtd);
        if (dialComponent.getMajorGrid().getTickAttributes().isVisible()) {
          lre.setLineAttributes(dialComponent.getMajorGrid().getTickAttributes());
switch (dialComponent.getMajorGrid().getTickStyle().getValue()) {
case TickStyle.ABOVE:
            start.set(xc + dDialRadius * Math.cos(mtr),yc - dDialRadius * Math.sin(mtr));
          end.set(xc + (dDialRadius + getTickSize()) * Math.cos(mtr),yc - (dDialRadius + getTickSize()) * Math.sin(mtr));
        break;
case TickStyle.ACROSS:
      start.set(xc + (dDialRadius + getTickSize() / 2d) * Math.cos(mtr),yc - (dDialRadius + getTickSize() / 2d) * Math.sin(mtr));
    end.set(xc + (dDialRadius - getTickSize() / 2d) * Math.cos(mtr),yc - (dDialRadius - getTickSize() / 2d) * Math.sin(mtr));
  break;
case TickStyle.BELOW:
start.set(xc + dDialRadius * Math.cos(mtr),yc - dDialRadius * Math.sin(mtr));
end.set(xc + (dDialRadius - getTickSize()) * Math.cos(mtr),yc - (dDialRadius - getTickSize()) * Math.sin(mtr));
break;
default :
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(dial.getRunTimeContext().getULocale()));
}
lre.setStart(start);
lre.setEnd(end);
dc.addLine(lre);
}
if (dialComponent.getMinorGrid().getTickAttributes().isVisible() && i != asc.getTickCount() - 1) {
lre.setLineAttributes(dialComponent.getMinorGrid().getTickAttributes());
for (int j=0; j < sc.getMinorGridsPerUnit() - 1; j++) {
double minortd=minorCoord[j];
if ((inverseScale && mtd + minortd >= transformAngle(tickCoord.getCoordinate(i + 1))) || (!inverseScale && mtd - minortd <= transformAngle(tickCoord.getCoordinate(i + 1)))) {
continue;
}
double minortr=Math.toRadians(inverseScale ? (mtd + minortd) : (mtd - minortd));
switch (dialComponent.getMinorGrid().getTickStyle().getValue()) {
case TickStyle.ABOVE:
start.set(xc + dDialRadius * Math.cos(minortr),yc - dDialRadius * Math.sin(minortr));
end.set(xc + (dDialRadius + getTickSize()) * Math.cos(minortr),yc - (dDialRadius + getTickSize()) * Math.sin(minortr));
break;
case TickStyle.ACROSS:
start.set(xc + (dDialRadius + getTickSize() / 2d) * Math.cos(minortr),yc - (dDialRadius + getTickSize() / 2d) * Math.sin(minortr));
end.set(xc + (dDialRadius - getTickSize() / 2d) * Math.cos(minortr),yc - (dDialRadius - getTickSize() / 2d) * Math.sin(minortr));
break;
case TickStyle.BELOW:
start.set(xc + dDialRadius * Math.cos(minortr),yc - dDialRadius * Math.sin(minortr));
end.set(xc + (dDialRadius - getTickSize()) * Math.cos(minortr),yc - (dDialRadius - getTickSize()) * Math.sin(minortr));
break;
default :
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(dial.getRunTimeContext().getULocale()));
}
lre.setStart(start);
lre.setEnd(end);
dc.addLine(lre);
}
}
}
}
}
if (!bDialSuperimposed || (bDialSuperimposed && bFirstSeries)) {
if (dialComponent.getLabel().isVisible()) {
final TextRenderEvent tre=((EventObjectCache)idr).getEventObject(StructureSource.createUnknown(dialComponent.getLabel()),TextRenderEvent.class);
Label lbScale=goFactory.copyOf(dialComponent.getLabel());
Location loc=goFactory.createLocation(0,0);
tre.setLabel(lbScale);
tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
tre.setLocation(loc);
for (int i=0; i < tickCoord.size(); i++) {
if (dStopAngle - dStartAngle == 360 && i == tickCoord.size() - 1) {
continue;
}
lbScale.getCaption().setValue(sla[i]);
double tickAngle=dStartAngle + (tickCoord.getNormalizedCoordinate(i)) / (tickCoord.getEnd() - tickCoord.getStart()) * (dStopAngle - dStartAngle);
tickAngle=transformAngle(tickAngle);
int quad=ChartUtil.getQuadrant(tickAngle);
double tickRadians=Math.toRadians(tickAngle);
double tx=xc + dDialRadius * Math.cos(tickRadians);
double ty=yc - dDialRadius * Math.sin(tickRadians);
switch (quad) {
case -1:
loc.set(tx + dSafeSpacing / 2,ty);
tre.setTextPosition(TextRenderEvent.RIGHT);
break;
case -2:
loc.set(tx,ty - dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.ABOVE);
break;
case -3:
loc.set(tx - dSafeSpacing / 2,ty);
tre.setTextPosition(TextRenderEvent.LEFT);
break;
case -4:
loc.set(tx,ty + dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.BELOW);
break;
case 1:
loc.set(tx + dSafeSpacing / 2,ty - dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.RIGHT);
break;
case 2:
loc.set(tx - dSafeSpacing / 2,ty - dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.LEFT);
break;
case 3:
loc.set(tx - dSafeSpacing / 2,ty + dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.LEFT);
break;
case 4:
loc.set(tx + dSafeSpacing / 2,ty + dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.RIGHT);
break;
}
dc.addLabel(tre);
}
}
}
double needleAngle=Methods.getLocation(asc,dValue);
if (needleAngle < dStartAngle || needleAngle > dStopAngle) {
return;
}
needleAngle=transformAngle(needleAngle);
boolean bCategoryStyle=(((ChartWithoutAxes)dial.getModel()).getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL);
LineAttributes lia=goFactory.copyOf(needleComponent.getLineAttributes());
Fill fl=bCategoryStyle ? (FillUtil.getPaletteFill(pa.getEntries(),iValueValidIndex)) : (FillUtil.getPaletteFill(pa.getEntries(),(dial.getSeriesDefinition().getRunTimeSeries().indexOf(ds))));
dial.updateTranslucency(fl,ds);
final AbstractScriptHandler<?> sh=dial.getRunTimeContext().getScriptHandler();
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dphValue,fl,dial.getRunTimeContext().getScriptContext());
dial.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dphValue);
fl=ChartUtil.convertFill(fl,((Number)dphValue.getOrthogonalValue()).doubleValue(),null);
if (fl instanceof ColorDefinition) {
lia.setColor((ColorDefinition)fl);
}
 else if (fl instanceof Gradient) {
lia.setColor(((Gradient)fl).getStartColor());
}
final LineRenderEvent lreNeedle=((EventObjectCache)idr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ds,dphValue),LineRenderEvent.class);
lreNeedle.setLineAttributes(lia);
lreNeedle.setStart(goFactory.createLocation(dialBounds.getLeft() + dialBounds.getWidth() / 2,dialBounds.getTop() + dialBounds.getHeight() / 2));
double xOffset=dDialRadius * Math.cos(Math.toRadians(needleAngle));
double yOffset=dDialRadius * Math.sin(Math.toRadians(needleAngle));
lreNeedle.setEnd(goFactory.createLocation(lreNeedle.getStart().getX() + xOffset,lre.getStart().getY() - yOffset));
dc.addLine(lreNeedle);
if (dial.isInteractivityEnabled()) {
final EList<Trigger> elTriggers=ds.getTriggers();
if (!elTriggers.isEmpty()) {
final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ds,dphValue);
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(iSource,InteractionEvent.class);
iev.setCursor(ds.getCursor());
Trigger tg;
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
dial.processTrigger(tg,iSource);
iev.addTrigger(tg);
}
iev.setHotSpot(lreNeedle);
idr.enableInteraction(iev);
}
}
renderNeedleDecorator(idr,needleComponent,lreNeedle.getStart(),lreNeedle.getEnd(),lreNeedle.getLineAttributes(),fl,needleAngle,dialBounds.getWidth() / 2d,dphValue);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dphValue,fl,dial.getRunTimeContext().getScriptContext());
dial.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dphValue);
}","/** 
 * @param idr
 * @param bo
 * @throws ChartException
 */
public final void render(IDeviceRenderer idr,Bounds bo) throws ChartException {
  dc=dial.getDeferredCache();
  Bounds boCA=goFactory.copyOf(bo);
  ChartWithoutAxes cwa=(ChartWithoutAxes)dial.getModel();
  if (cwa.isSetCoverage()) {
    double rate=cwa.getCoverage();
    double ww=0.5 * (1d - rate) * bo.getWidth();
    double hh=0.5 * (1d - rate) * bo.getHeight();
    insCA=goFactory.createInsets(hh,ww,hh,ww);
  }
  boCA.adjust(insCA);
  final boolean bDialSuperimposed=dial.isDialSuperimposed();
  final boolean bFirstSeries=dial.isFirstDial();
  final org.eclipse.birt.chart.model.component.Dial dialComponent=ds.getDial();
  final Needle needleComponent=ds.getNeedle();
  if (!bDialSuperimposed) {
    DataSetIterator dsi=new DataSetIterator(dial.getSeries().getDataSet());
    BigDecimal divisor=null;
    dsi.reset();
    while (dsi.hasNext()) {
      Object o=dsi.next();
      if (NumberUtil.isBigNumber(o)) {
        divisor=((BigNumber)o).getDivisor();
        break;
      }
    }
    dRadius=getDialRadius();
    dStartAngle=getDialStartAngle();
    dStopAngle=getDialStopAngle();
    inverseScale=isInverseScale();
    sc=getDialScale();
    asc=getAutoScale(dStartAngle,dStopAngle,sc,bo,divisor);
    dExtraSpacing=getDialExtraSpacing(asc);
  }
  if (dial.isRightToLeft()) {
    inverseScale=!inverseScale;
  }
  final boolean bFullDisc=dStopAngle < 0 || dStopAngle > 180 || dStartAngle < 0 || dStartAngle > 180;
  double dFullRadius=Math.min(boCA.getWidth() / 2d,boCA.getHeight() / 2d);
  if (dExtraSpacing > dFullRadius / 3) {
    dExtraSpacing=dFullRadius / 3;
    if (dSafeSpacing > dFullRadius / 10d) {
      dSafeSpacing=dFullRadius / 10d;
    }
  }
  if (dRadius > 0 && (dRadius + dExtraSpacing + dSafeSpacing * 2) < dFullRadius) {
    dFullRadius=dRadius + dExtraSpacing + dSafeSpacing * 2;
  }
  final ArcRenderEvent are=((EventObjectCache)idr).getEventObject(StructureSource.createUnknown(dialComponent),ArcRenderEvent.class);
  Bounds fullBounds=goFactory.createBounds(boCA.getLeft() + (boCA.getWidth() - 2 * dFullRadius) / 2,(boCA.getTop() + (boCA.getHeight() - (bFullDisc ? 2 : 1) * dFullRadius) / 2),2 * dFullRadius,2 * dFullRadius);
  if (!bDialSuperimposed || bFirstSeries) {
    final Fill dialFill=dialComponent.getFill();
    double safeAngle=Math.toDegrees(Math.abs(Math.asin(dSafeSpacing / dFullRadius)));
    are.setBounds(fullBounds);
    are.setStartAngle(bFullDisc ? 0 : -safeAngle);
    are.setAngleExtent(bFullDisc ? 360 : (180 + 2 * safeAngle));
    are.setOutline(dialComponent.getLineAttributes());
    are.setBackground(dialFill);
    are.setStyle(ArcRenderEvent.CLOSED);
    idr.fillArc(are);
    idr.drawArc(are);
  }
  Bounds dialBounds=goFactory.createBounds(fullBounds.getLeft() + dExtraSpacing + dSafeSpacing,fullBounds.getTop() + dExtraSpacing + dSafeSpacing,fullBounds.getWidth() - 2 * (dExtraSpacing + dSafeSpacing),fullBounds.getHeight() - 2 * (dExtraSpacing + dSafeSpacing));
  if (!bDialSuperimposed || bFirstSeries) {
    double tsa=dStartAngle;
    double tpa=dStopAngle;
    if (tsa > tpa) {
      double temp=tsa;
      tsa=tpa;
      tpa=temp;
    }
    are.setBounds(dialBounds);
    are.setStartAngle(tsa);
    are.setAngleExtent(tpa - tsa);
    are.setOutline(dialComponent.getMajorGrid().getLineAttributes());
    are.setStyle(Math.abs(dStopAngle - dStartAngle) < 360 ? ArcRenderEvent.SECTOR : ArcRenderEvent.OPEN);
    idr.drawArc(are);
  }
  double xc=dialBounds.getLeft() + dialBounds.getWidth() / 2d;
  double yc=dialBounds.getTop() + dialBounds.getHeight() / 2d;
  double dDialRadius=dialBounds.getHeight() / 2d;
  for (int i=0; i < dialComponent.getDialRegions().size(); i++) {
    DialRegion dregion=dialComponent.getDialRegions().get(i);
    double ascMinValue=Double.parseDouble(asc.getMinimum().toString());
    double ascMaxValue=Double.parseDouble(asc.getMaximum().toString());
    double drStartValue=dregion.getStartValue() == null ? ascMinValue : ((NumberDataElement)dregion.getStartValue()).getValue();
    double drEndValue=dregion.getEndValue() == null ? ascMaxValue : ((NumberDataElement)dregion.getEndValue()).getValue();
    if (!((Math.max(drStartValue,drEndValue) <= ascMinValue) || (Math.min(drStartValue,drEndValue) >= (ascMaxValue)) || (drStartValue == drEndValue))) {
      double sAngle=Methods.getLocation(asc,drStartValue);
      double eAngle=Methods.getLocation(asc,drEndValue);
      if (sAngle < dStartAngle) {
        sAngle=dStartAngle;
      }
      if (sAngle > dStopAngle) {
        sAngle=dStopAngle;
      }
      if (eAngle < dStartAngle) {
        eAngle=dStartAngle;
      }
      if (eAngle > dStopAngle) {
        eAngle=dStopAngle;
      }
      double tsa=transformAngle(sAngle);
      double tpa=transformAngle(eAngle);
      if (tsa > tpa) {
        double temp=tsa;
        tsa=tpa;
        tpa=temp;
      }
      are.setBounds(dialBounds);
      are.setStartAngle(tsa);
      are.setAngleExtent(tpa - tsa);
      are.setBackground(dregion.getFill());
      are.setOutline(dregion.getOutline());
      are.setStyle(ArcRenderEvent.SECTOR);
      are.setInnerRadius(dregion.isSetInnerRadius() ? Math.min(dregion.getInnerRadius() * dScale,dDialRadius) : 0);
      if (dregion.isSetOuterRadius()) {
        if (dregion.getOuterRadius() == -1) {
          are.setOuterRadius(dDialRadius);
        }
 else {
          are.setOuterRadius(Math.min(dregion.getOuterRadius() * dScale,dDialRadius));
        }
      }
 else {
        are.setOuterRadius(0);
      }
      idr.fillArc(are);
      idr.drawArc(are);
    }
  }
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(StructureSource.createUnknown(dialComponent),LineRenderEvent.class);
  AxisTickCoordinates tickCoord=asc.getTickCordinates();
  if (!bDialSuperimposed || bFirstSeries) {
    if (dialComponent.getMajorGrid().getTickAttributes().isVisible() || dialComponent.getMinorGrid().getTickAttributes().isVisible()) {
      double[] minorCoord=asc.getMinorCoordinates(sc.getMinorGridsPerUnit());
      Location start=goFactory.createLocation(0,0);
      Location end=goFactory.createLocation(0,0);
      for (int i=0; i < asc.getTickCount(); i++) {
        double mtd=tickCoord.getCoordinate(i);
        mtd=transformAngle(mtd);
        double mtr=Math.toRadians(mtd);
        if (dialComponent.getMajorGrid().getTickAttributes().isVisible()) {
          lre.setLineAttributes(dialComponent.getMajorGrid().getTickAttributes());
switch (dialComponent.getMajorGrid().getTickStyle().getValue()) {
case TickStyle.ABOVE:
            start.set(xc + dDialRadius * Math.cos(mtr),yc - dDialRadius * Math.sin(mtr));
          end.set(xc + (dDialRadius + getTickSize()) * Math.cos(mtr),yc - (dDialRadius + getTickSize()) * Math.sin(mtr));
        break;
case TickStyle.ACROSS:
      start.set(xc + (dDialRadius + getTickSize() / 2d) * Math.cos(mtr),yc - (dDialRadius + getTickSize() / 2d) * Math.sin(mtr));
    end.set(xc + (dDialRadius - getTickSize() / 2d) * Math.cos(mtr),yc - (dDialRadius - getTickSize() / 2d) * Math.sin(mtr));
  break;
case TickStyle.BELOW:
start.set(xc + dDialRadius * Math.cos(mtr),yc - dDialRadius * Math.sin(mtr));
end.set(xc + (dDialRadius - getTickSize()) * Math.cos(mtr),yc - (dDialRadius - getTickSize()) * Math.sin(mtr));
break;
default :
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(dial.getRunTimeContext().getULocale()));
}
lre.setStart(start);
lre.setEnd(end);
dc.addLine(lre);
}
if (dialComponent.getMinorGrid().getTickAttributes().isVisible() && i != asc.getTickCount() - 1) {
lre.setLineAttributes(dialComponent.getMinorGrid().getTickAttributes());
for (int j=0; j < sc.getMinorGridsPerUnit() - 1; j++) {
double minortd=minorCoord[j];
if ((inverseScale && mtd + minortd >= transformAngle(tickCoord.getCoordinate(i + 1))) || (!inverseScale && mtd - minortd <= transformAngle(tickCoord.getCoordinate(i + 1)))) {
continue;
}
double minortr=Math.toRadians(inverseScale ? (mtd + minortd) : (mtd - minortd));
switch (dialComponent.getMinorGrid().getTickStyle().getValue()) {
case TickStyle.ABOVE:
start.set(xc + dDialRadius * Math.cos(minortr),yc - dDialRadius * Math.sin(minortr));
end.set(xc + (dDialRadius + getTickSize()) * Math.cos(minortr),yc - (dDialRadius + getTickSize()) * Math.sin(minortr));
break;
case TickStyle.ACROSS:
start.set(xc + (dDialRadius + getTickSize() / 2d) * Math.cos(minortr),yc - (dDialRadius + getTickSize() / 2d) * Math.sin(minortr));
end.set(xc + (dDialRadius - getTickSize() / 2d) * Math.cos(minortr),yc - (dDialRadius - getTickSize() / 2d) * Math.sin(minortr));
break;
case TickStyle.BELOW:
start.set(xc + dDialRadius * Math.cos(minortr),yc - dDialRadius * Math.sin(minortr));
end.set(xc + (dDialRadius - getTickSize()) * Math.cos(minortr),yc - (dDialRadius - getTickSize()) * Math.sin(minortr));
break;
default :
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(dial.getRunTimeContext().getULocale()));
}
lre.setStart(start);
lre.setEnd(end);
dc.addLine(lre);
}
}
}
}
}
if (!bDialSuperimposed || (bDialSuperimposed && bFirstSeries)) {
if (dialComponent.getLabel().isVisible()) {
final TextRenderEvent tre=((EventObjectCache)idr).getEventObject(StructureSource.createUnknown(dialComponent.getLabel()),TextRenderEvent.class);
Label lbScale=goFactory.copyOf(dialComponent.getLabel());
Location loc=goFactory.createLocation(0,0);
tre.setLabel(lbScale);
tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
tre.setLocation(loc);
for (int i=0; i < tickCoord.size(); i++) {
if (dStopAngle - dStartAngle == 360 && i == tickCoord.size() - 1) {
continue;
}
lbScale.getCaption().setValue(sla[i]);
double tickAngle=dStartAngle + (tickCoord.getNormalizedCoordinate(i)) / (tickCoord.getEnd() - tickCoord.getStart()) * (dStopAngle - dStartAngle);
tickAngle=transformAngle(tickAngle);
int quad=ChartUtil.getQuadrant(tickAngle);
double tickRadians=Math.toRadians(tickAngle);
double tx=xc + dDialRadius * Math.cos(tickRadians);
double ty=yc - dDialRadius * Math.sin(tickRadians);
switch (quad) {
case -1:
loc.set(tx + dSafeSpacing / 2,ty);
tre.setTextPosition(TextRenderEvent.RIGHT);
break;
case -2:
loc.set(tx,ty - dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.ABOVE);
break;
case -3:
loc.set(tx - dSafeSpacing / 2,ty);
tre.setTextPosition(TextRenderEvent.LEFT);
break;
case -4:
loc.set(tx,ty + dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.BELOW);
break;
case 1:
loc.set(tx + dSafeSpacing / 2,ty - dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.RIGHT);
break;
case 2:
loc.set(tx - dSafeSpacing / 2,ty - dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.LEFT);
break;
case 3:
loc.set(tx - dSafeSpacing / 2,ty + dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.LEFT);
break;
case 4:
loc.set(tx + dSafeSpacing / 2,ty + dSafeSpacing / 2);
tre.setTextPosition(TextRenderEvent.RIGHT);
break;
}
dc.addLabel(tre);
}
}
}
double needleAngle=Methods.getLocation(asc,dValue);
if (needleAngle < dStartAngle || needleAngle > dStopAngle) {
return;
}
needleAngle=transformAngle(needleAngle);
boolean bCategoryStyle=(((ChartWithoutAxes)dial.getModel()).getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL);
LineAttributes lia=goFactory.copyOf(needleComponent.getLineAttributes());
Fill fl=bCategoryStyle ? (FillUtil.getPaletteFill(pa.getEntries(),iValueValidIndex)) : (FillUtil.getPaletteFill(pa.getEntries(),(dial.getSeriesDefinition().getRunTimeSeries().indexOf(ds))));
dial.updateTranslucency(fl,ds);
final AbstractScriptHandler<?> sh=dial.getRunTimeContext().getScriptHandler();
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dphValue,fl,dial.getRunTimeContext().getScriptContext());
dial.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dphValue);
fl=ChartUtil.convertFill(fl,((Number)dphValue.getOrthogonalValue()).doubleValue(),null);
if (fl instanceof ColorDefinition) {
lia.setColor((ColorDefinition)fl);
}
 else if (fl instanceof Gradient) {
lia.setColor(((Gradient)fl).getStartColor());
}
final LineRenderEvent lreNeedle=((EventObjectCache)idr).getEventObject(WrappedStructureSource.createSeriesDataPoint(ds,dphValue),LineRenderEvent.class);
lreNeedle.setLineAttributes(lia);
lreNeedle.setStart(goFactory.createLocation(dialBounds.getLeft() + dialBounds.getWidth() / 2,dialBounds.getTop() + dialBounds.getHeight() / 2));
double xOffset=dDialRadius * Math.cos(Math.toRadians(needleAngle));
double yOffset=dDialRadius * Math.sin(Math.toRadians(needleAngle));
lreNeedle.setEnd(goFactory.createLocation(lreNeedle.getStart().getX() + xOffset,lre.getStart().getY() - yOffset));
dc.addLine(lreNeedle);
if (dial.isInteractivityEnabled()) {
final EList<Trigger> elTriggers=ds.getTriggers();
if (!elTriggers.isEmpty()) {
final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(ds,dphValue);
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(iSource,InteractionEvent.class);
iev.setCursor(ds.getCursor());
Trigger tg;
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
dial.processTrigger(tg,iSource);
iev.addTrigger(tg);
}
iev.setHotSpot(lreNeedle);
idr.enableInteraction(iev);
}
}
renderNeedleDecorator(idr,needleComponent,lreNeedle.getStart(),lreNeedle.getEnd(),lreNeedle.getLineAttributes(),fl,needleAngle,dialBounds.getWidth() / 2d,dphValue);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dphValue,fl,dial.getRunTimeContext().getScriptContext());
dial.getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dphValue);
}",0.9849596478356566
66129,"/** 
 * Returns the visible char count before the ellipsis, 0 if no ellipsis is used. e.g. if the text is ""abcd..."" then 4 will be returned. if the text is ""abcdefg"" then 0 will be returned.
 * @return
 */
public int getVisibleCharCount(){
  return iVisChar;
}","/** 
 * Returns the visible char count before the ellipsis, 0 if no ellipsis is used. e.g. if the text is ""abcd..."" then 4 will be returned. if the text is ""abcdefg"" then 0 will be returned.
 * @return count of visible chars.
 */
public int getVisibleCharCount(){
  return iVisChar;
}",0.9558823529411764
66130,"/** 
 * A convenience method provided to create a Text instance
 * @param sValue
 */
public static final Text createDefault(String sValue){
  final Text tx=AttributeFactory.eINSTANCE.createText();
  ((TextImpl)tx).initDefault();
  if (sValue == null) {
    sValue=IConstants.UNDEFINED_STRING;
  }
  tx.setValue(sValue);
  return tx;
}","/** 
 * A convenience method provided to create a Text instance
 * @param sValue
 */
public static final Text createDefault(String sValue){
  final Text tx=AttributeFactory.eINSTANCE.createText();
  ((TextImpl)tx).initDefault();
  tx.setValue(sValue);
  return tx;
}",0.7733333333333333
66131,"/** 
 * @return
 */
public static final Dial create(){
  final Dial dl=ComponentFactory.eINSTANCE.createDial();
  ((DialImpl)dl).initialize();
  return dl;
}","/** 
 * @return dial instance with setting 'isSet' flag.
 */
public static final Dial create(){
  final Dial dl=ComponentFactory.eINSTANCE.createDial();
  ((DialImpl)dl).initialize();
  return dl;
}",0.8845070422535212
66132,"/** 
 * @return
 */
public static final Dial createDefault(){
  final Dial dl=ComponentFactory.eINSTANCE.createDial();
  ((DialImpl)dl).initDefault();
  return dl;
}","/** 
 * @return dial instance without setting 'isSet' flag.
 */
public static final Dial createDefault(){
  final Dial dl=ComponentFactory.eINSTANCE.createDial();
  ((DialImpl)dl).initDefault();
  return dl;
}",0.8823529411764706
66133,"/** 
 * A convenience method to create an initialized 'Label' instance
 * @return
 */
public static final Label create(){
  final Label la=ComponentFactory.eINSTANCE.createLabel();
  ((LabelImpl)la).initialize();
  return la;
}","/** 
 * A convenience method to create an initialized 'Label' instance
 * @return label instance with setting 'isSet' flag.
 */
public static final Label create(){
  final Label la=ComponentFactory.eINSTANCE.createLabel();
  ((LabelImpl)la).initialize();
  return la;
}",0.9153225806451613
66134,"/** 
 * A convenience method to create an initialized 'Label' instance
 * @return
 */
public static final Label createDefault(boolean visible){
  final Label la=ComponentFactory.eINSTANCE.createLabel();
  ((LabelImpl)la).initDefault(visible);
  return la;
}","/** 
 * A convenience method to create an initialized 'Label' instance
 * @return label instance without setting 'isSet' flag.
 */
public static final Label createDefault(boolean visible){
  final Label la=ComponentFactory.eINSTANCE.createLabel();
  ((LabelImpl)la).initDefault(visible);
  return la;
}",0.9194991055456172
66135,"/** 
 * A convenient method to get an instance copy. This is much faster than the ECoreUtil.copy(). Note this method only copies those working properties of the label. e.g. which could affect renderer. This is different with the copyInstance() method, which copis all attribuetes.
 * @param src
 * @return
 */
public static Label copyCompactInstance(Label src){
  if (src == null) {
    return null;
  }
  LabelImpl lb=new LabelImpl();
  lb.visible=src.isVisible();
  lb.visibleESet=src.isSetVisible();
  if (src.getBackground() != null) {
    lb.background=FillUtil.copyOf(src.getBackground());
  }
  lb.caption=src.getCaption().copyInstance();
  lb.insets=src.getInsets().copyInstance();
  if (src.getOutline() != null && src.getOutline().isVisible()) {
    lb.outline=src.getOutline().copyInstance();
  }
  if (ChartUtil.isShadowDefined(src)) {
    lb.shadowColor=src.getShadowColor().copyInstance();
  }
  return lb;
}","/** 
 * A convenient method to get an instance copy. This is much faster than the ECoreUtil.copy(). Note this method only copies those working properties of the label. e.g. which could affect renderer. This is different with the copyInstance() method, which copies all attributes.
 * @param src
 * @return new label instance.
 */
public static Label copyCompactInstance(Label src){
  if (src == null) {
    return null;
  }
  LabelImpl lb=new LabelImpl();
  lb.visible=src.isVisible();
  lb.visibleESet=src.isSetVisible();
  if (src.getBackground() != null) {
    lb.background=FillUtil.copyOf(src.getBackground());
  }
  lb.caption=src.getCaption().copyInstance();
  lb.insets=src.getInsets().copyInstance();
  if (src.getOutline() != null && src.getOutline().isVisible()) {
    lb.outline=src.getOutline().copyInstance();
  }
  if (ChartUtil.isShadowDefined(src)) {
    lb.shadowColor=src.getShadowColor().copyInstance();
  }
  return lb;
}",0.9742489270386266
66136,"/** 
 * Initializes all member variables Note: Manually written
 */
protected final void initDefault(){
  super.initDefault();
  Axis xAxisBase=AxisImpl.createDefault(Axis.BASE);
  try {
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    xAxisBase.getOrigin().setValue(NumberDataElementImpl.create(0));
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",AxisType.TEXT_LITERAL);
    Axis yAxisOrthogonal=AxisImpl.createDefault(Axis.ORTHOGONAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle().getCaption().getFont(),""String_Node_Str"",90);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Orientation.VERTICAL_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    yAxisOrthogonal.getOrigin().setValue(NumberDataElementImpl.create(0));
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",AxisType.LINEAR_LITERAL);
    xAxisBase.getAssociatedAxes().add(yAxisOrthogonal);
    getAxes().add(xAxisBase);
    setRotation(Rotation3DImpl.createDefault());
  }
 catch (  ChartException e) {
  }
}","/** 
 * Initializes all member variables Note: Manually written
 */
protected final void initDefault(){
  super.initDefault();
  Axis xAxisBase=AxisImpl.createDefault(Axis.BASE);
  try {
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Position.BELOW_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",Orientation.HORIZONTAL_LITERAL);
    ChartElementUtil.setDefaultValue(xAxisBase.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    xAxisBase.getOrigin().setValue(null);
    ChartElementUtil.setDefaultValue(xAxisBase,""String_Node_Str"",AxisType.TEXT_LITERAL);
    Axis yAxisOrthogonal=AxisImpl.createDefault(Axis.ORTHOGONAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle().getCaption().getFont(),""String_Node_Str"",90);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle(),""String_Node_Str"",false);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",true);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Position.LEFT_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",Orientation.VERTICAL_LITERAL);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getOrigin(),""String_Node_Str"",IntersectionType.MIN_LITERAL);
    yAxisOrthogonal.getOrigin().setValue(null);
    ChartElementUtil.setDefaultValue(yAxisOrthogonal,""String_Node_Str"",AxisType.LINEAR_LITERAL);
    xAxisBase.getAssociatedAxes().add(yAxisOrthogonal);
    getAxes().add(xAxisBase);
    setRotation(Rotation3DImpl.createDefault());
  }
 catch (  ChartException e) {
  }
}",0.4550102249488753
66137,"/** 
 * Renders all marker lines (and labels at requested positions) associated with every axis in the plot Note that marker lines are drawn immediately (not rendered as deferred) at the appropriate Z-order
 * @param oaxa
 * @param boPlotClientArea
 * @throws ChartException
 */
private final void renderMarkerLines() throws ChartException {
  PlotWithAxes pwa=(PlotWithAxes)getComputations();
  Bounds boPlotClientArea=pwa.getPlotBounds();
  Axis ax;
  OneAxis[] oaxa=getAllOneAxes();
  int iLineCount, iAxisCount=oaxa.length;
  MarkerLine ml;
  LineRenderEvent lre;
  DataElement deValue;
  AutoScale asc;
  double dCoordinate=0;
  int iOrientation;
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final Location loStart=goFactory.createLocation(0,0);
  final Location loEnd=goFactory.createLocation(0,0);
  Anchor anc;
  TextRenderEvent tre=null;
  Label la=null;
  double dOriginalAngle=0;
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final Bounds boText=goFactory.createBounds(0,0,0,0);
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerLine> el=ax.getMarkerLines();
    iLineCount=el.size();
    for (int j=0; j < iLineCount; j++) {
      ml=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_LINE,ml);
      deValue=ml.getValue();
      if (deValue == null) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ml},Messages.getResourceBundle(getRunTimeContext().getULocale()));
      }
      la=goFactory.copyOf(ml.getLabel());
      if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
        la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
      }
 else {
        try {
          la.getCaption().setValue(ValueFormatter.format(deValue,getValidMarkerLineFormat(ml),oaxa[i].getRunTimeContext().getULocale(),getDataElementDefaultFormat(ml.getValue(),asc)));
        }
 catch (        ChartException dfex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
        }
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dCoordinate=Methods.getLocation(asc,deValue);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deValue,ml},getRunTimeContext().getULocale()));
        continue;
      }
      lre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),LineRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dCoordinate > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dCoordinate=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dCoordinate < boPlotClientArea.getLeft()) {
          dCoordinate=boPlotClientArea.getLeft();
        }
        loStart.set(dCoordinate,boPlotClientArea.getTop());
        loEnd.set(dCoordinate,boPlotClientArea.getTop() + boPlotClientArea.getHeight());
      }
 else {
        if (dCoordinate < boPlotClientArea.getTop()) {
          dCoordinate=boPlotClientArea.getTop();
        }
        if (dCoordinate > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dCoordinate=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        loStart.set(boPlotClientArea.getLeft(),dCoordinate);
        loEnd.set(boPlotClientArea.getLeft() + boPlotClientArea.getWidth(),dCoordinate);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          loStart.translate(0,pwa.getSeriesThickness());
          loEnd.translate(0,pwa.getSeriesThickness());
        }
 else {
          loStart.translate(-pwa.getSeriesThickness(),0);
          loEnd.translate(-pwa.getSeriesThickness(),0);
        }
      }
      lre.setStart(loStart);
      lre.setEnd(loEnd);
      lre.setLineAttributes(ml.getLineAttributes());
      idr.drawLine(lre);
      if (la.isVisible()) {
        anc=switchAnchor(ml.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        if (iOrientation == Orientation.VERTICAL) {
          if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
              boText.setTop(loStart.getY() - boText.getHeight());
            break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
          boText.setTop(loStart.getY());
        break;
default :
      boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
    break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
  boText.setLeft(loEnd.getX() - boText.getWidth());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loStart.getX());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
 else {
if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boText.setTop(loStart.getY());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boText.setTop(loEnd.getY() - boText.getHeight());
break;
default :
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
boText.setLeft(loStart.getX());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loEnd.getX() - boText.getWidth());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),TextRenderEvent.class);
tre.setBlockBounds(boText);
tre.setBlockAlignment(null);
tre.setLabel(la);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
getDeferredCache().addLabel(tre);
}
if (isInteractivityEnabled()) {
Trigger tg;
EList<Trigger> elTriggers=ml.getTriggers();
if (!elTriggers.isEmpty()) {
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),InteractionEvent.class);
iev.setCursor(ml.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,StructureSource.createMarkerLine(ml));
iev.addTrigger(tg);
}
Location[] loaHotspot=new Location[4];
if (iOrientation == Orientation.HORIZONTAL) {
loaHotspot[0]=goFactory.createLocation(loStart.getX() - IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[1]=goFactory.createLocation(loStart.getX() + IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[2]=goFactory.createLocation(loEnd.getX() + IConstants.LINE_EXPAND_SIZE,loEnd.getY());
loaHotspot[3]=goFactory.createLocation(loEnd.getX() - IConstants.LINE_EXPAND_SIZE,loEnd.getY());
}
 else {
loaHotspot[0]=goFactory.createLocation(loStart.getX(),loStart.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[1]=goFactory.createLocation(loEnd.getX(),loEnd.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[2]=goFactory.createLocation(loEnd.getX(),loEnd.getY() + IConstants.LINE_EXPAND_SIZE);
loaHotspot[3]=goFactory.createLocation(loStart.getX(),loStart.getY() + IConstants.LINE_EXPAND_SIZE);
}
final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
idr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_LINE,ml);
}
}
}","/** 
 * Renders all marker lines (and labels at requested positions) associated with every axis in the plot Note that marker lines are drawn immediately (not rendered as deferred) at the appropriate Z-order
 * @param oaxa
 * @param boPlotClientArea
 * @throws ChartException
 */
private final void renderMarkerLines() throws ChartException {
  PlotWithAxes pwa=(PlotWithAxes)getComputations();
  Bounds boPlotClientArea=pwa.getPlotBounds();
  Axis ax;
  OneAxis[] oaxa=getAllOneAxes();
  int iLineCount, iAxisCount=oaxa.length;
  MarkerLine ml;
  LineRenderEvent lre;
  DataElement deValue;
  AutoScale asc;
  double dCoordinate=0;
  int iOrientation;
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final Location loStart=goFactory.createLocation(0,0);
  final Location loEnd=goFactory.createLocation(0,0);
  Anchor anc;
  TextRenderEvent tre=null;
  Label la=null;
  double dOriginalAngle=0;
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final Bounds boText=goFactory.createBounds(0,0,0,0);
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerLine> el=ax.getMarkerLines();
    iLineCount=el.size();
    for (int j=0; j < iLineCount; j++) {
      ml=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_LINE,ml);
      deValue=ml.getValue();
      la=goFactory.copyOf(ml.getLabel());
      if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
        la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
      }
 else {
        try {
          la.getCaption().setValue(ValueFormatter.format(deValue,getValidMarkerLineFormat(ml),oaxa[i].getRunTimeContext().getULocale(),getDataElementDefaultFormat(ml.getValue(),asc)));
        }
 catch (        ChartException dfex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
        }
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dCoordinate=(deValue == null) ? ((iOrientation == Orientation.HORIZONTAL) ? boPlotClientArea.getLeft() : boPlotClientArea.getTop() + boPlotClientArea.getHeight()) : Methods.getLocation(asc,deValue);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deValue,ml},getRunTimeContext().getULocale()));
        continue;
      }
      lre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),LineRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dCoordinate > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dCoordinate=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dCoordinate < boPlotClientArea.getLeft()) {
          dCoordinate=boPlotClientArea.getLeft();
        }
        loStart.set(dCoordinate,boPlotClientArea.getTop());
        loEnd.set(dCoordinate,boPlotClientArea.getTop() + boPlotClientArea.getHeight());
      }
 else {
        if (dCoordinate < boPlotClientArea.getTop()) {
          dCoordinate=boPlotClientArea.getTop();
        }
        if (dCoordinate > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dCoordinate=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        loStart.set(boPlotClientArea.getLeft(),dCoordinate);
        loEnd.set(boPlotClientArea.getLeft() + boPlotClientArea.getWidth(),dCoordinate);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          loStart.translate(0,pwa.getSeriesThickness());
          loEnd.translate(0,pwa.getSeriesThickness());
        }
 else {
          loStart.translate(-pwa.getSeriesThickness(),0);
          loEnd.translate(-pwa.getSeriesThickness(),0);
        }
      }
      lre.setStart(loStart);
      lre.setEnd(loEnd);
      lre.setLineAttributes(ml.getLineAttributes());
      idr.drawLine(lre);
      if (la.isVisible()) {
        anc=switchAnchor(ml.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        if (iOrientation == Orientation.VERTICAL) {
          if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
              boText.setTop(loStart.getY() - boText.getHeight());
            break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
          boText.setTop(loStart.getY());
        break;
default :
      boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
    break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
  boText.setLeft(loEnd.getX() - boText.getWidth());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loStart.getX());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
 else {
if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boText.setTop(loStart.getY());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boText.setTop(loEnd.getY() - boText.getHeight());
break;
default :
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
boText.setLeft(loStart.getX());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loEnd.getX() - boText.getWidth());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),TextRenderEvent.class);
tre.setBlockBounds(boText);
tre.setBlockAlignment(null);
tre.setLabel(la);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
getDeferredCache().addLabel(tre);
}
if (isInteractivityEnabled()) {
Trigger tg;
EList<Trigger> elTriggers=ml.getTriggers();
if (!elTriggers.isEmpty()) {
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),InteractionEvent.class);
iev.setCursor(ml.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,StructureSource.createMarkerLine(ml));
iev.addTrigger(tg);
}
Location[] loaHotspot=new Location[4];
if (iOrientation == Orientation.HORIZONTAL) {
loaHotspot[0]=goFactory.createLocation(loStart.getX() - IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[1]=goFactory.createLocation(loStart.getX() + IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[2]=goFactory.createLocation(loEnd.getX() + IConstants.LINE_EXPAND_SIZE,loEnd.getY());
loaHotspot[3]=goFactory.createLocation(loEnd.getX() - IConstants.LINE_EXPAND_SIZE,loEnd.getY());
}
 else {
loaHotspot[0]=goFactory.createLocation(loStart.getX(),loStart.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[1]=goFactory.createLocation(loEnd.getX(),loEnd.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[2]=goFactory.createLocation(loEnd.getX(),loEnd.getY() + IConstants.LINE_EXPAND_SIZE);
loaHotspot[3]=goFactory.createLocation(loStart.getX(),loStart.getY() + IConstants.LINE_EXPAND_SIZE);
}
final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
idr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_LINE,ml);
}
}
}",0.9099632176555252
66138,"public void paintControl(PaintEvent pev){
  final Display d=Display.getCurrent();
  final GC gcCanvas=pev.gc;
  final Rectangle rCA=getClientArea();
  final int iWidth=rCA.height / 2 - 8;
  final int iHeight=rCA.height - 16;
  if (imgBuffer == null) {
    imgBuffer=new Image(d,rCA.width,rCA.height);
    gcBuffer=new GC(imgBuffer);
  }
  gcBuffer.setBackground(clrBG);
  gcBuffer.setForeground(d.getSystemColor(SWT.COLOR_GRAY));
  gcBuffer.fillRectangle(rCA);
  p.x=10;
  p.y=iHeight / 2 + 8;
  double dRadians;
  int x, y;
  gcBuffer.setForeground(d.getSystemColor(SWT.COLOR_BLACK));
  gcBuffer.setBackground(d.getSystemColor(SWT.COLOR_RED));
  for (int i=-90; i <= 90; i+=15) {
    dRadians=Math.toRadians(i);
    x=(int)(p.x + iWidth * Math.cos(dRadians));
    y=(int)(p.y - iWidth * Math.sin(dRadians));
    if ((i % 45) == 0) {
      bigPoint(d,gcBuffer,x,y,i == iLastAngle);
    }
 else {
      smallPoint(d,gcBuffer,x,y,i == iLastAngle);
    }
  }
  iRadius=iWidth;
  drawHand(d,gcBuffer,p.x,p.y,iRadius - 10,iLastAngle,false);
  gcCanvas.drawImage(imgBuffer,0,0);
}","public void paintControl(PaintEvent pev){
  final Display d=Display.getCurrent();
  final GC gcCanvas=pev.gc;
  final Rectangle rCA=getClientArea();
  final int iWidth=rCA.height / 2 - 8;
  final int iHeight=rCA.height - 16;
  if (imgBuffer == null) {
    imgBuffer=new Image(d,rCA.width,rCA.height);
    gcBuffer=new GC(imgBuffer);
  }
  if (!this.isEnabled()) {
    gcBuffer.setBackground(d.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  }
 else {
    gcBuffer.setBackground(clrBG);
  }
  gcBuffer.setForeground(d.getSystemColor(SWT.COLOR_GRAY));
  gcBuffer.fillRectangle(rCA);
  p.x=10;
  p.y=iHeight / 2 + 8;
  double dRadians;
  int x, y;
  gcBuffer.setForeground(d.getSystemColor(SWT.COLOR_BLACK));
  gcBuffer.setBackground(d.getSystemColor(SWT.COLOR_RED));
  for (int i=-90; i <= 90; i+=15) {
    dRadians=Math.toRadians(i);
    x=(int)(p.x + iWidth * Math.cos(dRadians));
    y=(int)(p.y - iWidth * Math.sin(dRadians));
    if ((i % 45) == 0) {
      bigPoint(d,gcBuffer,x,y,i == iLastAngle);
    }
 else {
      smallPoint(d,gcBuffer,x,y,i == iLastAngle);
    }
  }
  iRadius=iWidth;
  drawHand(d,gcBuffer,p.x,p.y,iRadius - 10,iLastAngle,false);
  gcCanvas.drawImage(imgBuffer,0,0);
}",0.8051146384479718
66139,"private void selectAllToggleButtons(boolean selection){
  for (int i=0; i < listAlignmentButtons.size(); i++) {
    ((Button)listAlignmentButtons.get(i)).setSelection(selection);
  }
}","private void selectAllToggleButtons(boolean selection){
  for (int i=0; i < listAlignmentButtons.size(); i++) {
    listAlignmentButtons.get(i).setSelection(selection);
  }
}",0.9720670391061452
66140,"protected void disableAlignmentBtns(){
  for (int i=0; i < listAlignmentButtons.size(); i++) {
    ((Button)listAlignmentButtons.get(i)).setSelection(false);
    ((Button)listAlignmentButtons.get(i)).setEnabled(false);
  }
}","protected void disableAlignmentBtns(){
  for (int i=0; i < listAlignmentButtons.size(); i++) {
    listAlignmentButtons.get(i).setSelection(false);
    listAlignmentButtons.get(i).setEnabled(false);
  }
}",0.6822429906542056
66141,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (listAlignmentButtons.contains(oSource)) {
    if (!((Button)oSource).getSelection()) {
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
      updatePreview();
      return;
    }
    selectAllToggleButtons(false);
    ((Button)oSource).setSelection(true);
  }
 else   if (e.widget == btnAlignmentAuto) {
    if (btnAlignmentAuto.getSelection()) {
      disableAlignmentBtns();
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
    }
 else {
      for (int i=0; i < listAlignmentButtons.size(); i++) {
        ((Button)listAlignmentButtons.get(i)).setEnabled(true);
      }
    }
    return;
  }
 else   if (e.widget == btnAutoRotation) {
    if (btnAutoRotation.getSelection()) {
      iscRotation.setEnabled(false);
      ascRotation.setEnabled(false);
      fdCurrent.unsetRotation();
    }
 else {
      iscRotation.setEnabled(true);
      ascRotation.setEnabled(true);
    }
    return;
  }
  if (oSource.equals(btnBold)) {
    if (btnBold.getSelection()) {
      fdCurrent.setBold(btnBold.getSelection());
    }
 else {
      fdCurrent.unsetBold();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnItalic)) {
    if (btnItalic.getSelection()) {
      fdCurrent.setItalic(btnItalic.getSelection());
    }
 else {
      fdCurrent.unsetItalic();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnUnderline)) {
    if (btnUnderline.getSelection()) {
      fdCurrent.setUnderline(btnUnderline.getSelection());
    }
 else {
      fdCurrent.unsetUnderline();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnStrikethru)) {
    if (btnStrikethru.getSelection()) {
      fdCurrent.setStrikethrough(btnStrikethru.getSelection());
    }
 else {
      fdCurrent.unsetStrikethrough();
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontNames)) {
    if (cmbFontNames.getText().equals(ChartUIUtil.FONT_AUTO)) {
      fdCurrent.setName(null);
    }
 else {
      fdCurrent.setName(cmbFontNames.getText());
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontSizes)) {
    handleFontSize();
  }
 else   if (oSource.equals(this.btnATopLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (listAlignmentButtons.contains(oSource)) {
    if (!((Button)oSource).getSelection()) {
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
      updatePreview();
      return;
    }
    selectAllToggleButtons(false);
    ((Button)oSource).setSelection(true);
  }
 else   if (e.widget == btnAlignmentAuto) {
    if (btnAlignmentAuto.getSelection()) {
      disableAlignmentBtns();
      fdCurrent.getAlignment().unsetHorizontalAlignment();
      fdCurrent.getAlignment().unsetVerticalAlignment();
    }
 else {
      for (int i=0; i < listAlignmentButtons.size(); i++) {
        listAlignmentButtons.get(i).setEnabled(true);
      }
    }
    updatePreview();
  }
 else   if (e.widget == btnAutoRotation) {
    if (btnAutoRotation.getSelection()) {
      iscRotation.setEnabled(false);
      ascRotation.setEnabled(false);
      fdCurrent.unsetRotation();
    }
 else {
      iscRotation.setEnabled(true);
      ascRotation.setEnabled(true);
    }
    iscRotation.setValue(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.setAngle(ChartUIUtil.getFontRotation(fdCurrent));
    ascRotation.redraw();
    updatePreview();
  }
 else   if (oSource.equals(btnBold)) {
    if (btnBold.getSelection()) {
      fdCurrent.setBold(btnBold.getSelection());
    }
 else {
      fdCurrent.unsetBold();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnItalic)) {
    if (btnItalic.getSelection()) {
      fdCurrent.setItalic(btnItalic.getSelection());
    }
 else {
      fdCurrent.unsetItalic();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnUnderline)) {
    if (btnUnderline.getSelection()) {
      fdCurrent.setUnderline(btnUnderline.getSelection());
    }
 else {
      fdCurrent.unsetUnderline();
    }
    updatePreview();
  }
 else   if (oSource.equals(btnStrikethru)) {
    if (btnStrikethru.getSelection()) {
      fdCurrent.setStrikethrough(btnStrikethru.getSelection());
    }
 else {
      fdCurrent.unsetStrikethrough();
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontNames)) {
    if (cmbFontNames.getText().equals(ChartUIUtil.FONT_AUTO)) {
      fdCurrent.setName(null);
    }
 else {
      fdCurrent.setName(cmbFontNames.getText());
    }
    updatePreview();
  }
 else   if (oSource.equals(cmbFontSizes)) {
    handleFontSize();
  }
 else   if (oSource.equals(this.btnATopLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomLeft)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.LEFT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomCenter)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnATopRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.TOP_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnACenterRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    updatePreview();
  }
 else   if (oSource.equals(this.btnABottomRight)) {
    fdCurrent.getAlignment().setHorizontalAlignment(HorizontalAlignment.RIGHT_LITERAL);
    fdCurrent.getAlignment().setVerticalAlignment(VerticalAlignment.BOTTOM_LITERAL);
    updatePreview();
  }
}",0.972034083460782
66142,"public void widgetSelected(SelectionEvent event){
  if (event.widget == btnAuto) {
    if (btnAuto.getSelection()) {
      updateInsetsButtons(false);
      if (defaultInsets != null) {
        insets.unsetTop();
        insets.unsetBottom();
        insets.unsetLeft();
        insets.unsetRight();
        try {
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getTop());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getBottom());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getLeft());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getRight());
        }
 catch (        ChartException e) {
          ChartWizard.displayException(e);
        }
      }
    }
 else {
      updateInsetsButtons(true);
      insets.setTop(txtTop.getValue());
      insets.setLeft(txtLeft.getValue());
      insets.setRight(txtRight.getValue());
      insets.setBottom(txtBottom.getValue());
    }
  }
}","public void widgetSelected(SelectionEvent event){
  if (event.widget == btnAuto) {
    if (btnAuto.getSelection()) {
      updateInsetsButtons(false);
      if (defaultInsets != null) {
        insets.unsetTop();
        insets.unsetBottom();
        insets.unsetLeft();
        insets.unsetRight();
        try {
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getTop());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getBottom());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getLeft());
          ChartElementUtil.setDefaultValue(insets,""String_Node_Str"",defaultInsets.getRight());
        }
 catch (        ChartException e) {
          ChartWizard.displayException(e);
        }
      }
    }
 else {
      updateInsetsButtons(true);
      insets.setTop(txtTop.getValue());
      insets.setLeft(txtLeft.getValue());
      insets.setRight(txtRight.getValue());
      insets.setBottom(txtBottom.getValue());
    }
    updateInsetsData(insets);
  }
}",0.985632183908046
66143,"public void setLabel(org.eclipse.birt.chart.model.component.Label lbl,String sUnits){
  this.lblCurrent=lbl;
  this.sUnits=sUnits;
  this.fBackground=lblCurrent.getBackground();
  this.laCurrent=lblCurrent.getOutline();
  if (attributesContext.isVisibilityEnabled) {
    btnVisible.setSelectionState(lblCurrent.isSetVisible() ? (lblCurrent.isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    setVisibleState(ChartUIExtensionUtil.canEnableUI(btnVisible) && btnVisible.isEnabled());
  }
  if (attributesContext.isLabelEnabled) {
    this.txtLabel.setText(lbl.getCaption().getValue());
  }
  if (attributesContext.isInsetsEnabled) {
    this.insets=lblCurrent.getInsets();
    this.icInsets.setInsets(insets,this.sUnits);
  }
  if (attributesContext.isShadowEnabled) {
    this.cdShadow=lblCurrent.getShadowColor();
    this.fccShadow.setFill(cdShadow);
  }
  if (attributesContext.isFontEnabled) {
    this.fdCurrent=lblCurrent.getCaption().getFont();
    this.cdFont=lblCurrent.getCaption().getColor();
    this.fdcFont.setFontDefinition(fdCurrent);
    this.fdcFont.setFontColor(cdFont);
  }
  this.fccBackground.setFill(fBackground);
  this.liacOutline.setLineAttributes(laCurrent);
  redraw();
}","public void setLabel(org.eclipse.birt.chart.model.component.Label lbl,String sUnits){
  this.lblCurrent=lbl;
  this.sUnits=sUnits;
  this.fBackground=lblCurrent.getBackground();
  this.laCurrent=lblCurrent.getOutline();
  if (attributesContext.isVisibilityEnabled) {
    btnVisible.setSelectionState(lblCurrent.isSetVisible() ? (lblCurrent.isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    setVisibleState(ChartUIExtensionUtil.canEnableUI(btnVisible) && btnVisible.isEnabled());
  }
  if (attributesContext.isLabelEnabled) {
    this.txtLabel.setText(getLabelText(lbl));
  }
  if (attributesContext.isInsetsEnabled) {
    this.insets=lblCurrent.getInsets();
    this.icInsets.setInsets(insets,this.sUnits);
  }
  if (attributesContext.isShadowEnabled) {
    this.cdShadow=lblCurrent.getShadowColor();
    this.fccShadow.setFill(cdShadow);
  }
  if (attributesContext.isFontEnabled) {
    this.fdCurrent=lblCurrent.getCaption().getFont();
    this.cdFont=lblCurrent.getCaption().getColor();
    this.fdcFont.setFontDefinition(fdCurrent);
    this.fdcFont.setFontColor(cdFont);
  }
  this.fccBackground.setFill(fBackground);
  this.liacOutline.setLineAttributes(laCurrent);
  redraw();
}",0.9833465503568596
66144,"public void handleEvent(Event event){
  if (event.widget.equals(iscStartAngle)) {
    series.getDial().setStartAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(iscStopAngle)) {
    series.getDial().setStopAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(fcc)) {
    series.getDial().setFill((Fill)event.data);
  }
 else   if (event.widget == btnRadiusAuto) {
    ChartElementUtil.setEObjectAttribute(series.getDial(),""String_Node_Str"",txtRadius.getValue(),btnRadiusAuto.getSelection());
    txtRadius.setEnabled(!btnRadiusAuto.getSelection());
  }
 else   if (event.widget == btnStartAngleAuto) {
    ChartElementUtil.setEObjectAttribute(series.getDial(),""String_Node_Str"",(double)iscStartAngle.getValue(),btnStartAngleAuto.getSelection());
    iscStartAngle.setEnabled(!btnStartAngleAuto.getSelection());
  }
 else   if (event.widget == btnStopAngleAuto) {
    ChartElementUtil.setEObjectAttribute(series.getDial(),""String_Node_Str"",(double)iscStopAngle.getValue(),btnStopAngleAuto.getSelection());
    iscStopAngle.setEnabled(!btnStopAngleAuto.getSelection());
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(iscStartAngle)) {
    series.getDial().setStartAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(iscStopAngle)) {
    series.getDial().setStopAngle(((Integer)event.data).intValue());
  }
 else   if (event.widget.equals(fcc)) {
    series.getDial().setFill((Fill)event.data);
  }
 else   if (event.widget == btnRadiusAuto) {
    ChartElementUtil.setEObjectAttribute(series.getDial(),""String_Node_Str"",txtRadius.getValue(),btnRadiusAuto.getSelection());
    txtRadius.setEnabled(!btnRadiusAuto.getSelection());
    if (!series.getDial().isSetRadius()) {
      txtRadius.unsetValue();
    }
  }
 else   if (event.widget == btnStartAngleAuto) {
    ChartElementUtil.setEObjectAttribute(series.getDial(),""String_Node_Str"",(double)iscStartAngle.getValue(),btnStartAngleAuto.getSelection());
    iscStartAngle.setEnabled(!btnStartAngleAuto.getSelection());
    iscStartAngle.setValue((int)(series.getDial().getStartAngle()));
  }
 else   if (event.widget == btnStopAngleAuto) {
    ChartElementUtil.setEObjectAttribute(series.getDial(),""String_Node_Str"",(double)iscStopAngle.getValue(),btnStopAngleAuto.getSelection());
    iscStopAngle.setEnabled(!btnStopAngleAuto.getSelection());
    iscStopAngle.setValue((int)(series.getDial().getStopAngle()));
  }
}",0.9127080795777508
66145,"@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnCategoryAxis.setLayoutData(gd);
    btnCategoryAxis.setSelectionState(getAxisForProcessing().isSetCategoryAxis() ? (getAxisForProcessing().isCategoryAxis() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateCategoryAxisUI(!getAxisForProcessing().isSetType() || !AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    btnCategoryAxis.addSelectionListener(this);
    btnReverse=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnReverse.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    gd.horizontalSpan=2;
    btnReverse.setLayoutData(gd);
    btnReverse.setSelectionState(((ChartWithAxes)getChart()).isSetReverseCategory() ? (((ChartWithAxes)getChart()).isReverseCategory() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateReverseUI(ChartUIExtensionUtil.canEnableUI(btnCategoryAxis));
    btnReverse.addSelectionListener(this);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getTitleValue());
{
    GridData gd=new GridData();
    gd.widthHint=230;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleVisible.setSelectionState(getAxisForProcessing().getTitle().isSetVisible() ? (getAxisForProcessing().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnTitleVisible.addSelectionListener(this);
  btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
  btnTitleContentAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitleContentAuto.setSelection(getAxisForProcessing().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      gdBTNFormatSpecifier.horizontalSpan=2;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=3;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=1;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
      btnTxtValueAuto=new Button(cmpBasic,SWT.CHECK);
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnTxtValueAuto.setLayoutData(gd);
      btnTxtValueAuto.setText(ChartUIExtensionUtil.getAutoMessage());
      btnTxtValueAuto.setSelection(!bValueOrigin || getAxisForProcessing().getOrigin().getValue() == null);
      btnTxtValueAuto.setEnabled(bValueOrigin);
      txtValue.setEnabled(bValueOrigin && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.addSelectionListener(this);
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  cmpLabel.setLayoutData(gd);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  btnLabelVisible.setLayoutData(gd);
  btnLabelVisible.setSelectionState(getAxisForProcessing().getLabel().isSetVisible() ? (getAxisForProcessing().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  btnStaggered=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnStaggered.setText(Messages.getString(""String_Node_Str""));
{
    Axis ax=getAxisForProcessing();
    boolean bNot3D=!isChart3D();
    btnStaggered.setSelectionState(ax.isSetStaggered() ? ((ax.isStaggered() && bNot3D) ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStaggered.setEnabled(bNot3D);
    btnStaggered.addSelectionListener(this);
  }
  createLabelSpan(cmpBasic);
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnCategoryAxis.setLayoutData(gd);
    btnCategoryAxis.setSelectionState(getAxisForProcessing().isSetCategoryAxis() ? (getAxisForProcessing().isCategoryAxis() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateCategoryAxisUI(!getAxisForProcessing().isSetType() || !AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    btnCategoryAxis.addSelectionListener(this);
    btnReverse=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnReverse.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    gd.horizontalSpan=2;
    btnReverse.setLayoutData(gd);
    btnReverse.setSelectionState(((ChartWithAxes)getChart()).isSetReverseCategory() ? (((ChartWithAxes)getChart()).isReverseCategory() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateReverseUI(ChartUIExtensionUtil.canEnableUI(btnCategoryAxis));
    btnReverse.addSelectionListener(this);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getTitleValue());
{
    GridData gd=new GridData();
    gd.widthHint=230;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleVisible.setSelectionState(getAxisForProcessing().getTitle().isSetVisible() ? (getAxisForProcessing().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnTitleVisible.addSelectionListener(this);
  btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
  btnTitleContentAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitleContentAuto.setSelection(getAxisForProcessing().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      gdBTNFormatSpecifier.horizontalSpan=2;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=3;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (!getAxisForProcessing().getOrigin().isSetType() || (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL))) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=1;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
      btnTxtValueAuto=new Button(cmpBasic,SWT.CHECK);
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnTxtValueAuto.setLayoutData(gd);
      btnTxtValueAuto.setText(ChartUIExtensionUtil.getAutoMessage());
      btnTxtValueAuto.setSelection(getAxisForProcessing().getOrigin().getValue() == null);
      btnTxtValueAuto.setEnabled(bValueOrigin);
      txtValue.setEnabled(bValueOrigin && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.addSelectionListener(this);
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  cmpLabel.setLayoutData(gd);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  btnLabelVisible.setLayoutData(gd);
  btnLabelVisible.setSelectionState(getAxisForProcessing().getLabel().isSetVisible() ? (getAxisForProcessing().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  btnStaggered=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnStaggered.setText(Messages.getString(""String_Node_Str""));
{
    Axis ax=getAxisForProcessing();
    boolean bNot3D=!isChart3D();
    btnStaggered.setSelectionState(ax.isSetStaggered() ? ((ax.isStaggered() && bNot3D) ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStaggered.setEnabled(bNot3D);
    btnStaggered.addSelectionListener(this);
  }
  createLabelSpan(cmpBasic);
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9952593796559664
66146,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget == btnTxtValueAuto) {
    if (btnTxtValueAuto.getSelection()) {
      getAxisForProcessing().getOrigin().setValue(null);
      txtValue.setEnabled(false);
    }
 else {
      DataElement de=txtValue.getDataElement();
      getAxisForProcessing().getOrigin().setValue(de);
      txtValue.setEnabled(true);
    }
  }
 else   if (e.widget.equals(cmbTypes)) {
    final AxisType axisType=AxisType.getByName(LiteralHelper.axisTypeSet.getNameByDisplayName(cmbTypes.getText()));
    if (getAxisForProcessing().isSetType() && getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (cmbTypes.getSelectionIndex() == 0) {
      getAxisForProcessing().unsetType();
    }
 else {
      getAxisForProcessing().setType(axisType);
    }
    if (btnCategoryAxis != null) {
      boolean disableCategoryAxisUI=AxisType.TEXT_LITERAL.equals(axisType);
      getAxisForProcessing().setCategoryAxis(disableCategoryAxisUI);
      btnCategoryAxis.setSelectionState(TristateCheckbox.STATE_SELECTED);
      updateCategoryAxisUI(!disableCategoryAxisUI);
      updateReverseStateByCategoryAxisUI();
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    if (IntersectionType.VALUE_LITERAL.getName().equals(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText()))) {
      lblValue.setEnabled(true);
      boolean enabled=true && (getAxisForProcessing().getOrigin().getValue() != null);
      txtValue.setEnabled(enabled && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.setEnabled(true);
      getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
    }
 else {
      if (cmbOrigin.getSelectionIndex() == 0) {
        getAxisForProcessing().getOrigin().unsetType();
        getAxisForProcessing().getOrigin().setValue(null);
      }
 else {
        getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
      }
      lblValue.setEnabled(false);
      txtValue.setEnabled(false);
      btnTxtValueAuto.setEnabled(false);
    }
    if (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    int state=btnCategoryAxis.getSelectionState();
    if (state == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetCategoryAxis();
    }
 else {
      getAxisForProcessing().setCategoryAxis(state == TristateCheckbox.STATE_SELECTED);
    }
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),state == TristateCheckbox.STATE_SELECTED);
    refreshPopupSheet();
    updateReverseStateByCategoryAxisUI();
  }
 else   if (e.widget.equals(btnReverse)) {
    if (btnReverse.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      ((ChartWithAxes)getChart()).unsetReverseCategory();
    }
 else {
      ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleVisible) {
    if (btnTitleVisible.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getTitle().unsetVisible();
    }
 else {
      getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!(btnTitleVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED) && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget == btnLabelVisible) {
    if (btnLabelVisible.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getLabel().unsetVisible();
    }
 else {
      getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!(btnLabelVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED) && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    handleFormatBtnSelected();
  }
 else   if (e.widget == btnStaggered) {
    if (btnStaggered.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetStaggered();
    }
 else {
      getAxisForProcessing().setStaggered(btnStaggered.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleContentAuto) {
    if (btnTitleContentAuto.getSelection()) {
      getAxisForProcessing().getTitle().getCaption().setValue(null);
    }
 else {
      getAxisForProcessing().getTitle().getCaption().setValue(getDefaultAxisTitle());
    }
    setStateOfTitle();
    txtTitle.setText(getTitleValue());
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget == btnTxtValueAuto) {
    if (btnTxtValueAuto.getSelection()) {
      getAxisForProcessing().getOrigin().setValue(null);
      txtValue.setEnabled(false);
    }
 else {
      DataElement de=txtValue.getDataElement();
      getAxisForProcessing().getOrigin().setValue(de);
      txtValue.setEnabled(true);
    }
  }
 else   if (e.widget.equals(cmbTypes)) {
    final AxisType axisType=AxisType.getByName(LiteralHelper.axisTypeSet.getNameByDisplayName(cmbTypes.getText()));
    if (getAxisForProcessing().isSetType() && getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (cmbTypes.getSelectionIndex() == 0) {
      getAxisForProcessing().unsetType();
    }
 else {
      getAxisForProcessing().setType(axisType);
    }
    if (btnCategoryAxis != null) {
      boolean disableCategoryAxisUI=AxisType.TEXT_LITERAL.equals(axisType);
      getAxisForProcessing().setCategoryAxis(disableCategoryAxisUI);
      btnCategoryAxis.setSelectionState(TristateCheckbox.STATE_SELECTED);
      updateCategoryAxisUI(!disableCategoryAxisUI);
      updateReverseStateByCategoryAxisUI();
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    if (IntersectionType.VALUE_LITERAL.getName().equals(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText()))) {
      boolean enabled=true && (getAxisForProcessing().getOrigin().getValue() != null);
      btnTxtValueAuto.setEnabled(true);
      lblValue.setEnabled(true);
      txtValue.setEnabled(enabled && !btnTxtValueAuto.getSelection());
      getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
    }
 else {
      boolean enabled=false;
      if (cmbOrigin.getSelectionIndex() == 0) {
        getAxisForProcessing().getOrigin().unsetType();
        getAxisForProcessing().getOrigin().setValue(null);
        enabled=true;
      }
 else {
        getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
      }
      btnTxtValueAuto.setEnabled(enabled);
      lblValue.setEnabled(enabled);
      txtValue.setEnabled(enabled && !btnTxtValueAuto.getSelection());
    }
    if (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    int state=btnCategoryAxis.getSelectionState();
    if (state == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetCategoryAxis();
    }
 else {
      getAxisForProcessing().setCategoryAxis(state == TristateCheckbox.STATE_SELECTED);
    }
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),state == TristateCheckbox.STATE_SELECTED);
    refreshPopupSheet();
    updateReverseStateByCategoryAxisUI();
  }
 else   if (e.widget.equals(btnReverse)) {
    if (btnReverse.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      ((ChartWithAxes)getChart()).unsetReverseCategory();
    }
 else {
      ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleVisible) {
    if (btnTitleVisible.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getTitle().unsetVisible();
    }
 else {
      getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!(btnTitleVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED) && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget == btnLabelVisible) {
    if (btnLabelVisible.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().getLabel().unsetVisible();
    }
 else {
      getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!(btnLabelVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED) && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    handleFormatBtnSelected();
  }
 else   if (e.widget == btnStaggered) {
    if (btnStaggered.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getAxisForProcessing().unsetStaggered();
    }
 else {
      getAxisForProcessing().setStaggered(btnStaggered.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
  }
 else   if (e.widget == btnTitleContentAuto) {
    if (btnTitleContentAuto.getSelection()) {
      getAxisForProcessing().getTitle().getCaption().setValue(null);
    }
 else {
      getAxisForProcessing().getTitle().getCaption().setValue(getDefaultAxisTitle());
    }
    setStateOfTitle();
    txtTitle.setText(getTitleValue());
  }
}",0.9744929317762754
66147,"private void updateEmptyMessageUIStates(){
  boolean bEnabled=getChart().getEmptyMessage().isSetVisible() && getChart().getEmptyMessage().isVisible();
  txtEmptyMsg.setEnabled(bEnabled);
  fdcEmptyMsg.setEnabled(bEnabled);
  lbTxtEmptyMsg.setEnabled(bEnabled);
  lbFdcEmptyMsg.setEnabled(bEnabled);
}","private void updateEmptyMessageUIStates(){
  boolean bEnabled=!ChartUIExtensionUtil.isSetInvisible(getChart().getEmptyMessage());
  txtEmptyMsg.setEnabled(bEnabled);
  fdcEmptyMsg.setEnabled(bEnabled);
  lbTxtEmptyMsg.setEnabled(bEnabled);
  lbFdcEmptyMsg.setEnabled(bEnabled);
}",0.8739205526770294
66148,"/** 
 * Updates chart element Palette.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param axisIndex index of axis.
 * @param seriesDefIndex index of series definition.
 * @generated Don't change this method manually.
 */
public void updatePalette(String name,EObject eParentObj,Palette eObj,Palette eRefObj,Palette eDefObj,boolean eDefOverride,int axisIndex,int seriesDefIndex){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eObj.getName() == null) {
    if (eRefObj != null && eRefObj.getName() != null) {
      eObj.setName(eRefObj.getName());
    }
 else     if (eDefObj != null && eDefObj.getName() != null) {
      eObj.setName(eDefObj.getName());
    }
  }
  if (eObj.getEntries().size() > 0) {
    return;
  }
  if (eRefObj != null && eRefObj.getEntries().size() > 0) {
    Palette p=eRefObj.copyInstance();
    p.shift((axisIndex + seriesDefIndex) * -1);
    eObj.getEntries().addAll(p.getEntries());
  }
 else   if (eDefObj != null) {
    eObj.getEntries().addAll(ChartElementUtil.copyInstance(eDefObj.getEntries()));
  }
}","/** 
 * Updates chart element Palette.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @param eDefOverride indicates if using default object to override target object if target is null.
 * @param axisIndex index of axis.
 * @param seriesDefIndex index of series definition.
 * @generated Don't change this method manually.
 */
public void updatePalette(String name,EObject eParentObj,Palette eObj,Palette eRefObj,Palette eDefObj,boolean eDefOverride,int axisIndex,int seriesDefIndex){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefOverride && eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eObj.getName() == null) {
    if (eRefObj != null && eRefObj.getName() != null) {
      eObj.setName(eRefObj.getName());
    }
 else     if (eDefObj != null && eDefObj.getName() != null) {
      eObj.setName(eDefObj.getName());
    }
  }
  if (eObj.getEntries().size() > 0) {
    return;
  }
  if (eRefObj != null && eRefObj.getEntries().size() > 0) {
    Palette p=eRefObj.copyInstance();
    ChartDefaultValueUtil.shiftPaletteColors(p,(axisIndex + seriesDefIndex) * -1);
    eObj.getEntries().addAll(p.getEntries());
  }
 else   if (eDefObj != null) {
    eObj.getEntries().addAll(ChartElementUtil.copyInstance(eDefObj.getEntries()));
  }
}",0.9849277145493694
66149,"/** 
 * @param query
 * @param cubeHandle
 * @throws DataException
 * @throws AdapterException
 */
public static void validateTimeFunctionInCubeQuery(ICubeQueryDefinition query,CubeHandle cubeHandle) throws DataException, AdapterException {
  if (cubeHandle == null)   return;
  Map<String,IDimensionDefinition> dimensionMap=new HashMap<String,IDimensionDefinition>();
  IEdgeDefinition columnEdge=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  if (columnEdge != null) {
    List<IDimensionDefinition> dimensions=columnEdge.getDimensions();
    for (int i=0; i < dimensions.size(); i++) {
      dimensionMap.put(dimensions.get(i).getName(),dimensions.get(i));
    }
  }
  IEdgeDefinition rowEdge=query.getEdge(ICubeQueryDefinition.ROW_EDGE);
  if (rowEdge != null) {
    List<IDimensionDefinition> dimensions=rowEdge.getDimensions();
    for (int i=0; i < dimensions.size(); i++) {
      dimensionMap.put(dimensions.get(i).getName(),dimensions.get(i));
    }
  }
  IEdgeDefinition pageEdge=query.getEdge(ICubeQueryDefinition.PAGE_EDGE);
  if (pageEdge != null) {
    List<IDimensionDefinition> dimensions=pageEdge.getDimensions();
    for (int i=0; i < dimensions.size(); i++) {
      dimensionMap.put(dimensions.get(i).getName(),dimensions.get(i));
    }
  }
  List bindingList=query.getBindings();
  for (int i=0; i < bindingList.size(); i++) {
    IBinding binding=(IBinding)bindingList.get(i);
    if (binding.getTimeFunction() != null) {
      String dimensionName=binding.getTimeFunction().getTimeDimension();
      QueryValidator.validateTimeFunction(cubeHandle,binding.getTimeFunction());
      if (dimensionMap.containsKey(dimensionName)) {
        QueryValidator.validateTimeFunction(dimensionMap.get(dimensionName),cubeHandle,binding.getTimeFunction());
      }
    }
  }
}","/** 
 * @param query
 * @param cubeHandle
 * @throws DataException
 * @throws AdapterException
 */
public static void validateTimeFunctionInCubeQuery(ICubeQueryDefinition query,CubeHandle cubeHandle) throws DataException, AdapterException {
  if (cubeHandle == null)   return;
  Map<String,IDimensionDefinition> dimensionMap=new HashMap<String,IDimensionDefinition>();
  IEdgeDefinition columnEdge=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  if (columnEdge != null) {
    List<IDimensionDefinition> dimensions=columnEdge.getDimensions();
    for (int i=0; i < dimensions.size(); i++) {
      dimensionMap.put(dimensions.get(i).getName(),dimensions.get(i));
    }
  }
  IEdgeDefinition rowEdge=query.getEdge(ICubeQueryDefinition.ROW_EDGE);
  if (rowEdge != null) {
    List<IDimensionDefinition> dimensions=rowEdge.getDimensions();
    for (int i=0; i < dimensions.size(); i++) {
      dimensionMap.put(dimensions.get(i).getName(),dimensions.get(i));
    }
  }
  IEdgeDefinition pageEdge=query.getEdge(ICubeQueryDefinition.PAGE_EDGE);
  if (pageEdge != null) {
    List<IDimensionDefinition> dimensions=pageEdge.getDimensions();
    for (int i=0; i < dimensions.size(); i++) {
      dimensionMap.put(dimensions.get(i).getName(),dimensions.get(i));
    }
  }
  List bindingList=query.getBindings();
  for (int i=0; i < bindingList.size(); i++) {
    IBinding binding=(IBinding)bindingList.get(i);
    if (binding.getTimeFunction() != null) {
      String dimensionName=binding.getTimeFunction().getTimeDimension();
      QueryValidator.validateTimeFunction(cubeHandle,binding.getTimeFunction());
      if (dimensionMap.containsKey(dimensionName) && binding.getTimeFunction().getReferenceDate() == null) {
        QueryValidator.validateTimeFunction(dimensionMap.get(dimensionName),cubeHandle,binding.getTimeFunction());
      }
    }
  }
}",0.9845814977973568
66150,"public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnAddLine)) {
    MarkerLine line=MarkerLineImpl.createDefault(getAxisForProcessing(),createDefaultDataElement(),null);
    line.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iLineCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() == 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnAddRange)) {
    MarkerRange range=MarkerRangeImpl.createDefault(getAxisForProcessing(),createDefaultDataElement(),createDefaultDataElement(),null,null);
    range.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iRangeCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() == 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnRemove)) {
    if (lstMarkers.getSelection().length == 0) {
      return;
    }
    String sSelectedMarker=lstMarkers.getSelection()[0];
    boolean bLine=sSelectedMarker.startsWith(MARKER_LINE_LABEL);
    int iMarkerIndex=getMarkerIndex();
    if (bLine) {
      getAxisForProcessing().getMarkerLines().remove(iMarkerIndex);
      iLineCount--;
    }
 else {
      getAxisForProcessing().getMarkerRanges().remove(iMarkerIndex);
      iRangeCount--;
    }
    buildList();
    if (lstMarkers.getItemCount() > 0) {
      lstMarkers.select(0);
      updateUIForSelection();
    }
 else {
      setState(false);
      resetUI();
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(lstMarkers)) {
    updateUIForSelection();
    refreshButtons();
  }
 else   if (e.getSource().equals(cmbLineAnchor)) {
    if (cmbLineAnchor.getSelectionIndex() == 0) {
      getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).unsetLabelAnchor();
    }
 else {
      getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbLineAnchor.getText())),isFlippedAxes()));
    }
  }
 else   if (e.getSource().equals(cmbRangeAnchor)) {
    if (cmbRangeAnchor.getSelectionIndex() == 0) {
      getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).unsetLabelAnchor();
    }
 else {
      getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbRangeAnchor.getText())),isFlippedAxes()));
    }
  }
 else   if (e.getSource().equals(btnLineFormatSpecifier)) {
    handleMarkerLineFormatBtnSelected();
  }
 else   if (e.getSource().equals(btnStartFormatSpecifier) || e.getSource().equals(btnEndFormatSpecifier)) {
    handleMarkerRangeFormatBtnSelected();
  }
 else   if (e.widget.equals(btnLineTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERLINE,false,true).open();
  }
 else   if (e.widget.equals(btnRangeTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERRANGE,false,true).open();
  }
 else   if (e.widget == btnTxtValueAuto) {
    MarkerLine line=getAxisForProcessing().getMarkerLines().get(getMarkerIndex());
    ChartElementUtil.setEObjectAttribute(line,""String_Node_Str"",getNotNullDataElement(txtValue.getDataElement()),btnTxtValueAuto.getSelection());
    txtValue.setDataElement(line.getValue());
    txtValue.setEnabled(!btnTxtValueAuto.getSelection());
  }
 else   if (e.widget == btnTxtStartValueAuto) {
    MarkerRange range=getAxisForProcessing().getMarkerRanges().get(getMarkerIndex());
    ChartElementUtil.setEObjectAttribute(range,""String_Node_Str"",getNotNullDataElement(txtStartValue.getDataElement()),btnTxtStartValueAuto.getSelection());
    txtStartValue.setDataElement(range.getStartValue());
    txtStartValue.setEnabled(!btnTxtStartValueAuto.getSelection());
  }
 else   if (e.widget == btnTxtEndValueAuto) {
    MarkerRange range=getAxisForProcessing().getMarkerRanges().get(getMarkerIndex());
    ChartElementUtil.setEObjectAttribute(range,""String_Node_Str"",getNotNullDataElement(txtEndValue.getDataElement()),btnTxtEndValueAuto.getSelection());
    txtEndValue.setDataElement(range.getStartValue());
    txtEndValue.setEnabled(!btnTxtEndValueAuto.getSelection());
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnAddLine)) {
    MarkerLine line=MarkerLineImpl.createDefault(getAxisForProcessing(),createDefaultDataElement(),null);
    line.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iLineCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() >= 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnAddRange)) {
    MarkerRange range=MarkerRangeImpl.createDefault(getAxisForProcessing(),createDefaultDataElement(),createDefaultDataElement(),null,null);
    range.eAdapters().addAll(getAxisForProcessing().eAdapters());
    iRangeCount++;
    buildList();
    lstMarkers.select(lstMarkers.getItemCount() - 1);
    updateUIForSelection();
    if (lstMarkers.getItemCount() >= 1) {
      setState(true);
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(btnRemove)) {
    if (lstMarkers.getSelection().length == 0) {
      return;
    }
    String sSelectedMarker=lstMarkers.getSelection()[0];
    boolean bLine=sSelectedMarker.startsWith(MARKER_LINE_LABEL);
    int iMarkerIndex=getMarkerIndex();
    if (bLine) {
      getAxisForProcessing().getMarkerLines().remove(iMarkerIndex);
      iLineCount--;
    }
 else {
      getAxisForProcessing().getMarkerRanges().remove(iMarkerIndex);
      iRangeCount--;
    }
    buildList();
    if (lstMarkers.getItemCount() > 0) {
      lstMarkers.select(0);
      updateUIForSelection();
      setState(true);
    }
 else {
      setState(false);
      resetUI();
    }
    refreshButtons();
  }
 else   if (e.getSource().equals(lstMarkers)) {
    updateUIForSelection();
    setState(true);
    refreshButtons();
  }
 else   if (e.getSource().equals(cmbLineAnchor)) {
    if (cmbLineAnchor.getSelectionIndex() == 0) {
      getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).unsetLabelAnchor();
    }
 else {
      getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbLineAnchor.getText())),isFlippedAxes()));
    }
  }
 else   if (e.getSource().equals(cmbRangeAnchor)) {
    if (cmbRangeAnchor.getSelectionIndex() == 0) {
      getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).unsetLabelAnchor();
    }
 else {
      getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).setLabelAnchor(ChartUIUtil.getFlippedAnchor(Anchor.getByName(LiteralHelper.anchorSet.getNameByDisplayName(cmbRangeAnchor.getText())),isFlippedAxes()));
    }
  }
 else   if (e.getSource().equals(btnLineFormatSpecifier)) {
    handleMarkerLineFormatBtnSelected();
  }
 else   if (e.getSource().equals(btnStartFormatSpecifier) || e.getSource().equals(btnEndFormatSpecifier)) {
    handleMarkerRangeFormatBtnSelected();
  }
 else   if (e.widget.equals(btnLineTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerLines().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERLINE,false,true).open();
  }
 else   if (e.widget.equals(btnRangeTriggers)) {
    new TriggerEditorDialog(cmpContent.getShell(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()).getTriggers(),getAxisForProcessing().getMarkerRanges().get(getMarkerIndex()),getContext(),Messages.getString(""String_Node_Str""),TriggerSupportMatrix.TYPE_MARKERRANGE,false,true).open();
  }
 else   if (e.widget == btnTxtValueAuto) {
    MarkerLine line=getAxisForProcessing().getMarkerLines().get(getMarkerIndex());
    ChartElementUtil.setEObjectAttribute(line,""String_Node_Str"",getNotNullDataElement(txtValue.getDataElement()),btnTxtValueAuto.getSelection());
    txtValue.setDataElement(line.getValue());
    txtValue.setEnabled(!btnTxtValueAuto.getSelection());
  }
 else   if (e.widget == btnTxtStartValueAuto) {
    MarkerRange range=getAxisForProcessing().getMarkerRanges().get(getMarkerIndex());
    ChartElementUtil.setEObjectAttribute(range,""String_Node_Str"",getNotNullDataElement(txtStartValue.getDataElement()),btnTxtStartValueAuto.getSelection());
    txtStartValue.setDataElement(range.getStartValue());
    txtStartValue.setEnabled(!btnTxtStartValueAuto.getSelection());
  }
 else   if (e.widget == btnTxtEndValueAuto) {
    MarkerRange range=getAxisForProcessing().getMarkerRanges().get(getMarkerIndex());
    ChartElementUtil.setEObjectAttribute(range,""String_Node_Str"",getNotNullDataElement(txtEndValue.getDataElement()),btnTxtEndValueAuto.getSelection());
    txtEndValue.setDataElement(range.getStartValue());
    txtEndValue.setEnabled(!btnTxtEndValueAuto.getSelection());
  }
}",0.9952043369474562
66151,"private void populateLists(){
  buildList();
  NameSet ns=LiteralHelper.anchorSet;
  cmbLineAnchor.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  cmbLineAnchor.select(0);
  cmbRangeAnchor.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  cmbRangeAnchor.select(0);
  if (lstMarkers.getItemCount() > 0) {
    lstMarkers.select(0);
    updateUIForSelection();
  }
 else {
    setState(false);
  }
}","private void populateLists(){
  buildList();
  NameSet ns=LiteralHelper.anchorSet;
  cmbLineAnchor.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  cmbLineAnchor.select(0);
  cmbRangeAnchor.setItems(ChartUIExtensionUtil.getItemsWithAuto(ns.getDisplayNames()));
  cmbRangeAnchor.select(0);
  if (lstMarkers.getItemCount() > 0) {
    lstMarkers.select(0);
    updateUIForSelection();
    setState(true);
  }
 else {
    setState(false);
  }
}",0.9779735682819384
66152,"public IStructure createInstance(Object[] fields){
  Object[][] objectArrays=ObjectArrayUtil.convert(fields);
  Row4Aggregation result=new Row4Aggregation();
  int memberSize=(Integer)objectArrays[0][0];
  result.setLevelMembers(new Member[memberSize]);
  for (int i=0; i < result.getLevelMembers().length; i++) {
    result.getLevelMembers()[i]=(Member)levelMemberCreator.createInstance(objectArrays[i + 1]);
  }
  result.setMeasures(objectArrays[memberSize + 1]);
  for (int i=0; i < (objectArrays.length - memberSize - 1- 3); i++) {
    result.addMeasure(objectArrays[memberSize + 1 + i+ 1]);
  }
  result.setParameterValues(objectArrays[objectArrays.length - 2]);
  if (objectArrays[objectArrays.length - 1][0].equals(Integer.valueOf(1))) {
    int[] dimPos=new int[objectArrays[objectArrays.length - 1].length - 1];
    for (int i=0; i < dimPos.length; i++) {
      dimPos[i]=((Integer)(objectArrays[objectArrays.length - 1][i + 1])).intValue();
    }
    result.setDimPos(dimPos);
  }
  return result;
}","public IStructure createInstance(Object[] fields){
  Object[][] objectArrays=ObjectArrayUtil.convert(fields);
  Row4Aggregation result=new Row4Aggregation();
  int memberSize=(Integer)objectArrays[0][0];
  result.setLevelMembers(new Member[memberSize]);
  for (int i=0; i < result.getLevelMembers().length; i++) {
    result.getLevelMembers()[i]=(Member)levelMemberCreator.createInstance(objectArrays[i + 1]);
  }
  result.setParameterValues(objectArrays[memberSize + 1]);
  if (objectArrays[memberSize + 2][0].equals(Integer.valueOf(1))) {
    int[] dimPos=new int[objectArrays[memberSize + 2].length - 1];
    for (int i=0; i < dimPos.length; i++) {
      dimPos[i]=((Integer)(objectArrays[memberSize + 2][i + 1])).intValue();
    }
    result.setDimPos(dimPos);
  }
  result.setMeasures(objectArrays[memberSize + 3]);
  for (int i=0; i < (objectArrays.length - memberSize - 1- 3); i++) {
    result.addMeasure(objectArrays[memberSize + 3 + i+ 1]);
  }
  return result;
}",0.6024217961654894
66153,"public Object[] getFieldValues(){
  Integer[] memberSize=new Integer[1];
  memberSize[0]=Integer.valueOf(getLevelMembers().length);
  Object[][] objectArrays=new Object[getLevelMembers().length + 1 + 3+ measureList.size()][];
  objectArrays[0]=memberSize;
  for (int i=0; i < getLevelMembers().length; i++) {
    objectArrays[i + 1]=getLevelMembers()[i].getFieldValues();
  }
  objectArrays[getLevelMembers().length + 1]=measures;
  for (int i=0; i < measureList.size(); i++) {
    objectArrays[getLevelMembers().length + i + 2]=measureList.get(i);
  }
  objectArrays[objectArrays.length - 2]=parameterValues;
  Integer[] dimPosObj=null;
  if (dimPos == null) {
    dimPosObj=new Integer[1];
    dimPosObj[0]=Integer.valueOf(0);
  }
 else {
    dimPosObj=new Integer[dimPos.length + 1];
    dimPosObj[0]=Integer.valueOf(1);
    for (int i=0; i < dimPos.length; i++) {
      dimPosObj[i + 1]=Integer.valueOf(dimPos[i]);
    }
  }
  objectArrays[objectArrays.length - 1]=dimPosObj;
  return ObjectArrayUtil.convert(objectArrays);
}","public Object[] getFieldValues(){
  Integer[] memberSize=new Integer[1];
  memberSize[0]=Integer.valueOf(getLevelMembers().length);
  Object[][] objectArrays=new Object[getLevelMembers().length + 1 + 3+ measureList.size()][];
  objectArrays[0]=memberSize;
  for (int i=0; i < getLevelMembers().length; i++) {
    objectArrays[i + 1]=getLevelMembers()[i].getFieldValues();
  }
  objectArrays[getLevelMembers().length + 1]=parameterValues;
  Integer[] dimPosObj=null;
  if (dimPos == null) {
    dimPosObj=new Integer[1];
    dimPosObj[0]=Integer.valueOf(0);
  }
 else {
    dimPosObj=new Integer[dimPos.length + 1];
    dimPosObj[0]=Integer.valueOf(1);
    for (int i=0; i < dimPos.length; i++) {
      dimPosObj[i + 1]=Integer.valueOf(dimPos[i]);
    }
  }
  objectArrays[getLevelMembers().length + 2]=dimPosObj;
  objectArrays[getLevelMembers().length + 3]=measures;
  for (int i=0; i < measureList.size(); i++) {
    objectArrays[getLevelMembers().length + i + 4]=measureList.get(i);
  }
  return ObjectArrayUtil.convert(objectArrays);
}",0.5531914893617021
66154,"protected void writeObject(Object object) throws IOException {
  if (object == null) {
    randomAccessFile.writeShort(NULL_VALUE);
    return;
  }
  IStructure cachedObject=(IStructure)object;
  Object[] objects=cachedObject.getFieldValues();
  randomAccessFile.writeShort((short)objects.length);
  if (fieldWriters == null) {
    createReadersAndWriters(objects.length);
  }
  for (int i=0; i < objects.length; i++) {
    if (i >= fieldWriters.length) {
      fieldWriters[fieldWriters.length - 1].write(randomAccessFile,objects[i]);
    }
 else {
      fieldWriters[i].write(randomAccessFile,objects[i]);
    }
  }
}","protected void writeObject(Object object) throws IOException {
  if (object == null) {
    randomAccessFile.writeShort(NULL_VALUE);
    return;
  }
  IStructure cachedObject=(IStructure)object;
  Object[] objects=cachedObject.getFieldValues();
  randomAccessFile.writeShort((short)objects.length);
  if (fieldWriters == null || fieldWriters.length < objects.length) {
    createReadersAndWriters(objects.length);
  }
  for (int i=0; i < objects.length; i++) {
    if (i >= fieldWriters.length) {
      fieldWriters[fieldWriters.length - 1].write(randomAccessFile,objects[i]);
    }
 else {
      fieldWriters[i].write(randomAccessFile,objects[i]);
    }
  }
}",0.9687010954616588
66155,"/** 
 * Returns instance of <code>ChartStyleProcessorProxy</code>.
 * @return
 */
public ChartStyleProcessorProxy getStyleProcessorProxy(){
  return this.styleProcessorProxy;
}","/** 
 * Returns instance of <code>ChartStyleProcessorProxy</code>.
 * @return instance of ChartStyleProcessorProxy.
 */
public ChartStyleProcessorProxy getStyleProcessorProxy(){
  return this.styleProcessorProxy;
}",0.9025641025641026
66156,"/** 
 * Indicates if chart need to inherit basic styles from container.
 * @return
 */
public boolean needInheritingStyles(){
  return true;
}","/** 
 * Indicates if chart need to inherit basic styles from container.
 * @return true if it needs to inherit styles.
 */
public boolean needInheritingStyles(){
  return true;
}",0.8875
66157,"/** 
 * Returns format info of chart's category.
 * @return
 */
public FormatInfo getCategoryFormat(){
  return this.categoryFormat;
}","/** 
 * Returns format info of chart's category.
 * @return object of format info.
 */
public FormatInfo getCategoryFormat(){
  return this.categoryFormat;
}",0.9209621993127148
66158,"protected void refreshChart(String type,String subType){
  ChartAdapter.beginIgnoreNotifications();
  IChartType chartType=ChartUIUtil.getChartType(type);
  try {
    chartModel=chartType.getModel(subType,this.orientation,this.sDimension,this.chartModel);
    if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
      ChartWithAxes cwa=(ChartWithAxes)chartModel;
      cwa.getAxes().get(0).setCategoryAxis(true);
      if (cwa.isTransposed()) {
        cwa.setReverseCategory(true);
      }
    }
    ((ChartWizardContext)context).setModel(chartModel);
    ((ChartWizardContext)context).setChartType(chartType);
    updateAdapters();
    ChartWizard.removeException(ChartWizard.TaskSelType_refreCh_ID);
  }
 catch (  Exception e) {
    ChartWizard.showException(ChartWizard.TaskSelType_refreCh_ID,e.getLocalizedMessage());
  }
  ChartAdapter.endIgnoreNotifications();
  updateSelection();
  ((ChartWizardContext)context).setModel(chartModel);
  ((ChartWizardContext)context).setChartType(chartType);
  setContext(context);
}","protected void refreshChart(String type,String subType){
  ChartAdapter.beginIgnoreNotifications();
  IChartType chartType=ChartUIUtil.getChartType(type);
  try {
    chartModel=chartType.getModel(subType,this.orientation,this.sDimension,this.chartModel);
    if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
      ChartWithAxes cwa=(ChartWithAxes)chartModel;
      cwa.getAxes().get(0).setCategoryAxis(true);
      if (cwa.isTransposed()) {
        cwa.setReverseCategory(true);
      }
    }
    updateAdapters();
    ChartWizard.removeException(ChartWizard.TaskSelType_refreCh_ID);
  }
 catch (  Exception e) {
    ChartWizard.showException(ChartWizard.TaskSelType_refreCh_ID,e.getLocalizedMessage());
  }
  ChartAdapter.endIgnoreNotifications();
  updateSelection();
  ((ChartWizardContext)context).setModel(chartModel);
  ((ChartWizardContext)context).setChartType(chartType);
  setContext(context);
}",0.9419485108531044
66159,"/** 
 * Creates a UI to process format specifier.
 * @param shellParent
 * @param title
 * @param axisType
 * @param formatspecifier
 * @param target
 * @param attrName
 * @param context
 * @return
 */
FormatSpecifier handleFormatSpecifier(Shell shellParent,String title,AxisType[] axisTypes,FormatSpecifier formatspecifier,EObject target,String attrName,ChartWizardContext context);","/** 
 * Creates a UI to process format specifier.
 * @param shellParent
 * @param title
 * @param axisType
 * @param formatspecifier
 * @param target
 * @param attrName
 * @param context
 * @return instance of format specifier
 */
FormatSpecifier handleFormatSpecifier(Shell shellParent,String title,AxisType[] axisTypes,FormatSpecifier formatspecifier,EObject target,String attrName,ChartWizardContext context);",0.9635220125786164
66160,"@Override public void fillArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Shape outerArc, innerArc;
      if (are.getOuterRadius() > 0) {
        outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
 else {
        outerArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
      innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Shape outerArc, innerArc;
      if (are.getOuterRadius() > 0) {
        outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
 else {
        outerArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
      innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    Area ar=null;
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Shape outerArc, innerArc;
      if (are.getOuterRadius() > 0) {
        outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
 else {
        outerArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
      innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      ar=fArea;
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      ar=ar2;
    }
    if (flBackground instanceof PatternImage) {
      fillWithPatternImage(new Area(ar),flBackground);
      return;
    }
    _g2d.setClip(ar);
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}","@Override public void fillArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Bounds rctOuter=getOuterRectangle(are);
      Bounds rctInner=getInnerRectangle(are);
      Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Bounds rctOuter=getOuterRectangle(are);
      Bounds rctInner=getInnerRectangle(are);
      Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    Area ar=null;
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Bounds rctOuter=getOuterRectangle(are);
      Bounds rctInner=getInnerRectangle(are);
      Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      ar=fArea;
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      ar=ar2;
    }
    if (flBackground instanceof PatternImage) {
      fillWithPatternImage(new Area(ar),flBackground);
      return;
    }
    _g2d.setClip(ar);
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}",0.7043349885921353
66161,"/** 
 * In SWING, polygons are defined with 'int' co-ordinates. There is no concept of a Polygon2D. As a result, we downgrade high-res 'double' co-ordinates to 'int' co-ordinates.
 * @param la
 * @return
 */
public static final int[][] getCoordinatesAsInts(Location[] la){
  final int n=la.length;
  final int[] iaX=new int[n];
  final int[] iaY=new int[n];
  for (int i=0; i < n; i++) {
    iaX[i]=(int)la[i].getX();
    iaY[i]=(int)la[i].getY();
  }
  return new int[][]{iaX,iaY};
}","/** 
 * In SWING, polygons are defined with 'int' co-ordinates. There is no concept of a Polygon2D. As a result, we downgrade high-res 'double' co-ordinates to 'int' co-ordinates.
 * @param la
 * @return array of coordinates
 */
public static final int[][] getCoordinatesAsInts(Location[] la){
  final int n=la.length;
  final int[] iaX=new int[n];
  final int[] iaY=new int[n];
  for (int i=0; i < n; i++) {
    iaX[i]=(int)la[i].getX();
    iaY[i]=(int)la[i].getY();
  }
  return new int[][]{iaX,iaY};
}",0.9787664307381192
66162,"@Override public void drawArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
    Bounds rctOuter, rctInner;
    if (are.getOuterRadius() > 0) {
      rctOuter=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius());
    }
 else {
      rctOuter=BoundsImpl.create(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight());
    }
    rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius());
    Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.OPEN);
    Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle() + are.getAngleExtent(),-are.getAngleExtent(),Arc2D.OPEN);
    double startAngle=Math.toRadians(-are.getStartAngle());
    double stopAngle=Math.toRadians(-are.getStartAngle() - are.getAngleExtent());
    double xsOuter=(rctOuter.getLeft() + (Math.cos(startAngle) * 0.5 + 0.5) * rctOuter.getWidth());
    double ysOuter=(rctOuter.getTop() + (Math.sin(startAngle) * 0.5 + 0.5) * rctOuter.getHeight());
    double xeInner=(rctInner.getLeft() + (Math.cos(stopAngle) * 0.5 + 0.5) * rctInner.getWidth());
    double yeInner=(rctInner.getTop() + (Math.sin(stopAngle) * 0.5 + 0.5) * rctInner.getHeight());
    GeneralPath gp=new GeneralPath();
    gp.append(outerArc,false);
    gp.lineTo((float)xeInner,(float)yeInner);
    gp.append(innerArc,false);
    gp.lineTo((float)xsOuter,(float)ysOuter);
    Area area=new Area(gp);
    Shape prevClip=_g2d.getClip();
    Area ar2=new Area(area);
    if (prevClip != null) {
      Area ar1=new Area(prevClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    _g2d.draw(area);
    _g2d.setClip(prevClip);
  }
 else {
    _g2d.draw(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
  }
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","@Override public void drawArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
    Bounds rctOuter=getOuterRectangle(are);
    Bounds rctInner=getInnerRectangle(are);
    Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.OPEN);
    Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle() + are.getAngleExtent(),-are.getAngleExtent(),Arc2D.OPEN);
    double startAngle=Math.toRadians(-are.getStartAngle());
    double stopAngle=Math.toRadians(-are.getStartAngle() - are.getAngleExtent());
    double xsOuter=(rctOuter.getLeft() + (Math.cos(startAngle) * 0.5 + 0.5) * rctOuter.getWidth());
    double ysOuter=(rctOuter.getTop() + (Math.sin(startAngle) * 0.5 + 0.5) * rctOuter.getHeight());
    double xeInner=(rctInner.getLeft() + (Math.cos(stopAngle) * 0.5 + 0.5) * rctInner.getWidth());
    double yeInner=(rctInner.getTop() + (Math.sin(stopAngle) * 0.5 + 0.5) * rctInner.getHeight());
    GeneralPath gp=new GeneralPath();
    gp.append(outerArc,false);
    gp.lineTo((float)xeInner,(float)yeInner);
    gp.append(innerArc,false);
    gp.lineTo((float)xsOuter,(float)ysOuter);
    Area area=new Area(gp);
    Shape prevClip=_g2d.getClip();
    Area ar2=new Area(area);
    if (prevClip != null) {
      Area ar1=new Area(prevClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    _g2d.draw(area);
    _g2d.setClip(prevClip);
  }
 else {
    _g2d.draw(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
  }
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.8738755278134753
66163,"public static ColumnsInfo createTable(ITableContent table,int width,int dpi,boolean autoExtend){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if ((leftWidth > 0 || !autoExtend && leftWidth < 0) && unassignedCount == 0 && table.getWidth() != null) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else       if (!autoExtend) {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width,int dpi,boolean autoExtend){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if ((leftWidth > 0 || !autoExtend && leftWidth < 0) && unassignedCount == 0 && table.getWidth() != null) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else       if (!autoExtend) {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
        totalResized+=columns[i];
      }
    }
    if (!autoExtend) {
      columns[lastAssignedIndex]+=tableWidth - totalResized;
    }
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.9730630380449876
66164,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    btnVisible=new TristateCheckbox(cmpGeneral,SWT.NONE);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    btnVisible.setLayoutData(gdCBVisible);
    btnVisible.setSelectionState(lblCurrent.isSetVisible() ? (lblCurrent.isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=ChartUIExtensionUtil.canEnableUI(btnVisible);
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,iFillOption,wizardContext,fBackground);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  int optionalStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,optionalStyles,wizardContext,laCurrent);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
    if (defLabel != null) {
      icInsets.setDefaultInsetsValue(defLabel.getInsets());
    }
  }
  populateLists();
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && !ChartUIExtensionUtil.isSetInvisible(lblCurrent);
  if (attributesContext.isVisibilityEnabled) {
    btnVisible=new TristateCheckbox(cmpGeneral,SWT.NONE);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    btnVisible.setLayoutData(gdCBVisible);
    btnVisible.setSelectionState(lblCurrent.isSetVisible() ? (lblCurrent.isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=ChartUIExtensionUtil.canEnableUI(btnVisible);
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,iFillOption,wizardContext,fBackground);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  int optionalStyles=LineAttributesComposite.ENABLE_STYLES | LineAttributesComposite.ENABLE_VISIBILITY | LineAttributesComposite.ENABLE_WIDTH| LineAttributesComposite.ENABLE_COLOR| LineAttributesComposite.ENABLE_AUTO_COLOR;
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,optionalStyles,wizardContext,laCurrent);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
    if (defLabel != null) {
      icInsets.setDefaultInsetsValue(defLabel.getInsets());
    }
  }
  populateLists();
}",0.9939175875953054
66165,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=!ChartUIExtensionUtil.isSetInvisible(axis.getTitle());
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().isSetTitlePosition() ? getAxisForProcessing().getTitlePosition() : null,getAxisForProcessing().getTitle(),getChart().getUnits());
    lacTitle.setDefaultLabelValue(DefaultValueProvider.defAncillaryAxis().getTitle());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=!ChartUIExtensionUtil.isSetInvisible(axis.getTitle());
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().isSetTitlePosition() ? getAxisForProcessing().getTitlePosition() : null,getAxisForProcessing().getTitle(),getChart().getUnits(),getPositionScope());
    if (axisType == AngleType.X) {
      lacTitle.setDefaultLabelValue(DefaultValueProvider.defBaseAxis().getTitle());
    }
 else {
      lacTitle.setDefaultLabelValue(DefaultValueProvider.defOrthogonalAxis().getTitle());
    }
  }
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_TEXT_FORMAT);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  if (axisType == AngleType.Z) {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isPositionEnabled=false;
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().isSetTitlePosition() ? getAxisForProcessing().getTitlePosition() : null,getAxisForProcessing().getTitle(),getChart().getUnits());
    lacTitle.setDefaultLabelValue(DefaultValueProvider.defAncillaryAxis().getTitle());
  }
 else {
    LabelAttributesContext attributesContext=new LabelAttributesContext();
    attributesContext.isVisibilityEnabled=false;
    lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getAxisForProcessing().isSetTitlePosition() ? getAxisForProcessing().getTitlePosition() : null,getAxisForProcessing().getTitle(),getChart().getUnits(),getPositionScope());
    if (axisType == AngleType.X) {
      lacTitle.setDefaultLabelValue(DefaultValueProvider.defBaseAxis().getTitle());
    }
 else {
      lacTitle.setDefaultLabelValue(DefaultValueProvider.defOrthogonalAxis().getTitle());
    }
  }
  GridData gdLACTitle=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
  lacTitle.setLayoutData(gdLACTitle);
  lacTitle.addListener(this);
  return cmpContent;
}",0.9674705552439709
66166,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_TITLE);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isVisibilityEnabled=!ChartUIExtensionUtil.isSetInvisible(getChart().getTitle());
  attributesContext.isFontAlignmentEnabled=false;
  lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getLegend().isSetTitlePosition() ? getLegend().getTitlePosition() : null,getLegend().getTitle(),getChart().getUnits(),LabelAttributesComposite.ALLOW_VERTICAL_POSITION | LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION);
{
    GridData gdLACTitle=new GridData(GridData.FILL_BOTH);
    gdLACTitle.verticalSpan=2;
    lacTitle.setLayoutData(gdLACTitle);
    lacTitle.addListener(this);
    lacTitle.setEnabled(!ChartUIExtensionUtil.isSetInvisible(getLegend().getTitle()));
    lacTitle.setDefaultLabelValue(DefaultValueProvider.defLegend().getTitle());
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_TITLE);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  LabelAttributesContext attributesContext=new LabelAttributesContext();
  attributesContext.isVisibilityEnabled=false;
  attributesContext.isFontAlignmentEnabled=false;
  lacTitle=new LabelAttributesComposite(cmpContent,SWT.NONE,getContext(),attributesContext,Messages.getString(""String_Node_Str""),getLegend().isSetTitlePosition() ? getLegend().getTitlePosition() : null,getLegend().getTitle(),getChart().getUnits(),LabelAttributesComposite.ALLOW_VERTICAL_POSITION | LabelAttributesComposite.ALLOW_HORIZONTAL_POSITION);
{
    GridData gdLACTitle=new GridData(GridData.FILL_BOTH);
    gdLACTitle.verticalSpan=2;
    lacTitle.setLayoutData(gdLACTitle);
    lacTitle.addListener(this);
    lacTitle.setEnabled(!ChartUIExtensionUtil.isSetInvisible(getLegend().getTitle()));
    lacTitle.setDefaultLabelValue(DefaultValueProvider.defLegend().getTitle());
  }
  return cmpContent;
}",0.9747434885556432
66167,"/** 
 * @throws IOException
 * @throws DataException 
 */
private void populateEdge() throws IOException, DataException {
  int count=0;
  if (cubeView.getColumnEdgeView() != null) {
    if (cubeView.getAppContext() != null) {
      int limitSize=populateFetchLimitSize(cubeView.getAppContext().get(DataEngine.CUBECURSOR_FETCH_LIMIT_ON_COLUMN_EDGE));
      if (limitSize > 0 && limitSize < rsArray[count].length()) {
        throw new DataException(ResourceConstants.RESULT_LENGTH_EXCEED_COLUMN_LIMIT,new Object[]{limitSize});
      }
    }
    this.columnEdgeAxis=new EdgeAxis(rsArray[count],cubeView.getColumnEdgeView(),cubeQueryExecutorHelper.getColumnSort(),false);
    cubeView.getColumnEdgeView().setEdgeAxis(this.columnEdgeAxis);
    count++;
  }
  if (cubeView.getRowEdgeView() != null) {
    if (cubeView.getAppContext() != null) {
      int limitSize=populateFetchLimitSize(cubeView.getAppContext().get(DataEngine.CUBECUSROR_FETCH_LIMIT_ON_ROW_EDGE));
      if (limitSize > 0 && limitSize < rsArray[count].length()) {
        throw new DataException(ResourceConstants.RESULT_LENGTH_EXCEED_ROW_LIMIT,new Object[]{limitSize});
      }
    }
    this.rowEdgeAxis=new EdgeAxis(rsArray[count],cubeView.getRowEdgeView(),cubeQueryExecutorHelper.getRowSort(),false);
    cubeView.getRowEdgeView().setEdgeAxis(this.rowEdgeAxis);
    count++;
  }
  if (cubeView.getPageEdgeView() != null) {
    this.pageEdgeAxis=new EdgeAxis(rsArray[count],cubeView.getPageEdgeView(),cubeQueryExecutorHelper.getPageSort(),false);
    cubeView.getPageEdgeView().setEdgeAxis(this.pageEdgeAxis);
    count++;
  }
  if (rsArray.length > count) {
    calculatedEdgeAxis=new EdgeAxis[rsArray.length - count];
    for (int i=count; i < rsArray.length; i++) {
      calculatedEdgeAxis[i - count]=new EdgeAxis(rsArray[i],cubeView.getMeasureEdgeView()[i - count],true);
    }
  }
}","/** 
 * @throws IOException
 * @throws DataException 
 */
private void populateEdge() throws IOException, DataException {
  int count=0;
  if (cubeView.getColumnEdgeView() != null) {
    this.columnEdgeAxis=new EdgeAxis(rsArray[count],cubeView.getColumnEdgeView(),cubeQueryExecutorHelper.getColumnSort(),false);
    cubeView.getColumnEdgeView().setEdgeAxis(this.columnEdgeAxis);
    count++;
  }
  if (cubeView.getRowEdgeView() != null) {
    this.rowEdgeAxis=new EdgeAxis(rsArray[count],cubeView.getRowEdgeView(),cubeQueryExecutorHelper.getRowSort(),false);
    cubeView.getRowEdgeView().setEdgeAxis(this.rowEdgeAxis);
    count++;
  }
  if (cubeView.getPageEdgeView() != null) {
    this.pageEdgeAxis=new EdgeAxis(rsArray[count],cubeView.getPageEdgeView(),cubeQueryExecutorHelper.getPageSort(),false);
    cubeView.getPageEdgeView().setEdgeAxis(this.pageEdgeAxis);
    count++;
  }
  if (rsArray.length > count) {
    calculatedEdgeAxis=new EdgeAxis[rsArray.length - count];
    for (int i=count; i < rsArray.length; i++) {
      calculatedEdgeAxis[i - count]=new EdgeAxis(rsArray[i],cubeView.getMeasureEdgeView()[i - count],true);
    }
  }
}",0.31
66168,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    validateLimitSetting(view,rs);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9966029311850916
66169,"private IAggregationResultSet[] executeQuery(BirtCubeView view,AggregationDefinition[] aggrDefns,boolean saveToRD,String queryResutID) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  if (executor.getCubeQueryDefinition().cacheQueryResults()) {
    File tmpDir=new File(executor.getSession().getTempDir());
    if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
      FileSecurity.fileMakeDirs(tmpDir);
    }
    ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
    AggregationResultSetSaveUtil.save(queryResutID,rs,writer);
    writer.finish();
  }
  if (saveToRD) {
    CubeQueryDefinitionIOUtil.save(queryResutID,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
    AggregationResultSetSaveUtil.save(queryResutID,rs,executor.getContext().getDocWriter());
  }
  return rs;
}","private IAggregationResultSet[] executeQuery(BirtCubeView view,AggregationDefinition[] aggrDefns,boolean saveToRD,String queryResutID) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  validateLimitSetting(view,rs);
  if (executor.getCubeQueryDefinition().cacheQueryResults()) {
    File tmpDir=new File(executor.getSession().getTempDir());
    if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
      FileSecurity.fileMakeDirs(tmpDir);
    }
    ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
    AggregationResultSetSaveUtil.save(queryResutID,rs,writer);
    writer.finish();
  }
  if (saveToRD) {
    CubeQueryDefinitionIOUtil.save(queryResutID,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
    AggregationResultSetSaveUtil.save(queryResutID,rs,executor.getContext().getDocWriter());
  }
  return rs;
}",0.9862671660424468
66170,"public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartCubeUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  ReportDataServiceProvider dataProvider=null;
  ChartLivePreviewThread livePreviewThread=null;
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemConstants.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    this.wizardContext=context;
    livePreviewThread=new ChartLivePreviewThread(dataProvider);
    livePreviewThread.start();
    context.setLivePreviewThread(livePreviewThread);
    context.setUIFactory(uiFactory);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
    }
    addCustomButtons(chartBuilder,context,commandStack,TRANS_NAME,applyData);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemConstants.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      if (!chartBuilder.isOkPressed()) {
        return Window.CANCEL;
      }
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
    if (livePreviewThread != null) {
      livePreviewThread.end();
    }
    ChartWizard.clearExceptions();
  }
}","public int open(final ExtendedItemHandle eih){
  if (iInstanceCount > 0) {
    return Window.CANCEL;
  }
  iInstanceCount++;
  if (ChartCubeUtil.isAxisChart(eih)) {
    DesignElementHandle hostChart=eih.getElementProperty(ChartReportItemConstants.PROPERTY_HOST_CHART);
    this.extendedHandle=(ExtendedItemHandle)hostChart;
  }
 else {
    this.extendedHandle=eih;
  }
  ReportDataServiceProvider dataProvider=null;
  ChartLivePreviewThread livePreviewThread=null;
  try {
    IReportItem item=null;
    try {
      item=extendedHandle.getReportItem();
      if (item == null) {
        extendedHandle.loadExtendedElement();
        item=extendedHandle.getReportItem();
      }
    }
 catch (    ExtendedElementException exception) {
      logger.log(exception);
    }
    if (item == null) {
      logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
      return Window.CANCEL;
    }
    final CommandStack commandStack=extendedHandle.getRoot().getCommandStack();
    final String TRANS_NAME=org.eclipse.birt.chart.reportitem.i18n.Messages.getString(""String_Node_Str"");
    commandStack.startTrans(TRANS_NAME);
    final ChartReportItemImpl crii=((ChartReportItemImpl)item);
    final Chart cm=(Chart)crii.getProperty(ChartReportItemConstants.PROPERTY_CHART);
    final Chart cmClone=(cm == null) ? null : cm.copyInstance();
    if (cmClone != null) {
      maintainCompatibility(cmClone);
    }
    final Object[] applyData=new Object[3];
    Shell parentShell=null;
    if (PlatformUI.isWorkbenchRunning()) {
      parentShell=PlatformUI.getWorkbench().getDisplay().getActiveShell();
    }
    final ChartWizard chartBuilder=new ChartWizard(parentShell);
    dataProvider=new ReportDataServiceProvider(extendedHandle);
    ChartReportItemUIFactory uiFactory=ChartReportItemUIFactory.instance();
    IChartDataSheet dataSheet=uiFactory.createDataSheet(extendedHandle,dataProvider);
    final ChartWizardContext context=uiFactory.createWizardContext(cmClone,this,dataProvider,dataSheet);
    this.wizardContext=context;
    livePreviewThread=new ChartLivePreviewThread(dataProvider);
    livePreviewThread.start();
    context.setLivePreviewThread(livePreviewThread);
    context.setUIFactory(uiFactory);
    dataProvider.setWizardContext(context);
    if (dataProvider.checkState(IDataServiceProvider.PART_CHART)) {
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_X,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Y,false);
      context.setEnabled(ChartUIConstants.SUBTASK_AXIS_Z,false);
      context.setEnabled(ChartUIConstants.SUBTASK_LEGEND,false);
      context.setEnabled(ChartUIConstants.SUBTASK_TITLE,false);
    }
    addCustomButtons(chartBuilder,context,commandStack,TRANS_NAME,applyData);
    context.setRtL(crii.isLayoutDirectionRTL());
    context.setTextRtL(extendedHandle.isDirectionRTL());
    context.setResourceFinder(crii);
    context.setExternalizer(crii);
    Object of=extendedHandle.getProperty(ChartReportItemConstants.PROPERTY_OUTPUT);
    if (of instanceof String) {
      if (of.equals(""String_Node_Str"")) {
        context.setOutputFormat(""String_Node_Str"");
      }
 else {
        context.setOutputFormat((String)of);
      }
    }
    context.setInheritColumnsOnly(extendedHandle.getBooleanProperty(ChartReportItemConstants.PROPERTY_INHERIT_COLUMNS));
    context.setExtendedItem(extendedHandle);
    context.setProcessor(new ChartReportStyleProcessor(extendedHandle,false));
    ChartAdapter.beginIgnoreNotifications();
    if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      dataProvider.update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
    }
    ChartWizard.clearExceptions();
    context.setActionEvaluator(new BIRTActionEvaluator());
    ChartAdapter.endIgnoreNotifications();
    isChartWizardOpen=true;
    ChartWizardContext contextResult=(ChartWizardContext)chartBuilder.open(null,taskId,context);
    isChartWizardOpen=false;
    if (contextResult != null && contextResult.getModel() != null) {
      if (!chartBuilder.isOkPressed()) {
        commandStack.rollback();
        return Window.CANCEL;
      }
      updateModel(extendedHandle,chartBuilder,crii,cm,contextResult.getModel(),contextResult.getOutputFormat(),contextResult.isInheritColumnsOnly());
      if (dataProvider.isPartChart()) {
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)contextResult.getModel());
      }
      commandStack.commit();
      return Window.OK;
    }
 else     if (applyData[0] != null) {
      commandStack.rollback();
      updateModel(extendedHandle,chartBuilder,crii,cm,(Chart)applyData[0],(String)applyData[1],(Boolean)applyData[2]);
      if (dataProvider.isPartChart()) {
        commandStack.startTrans(TRANS_NAME);
        ChartXTabUIUtil.updateXTabForAxis(ChartCubeUtil.getXtabContainerCell(extendedHandle),extendedHandle,ChartXTabUIUtil.isTransposedChartWithAxes(cm),(ChartWithAxes)applyData[0]);
        commandStack.commit();
      }
      return Window.OK;
    }
    commandStack.rollback();
    return Window.CANCEL;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    iInstanceCount--;
    this.extendedHandle=null;
    isChartWizardOpen=false;
    if (livePreviewThread != null) {
      livePreviewThread.end();
    }
    ChartWizard.clearExceptions();
  }
}",0.9969849246231156
66171,"/** 
 * NOTE: Manually written
 * @param iRed
 * @param iGreen
 * @param iBlue
 * @return
 */
public static final ColorDefinition create(int iRed,int iGreen,int iBlue){
  final ColorDefinition cd=AttributeFactory.eINSTANCE.createColorDefinition();
  cd.set(iRed,iGreen,iBlue);
  return cd;
}","/** 
 * NOTE: Manually written
 * @param iRed
 * @param iGreen
 * @param iBlue
 * @return color definition instance with setting 'isSet' flag.
 */
public static final ColorDefinition create(int iRed,int iGreen,int iBlue){
  final ColorDefinition cd=AttributeFactory.eINSTANCE.createColorDefinition();
  cd.set(iRed,iGreen,iBlue);
  return cd;
}",0.9165354330708662
66172,"/** 
 * @param loc
 * @return
 */
public static double[] getYArray(Location3D[] loc){
  double[] ya=new double[loc.length];
  for (int i=0; i < loc.length; i++) {
    ya[i]=loc[i].getY();
  }
  return ya;
}","/** 
 * @param loc
 * @return y locations.
 */
public static double[] getYArray(Location3D[] loc){
  double[] ya=new double[loc.length];
  for (int i=0; i < loc.length; i++) {
    ya[i]=loc[i].getY();
  }
  return ya;
}",0.9694117647058824
66173,"/** 
 * @param loc
 * @return
 */
public static double[] getXArray(Location3D[] loc){
  double[] xa=new double[loc.length];
  for (int i=0; i < loc.length; i++) {
    xa[i]=loc[i].getX();
  }
  return xa;
}","/** 
 * @param loc
 * @return x locations.
 */
public static double[] getXArray(Location3D[] loc){
  double[] xa=new double[loc.length];
  for (int i=0; i < loc.length; i++) {
    xa[i]=loc[i].getX();
  }
  return xa;
}",0.9694117647058824
66174,"/** 
 * @param xa
 * @param ya
 * @param za
 * @return
 */
public static final Location3D[] create(double[] xa,double[] ya,double[] za){
  Location3D[] loa=new Location3D[xa.length];
  for (int i=0; i < loa.length; i++) {
    loa[i]=create(xa[i],ya[i],za[i]);
  }
  return loa;
}","/** 
 * @param xa
 * @param ya
 * @param za
 * @return location 3d instance with setting 'isSet' flag.
 */
public static final Location3D[] create(double[] xa,double[] ya,double[] za){
  Location3D[] loa=new Location3D[xa.length];
  for (int i=0; i < loa.length; i++) {
    loa[i]=create(xa[i],ya[i],za[i]);
  }
  return loa;
}",0.9207920792079208
66175,"/** 
 * @param loc
 * @return
 */
public static double[] getZArray(Location3D[] loc){
  double[] za=new double[loc.length];
  for (int i=0; i < loc.length; i++) {
    za[i]=loc[i].getZ();
  }
  return za;
}","/** 
 * @param loc
 * @return z locations.
 */
public static double[] getZArray(Location3D[] loc){
  double[] za=new double[loc.length];
  for (int i=0; i < loc.length; i++) {
    za[i]=loc[i].getZ();
  }
  return za;
}",0.9694117647058824
66176,"/** 
 * For accelerating graphic purpose make a fast copy of a Marker without iconPalette, which is obsolete, and the fill, which will be changed in many cases. Using the setFillSimple to set the fill faster.
 * @param src
 * @return
 */
public static final Marker copyInstanceNoFill(Marker src){
  if (src == null) {
    return null;
  }
  MarkerImpl mk=new MarkerImpl();
  mk.type=src.getType();
  mk.size=src.getSize();
  mk.sizeESet=src.isSetSize();
  mk.visible=src.isVisible();
  mk.visibleESet=src.isSetVisible();
  LineAttributes tOutline=src.getOutline();
  if (tOutline != null) {
    mk.outline=tOutline.copyInstance();
  }
  return mk;
}","/** 
 * For accelerating graphic purpose make a fast copy of a Marker without iconPalette, which is obsolete, and the fill, which will be changed in many cases. Using the setFillSimple to set the fill faster.
 * @param src
 * @return marker instance
 */
public static final Marker copyInstanceNoFill(Marker src){
  if (src == null) {
    return null;
  }
  MarkerImpl mk=new MarkerImpl();
  mk.type=src.getType();
  mk.size=src.getSize();
  mk.sizeESet=src.isSetSize();
  mk.visible=src.isVisible();
  mk.visibleESet=src.isSetVisible();
  LineAttributes tOutline=src.getOutline();
  if (tOutline != null) {
    mk.outline=tOutline.copyInstance();
  }
  return mk;
}",0.9878234398782344
66177,"protected void initDefault(){
  super.initDefault();
  for (Iterator itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=(Marker)itr.next();
    try {
      ChartElementUtil.setDefaultValue(mk,""String_Node_Str"",false);
    }
 catch (    ChartException e) {
    }
  }
}","protected void initDefault(){
  super.initDefault();
  for (Iterator<Marker> itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=itr.next();
    try {
      ChartElementUtil.setDefaultValue(mk,""String_Node_Str"",false);
    }
 catch (    ChartException e) {
    }
  }
}",0.9712230215827338
66178,"public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  super.translateFrom(series,iSeriesDefinitionIndex,chart);
  for (Iterator itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=(Marker)itr.next();
    mk.setVisible(false);
  }
}","public void translateFrom(Series series,int iSeriesDefinitionIndex,Chart chart){
  super.translateFrom(series,iSeriesDefinitionIndex,chart);
  for (Iterator<Marker> itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=itr.next();
    mk.setVisible(false);
  }
}",0.9703703703703704
66179,"/** 
 * A convenience method to create an initialized 'Series' instance
 * @return
 */
public static Series create(){
  final AreaSeries as=TypeFactory.eINSTANCE.createAreaSeries();
  ((AreaSeriesImpl)as).initialize();
  return as;
}","/** 
 * A convenience method to create an initialized 'Series' instance
 * @return series instance with setting 'isSet' flag.
 */
public static Series create(){
  final AreaSeries as=TypeFactory.eINSTANCE.createAreaSeries();
  ((AreaSeriesImpl)as).initialize();
  return as;
}",0.9155206286836935
66180,"protected void initialize(){
  super.initialize();
  for (Iterator itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=(Marker)itr.next();
    mk.setVisible(false);
  }
}","protected void initialize(){
  super.initialize();
  for (Iterator<Marker> itr=getMarkers().iterator(); itr.hasNext(); ) {
    Marker mk=itr.next();
    mk.setVisible(false);
  }
}",0.9555555555555556
66181,"/** 
 * A convenience method to create an initialized 'Series' instance
 * @return
 */
public static Series createDefault(){
  final AreaSeries as=TypeFactory.eINSTANCE.createAreaSeries();
  ((AreaSeriesImpl)as).initDefault();
  return as;
}","/** 
 * A convenience method to create an initialized 'Series' instance
 * @return instance of ares series without setting 'isSet' flag.
 */
public static Series createDefault(){
  final AreaSeries as=TypeFactory.eINSTANCE.createAreaSeries();
  ((AreaSeriesImpl)as).initDefault();
  return as;
}",0.8992537313432836
66182,"/** 
 * A convenience method to create an initialized 'Series' instance
 * @return
 */
public static Series create(){
  final LineSeries ls=TypeFactory.eINSTANCE.createLineSeries();
  ((LineSeriesImpl)ls).initialize();
  return ls;
}","/** 
 * A convenience method to create an initialized 'Series' instance
 * @return line series instance with setting 'isSet' flag.
 */
public static Series create(){
  final LineSeries ls=TypeFactory.eINSTANCE.createLineSeries();
  ((LineSeriesImpl)ls).initialize();
  return ls;
}",0.906614785992218
66183,"/** 
 * A convenience method to create an initialized 'Series' instance
 * @return
 */
public static Series createDefault(){
  final LineSeries ls=TypeFactory.eINSTANCE.createLineSeries();
  ((LineSeriesImpl)ls).initDefault();
  return ls;
}","/** 
 * A convenience method to create an initialized 'Series' instance
 * @return line series instance without setting 'isSet' flag.
 */
public static Series createDefault(){
  final LineSeries ls=TypeFactory.eINSTANCE.createLineSeries();
  ((LineSeriesImpl)ls).initDefault();
  return ls;
}",0.9043151969981238
66184,"private SampleData getConvertedSampleData(SampleData currentSampleData,int iSeriesDefinitionIndex){
  EList osdList=currentSampleData.getOrthogonalSampleData();
  for (int i=0; i < osdList.size(); i++) {
    if (i == iSeriesDefinitionIndex) {
      OrthogonalSampleData osd=(OrthogonalSampleData)osdList.get(i);
      osd.setDataSetRepresentation(getConvertedOrthogonalSampleDataRepresentation(osd.getDataSetRepresentation()));
      currentSampleData.getOrthogonalSampleData().set(i,osd);
    }
  }
  return currentSampleData;
}","private SampleData getConvertedSampleData(SampleData currentSampleData,int iSeriesDefinitionIndex){
  EList<OrthogonalSampleData> osdList=currentSampleData.getOrthogonalSampleData();
  for (int i=0; i < osdList.size(); i++) {
    if (i == iSeriesDefinitionIndex) {
      OrthogonalSampleData osd=osdList.get(i);
      osd.setDataSetRepresentation(getConvertedOrthogonalSampleDataRepresentation(osd.getDataSetRepresentation()));
      currentSampleData.getOrthogonalSampleData().set(i,osd);
    }
  }
  return currentSampleData;
}",0.9584120982986768
66185,"/** 
 * Check if series palette is set.
 * @param chart
 * @return
 */
public static boolean isSetSeriesPalette(Chart chart){
  Palette p=ChartUtil.getCategorySeriesDefinition(chart).getSeriesPalette();
  if (p != null && p.getEntries().size() > 0) {
    return true;
  }
  return false;
}","/** 
 * Check if series palette is set.
 * @param chart
 * @return true if chart specify series palette.
 */
public static boolean isSetSeriesPalette(Chart chart){
  Palette p=ChartUtil.getCategorySeriesDefinition(chart).getSeriesPalette();
  if (p != null && p.getEntries().size() > 0) {
    return true;
  }
  return false;
}",0.9383116883116884
66186,"/** 
 * Copy a map.
 * @param < T >
 * @param < J >
 * @param objs
 * @return
 */
public static <T,J>Map<T,J> copyInstance(Map<T,J> objs){
  Map<T,J> map=new HashMap<T,J>();
  for (  Entry<T,J> o : objs.entrySet()) {
    if (o.getValue() instanceof IChartObject) {
      map.put((T)o.getKey(),(J)((IChartObject)o.getValue()).copyInstance());
    }
 else {
      map.put((T)o.getKey(),(J)o.getValue());
    }
  }
  return map;
}","/** 
 * Copy a map.
 * @param < T >
 * @param < J >
 * @param objs
 * @return map of type <T, J>
 */
public static <T,J>Map<T,J> copyInstance(Map<T,J> objs){
  Map<T,J> map=new HashMap<T,J>();
  for (  Entry<T,J> o : objs.entrySet()) {
    if (o.getValue() instanceof IChartObject) {
      map.put(o.getKey(),(J)((IChartObject)o.getValue()).copyInstance());
    }
 else {
      map.put(o.getKey(),o.getValue());
    }
  }
  return map;
}",0.9675925925925926
66187,"protected void initDefault(){
  super.initDefault();
  final LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,true);
  setLineAttributes(lia);
  final LineAttributes weblia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,true);
  setWebLineAttributes(weblia);
  final Marker m=MarkerImpl.createDefault(MarkerType.BOX_LITERAL,4,true);
  LineAttributes la=LineAttributesImpl.createDefault(true);
  m.setOutline(la);
  setMarker(m);
  final Label lab=LabelImpl.createDefault();
  setWebLabel(lab);
  final Label clab=LabelImpl.createDefault();
  setCatLabel(clab);
}","protected void initDefault(){
  super.initDefault();
  final LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,true);
  setLineAttributes(lia);
  final LineAttributes weblia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,true);
  setWebLineAttributes(weblia);
  final Marker m=MarkerImpl.createDefault(MarkerType.BOX_LITERAL,4,true);
  LineAttributes la=LineAttributesImpl.createDefault(true);
  m.setOutline(la);
  setMarker(m);
  final Label lab=LabelImpl.createDefault();
  setWebLabel(lab);
  final Label clab=LabelImpl.createDefault();
  setCatLabel(clab);
  paletteLineColor=true;
}",0.980015987210232
66188,"/** 
 * Initializes all member variables within this object recursively Note: Manually written
 */
protected void initialize(){
  super.initialize();
  final LineAttributes lia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)lia).set(null,LineStyle.SOLID_LITERAL,1);
  lia.setVisible(true);
  setLineAttributes(lia);
  final LineAttributes weblia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)weblia).set(null,LineStyle.SOLID_LITERAL,1);
  weblia.setVisible(true);
  setWebLineAttributes(weblia);
  final Marker m=AttributeFactory.eINSTANCE.createMarker();
  m.setType(MarkerType.BOX_LITERAL);
  m.setSize(4);
  m.setVisible(true);
  LineAttributes la=AttributeFactory.eINSTANCE.createLineAttributes();
  la.setVisible(true);
  m.setOutline(la);
  setMarker(m);
  final Label lab=LabelImpl.create();
  setWebLabel(lab);
  final Label clab=LabelImpl.create();
  setCatLabel(clab);
}","/** 
 * Initializes all member variables within this object recursively Note: Manually written
 */
protected void initialize(){
  super.initialize();
  final LineAttributes lia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)lia).set(null,LineStyle.SOLID_LITERAL,1);
  lia.setVisible(true);
  setLineAttributes(lia);
  final LineAttributes weblia=AttributeFactory.eINSTANCE.createLineAttributes();
  ((LineAttributesImpl)weblia).set(null,LineStyle.SOLID_LITERAL,1);
  weblia.setVisible(true);
  setWebLineAttributes(weblia);
  final Marker m=AttributeFactory.eINSTANCE.createMarker();
  m.setType(MarkerType.BOX_LITERAL);
  m.setSize(4);
  m.setVisible(true);
  LineAttributes la=AttributeFactory.eINSTANCE.createLineAttributes();
  la.setVisible(true);
  m.setOutline(la);
  setMarker(m);
  final Label lab=LabelImpl.create();
  setWebLabel(lab);
  final Label clab=LabelImpl.create();
  setCatLabel(clab);
  setPaletteLineColor(true);
}",0.984728804634018
66189,"public void handleEvent(Event event){
  if (event.widget.equals(catLabelAttr)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
switch (event.type) {
case LabelAttributesComposite.VISIBILITY_CHANGED_EVENT:
      ChartElementUtil.setEObjectAttribute(series.getCatLabel(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    break;
case LabelAttributesComposite.FONT_CHANGED_EVENT:
  series.getCatLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
series.getCatLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
series.getCatLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.SHADOW_CHANGED_EVENT:
series.getCatLabel().setShadowColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",(LineStyle)event.data,isUnset);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
series.getCatLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
break;
case LabelAttributesComposite.INSETS_CHANGED_EVENT:
series.getCatLabel().setInsets((Insets)event.data);
break;
}
}
 else if (event.widget.equals(btnCatLabels)) {
ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnCatLabels.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnCatLabels.getSelectionState() == TristateCheckbox.STATE_GRAYED);
boolean enabled=series.isSetShowCatLabels() && series.isShowCatLabels();
catLabelAttr.setEnabled(enabled);
btnCLFormatSpecifier.setEnabled(enabled);
}
 else if (event.widget.equals(btnCLFormatSpecifier)) {
FormatSpecifier formatspecifier=null;
if (series.getCatLabelFormatSpecifier() != null) {
formatspecifier=series.getCatLabelFormatSpecifier();
}
getContext().getUIServiceProvider().getFormatSpecifierHandler().handleFormatSpecifier(cmpContent.getShell(),Messages.getString(""String_Node_Str""),new AxisType[]{AxisType.LINEAR_LITERAL,AxisType.TEXT_LITERAL,AxisType.DATE_TIME_LITERAL},formatspecifier,series,""String_Node_Str"",getContext());
}
}","public void handleEvent(Event event){
  if (event.widget.equals(catLabelAttr)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
switch (event.type) {
case LabelAttributesComposite.VISIBILITY_CHANGED_EVENT:
      ChartElementUtil.setEObjectAttribute(series.getCatLabel(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    break;
case LabelAttributesComposite.FONT_CHANGED_EVENT:
  series.getCatLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
series.getCatLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
series.getCatLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.SHADOW_CHANGED_EVENT:
series.getCatLabel().setShadowColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",event.data,isUnset);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
series.getCatLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
break;
case LabelAttributesComposite.INSETS_CHANGED_EVENT:
series.getCatLabel().setInsets((Insets)event.data);
break;
}
}
 else if (event.widget.equals(btnCatLabels)) {
ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnCatLabels.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnCatLabels.getSelectionState() == TristateCheckbox.STATE_GRAYED);
updateUIState();
}
 else if (event.widget.equals(btnCLFormatSpecifier)) {
FormatSpecifier formatspecifier=null;
if (series.getCatLabelFormatSpecifier() != null) {
formatspecifier=series.getCatLabelFormatSpecifier();
}
getContext().getUIServiceProvider().getFormatSpecifierHandler().handleFormatSpecifier(cmpContent.getShell(),Messages.getString(""String_Node_Str""),new AxisType[]{AxisType.LINEAR_LITERAL,AxisType.TEXT_LITERAL,AxisType.DATE_TIME_LITERAL},formatspecifier,series,""String_Node_Str"",getContext());
}
}",0.965915885987642
66190,"@Override protected Composite getComponent(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Group grpLine=new Group(cmpContent,SWT.NONE);
  GridLayout glLine1b=new GridLayout(2,false);
  grpLine.setLayout(glLine1b);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  btnCatLabels=new TristateCheckbox(grpLine,SWT.NONE);
{
    btnCatLabels.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    gd.horizontalSpan=2;
    btnCatLabels.setLayoutData(gd);
    btnCatLabels.setSelectionState(series.isSetShowCatLabels() ? (series.isShowCatLabels() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnCatLabels.addListener(SWT.Selection,this);
  }
  LabelAttributesContext clattributesContext=new LabelAttributesContext();
  clattributesContext.isPositionEnabled=false;
  clattributesContext.isFontAlignmentEnabled=false;
  clattributesContext.isVisibilityEnabled=false;
  if (series.getCatLabel() == null) {
    org.eclipse.birt.chart.model.component.Label lab=LabelImpl.create();
    series.setCatLabel(lab);
  }
  catLabelAttr=new LabelAttributesComposite(grpLine,SWT.NONE,getContext(),clattributesContext,null,null,series.getCatLabel(),getChart().getUnits());
  GridData cla=new GridData(GridData.FILL_HORIZONTAL);
  cla.horizontalSpan=2;
  catLabelAttr.setLayoutData(cla);
  catLabelAttr.addListener(this);
  catLabelAttr.setDefaultLabelValue(LabelImpl.createDefault());
  btnCLFormatSpecifier=new Button(grpLine,SWT.PUSH);
{
    GridData gdBTNFormatSpecifier=new GridData();
    gdBTNFormatSpecifier.horizontalIndent=-3;
    gdBTNFormatSpecifier.horizontalSpan=2;
    btnCLFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
    btnCLFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnCLFormatSpecifier.addListener(SWT.Selection,this);
    btnCLFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  }
  if (series.isSetShowCatLabels()) {
    catLabelAttr.setEnabled(series.isShowCatLabels());
    btnCLFormatSpecifier.setEnabled(series.isShowCatLabels());
  }
 else {
    catLabelAttr.setEnabled(true);
    btnCLFormatSpecifier.setEnabled(true);
  }
  return cmpContent;
}","@Override protected Composite getComponent(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Group grpLine=new Group(cmpContent,SWT.NONE);
  GridLayout glLine1b=new GridLayout(2,false);
  grpLine.setLayout(glLine1b);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  btnCatLabels=new TristateCheckbox(grpLine,SWT.NONE);
{
    btnCatLabels.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    gd.horizontalSpan=2;
    btnCatLabels.setLayoutData(gd);
    btnCatLabels.setSelectionState(series.isSetShowCatLabels() ? (series.isShowCatLabels() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnCatLabels.addListener(SWT.Selection,this);
  }
  LabelAttributesContext clattributesContext=new LabelAttributesContext();
  clattributesContext.isPositionEnabled=false;
  clattributesContext.isFontAlignmentEnabled=false;
  clattributesContext.isVisibilityEnabled=ChartUIExtensionUtil.canEnableUI(btnCatLabels);
  if (series.getCatLabel() == null) {
    org.eclipse.birt.chart.model.component.Label lab=LabelImpl.create();
    series.setCatLabel(lab);
  }
  catLabelAttr=new LabelAttributesComposite(grpLine,SWT.NONE,getContext(),clattributesContext,null,null,series.getCatLabel(),getChart().getUnits());
  GridData cla=new GridData(GridData.FILL_HORIZONTAL);
  cla.horizontalSpan=2;
  catLabelAttr.setLayoutData(cla);
  catLabelAttr.addListener(this);
  catLabelAttr.setDefaultLabelValue(LabelImpl.createDefault());
  btnCLFormatSpecifier=new Button(grpLine,SWT.PUSH);
{
    GridData gdBTNFormatSpecifier=new GridData();
    gdBTNFormatSpecifier.horizontalIndent=-3;
    gdBTNFormatSpecifier.horizontalSpan=2;
    btnCLFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
    btnCLFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnCLFormatSpecifier.addListener(SWT.Selection,this);
    btnCLFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
  }
  updateUIState();
  return cmpContent;
}",0.9229773462783172
66191,"public void handleEvent(Event event){
  if (event.widget.equals(wliacLine)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
    if (event.type == LineAttributesComposite.VISIBILITY_CHANGED_EVENT) {
      ChartElementUtil.setEObjectAttribute(series.getWebLineAttributes(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    }
 else     if (event.type == LineAttributesComposite.STYLE_CHANGED_EVENT) {
      ChartElementUtil.setEObjectAttribute(series.getWebLineAttributes(),""String_Node_Str"",(LineStyle)event.data,isUnset);
    }
 else     if (event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT) {
      ChartElementUtil.setEObjectAttribute(series.getWebLineAttributes(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
    }
 else     if (event.type == LineAttributesComposite.COLOR_CHANGED_EVENT) {
      series.getWebLineAttributes().setColor((ColorDefinition)event.data);
    }
  }
 else   if (event.widget.equals(webMin)) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmin > tmax)     tmin=tmax;
    series.setWebLabelMin(tmin);
    webMin.setText(Double.toString(tmin));
  }
 else   if (event.widget.equals(webMax)) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmax < tmin)     tmax=tmin;
    series.setWebLabelMax(tmax);
    webMax.setText(Double.toString(tmax));
  }
 else   if (event.widget.equals(btnTranslucentBullseye)) {
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnTranslucentBullseye.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnTranslucentBullseye.getSelectionState() == TristateCheckbox.STATE_GRAYED);
  }
 else   if (event.widget.equals(iscScaleCnt)) {
    series.setPlotSteps(BigInteger.valueOf(iscScaleCnt.getSelection()));
  }
 else   if (event.widget.equals(btnAutoScale)) {
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnAutoScale.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnAutoScale.getSelectionState() == TristateCheckbox.STATE_GRAYED);
    boolean enabled=btnAutoScale.getSelectionState() == TristateCheckbox.STATE_SELECTED;
    updateScaleUI(enabled);
  }
 else   if (event.widget == btnScaleCntAuto) {
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",BigInteger.valueOf(iscScaleCnt.getSelection()),btnScaleCntAuto.getSelection());
    iscScaleCnt.setEnabled(btnAutoScale.getSelectionState() != TristateCheckbox.STATE_GRAYED && !btnScaleCntAuto.getSelection());
  }
 else   if (event.widget == btnWebMinAuto) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmin > tmax)     tmin=tmax;
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",tmin,btnWebMinAuto.getSelection());
    webMin.setEnabled(!btnWebMinAuto.getSelection());
  }
 else   if (event.widget == btnWebMaxAuto) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmax < tmin)     tmax=tmin;
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",tmax,btnWebMaxAuto.getSelection());
    webMax.setEnabled(!btnWebMaxAuto.getSelection());
  }
}","public void handleEvent(Event event){
  if (event.widget.equals(wliacLine)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
    if (event.type == LineAttributesComposite.VISIBILITY_CHANGED_EVENT) {
      ChartElementUtil.setEObjectAttribute(series.getWebLineAttributes(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    }
 else     if (event.type == LineAttributesComposite.STYLE_CHANGED_EVENT) {
      ChartElementUtil.setEObjectAttribute(series.getWebLineAttributes(),""String_Node_Str"",event.data,isUnset);
    }
 else     if (event.type == LineAttributesComposite.WIDTH_CHANGED_EVENT) {
      ChartElementUtil.setEObjectAttribute(series.getWebLineAttributes(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
    }
 else     if (event.type == LineAttributesComposite.COLOR_CHANGED_EVENT) {
      series.getWebLineAttributes().setColor((ColorDefinition)event.data);
    }
  }
 else   if (event.widget.equals(webMin)) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmin > tmax)     tmin=tmax;
    series.setWebLabelMin(tmin);
    webMin.setText(Double.toString(tmin));
  }
 else   if (event.widget.equals(webMax)) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmax < tmin)     tmax=tmin;
    series.setWebLabelMax(tmax);
    webMax.setText(Double.toString(tmax));
  }
 else   if (event.widget.equals(btnTranslucentBullseye)) {
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnTranslucentBullseye.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnTranslucentBullseye.getSelectionState() == TristateCheckbox.STATE_GRAYED);
  }
 else   if (event.widget.equals(iscScaleCnt)) {
    series.setPlotSteps(BigInteger.valueOf(iscScaleCnt.getSelection()));
  }
 else   if (event.widget.equals(btnAutoScale)) {
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnAutoScale.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnAutoScale.getSelectionState() == TristateCheckbox.STATE_GRAYED);
    boolean enabled=ChartUIExtensionUtil.canEnableUI(btnAutoScale);
    updateScaleUI(enabled);
  }
 else   if (event.widget == btnScaleCntAuto) {
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",BigInteger.valueOf(iscScaleCnt.getSelection()),btnScaleCntAuto.getSelection());
    iscScaleCnt.setEnabled(ChartUIExtensionUtil.canEnableUI(btnAutoScale) && !btnScaleCntAuto.getSelection());
  }
 else   if (event.widget == btnWebMinAuto) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmin > tmax)     tmin=tmax;
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",tmin,btnWebMinAuto.getSelection());
    webMin.setEnabled(!btnWebMinAuto.getSelection());
  }
 else   if (event.widget == btnWebMaxAuto) {
    double tmin=this.getTypedDataElement(webMin.getText());
    double tmax=this.getTypedDataElement(webMax.getText());
    if (tmax < tmin)     tmax=tmin;
    ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",tmax,btnWebMaxAuto.getSelection());
    webMax.setEnabled(!btnWebMaxAuto.getSelection());
  }
}",0.9657151487690682
66192,"@Override protected Composite getComponent(Composite parent){
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Group grpLine=new Group(cmpContent,SWT.NONE);
  GridLayout glLine=new GridLayout(2,false);
  grpLine.setLayout(glLine);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_AUTO_COLOR | LineAttributesComposite.ENABLE_COLOR | LineAttributesComposite.ENABLE_STYLES| LineAttributesComposite.ENABLE_VISIBILITY| LineAttributesComposite.ENABLE_WIDTH;
  wliacLine=new LineAttributesComposite(grpLine,SWT.NONE,lineStyles,getContext(),series.getWebLineAttributes());
  GridData wgdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  wgdLIACLine.horizontalSpan=2;
  wgdLIACLine.widthHint=200;
  wliacLine.setLayoutData(wgdLIACLine);
  wliacLine.addListener(this);
  GridLayout glRangeValue=new GridLayout();
  glRangeValue.numColumns=3;
  glRangeValue.horizontalSpacing=2;
  glRangeValue.verticalSpacing=5;
  glRangeValue.marginHeight=0;
  glRangeValue.marginWidth=0;
  Composite cmpMinMax=new Composite(grpLine,SWT.NONE);
  GridData gdMinMax=new GridData(GridData.FILL_HORIZONTAL);
  cmpMinMax.setLayoutData(gdMinMax);
  cmpMinMax.setLayout(glRangeValue);
  btnAutoScale=new TristateCheckbox(cmpMinMax,SWT.NONE);
{
    btnAutoScale.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=3;
    btnAutoScale.setLayoutData(gd);
    btnAutoScale.setToolTipText(Messages.getString(""String_Node_Str""));
    btnAutoScale.setSelectionState(series.isSetRadarAutoScale() ? (series.isRadarAutoScale() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnAutoScale.addListener(SWT.Selection,this);
  }
  lblWebMin=new Label(cmpMinMax,SWT.NONE);
{
    lblWebMin.setText(Messages.getString(""String_Node_Str""));
    lblWebMin.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  webMin=new TextEditorComposite(cmpMinMax,SWT.BORDER | SWT.SINGLE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    webMin.setLayoutData(gd);
    if (series.getWebLabelMin() != Double.NaN) {
      webMin.setText(Double.toString(series.getWebLabelMin()));
    }
    webMin.setToolTipText(Messages.getString(""String_Node_Str""));
    webMin.addListener(this);
  }
  btnWebMinAuto=new Button(cmpMinMax,SWT.CHECK);
  btnWebMinAuto.setText(UIHelper.getAutoMessage());
  btnWebMinAuto.setSelection(!series.isSetWebLabelMin());
  webMin.setEnabled(btnAutoScale.getSelectionState() != TristateCheckbox.STATE_GRAYED && !btnWebMinAuto.getSelection());
  btnWebMinAuto.addListener(SWT.Selection,this);
  lblWebMax=new Label(cmpMinMax,SWT.NONE);
{
    lblWebMax.setText(Messages.getString(""String_Node_Str""));
    lblWebMax.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  webMax=new TextEditorComposite(cmpMinMax,SWT.BORDER | SWT.SINGLE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    webMax.setLayoutData(gd);
    if (series.getWebLabelMax() != Double.NaN) {
      webMax.setText(Double.toString(series.getWebLabelMax()));
    }
    webMax.setToolTipText(Messages.getString(""String_Node_Str""));
    webMax.addListener(this);
  }
  btnWebMaxAuto=new Button(cmpMinMax,SWT.CHECK);
  btnWebMaxAuto.setText(UIHelper.getAutoMessage());
  btnWebMaxAuto.setSelection(!series.isSetWebLabelMax());
  webMax.setEnabled(btnAutoScale.getSelectionState() != TristateCheckbox.STATE_GRAYED && !btnWebMaxAuto.getSelection());
  btnWebMaxAuto.addListener(SWT.Selection,this);
  boolean enabled=btnAutoScale.getSelectionState() == TristateCheckbox.STATE_SELECTED;
  updateScaleUI(enabled);
  Label lblWebStep=new Label(cmpMinMax,SWT.NONE);
{
    lblWebStep.setText(Messages.getString(""String_Node_Str""));
    lblWebStep.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  iscScaleCnt=new Spinner(cmpMinMax,SWT.BORDER);
  GridData gdISCLeaderLength=new GridData();
  gdISCLeaderLength.widthHint=100;
  iscScaleCnt.setLayoutData(gdISCLeaderLength);
  iscScaleCnt.setMinimum(1);
  iscScaleCnt.setMaximum(MAX_STEPS);
  iscScaleCnt.setSelection(series.getPlotSteps().intValue());
  iscScaleCnt.addListener(SWT.Selection,this);
  btnScaleCntAuto=new Button(cmpMinMax,SWT.CHECK);
  btnScaleCntAuto.setText(UIHelper.getAutoMessage());
  btnScaleCntAuto.setSelection(!series.isSetPlotSteps());
  iscScaleCnt.setEnabled(btnAutoScale.getSelectionState() != TristateCheckbox.STATE_GRAYED && !btnScaleCntAuto.getSelection());
  btnScaleCntAuto.addListener(SWT.Selection,this);
  if (getChart().getSubType().equals(Radar.BULLSEYE_SUBTYPE_LITERAL)) {
    btnTranslucentBullseye=new TristateCheckbox(cmpMinMax,SWT.NONE);
    btnTranslucentBullseye.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    gd.verticalAlignment=SWT.TOP;
    btnTranslucentBullseye.setLayoutData(gd);
    btnTranslucentBullseye.setSelectionState(series.isSetBackgroundOvalTransparent() ? (series.isBackgroundOvalTransparent() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnTranslucentBullseye.addListener(SWT.Selection,this);
  }
  return cmpContent;
}","@Override protected Composite getComponent(Composite parent){
  Composite cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Group grpLine=new Group(cmpContent,SWT.NONE);
  GridLayout glLine=new GridLayout(2,false);
  grpLine.setLayout(glLine);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  int lineStyles=LineAttributesComposite.ENABLE_AUTO_COLOR | LineAttributesComposite.ENABLE_COLOR | LineAttributesComposite.ENABLE_STYLES| LineAttributesComposite.ENABLE_VISIBILITY| LineAttributesComposite.ENABLE_WIDTH;
  wliacLine=new LineAttributesComposite(grpLine,SWT.NONE,lineStyles,getContext(),series.getWebLineAttributes());
  GridData wgdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  wgdLIACLine.horizontalSpan=2;
  wgdLIACLine.widthHint=200;
  wliacLine.setLayoutData(wgdLIACLine);
  wliacLine.addListener(this);
  GridLayout glRangeValue=new GridLayout();
  glRangeValue.numColumns=3;
  glRangeValue.horizontalSpacing=2;
  glRangeValue.verticalSpacing=5;
  glRangeValue.marginHeight=0;
  glRangeValue.marginWidth=0;
  Composite cmpMinMax=new Composite(grpLine,SWT.NONE);
  GridData gdMinMax=new GridData(GridData.FILL_HORIZONTAL);
  cmpMinMax.setLayoutData(gdMinMax);
  cmpMinMax.setLayout(glRangeValue);
  btnAutoScale=new TristateCheckbox(cmpMinMax,SWT.NONE);
{
    btnAutoScale.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=3;
    btnAutoScale.setLayoutData(gd);
    btnAutoScale.setToolTipText(Messages.getString(""String_Node_Str""));
    btnAutoScale.setSelectionState(series.isSetRadarAutoScale() ? (series.isRadarAutoScale() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnAutoScale.addListener(SWT.Selection,this);
  }
  lblWebMin=new Label(cmpMinMax,SWT.NONE);
{
    lblWebMin.setText(Messages.getString(""String_Node_Str""));
    lblWebMin.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  webMin=new TextEditorComposite(cmpMinMax,SWT.BORDER | SWT.SINGLE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    webMin.setLayoutData(gd);
    if (series.getWebLabelMin() != Double.NaN) {
      webMin.setText(Double.toString(series.getWebLabelMin()));
    }
    webMin.setToolTipText(Messages.getString(""String_Node_Str""));
    webMin.addListener(this);
  }
  btnWebMinAuto=new Button(cmpMinMax,SWT.CHECK);
  btnWebMinAuto.setText(UIHelper.getAutoMessage());
  btnWebMinAuto.setSelection(!series.isSetWebLabelMin());
  webMin.setEnabled(ChartUIExtensionUtil.canEnableUI(btnAutoScale) && !btnWebMinAuto.getSelection());
  btnWebMinAuto.addListener(SWT.Selection,this);
  lblWebMax=new Label(cmpMinMax,SWT.NONE);
{
    lblWebMax.setText(Messages.getString(""String_Node_Str""));
    lblWebMax.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  webMax=new TextEditorComposite(cmpMinMax,SWT.BORDER | SWT.SINGLE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    webMax.setLayoutData(gd);
    if (series.getWebLabelMax() != Double.NaN) {
      webMax.setText(Double.toString(series.getWebLabelMax()));
    }
    webMax.setToolTipText(Messages.getString(""String_Node_Str""));
    webMax.addListener(this);
  }
  btnWebMaxAuto=new Button(cmpMinMax,SWT.CHECK);
  btnWebMaxAuto.setText(UIHelper.getAutoMessage());
  btnWebMaxAuto.setSelection(!series.isSetWebLabelMax());
  webMax.setEnabled(ChartUIExtensionUtil.canEnableUI(btnAutoScale) && !btnWebMaxAuto.getSelection());
  btnWebMaxAuto.addListener(SWT.Selection,this);
  boolean enabled=ChartUIExtensionUtil.canEnableUI(btnAutoScale);
  updateScaleUI(enabled);
  Label lblWebStep=new Label(cmpMinMax,SWT.NONE);
{
    lblWebStep.setText(Messages.getString(""String_Node_Str""));
    lblWebStep.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  iscScaleCnt=new Spinner(cmpMinMax,SWT.BORDER);
  GridData gdISCLeaderLength=new GridData();
  gdISCLeaderLength.widthHint=100;
  iscScaleCnt.setLayoutData(gdISCLeaderLength);
  iscScaleCnt.setMinimum(1);
  iscScaleCnt.setMaximum(MAX_STEPS);
  iscScaleCnt.setSelection(series.getPlotSteps().intValue());
  iscScaleCnt.addListener(SWT.Selection,this);
  btnScaleCntAuto=new Button(cmpMinMax,SWT.CHECK);
  btnScaleCntAuto.setText(UIHelper.getAutoMessage());
  btnScaleCntAuto.setSelection(!series.isSetPlotSteps());
  iscScaleCnt.setEnabled(ChartUIExtensionUtil.canEnableUI(btnAutoScale) && !btnScaleCntAuto.getSelection());
  btnScaleCntAuto.addListener(SWT.Selection,this);
  if (getChart().getSubType().equals(Radar.BULLSEYE_SUBTYPE_LITERAL)) {
    btnTranslucentBullseye=new TristateCheckbox(cmpMinMax,SWT.NONE);
    btnTranslucentBullseye.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=3;
    gd.verticalAlignment=SWT.TOP;
    btnTranslucentBullseye.setLayoutData(gd);
    btnTranslucentBullseye.setSelectionState(series.isSetBackgroundOvalTransparent() ? (series.isBackgroundOvalTransparent() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnTranslucentBullseye.addListener(SWT.Selection,this);
  }
  return cmpContent;
}",0.959760434212989
66193,"private void setStateOfMajorGrid(){
  boolean enabled;
  if (ChartUIUtil.is3DWallFloorSet(getChart())) {
    enabled=getAxisForProcessing().getMajorGrid().getLineAttributes().isSetVisible() && getAxisForProcessing().getMajorGrid().getLineAttributes().isVisible();
  }
 else {
    enabled=false;
  }
  lblGridStepNum.setEnabled(enabled);
  majGridStNum.setEnabled(enabled);
}","private void setStateOfMajorGrid(){
  boolean enabled;
  if (ChartUIUtil.is3DWallFloorSet(getChart())) {
    enabled=getAxisForProcessing().getMajorGrid().getLineAttributes().isSetVisible() && getAxisForProcessing().getMajorGrid().getLineAttributes().isVisible();
  }
 else {
    enabled=false;
  }
  if (enabled) {
    boolean isAuto=btnMajStpNum.getSelection();
    lblGridStepNum.setEnabled(true);
    majGridStNum.setEnabled(true && !isAuto);
    btnMajStpNum.setEnabled(true);
  }
 else {
    lblGridStepNum.setEnabled(false);
    majGridStNum.setEnabled(false);
    btnMajStpNum.setEnabled(false);
  }
}",0.6998982706002035
66194,"public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (e.widget == btnHidden) {
    boolean visible=btnHidden.getSelectionState() == TristateCheckbox.STATE_SELECTED;
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getLineAttributes(),""String_Node_Str"",visible,btnHidden.getSelectionState() == TristateCheckbox.STATE_GRAYED);
    lblColor.setEnabled(visible);
    fccLine.setEnabled(visible);
  }
 else   if (oSource.equals(btnTickBetweenCategory)) {
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getScale(),""String_Node_Str"",btnTickBetweenCategory.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnTickBetweenCategory.getSelectionState() == TristateCheckbox.STATE_GRAYED);
  }
  if (oSource.equals(iscGridCount)) {
    getAxisForProcessing().getScale().setMinorGridsPerUnit(iscGridCount.getSelection());
  }
 else   if (oSource.equals(majGridStNum)) {
    getAxisForProcessing().getScale().setMajorGridsStepNumber(majGridStNum.getSelection());
  }
 else   if (e.widget == btnMajStpNum) {
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getScale(),""String_Node_Str"",majGridStNum.getSelection(),btnMajStpNum.getSelection());
    majGridStNum.setEnabled(!btnMajStpNum.getSelection());
  }
 else   if (e.widget == btnGridCountUnit) {
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getScale(),""String_Node_Str"",iscGridCount.getSelection(),btnGridCountUnit.getSelection());
    iscGridCount.setEnabled(!btnGridCountUnit.getSelection());
  }
}","public void widgetSelected(SelectionEvent e){
  Object oSource=e.getSource();
  if (e.widget == btnHidden) {
    boolean visible=btnHidden.getSelectionState() == TristateCheckbox.STATE_SELECTED;
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getLineAttributes(),""String_Node_Str"",visible,btnHidden.getSelectionState() == TristateCheckbox.STATE_GRAYED);
    lblColor.setEnabled(visible);
    fccLine.setEnabled(visible);
  }
 else   if (oSource.equals(btnTickBetweenCategory)) {
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getScale(),""String_Node_Str"",btnTickBetweenCategory.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnTickBetweenCategory.getSelectionState() == TristateCheckbox.STATE_GRAYED);
  }
  if (oSource.equals(iscGridCount)) {
    getAxisForProcessing().getScale().setMinorGridsPerUnit(iscGridCount.getSelection());
  }
 else   if (oSource.equals(majGridStNum)) {
    getAxisForProcessing().getScale().setMajorGridsStepNumber(majGridStNum.getSelection());
  }
 else   if (e.widget == btnMajStpNum) {
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getScale(),""String_Node_Str"",majGridStNum.getSelection(),btnMajStpNum.getSelection());
    setStateOfMajorGrid();
  }
 else   if (e.widget == btnGridCountUnit) {
    ChartElementUtil.setEObjectAttribute(getAxisForProcessing().getScale(),""String_Node_Str"",iscGridCount.getSelection(),btnGridCountUnit.getSelection());
    setStateOfMinorGrid();
  }
}",0.9575033200531208
66195,"private void setStateOfMinorGrid(){
  boolean enabled;
  if (ChartUIUtil.is3DWallFloorSet(getChart())) {
    enabled=getAxisForProcessing().getMinorGrid().getLineAttributes().isSetVisible() && getAxisForProcessing().getMinorGrid().getLineAttributes().isVisible();
    if (!ChartUIUtil.is3DType(getChart())) {
      enabled=enabled || (getAxisForProcessing().getMinorGrid().getTickAttributes().isSetVisible() && getAxisForProcessing().getMinorGrid().getTickAttributes().isVisible());
    }
  }
 else {
    enabled=false;
  }
  lblGridCount.setEnabled(enabled);
  iscGridCount.setEnabled(enabled);
}","private void setStateOfMinorGrid(){
  boolean enabled;
  if (ChartUIUtil.is3DWallFloorSet(getChart())) {
    enabled=getAxisForProcessing().getMinorGrid().getLineAttributes().isSetVisible() && getAxisForProcessing().getMinorGrid().getLineAttributes().isVisible();
    if (!ChartUIUtil.is3DType(getChart())) {
      enabled=enabled || (getAxisForProcessing().getMinorGrid().getTickAttributes().isSetVisible() && getAxisForProcessing().getMinorGrid().getTickAttributes().isVisible());
    }
  }
 else {
    enabled=false;
  }
  if (enabled) {
    boolean isAuto=btnGridCountUnit.getSelection();
    lblGridCount.setEnabled(true);
    iscGridCount.setEnabled(true && !isAuto);
    btnGridCountUnit.setEnabled(true);
  }
 else {
    lblGridCount.setEnabled(false);
    iscGridCount.setEnabled(false);
    btnGridCountUnit.setEnabled(false);
  }
}",0.8019457956914524
66196,"private void populateLists(){
  NameSet nameSet=LiteralHelper.legendBehaviorTypeSet;
  List<String> names=new ArrayList<String>(Arrays.asList(nameSet.getDisplayNames()));
  names.add(0,ChartUIExtensionUtil.getAutoMessage());
  cmbLegendBehavior.setItems(names.toArray(new String[]{}));
  if (!getChart().getInteractivity().isSetLegendBehavior()) {
    cmbLegendBehavior.select(0);
  }
 else {
    cmbLegendBehavior.select(nameSet.getSafeNameIndex(getChart().getInteractivity().getLegendBehavior().getName()) + 1);
  }
}","private void populateLists(){
  NameSet nameSet=LiteralHelper.legendBehaviorTypeSet;
  List<String> names=new ArrayList<String>(Arrays.asList(nameSet.getDisplayNames()));
  names.add(0,ChartUIExtensionUtil.getAutoMessage());
  if (getContext().getOutputFormat().equalsIgnoreCase(""String_Node_Str"")) {
    cmbLegendBehavior.setItems(names.toArray(new String[]{}));
    if (!getChart().getInteractivity().isSetLegendBehavior()) {
      cmbLegendBehavior.select(0);
    }
 else {
      cmbLegendBehavior.select(nameSet.getSafeNameIndex(getChart().getInteractivity().getLegendBehavior().getName()) + 1);
    }
  }
 else {
    cmbLegendBehavior.setItems(new String[]{nameSet.getDisplayNames()[0]});
    cmbLegendBehavior.select(0);
  }
}",0.829736211031175
66197,"public boolean differs(ComputedColumnHandle binding){
  if (isAggregate()) {
    if (!strEquals(binding.getName(),txtName.getText()))     return true;
    if (!strEquals(binding.getDisplayName(),txtDisplayName.getText()))     return true;
    if (!strEquals(binding.getDisplayNameID(),txtDisplayNameID.getText()))     return true;
    if (!strEquals(binding.getDataType(),getDataType()))     return true;
    try {
      if (!strEquals(DataAdapterUtil.adaptModelAggregationType(binding.getAggregateFunction()),getFunctionByDisplayName(cmbFunction.getText()).getName()))       return true;
    }
 catch (    AdapterException e) {
    }
    if (!exprEquals((Expression)binding.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionButtonUtil.getExpression(txtFilter)))     return true;
    if (!isTimePeriod() && !strEquals(cmbAggOn.getText(),DEUtil.getAggregateOn(binding)))     return true;
    IAggrFunction function=getFunctionByDisplayName(cmbFunction.getText());
    if (function != null) {
      IParameterDefn[] params=function.getParameterDefn();
      for (      final IParameterDefn param : params) {
        if (paramsMap.containsKey(param.getName())) {
          Expression paramValue=ExpressionButtonUtil.getExpression(paramsMap.get(param.getName()));
          for (Iterator iterator=binding.argumentsIterator(); iterator.hasNext(); ) {
            AggregationArgumentHandle handle=(AggregationArgumentHandle)iterator.next();
            if (param.getName().equals(handle.getName()) && !exprEquals((Expression)handle.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),paramValue)) {
              return true;
            }
          }
          if (param.isDataField() && binding.getExpression() != null && !exprEquals((Expression)binding.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),paramValue)) {
            return true;
          }
        }
      }
    }
  }
 else {
    if (!strEquals(txtName.getText(),binding.getName()))     return true;
    if (!strEquals(txtDisplayName.getText(),binding.getDisplayName()))     return true;
    if (!strEquals(txtDisplayNameID.getText(),binding.getDisplayNameID()))     return true;
    if (!strEquals(getDataType(),binding.getDataType()))     return true;
    if (!exprEquals(ExpressionButtonUtil.getExpression(txtExpression),(Expression)binding.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue()))     return true;
  }
  return false;
}","public boolean differs(ComputedColumnHandle binding){
  if (isAggregate()) {
    if (!strEquals(binding.getName(),txtName.getText()))     return true;
    if (!strEquals(binding.getDisplayName(),txtDisplayName.getText()))     return true;
    if (!strEquals(binding.getDisplayNameID(),txtDisplayNameID.getText()))     return true;
    if (!strEquals(binding.getDataType(),getDataType()))     return true;
    try {
      if (!strEquals(DataAdapterUtil.adaptModelAggregationType(binding.getAggregateFunction()),getFunctionByDisplayName(cmbFunction.getText()).getName()))       return true;
    }
 catch (    AdapterException e) {
    }
    if (!exprEquals((Expression)binding.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionButtonUtil.getExpression(txtFilter)))     return true;
    if (!strEquals(cmbAggOn.getText(),DEUtil.getAggregateOn(binding)))     return true;
    IAggrFunction function=getFunctionByDisplayName(cmbFunction.getText());
    if (function != null) {
      IParameterDefn[] params=function.getParameterDefn();
      for (      final IParameterDefn param : params) {
        if (paramsMap.containsKey(param.getName())) {
          Expression paramValue=ExpressionButtonUtil.getExpression(paramsMap.get(param.getName()));
          for (Iterator iterator=binding.argumentsIterator(); iterator.hasNext(); ) {
            AggregationArgumentHandle handle=(AggregationArgumentHandle)iterator.next();
            if (param.getName().equals(handle.getName()) && !exprEquals((Expression)handle.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),paramValue)) {
              return true;
            }
          }
          if (param.isDataField() && binding.getExpression() != null && !exprEquals((Expression)binding.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),paramValue)) {
            return true;
          }
        }
      }
    }
  }
 else {
    if (!strEquals(txtName.getText(),binding.getName()))     return true;
    if (!strEquals(txtDisplayName.getText(),binding.getDisplayName()))     return true;
    if (!strEquals(txtDisplayNameID.getText(),binding.getDisplayNameID()))     return true;
    if (!strEquals(getDataType(),binding.getDataType()))     return true;
    if (!exprEquals(ExpressionButtonUtil.getExpression(txtExpression),(Expression)binding.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue()))     return true;
  }
  return false;
}",0.996135855196258
66198,"public void initDialog(){
  cmbType.setItems(dataTypes);
  txtDisplayName.setFocus();
  if (isAggregate()) {
    initFunction();
    initFilter();
    if (!isTimePeriod()) {
      initAggOn();
    }
  }
  if (isTimePeriod()) {
    initTimeDimension();
    initReferenceDate();
    initCalculationTypeCombo(getTimeDimsionName());
  }
  if (getBinding() == null) {
    setTypeSelect(dataTypes[0]);
    if (isTimePeriod()) {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),DEFAULT_TIMEPERIOD_NAME);
    }
 else {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),isAggregate() ? DEFAULT_AGGREGATION_NAME : DEFAULT_ITEM_NAME);
    }
    setName(this.newBinding.getName());
  }
 else {
    setName(getBinding().getName());
    setDisplayName(getBinding().getDisplayName());
    setDisplayNameID(getBinding().getDisplayNameID());
    if (getBinding().getDataType() != null)     if (DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()) != null)     setTypeSelect(DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()).getDisplayName());
 else     cmbType.setText(""String_Node_Str"");
    if (getBinding().getExpression() != null)     setDataFieldExpression(getBinding());
  }
  if (this.getBinding() != null) {
    this.txtName.setEnabled(false);
  }
  validate();
  hasInitDialog=true;
  composite.getShell().pack();
}","public void initDialog(){
  cmbType.setItems(dataTypes);
  txtDisplayName.setFocus();
  if (isAggregate()) {
    initFunction();
    initFilter();
{
      initAggOn();
    }
  }
  if (isTimePeriod()) {
    initTimeDimension();
    initReferenceDate();
    initCalculationTypeCombo(getTimeDimsionName());
  }
  if (getBinding() == null) {
    setTypeSelect(dataTypes[0]);
    if (isTimePeriod()) {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),DEFAULT_TIMEPERIOD_NAME);
    }
 else {
      this.newBinding=StructureFactory.newComputedColumn(getBindingHolder(),isAggregate() ? DEFAULT_AGGREGATION_NAME : DEFAULT_ITEM_NAME);
    }
    setName(this.newBinding.getName());
  }
 else {
    setName(getBinding().getName());
    setDisplayName(getBinding().getDisplayName());
    setDisplayNameID(getBinding().getDisplayNameID());
    if (getBinding().getDataType() != null)     if (DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()) != null)     setTypeSelect(DATA_TYPE_CHOICE_SET.findChoice(getBinding().getDataType()).getDisplayName());
 else     cmbType.setText(""String_Node_Str"");
    if (getBinding().getExpression() != null)     setDataFieldExpression(getBinding());
  }
  if (this.getBinding() != null) {
    this.txtName.setEnabled(false);
  }
  validate();
  hasInitDialog=true;
  composite.getShell().pack();
}",0.9908391352143644
66199,"public ComputedColumnHandle editBinding(ComputedColumnHandle binding) throws SemanticException {
  if (isAggregate()) {
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setAggregateFunction(getFunctionByDisplayName(cmbFunction.getText()).getName());
    ExpressionButtonUtil.saveExpressionButtonControl(txtFilter,binding,ComputedColumn.FILTER_MEMBER);
    binding.clearAggregateOnList();
    if (!isTimePeriod()) {
      String aggStr=cmbAggOn.getText();
      StringTokenizer token=new StringTokenizer(aggStr,""String_Node_Str"");
      while (token.hasMoreTokens()) {
        String agg=token.nextToken();
        if (!agg.equals(ALL))         binding.addAggregateOn(agg);
      }
    }
    binding.setExpression(null);
    binding.clearArgumentList();
    for (Iterator iterator=paramsMap.keySet().iterator(); iterator.hasNext(); ) {
      String arg=(String)iterator.next();
      String value=getControlValue(paramsMap.get(arg));
      if (value != null) {
        AggregationArgument argHandle=StructureFactory.createAggregationArgument();
        argHandle.setName(arg);
        if (ExpressionButtonUtil.getExpressionButton(paramsMap.get(arg)) != null) {
          ExpressionButtonUtil.saveExpressionButtonControl(paramsMap.get(arg),argHandle,AggregationArgument.VALUE_MEMBER);
        }
 else {
          Expression expression=new Expression(value,ExpressionType.JAVASCRIPT);
          argHandle.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
        }
        binding.addArgument(argHandle);
      }
    }
  }
 else {
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    if (ExpressionButtonUtil.getExpressionButton(txtExpression) != null) {
      ExpressionButtonUtil.saveExpressionButtonControl(txtExpression,binding,ComputedColumn.EXPRESSION_MEMBER);
    }
 else {
      Expression expression=new Expression(getControlValue(txtExpression),ExpressionType.JAVASCRIPT);
      binding.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
    }
  }
  if (isTimePeriod()) {
    ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    String dimensionName=timeDimension.getText();
    binding.setTimeDimension(dimensionName);
    binding.setCalculationType(timeFunction.getName());
    binding.setProperty(ComputedColumn.CALCULATION_ARGUMENTS_MEMBER,null);
    for (Iterator iterator=calculationParamsMap.keySet().iterator(); iterator.hasNext(); ) {
      CalculationArgument argument=StructureFactory.createCalculationArgument();
      String arg=(String)iterator.next();
      argument.setName(arg);
      String value=getControlValue(calculationParamsMap.get(arg));
      if (value != null) {
        if (ExpressionButtonUtil.getExpressionButton(calculationParamsMap.get(arg)) != null) {
          Expression expr=getExpressionByControl(calculationParamsMap.get(arg));
          argument.setValue(expr);
        }
 else {
          Expression expr=new Expression(value,ExpressionType.JAVASCRIPT);
          argument.setValue(expr);
        }
        binding.addCalculationArgument(argument);
      }
    }
    if (todayButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY);
    }
 else     if (dateSelectionButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE);
      ExpressionButtonUtil.saveExpressionButtonControl(dateText,binding,ComputedColumn.REFERENCE_DATE_VALUE_MEMBER);
    }
 else     if (recentButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_ENDING_DATE_IN_DIMENSION);
    }
  }
  return binding;
}","public ComputedColumnHandle editBinding(ComputedColumnHandle binding) throws SemanticException {
  if (isAggregate()) {
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setAggregateFunction(getFunctionByDisplayName(cmbFunction.getText()).getName());
    ExpressionButtonUtil.saveExpressionButtonControl(txtFilter,binding,ComputedColumn.FILTER_MEMBER);
    binding.clearAggregateOnList();
{
      String aggStr=cmbAggOn.getText();
      StringTokenizer token=new StringTokenizer(aggStr,""String_Node_Str"");
      while (token.hasMoreTokens()) {
        String agg=token.nextToken();
        if (!agg.equals(ALL))         binding.addAggregateOn(agg);
      }
    }
    binding.setExpression(null);
    binding.clearArgumentList();
    for (Iterator iterator=paramsMap.keySet().iterator(); iterator.hasNext(); ) {
      String arg=(String)iterator.next();
      String value=getControlValue(paramsMap.get(arg));
      if (value != null) {
        AggregationArgument argHandle=StructureFactory.createAggregationArgument();
        argHandle.setName(arg);
        if (ExpressionButtonUtil.getExpressionButton(paramsMap.get(arg)) != null) {
          ExpressionButtonUtil.saveExpressionButtonControl(paramsMap.get(arg),argHandle,AggregationArgument.VALUE_MEMBER);
        }
 else {
          Expression expression=new Expression(value,ExpressionType.JAVASCRIPT);
          argHandle.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
        }
        binding.addArgument(argHandle);
      }
    }
  }
 else {
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    if (ExpressionButtonUtil.getExpressionButton(txtExpression) != null) {
      ExpressionButtonUtil.saveExpressionButtonControl(txtExpression,binding,ComputedColumn.EXPRESSION_MEMBER);
    }
 else {
      Expression expression=new Expression(getControlValue(txtExpression),ExpressionType.JAVASCRIPT);
      binding.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
    }
  }
  if (isTimePeriod()) {
    ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    String dimensionName=timeDimension.getText();
    binding.setTimeDimension(dimensionName);
    binding.setCalculationType(timeFunction.getName());
    binding.setProperty(ComputedColumn.CALCULATION_ARGUMENTS_MEMBER,null);
    for (Iterator iterator=calculationParamsMap.keySet().iterator(); iterator.hasNext(); ) {
      CalculationArgument argument=StructureFactory.createCalculationArgument();
      String arg=(String)iterator.next();
      argument.setName(arg);
      String value=getControlValue(calculationParamsMap.get(arg));
      if (value != null) {
        if (ExpressionButtonUtil.getExpressionButton(calculationParamsMap.get(arg)) != null) {
          Expression expr=getExpressionByControl(calculationParamsMap.get(arg));
          argument.setValue(expr);
        }
 else {
          Expression expr=new Expression(value,ExpressionType.JAVASCRIPT);
          argument.setValue(expr);
        }
        binding.addCalculationArgument(argument);
      }
    }
    if (todayButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY);
    }
 else     if (dateSelectionButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE);
      ExpressionButtonUtil.saveExpressionButtonControl(dateText,binding,ComputedColumn.REFERENCE_DATE_VALUE_MEMBER);
    }
 else     if (recentButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_ENDING_DATE_IN_DIMENSION);
    }
  }
  return binding;
}",0.9970417702047096
66200,"private void createAggregateSection(Composite composite){
  new Label(composite,SWT.NONE).setText(FUNCTION);
  cmbFunction=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  cmbFunction.setLayoutData(gd);
  cmbFunction.setVisibleItemCount(30);
  cmbFunction.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      modifyDialogContent();
      validate();
    }
  }
);
  paramsComposite=new Composite(composite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=4;
  gridData.exclude=true;
  paramsComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=4;
  Layout parentLayout=paramsComposite.getParent().getLayout();
  if (parentLayout instanceof GridLayout)   layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
  paramsComposite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(FILTER_CONDITION);
  txtFilter=new Text(composite,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  txtFilter.setLayoutData(gridData);
  txtFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
    }
  }
);
  createExpressionButton(composite,txtFilter);
  if (!isTimePeriod()) {
    Label lblAggOn=new Label(composite,SWT.NONE);
    lblAggOn.setText(AGGREGATE_ON);
    gridData=new GridData();
    gridData.verticalAlignment=GridData.BEGINNING;
    lblAggOn.setLayoutData(gridData);
    cmbAggOn=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=3;
    cmbAggOn.setLayoutData(gridData);
    cmbAggOn.setVisibleItemCount(30);
    cmbAggOn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        modifyDialogContent();
      }
    }
);
  }
}","private void createAggregateSection(Composite composite){
  new Label(composite,SWT.NONE).setText(FUNCTION);
  cmbFunction=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  cmbFunction.setLayoutData(gd);
  cmbFunction.setVisibleItemCount(30);
  cmbFunction.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleFunctionSelectEvent();
      modifyDialogContent();
      validate();
    }
  }
);
  paramsComposite=new Composite(composite,SWT.NONE);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=4;
  gridData.exclude=true;
  paramsComposite.setLayoutData(gridData);
  GridLayout layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=4;
  Layout parentLayout=paramsComposite.getParent().getLayout();
  if (parentLayout instanceof GridLayout)   layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
  paramsComposite.setLayout(layout);
  new Label(composite,SWT.NONE).setText(FILTER_CONDITION);
  txtFilter=new Text(composite,SWT.BORDER);
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=2;
  txtFilter.setLayoutData(gridData);
  txtFilter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
    }
  }
);
  createExpressionButton(composite,txtFilter);
{
    Label lblAggOn=new Label(composite,SWT.NONE);
    lblAggOn.setText(AGGREGATE_ON);
    gridData=new GridData();
    gridData.verticalAlignment=GridData.BEGINNING;
    lblAggOn.setLayoutData(gridData);
    cmbAggOn=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
    gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=3;
    cmbAggOn.setLayoutData(gridData);
    cmbAggOn.setVisibleItemCount(30);
    cmbAggOn.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        modifyDialogContent();
      }
    }
);
  }
}",0.9944591664659118
66201,"public BaseTimeFunction(ITimeFunction function,List<IArgumentInfo.Period_Type> timeType){
  this(function.getName(),function.getDisplayName(),function.getDescription());
  this.timeType=timeType;
}","public BaseTimeFunction(ITimeFunction function,List<IArgumentInfo.Period_Type> timeType){
  this(function.getName(),function.getDisplayName(),function.getDescription());
  period_type1=new ArrayList<Period_Type>();
  period_type2=new ArrayList<Period_Type>();
  period_type1.addAll(timeType);
  period_type2.addAll(timeType);
}",0.6717557251908397
66202,"/** 
 * Get the argument info list if the function has
 * @return the corresponding argument info in time functions.
 */
public List<IArgumentInfo> getArguments(){
  List<IArgumentInfo> arguments=new ArrayList<IArgumentInfo>();
  period1=new ArgumentInfo(IArgumentInfo.PERIOD_1,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1),false);
  ((ArgumentInfo)period1).setPeriodChoices(timeType);
  period2=new ArgumentInfo(IArgumentInfo.PERIOD_2,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2),false);
  ((ArgumentInfo)period2).setPeriodChoices(timeType);
  if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO)) {
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO)) {
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.NEXT_N_PERIODS)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
  }
  return arguments;
}","/** 
 * Get the argument info list if the function has
 * @return the corresponding argument info in time functions.
 */
public List<IArgumentInfo> getArguments(){
  List<IArgumentInfo> arguments=new ArrayList<IArgumentInfo>();
  period1=new ArgumentInfo(IArgumentInfo.PERIOD_1,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD1),false);
  period2=new ArgumentInfo(IArgumentInfo.PERIOD_2,Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_PERIOD2),false);
  if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),true));
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO)) {
    this.period_type1.remove(IArgumentInfo.Period_Type.DAY);
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO)) {
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    arguments.add(period1);
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD2,Message.getMessage(ResourceConstants.TIMEFUNCITON_N2_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N2),false));
    ((ArgumentInfo)period2).setPeriodChoices(period_type2);
    arguments.add(period2);
  }
 else   if (this.name.equals(IBuildInBaseTimeFunction.NEXT_N_PERIODS)) {
    arguments.add(new ArgumentInfo(IArgumentInfo.N_PERIOD1,Message.getMessage(ResourceConstants.TIMEFUNCITON_N1_DISPLAYNAME),Message.getMessage(ResourceConstants.TIMEFUNCITON_N1),false));
    ((ArgumentInfo)period1).setPeriodChoices(period_type1);
    arguments.add(period1);
  }
  return arguments;
}",0.3975668042580925
66203,"@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnCategoryAxis.setLayoutData(gd);
    btnCategoryAxis.setSelectionState(getAxisForProcessing().isSetCategoryAxis() ? (getAxisForProcessing().isCategoryAxis() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateCategoryAxisUI(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    btnCategoryAxis.addSelectionListener(this);
    btnReverse=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnReverse.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    btnReverse.setLayoutData(gd);
    btnReverse.setSelectionState(((ChartWithAxes)getChart()).isSetReverseCategory() ? (((ChartWithAxes)getChart()).isReverseCategory() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateReverseUI(btnCategoryAxis.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    btnReverse.addSelectionListener(this);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  Composite titleComp=new Composite(cmpBasic,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  gl.marginLeft=0;
  gl.marginRight=0;
  gl.marginTop=0;
  gl.marginBottom=0;
  titleComp.setLayout(gl);
  btnTitleContentAuto=new Button(titleComp,SWT.CHECK);
  btnTitleContentAuto.setSelection(getAxisForProcessing().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(titleComp,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getTitleValue());
{
    GridData gd=new GridData();
    gd.widthHint=230;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleVisible.setSelectionState(getAxisForProcessing().getTitle().isSetVisible() ? (getAxisForProcessing().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnTitleVisible.addSelectionListener(this);
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=1;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
      btnTxtValueAuto=new Button(cmpBasic,SWT.CHECK);
      btnTxtValueAuto.setText(ChartUIExtensionUtil.getAutoMessage());
      btnTxtValueAuto.setSelection(!bValueOrigin || getAxisForProcessing().getOrigin().getValue() == null);
      btnTxtValueAuto.setEnabled(bValueOrigin);
      txtValue.setEnabled(bValueOrigin && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.addSelectionListener(this);
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  btnLabelVisible.setLayoutData(gd);
  btnLabelVisible.setSelectionState(getAxisForProcessing().getLabel().isSetVisible() ? (getAxisForProcessing().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  btnStaggered=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnStaggered.setText(Messages.getString(""String_Node_Str""));
{
    Axis ax=getAxisForProcessing();
    boolean bNot3D=!isChart3D();
    btnStaggered.setSelectionState(ax.isSetStaggered() ? ((ax.isStaggered() && bNot3D) ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStaggered.setEnabled(bNot3D);
    btnStaggered.addSelectionListener(this);
  }
  createLabelSpan(cmpBasic);
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    btnCategoryAxis.setLayoutData(gd);
    btnCategoryAxis.setSelectionState(getAxisForProcessing().isSetCategoryAxis() ? (getAxisForProcessing().isCategoryAxis() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateCategoryAxisUI(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    btnCategoryAxis.addSelectionListener(this);
    btnReverse=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnReverse.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    gd.horizontalSpan=2;
    btnReverse.setLayoutData(gd);
    btnReverse.setSelectionState(((ChartWithAxes)getChart()).isSetReverseCategory() ? (((ChartWithAxes)getChart()).isReverseCategory() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    updateReverseUI(btnCategoryAxis.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    btnReverse.addSelectionListener(this);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getTitleValue());
{
    GridData gd=new GridData();
    gd.widthHint=230;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleVisible.setSelectionState(getAxisForProcessing().getTitle().isSetVisible() ? (getAxisForProcessing().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnTitleVisible.addSelectionListener(this);
  btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
  btnTitleContentAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitleContentAuto.setSelection(getAxisForProcessing().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      gdBTNFormatSpecifier.horizontalSpan=2;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=3;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().isSetType() && getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=1;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
      btnTxtValueAuto=new Button(cmpBasic,SWT.CHECK);
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnTxtValueAuto.setLayoutData(gd);
      btnTxtValueAuto.setText(ChartUIExtensionUtil.getAutoMessage());
      btnTxtValueAuto.setSelection(!bValueOrigin || getAxisForProcessing().getOrigin().getValue() == null);
      btnTxtValueAuto.setEnabled(bValueOrigin);
      txtValue.setEnabled(bValueOrigin && !btnTxtValueAuto.getSelection());
      btnTxtValueAuto.addSelectionListener(this);
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
  GridData gd=new GridData();
  gd.horizontalSpan=2;
  cmpLabel.setLayoutData(gd);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData(GridData.FILL_HORIZONTAL);
  btnLabelVisible.setLayoutData(gd);
  btnLabelVisible.setSelectionState(getAxisForProcessing().getLabel().isSetVisible() ? (getAxisForProcessing().getLabel().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnLabelVisible.addSelectionListener(this);
  btnStaggered=new TristateCheckbox(cmpLabel,SWT.NONE);
  btnStaggered.setText(Messages.getString(""String_Node_Str""));
{
    Axis ax=getAxisForProcessing();
    boolean bNot3D=!isChart3D();
    btnStaggered.setSelectionState(ax.isSetStaggered() ? ((ax.isStaggered() && bNot3D) ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnStaggered.setEnabled(bNot3D);
    btnStaggered.addSelectionListener(this);
  }
  createLabelSpan(cmpBasic);
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9308711471133384
66204,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_LEGEND);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Group cmpBasic=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(3,false);
    layout.marginWidth=10;
    layout.marginHeight=10;
    cmpBasic.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
    cmpBasic.setText(Messages.getString(""String_Node_Str""));
  }
  btnVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
{
    GridData gdBTNVisible=new GridData();
    gdBTNVisible.horizontalSpan=3;
    btnVisible.setLayoutData(gdBTNVisible);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
  }
  lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  Composite titleComp=new Composite(cmpBasic,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  gl.marginLeft=0;
  gl.marginRight=0;
  gl.marginTop=0;
  gl.marginBottom=0;
  titleComp.setLayout(gl);
  btnTitleContentAuto=new Button(titleComp,SWT.CHECK);
  btnTitleContentAuto.setSelection(getChart().getLegend().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(titleComp,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getLegendTitle());
{
    GridData gd=new GridData();
    gd.widthHint=180;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  lblLegendBehavior=new Label(cmpBasic,SWT.NONE);
{
    lblLegendBehavior.setText(Messages.getString(""String_Node_Str""));
  }
  cmbLegendBehavior=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData();
    gridData.widthHint=180;
    cmbLegendBehavior.setLayoutData(gridData);
    cmbLegendBehavior.addSelectionListener(this);
    cmbLegendBehavior.setEnabled(getChart().getInteractivity().isEnable());
  }
  new Label(cmpBasic,SWT.NONE);
  if (isShowValueEnabled()) {
    lblShowValue=new Label(cmpBasic,SWT.NONE);
    lblShowValue.setText(Messages.getString(""String_Node_Str""));
    btnShowValue=new TristateCheckbox(cmpBasic,SWT.NONE);
{
      GridData gdBTNVisible=new GridData();
      gdBTNVisible.horizontalSpan=2;
      btnShowValue.setLayoutData(gdBTNVisible);
      btnShowValue.setText(Messages.getString(""String_Node_Str""));
      btnShowValue.setToolTipText(Messages.getString(""String_Node_Str""));
    }
  }
  populateLists();
  initDataNListeners();
  createButtonGroup(cmpContent);
  setState(getChart().getLegend().isSetVisible() && getChart().getLegend().isVisible());
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_LEGEND);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Group cmpBasic=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(4,false);
    layout.marginWidth=10;
    layout.marginHeight=10;
    cmpBasic.setLayout(layout);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpBasic.setLayoutData(gd);
    cmpBasic.setText(Messages.getString(""String_Node_Str""));
  }
  btnVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
{
    GridData gdBTNVisible=new GridData();
    gdBTNVisible.horizontalSpan=4;
    btnVisible.setLayoutData(gdBTNVisible);
    btnVisible.setText(Messages.getString(""String_Node_Str""));
  }
  lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getLegendTitle());
{
    GridData gd=new GridData();
    gd.widthHint=180;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
  btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
  btnTitleContentAuto.setText(ChartUIExtensionUtil.getAutoMessage());
  btnTitleContentAuto.setSelection(getChart().getLegend().getTitle().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  lblLegendBehavior=new Label(cmpBasic,SWT.NONE);
{
    lblLegendBehavior.setText(Messages.getString(""String_Node_Str""));
  }
  cmbLegendBehavior=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData();
    gridData.widthHint=180;
    cmbLegendBehavior.setLayoutData(gridData);
    cmbLegendBehavior.addSelectionListener(this);
    cmbLegendBehavior.setEnabled(getChart().getInteractivity().isEnable());
  }
  new Label(cmpBasic,SWT.NONE);
  if (isShowValueEnabled()) {
    lblShowValue=new Label(cmpBasic,SWT.NONE);
    lblShowValue.setText(Messages.getString(""String_Node_Str""));
    btnShowValue=new TristateCheckbox(cmpBasic,SWT.NONE);
{
      GridData gdBTNVisible=new GridData();
      gdBTNVisible.horizontalSpan=2;
      btnShowValue.setLayoutData(gdBTNVisible);
      btnShowValue.setText(Messages.getString(""String_Node_Str""));
      btnShowValue.setToolTipText(Messages.getString(""String_Node_Str""));
    }
  }
  populateLists();
  initDataNListeners();
  createButtonGroup(cmpContent);
  setState(getChart().getLegend().isSetVisible() && getChart().getLegend().isVisible());
}",0.881809177946517
66205,"private boolean isTitleEnabled(){
  return getChart().getTitle().isSetVisible() && getChart().getTitle().isVisible() && getChart().getTitle().getLabel().getCaption().getValue() != null && !isAutoTitle();
}","private boolean isTitleEnabled(){
  if (btnAutoTitle != null) {
    return getChart().getTitle().isSetVisible() && getChart().getTitle().isVisible() && !isAutoTitle();
  }
 else {
    return getChart().getTitle().isSetVisible() && getChart().getTitle().isVisible() && getChart().getTitle().getLabel().getCaption().getValue() != null && !isAutoTitle();
  }
}",0.2313167259786477
66206,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget.equals(btnVisible)) {
    boolean visible=btnVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED;
    if (btnVisible.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getChart().getTitle().unsetVisible();
    }
 else {
      getChart().getTitle().setVisible(visible);
    }
    updateUIState(visible);
    if (getToggleButton(BUTTON_TEXT).getSelection() || getToggleButton(BUTTON_LAYOUT).getSelection()) {
      detachPopup();
    }
  }
 else   if (e.widget.equals(btnAutoTitle)) {
    if (btnAutoTitle.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getChart().getTitle().unsetAuto();
    }
 else {
      getChart().getTitle().setAuto(btnAutoTitle.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
    updateTextTitleState();
  }
 else   if (e.widget == btnTitleContentAuto) {
    if (btnTitleContentAuto.getSelection()) {
      getChart().getTitle().getLabel().getCaption().setValue(null);
    }
 else {
      String title=ChartUIUtil.getChartType(getChart().getType()).getDefaultTitle();
      getChart().getTitle().getLabel().getCaption().setValue(title);
    }
    updateTextTitleState();
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget.equals(btnVisible)) {
    boolean visible=btnVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED;
    if (btnVisible.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getChart().getTitle().unsetVisible();
    }
 else {
      getChart().getTitle().setVisible(visible);
    }
    updateUIState(visible);
    if (getToggleButton(BUTTON_TEXT).getSelection() || getToggleButton(BUTTON_LAYOUT).getSelection()) {
      detachPopup();
    }
  }
 else   if (e.widget.equals(btnAutoTitle)) {
    if (btnAutoTitle.getSelectionState() == TristateCheckbox.STATE_GRAYED) {
      getChart().getTitle().unsetAuto();
    }
 else {
      getChart().getTitle().setAuto(btnAutoTitle.getSelectionState() == TristateCheckbox.STATE_SELECTED);
    }
    updateTextTitleState();
  }
 else   if (e.widget == btnTitleContentAuto) {
    if (btnTitleContentAuto.getSelection()) {
      getChart().getTitle().getLabel().getCaption().setValue(null);
    }
 else {
      getChart().getTitle().getLabel().getCaption().setValue(ChartUIUtil.getChartType(getChart().getType()).getDefaultTitle());
    }
    updateTextTitleState();
  }
}",0.9289985052316893
66207,"protected void updateTextTitleState(){
  btnTitleContentAuto.setEnabled(getChart().getTitle().isSetVisible() && getChart().getTitle().isVisible() && !isAutoTitle());
  txtTitle.setEnabled(isTitleEnabled());
  txtTitle.setText(getTitleText());
}","protected void updateTextTitleState(){
  txtTitle.setEnabled(isTitleEnabled());
  txtTitle.setText(getTitleText());
}",0.6481994459833795
66208,"protected void updateUIState(boolean enabled){
  btnTitleContentAuto.setEnabled(enabled && !isAutoTitle());
  txtTitle.setEnabled(isTitleEnabled());
  btnAutoTitle.setEnabled(isAutoEnabled());
  setToggleButtonEnabled(BUTTON_TEXT,enabled);
  setToggleButtonEnabled(BUTTON_LAYOUT,enabled);
}","protected void updateUIState(boolean enabled){
  if (btnTitleContentAuto != null) {
    btnTitleContentAuto.setEnabled(!(getChart().getTitle().isSetVisible() && !getChart().getTitle().isVisible()));
  }
  txtTitle.setEnabled(isTitleEnabled());
  if (btnAutoTitle != null) {
    btnAutoTitle.setEnabled(isAutoEnabled());
  }
  setToggleButtonEnabled(BUTTON_TEXT,enabled);
  setToggleButtonEnabled(BUTTON_LAYOUT,enabled);
}",0.7285513361462729
66209,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_TITLE);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    cmpContent.setLayout(new GridLayout());
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpBasic.setLayoutData(gd);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
{
    lblTitle.setText(Messages.getString(""String_Node_Str""));
  }
  Composite titleComp=new Composite(cmpBasic,SWT.NONE);
  GridLayout gl=new GridLayout();
  gl.numColumns=2;
  gl.marginLeft=0;
  gl.marginRight=0;
  gl.marginTop=0;
  gl.marginBottom=0;
  titleComp.setLayout(gl);
  btnTitleContentAuto=new Button(titleComp,SWT.CHECK);
  btnTitleContentAuto.setSelection(getChart().getTitle().getLabel().getCaption().getValue() == null);
  btnTitleContentAuto.addSelectionListener(this);
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(titleComp,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getTitleText());
{
    GridData gdTXTTitle=new GridData();
    gdTXTTitle.widthHint=200;
    txtTitle.setLayoutData(gdTXTTitle);
    txtTitle.setEnabled(isTitleEnabled());
    txtTitle.addListener(this);
  }
  btnVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  btnVisible.setLayoutData(gd);
  btnVisible.setSelectionState(getChart().getTitle().isSetVisible() ? (getChart().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnVisible.addSelectionListener(this);
  btnAutoTitle=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnAutoTitle.setText(Messages.getString(""String_Node_Str""));
  gd=new GridData();
  btnAutoTitle.setLayoutData(gd);
  btnAutoTitle.setSelectionState(getChart().getTitle().isSetAuto() ? (getChart().getTitle().isAuto() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnAutoTitle.setEnabled(isAutoEnabled());
  boolean autoTitleVisible=getContext().getUIFactory().createUIHelper().isDefaultTitleSupported();
  btnAutoTitle.setVisible(autoTitleVisible);
  btnAutoTitle.addSelectionListener(this);
  Label lblFont=new Label(cmpBasic,SWT.NONE);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getChart().getTitle().getLabel().getCaption().getFont(),getChart().getTitle().getLabel().getCaption().getColor(),true);
  GridData gdFDCFont=new GridData();
  gdFDCFont.widthHint=220;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  createButtonGroup(cmpContent);
  updateUIState(btnVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_TITLE);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    cmpContent.setLayout(new GridLayout());
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(4,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpBasic.setLayoutData(gd);
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
{
    lblTitle.setText(Messages.getString(""String_Node_Str""));
  }
  List<String> keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),getTitleText());
{
    GridData gdTXTTitle=new GridData();
    gdTXTTitle.widthHint=200;
    txtTitle.setLayoutData(gdTXTTitle);
    txtTitle.setEnabled(isTitleEnabled());
    txtTitle.addListener(this);
  }
  btnVisible=new TristateCheckbox(cmpBasic,SWT.NONE);
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  btnVisible.setLayoutData(gd);
  btnVisible.setSelectionState(getChart().getTitle().isSetVisible() ? (getChart().getTitle().isVisible() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
  btnVisible.addSelectionListener(this);
  boolean dynamicTitleVisible=getContext().getUIFactory().createUIHelper().isDefaultTitleSupported();
  if (dynamicTitleVisible) {
    btnAutoTitle=new TristateCheckbox(cmpBasic,SWT.NONE);
    btnAutoTitle.setText(Messages.getString(""String_Node_Str""));
    gd=new GridData();
    btnAutoTitle.setLayoutData(gd);
    btnAutoTitle.setSelectionState(getChart().getTitle().isSetAuto() ? (getChart().getTitle().isAuto() ? TristateCheckbox.STATE_SELECTED : TristateCheckbox.STATE_UNSELECTED) : TristateCheckbox.STATE_GRAYED);
    btnAutoTitle.setEnabled(isAutoEnabled());
    btnAutoTitle.setVisible(dynamicTitleVisible);
    btnAutoTitle.addSelectionListener(this);
  }
 else {
    btnTitleContentAuto=new Button(cmpBasic,SWT.CHECK);
    btnTitleContentAuto.setText(Messages.getString(""String_Node_Str""));
    btnTitleContentAuto.setSelection(getChart().getTitle().getLabel().getCaption().getValue() == null);
    btnTitleContentAuto.addSelectionListener(this);
  }
  Label lblFont=new Label(cmpBasic,SWT.NONE);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getChart().getTitle().getLabel().getCaption().getFont(),getChart().getTitle().getLabel().getCaption().getColor(),true);
  GridData gdFDCFont=new GridData();
  gdFDCFont.widthHint=220;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  createButtonGroup(cmpContent);
  updateUIState(btnVisible.getSelectionState() == TristateCheckbox.STATE_SELECTED);
}",0.8297975708502024
66210,"/** 
 * Initializes all member variables Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  Axis xAxisBase=AxisImpl.create(Axis.BASE);
  xAxisBase.setTitlePosition(Position.BELOW_LITERAL);
  xAxisBase.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
  xAxisBase.getTitle().setVisible(false);
  xAxisBase.setPrimaryAxis(true);
  xAxisBase.setLabelPosition(Position.BELOW_LITERAL);
  xAxisBase.setOrientation(Orientation.HORIZONTAL_LITERAL);
  xAxisBase.getOrigin().setType(IntersectionType.MIN_LITERAL);
  xAxisBase.getOrigin().setValue(NumberDataElementImpl.create(0));
  xAxisBase.setType(AxisType.TEXT_LITERAL);
  Axis yAxisOrthogonal=AxisImpl.create(Axis.ORTHOGONAL);
  yAxisOrthogonal.setTitlePosition(Position.LEFT_LITERAL);
  yAxisOrthogonal.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
  yAxisOrthogonal.getTitle().getCaption().getFont().setRotation(90);
  yAxisOrthogonal.getTitle().setVisible(false);
  yAxisOrthogonal.setPrimaryAxis(true);
  yAxisOrthogonal.setLabelPosition(Position.LEFT_LITERAL);
  yAxisOrthogonal.setOrientation(Orientation.VERTICAL_LITERAL);
  yAxisOrthogonal.getOrigin().setType(IntersectionType.MIN_LITERAL);
  yAxisOrthogonal.getOrigin().setValue(NumberDataElementImpl.create(0));
  yAxisOrthogonal.setType(AxisType.LINEAR_LITERAL);
  xAxisBase.getAssociatedAxes().add(yAxisOrthogonal);
  getAxes().add(xAxisBase);
  setRotation(Rotation3DImpl.create());
}","/** 
 * Initializes all member variables Note: Manually written
 */
protected final void initialize(){
  super.initialize();
  Axis xAxisBase=AxisImpl.create(Axis.BASE);
  xAxisBase.setTitlePosition(Position.BELOW_LITERAL);
  xAxisBase.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
  xAxisBase.getTitle().setVisible(false);
  xAxisBase.setPrimaryAxis(true);
  xAxisBase.setLabelPosition(Position.BELOW_LITERAL);
  xAxisBase.setOrientation(Orientation.HORIZONTAL_LITERAL);
  xAxisBase.getOrigin().setType(IntersectionType.MIN_LITERAL);
  xAxisBase.getOrigin().setValue(NumberDataElementImpl.create(0));
  xAxisBase.setType(AxisType.TEXT_LITERAL);
  Axis yAxisOrthogonal=AxisImpl.create(Axis.ORTHOGONAL);
  yAxisOrthogonal.setTitlePosition(Position.LEFT_LITERAL);
  yAxisOrthogonal.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
  try {
    ChartElementUtil.setDefaultValue(yAxisOrthogonal.getTitle().getCaption().getFont(),""String_Node_Str"",90);
  }
 catch (  ChartException e) {
  }
  yAxisOrthogonal.getTitle().setVisible(false);
  yAxisOrthogonal.setPrimaryAxis(true);
  yAxisOrthogonal.setLabelPosition(Position.LEFT_LITERAL);
  yAxisOrthogonal.setOrientation(Orientation.VERTICAL_LITERAL);
  yAxisOrthogonal.getOrigin().setType(IntersectionType.MIN_LITERAL);
  yAxisOrthogonal.getOrigin().setValue(NumberDataElementImpl.create(0));
  yAxisOrthogonal.setType(AxisType.LINEAR_LITERAL);
  xAxisBase.getAssociatedAxes().add(yAxisOrthogonal);
  getAxes().add(xAxisBase);
  setRotation(Rotation3DImpl.create());
}",0.957579743505426
66211,"/** 
 * @return
 */
public static PieSeries defPieSeries(){
  return defPieSeries;
}","/** 
 * @return default instance of pie series.
 */
public static PieSeries defPieSeries(){
  return defPieSeries;
}",0.84
66212,"/** 
 * @return
 */
public static DifferenceSeries defDifferenceSeries(){
  return defDifferenceSeries;
}","/** 
 * @return default instance of different series.
 */
public static DifferenceSeries defDifferenceSeries(){
  return defDifferenceSeries;
}",0.8467741935483871
66213,"/** 
 * @return
 */
public static StockSeries defStockSeries(){
  return defStockSeries;
}","/** 
 * @return default instance of stock series.
 */
public static StockSeries defStockSeries(){
  return defStockSeries;
}",0.8411214953271028
66214,"private static ChartWithAxes createChartWithAxes(){
  ChartWithAxes newChart=ChartWithAxesImpl.create();
  newChart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  Axis axBase=newChart.getAxes().get(0);
  axBase.getMarkerLines().add(MarkerLineImpl.create(axBase,null));
  axBase.getMarkerRanges().add(MarkerRangeImpl.create(axBase,null,null,ColorDefinitionImpl.TRANSPARENT(),ColorDefinitionImpl.RED()));
  axBase.setCategoryAxis(true);
  axBase.getSeriesDefinitions().add(createSeriesDefinition(0));
  axBase.getLineAttributes().setColor(ColorDefinitionImpl.BLACK());
  Axis axOrth=axBase.getAssociatedAxes().get(0);
  axOrth.getMarkerLines().add(MarkerLineImpl.create(axOrth,null));
  axOrth.getMarkerRanges().add(MarkerRangeImpl.create(axOrth,null,null,ColorDefinitionImpl.TRANSPARENT(),ColorDefinitionImpl.RED()));
  axOrth.getSeriesDefinitions().add(createSeriesDefinition(0));
  axOrth.getLineAttributes().setColor(ColorDefinitionImpl.BLACK());
  createAncillaryAxis(newChart);
  return newChart;
}","private static ChartWithAxes createChartWithAxes(){
  ChartWithAxes newChart=ChartWithAxesImpl.create();
  newChart.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  newChart.setOrientation(Orientation.VERTICAL_LITERAL);
  Axis axBase=newChart.getAxes().get(0);
  axBase.getMarkerLines().add(MarkerLineImpl.create(axBase,null));
  axBase.getMarkerRanges().add(MarkerRangeImpl.create(axBase,null,null,ColorDefinitionImpl.TRANSPARENT(),ColorDefinitionImpl.RED()));
  axBase.setCategoryAxis(true);
  axBase.getSeriesDefinitions().add(createSeriesDefinition(0));
  axBase.getLineAttributes().setColor(ColorDefinitionImpl.BLACK());
  Axis axOrth=axBase.getAssociatedAxes().get(0);
  axOrth.getMarkerLines().add(MarkerLineImpl.create(axOrth,null));
  axOrth.getMarkerRanges().add(MarkerRangeImpl.create(axOrth,null,null,ColorDefinitionImpl.TRANSPARENT(),ColorDefinitionImpl.RED()));
  axOrth.getSeriesDefinitions().add(createSeriesDefinition(0));
  axOrth.getLineAttributes().setColor(ColorDefinitionImpl.BLACK());
  createAncillaryAxis(newChart);
  return newChart;
}",0.9725829725829724
66215,"/** 
 * @return
 */
public static Plot defPlot(){
  return defPlot;
}","/** 
 * @return default instance of plot.
 */
public static Plot defPlot(){
  return defPlot;
}",0.8414634146341463
66216,"/** 
 * @return
 */
public static Axis defAncillaryAxis(){
  return defAncillaryAxis;
}","/** 
 * @return default instance of z axis.
 */
public static Axis defAncillaryAxis(){
  return defAncillaryAxis;
}",0.8613861386138614
66217,"/** 
 * @return
 */
public static Legend defLegend(){
  return defLegend;
}","/** 
 * @return default instance of legend.
 */
public static Legend defLegend(){
  return defLegend;
}",0.8426966292134831
66218,"/** 
 * @return
 */
public static BubbleSeries defBubbleSeries(){
  return defBubbleSeries;
}","/** 
 * @return default instance of bubble series.
 */
public static BubbleSeries defBubbleSeries(){
  return defBubbleSeries;
}",0.8416289592760181
66219,"/** 
 * @return
 */
public static Axis defOrthogonalAxis(){
  return defOrthAxis;
}","/** 
 * @return default instance of y axis or value axis.
 */
public static Axis defOrthogonalAxis(){
  return defOrthAxis;
}",0.7980769230769231
66220,"/** 
 * @return
 */
public static DialChart defDialChart(){
  return defDialChart;
}","/** 
 * @return default instance of  dial chart.
 */
public static DialChart defDialChart(){
  return defDialChart;
}",0.835820895522388
66221,"/** 
 * @return
 */
public static SeriesDefinition defSeriesDefinition(int id){
  return defSeriesDefinitions.get(id);
}","/** 
 * @return default instance of series definition.
 */
public static SeriesDefinition defSeriesDefinition(int id){
  return defSeriesDefinitions.get(id);
}",0.8602150537634409
66222,"/** 
 * @return
 */
public static TitleBlock defTitleBlock(){
  return defTitleBlock;
}","/** 
 * @return default instance of title
 */
public static TitleBlock defTitleBlock(){
  return defTitleBlock;
}",0.87
66223,"/** 
 * @return
 */
public static ScatterSeries defScatterSeries(){
  return defScatterSeries;
}","/** 
 * @return default instance of scatter series.
 */
public static ScatterSeries defScatterSeries(){
  return defScatterSeries;
}",0.8421052631578947
66224,"/** 
 * @return
 */
public static GanttSeries defGanttSeries(){
  return defGanttSeries;
}","/** 
 * @return default instance of gantt series.
 */
public static GanttSeries defGanttSeries(){
  return defGanttSeries;
}",0.8411214953271028
66225,"/** 
 * @return
 */
public static BarSeries defBarSeries(){
  return defBarSeries;
}","/** 
 * @return default instance of bar series.
 */
public static BarSeries defBarSeries(){
  return defBarSeries;
}",0.84
66226,"/** 
 * @return
 */
public static Series defSeries(){
  return defSeries;
}","/** 
 * @return default instance of series.
 */
public static Series defSeries(){
  return defSeries;
}",0.8426966292134831
66227,"/** 
 * @return
 */
public static LineSeries defLineSeries(){
  return defLineSeries;
}","/** 
 * @return default instance of line series.
 */
public static LineSeries defLineSeries(){
  return defLineSeries;
}",0.8405797101449275
66228,"/** 
 * @return
 */
public static AreaSeries defAreaSeries(){
  return defAreaSeries;
}","/** 
 * @return default instance of area series.
 */
public static AreaSeries defAreaSeries(){
  return defAreaSeries;
}",0.8405797101449275
66229,"/** 
 * @return
 */
public static ChartWithAxes defChartWithAxes(){
  return defChartWithAxes;
}","/** 
 * @return default instance of chart with axes. 
 */
public static ChartWithAxes defChartWithAxes(){
  return defChartWithAxes;
}",0.8347826086956521
66230,"/** 
 * @return
 */
public static ChartWithoutAxes defChartWithoutAxes(){
  return defChartWithoutAxes;
}","/** 
 * @return default instance of chart without axes.
 */
public static ChartWithoutAxes defChartWithoutAxes(){
  return defChartWithoutAxes;
}",0.84
66231,"/** 
 * @return
 */
public static DialSeries defDialSeries(){
  return defDialSeries;
}","/** 
 * @return default instance of dial series.
 */
public static DialSeries defDialSeries(){
  return defDialSeries;
}",0.8405797101449275
66232,"/** 
 * @return
 */
public static Axis defBaseAxis(){
  return defBaseAxis;
}","/** 
 * @return default instance of x/category axis.
 */
public static Axis defBaseAxis(){
  return defBaseAxis;
}",0.806282722513089
66233,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initDefault(){
  font=FontDefinitionImpl.createEmpty();
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initDefault(){
  font=FontDefinitionImpl.createEmptyDefault();
}",0.98005698005698
66234,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initDefault(int iAxisType){
  setLabel(LabelImpl.createDefault());
  LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  setLineAttributes(lia);
  AxisOrigin ao=AxisOriginImpl.createDefault(IntersectionType.MIN_LITERAL,null);
  setOrigin(ao);
  primaryAxis=false;
  Label la=LabelImpl.createDefault(false);
  la.getCaption().setValue(""String_Node_Str"");
  try {
    ChartElementUtil.setDefaultValue(la.getCaption().getFont(),""String_Node_Str"",14);
    ChartElementUtil.setDefaultValue(la.getCaption().getFont(),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  TextAlignment ta=TextAlignmentImpl.createDefault(HorizontalAlignment.CENTER_LITERAL,VerticalAlignment.CENTER_LITERAL);
  la.getCaption().getFont().setAlignment(ta);
  setTitle(la);
  Grid gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(196,196,196),LineStyle.SOLID_LITERAL,1,false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(196,196,196),LineStyle.SOLID_LITERAL,1);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.ACROSS_LITERAL;
  setMajorGrid(gr);
  gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(225,225,225),LineStyle.SOLID_LITERAL,1,false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(225,225,225),LineStyle.SOLID_LITERAL,1,false);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.ACROSS_LITERAL;
  setMinorGrid(gr);
  Scale sc=ComponentFactory.eINSTANCE.createScale();
  ((ScaleImpl)sc).minorGridsPerUnit=5;
  setScale(sc);
  percent=false;
  if (iAxisType == Axis.BASE) {
    orientation=Orientation.HORIZONTAL_LITERAL;
    labelPosition=Position.ABOVE_LITERAL;
  }
 else   if (iAxisType == Axis.ORTHOGONAL) {
    orientation=Orientation.VERTICAL_LITERAL;
    labelPosition=Position.RIGHT_LITERAL;
  }
  setOrigin(AxisOriginImpl.createDefault(IntersectionType.MAX_LITERAL,null));
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initDefault(int iAxisType){
  setLabel(LabelImpl.createDefault());
  LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  setLineAttributes(lia);
  AxisOrigin ao=AxisOriginImpl.createDefault(IntersectionType.MIN_LITERAL,null);
  setOrigin(ao);
  primaryAxis=false;
  Label la=LabelImpl.createDefault(false);
  la.getCaption().setValue(""String_Node_Str"");
  try {
    ChartElementUtil.setDefaultValue(la.getCaption().getFont(),""String_Node_Str"",14);
    ChartElementUtil.setDefaultValue(la.getCaption().getFont(),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  TextAlignment ta=TextAlignmentImpl.createDefault(HorizontalAlignment.CENTER_LITERAL,VerticalAlignment.CENTER_LITERAL);
  try {
    ChartElementUtil.setDefaultValue(la.getCaption().getFont(),""String_Node_Str"",ta);
  }
 catch (  ChartException e) {
  }
  setTitle(la);
  Grid gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.ACROSS_LITERAL;
  setMajorGrid(gr);
  gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,false);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.ACROSS_LITERAL;
  setMinorGrid(gr);
  Scale sc=ComponentFactory.eINSTANCE.createScale();
  ((ScaleImpl)sc).minorGridsPerUnit=5;
  setScale(sc);
  percent=false;
  if (iAxisType == Axis.BASE) {
    orientation=Orientation.HORIZONTAL_LITERAL;
    labelPosition=Position.ABOVE_LITERAL;
  }
 else   if (iAxisType == Axis.ORTHOGONAL) {
    orientation=Orientation.VERTICAL_LITERAL;
    labelPosition=Position.RIGHT_LITERAL;
  }
  setOrigin(AxisOriginImpl.createDefault(IntersectionType.MAX_LITERAL,null));
}",0.9181775918177592
66235,"/** 
 */
protected final void initDefault(){
  LineAttributes lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  setLineAttributes(lia);
  Label lb=LabelImpl.createDefault();
  setLabel(lb);
  Grid gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(196,196,196),LineStyle.SOLID_LITERAL,1);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(196,196,196),LineStyle.SOLID_LITERAL,1);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.BELOW_LITERAL;
  setMajorGrid(gr);
  gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(225,225,225),LineStyle.SOLID_LITERAL,1,false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.create(225,225,225),LineStyle.SOLID_LITERAL,1,false);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.BELOW_LITERAL;
  setMinorGrid(gr);
  Scale sc=ComponentFactory.eINSTANCE.createScale();
  ((ScaleImpl)sc).minorGridsPerUnit=5;
  setScale(sc);
}","/** 
 */
protected final void initDefault(){
  LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  setLineAttributes(lia);
  Label lb=LabelImpl.createDefault();
  setLabel(lb);
  Grid gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.BELOW_LITERAL;
  setMajorGrid(gr);
  gr=ComponentFactory.eINSTANCE.createGrid();
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,false);
  gr.setLineAttributes(lia);
  lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,false);
  gr.setTickAttributes(lia);
  ((GridImpl)gr).tickStyle=TickStyle.BELOW_LITERAL;
  setMinorGrid(gr);
  Scale sc=ComponentFactory.eINSTANCE.createScale();
  ((ScaleImpl)sc).minorGridsPerUnit=5;
  setScale(sc);
}",0.7210948560641812
66236,"/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initDefault(boolean visible){
  setCaption(TextImpl.createDefault((String)null));
  setBackground(ColorDefinitionImpl.TRANSPARENT());
  final Insets ins=InsetsImpl.createDefault(0,2,0,3);
  setInsets(ins);
  final LineAttributes lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  setOutline(lia);
  this.visible=visible;
}","/** 
 * Resets all member variables within this object recursively Note: Manually written
 */
protected final void initDefault(boolean visible){
  setCaption(TextImpl.createDefault((String)null));
  final Insets ins=InsetsImpl.createDefault(0,2,0,3);
  setInsets(ins);
  final LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1);
  setOutline(lia);
  this.visible=visible;
}",0.9064261555806088
66237,"private void initDefault(Axis ax,DataElement de,ColorDefinition lineColor){
  lineAttributes=LineAttributesImpl.create(lineColor,LineStyle.DASHED_LITERAL,1);
  value=de;
  label=LabelImpl.create();
  labelAnchor=ax.getOrientation().getValue() == Orientation.HORIZONTAL ? Anchor.NORTH_WEST_LITERAL : Anchor.NORTH_EAST_LITERAL;
  if (ax.getOrientation().getValue() == Orientation.HORIZONTAL) {
    try {
      ChartElementUtil.setDefaultValue(getLabel().getCaption().getFont(),""String_Node_Str"",90);
    }
 catch (    ChartException e) {
    }
  }
  if (ax.getFormatSpecifier() != null && !ax.isCategoryAxis()) {
    formatSpecifier=ax.getFormatSpecifier().copyInstance();
  }
}","private void initDefault(Axis ax,DataElement de,ColorDefinition lineColor){
  lineAttributes=LineAttributesImpl.createDefault(lineColor,LineStyle.DASHED_LITERAL,1);
  value=de;
  label=LabelImpl.createDefault();
  labelAnchor=(ax.isSetOrientation() && ax.getOrientation().getValue() == Orientation.HORIZONTAL) ? Anchor.NORTH_WEST_LITERAL : Anchor.NORTH_EAST_LITERAL;
  if (ax.isSetOrientation() && ax.getOrientation().getValue() == Orientation.HORIZONTAL) {
    try {
      ChartElementUtil.setDefaultValue(getLabel().getCaption().getFont(),""String_Node_Str"",90);
    }
 catch (    ChartException e) {
    }
  }
  if (ax.getFormatSpecifier() != null && ax.isSetCategoryAxis() && !ax.isCategoryAxis()) {
    formatSpecifier=ax.getFormatSpecifier().copyInstance();
  }
}",0.9362880886426592
66238,"private void initDefault(Axis ax,DataElement deStart,DataElement deEnd,Fill fillColor,ColorDefinition outlineColor){
  outline=LineAttributesImpl.create(outlineColor,LineStyle.SOLID_LITERAL,1);
  fill=fillColor;
  startValue=deStart;
  endValue=deEnd;
  label=LabelImpl.create();
  labelAnchor=ax.getOrientation().getValue() == Orientation.HORIZONTAL ? Anchor.NORTH_EAST_LITERAL : Anchor.NORTH_WEST_LITERAL;
  if (ax.getOrientation().getValue() == Orientation.VERTICAL) {
    try {
      ChartElementUtil.setDefaultValue(getLabel().getCaption().getFont(),""String_Node_Str"",90);
    }
 catch (    ChartException e) {
    }
  }
  if (ax.getFormatSpecifier() != null && !ax.isCategoryAxis()) {
    formatSpecifier=ax.getFormatSpecifier().copyInstance();
  }
}","private void initDefault(Axis ax,DataElement deStart,DataElement deEnd,Fill fillColor,ColorDefinition outlineColor){
  outline=LineAttributesImpl.createDefault(outlineColor,LineStyle.SOLID_LITERAL,1);
  fill=fillColor;
  startValue=deStart;
  endValue=deEnd;
  label=LabelImpl.createDefault();
  labelAnchor=(ax.isSetOrientation() && ax.getOrientation().getValue() == Orientation.HORIZONTAL) ? Anchor.NORTH_EAST_LITERAL : Anchor.NORTH_WEST_LITERAL;
  if (ax.isSetOrientation() && ax.getOrientation().getValue() == Orientation.VERTICAL) {
    try {
      ChartElementUtil.setDefaultValue(getLabel().getCaption().getFont(),""String_Node_Str"",90);
    }
 catch (    ChartException e) {
    }
  }
  if (ax.getFormatSpecifier() != null && ax.isSetCategoryAxis() && !ax.isCategoryAxis()) {
    formatSpecifier=ax.getFormatSpecifier().copyInstance();
  }
}",0.942643391521197
66239,"/** 
 */
public final void initDefault(){
  LineAttributes lia=LineAttributesImpl.createDefault(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
  setLineAttributes(lia);
}","/** 
 */
public final void initDefault(){
  LineAttributes lia=LineAttributesImpl.createDefault(null,LineStyle.SOLID_LITERAL,1,true);
  setLineAttributes(lia);
}",0.9058823529411764
66240,"/** 
 * Note: Manually written
 */
protected void initDefault(){
  version=VERSION;
  block=BlockImpl.createDefault();
  TitleBlock tb=(TitleBlock)TitleBlockImpl.createDefault();
  Plot pl=(Plot)PlotImpl.createDefault();
  Legend lg=(Legend)LegendImpl.createDefault();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(Messages.getString(""String_Node_Str""));
  try {
    ChartElementUtil.setDefaultValue(txtChartTitle.getFont(),""String_Node_Str"",16);
    ChartElementUtil.setDefaultValue(txtChartTitle.getFont(),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  TextAlignment taTitle=TextAlignmentImpl.createDefault(HorizontalAlignment.CENTER_LITERAL,VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  dimension=ChartDimension.TWO_DIMENSIONAL_LITERAL;
  seriesThickness=10;
  interactivity=InteractivityImpl.create();
  setEmptyMessage(newEmptyMessageDefault());
  ChartModelHelper.instance().updateExtendedProperties(getExtendedProperties());
}","/** 
 * Note: Manually written
 */
protected void initDefault(){
  version=VERSION;
  block=BlockImpl.createDefault();
  TitleBlock tb=(TitleBlock)TitleBlockImpl.createDefault();
  Plot pl=(Plot)PlotImpl.createDefault();
  Legend lg=(Legend)LegendImpl.createDefault();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(Messages.getString(""String_Node_Str""));
  try {
    ChartElementUtil.setDefaultValue(txtChartTitle.getFont(),""String_Node_Str"",16);
    ChartElementUtil.setDefaultValue(txtChartTitle.getFont(),""String_Node_Str"",true);
  }
 catch (  ChartException e) {
  }
  TextAlignment taTitle=TextAlignmentImpl.createDefault(HorizontalAlignment.CENTER_LITERAL,VerticalAlignment.CENTER_LITERAL);
  try {
    ChartElementUtil.setDefaultValue(txtChartTitle.getFont(),""String_Node_Str"",taTitle);
  }
 catch (  ChartException e) {
  }
  dimension=ChartDimension.TWO_DIMENSIONAL_LITERAL;
  seriesThickness=10;
  interactivity=InteractivityImpl.create();
  setEmptyMessage(newEmptyMessageDefault());
  ChartModelHelper.instance().updateExtendedProperties(getExtendedProperties());
}",0.9407008086253368
66241,"/** 
 * Before new aggregation extension point is introduced, The binding expression is serve as first argument of aggregation. This function is used to construct a old version binding. 
 * @param binding
 * @return
 */
private static IBinding constructNewBinding(IBinding binding){
  IBinding newBinding=null;
  try {
    newBinding=new Binding(binding.getBindingName());
    List aggregationOn=binding.getAggregatOns();
    if (aggregationOn != null) {
      for (int i=0; i < aggregationOn.size(); i++) {
        newBinding.addAggregateOn((String)aggregationOn.get(i));
      }
    }
    if (binding.getArguments() != null) {
      for (int i=1; i < binding.getArguments().size(); i++) {
        newBinding.addArgument((IBaseExpression)binding.getArguments().get(i));
      }
    }
    if (binding.getArguments().size() > 0) {
      newBinding.setExpression((IBaseExpression)binding.getArguments().get(0));
    }
    newBinding.setAggrFunction(binding.getAggrFunction());
    newBinding.setDataType(binding.getDataType());
    newBinding.setDisplayName(binding.getDisplayName());
    newBinding.setFilter(binding.getFilter());
  }
 catch (  DataException e) {
  }
  return newBinding;
}","/** 
 * Before new aggregation extension point is introduced, The binding expression is serve as first argument of aggregation. This function is used to construct a old version binding. 
 * @param binding
 * @return
 */
private static IBinding constructNewBinding(IBinding binding){
  IBinding newBinding=null;
  try {
    newBinding=new Binding(binding.getBindingName());
    List aggregationOn=binding.getAggregatOns();
    if (aggregationOn != null) {
      for (int i=0; i < aggregationOn.size(); i++) {
        newBinding.addAggregateOn((String)aggregationOn.get(i));
      }
    }
    if (binding.getArguments() != null) {
      for (int i=1; i < binding.getArguments().size(); i++) {
        newBinding.addArgument((IBaseExpression)binding.getArguments().get(i));
      }
    }
    if (binding.getArguments().size() > 0) {
      newBinding.setExpression((IBaseExpression)binding.getArguments().get(0));
    }
    newBinding.setAggrFunction(binding.getAggrFunction());
    newBinding.setDataType(binding.getDataType());
    newBinding.setDisplayName(binding.getDisplayName());
    newBinding.setFilter(binding.getFilter());
    newBinding.setTimeFunction(binding.getTimeFunction());
  }
 catch (  DataException e) {
  }
  return newBinding;
}",0.975789905621666
66242,"public static IBinding loadBinding(DataInputStream dis) throws IOException, DataException {
  int type=IOUtil.readInt(dis);
  String name=IOUtil.readString(dis);
  String function=IOUtil.readString(dis);
  IBaseExpression expr=ExprUtil.loadBaseExpr(dis);
  IBaseExpression filter=ExprUtil.loadBaseExpr(dis);
  Binding binding=new Binding(name);
  binding.setAggrFunction(function);
  binding.setDataType(type);
  binding.setExpression(expr);
  binding.setFilter(filter);
  int argSize=IOUtil.readInt(dis);
  for (int i=0; i < argSize; i++) {
    binding.addArgument(ExprUtil.loadBaseExpr(dis));
  }
  int aggrSize=IOUtil.readInt(dis);
  for (int i=0; i < aggrSize; i++) {
    binding.addAggregateOn(IOUtil.readString(dis));
  }
  return binding;
}","public static IBinding loadBinding(DataInputStream dis) throws IOException, DataException {
  int type=IOUtil.readInt(dis);
  String name=IOUtil.readString(dis);
  String function=IOUtil.readString(dis);
  IBaseExpression expr=ExprUtil.loadBaseExpr(dis);
  IBaseExpression filter=ExprUtil.loadBaseExpr(dis);
  Binding binding=new Binding(name);
  binding.setAggrFunction(function);
  binding.setDataType(type);
  binding.setExpression(expr);
  binding.setFilter(filter);
  int argSize=IOUtil.readInt(dis);
  for (int i=0; i < argSize; i++) {
    binding.addArgument(ExprUtil.loadBaseExpr(dis));
  }
  int aggrSize=IOUtil.readInt(dis);
  for (int i=0; i < aggrSize; i++) {
    binding.addAggregateOn(IOUtil.readString(dis));
  }
  if (VersionManager.getLatestVersion() >= VersionManager.VERSION_2_6_3_1) {
    boolean hasTimeFunction=IOUtil.readBool(dis);
    if (hasTimeFunction) {
      String timeDimensionName=IOUtil.readString(dis);
      TimeFunction time=new TimeFunction();
      if (timeDimensionName != null) {
        time.setTimeDimension(timeDimensionName);
        Date referenceDate=(Date)IOUtil.readObject(dis);
        time.setReferenceDate(new ReferenceDate(referenceDate));
        boolean containsBasePeriod=IOUtil.readBool(dis);
        if (containsBasePeriod) {
          TimePeriodType periodType=getPeriodType(IOUtil.readString(dis));
          int unit=IOUtil.readInt(dis);
          TimePeriod basedTimePeriod=new TimePeriod(unit,periodType);
          time.setBaseTimePeriod(basedTimePeriod);
        }
        boolean containsRelativePeriod=IOUtil.readBool(dis);
        if (containsRelativePeriod) {
          TimePeriodType periodType=getPeriodType(IOUtil.readString(dis));
          int unit=IOUtil.readInt(dis);
          TimePeriod relativeTimePeriod=new TimePeriod(unit,periodType);
          time.setRelativeTimePeriod(relativeTimePeriod);
        }
      }
      binding.setTimeFunction(time);
    }
  }
  return binding;
}",0.5419593345656192
66243,"/** 
 * @param dos
 * @param binding
 * @throws DataException
 */
public static void saveBinding(DataOutputStream dos,IBinding binding) throws DataException {
  int type=binding.getDataType();
  String name=binding.getBindingName();
  String function=binding.getAggrFunction();
  IBaseExpression expr=binding.getExpression();
  IBaseExpression filter=binding.getFilter();
  List arguments=binding.getArguments();
  List aggregateOn=binding.getAggregatOns();
  try {
    IOUtil.writeInt(dos,type);
    IOUtil.writeString(dos,name);
    IOUtil.writeString(dos,function);
    ExprUtil.saveBaseExpr(dos,expr);
    ExprUtil.saveBaseExpr(dos,filter);
    IOUtil.writeInt(dos,arguments.size());
    for (int i=0; i < arguments.size(); i++) {
      ExprUtil.saveBaseExpr(dos,(IBaseExpression)arguments.get(i));
    }
    IOUtil.writeInt(dos,aggregateOn.size());
    for (int i=0; i < aggregateOn.size(); i++) {
      IOUtil.writeString(dos,aggregateOn.get(i).toString());
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param dos
 * @param binding
 * @throws DataException
 */
public static void saveBinding(DataOutputStream dos,IBinding binding) throws DataException {
  int type=binding.getDataType();
  String name=binding.getBindingName();
  String function=binding.getAggrFunction();
  IBaseExpression expr=binding.getExpression();
  IBaseExpression filter=binding.getFilter();
  List arguments=binding.getArguments();
  List aggregateOn=binding.getAggregatOns();
  ITimeFunction timeFunction=binding.getTimeFunction();
  try {
    IOUtil.writeInt(dos,type);
    IOUtil.writeString(dos,name);
    IOUtil.writeString(dos,function);
    ExprUtil.saveBaseExpr(dos,expr);
    ExprUtil.saveBaseExpr(dos,filter);
    IOUtil.writeInt(dos,arguments.size());
    for (int i=0; i < arguments.size(); i++) {
      ExprUtil.saveBaseExpr(dos,(IBaseExpression)arguments.get(i));
    }
    IOUtil.writeInt(dos,aggregateOn.size());
    for (int i=0; i < aggregateOn.size(); i++) {
      IOUtil.writeString(dos,aggregateOn.get(i).toString());
    }
    if (VersionManager.getLatestVersion() >= VersionManager.VERSION_2_6_3_1) {
      if (timeFunction != null) {
        IOUtil.writeBool(dos,true);
        IOUtil.writeString(dos,timeFunction.getTimeDimension());
        IOUtil.writeObject(dos,timeFunction.getReferenceDate().getDate());
        ITimePeriod baseTimePeriod=timeFunction.getBaseTimePeriod();
        ITimePeriod relativeTimePeriod=timeFunction.getRelativeTimePeriod();
        if (baseTimePeriod != null) {
          IOUtil.writeBool(dos,true);
          IOUtil.writeString(dos,baseTimePeriod.getType().toString());
          IOUtil.writeInt(dos,baseTimePeriod.countOfUnit());
        }
 else {
          IOUtil.writeBool(dos,false);
        }
        if (relativeTimePeriod != null) {
          IOUtil.writeBool(dos,true);
          IOUtil.writeObject(dos,relativeTimePeriod.getType().toString());
          IOUtil.writeInt(dos,relativeTimePeriod.countOfUnit());
        }
 else {
          IOUtil.writeBool(dos,false);
        }
      }
 else {
        IOUtil.writeBool(dos,false);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.654747225647349
66244,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_6_2_2;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_6_3_1;
}",0.976470588235294
66245,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  if (bRendering3D) {
    if (subDeferredCache == null) {
      subDeferredCache=dc.deriveNewDeferredCache();
      dc=subDeferredCache;
    }
  }
  boolean hasAddedComparsionPolygon=false;
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          boolean isConeOrTriangle=(rt.getValue() == RiserType.TRIANGLE || rt.getValue() == RiserType.CONE);
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (isConeOrTriangle) {
                if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                  hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
                  hotspotLoa[2].setY(hotspotLoa[3].getY() - MIN_HEIGHT);
                }
              }
 else {
                if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                  hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                  hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
                }
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (!hasAddedComparsionPolygon) {
          hasAddedComparsionPolygon=true;
          Location3D[] l3d=new Location3D[4];
          for (int k=0; k < 4; k++) {
            l3d[k]=goFactory.createLocation3D(0,0,0);
          }
          double x0=dpha[0].getLocation3D().getX();
          double x1=dpha[dpha.length - 1].getLocation3D().getX() + dSpacing * 2;
          double z=dZ + dWidthZ;
          l3d[0].set(x0,dY,z);
          l3d[1].set(x0,dY + boClientArea.getHeight(),z);
          l3d[2].set(x1,dY + boClientArea.getHeight(),z);
          l3d[3].set(x1,dY,z);
          Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(dpha[i],Polygon3DRenderEvent.class);
          pre3d.setEnable(false);
          pre3d.setDoubleSided(false);
          pre3d.setOutline(null);
          pre3d.setPoints3D(l3d);
          pre3d.setBackground(fixedFill);
          Object event=dc.getParentDeferredCache().addPlane(pre3d,PrimitiveRenderEvent.FILL);
          if (event instanceof WrappedInstruction) {
            ((WrappedInstruction)event).setSubDeferredCache(subDeferredCache);
          }
          pre3d.setDoubleSided(false);
          pre3d.setEnable(true);
        }
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),zorder_hint);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,zorder_hint);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    Position pDataPoint=null;
    Location loDataPoint=null;
    Location3D loDataPoint3d=null;
    Bounds boDataPoint=null;
    try {
      if (laDataPoint.isVisible()) {
        pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
        loDataPoint=goFactory.createLocation(0,0);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
        boDataPoint=goFactory.createBounds(0,0,0,0);
      }
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
    }
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  if (bRendering3D) {
    if (subDeferredCache == null) {
      subDeferredCache=dc.deriveNewDeferredCache();
      dc=subDeferredCache;
    }
  }
  boolean hasAddedComparsionPolygon=false;
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    Bounds compareBounds=null;
    if (getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_LITERAL || getModel().getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
      compareBounds=BoundsImpl.create(dX,dY,dWidth,dHeight);
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          boolean isConeOrTriangle=(rt.getValue() == RiserType.TRIANGLE || rt.getValue() == RiserType.CONE);
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (isConeOrTriangle) {
                if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                  hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
                  hotspotLoa[2].setY(hotspotLoa[3].getY() - MIN_HEIGHT);
                }
              }
 else {
                if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                  hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                  hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
                }
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (!hasAddedComparsionPolygon) {
          hasAddedComparsionPolygon=true;
          Location3D[] l3d=new Location3D[4];
          for (int k=0; k < 4; k++) {
            l3d[k]=goFactory.createLocation3D(0,0,0);
          }
          double x0=dpha[0].getLocation3D().getX();
          double x1=dpha[dpha.length - 1].getLocation3D().getX() + dSpacing * 2;
          double z=dZ + dWidthZ;
          l3d[0].set(x0,dY,z);
          l3d[1].set(x0,dY + boClientArea.getHeight(),z);
          l3d[2].set(x1,dY + boClientArea.getHeight(),z);
          l3d[3].set(x1,dY,z);
          Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(dpha[i],Polygon3DRenderEvent.class);
          pre3d.setEnable(false);
          pre3d.setDoubleSided(false);
          pre3d.setOutline(null);
          pre3d.setPoints3D(l3d);
          pre3d.setBackground(fixedFill);
          Object event=dc.getParentDeferredCache().addPlane(pre3d,PrimitiveRenderEvent.FILL);
          if (event instanceof WrappedInstruction) {
            ((WrappedInstruction)event).setSubDeferredCache(subDeferredCache);
          }
          pre3d.setDoubleSided(false);
          pre3d.setEnable(true);
        }
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),0,compareBounds);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,0,compareBounds);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,0,compareBounds);
        }
 else {
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,0,compareBounds);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    Position pDataPoint=null;
    Location loDataPoint=null;
    Location3D loDataPoint3d=null;
    Bounds boDataPoint=null;
    try {
      if (laDataPoint.isVisible()) {
        pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
        loDataPoint=goFactory.createLocation(0,0);
        loDataPoint3d=goFactory.createLocation3D(0,0,0);
        boDataPoint=goFactory.createBounds(0,0,0,0);
      }
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
    }
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.6977096003146652
66246,"private void renderRiserTube2D(IPrimitiveRenderer ipr,Object oSource,DataPointHints dpha,Location[] loaFront,Fill f,LineAttributes lia,ChartDimension cd,double dSeriesThickness,boolean bOffset,boolean bTransposed,boolean bDeferred,boolean bInverted,boolean bStacked,int zorder_hint) throws ChartException {
  ArrayList alModel=new ArrayList();
  Fill fBrighter;
  if (!isDimension3D()) {
    f=FillUtil.convertFillToGradient(f,bTransposed);
    fBrighter=FillUtil.getBrighterFill(f);
  }
 else {
    fBrighter=FillUtil.changeBrightness(f,0.89);
    f=FillUtil.convertFillToGradient3D(f,bTransposed);
  }
  LineAttributes liaBorder=goFactory.copyOf(lia);
  if (liaBorder.getColor() == null) {
    liaBorder.setColor(FillUtil.getDarkerColor(f));
  }
  PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
  LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(oSource,LineRenderEvent.class);
  OvalRenderEvent ore=((EventObjectCache)ipr).getEventObject(oSource,OvalRenderEvent.class);
  ArcRenderEvent are=((EventObjectCache)ipr).getEventObject(oSource,ArcRenderEvent.class);
  double dWidth=bTransposed ? loaFront[1].getY() - loaFront[0].getY() : loaFront[2].getX() - loaFront[1].getX();
  if (bOffset) {
    for (int i=0; i < loaFront.length; i++) {
      if (bTransposed) {
        loaFront[i].setX(loaFront[i].getX() + dSeriesThickness);
      }
 else {
        loaFront[i].setY(loaFront[i].getY() - dSeriesThickness);
      }
    }
  }
  Bounds bottomBounds=null;
  if (bTransposed) {
    bottomBounds=goFactory.createBounds(loaFront[0].getX() - dSeriesThickness,loaFront[0].getY() + dWidth,dSeriesThickness * 2,Math.abs(dWidth));
  }
 else {
    bottomBounds=goFactory.createBounds(loaFront[0].getX(),loaFront[1].getY() - dSeriesThickness,dWidth,dSeriesThickness * 2);
  }
  Bounds topBounds=null;
  if (bTransposed) {
    topBounds=goFactory.createBounds(loaFront[3].getX() - dSeriesThickness,loaFront[3].getY() + dWidth,dSeriesThickness * 2,Math.abs(dWidth));
  }
 else {
    topBounds=goFactory.createBounds(loaFront[0].getX(),loaFront[0].getY() - dSeriesThickness,dWidth,dSeriesThickness * 2);
  }
  if (bottomBounds != null) {
    ore.setBounds(bottomBounds);
    ore.setBackground(f);
    ore.setOutline(liaBorder);
    if (bDeferred) {
      alModel.add(ore.copy());
    }
 else {
      ipr.fillOval(ore);
    }
    are.setBackground(null);
    are.setOutline(liaBorder);
    are.setBounds(ore.getBounds());
    are.setAngleExtent(180);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
    }
  }
  pre.setPoints(loaFront);
  pre.setBackground(f);
  pre.setOutline(null);
  if (bDeferred) {
    alModel.add(pre.copy());
  }
 else {
    ipr.fillPolygon(pre);
  }
  if (bTransposed) {
    lre.setStart(loaFront[1]);
    lre.setEnd(loaFront[2]);
  }
 else {
    lre.setStart(loaFront[0]);
    lre.setEnd(loaFront[1]);
  }
  lre.setLineAttributes(liaBorder);
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  if (bTransposed) {
    lre.setStart(loaFront[0]);
    lre.setEnd(loaFront[3]);
  }
 else {
    lre.setStart(loaFront[2]);
    lre.setEnd(loaFront[3]);
  }
  lre.setLineAttributes(liaBorder);
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  if (topBounds != null) {
    ore.setBounds(topBounds);
    ore.setBackground(fBrighter);
    ore.setOutline(liaBorder);
    if (bDeferred) {
      alModel.add(ore.copy());
    }
 else {
      ipr.fillOval(ore);
      ipr.drawOval(ore);
    }
    are.setBackground(null);
    are.setOutline(liaBorder);
    are.setBounds(ore.getBounds());
    are.setAngleExtent(180);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
    }
  }
  renderInteractivity(ipr,dpha,ore);
  if (!alModel.isEmpty()) {
    dc.addModel(new WrappedInstruction(getDeferredCache(),alModel,PrimitiveRenderEvent.FILL,zorder_hint));
  }
}","/** 
 * @param ipr
 * @param oSource
 * @param dpha
 * @param loaFront
 * @param f
 * @param lia
 * @param cd
 * @param dSeriesThickness
 * @param bOffset
 * @param bTransposed
 * @param bDeferred
 * @param bInverted
 * @param bStacked
 * @param zorder_hint
 * @param compareBounds this bounds is used to adjust the order of polygon, if this bound isn't null, chart will use this bounds instead of actual bounds of polygon for order.
 * @throws ChartException
 */
private void renderRiserTube2D(IPrimitiveRenderer ipr,Object oSource,DataPointHints dpha,Location[] loaFront,Fill f,LineAttributes lia,ChartDimension cd,double dSeriesThickness,boolean bOffset,boolean bTransposed,boolean bDeferred,boolean bInverted,boolean bStacked,int zorder_hint,Bounds compareBounds) throws ChartException {
  ArrayList alModel=new ArrayList();
  Fill fBrighter;
  if (!isDimension3D()) {
    f=FillUtil.convertFillToGradient(f,bTransposed);
    fBrighter=FillUtil.getBrighterFill(f);
  }
 else {
    fBrighter=FillUtil.changeBrightness(f,0.89);
    f=FillUtil.convertFillToGradient3D(f,bTransposed);
  }
  LineAttributes liaBorder=goFactory.copyOf(lia);
  if (liaBorder.getColor() == null) {
    liaBorder.setColor(FillUtil.getDarkerColor(f));
  }
  PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
  LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(oSource,LineRenderEvent.class);
  OvalRenderEvent ore=((EventObjectCache)ipr).getEventObject(oSource,OvalRenderEvent.class);
  ArcRenderEvent are=((EventObjectCache)ipr).getEventObject(oSource,ArcRenderEvent.class);
  double dWidth=bTransposed ? loaFront[1].getY() - loaFront[0].getY() : loaFront[2].getX() - loaFront[1].getX();
  if (bOffset) {
    for (int i=0; i < loaFront.length; i++) {
      if (bTransposed) {
        loaFront[i].setX(loaFront[i].getX() + dSeriesThickness);
      }
 else {
        loaFront[i].setY(loaFront[i].getY() - dSeriesThickness);
      }
    }
  }
  Bounds bottomBounds=null;
  if (bTransposed) {
    bottomBounds=goFactory.createBounds(loaFront[0].getX() - dSeriesThickness,loaFront[0].getY() + dWidth,dSeriesThickness * 2,Math.abs(dWidth));
  }
 else {
    bottomBounds=goFactory.createBounds(loaFront[0].getX(),loaFront[1].getY() - dSeriesThickness,dWidth,dSeriesThickness * 2);
  }
  Bounds topBounds=null;
  if (bTransposed) {
    topBounds=goFactory.createBounds(loaFront[3].getX() - dSeriesThickness,loaFront[3].getY() + dWidth,dSeriesThickness * 2,Math.abs(dWidth));
  }
 else {
    topBounds=goFactory.createBounds(loaFront[0].getX(),loaFront[0].getY() - dSeriesThickness,dWidth,dSeriesThickness * 2);
  }
  if (bottomBounds != null) {
    ore.setBounds(bottomBounds);
    ore.setBackground(f);
    ore.setOutline(liaBorder);
    if (bDeferred) {
      alModel.add(ore.copy());
    }
 else {
      ipr.fillOval(ore);
    }
    are.setBackground(null);
    are.setOutline(liaBorder);
    are.setBounds(ore.getBounds());
    are.setAngleExtent(180);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
    }
  }
  pre.setPoints(loaFront);
  pre.setBackground(f);
  pre.setOutline(null);
  if (bDeferred) {
    alModel.add(pre.copy());
  }
 else {
    ipr.fillPolygon(pre);
  }
  if (bTransposed) {
    lre.setStart(loaFront[1]);
    lre.setEnd(loaFront[2]);
  }
 else {
    lre.setStart(loaFront[0]);
    lre.setEnd(loaFront[1]);
  }
  lre.setLineAttributes(liaBorder);
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  if (bTransposed) {
    lre.setStart(loaFront[0]);
    lre.setEnd(loaFront[3]);
  }
 else {
    lre.setStart(loaFront[2]);
    lre.setEnd(loaFront[3]);
  }
  lre.setLineAttributes(liaBorder);
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  if (topBounds != null) {
    ore.setBounds(topBounds);
    ore.setBackground(fBrighter);
    ore.setOutline(liaBorder);
    if (bDeferred) {
      alModel.add(ore.copy());
    }
 else {
      ipr.fillOval(ore);
      ipr.drawOval(ore);
    }
    are.setBackground(null);
    are.setOutline(liaBorder);
    are.setBounds(ore.getBounds());
    are.setAngleExtent(180);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
    }
  }
  renderInteractivity(ipr,dpha,ore);
  if (!alModel.isEmpty()) {
    WrappedInstruction wi=new WrappedInstruction(getDeferredCache(),alModel,PrimitiveRenderEvent.FILL,zorder_hint);
    wi.setCompareBounds(compareBounds);
    dc.addModel(wi);
  }
}",0.9360715468698244
66247,"public final void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  if ((bo.getWidth() == 0) && (bo.getHeight() == 0)) {
    return;
  }
  final BarSeries bs=(BarSeries)getSeries();
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  if (fPaletteEntry == null) {
    fPaletteEntry=goFactory.RED();
  }
 else   if (fPaletteEntry instanceof MultipleFill) {
    fPaletteEntry=((MultipleFill)fPaletteEntry).getFills().get(0);
  }
  Location[] loaFrontFace=null;
  double dSeriesThickness=0;
switch (bs.getRiser().getValue()) {
case RiserType.RECTANGLE:
case RiserType.TUBE:
    if (bs.getRiser().getValue() == RiserType.RECTANGLE && getModel().getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
      dSeriesThickness=3 * getDeviceScale();
    }
  if (bs.getRiser().getValue() == RiserType.TUBE) {
    dSeriesThickness=2 * getDeviceScale();
  }
loaFrontFace=new Location[4];
loaFrontFace[0]=goFactory.createLocation(bo.getLeft(),bo.getTop() + dSeriesThickness);
loaFrontFace[1]=goFactory.createLocation(bo.getLeft(),bo.getTop() + bo.getHeight());
loaFrontFace[2]=goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
loaFrontFace[3]=goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + dSeriesThickness);
break;
case RiserType.TRIANGLE:
case RiserType.CONE:
loaFrontFace=new Location[3];
loaFrontFace[0]=goFactory.createLocation(bo.getLeft(),bo.getTop() + bo.getHeight());
loaFrontFace[1]=goFactory.createLocation(bo.getLeft() + bo.getWidth() / 2,bo.getTop());
loaFrontFace[2]=goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs.getRiser().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
if (bs.getRiser().getValue() == RiserType.TUBE) {
renderRiserTube2D(ipr,StructureSource.createLegend(lg),null,loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),2 * getDeviceScale(),false,false,false,false,false,0);
}
 else if (bs.getRiser().getValue() == RiserType.CONE) {
renderRiserCone2D(ipr,StructureSource.createLegend(lg),null,loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),2 * getDeviceScale(),false,false,false,false,false,2 * getDeviceScale(),0);
}
 else if (bs.getRiser().getValue() == RiserType.TRIANGLE) {
ChartDimension cdim=getModel().getDimension();
if (cdim != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
adjustLocationsWithTriangle2D(loaFrontFace,0,2 * getDeviceScale(),2 * getDeviceScale());
}
renderRiserTriangle2D(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,cdim == ChartDimension.THREE_DIMENSIONAL_LITERAL ? ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL : cdim,0d,2 * getDeviceScale(),false,0);
}
 else {
renderPlane(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),3 * getDeviceScale(),false);
}
}","public final void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  if ((bo.getWidth() == 0) && (bo.getHeight() == 0)) {
    return;
  }
  final BarSeries bs=(BarSeries)getSeries();
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  if (fPaletteEntry == null) {
    fPaletteEntry=goFactory.RED();
  }
 else   if (fPaletteEntry instanceof MultipleFill) {
    fPaletteEntry=((MultipleFill)fPaletteEntry).getFills().get(0);
  }
  Location[] loaFrontFace=null;
  double dSeriesThickness=0;
switch (bs.getRiser().getValue()) {
case RiserType.RECTANGLE:
case RiserType.TUBE:
    if (bs.getRiser().getValue() == RiserType.RECTANGLE && getModel().getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
      dSeriesThickness=3 * getDeviceScale();
    }
  if (bs.getRiser().getValue() == RiserType.TUBE) {
    dSeriesThickness=2 * getDeviceScale();
  }
loaFrontFace=new Location[4];
loaFrontFace[0]=goFactory.createLocation(bo.getLeft(),bo.getTop() + dSeriesThickness);
loaFrontFace[1]=goFactory.createLocation(bo.getLeft(),bo.getTop() + bo.getHeight());
loaFrontFace[2]=goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
loaFrontFace[3]=goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + dSeriesThickness);
break;
case RiserType.TRIANGLE:
case RiserType.CONE:
loaFrontFace=new Location[3];
loaFrontFace[0]=goFactory.createLocation(bo.getLeft(),bo.getTop() + bo.getHeight());
loaFrontFace[1]=goFactory.createLocation(bo.getLeft() + bo.getWidth() / 2,bo.getTop());
loaFrontFace[2]=goFactory.createLocation(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight());
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs.getRiser().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
if (bs.getRiser().getValue() == RiserType.TUBE) {
renderRiserTube2D(ipr,StructureSource.createLegend(lg),null,loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),2 * getDeviceScale(),false,false,false,false,false,0,null);
}
 else if (bs.getRiser().getValue() == RiserType.CONE) {
renderRiserCone2D(ipr,StructureSource.createLegend(lg),null,loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),2 * getDeviceScale(),false,false,false,false,false,2 * getDeviceScale(),0,null);
}
 else if (bs.getRiser().getValue() == RiserType.TRIANGLE) {
ChartDimension cdim=getModel().getDimension();
if (cdim != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
adjustLocationsWithTriangle2D(loaFrontFace,0,2 * getDeviceScale(),2 * getDeviceScale());
}
renderRiserTriangle2D(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,cdim == ChartDimension.THREE_DIMENSIONAL_LITERAL ? ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL : cdim,0d,2 * getDeviceScale(),false,0,null);
}
 else {
renderPlane(ipr,StructureSource.createLegend(lg),loaFrontFace,fPaletteEntry,lia,getModel().getDimension(),3 * getDeviceScale(),false);
}
}",0.9976042165788211
66248,"/** 
 * @param ipr
 * @param oSource
 * @param dpha
 * @param loaFront
 * @param f
 * @param lia
 * @param cd
 * @param dSeriesThickness
 * @param bOffset
 * @param bTransposed
 * @param bDeferred
 * @param bInverted true: downward, false: upward
 * @param bIsStacked
 * @throws ChartException
 */
private void renderRiserCone2D(IPrimitiveRenderer ipr,Object oSource,DataPointHints dpha,Location[] loaFront,Fill f,LineAttributes lia,ChartDimension cd,double dSeriesThickness,boolean bOffset,boolean bTransposed,boolean bDeferred,boolean bInverted,boolean bIsStacked,double ovalHeight,int zorder_hint) throws ChartException {
  ArrayList alModel=new ArrayList();
  if (!isDimension3D()) {
    f=FillUtil.convertFillToGradient(f,bTransposed);
  }
 else {
    f=FillUtil.convertFillToGradient3D(f,bTransposed);
  }
  PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
  LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(oSource,LineRenderEvent.class);
  ArcRenderEvent are=((EventObjectCache)ipr).getEventObject(oSource,ArcRenderEvent.class);
  double dBottomWidth=0d;
  if (bIsStacked) {
    dBottomWidth=bTransposed ? loaFront[0].getY() - loaFront[3].getY() : loaFront[3].getX() - loaFront[0].getX();
  }
 else {
    dBottomWidth=bTransposed ? loaFront[2].getY() - loaFront[0].getY() : loaFront[2].getX() - loaFront[0].getX();
  }
  double dTopWidth=0d;
  if (bIsStacked) {
    dTopWidth=bTransposed ? loaFront[1].getY() - loaFront[2].getY() : loaFront[2].getX() - loaFront[1].getX();
  }
 else {
    dTopWidth=Double.NaN;
  }
  if (bOffset) {
    for (int i=0; i < loaFront.length; i++) {
      if (bTransposed) {
        loaFront[i].setX(loaFront[i].getX() + dSeriesThickness);
      }
 else {
        loaFront[i].setY(loaFront[i].getY() - dSeriesThickness);
      }
    }
  }
  LineAttributes liaBorder=goFactory.copyOf(lia);
  if (liaBorder.getColor() == null) {
    liaBorder.setColor(FillUtil.getDarkerColor(f));
  }
  Bounds bottomBounds;
  if (bTransposed) {
    if (bIsStacked) {
      bottomBounds=goFactory.createBounds(loaFront[3].getX() - ovalHeight,loaFront[3].getY() + dBottomWidth,ovalHeight * 2,Math.abs(dBottomWidth));
    }
 else {
      bottomBounds=goFactory.createBounds(loaFront[0].getX() - ovalHeight,loaFront[0].getY() + dBottomWidth,ovalHeight * 2,Math.abs(dBottomWidth));
    }
  }
 else {
    bottomBounds=goFactory.createBounds(loaFront[0].getX(),loaFront[0].getY() - ovalHeight,dBottomWidth,ovalHeight * 2);
  }
  Bounds topBounds;
  double topHeight=ovalHeight * dTopWidth / dBottomWidth;
  if (bTransposed) {
    if (bIsStacked) {
      topBounds=goFactory.createBounds(loaFront[2].getX() - topHeight,loaFront[2].getY() + dTopWidth,topHeight * 2,Math.abs(dTopWidth));
    }
 else {
      topBounds=null;
    }
  }
 else {
    topBounds=goFactory.createBounds(loaFront[1].getX(),loaFront[1].getY() - topHeight,dTopWidth,topHeight * 2);
  }
  if (!bTransposed) {
    if (bInverted) {
      Bounds tmpBounds=topBounds;
      topBounds=bottomBounds;
      bottomBounds=tmpBounds;
    }
  }
 else {
    if (!bInverted) {
      Bounds tmpBounds=topBounds;
      topBounds=bottomBounds;
      bottomBounds=tmpBounds;
    }
  }
  if (bottomBounds != null) {
    are.setOutline(liaBorder);
    are.setBounds(bottomBounds);
    are.setBackground(f);
    are.setAngleExtent(360);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
      ipr.fillArc(are);
    }
  }
  pre.setPoints(loaFront);
  pre.setBackground(f);
  pre.setOutline(null);
  if (bDeferred) {
    alModel.add(pre.copy());
  }
 else {
    ipr.fillPolygon(pre);
  }
  lre.setLineAttributes(liaBorder);
  lre.setStart(loaFront[0]);
  lre.setEnd(loaFront[1]);
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  lre.setLineAttributes(liaBorder);
  if (bIsStacked) {
    lre.setStart(loaFront[3]);
    lre.setEnd(loaFront[2]);
  }
 else {
    lre.setStart(loaFront[2]);
    lre.setEnd(loaFront[1]);
  }
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  if (topBounds != null) {
    are.setOutline(liaBorder);
    are.setBounds(topBounds);
    are.setBackground(f);
    are.setAngleExtent(360);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
      ipr.fillArc(are);
    }
  }
  renderInteractivity(ipr,dpha,are);
  if (!alModel.isEmpty()) {
    dc.addModel(new WrappedInstruction(getDeferredCache(),alModel,PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW,zorder_hint));
  }
}","/** 
 * @param ipr
 * @param oSource
 * @param dpha
 * @param loaFront
 * @param f
 * @param lia
 * @param cd
 * @param dSeriesThickness
 * @param bOffset
 * @param bTransposed
 * @param bDeferred
 * @param bInverted true: downward, false: upward
 * @param bIsStacked
 * @param compareBounds this bounds is used to adjust the order of polygon, if this bound isn't null, chart will use this bounds instead of actual bounds of polygon for order.
 * @throws ChartException
 */
private void renderRiserCone2D(IPrimitiveRenderer ipr,Object oSource,DataPointHints dpha,Location[] loaFront,Fill f,LineAttributes lia,ChartDimension cd,double dSeriesThickness,boolean bOffset,boolean bTransposed,boolean bDeferred,boolean bInverted,boolean bIsStacked,double ovalHeight,int zorder_hint,Bounds compareBounds) throws ChartException {
  ArrayList alModel=new ArrayList();
  if (!isDimension3D()) {
    f=FillUtil.convertFillToGradient(f,bTransposed);
  }
 else {
    f=FillUtil.convertFillToGradient3D(f,bTransposed);
  }
  PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
  LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(oSource,LineRenderEvent.class);
  ArcRenderEvent are=((EventObjectCache)ipr).getEventObject(oSource,ArcRenderEvent.class);
  double dBottomWidth=0d;
  if (bIsStacked) {
    dBottomWidth=bTransposed ? loaFront[0].getY() - loaFront[3].getY() : loaFront[3].getX() - loaFront[0].getX();
  }
 else {
    dBottomWidth=bTransposed ? loaFront[2].getY() - loaFront[0].getY() : loaFront[2].getX() - loaFront[0].getX();
  }
  double dTopWidth=0d;
  if (bIsStacked) {
    dTopWidth=bTransposed ? loaFront[1].getY() - loaFront[2].getY() : loaFront[2].getX() - loaFront[1].getX();
  }
 else {
    dTopWidth=Double.NaN;
  }
  if (bOffset) {
    for (int i=0; i < loaFront.length; i++) {
      if (bTransposed) {
        loaFront[i].setX(loaFront[i].getX() + dSeriesThickness);
      }
 else {
        loaFront[i].setY(loaFront[i].getY() - dSeriesThickness);
      }
    }
  }
  LineAttributes liaBorder=goFactory.copyOf(lia);
  if (liaBorder.getColor() == null) {
    liaBorder.setColor(FillUtil.getDarkerColor(f));
  }
  Bounds bottomBounds;
  if (bTransposed) {
    if (bIsStacked) {
      bottomBounds=goFactory.createBounds(loaFront[3].getX() - ovalHeight,loaFront[3].getY() + dBottomWidth,ovalHeight * 2,Math.abs(dBottomWidth));
    }
 else {
      bottomBounds=goFactory.createBounds(loaFront[0].getX() - ovalHeight,loaFront[0].getY() + dBottomWidth,ovalHeight * 2,Math.abs(dBottomWidth));
    }
  }
 else {
    bottomBounds=goFactory.createBounds(loaFront[0].getX(),loaFront[0].getY() - ovalHeight,dBottomWidth,ovalHeight * 2);
  }
  Bounds topBounds;
  double topHeight=ovalHeight * dTopWidth / dBottomWidth;
  if (bTransposed) {
    if (bIsStacked) {
      topBounds=goFactory.createBounds(loaFront[2].getX() - topHeight,loaFront[2].getY() + dTopWidth,topHeight * 2,Math.abs(dTopWidth));
    }
 else {
      topBounds=null;
    }
  }
 else {
    topBounds=goFactory.createBounds(loaFront[1].getX(),loaFront[1].getY() - topHeight,dTopWidth,topHeight * 2);
  }
  if (!bTransposed) {
    if (bInverted) {
      Bounds tmpBounds=topBounds;
      topBounds=bottomBounds;
      bottomBounds=tmpBounds;
    }
  }
 else {
    if (!bInverted) {
      Bounds tmpBounds=topBounds;
      topBounds=bottomBounds;
      bottomBounds=tmpBounds;
    }
  }
  if (bottomBounds != null) {
    are.setOutline(liaBorder);
    are.setBounds(bottomBounds);
    are.setBackground(f);
    are.setAngleExtent(360);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
      ipr.fillArc(are);
    }
  }
  pre.setPoints(loaFront);
  pre.setBackground(f);
  pre.setOutline(null);
  if (bDeferred) {
    alModel.add(pre.copy());
  }
 else {
    ipr.fillPolygon(pre);
  }
  lre.setLineAttributes(liaBorder);
  lre.setStart(loaFront[0]);
  lre.setEnd(loaFront[1]);
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  lre.setLineAttributes(liaBorder);
  if (bIsStacked) {
    lre.setStart(loaFront[3]);
    lre.setEnd(loaFront[2]);
  }
 else {
    lre.setStart(loaFront[2]);
    lre.setEnd(loaFront[1]);
  }
  if (bDeferred) {
    alModel.add(lre.copy());
  }
 else {
    ipr.drawLine(lre);
  }
  if (topBounds != null) {
    are.setOutline(liaBorder);
    are.setBounds(topBounds);
    are.setBackground(f);
    are.setAngleExtent(360);
    are.setStyle(ArcRenderEvent.OPEN);
    if (bTransposed) {
      are.setStartAngle(90);
    }
 else {
      are.setStartAngle(180);
    }
    if (bDeferred) {
      alModel.add(are.copy());
    }
 else {
      ipr.drawArc(are);
      ipr.fillArc(are);
    }
  }
  renderInteractivity(ipr,dpha,are);
  if (!alModel.isEmpty()) {
    WrappedInstruction wi=new WrappedInstruction(getDeferredCache(),alModel,PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW,zorder_hint);
    wi.setCompareBounds(compareBounds);
    dc.addModel(wi);
  }
}",0.9708387613989378
66249,"/** 
 * Render triangle.
 * @param ipr A handle to the primitive rendering device
 * @param oSource The object wrapped in the polygon rendering event
 * @param loaFront The co-ordinates of the front face polygon
 * @param f The fill color for the front face
 * @param lia The edge color for the polygon
 * @param dSeriesThickness The thickness or the extrusion level (for 2.5D or 3D)
 * @throws ChartException
 */
private void renderRiserTriangle2D(IPrimitiveRenderer ipr,Object oSource,Location[] loaFront,Fill f,LineAttributes lia,ChartDimension cd,double dTopThickness,double dBottomThickness,boolean bDeferred,int zorder_hint) throws ChartException {
  PolygonRenderEvent pre;
  if (cd.getValue() == ChartDimension.TWO_DIMENSIONAL) {
    pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setPoints(loaFront);
    pre.setBackground(f);
    pre.setOutline(lia);
    if (bDeferred) {
      dc.addPlane(pre,PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW);
    }
 else {
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    return;
  }
  final boolean bSolidColor=f instanceof ColorDefinition;
  Fill fDarker=null, fBrighter=null;
  if (cd.getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH) {
    fDarker=FillUtil.getDarkerFill(f);
    fBrighter=FillUtil.getBrighterFill(f);
  }
  if (isDimension3D()) {
    fBrighter=FillUtil.changeBrightness(f,0.89);
    fDarker=FillUtil.changeBrightness(f,0.65);
    f=FillUtil.changeBrightness(f,0.89);
  }
  final int nSides=loaFront.length;
  final Location[][] loaa=new Location[nSides + 1][];
  Location[] loa;
  double dY, dSmallestY=0;
  for (int j, i=0; i < nSides; i++) {
    j=i + 1;
    if (j >= loaFront.length)     j=0;
    double[] correctThicknesses=computeCorrectThicknessesWithTriangle2D(nSides,i,dTopThickness,dBottomThickness);
    loa=new Location[4];
    loa[0]=goFactory.createLocation(loaFront[i].getX(),loaFront[i].getY());
    loa[1]=goFactory.createLocation(loaFront[j].getX(),loaFront[j].getY());
    loa[2]=goFactory.createLocation(loaFront[j].getX() + correctThicknesses[0],loaFront[j].getY() - correctThicknesses[0]);
    loa[3]=goFactory.createLocation(loaFront[i].getX() + correctThicknesses[1],loaFront[i].getY() - correctThicknesses[1]);
    loaa[i]=loa;
  }
  loaa[nSides]=loaFront;
  double dI, dJ;
  Location[] loaI, loaJ;
  for (int i=0; i < nSides - 1; i++) {
    loaI=loaa[i];
    for (int j=i + 1; j < nSides; j++) {
      loaJ=loaa[j];
      dI=getY(loaI,IConstants.AVERAGE);
      dJ=getY(loaJ,IConstants.AVERAGE);
      if (ChartUtil.mathGT(dJ,dI)) {
        loaa[i]=loaJ;
        loaa[j]=loaI;
        loaI=loaJ;
      }
 else       if (ChartUtil.mathEqual(dJ,dI)) {
        dI=getX(loaI,IConstants.AVERAGE);
        dJ=getX(loaJ,IConstants.AVERAGE);
        if (ChartUtil.mathGT(dI,dJ)) {
          loaa[i]=loaJ;
          loaa[j]=loaI;
          loaI=loaJ;
        }
      }
    }
  }
  int iSmallestYIndex=0;
  for (int i=0; i < nSides; i++) {
    dY=getY(loaa[i],IConstants.AVERAGE);
    if (i == 0) {
      dSmallestY=dY;
    }
 else     if (ChartUtil.mathGT(dSmallestY,dY)) {
      dSmallestY=dY;
      iSmallestYIndex=i;
    }
  }
  ArrayList alModel=new ArrayList(nSides + 1);
  Fill fP;
  for (int i=0; i < (nSides + 1); i++) {
    pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setOutline(lia);
    pre.setPoints(loaa[i]);
    if (i == nSides) {
      fP=f;
    }
 else     if (i == iSmallestYIndex) {
      fP=fBrighter;
    }
 else {
      fP=fDarker;
    }
    pre.setBackground(fP);
    if (i == nSides) {
      if (bDeferred) {
        alModel.add(pre.copy());
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
 else     if (i == iSmallestYIndex) {
      if (!bSolidColor) {
        pre.setBackground(LIGHT_GLASS);
      }
      if (bDeferred) {
        alModel.add(pre.copy());
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
 else {
      if (!bSolidColor) {
        pre.setBackground(DARK_GLASS);
      }
      if (bDeferred) {
        alModel.add(pre.copy());
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
    if (!bDeferred) {
      ipr.drawPolygon(pre);
    }
  }
  if (!alModel.isEmpty()) {
    dc.addModel(new WrappedInstruction(getDeferredCache(),alModel,PrimitiveRenderEvent.FILL,zorder_hint));
  }
}","/** 
 * Render triangle.
 * @param ipr A handle to the primitive rendering device
 * @param oSource The object wrapped in the polygon rendering event
 * @param loaFront The co-ordinates of the front face polygon
 * @param f The fill color for the front face
 * @param lia The edge color for the polygon
 * @param dSeriesThickness The thickness or the extrusion level (for 2.5D or 3D)
 * @param compareBounds this bounds is used to adjust the order of polygon, if this bound isn't null, chart will use this bounds instead of actual bounds of polygon for order.
 * @throws ChartException
 */
private void renderRiserTriangle2D(IPrimitiveRenderer ipr,Object oSource,Location[] loaFront,Fill f,LineAttributes lia,ChartDimension cd,double dTopThickness,double dBottomThickness,boolean bDeferred,int zorder_hint,Bounds compareBounds) throws ChartException {
  PolygonRenderEvent pre;
  if (cd.getValue() == ChartDimension.TWO_DIMENSIONAL) {
    pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setPoints(loaFront);
    pre.setBackground(f);
    pre.setOutline(lia);
    if (bDeferred) {
      dc.addPlane(pre,PrimitiveRenderEvent.FILL | PrimitiveRenderEvent.DRAW);
    }
 else {
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    return;
  }
  final boolean bSolidColor=f instanceof ColorDefinition;
  Fill fDarker=null, fBrighter=null;
  if (cd.getValue() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH) {
    fDarker=FillUtil.getDarkerFill(f);
    fBrighter=FillUtil.getBrighterFill(f);
  }
  if (isDimension3D()) {
    fBrighter=FillUtil.changeBrightness(f,0.89);
    fDarker=FillUtil.changeBrightness(f,0.65);
    f=FillUtil.changeBrightness(f,0.89);
  }
  final int nSides=loaFront.length;
  final Location[][] loaa=new Location[nSides + 1][];
  Location[] loa;
  double dY, dSmallestY=0;
  for (int j, i=0; i < nSides; i++) {
    j=i + 1;
    if (j >= loaFront.length)     j=0;
    double[] correctThicknesses=computeCorrectThicknessesWithTriangle2D(nSides,i,dTopThickness,dBottomThickness);
    loa=new Location[4];
    loa[0]=goFactory.createLocation(loaFront[i].getX(),loaFront[i].getY());
    loa[1]=goFactory.createLocation(loaFront[j].getX(),loaFront[j].getY());
    loa[2]=goFactory.createLocation(loaFront[j].getX() + correctThicknesses[0],loaFront[j].getY() - correctThicknesses[0]);
    loa[3]=goFactory.createLocation(loaFront[i].getX() + correctThicknesses[1],loaFront[i].getY() - correctThicknesses[1]);
    loaa[i]=loa;
  }
  loaa[nSides]=loaFront;
  double dI, dJ;
  Location[] loaI, loaJ;
  for (int i=0; i < nSides - 1; i++) {
    loaI=loaa[i];
    for (int j=i + 1; j < nSides; j++) {
      loaJ=loaa[j];
      dI=getY(loaI,IConstants.AVERAGE);
      dJ=getY(loaJ,IConstants.AVERAGE);
      if (ChartUtil.mathGT(dJ,dI)) {
        loaa[i]=loaJ;
        loaa[j]=loaI;
        loaI=loaJ;
      }
 else       if (ChartUtil.mathEqual(dJ,dI)) {
        dI=getX(loaI,IConstants.AVERAGE);
        dJ=getX(loaJ,IConstants.AVERAGE);
        if (ChartUtil.mathGT(dI,dJ)) {
          loaa[i]=loaJ;
          loaa[j]=loaI;
          loaI=loaJ;
        }
      }
    }
  }
  int iSmallestYIndex=0;
  for (int i=0; i < nSides; i++) {
    dY=getY(loaa[i],IConstants.AVERAGE);
    if (i == 0) {
      dSmallestY=dY;
    }
 else     if (ChartUtil.mathGT(dSmallestY,dY)) {
      dSmallestY=dY;
      iSmallestYIndex=i;
    }
  }
  ArrayList alModel=new ArrayList(nSides + 1);
  Fill fP;
  for (int i=0; i < (nSides + 1); i++) {
    pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setOutline(lia);
    pre.setPoints(loaa[i]);
    if (i == nSides) {
      fP=f;
    }
 else     if (i == iSmallestYIndex) {
      fP=fBrighter;
    }
 else {
      fP=fDarker;
    }
    pre.setBackground(fP);
    if (i == nSides) {
      if (bDeferred) {
        alModel.add(pre.copy());
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
 else     if (i == iSmallestYIndex) {
      if (!bSolidColor) {
        pre.setBackground(LIGHT_GLASS);
      }
      if (bDeferred) {
        alModel.add(pre.copy());
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
 else {
      if (!bSolidColor) {
        pre.setBackground(DARK_GLASS);
      }
      if (bDeferred) {
        alModel.add(pre.copy());
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
    if (!bDeferred) {
      ipr.drawPolygon(pre);
    }
  }
  if (!alModel.isEmpty()) {
    WrappedInstruction wi=new WrappedInstruction(getDeferredCache(),alModel,PrimitiveRenderEvent.FILL,zorder_hint);
    wi.setCompareBounds(compareBounds);
    dc.addModel(wi);
  }
}",0.967496928403887
66250,"/** 
 * Compare two bounds regularly.
 * @param bo1
 * @param bo2
 * @return
 */
public static final int compareRegular(Bounds bo1,Bounds bo2){
  final double dMinY1=bo1.getTop() + bo1.getHeight();
  final double dMinY2=bo2.getTop() + bo2.getHeight();
  double dDiff=dMinY1 - dMinY2;
  if (dDiff != 0) {
    return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
  }
 else {
    final double dMaxY1=bo1.getTop();
    final double dMaxY2=bo2.getTop();
    dDiff=dMaxY1 - dMaxY2;
    if (dDiff != 0) {
      return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
    }
 else {
      final double dMinX1=bo1.getLeft();
      final double dMinX2=bo2.getLeft();
      dDiff=dMinX1 - dMinX2;
      if (dDiff != 0) {
        return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
      }
 else {
        final double dMaxX1=bo1.getLeft() + bo1.getWidth();
        final double dMaxX2=bo2.getLeft() + bo2.getWidth();
        dDiff=dMaxX1 - dMaxX2;
        if (dDiff != 0) {
          return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
        }
 else {
          return IConstants.EQUAL;
        }
      }
    }
  }
}","/** 
 * Compare two bounds regularly.
 * @param bo1
 * @param bo2
 * @return
 */
public static final int compareRegular(Bounds bo1,Bounds bo2){
  final double dMinX1=bo1.getLeft();
  final double dMinX2=bo2.getLeft();
  double dDiff=dMinX1 - dMinX2;
  if (dDiff != 0) {
    return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
  }
 else {
    final double dMaxX1=bo1.getLeft() + bo1.getWidth();
    final double dMaxX2=bo2.getLeft() + bo2.getWidth();
    dDiff=dMaxX1 - dMaxX2;
    if (dDiff != 0) {
      return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
    }
 else {
      final double dMinY1=bo1.getTop();
      final double dMinY2=bo2.getTop();
      dDiff=dMinY1 - dMinY2;
      if (dDiff != 0) {
        return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
      }
 else {
        final double dMaxY1=bo1.getTop() + bo1.getHeight();
        final double dMaxY2=bo2.getTop() + bo2.getHeight();
        dDiff=dMaxY1 - dMaxY2;
        if (dDiff != 0) {
          return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
        }
 else {
          return IConstants.EQUAL;
        }
      }
    }
  }
}",0.4870188003581021
66251,"/** 
 * Compare two bounds in transposed way.
 * @param bo1
 * @param bo2
 * @return
 */
public static final int compareTransposed(Bounds bo1,Bounds bo2){
  final double dMinX1=bo1.getLeft();
  final double dMinX2=bo2.getLeft();
  double dDiff=dMinX1 - dMinX2;
  if (dDiff != 0) {
    return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
  }
 else {
    final double dMaxX1=bo1.getLeft() + bo1.getWidth();
    final double dMaxX2=bo2.getLeft() + bo2.getWidth();
    dDiff=dMaxX1 - dMaxX2;
    if (dDiff != 0) {
      return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
    }
 else {
      final double dMinY1=bo1.getTop() + bo1.getHeight();
      final double dMinY2=bo2.getTop() + bo2.getHeight();
      dDiff=dMinY1 - dMinY2;
      if (dDiff != 0) {
        return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
      }
 else {
        final double dMaxY1=bo1.getTop();
        final double dMaxY2=bo2.getTop();
        dDiff=dMaxY1 - dMaxY2;
        if (dDiff != 0) {
          return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
        }
 else {
          return IConstants.EQUAL;
        }
      }
    }
  }
}","/** 
 * Compare two bounds in transposed way.
 * @param bo1
 * @param bo2
 * @return
 */
public static final int compareTransposed(Bounds bo1,Bounds bo2){
  final double dMinY1=bo1.getTop() + bo1.getHeight();
  final double dMinY2=bo2.getTop() + bo2.getHeight();
  double dDiff=dMinY1 - dMinY2;
  if (dDiff != 0) {
    return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
  }
 else {
    final double dMaxY1=bo1.getTop();
    final double dMaxY2=bo2.getTop();
    dDiff=dMaxY1 - dMaxY2;
    if (dDiff != 0) {
      return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
    }
 else {
      final double dMinX1=bo1.getLeft();
      final double dMinX2=bo2.getLeft();
      dDiff=dMinX1 - dMinX2;
      if (dDiff != 0) {
        return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
      }
 else {
        final double dMaxX1=bo1.getLeft() + bo1.getWidth();
        final double dMaxX2=bo2.getLeft() + bo2.getWidth();
        dDiff=dMaxX1 - dMaxX2;
        if (dDiff != 0) {
          return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
        }
 else {
          return IConstants.EQUAL;
        }
      }
    }
  }
}",0.4929078014184397
66252,"/** 
 * @param qd1
 * @param qd2
 * @param onIVMode
 * @return
 * @throws DataException
 */
public static boolean isQueryDefnEqual(int mode,IBaseQueryDefinition qd1,IBaseQueryDefinition qd2,boolean onIVMode,boolean isSubQueryNameCared) throws DataException {
  if (qd1 == qd2)   return true;
  if (qd1 == null || qd2 == null)   return false;
  if (!isEqualSorts(qd1.getSorts(),qd2.getSorts()))   return false;
  if (!isEqualFilters(qd1.getFilters(),qd2.getFilters()))   return false;
  if (!isEqualBindings(qd1.getBindings(),qd2.getBindings()))   return false;
  if (!isEqualGroups(qd1.getGroups(),qd2.getGroups(),onIVMode))   return false;
  if (qd1.usesDetails() != qd2.usesDetails())   return false;
  if (qd1.getMaxRows() != qd2.getMaxRows())   return false;
  if (mode == DataEngineContext.MODE_PRESENTATION && qd1.cacheQueryResults() != qd2.cacheQueryResults())   return false;
  if (!isSubQueryEquals(qd1.getSubqueries(),qd2.getSubqueries(),onIVMode))   return false;
  if (qd1 instanceof IQueryDefinition && qd2 instanceof IQueryDefinition) {
    IQueryDefinition queryDefn1=(IQueryDefinition)qd1;
    IQueryDefinition queryDefn2=(IQueryDefinition)qd2;
    if (!onIVMode) {
      if (!isEqualString(queryDefn1.getDataSetName(),queryDefn2.getDataSetName()))       return false;
      if (!isInputParameterBindingEquals(queryDefn1.getInputParamBindings(),queryDefn2.getInputParamBindings()))       return false;
      if (!isColumnProjectionEquals(queryDefn1.getColumnProjection(),queryDefn2.getColumnProjection()))       return false;
    }
    IQueryExecutionHints hint1=queryDefn1.getQueryExecutionHints();
    IQueryExecutionHints hint2=queryDefn2.getQueryExecutionHints();
    if (!compareHints(hint1,hint2))     return false;
  }
  if (qd1 instanceof ISubqueryDefinition && qd2 instanceof ISubqueryDefinition) {
    ISubqueryDefinition subQueryDefn1=(ISubqueryDefinition)qd1;
    ISubqueryDefinition subQueryDefn2=(ISubqueryDefinition)qd2;
    if (isSubQueryNameCared && !isEqualString(subQueryDefn1.getName(),subQueryDefn2.getName()))     return false;
    if (subQueryDefn1.applyOnGroup() != subQueryDefn2.applyOnGroup())     return false;
  }
  return true;
}","/** 
 * @param qd1
 * @param qd2
 * @param onIVMode
 * @return
 * @throws DataException
 */
public static boolean isQueryDefnEqual(int mode,IBaseQueryDefinition qd1,IBaseQueryDefinition qd2,boolean onIVMode,boolean isSubQueryNameCared) throws DataException {
  if (qd1 == qd2)   return true;
  if (qd1 == null || qd2 == null)   return false;
  if (!isEqualSorts(qd1.getSorts(),qd2.getSorts()))   return false;
  if (!isEqualFilters(qd1.getFilters(),qd2.getFilters()))   return false;
  if (!isEqualBindings(qd1.getBindings(),qd2.getBindings()))   return false;
  if (!isEqualGroups(qd1.getGroups(),qd2.getGroups(),onIVMode))   return false;
  if (qd1.usesDetails() != qd2.usesDetails())   return false;
  if (qd1.getMaxRows() >= 0 && qd2.getMaxRows() >= 0 && qd1.getMaxRows() != qd2.getMaxRows())   return false;
  if ((qd1.getMaxRows() > 0 && qd2.getMaxRows() < 0) || (qd1.getMaxRows() < 0 && qd2.getMaxRows() > 0))   return false;
  if (mode == DataEngineContext.MODE_PRESENTATION && qd1.cacheQueryResults() != qd2.cacheQueryResults())   return false;
  if (!isSubQueryEquals(qd1.getSubqueries(),qd2.getSubqueries(),onIVMode))   return false;
  if (qd1 instanceof IQueryDefinition && qd2 instanceof IQueryDefinition) {
    IQueryDefinition queryDefn1=(IQueryDefinition)qd1;
    IQueryDefinition queryDefn2=(IQueryDefinition)qd2;
    if (!onIVMode) {
      if (!isEqualString(queryDefn1.getDataSetName(),queryDefn2.getDataSetName()))       return false;
      if (!isInputParameterBindingEquals(queryDefn1.getInputParamBindings(),queryDefn2.getInputParamBindings()))       return false;
      if (!isColumnProjectionEquals(queryDefn1.getColumnProjection(),queryDefn2.getColumnProjection()))       return false;
    }
    IQueryExecutionHints hint1=queryDefn1.getQueryExecutionHints();
    IQueryExecutionHints hint2=queryDefn2.getQueryExecutionHints();
    if (!compareHints(hint1,hint2))     return false;
  }
  if (qd1 instanceof ISubqueryDefinition && qd2 instanceof ISubqueryDefinition) {
    ISubqueryDefinition subQueryDefn1=(ISubqueryDefinition)qd1;
    ISubqueryDefinition subQueryDefn2=(ISubqueryDefinition)qd2;
    if (isSubQueryNameCared && !isEqualString(subQueryDefn1.getName(),subQueryDefn2.getName()))     return false;
    if (subQueryDefn1.applyOnGroup() != subQueryDefn2.applyOnGroup())     return false;
  }
  return true;
}",0.962372731297034
66253,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)     return Strategy.Complex;
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return Strategy.Complex;
  }
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)     return Strategy.Complex;
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}",0.9861431870669746
66254,"/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isCrosstabReference=referredHandle != null && ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)referredHandle).getExtensionName());
  if (referredHandle != null && isCrosstabReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,session.getModelAdaptor(),true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null);
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && isCrosstabReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}","/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isCrosstabReference=referredHandle != null && ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)referredHandle).getExtensionName());
  if (referredHandle != null && isCrosstabReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,session.getModelAdaptor(),true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null);
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  BIRTCubeResultSetEvaluator bcrse=null;
  if (referredHandle != null && isCrosstabReference) {
    bcrse=new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
 else {
    bcrse=new BIRTCubeResultSetEvaluator(cqr);
  }
  bcrse.setSizeLimit(getMaxRow());
  return bcrse;
}",0.9020656136087484
66255,"public boolean next(){
  try {
    if (!bSubCursor) {
      return mainEdgeCursor.next();
    }
    return subEdgeCursor.next();
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}","public boolean next(){
  try {
    if (!bSubCursor) {
      return hasNext(mainEdgeCursor);
    }
    return hasNext(subEdgeCursor);
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}",0.8333333333333334
66256,"@Override public boolean next(){
  iIndex++;
  try {
    if (subEdgeCursor != null) {
      if (subEdgeCursor.next()) {
        return true;
      }
      lstBreaks.add(Integer.valueOf(iIndex));
      subEdgeCursor.first();
      return mainEdgeCursor.next();
    }
    return mainEdgeCursor.next();
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}","@Override public boolean next(){
  iIndex++;
  try {
    if (subEdgeCursor != null) {
      if (hasNext(subEdgeCursor)) {
        return true;
      }
      lstBreaks.add(Integer.valueOf(iIndex));
      subEdgeCursor.first();
      return hasNext(mainEdgeCursor);
    }
    return hasNext(mainEdgeCursor);
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}",0.8563829787234043
66257,"public boolean next(){
  iIndex++;
  try {
    if (subEdgeCursor != null) {
      boolean hasNext=false;
      while (hasNext=subEdgeCursor.next()) {
        if (fSubPositionNodes.positionIsChanged()) {
          break;
        }
      }
      fSubPositionNodes.updatePosition();
      if (hasNext) {
        return true;
      }
      lstBreaks.add(Integer.valueOf(iIndex));
      subEdgeCursor.first();
      fSubPositionNodes.updatePosition();
      hasNext=false;
      while (hasNext=mainEdgeCursor.next()) {
        if (fMainPositionNodes.positionIsChanged()) {
          break;
        }
      }
      fMainPositionNodes.updatePosition();
      if (hasNext) {
        return true;
      }
    }
 else {
      boolean hasNext=false;
      while (hasNext=mainEdgeCursor.next()) {
        if (fMainPositionNodes.positionIsChanged()) {
          break;
        }
      }
      fMainPositionNodes.updatePosition();
      if (hasNext) {
        return true;
      }
    }
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}","public boolean next(){
  iIndex++;
  try {
    if (subEdgeCursor != null) {
      boolean hasNext=false;
      while (hasNext=hasNext(subEdgeCursor)) {
        if (fSubPositionNodes.positionIsChanged()) {
          break;
        }
      }
      fSubPositionNodes.updatePosition();
      if (hasNext) {
        return true;
      }
      lstBreaks.add(Integer.valueOf(iIndex));
      subEdgeCursor.first();
      fSubPositionNodes.updatePosition();
      hasNext=false;
      while (hasNext=hasNext(mainEdgeCursor)) {
        if (fMainPositionNodes.positionIsChanged()) {
          break;
        }
      }
      fMainPositionNodes.updatePosition();
      if (hasNext) {
        return true;
      }
    }
 else {
      boolean hasNext=false;
      while (hasNext=hasNext(mainEdgeCursor)) {
        if (fMainPositionNodes.positionIsChanged()) {
          break;
        }
      }
      fMainPositionNodes.updatePosition();
      if (hasNext) {
        return true;
      }
    }
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
  return false;
}",0.9799809342230696
66258,"/** 
 * Do grouping, and fill group indexes
 * @param stopsign
 * @throws DataException
 */
public void next(int rowId) throws DataException {
  int breakLevel;
  if (this.previous == null)   breakLevel=0;
 else   breakLevel=getBreakLevel(this.current,this.previous);
  try {
    for (int level=breakLevel; level < groupInstanceIndex.length; level++) {
      GroupInfo group=new GroupInfo();
      if (level != 0)       group.parent=groupInstanceIndex[level - 1] - 1;
      if (level == groupInstanceIndex.length - 1) {
        group.firstChild=rowId;
      }
 else {
        group.firstChild=groupInstanceIndex[level + 1];
      }
      groupInstanceIndex[level]++;
      if (this.streamManager != null) {
        IOUtil.writeInt(this.groupOutput[level],group.parent);
        IOUtil.writeInt(this.groupOutput[level],group.firstChild);
        this.groupOutput[level].flush();
        if (this.previous != null) {
          saveToAggrValuesToDocument(level,rowId);
        }
      }
    }
    this.aggrHelper.onRow(this.getStartingGroup(),this.getEndingGroup(),this.current,rowId);
    if (this.runningAggrs.size() > 0) {
      for (      String aggrName : this.runningAggrs) {
        IOUtil.writeObject(this.combinedAggrOutput,this.aggrHelper.getLatestAggrValue(aggrName));
      }
      IOUtil.writeLong(this.combinedAggrIndexOutput,this.combinedAggrRAOutput.getOffset());
    }
    if (this.next == null) {
      for (int i=0; i < this.aggrOutput.length; i++) {
        saveToAggrValuesToDocument(i,rowId);
      }
      if (this.overallAggrs.size() > 0 && this.combinedAggrIndexOutput != null) {
        this.combinedAggrIndexRAOutput.seek(0);
        IOUtil.writeLong(this.combinedAggrIndexOutput,this.combinedAggrRAOutput.getOffset());
        for (        String aggrName : overallAggrs) {
          IOUtil.writeObject(this.combinedAggrOutput,this.aggrHelper.getLatestAggrValue(aggrName));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","/** 
 * Do grouping, and fill group indexes
 * @param stopsign
 * @throws DataException
 */
public void next(int rowId) throws DataException {
  int breakLevel;
  if (this.previous == null)   breakLevel=0;
 else   breakLevel=getBreakLevel(this.current,this.previous);
  try {
    for (int level=breakLevel; level < groupInstanceIndex.length; level++) {
      GroupInfo group=new GroupInfo();
      if (level != 0)       group.parent=groupInstanceIndex[level - 1] - 1;
      if (level == groupInstanceIndex.length - 1) {
        group.firstChild=rowId;
      }
 else {
        group.firstChild=groupInstanceIndex[level + 1];
      }
      groupInstanceIndex[level]++;
      if (this.streamManager != null) {
        IOUtil.writeInt(this.groupOutput[level],group.parent);
        IOUtil.writeInt(this.groupOutput[level],group.firstChild);
        this.groupOutput[level].flush();
        if (this.previous != null) {
          saveToAggrValuesToDocument(level,rowId);
        }
      }
    }
    this.aggrHelper.onRow(this.getStartingGroup(),this.getEndingGroup(),this.current,rowId);
    if (this.runningAggrs.size() > 0 && this.combinedAggrOutput != null && this.combinedAggrRAOutput != null && this.combinedAggrIndexOutput != null) {
      for (      String aggrName : this.runningAggrs) {
        IOUtil.writeObject(this.combinedAggrOutput,this.aggrHelper.getLatestAggrValue(aggrName));
      }
      IOUtil.writeLong(this.combinedAggrIndexOutput,this.combinedAggrRAOutput.getOffset());
    }
    if (this.next == null) {
      for (int i=0; i < this.aggrOutput.length; i++) {
        saveToAggrValuesToDocument(i,rowId);
      }
      if (this.overallAggrs.size() > 0 && this.combinedAggrIndexOutput != null && this.combinedAggrIndexRAOutput != null && this.combinedAggrRAOutput != null && this.combinedAggrOutput != null) {
        this.combinedAggrIndexRAOutput.seek(0);
        IOUtil.writeLong(this.combinedAggrIndexOutput,this.combinedAggrRAOutput.getOffset());
        for (        String aggrName : overallAggrs) {
          IOUtil.writeObject(this.combinedAggrOutput,this.aggrHelper.getLatestAggrValue(aggrName));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9196428571428572
66259,"/** 
 * Returns default values of specified series object.
 * @param runtimeSeries specified series object.
 * @return
 */
public static Series getSeriesDefault(Series runtimeSeries){
  if (runtimeSeries instanceof BarSeries) {
    return DefaultValueProvider.defBarSeries();
  }
 else   if (runtimeSeries instanceof BubbleSeries) {
    return DefaultValueProvider.defBubbleSeries();
  }
 else   if (runtimeSeries instanceof ScatterSeries) {
    return DefaultValueProvider.defScatterSeries();
  }
 else   if (runtimeSeries instanceof DifferenceSeries) {
    return DefaultValueProvider.defDifferenceSeries();
  }
 else   if (runtimeSeries instanceof AreaSeries) {
    return DefaultValueProvider.defAreaSeries();
  }
 else   if (runtimeSeries instanceof LineSeries) {
    return DefaultValueProvider.defLineSeries();
  }
 else   if (runtimeSeries instanceof GanttSeries) {
    return DefaultValueProvider.defGanttSeries();
  }
 else   if (runtimeSeries instanceof DialSeries) {
    return DefaultValueProvider.defDialSeries();
  }
 else   if (runtimeSeries instanceof PieSeries) {
    return DefaultValueProvider.defPieSeries();
  }
 else   if (runtimeSeries instanceof StockSeries) {
    return DefaultValueProvider.defStockSeries();
  }
  return null;
}","/** 
 * Returns default values of specified series object.
 * @param runtimeSeries specified series object.
 * @return
 */
public static Series getSeriesDefault(Series runtimeSeries){
  if (runtimeSeries instanceof BarSeries) {
    return DefaultValueProvider.defBarSeries();
  }
 else   if (runtimeSeries instanceof BubbleSeries) {
    return DefaultValueProvider.defBubbleSeries();
  }
 else   if (runtimeSeries instanceof ScatterSeries) {
    return DefaultValueProvider.defScatterSeries();
  }
 else   if (runtimeSeries instanceof DifferenceSeries) {
    return DefaultValueProvider.defDifferenceSeries();
  }
 else   if (runtimeSeries instanceof AreaSeries) {
    return DefaultValueProvider.defAreaSeries();
  }
 else   if (runtimeSeries instanceof LineSeries) {
    return DefaultValueProvider.defLineSeries();
  }
 else   if (runtimeSeries instanceof GanttSeries) {
    return DefaultValueProvider.defGanttSeries();
  }
 else   if (runtimeSeries instanceof DialSeries) {
    return DefaultValueProvider.defDialSeries();
  }
 else   if (runtimeSeries instanceof PieSeries) {
    return DefaultValueProvider.defPieSeries();
  }
 else   if (runtimeSeries instanceof StockSeries) {
    return DefaultValueProvider.defStockSeries();
  }
 else   if (ChartDynamicExtension.isExtended(runtimeSeries)) {
    return (Series)new ChartExtensionValueUpdater().getDefault(ComponentPackage.eINSTANCE.getSeries(),""String_Node_Str"",runtimeSeries);
  }
  return null;
}",0.916390423572744
66260,"/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmRunTime The run time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmRunTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmRunTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  rtc.putState(StateKey.CHART_COMPUTATION_KEY,ChartComputationFactory.instance().createChartComputation());
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=(IChartScriptContext)rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    csc.setChartInstance(cmRunTime);
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    cmRunTime.getBlock().setBounds(bo);
    ((ChartScriptContext)icsc).setChartInstance(cmRunTime);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  ScriptHandler sh=(ScriptHandler)rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  ChartUtil.pruneInvisibleSeries(cmRunTime);
  checkDataEmpty(cmRunTime,rtc);
  prepareStyles(cmRunTime,externalProcessor);
  PlotComputation oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap<Series,LegendItemRenderingHints> lhmRenderers=new LinkedHashMap<Series,LegendItemRenderingHints>();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],goFactory.createBounds(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=goFactory.adjusteBounds(boPlot,insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  try {
    oComputations.compute(boPlot);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection<LegendItemRenderingHints> co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      br.set(br.getComputations().getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}","/** 
 * Builds and computes preferred sizes of various chart components offscreen using the provided display server.
 * @param ids A display server using which the chart may be built.
 * @param cmRunTime The run time chart model (bound to a dataset).
 * @param externalContext An external context object.
 * @param bo The bounds associated with the chart being built.
 * @param rtc Encapsulates the runtime environment for the build process.
 * @param externalProcessor An external style processor. If it's null, an implicit processor will be used.
 * @return An instance of a generated chart state that encapsulates builtchart information that may be subsequently rendered.
 * @throws ChartException
 */
public final GeneratedChartState build(IDisplayServer ids,Chart cmRunTime,Bounds bo,IExternalContext externalContext,RunTimeContext rtc,IStyleProcessor externalProcessor) throws ChartException {
  if (ids == null || cmRunTime == null || bo == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle());
  }
  if (rtc == null) {
    rtc=new RunTimeContext();
  }
  rtc.putState(StateKey.CHART_COMPUTATION_KEY,ChartComputationFactory.instance().createChartComputation());
  if (rtc.getULocale() == null) {
    rtc.setULocale(ULocale.getDefault());
  }
  IChartScriptContext icsc=(IChartScriptContext)rtc.getScriptContext();
  if (icsc == null) {
    ChartScriptContext csc=new ChartScriptContext();
    csc.setChartInstance(cmRunTime);
    csc.setExternalContext(externalContext);
    csc.setULocale(rtc.getULocale());
    csc.setLogger(logger);
    rtc.setScriptContext(csc);
    icsc=csc;
  }
 else   if (icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setLogger(logger);
    cmRunTime.getBlock().setBounds(bo);
    ((ChartScriptContext)icsc).setChartInstance(cmRunTime);
  }
  if (externalContext != null && icsc instanceof ChartScriptContext) {
    ((ChartScriptContext)icsc).setExternalContext(externalContext);
  }
  ScriptHandler sh=(ScriptHandler)rtc.getScriptHandler();
  if (sh == null) {
    sh=new ScriptHandler();
    rtc.setScriptHandler(sh);
    sh.setScriptClassLoader(rtc.getScriptClassLoader());
    sh.setScriptContext(icsc);
    final String sScriptContent=cmRunTime.getScript();
    if (externalContext != null && externalContext.getScriptable() != null) {
      sh.init(externalContext.getScriptable());
    }
 else {
      sh.init(null);
    }
    sh.setRunTimeModel(cmRunTime);
    if (sScriptContent != null && sScriptContent.length() > 0 && rtc.isScriptingEnabled()) {
      sh.register(null,sScriptContent);
    }
  }
  ScriptHandler.callFunction(sh,ScriptHandler.START_GENERATION,cmRunTime);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_GENERATION,cmRunTime,rtc.getScriptContext());
  ChartUtil.pruneInvisibleSeries(cmRunTime);
  checkDataEmpty(cmRunTime,rtc);
  prepareStyles(cmRunTime,externalProcessor,rtc);
  PlotComputation oComputations=null;
  if (cmRunTime instanceof ChartWithAxes) {
    try {
      if (cmRunTime.getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL) {
        oComputations=new PlotWith3DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
 else {
        oComputations=new PlotWith2DAxes(ids,(ChartWithAxes)cmRunTime,rtc);
      }
    }
 catch (    Exception e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,e);
    }
  }
 else   if (cmRunTime instanceof ChartWithoutAxes) {
    oComputations=new PlotWithoutAxes(ids,(ChartWithoutAxes)cmRunTime,rtc);
  }
  if (oComputations == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{cmRunTime},Messages.getResourceBundle(rtc.getULocale()));
  }
  final LinkedHashMap<Series,LegendItemRenderingHints> lhmRenderers=new LinkedHashMap<Series,LegendItemRenderingHints>();
  BaseRenderer[] brna=null;
  try {
    brna=BaseRenderer.instances(cmRunTime,rtc,oComputations);
    for (int i=0; i < brna.length; i++) {
      lhmRenderers.put(brna[i].getSeries(),new LegendItemRenderingHints(brna[i],goFactory.createBounds(0,0,0,0)));
    }
    rtc.setSeriesRenderers(lhmRenderers);
    rtc.setLegendLayoutHints(null);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  if (oComputations instanceof PlotWith2DAxes) {
    PlotWith2DAxes pwa=(PlotWith2DAxes)oComputations;
    pwa.initDynamicPlotBounds(bo);
  }
  Block bl=cmRunTime.getBlock();
  final LayoutManager lm=new LayoutManager(bl);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_LAYOUT,cmRunTime);
  lm.doLayout(ids,cmRunTime,bo,rtc);
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_LAYOUT,cmRunTime);
  Bounds boPlot=cmRunTime.getPlot().getBounds();
  Insets insPlot=cmRunTime.getPlot().getInsets();
  boPlot=goFactory.adjusteBounds(boPlot,insPlot);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_COMPUTATIONS,cmRunTime,oComputations);
  try {
    oComputations.compute(boPlot);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  ScriptHandler.callFunction(sh,ScriptHandler.AFTER_COMPUTATIONS,cmRunTime,oComputations);
  final Collection<LegendItemRenderingHints> co=lhmRenderers.values();
  final LegendItemRenderingHints[] lirha=co.toArray(new LegendItemRenderingHints[co.size()]);
  final int iSize=lhmRenderers.size();
  BaseRenderer br;
  for (int i=0; i < iSize; i++) {
    br=lirha[i].getRenderer();
    br.set(brna);
    br.set(ids);
    br.set(rtc);
    try {
      br.set(br.getComputations().getSeriesRenderingHints(br.getSeriesDefinition(),br.getSeries()));
      ScriptHandler.callFunction(sh,ScriptHandler.START_COMPUTE_SERIES,br.getSeries());
      br.compute(bo,cmRunTime.getPlot(),br.getSeriesRenderingHints());
      ScriptHandler.callFunction(sh,ScriptHandler.FINISH_COMPUTE_SERIES,br.getSeries());
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
    }
  }
  final GeneratedChartState gcs=new GeneratedChartState(ids,cmRunTime,lhmRenderers,rtc,oComputations);
  if (sh != null) {
    sh.setGeneratedChartState(gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.FINISH_GENERATION,gcs);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_GENERATION,gcs,rtc.getScriptContext());
  }
  return gcs;
}",0.9996882307092751
66261,"/** 
 * Prepare all default styles for various StyledComponent.
 * @param model
 * @param externalProcessor
 */
public final void prepareStyles(Chart model,IStyleProcessor externalProcessor){
  boolean updatedModel=false;
  if (externalProcessor != null) {
    updatedModel=externalProcessor.updateChart(model,null);
  }
  if (!updatedModel) {
    chartValueUpdater.update(model,null);
  }
  boolean needInheritingStyles=true;
  if (externalProcessor != null) {
    externalProcessor.processStyle(model);
    needInheritingStyles=externalProcessor.needInheritingStyles();
  }
  if (needInheritingStyles) {
    updateWithInhertingtyles(model,externalProcessor);
  }
}","/** 
 * Prepare all default styles for various StyledComponent.
 * @param model
 * @param externalProcessor
 */
public final void prepareStyles(Chart model,IStyleProcessor externalProcessor){
  prepareStyles(model,externalProcessor,null);
}",0.4878587196467991
66262,"private ITimePeriod populateBaseTimePeriod(ComputedColumnHandle periodHandle){
  String calculateType=periodHandle.getCalculationType();
  TimePeriod baseTimePeriod=null;
  if (IBuildInBaseTimeFunction.CURRENT_QUARTER.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_MONTH.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_30_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-30,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_60_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-60,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_90_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-90,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_12_MONTHS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-12,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.WEEK_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
        break;
      }
    }
    baseTimePeriod=new TimePeriod(0,getTimePeriodType(period1));
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null, n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(0 - Integer.valueOf(n),getTimePeriodType(period1));
  }
 else   if (IBuildInBaseTimeFunction.NEXT_N_PERIODS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null, period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
        break;
      }
    }
    baseTimePeriod=new TimePeriod(Integer.valueOf(n),getTimePeriodType(period1));
  }
  return baseTimePeriod;
}","private ITimePeriod populateBaseTimePeriod(ComputedColumnHandle periodHandle){
  String calculateType=periodHandle.getCalculationType();
  TimePeriod baseTimePeriod=null;
  if (IBuildInBaseTimeFunction.CURRENT_QUARTER.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_MONTH.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_30_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-30,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_60_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-60,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_90_DAYS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-90,TimePeriodType.DAY);
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_12_MONTHS.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(-12,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.WEEK_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.WEEK);
  }
 else   if (IBuildInBaseTimeFunction.MONTH_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.QUARTER_TO_DATE_LAST_YEAR.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_MONTH_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.MONTH);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_QUARTER_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.QUARTER);
  }
 else   if (IBuildInBaseTimeFunction.PREVIOUS_YEAR_TO_DATE.equals(calculateType)) {
    baseTimePeriod=new TimePeriod(0,TimePeriodType.YEAR);
  }
 else   if (IBuildInBaseTimeFunction.CURRENT_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType) || IBuildInBaseTimeFunction.PERIOD_TO_DATE_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
        break;
      }
    }
    baseTimePeriod=new TimePeriod(0,getTimePeriodType(period1));
  }
 else   if (IBuildInBaseTimeFunction.TRAILING_N_PERIOD_FROM_N_PERIOD_AGO.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String period1=null, n=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(0 - Integer.valueOf(n),getTimePeriodType(period1));
  }
 else   if (IBuildInBaseTimeFunction.NEXT_N_PERIODS.equals(calculateType)) {
    Iterator iter=periodHandle.calculationArgumentsIterator();
    String n=null, period1=null;
    while (iter.hasNext()) {
      CalculationArgumentHandle argument=(CalculationArgumentHandle)iter.next();
      if (IArgumentInfo.PERIOD_1.equals(argument.getName())) {
        period1=argument.getValue().getStringExpression();
      }
      if (IArgumentInfo.N_PERIOD1.equals(argument.getName())) {
        n=argument.getValue().getStringExpression();
      }
    }
    baseTimePeriod=new TimePeriod(Integer.valueOf(n),getTimePeriodType(period1));
  }
  return baseTimePeriod;
}",0.9982855183449536
66263,"protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Exception(""String_Node_Str""),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultLocaleNeutralString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}","protected void setUp() throws Exception {
  super.setUp();
  testObject=new Object[]{new Integer(1),new Integer(0),BigDecimal.valueOf(Integer.MAX_VALUE),BigDecimal.valueOf(Integer.MAX_VALUE + 1),BigDecimal.valueOf(Integer.MIN_VALUE),BigDecimal.valueOf(Integer.MIN_VALUE - 1),BigDecimal.valueOf(0l),Boolean.valueOf(true),Boolean.valueOf(false),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),Double.valueOf(""String_Node_Str""),Double.valueOf(""String_Node_Str""),null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueInputObject=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),String.valueOf(0l),""String_Node_Str"",""String_Node_Str"",((new GregorianCalendar(2004 + 1900,1,1)).getTime()).toString(),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  resultDate=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2004 + 1900,1,1)).getTime(),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),null,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultInteger=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),new Integer(1),new Integer(0),new Exception(""String_Node_Str""),new Integer((int)1.1),new Integer(0),null,new Exception(""String_Node_Str""),new Integer(""String_Node_Str""),new Integer(10),new Integer(10),new Integer(10)};
  resultBigDecimal=new Object[]{new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(Integer.MAX_VALUE),new BigDecimal(Integer.MAX_VALUE + 1),new BigDecimal(Integer.MIN_VALUE),new BigDecimal(Integer.MIN_VALUE - 1),new BigDecimal(0),new BigDecimal(1),new BigDecimal(0),new BigDecimal(((Date)resultDate[9]).getTime()),new BigDecimal(""String_Node_Str""),new BigDecimal(""String_Node_Str""),null,new Exception(""String_Node_Str""),new BigDecimal(""String_Node_Str""),new BigDecimal(10),new BigDecimal(10),new BigDecimal(10)};
  resultBoolean=new Object[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.TRUE,Boolean.FALSE,Boolean.TRUE,Boolean.FALSE,new Exception(""String_Node_Str""),Boolean.TRUE,Boolean.FALSE,null,new Exception(""String_Node_Str""),Boolean.TRUE,new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str"")};
  resultDouble=new Object[]{new Double(1),new Double(0),new Double(Integer.MAX_VALUE),new Double(Integer.MAX_VALUE + 1),new Double(Integer.MIN_VALUE),new Double(Integer.MIN_VALUE - 1),new Double(0),new Double(1),new Double(0),new Double(((Date)resultDate[9]).getTime()),new Double(1.1),new Double(0),null,new Exception(""String_Node_Str""),new Double(""String_Node_Str""),new Double(10),new Double(10),new Double(10)};
  resultString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",df.format(resultDate[9]),""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  resultLocaleNeutralString=new Object[]{""String_Node_Str"",""String_Node_Str"",String.valueOf(Integer.MAX_VALUE),String.valueOf(Integer.MAX_VALUE + 1),String.valueOf(Integer.MIN_VALUE),String.valueOf(Integer.MIN_VALUE - 1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  autoValueExpectedResult=new Object[]{new Integer(1),new Integer(0),new Integer(Integer.MAX_VALUE),new Integer(Integer.MAX_VALUE + 1),new Integer(Integer.MIN_VALUE),new Integer(Integer.MIN_VALUE - 1),new Integer(0),""String_Node_Str"",""String_Node_Str"",((Date)resultDate[9]).toString(),new Double(1.1),new Integer(0),null,new Integer(1),""String_Node_Str"",new Integer(""String_Node_Str""),(new GregorianCalendar(2005,10 - 1,11)).getTime(),(new GregorianCalendar(2005,10 - 1,11,2,30)).getTime(),(new GregorianCalendar(2005,10 - 1,11,14,25,46)).getTime()};
  testObjectDecimal=new Object[]{new Double(Double.NaN),new Double(Double.POSITIVE_INFINITY),new Double(Double.NEGATIVE_INFINITY),new Double(Double.MAX_VALUE),new Double(Double.MIN_VALUE)};
  resultObjectDecimal=new Object[]{new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new Exception(""String_Node_Str""),new BigDecimal(new Double(Double.MAX_VALUE).toString()),new BigDecimal(new Double(Double.MIN_VALUE).toString())};
  testObjectDouble=new Object[]{new Float(1)};
  resultObjectDouble=new Object[]{new Double(1)};
}",0.9985729874926552
66264,"/** 
 * Number -> Boolean 0 		-> false others 	-> true String -> Boolean ""true"" 	-> true (ignore case) ""false"" -> false (ignore case) other string will throw an exception Date -> Boolean throw exception
 * @param source
 * @return
 * @throws BirtException
 */
public static Boolean toBoolean(Object source) throws BirtException {
  if (source == null)   return Boolean.FALSE;
  if (source instanceof Boolean) {
    return (Boolean)source;
  }
 else   if (source instanceof Number) {
    if (((Number)source).doubleValue() == 0)     return Boolean.FALSE;
    return Boolean.TRUE;
  }
 else   if (source instanceof String) {
    if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.TRUE;
 else     if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.FALSE;
 else {
      try {
        if (Double.parseDouble((String)source) == 0)         return Boolean.FALSE;
 else         return Boolean.TRUE;
      }
 catch (      NumberFormatException e) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}","/** 
 * Number -> Boolean 0 		-> false others 	-> true String -> Boolean ""true"" 	-> true (ignore case) ""false"" -> false (ignore case) other string will throw an exception Date -> Boolean throw exception
 * @param source
 * @return
 * @throws BirtException
 */
public static Boolean toBoolean(Object source) throws BirtException {
  if (source == null)   return null;
  if (source instanceof Boolean) {
    return (Boolean)source;
  }
 else   if (source instanceof Number) {
    if (((Number)source).doubleValue() == 0)     return Boolean.FALSE;
    return Boolean.TRUE;
  }
 else   if (source instanceof String) {
    if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.TRUE;
 else     if (((String)source).equalsIgnoreCase(""String_Node_Str""))     return Boolean.FALSE;
 else {
      try {
        if (Double.parseDouble((String)source) == 0)         return Boolean.FALSE;
 else         return Boolean.TRUE;
      }
 catch (      NumberFormatException e) {
        throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
      }
    }
  }
 else {
    throw new CoreException(ResourceConstants.CONVERT_FAILS,new Object[]{source.toString(),""String_Node_Str""});
  }
}",0.9931754315535928
66265,"/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
      saveGeneralACL();
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  this.loadGeneralACL();
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}","/** 
 * Constructor.
 * @param engine
 * @throws BirtException 
 */
public DataEngineSession(DataEngineImpl engine) throws BirtException {
  Object[] params={engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.engine=engine;
  this.scope=engine.getContext().getJavaScriptScope();
  this.stopSign=new StopSign();
  IDataScriptEngine scriptEngine=(IDataScriptEngine)engine.getContext().getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME);
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(scriptEngine.getJSContext(engine.getContext().getScriptContext()));
  }
  new CoreJavaScriptInitializer().initialize(scriptEngine.getJSContext(engine.getContext().getScriptContext()),scope);
  tempDir=engine.getContext().getTmpdir() + ""String_Node_Str"" + engine.hashCode()+ ""String_Node_Str""+ getCount()+ File.separator;
  this.dataSetCacheManager=new DataSetCacheManager(this);
  this.cancelManager=new CancelManager();
  classLoaderHolder.set(engine.getContext().getClassLoader());
  engine.addShutdownListener(new IShutdownListener(){
    public void dataEngineShutdown(){
      classLoaderHolder.set(null);
      houseKeepCancelManager();
      saveGeneralACL();
      if (emtpryIDStream != null)       try {
        emtpryIDStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
);
  engine.addShutdownListener(new ReportDocumentShutdownListener(this));
  this.queryResultIDUtil=new QueryResultIDUtil();
  this.loadGeneralACL();
  int currentQueryID=0;
  if (engine.getContext().getDocReader() != null) {
    try {
      if (engine.getContext().getDocReader().exists(DataEngineContext.QUERY_STARTING_ID)) {
        RAInputStream stream=engine.getContext().getDocReader().getInputStream(DataEngineContext.QUERY_STARTING_ID);
        currentQueryID=stream.readInt();
        stream.close();
      }
    }
 catch (    IOException e) {
    }
  }
  this.queryResultIDUtil=new QueryResultIDUtil(currentQueryID);
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.9691586479151246
66266,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData(null,null,new HashMap());
    StreamManager manager=new StreamManager(getEngineContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn)) {
      if (PLSUtil.needUpdateDataSet(queryDefn,manager)) {
        if (getEngineContext().getDocWriter() != null) {
          populatePLSDataSetData(eventHandler,manager);
          dataSetResult.close();
          rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
          dataSetResult=rdLoad.loadDataSetData(null,null,null);
        }
 else {
          org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=null;
          if (queryDefn.isSummaryQuery()) {
            docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator2(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn.getGroups().size(),queryDefn.isSummaryQuery(),queryDefn);
          }
 else {
            docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn);
          }
          PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
          IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession());
          dataSetResult.close();
          cleanUpOldRD();
          return resultIterator;
        }
      }
 else {
        cleanUpOldRD();
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession());
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    if (rdLoad.isEmptyQueryResultID(realBasedQueryID)) {
      return new EmptyResultIterator();
    }
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData(null,null,new HashMap());
    StreamManager manager=new StreamManager(getEngineContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn)) {
      if (PLSUtil.needUpdateDataSet(queryDefn,manager)) {
        if (getEngineContext().getDocWriter() != null) {
          populatePLSDataSetData(eventHandler,manager);
          dataSetResult.close();
          rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
          dataSetResult=rdLoad.loadDataSetData(null,null,null);
        }
 else {
          org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=null;
          if (queryDefn.isSummaryQuery()) {
            docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator2(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn.getGroups().size(),queryDefn.isSummaryQuery(),queryDefn);
          }
 else {
            docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn);
          }
          PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
          IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession());
          dataSetResult.close();
          cleanUpOldRD();
          return resultIterator;
        }
      }
 else {
        cleanUpOldRD();
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession());
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9779112159553937
66267,"public IResultMetaData getResultMetaData() throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
  return rdLoad.loadResultMetaData();
}","public IResultMetaData getResultMetaData() throws DataException {
  RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
  if (rdLoad.isEmptyQueryResultID(realBasedQueryID)) {
    return new ResultMetaData(new ResultClass(new ArrayList()));
  }
  return rdLoad.loadResultMetaData();
}",0.7315436241610739
66268,"private void doSaveBasic() throws DataException {
  if (needsSaveToDoc() == false)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(this.odiResult,this.idInfo.getGroupLevel(),this.idInfo.getSubQueryInfo());
  }
}","private void doSaveBasic() throws DataException {
  if (needsSaveToDoc() == false || skipSaveEmpty)   return;
  if (isBasicSaved == false) {
    isBasicSaved=true;
    this.getRdSave().saveResultIterator(this.odiResult,this.idInfo.getGroupLevel(),this.idInfo.getSubQueryInfo());
  }
}",0.969147005444646
66269,"/** 
 * @throws DataException
 */
private void doSave(Map valueMap,boolean finish) throws DataException {
  if (needsSaveToDoc() == false)   return;
  doSaveBasic();
  if (finish == false)   this.rdSave.saveExprValue(odiResult.getCurrentResultIndex(),valueMap);
 else {
    this.rdSave.saveFinish(odiResult.getRowCount() - 1);
  }
}","/** 
 * @throws DataException
 */
private void doSave(Map valueMap,boolean finish) throws DataException {
  if (needsSaveToDoc() == false || skipSaveEmpty)   return;
  doSaveBasic();
  if (finish == false)   this.rdSave.saveExprValue(odiResult.getCurrentResultIndex(),valueMap);
 else {
    this.rdSave.saveFinish(odiResult.getRowCount() - 1);
  }
}",0.97503671071953
66270,"/** 
 * @param context
 * @param queryDefn
 * @param odiResult
 * @param idInfo
 */
RDSaveHelper(DataEngineContext context,IBaseQueryDefinition queryDefn,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,IDInfo idInfo){
  this.context=context;
  this.queryDefn=queryDefn;
  this.odiResult=odiResult;
  this.idInfo=idInfo;
}","/** 
 * @param context
 * @param queryDefn
 * @param odiResult
 * @param idInfo
 */
RDSaveHelper(DataEngineContext context,IBaseQueryDefinition queryDefn,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,IDInfo idInfo){
  this.context=context;
  this.queryDefn=queryDefn;
  this.odiResult=odiResult;
  this.idInfo=idInfo;
  try {
    if (odiResult.getRowCount() == 0 && resultService.getQueryDefn().getParentQuery() != null) {
      if (resultService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
        resultService.getSession().getEmptyNestedResultSetID().add(resultService.getQueryResults().getID());
        resultService.getSession().updateNestedEmptyQueryID(resultService.getQueryResults().getID());
      }
      skipSaveEmpty=true;
    }
  }
 catch (  DataException e) {
  }
}",0.5709372312983663
66271,"public void writeBlock(int blockId,byte[] bytes) throws IOException {
  int writeSize=bytes.length;
  if (writeSize > BLOCK_SIZE) {
    writeSize=BLOCK_SIZE;
  }
  file.seek(blockId * BLOCK_SIZE);
  file.write(bytes,0,writeSize);
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
}","public void writeBlock(int blockId,byte[] bytes) throws IOException {
  int writeSize=bytes.length;
  if (writeSize > BLOCK_SIZE) {
    writeSize=BLOCK_SIZE;
  }
  file.seek((long)blockId * BLOCK_SIZE);
  file.write(bytes,0,writeSize);
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
}",0.98989898989899
66272,"public void readBlock(int blockId,byte[] bytes) throws IOException {
  input.refresh();
  input.seek(blockId * BLOCK_SIZE);
  input.read(bytes);
}","public void readBlock(int blockId,byte[] bytes) throws IOException {
  input.refresh();
  input.seek((long)blockId * BLOCK_SIZE);
  input.read(bytes);
}",0.9798657718120806
66273,"public void writeBlock(int blockId,byte[] bytes) throws IOException {
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
  output.seek(blockId * BLOCK_SIZE);
  output.write(bytes);
  output.flush();
}","public void writeBlock(int blockId,byte[] bytes) throws IOException {
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
  output.seek((long)blockId * BLOCK_SIZE);
  output.write(bytes);
  output.flush();
}",0.986046511627907
66274,"public void readBlock(int blockId,byte[] bytes) throws IOException {
  input.refresh();
  input.seek(blockId * BLOCK_SIZE);
  input.read(bytes);
}","public void readBlock(int blockId,byte[] bytes) throws IOException {
  input.refresh();
  input.seek((long)blockId * BLOCK_SIZE);
  input.read(bytes);
}",0.9798657718120806
66275,"public void writeBlock(int blockId,byte[] bytes) throws IOException {
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
  output.seek(blockId * BLOCK_SIZE);
  output.write(bytes);
  output.flush();
}","public void writeBlock(int blockId,byte[] bytes) throws IOException {
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
  output.seek((long)blockId * BLOCK_SIZE);
  output.write(bytes);
  output.flush();
}",0.986046511627907
66276,"private void assertEqualComputedMeasure(IComputedMeasureDefinition md1,IComputedMeasureDefinition md2) throws DataException {
  assertEqualMeasure(md1,md2);
  assertEquals(md1.getType(),md2.getType());
  assertEqualExpr(md1.getExpression(),md2.getExpression());
}","private void assertEqualComputedMeasure(IComputedMeasureDefinition md1,IComputedMeasureDefinition md2) throws DataException {
  assertEqualMeasure(md1,md2);
  assertEquals(md1.getDataType(),md2.getDataType());
  assertEqualExpr(md1.getExpression(),md2.getExpression());
}",0.9850187265917604
66277,"/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param iv
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param dY1
 * @param dY2
 * @param bTicksAbove
 * @param bTicksBelow
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithValueOrigin(double dBlockY,double dBlockHeight,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,final IntersectionValue iv,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,double dY1,double dY2,final boolean bTicksAbove,final boolean bTicksBelow,final boolean bForwardScale) throws ChartException {
  double dDeltaY1=0, dDeltaY2=0;
  if (iXLabelLocation == ABOVE) {
    double dH1=(bTicksAbove ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    double dH2=(bTicksBelow ? getTickSize() : 0);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
    }
 else {
      axPH.setShowLabels(false);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY1 < dBlockY) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dT_RI=dBlockY - dY1;
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dAMin_RI=da[1] - dY;
          dEnd=da[1];
          dStart=(dT_RI / dAMin_RI) * dAMin_AMax + da[0];
          if (dStart < dBlockY) {
            dStart=dBlockY;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dAMin_RI=da[0] - dY;
          dStart=da[0];
          dEnd=(dT_RI / dAMin_RI) * dAMin_AMax + da[1];
          if (dEnd < dBlockY) {
            dEnd=dBlockY;
            bForceBreak=true;
          }
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY1=dY - dDeltaY1;
        dY2=dY + dDeltaY2;
      }
 while (Math.abs(dY1 - dBlockY) > 1 && !bForceBreak);
    }
  }
 else   if (iXLabelLocation == BELOW) {
    double dH1=(bTicksAbove ? getTickSize() : 0);
    double dH2=(bTicksBelow ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY2 > dBlockY + dBlockHeight) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dX2_X1=dY2 - (dBlockY + dBlockHeight);
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dX2_AMax=dY - da[0];
          dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dStart=da[0];
          if (dEnd > dBlockY + dBlockHeight) {
            dEnd=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dX2_AMax=dY - da[1];
          dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dEnd=da[1];
          if (dStart > dBlockY + dBlockHeight) {
            dStart=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
        if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
          bForceBreak=true;
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY2=dY + dDeltaY2;
        dY1=dY - dDeltaY1;
      }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
    }
  }
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}","/** 
 * @param dBlockY
 * @param dBlockHeight
 * @param aax
 * @param axPH
 * @param scY
 * @param iXLabelLocation
 * @param iYLabelLocation
 * @param iXTitleLocation
 * @param laYAxisLabels
 * @param iv
 * @param dXAxisLabelsThickness
 * @param dDecorationThickness
 * @param dXAxisTitleThickness
 * @param dHTotal
 * @param dY
 * @param dY1
 * @param dY2
 * @param bTicksAbove
 * @param bTicksBelow
 * @param bForwardScale
 * @return
 * @throws ChartException
 */
private double adjustVerticalWithValueOrigin(double dBlockY,double dBlockHeight,AllAxes aax,final OneAxis axPH,final AutoScale scY,final int iXLabelLocation,final int iYLabelLocation,final int iXTitleLocation,final Label laYAxisLabels,final IntersectionValue iv,double dXAxisLabelsThickness,double[] dDecorationThickness,double dXAxisTitleThickness,double dHTotal,double dY,double dY1,double dY2,final boolean bTicksAbove,final boolean bTicksBelow,final boolean bForwardScale) throws ChartException {
  double dDeltaY1=0, dDeltaY2=0;
  if (iXLabelLocation == ABOVE) {
    double dH1=(bTicksAbove ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[0]);
    double dH2=(bTicksBelow ? getTickSize() : 0);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
    }
 else {
      axPH.setShowLabels(false);
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY1 < dBlockY) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dT_RI=dBlockY - dY1;
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dAMin_RI=da[1] - dY;
          dEnd=da[1];
          dStart=(dT_RI / dAMin_RI) * dAMin_AMax + da[0];
          if (dStart < dBlockY) {
            dStart=dBlockY;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dAMin_RI=da[0] - dY;
          dStart=da[0];
          dEnd=(dT_RI / dAMin_RI) * dAMin_AMax + da[1];
          if (dEnd < dBlockY) {
            dEnd=dBlockY;
            bForceBreak=true;
          }
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY1=dY - dDeltaY1;
        dY2=dY + dDeltaY2;
      }
 while (Math.abs(dY1 - dBlockY) > 1 && !bForceBreak);
    }
 else     if (dY2 > dBlockY + dBlockHeight) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dX2_X1=dY2 - (dBlockY + dBlockHeight);
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dX2_AMax=dY - da[0];
          dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dStart=da[0];
          if (dEnd > dBlockY + dBlockHeight) {
            dEnd=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dX2_AMax=dY - da[1];
          dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dEnd=da[1];
          if (dStart > dBlockY + dBlockHeight) {
            dStart=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
        if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
          bForceBreak=true;
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY2=dY + dDeltaY2;
        dY1=dY - dDeltaY1;
      }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
    }
  }
 else   if (iXLabelLocation == BELOW) {
    double dH1=(bTicksAbove ? getTickSize() : 0);
    double dH2=(bTicksBelow ? getTickSize() : 0) + Math.max(dXAxisLabelsThickness,dDecorationThickness[1]);
    if (dH1 + dH2 <= dHTotal) {
      dY1-=dH1;
      dY2+=dH2;
    }
    if (iXTitleLocation == ABOVE) {
      dY1-=dXAxisTitleThickness;
    }
 else     if (iXTitleLocation == BELOW) {
      dY2+=dXAxisTitleThickness;
    }
    dDeltaY1=dY - dY1;
    dDeltaY2=dY2 - dY;
    if (dY2 > dBlockY + dBlockHeight) {
      final Object[] oaMinMax=scY.getMinMax();
      boolean bForceBreak=false;
      do {
        scY.setEndPoints(scY.getStart() + scY.getStartShift(),scY.getEnd() - scY.getEndShift());
        scY.resetShifts();
        double[] da=scY.getEndPoints();
        double dX2_X1=dY2 - (dBlockY + dBlockHeight);
        double dStart, dEnd;
        if (bForwardScale) {
          double dAMin_AMax=da[1] - da[0];
          double dX2_AMax=dY - da[0];
          dEnd=da[1] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dStart=da[0];
          if (dEnd > dBlockY + dBlockHeight) {
            dEnd=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
 else {
          double dAMin_AMax=da[0] - da[1];
          double dX2_AMax=dY - da[1];
          dStart=da[0] - (dX2_X1 / dX2_AMax) * dAMin_AMax;
          dEnd=da[1];
          if (dStart > dBlockY + dBlockHeight) {
            dStart=dBlockY + dBlockHeight;
            bForceBreak=true;
          }
        }
        if (ChartUtil.mathEqual(Math.abs(dEnd - dStart),0)) {
          bForceBreak=true;
        }
        scY.setEndPoints(dStart,dEnd);
        scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
        if (!scY.isStepFixed()) {
          while (!scY.checkFit(ids,laYAxisLabels,iYLabelLocation)) {
            if (!scY.zoomOut()) {
              bForceBreak=true;
              break;
            }
            scY.updateAxisMinMax(oaMinMax[0],oaMinMax[1]);
            int tickCount=scY.computeTicks(ids,laYAxisLabels,iYLabelLocation,VERTICAL,dStart,dEnd,true,aax);
            if (scY.getUnit() != null && asInteger(scY.getUnit()) == Calendar.YEAR && tickCount <= 3 || isSharedScale()) {
              bForceBreak=true;
              break;
            }
          }
        }
        dY=getLocation(scY,iv);
        dY2=dY + dDeltaY2;
        dY1=dY - dDeltaY1;
      }
 while (Math.abs(dY2 - (dBlockY + dBlockHeight)) > 1 && !bForceBreak);
    }
  }
  axPH.setTitleCoordinate((iXTitleLocation == ABOVE) ? dY1 - 1 : dY2 + 1 - dXAxisTitleThickness);
  return dY;
}",0.7779224537037037
66278,"private void updateAxisTitleLocationNLabelSize(final OneAxis axPV,final int iYTitleLocation,double dYAxisTitleThickness,double dWTotal,double dX,double dX1,double dX2){
  if (axPV.isShowLabels() && axPV.getScale().isCategoryScale()) {
    AutoScale.AxisLabelInfo ali=axPV.getScale().getAxisLabelInfo();
    if (axPV.getLabelPosition() == IConstants.LEFT) {
      double labelThickness=dX - getTickSize() - ((iYTitleLocation == LEFT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX - 1 - getTickSize()- labelThickness- dYAxisTitleThickness : dX2 + 1 - dYAxisTitleThickness);
    }
 else     if (axPV.getLabelPosition() == IConstants.RIGHT) {
      double labelThickness=dWTotal - dX - getTickSize()- ((iYTitleLocation == RIGHT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX + 1 + labelThickness);
    }
  }
 else {
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
}","private void updateAxisTitleLocationNLabelSize(final OneAxis axPV,final int iYTitleLocation,double dYAxisTitleThickness,double dWTotal,double dX,double dX1,double dX2){
  if (axPV.isShowLabels() && axPV.getScale().isCategoryScale()) {
    AutoScale.AxisLabelInfo ali=axPV.getScale().getAxisLabelInfo();
    if (axPV.getLabelPosition() == IConstants.LEFT) {
      double labelThickness=dX - dX1 - getTickSize()- ((iYTitleLocation == LEFT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX - 1 - getTickSize()- labelThickness- dYAxisTitleThickness : dX2 + 1 - dYAxisTitleThickness);
    }
 else     if (axPV.getLabelPosition() == IConstants.RIGHT) {
      double labelThickness=dX2 - dX - getTickSize()- ((iYTitleLocation == RIGHT) ? dYAxisTitleThickness : 0);
      labelThickness=ali.getValidSize(labelThickness);
      ali.dMaxSize=labelThickness;
      axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX + 1 + labelThickness);
    }
  }
 else {
    axPV.setTitleCoordinate((iYTitleLocation == LEFT) ? dX1 - 1 : dX2 + 1 - dYAxisTitleThickness);
  }
}",0.9937212222687316
66279,"public void readBlock(int blockId,byte[] bytes) throws IOException {
  input.refresh();
  input.seek(blockId * BLOCK_SIZE);
  input.read(bytes);
}","public void readBlock(int blockId,byte[] bytes) throws IOException {
  input.refresh();
  input.seek((long)blockId * BLOCK_SIZE);
  input.read(bytes);
}",0.9798657718120806
66280,"public IResultIterator getSecondaryIterator(String subQueryName,Scriptable scope) throws DataException {
  String parentQueryResultsID=null;
  if (this.subQueryName == null) {
    parentQueryResultsID=queryResultID;
  }
 else {
    parentQueryResultsID=queryResultID + ""String_Node_Str"" + this.subQueryName+ ""String_Node_Str""+ this.subQueryIndex;
  }
  QueryResults queryResults=null;
  try {
    queryResults=new QueryResults(tempDir,context,queryResultID,parentQueryResultsID,this.getResultMetaData(),subQueryName,this.exprResultSet.getCurrentIndex(),this.queryResults,null);
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  try {
    ResultIterator ri=(ResultIterator)queryResults.getResultIterator();
    ri.setSubQueryName(subQueryName);
    return ri;
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}","public IResultIterator getSecondaryIterator(String subQueryName,Scriptable scope) throws DataException {
  String queryResultsID=null;
  String baseQueryResultsID=null;
  int rootIdIdex=queryResultID.indexOf(""String_Node_Str"");
  if (rootIdIdex > -1)   baseQueryResultsID=queryResultID.substring(0,rootIdIdex);
 else   baseQueryResultsID=queryResultID;
  if (this.subQueryName == null) {
    queryResultsID=queryResultID;
  }
 else {
    queryResultsID=queryResultID + ""String_Node_Str"" + this.subQueryName+ ""String_Node_Str""+ this.subQueryIndex;
  }
  QueryResults queryResults=null;
  try {
    queryResults=new QueryResults(tempDir,context,baseQueryResultsID,queryResultsID,this.getResultMetaData(),subQueryName,this.exprResultSet.getCurrentIndex(),this.queryResults,null);
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  try {
    ResultIterator ri=(ResultIterator)queryResults.getResultIterator();
    ri.setSubQueryName(subQueryName);
    return ri;
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
}",0.8646580583452893
66281,"public void setBinding(ComputedColumnHandle binding){
  this.binding=binding;
  if (this.binding != null)   setAggregate(this.binding.getAggregateFunction() != null && !this.binding.getAggregateFunction().equals(""String_Node_Str""));
  if (this.binding != null) {
    setTimePeriod(this.binding.getTimeDimension() != null && this.binding.getTimeDimension().getExpression() != null);
  }
}","public void setBinding(ComputedColumnHandle binding){
  this.binding=binding;
  if (this.binding != null)   setAggregate(this.binding.getAggregateFunction() != null && !this.binding.getAggregateFunction().equals(""String_Node_Str""));
  if (this.binding != null) {
    setTimePeriod(this.binding.getTimeDimension() != null && !this.binding.getTimeDimension().equals(""String_Node_Str""));
  }
}",0.9369369369369368
66282,"private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  boolean isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),true);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    calculationType.select(0);
    handleCalculationSelectEvent();
  }
 else {
    ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
    String name=function.getName();
    int itemIndex=getItemIndex(names,name);
    calculationType.select(itemIndex);
    handleCalculationSelectEvent();
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
        }
      }
    }
  }
}","private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  boolean isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),true);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    calculationType.select(0);
    handleCalculationSelectEvent();
  }
 else {
    ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
    String name=function.getName();
    int itemIndex=getItemIndex(names,name);
    if (itemIndex >= 0) {
      calculationType.select(itemIndex);
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
        }
      }
    }
  }
}",0.9800148038490007
66283,"private void handleCalculationSelectEvent(){
  Control[] children=calculationComposite.getChildren();
  for (int i=0; i < children.length; i++) {
    children[i].dispose();
  }
  ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
  if (function == null) {
    ((GridData)calculationComposite.getLayoutData()).heightHint=0;
    ((GridData)calculationComposite.getLayoutData()).exclude=true;
  }
 else {
    calculationParamsMap.clear();
    List<IArgumentInfo> infos=function.getArguments();
    if (infos == null || infos.size() == 0) {
      ((GridData)calculationComposite.getLayoutData()).heightHint=0;
    }
 else {
      ((GridData)calculationComposite.getLayoutData()).exclude=false;
      ((GridData)calculationComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      int width=0;
      if (calculationComposite.getParent().getLayout() instanceof GridLayout) {
        Control[] controls=calculationComposite.getParent().getChildren();
        for (int i=0; i < controls.length; i++) {
          if (controls[i] instanceof Label && ((GridData)controls[i].getLayoutData()).horizontalSpan == 1) {
            int labelWidth=controls[i].getBounds().width - controls[i].getBorderWidth() * 2;
            if (labelWidth > width)             width=labelWidth;
          }
        }
      }
      for (int i=0; i < infos.size(); i++) {
        final String name=infos.get(i).getName();
        Label lblParam=new Label(calculationComposite,SWT.NONE);
        lblParam.setText(infos.get(i).getName() + ""String_Node_Str"");
        GridData gd=new GridData();
        gd.widthHint=lblParam.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
        if (gd.widthHint < width)         gd.widthHint=width;
        lblParam.setLayoutData(gd);
        final List<Period_Type> types=infos.get(i).getPeriodChoices();
        if (types != null && types.size() > 0) {
          final Combo cmbDataField=new Combo(calculationComposite,SWT.BORDER | SWT.READ_ONLY);
          cmbDataField.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).span(3,1).create());
          cmbDataField.setVisibleItemCount(30);
          initCalculationDataFields(cmbDataField,name,types);
          cmbDataField.addModifyListener(new ModifyListener(){
            public void modifyText(            ModifyEvent e){
              modifyDialogContent();
              validate();
              calculationParamsValueMap.put(name,cmbDataField.getText());
            }
          }
);
          calculationParamsMap.put(name,cmbDataField);
        }
 else {
          final Text txtParam=new Text(calculationComposite,SWT.BORDER);
          initCalculationTextFild(txtParam,name);
          txtParam.addModifyListener(new ModifyListener(){
            public void modifyText(            ModifyEvent e){
              modifyDialogContent();
              validate();
              calculationParamsValueMap.put(name,txtParam.getText());
            }
          }
);
          GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
          gridData.horizontalIndent=0;
          gridData.horizontalSpan=2;
          txtParam.setLayoutData(gridData);
          createExpressionButton(calculationComposite,txtParam);
          calculationParamsMap.put(name,txtParam);
        }
      }
    }
    List<IArgumentInfo> infos1=function.getArguments();
  }
  composite.layout(true,true);
  setContentSize(composite);
}","private void handleCalculationSelectEvent(){
  Control[] children=calculationComposite.getChildren();
  for (int i=0; i < children.length; i++) {
    children[i].dispose();
  }
  ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
  if (function == null) {
    ((GridData)calculationComposite.getLayoutData()).heightHint=0;
    ((GridData)calculationComposite.getLayoutData()).exclude=true;
  }
 else {
    calculationParamsMap.clear();
    List<IArgumentInfo> infos=function.getArguments();
    if (infos == null || infos.size() == 0) {
      ((GridData)calculationComposite.getLayoutData()).heightHint=0;
    }
 else {
      ((GridData)calculationComposite.getLayoutData()).exclude=false;
      ((GridData)calculationComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      int width=0;
      if (calculationComposite.getParent().getLayout() instanceof GridLayout) {
        Control[] controls=calculationComposite.getParent().getChildren();
        for (int i=0; i < controls.length; i++) {
          if (controls[i] instanceof Label && ((GridData)controls[i].getLayoutData()).horizontalSpan == 1) {
            int labelWidth=controls[i].getBounds().width - controls[i].getBorderWidth() * 2;
            if (labelWidth > width)             width=labelWidth;
          }
        }
      }
      for (int i=0; i < infos.size(); i++) {
        final String name=infos.get(i).getName();
        Label lblParam=new Label(calculationComposite,SWT.NONE);
        lblParam.setText(infos.get(i).getDisplayName() + ""String_Node_Str"");
        GridData gd=new GridData();
        gd.widthHint=lblParam.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
        if (gd.widthHint < width)         gd.widthHint=width;
        lblParam.setLayoutData(gd);
        final List<Period_Type> types=infos.get(i).getPeriodChoices();
        if (types != null && types.size() > 0) {
          final Combo cmbDataField=new Combo(calculationComposite,SWT.BORDER | SWT.READ_ONLY);
          cmbDataField.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).span(3,1).create());
          cmbDataField.setVisibleItemCount(30);
          initCalculationDataFields(cmbDataField,name,types);
          cmbDataField.addModifyListener(new ModifyListener(){
            public void modifyText(            ModifyEvent e){
              modifyDialogContent();
              validate();
              calculationParamsValueMap.put(name,cmbDataField.getText());
            }
          }
);
          calculationParamsMap.put(name,cmbDataField);
        }
 else {
          final Text txtParam=new Text(calculationComposite,SWT.BORDER);
          initCalculationTextFild(txtParam,name);
          txtParam.addModifyListener(new ModifyListener(){
            public void modifyText(            ModifyEvent e){
              modifyDialogContent();
              validate();
              calculationParamsValueMap.put(name,txtParam.getText());
            }
          }
);
          GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
          gridData.horizontalIndent=0;
          gridData.horizontalSpan=2;
          txtParam.setLayoutData(gridData);
          createExpressionButton(calculationComposite,txtParam);
          calculationParamsMap.put(name,txtParam);
        }
      }
    }
    List<IArgumentInfo> infos1=function.getArguments();
  }
  composite.layout(true,true);
  setContentSize(composite);
}",0.998974659440457
66284,"private String getFirstUseDimensonDisplayName(){
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  int count=crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    DimensionViewHandle viewHandle=crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
    if (isAvaliableTimeDimension(viewHandle.getCubeDimension())) {
      return ExpressionUtil.createJSDimensionExpression(viewHandle.getCubeDimension().getName(),null);
    }
  }
  count=crosstab.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    DimensionViewHandle viewHandle=crosstab.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
    if (isAvaliableTimeDimension(viewHandle.getCubeDimension())) {
      return ExpressionUtil.createJSDimensionExpression(viewHandle.getCubeDimension().getName(),null);
    }
  }
  return null;
}","private String getFirstUseDimensonDisplayName(){
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  int count=crosstab.getDimensionCount(ICrosstabConstants.COLUMN_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    DimensionViewHandle viewHandle=crosstab.getDimension(ICrosstabConstants.COLUMN_AXIS_TYPE,i);
    if (isAvaliableTimeDimension(viewHandle.getCubeDimension())) {
      return viewHandle.getCubeDimension().getName();
    }
  }
  count=crosstab.getDimensionCount(ICrosstabConstants.ROW_AXIS_TYPE);
  for (int i=0; i < count; i++) {
    DimensionViewHandle viewHandle=crosstab.getDimension(ICrosstabConstants.ROW_AXIS_TYPE,i);
    if (isAvaliableTimeDimension(viewHandle.getCubeDimension())) {
      return viewHandle.getCubeDimension().getName();
    }
  }
  return null;
}",0.9422850412249706
66285,"private String[] getTimeDimensions(){
  List<String> strs=new ArrayList<String>();
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  CubeHandle cube=crosstab.getCube();
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (isAvaliableTimeDimension(dimension)) {
      strs.add(ExpressionUtil.createJSDimensionExpression(dimension.getName(),null));
    }
  }
  return strs.toArray(new String[strs.size()]);
}","private String[] getTimeDimensions(){
  List<String> strs=new ArrayList<String>();
  CrosstabReportItemHandle crosstab=getCrosstabReportItemHandle();
  CubeHandle cube=crosstab.getCube();
  List list=cube.getPropertyHandle(ICubeModel.DIMENSIONS_PROP).getContents();
  for (int i=0; i < list.size(); i++) {
    DimensionHandle dimension=(DimensionHandle)list.get(i);
    if (isAvaliableTimeDimension(dimension)) {
      strs.add(dimension.getName());
    }
  }
  return strs.toArray(new String[strs.size()]);
}",0.8059981255857545
66286,"private void initTimeDimension(){
  String[] strs=getTimeDimensions();
  timeDimension.setItems(strs);
  if (getBinding() == null) {
    String str=getFirstUseDimensonDisplayName();
    if (str != null && str.length() > 0) {
      int itemIndex=getItemIndex(strs,str);
      if (itemIndex >= 0) {
        timeDimension.select(itemIndex);
      }
 else {
        timeDimension.select(0);
      }
    }
 else {
      timeDimension.select(0);
    }
  }
 else {
    ExpressionHandle value=getBinding().getTimeDimension();
    value.getExpression();
    String stringValue=value == null || value.getExpression() == null ? ""String_Node_Str"" : ((Expression)value.getValue()).getStringExpression();
    int itemIndex=getItemIndex(strs,stringValue);
    timeDimension.select(itemIndex);
  }
}","private void initTimeDimension(){
  String[] strs=getTimeDimensions();
  timeDimension.setItems(strs);
  if (getBinding() == null) {
    String str=getFirstUseDimensonDisplayName();
    if (str != null && str.length() > 0) {
      int itemIndex=getItemIndex(strs,str);
      if (itemIndex >= 0) {
        timeDimension.select(itemIndex);
      }
 else {
        timeDimension.select(0);
      }
    }
 else {
      timeDimension.select(0);
    }
  }
 else {
    String value=getBinding().getTimeDimension();
    int itemIndex=getItemIndex(strs,value);
    timeDimension.select(itemIndex);
  }
}",0.8075526506899056
66287,"public ComputedColumnHandle editBinding(ComputedColumnHandle binding) throws SemanticException {
  if (isAggregate()) {
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setAggregateFunction(getFunctionByDisplayName(cmbFunction.getText()).getName());
    ExpressionButtonUtil.saveExpressionButtonControl(txtFilter,binding,ComputedColumn.FILTER_MEMBER);
    binding.clearAggregateOnList();
    if (!isTimePeriod()) {
      String aggStr=cmbAggOn.getText();
      StringTokenizer token=new StringTokenizer(aggStr,""String_Node_Str"");
      while (token.hasMoreTokens()) {
        String agg=token.nextToken();
        if (!agg.equals(ALL))         binding.addAggregateOn(agg);
      }
    }
    binding.setExpression(null);
    binding.clearArgumentList();
    for (Iterator iterator=paramsMap.keySet().iterator(); iterator.hasNext(); ) {
      String arg=(String)iterator.next();
      String value=getControlValue(paramsMap.get(arg));
      if (value != null) {
        AggregationArgument argHandle=StructureFactory.createAggregationArgument();
        argHandle.setName(arg);
        if (ExpressionButtonUtil.getExpressionButton(paramsMap.get(arg)) != null) {
          ExpressionButtonUtil.saveExpressionButtonControl(paramsMap.get(arg),argHandle,AggregationArgument.VALUE_MEMBER);
        }
 else {
          Expression expression=new Expression(value,ExpressionType.JAVASCRIPT);
          argHandle.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
        }
        binding.addArgument(argHandle);
      }
    }
  }
 else {
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    if (ExpressionButtonUtil.getExpressionButton(txtExpression) != null) {
      ExpressionButtonUtil.saveExpressionButtonControl(txtExpression,binding,ComputedColumn.EXPRESSION_MEMBER);
    }
 else {
      Expression expression=new Expression(getControlValue(txtExpression),ExpressionType.JAVASCRIPT);
      binding.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
    }
  }
  if (isTimePeriod()) {
    ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    String dimensionName=timeDimension.getText();
    Expression dimensionExpression=new Expression(dimensionName,ExpressionType.JAVASCRIPT);
    binding.setExpressionProperty(ComputedColumn.TIME_DIMENSION_MEMBER,dimensionExpression);
    binding.setCalculationType(timeFunction.getName());
    binding.setProperty(ComputedColumn.CALCULATION_ARGUMENTS_MEMBER,null);
    for (Iterator iterator=calculationParamsMap.keySet().iterator(); iterator.hasNext(); ) {
      CalculationArgument argument=StructureFactory.createCalculationArgument();
      String arg=(String)iterator.next();
      argument.setName(arg);
      String value=getControlValue(calculationParamsMap.get(arg));
      if (value != null) {
        if (ExpressionButtonUtil.getExpressionButton(calculationParamsMap.get(arg)) != null) {
          Expression expr=getExpressionByControl(calculationParamsMap.get(arg));
          argument.setValue(expr);
        }
 else {
          Expression expr=new Expression(value,ExpressionType.JAVASCRIPT);
          argument.setValue(expr);
        }
        binding.addCalculationArgument(argument);
      }
    }
    if (todayButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY);
    }
 else     if (dateSelectionButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE);
      ExpressionButtonUtil.saveExpressionButtonControl(dateText,binding,ComputedColumn.REFERENCE_DATE_VALUE_MEMBER);
    }
 else     if (recentButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_ENDING_DATE_IN_DIMENSION);
    }
  }
  return binding;
}","public ComputedColumnHandle editBinding(ComputedColumnHandle binding) throws SemanticException {
  if (isAggregate()) {
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setAggregateFunction(getFunctionByDisplayName(cmbFunction.getText()).getName());
    ExpressionButtonUtil.saveExpressionButtonControl(txtFilter,binding,ComputedColumn.FILTER_MEMBER);
    binding.clearAggregateOnList();
    if (!isTimePeriod()) {
      String aggStr=cmbAggOn.getText();
      StringTokenizer token=new StringTokenizer(aggStr,""String_Node_Str"");
      while (token.hasMoreTokens()) {
        String agg=token.nextToken();
        if (!agg.equals(ALL))         binding.addAggregateOn(agg);
      }
    }
    binding.setExpression(null);
    binding.clearArgumentList();
    for (Iterator iterator=paramsMap.keySet().iterator(); iterator.hasNext(); ) {
      String arg=(String)iterator.next();
      String value=getControlValue(paramsMap.get(arg));
      if (value != null) {
        AggregationArgument argHandle=StructureFactory.createAggregationArgument();
        argHandle.setName(arg);
        if (ExpressionButtonUtil.getExpressionButton(paramsMap.get(arg)) != null) {
          ExpressionButtonUtil.saveExpressionButtonControl(paramsMap.get(arg),argHandle,AggregationArgument.VALUE_MEMBER);
        }
 else {
          Expression expression=new Expression(value,ExpressionType.JAVASCRIPT);
          argHandle.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
        }
        binding.addArgument(argHandle);
      }
    }
  }
 else {
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    if (ExpressionButtonUtil.getExpressionButton(txtExpression) != null) {
      ExpressionButtonUtil.saveExpressionButtonControl(txtExpression,binding,ComputedColumn.EXPRESSION_MEMBER);
    }
 else {
      Expression expression=new Expression(getControlValue(txtExpression),ExpressionType.JAVASCRIPT);
      binding.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
    }
  }
  if (isTimePeriod()) {
    ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    String dimensionName=timeDimension.getText();
    binding.setProperty(ComputedColumn.TIME_DIMENSION_MEMBER,dimensionName);
    binding.setCalculationType(timeFunction.getName());
    binding.setProperty(ComputedColumn.CALCULATION_ARGUMENTS_MEMBER,null);
    for (Iterator iterator=calculationParamsMap.keySet().iterator(); iterator.hasNext(); ) {
      CalculationArgument argument=StructureFactory.createCalculationArgument();
      String arg=(String)iterator.next();
      argument.setName(arg);
      String value=getControlValue(calculationParamsMap.get(arg));
      if (value != null) {
        if (ExpressionButtonUtil.getExpressionButton(calculationParamsMap.get(arg)) != null) {
          Expression expr=getExpressionByControl(calculationParamsMap.get(arg));
          argument.setValue(expr);
        }
 else {
          Expression expr=new Expression(value,ExpressionType.JAVASCRIPT);
          argument.setValue(expr);
        }
        binding.addCalculationArgument(argument);
      }
    }
    if (todayButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY);
    }
 else     if (dateSelectionButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE);
      ExpressionButtonUtil.saveExpressionButtonControl(dateText,binding,ComputedColumn.REFERENCE_DATE_VALUE_MEMBER);
    }
 else     if (recentButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_ENDING_DATE_IN_DIMENSION);
    }
  }
  return binding;
}",0.986586493987049
66288,"private String getTimeDimsionName(){
  String dimensionName=timeDimension.getText();
  Set<IDimLevel> sets;
  try {
    sets=ExpressionUtil.getReferencedDimLevel(dimensionName);
  }
 catch (  CoreException e) {
    return null;
  }
  Iterator<IDimLevel> iter=sets.iterator();
  if (iter.hasNext()) {
    return iter.next().getDimensionName();
  }
  return null;
}","private String getTimeDimsionName(){
  String dimensionName=timeDimension.getText();
  return dimensionName;
}",0.4482029598308668
66289,"/** 
 * Sets the value in extended property. If the property with specified name is not found, insert one property.
 * @param cm
 * @param propertyName
 * @param propertyValue
 * @return the property with set value
 * @since 2.5.1
 */
public static ExtendedProperty setExtendedProperty(Chart cm,String propertyName,String propertyValue){
  ExtendedProperty oldValue=getExtendedProperty(cm,propertyName);
  if (oldValue == null) {
    ExtendedProperty extendedProperty=AttributeFactoryImpl.init().createExtendedProperty();
    extendedProperty.setName(propertyName);
    extendedProperty.setValue(propertyValue);
    cm.getExtendedProperties().add(extendedProperty);
    return extendedProperty;
  }
  oldValue.setValue(propertyValue);
  return oldValue;
}","/** 
 * Sets the value in extended property. If the property with specified name is not found, insert one property.
 * @param cm
 * @param propertyName
 * @param propertyValue
 * @return the property with set value
 * @since 2.5.1
 */
public static ExtendedProperty setExtendedProperty(Chart cm,String propertyName,String propertyValue){
  ExtendedProperty oldValue=getExtendedProperty(cm,propertyName);
  if (oldValue == null) {
    ExtendedProperty extendedProperty=AttributeFactoryImpl.init().createExtendedProperty();
    extendedProperty.eAdapters().addAll(cm.eAdapters());
    extendedProperty.setName(propertyName);
    extendedProperty.setValue(propertyValue);
    cm.getExtendedProperties().add(extendedProperty);
    return extendedProperty;
  }
  oldValue.setValue(propertyValue);
  return oldValue;
}",0.9636247606892152
66290,"private int getColorByComboDefaultIndex(){
  return getChart().getLegend().isSetItemType() ? (LiteralHelper.legendItemTypeSet.getSafeNameIndex(getChart().getLegend().getItemType().getName()) + 1) : 0;
}","protected int getColorByComboDefaultIndex(){
  return getChart().getLegend().isSetItemType() ? (LiteralHelper.legendItemTypeSet.getSafeNameIndex(getChart().getLegend().getItemType().getName()) + 1) : 0;
}",0.9704433497536946
66291,"private void createButtonGroup(Composite parent){
  Composite cmp=new Composite(parent,SWT.NONE);
{
    cmp.setLayout(new GridLayout(6,false));
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    gridData.grabExcessVerticalSpace=true;
    gridData.verticalAlignment=SWT.END;
    cmp.setLayoutData(gridData);
  }
  popup=new SeriesPaletteSheet(Messages.getString(""String_Node_Str""),getContext(),getCategorySeriesDefinition(),getValueSeriesDefinitions(),isGroupedSeries(),FillChooserComposite.ENABLE_GRADIENT | FillChooserComposite.ENABLE_IMAGE | FillChooserComposite.ENABLE_POSITIVE_NEGATIVE);
  Button btnSeriesPals=createToggleButton(cmp,BUTTON_PALETTE,Messages.getString(""String_Node_Str""),popup);
  btnSeriesPals.addSelectionListener(this);
}","protected void createButtonGroup(Composite parent){
  Composite cmp=new Composite(parent,SWT.NONE);
{
    cmp.setLayout(new GridLayout(6,false));
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    gridData.grabExcessVerticalSpace=true;
    gridData.verticalAlignment=SWT.END;
    cmp.setLayoutData(gridData);
  }
  popup=new SeriesPaletteSheet(Messages.getString(""String_Node_Str""),getContext(),getCategorySeriesDefinition(),getValueSeriesDefinitions(),isGroupedSeries(),FillChooserComposite.ENABLE_GRADIENT | FillChooserComposite.ENABLE_IMAGE | FillChooserComposite.ENABLE_POSITIVE_NEGATIVE);
  Button btnSeriesPals=createToggleButton(cmp,BUTTON_PALETTE,Messages.getString(""String_Node_Str""),popup);
  btnSeriesPals.addSelectionListener(this);
}",0.9924146649810368
66292,"private static void loadComputedMeasures(DataInputStream dis,ICubeQueryDefinition qd) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IComputedMeasureDefinition md=loadComputedMeasure(dis);
    IMeasureDefinition md1=qd.createComputedMeasure(md.getName(),md.getType(),md.getExpression());
    md1.setAggrFunction(md.getAggrFunction());
  }
}","private static void loadComputedMeasures(DataInputStream dis,ICubeQueryDefinition qd) throws DataException, IOException {
  int size=IOUtil.readInt(dis);
  for (int i=0; i < size; i++) {
    IComputedMeasureDefinition md=loadComputedMeasure(dis);
    IMeasureDefinition md1=qd.createComputedMeasure(md.getName(),md.getDataType(),md.getExpression());
    md1.setAggrFunction(md.getAggrFunction());
  }
}",0.995
66293,"private static void saveComputedMeasure(DataOutputStream dos,IComputedMeasureDefinition m) throws DataException, IOException {
  if (m == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  saveMeasure(dos,m);
  IOUtil.writeInt(dos,m.getType());
  ExprUtil.saveBaseExpr(dos,m.getExpression());
}","private static void saveComputedMeasure(DataOutputStream dos,IComputedMeasureDefinition m) throws DataException, IOException {
  if (m == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  saveMeasure(dos,m);
  IOUtil.writeInt(dos,m.getDataType());
  ExprUtil.saveBaseExpr(dos,m.getExpression());
}",0.993421052631579
66294,"/** 
 * @param scope
 * @param computedColumns
 * @throws DataException
 */
public ComputedMeasureHelper(Scriptable scope,ScriptContext cx,List computedColumns) throws DataException {
  this.exprMap=new HashMap();
  this.scope=scope;
  this.cx=cx;
  this.measureInfos=new MeasureInfo[computedColumns.size()];
  for (int i=0; i < measureInfos.length; i++) {
    ComputedMeasureDefinition ccd=((ComputedMeasureDefinition)computedColumns.get(i));
    this.measureInfos[i]=new MeasureInfo(ccd.getName(),ccd.getType());
    this.exprMap.put(ccd.getName(),ccd.getExpression());
  }
  this.populator=new FacttableMeasureJSObjectPopulator(scope,this.exprMap,this.cx);
  this.populator.doInit();
}","/** 
 * @param scope
 * @param computedColumns
 * @throws DataException
 */
public ComputedMeasureHelper(Scriptable scope,ScriptContext cx,List computedColumns) throws DataException {
  this.exprMap=new HashMap();
  this.scope=scope;
  this.cx=cx;
  this.measureInfos=new MeasureInfo[computedColumns.size()];
  for (int i=0; i < measureInfos.length; i++) {
    ComputedMeasureDefinition ccd=((ComputedMeasureDefinition)computedColumns.get(i));
    this.measureInfos[i]=new MeasureInfo(ccd.getName(),ccd.getDataType());
    this.exprMap.put(ccd.getName(),ccd.getExpression());
  }
  this.populator=new FacttableMeasureJSObjectPopulator(scope,this.exprMap,this.cx);
  this.populator.doInit();
}",0.9971014492753624
66295,"private ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  if (handle.getCalculationType() == null || handle.getCalculationType().trim().length() == 0)   return null;
  TimeFunction timeFunction=new TimeFunction();
  Object referenceDate=null;
  if (DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY.equals(handle.getReferenceDateType())) {
    referenceDate=ScriptEvalUtil.evalExpr(new ScriptExpression(""String_Node_Str""),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
 else   if (handle.getReferenceDateType().equals(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE)) {
    IBaseExpression sciptExpr=this.adaptExpression((Expression)(handle.getReferenceDateValue().getExpression()));
    referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension());
  timeFunction.setBaseTimePeriod(populateBaseTimePeriod(handle));
  timeFunction.setRelativeTimePeriod(populateRelativeTimePeriod(handle));
  return timeFunction;
}","private ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  if (handle.getCalculationType() == null || handle.getCalculationType().trim().length() == 0)   return null;
  TimeFunction timeFunction=new TimeFunction();
  Object referenceDate=null;
  if (DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY.equals(handle.getReferenceDateType())) {
    referenceDate=ScriptEvalUtil.evalExpr(new ScriptExpression(""String_Node_Str""),this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
 else   if (DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE.equals(handle.getReferenceDateType())) {
    IBaseExpression sciptExpr=this.adaptExpression((Expression)(handle.getReferenceDateValue().getValue()));
    referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  }
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension());
  timeFunction.setBaseTimePeriod(populateBaseTimePeriod(handle));
  timeFunction.setRelativeTimePeriod(populateRelativeTimePeriod(handle));
  return timeFunction;
}",0.9633594071634416
66296,"/** 
 * Prepare all default styles for various StyledComponent.
 * @param model
 * @param externalProcessor
 */
public final void prepareStyles(Chart model,IStyleProcessor externalProcessor){
  boolean updatedModel=false;
  if (externalProcessor != null) {
    updatedModel=externalProcessor.updateChart(model,null);
  }
  if (!updatedModel) {
    chartValueUpdater.update(model,null);
  }
  if (externalProcessor != null) {
    externalProcessor.processStyle(model);
  }
  Stack<StyledComponent> token=new Stack<StyledComponent>();
  token.push(StyledComponent.CHART_ALL_LITERAL);
  prepareComponent(model,token,model,externalProcessor);
  token.clear();
}","/** 
 * Prepare all default styles for various StyledComponent.
 * @param model
 * @param externalProcessor
 */
public final void prepareStyles(Chart model,IStyleProcessor externalProcessor){
  boolean updatedModel=false;
  if (externalProcessor != null) {
    updatedModel=externalProcessor.updateChart(model,null);
  }
  if (!updatedModel) {
    chartValueUpdater.update(model,null);
  }
  boolean needInheritingStyles=true;
  if (externalProcessor != null) {
    externalProcessor.processStyle(model);
    needInheritingStyles=externalProcessor.needInheritingStyles();
  }
  if (needInheritingStyles) {
    updateWithInhertingtyles(model,externalProcessor);
  }
}",0.7256235827664399
66297,"private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  if (Display.getCurrent().getHighContrast()) {
    Color color=Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    ColorDefinition cd=ColorDefinitionImpl.create(color.getRed(),color.getGreen(),color.getBlue());
    gr.setDefaultBackground(cd);
  }
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=cm.copyInstance();
    ChartReportItemUIFactory.instance().createUIHelper().updateDefaultTitle(cmRunTime,crii.getHandle());
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartCubeUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    ChartReportStyleProcessor crsp=new ChartReportStyleProcessor(crii.getHandle(),true){
      @Override public boolean updateChart(      Chart model,      Object obj){
        if (styleProcessorProxy != null) {
          styleProcessorProxy.updateChart(model,true);
          return true;
        }
        return false;
      }
    }
;
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,crsp));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}","private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  if (Display.getCurrent().getHighContrast()) {
    Color color=Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    ColorDefinition cd=ColorDefinitionImpl.create(color.getRed(),color.getGreen(),color.getBlue());
    gr.setDefaultBackground(cd);
  }
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=cm.copyInstance();
    ChartReportItemUIFactory.instance().createUIHelper().updateDefaultTitle(cmRunTime,crii.getHandle());
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartCubeUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    ChartReportStyleProcessor crsp=new ChartReportStyleProcessor(crii.getHandle(),true){
      @Override public boolean updateChart(      Chart model,      Object obj){
        if (styleProcessorProxy != null) {
          styleProcessorProxy.updateChart(model,true);
          return true;
        }
        return false;
      }
      public boolean needInheritingStyles(){
        return true;
      }
    }
;
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,crsp));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}",0.980412916887242
66298,"@Override public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(rre);
  }
  final Fill flBackground=validateMultipleFill(rre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    if (flBackground instanceof PatternImage) {
      fillWithPatternImage(new Area(r2d),flBackground);
      return;
    }
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Shape shClip=_g2d.getClip();
      Area ar2=new Area(r2d);
      if (shClip != null) {
        Area ar1=new Area(shClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
      _g2d.setClip(shClip);
    }
  }
}","@Override public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(rre);
  }
  final Fill flBackground=validateMultipleFill(rre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    if (flBackground instanceof PatternImage) {
      fillWithPatternImage(new Area(r2d),flBackground);
      return;
    }
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Shape shClip=_g2d.getClip();
      Area ar2=new Area(r2d);
      if (shClip != null) {
        Area ar1=new Area(shClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      final Size szImage=computeImageSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          img=scaleImage(img);
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
      _g2d.setClip(shClip);
    }
  }
}",0.9923778209535196
66299,"/** 
 * @param url
 * @return
 * @throws ChartException
 */
final Image loadImage(URL url) throws ChartException {
  String sUrl=url.toString();
  Image img=htCache.get(sUrl);
  if (img != null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
  }
 else {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
    img=(new ImageIcon(url)).getImage();
    try {
      final MediaTracker tracker=new MediaTracker(p);
      tracker.addImage(img,0);
      tracker.waitForAll();
      if ((tracker.statusAll(true) & MediaTracker.ERRORED) != 0) {
        StringBuffer sb=new StringBuffer();
        Object[] oa=tracker.getErrorsAny();
        sb.append('[');
        for (int i=0; i < oa.length; i++) {
          sb.append(oa[i]);
          if (i < oa.length - 1) {
            sb.append(""String_Node_Str"");
          }
        }
        sb.append(']');
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,""String_Node_Str"",new Object[]{sb.toString()},Messages.getResourceBundle(idsSWING.getULocale()));
      }
    }
 catch (    InterruptedException ex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,ex);
    }
    htCache.put(sUrl,img);
  }
  return img;
}","/** 
 * @param url
 * @return
 * @throws ChartException
 */
final Image loadImage(URL url) throws ChartException {
  String sUrl=url.toString();
  Image img=htCache.get(sUrl);
  if (img != null) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
  }
 else {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{url},idsSWING.getULocale()));
    try {
      img=ImageIO.read(url);
      final MediaTracker tracker=new MediaTracker(p);
      tracker.addImage(img,0);
      tracker.waitForAll();
      if ((tracker.statusAll(true) & MediaTracker.ERRORED) != 0) {
        StringBuffer sb=new StringBuffer();
        Object[] oa=tracker.getErrorsAny();
        sb.append('[');
        for (int i=0; i < oa.length; i++) {
          sb.append(oa[i]);
          if (i < oa.length - 1) {
            sb.append(""String_Node_Str"");
          }
        }
        sb.append(']');
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,""String_Node_Str"",new Object[]{sb.toString()},Messages.getResourceBundle(idsSWING.getULocale()));
      }
    }
 catch (    InterruptedException ex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,ex);
    }
catch (    IOException e) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.IMAGE_LOADING,e);
    }
    htCache.put(sUrl,img);
  }
  return img;
}",0.9298245614035088
66300,"public void setBinding(ComputedColumnHandle binding){
  this.binding=binding;
  if (this.binding != null)   setAggregate(this.binding.getAggregateFunction() != null && !this.binding.getAggregateFunction().equals(""String_Node_Str""));
}","public void setBinding(ComputedColumnHandle binding){
  this.binding=binding;
  if (this.binding != null)   setAggregate(this.binding.getAggregateFunction() != null && !this.binding.getAggregateFunction().equals(""String_Node_Str""));
  if (this.binding != null) {
    setTimePeriod(this.binding.getTimeDimension() != null && this.binding.getTimeDimension().getExpression() != null);
  }
}",0.7536231884057971
66301,"private void insertToBTree() throws DataException {
  try {
    List<Integer> rowIDList=new ArrayList<Integer>();
    KeyRowID keyRowID=(KeyRowID)sortedKeyRowID.pop();
    boolean isFirst=true;
    Object lastKey=null;
    while (keyRowID != null) {
      if (isFirst) {
        lastKey=keyRowID.key;
        rowIDList.add((Integer)keyRowID.rowID);
        isFirst=false;
      }
 else       if (equals(lastKey,keyRowID.key)) {
        rowIDList.add((Integer)keyRowID.rowID);
      }
 else {
        btree.insert(lastKey,rowIDList.toArray(new Integer[0]));
        lastKey=keyRowID.key;
        rowIDList.clear();
        rowIDList.add((Integer)keyRowID.rowID);
      }
      keyRowID=(KeyRowID)sortedKeyRowID.pop();
    }
    if (rowIDList.size() > 0) {
      btree.insert(lastKey,rowIDList.toArray(new Integer[0]));
    }
    sortedKeyRowID.close();
    sortedKeyRowID=null;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","private void insertToBTree() throws DataException {
  try {
    List<Integer> rowIDList=new ArrayList<Integer>();
    KeyRowID keyRowID=(KeyRowID)sortedKeyRowID.pop();
    boolean isFirst=true;
    Object lastKey=null;
    while (keyRowID != null) {
      if (isFirst) {
        lastKey=keyRowID.key;
        rowIDList.add((Integer)keyRowID.rowID);
        isFirst=false;
      }
 else       if (equals(lastKey,keyRowID.key) && rowIDList.size() < 1000) {
        rowIDList.add((Integer)keyRowID.rowID);
      }
 else {
        btree.insert(lastKey,rowIDList.toArray(new Integer[0]));
        lastKey=keyRowID.key;
        rowIDList.clear();
        rowIDList.add((Integer)keyRowID.rowID);
      }
      keyRowID=(KeyRowID)sortedKeyRowID.pop();
    }
    if (rowIDList.size() > 0) {
      btree.insert(lastKey,rowIDList.toArray(new Integer[0]));
    }
    sortedKeyRowID.close();
    sortedKeyRowID=null;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9862595419847328
66302,"/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,appContext,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  try {
    BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,appContext,null);
    CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
    assertTrue(e.getErrorCode().equals(ResourceConstants.RESULT_LENGTH_EXCEED_COLUMN_LIMIT));
  }
}",0.7684334511189634
66303,"private Set<Integer> getLess(Object key,boolean includeKey) throws DataException {
  try {
    key=DataTypeUtil.convert(key,this.keyDataType);
  }
 catch (  BirtException e1) {
    throw DataException.wrap(e1);
  }
  BTreeCursor bCursor=btree.createCursor();
  Set<Integer> result=new HashSet<Integer>();
  try {
    while (bCursor.next()) {
      int cr=((Comparable)bCursor.getKey()).compareTo(key);
      if (cr < 0 || (cr == 0 && includeKey))       result.addAll(bCursor.getValues());
 else       return result;
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
  return result;
}","private Set<Integer> getLess(Object key,boolean includeKey) throws DataException {
  try {
    key=DataTypeUtil.convert(key,this.keyDataType);
  }
 catch (  BirtException e1) {
    throw DataException.wrap(e1);
  }
  BTreeCursor bCursor=btree.createCursor();
  Set<Integer> result=new HashSet<Integer>();
  try {
    while (bCursor.next()) {
      int cr=0;
      if (bCursor.getKey() == null) {
        cr=-1;
      }
 else {
        cr=((Comparable)bCursor.getKey()).compareTo(key);
      }
      if (cr < 0 || (cr == 0 && includeKey))       result.addAll(bCursor.getValues());
 else       return result;
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
  return result;
}",0.9297856614929786
66304,"public void writeBlock(int blockId,byte[] bytes) throws IOException {
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
  output.seek(blockId * BLOCK_SIZE);
  output.write(bytes);
  output.flush();
}","public void writeBlock(int blockId,byte[] bytes) throws IOException {
  if (blockId >= totalBlock) {
    totalBlock=blockId + 1;
  }
  output.seek((long)blockId * BLOCK_SIZE);
  output.write(bytes);
  output.flush();
}",0.986046511627907
66305,"private Set<Integer> getGreater(Object key,boolean includeKey) throws DataException {
  try {
    key=DataTypeUtil.convert(key,this.keyDataType);
  }
 catch (  BirtException e1) {
    throw DataException.wrap(e1);
  }
  BTreeCursor bCursor=btree.createCursor();
  Set<Integer> result=new HashSet<Integer>();
  try {
    if (!bCursor.first())     return result;
    if (((Comparable)bCursor.getKey()).compareTo(key) > 0) {
      bCursor.beforeFirst();
    }
 else {
      bCursor.moveTo(key);
      int cr=((Comparable)bCursor.getKey()).compareTo(key);
      if ((includeKey && cr == 0) || cr > 0) {
        result.addAll(bCursor.getValues());
      }
    }
    while (bCursor.next()) {
      result.addAll(bCursor.getValues());
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
  return result;
}","private Set<Integer> getGreater(Object key,boolean includeKey) throws DataException {
  try {
    key=DataTypeUtil.convert(key,this.keyDataType);
  }
 catch (  BirtException e1) {
    throw DataException.wrap(e1);
  }
  BTreeCursor bCursor=btree.createCursor();
  Set<Integer> result=new HashSet<Integer>();
  try {
    if (!bCursor.first())     return result;
    if (bCursor.getKey() != null && ((Comparable)bCursor.getKey()).compareTo(key) > 0) {
      bCursor.beforeFirst();
    }
 else {
      bCursor.moveTo(key);
      int cr=((Comparable)bCursor.getKey()).compareTo(key);
      if ((includeKey && cr == 0) || cr > 0) {
        result.addAll(bCursor.getValues());
      }
    }
    while (bCursor.next()) {
      result.addAll(bCursor.getValues());
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
  return result;
}",0.9836639439906651
66306,"private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  boolean isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),true);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    calculationType.select(0);
    handleCalculationSelectEvent();
  }
 else {
    ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
    String name=function.getName();
    int itemIndex=getItemIndex(names,name);
    if (itemIndex >= 0) {
      calculationType.select(itemIndex);
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
        }
      }
    }
  }
}","private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
        }
      }
    }
  }
}",0.7314814814814815
66307,"private void createDataSelection(Composite composite){
  Label referDataLabel=new Label(composite,SWT.NONE);
  referDataLabel.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  gd.verticalAlignment=SWT.BEGINNING;
  referDataLabel.setLayoutData(gd);
  Composite radioContainer=new Composite(composite,SWT.NONE);
  GridLayout layout=new GridLayout();
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  radioContainer.setLayoutData(gd);
  layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=2;
  radioContainer.setLayout(layout);
  todayButton=new Button(radioContainer,SWT.RADIO);
  todayButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      modifyDialogContent();
      validate();
    }
  }
);
  new Label(radioContainer,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  dateSelectionButton=new Button(radioContainer,SWT.RADIO);
  dateSelectionButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      modifyDialogContent();
      validate();
    }
  }
);
  Composite dateContainer=new Composite(radioContainer,SWT.NONE);
  dateContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=3;
  dateContainer.setLayout(layout);
  new Label(dateContainer,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  Composite dateSelecionContainer=new Composite(dateContainer,SWT.NONE);
  dateSelecionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.horizontalSpacing=0;
  layout.numColumns=3;
  dateSelecionContainer.setLayout(layout);
  dateText=new Text(dateSelecionContainer,SWT.BORDER);
  dateText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  dateText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createExpressionButton(dateSelecionContainer,dateText);
  recentButton=new Button(radioContainer,SWT.RADIO);
  recentButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      modifyDialogContent();
      validate();
    }
  }
);
  recentLabel=new Label(radioContainer,SWT.NONE);
  recentLabel.setText(Messages.getString(""String_Node_Str""));
}","private void createDataSelection(Composite composite){
  Label referDataLabel=new Label(composite,SWT.NONE);
  referDataLabel.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  gd.verticalAlignment=SWT.BEGINNING;
  referDataLabel.setLayoutData(gd);
  Composite radioContainer=new Composite(composite,SWT.NONE);
  GridLayout layout=new GridLayout();
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  radioContainer.setLayoutData(gd);
  layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=2;
  radioContainer.setLayout(layout);
  todayButton=new Button(radioContainer,SWT.RADIO);
  todayButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (!isStatic) {
        isStatic=true;
        initCalculationTypeCombo(getTimeDimsionName());
      }
      modifyDialogContent();
      validate();
    }
  }
);
  new Label(radioContainer,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  dateSelectionButton=new Button(radioContainer,SWT.RADIO);
  dateSelectionButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (!isStatic) {
        isStatic=true;
        initCalculationTypeCombo(getTimeDimsionName());
      }
      modifyDialogContent();
      validate();
    }
  }
);
  Composite dateContainer=new Composite(radioContainer,SWT.NONE);
  dateContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.numColumns=3;
  dateContainer.setLayout(layout);
  new Label(dateContainer,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  Composite dateSelecionContainer=new Composite(dateContainer,SWT.NONE);
  dateSelecionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  layout=new GridLayout();
  layout.marginWidth=layout.marginHeight=0;
  layout.horizontalSpacing=0;
  layout.numColumns=3;
  dateSelecionContainer.setLayout(layout);
  dateText=new Text(dateSelecionContainer,SWT.BORDER);
  dateText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  dateText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  createExpressionButton(dateSelecionContainer,dateText);
  recentButton=new Button(radioContainer,SWT.RADIO);
  recentButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      if (isStatic) {
        isStatic=false;
        initCalculationTypeCombo(getTimeDimsionName());
      }
      modifyDialogContent();
      validate();
    }
  }
);
  recentLabel=new Label(radioContainer,SWT.NONE);
  recentLabel.setText(Messages.getString(""String_Node_Str""));
}",0.9385703648548028
66308,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    if (DesignerPaletteFactory.TIMEPERIOD_TEMPLATE.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE)) {
      stack.startTrans(""String_Node_Str"");
    }
 else {
      stack.startTrans(""String_Node_Str"");
    }
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
    CrosstabCellHandle cellHandle=((CrosstabCellAdapter)((CrosstabCellEditPart)target).getModel()).getCrosstabCellHandle();
    try {
      cellHandle.addContent(dataHandle,CellHandle.CONTENT_SLOT);
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(dataHandle,null,cellHandle);
      dialog.setAggreate(true);
      if (DesignerPaletteFactory.TIMEPERIOD_TEMPLATE.equals(DesignerPaletteFactory.TIMEPERIOD_TEMPLATE)) {
        dialog.setTimePeriod(true);
      }
      if (dialog.open() == Window.OK) {
        CreateRequest request=new CreateRequest();
        request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,dataHandle);
        request.setLocation(location.getPoint());
        Command command=editPart.getCommand(request);
        if (command != null && command.canExecute()) {
          dataHandle.setResultSetColumn(dialog.getBindingColumn().getName());
          editPart.getViewer().getEditDomain().getCommandStack().execute(command);
          stack.commit();
        }
 else {
          stack.rollback();
        }
      }
 else {
        stack.rollback();
      }
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionUtil.handle(e);
    }
  }
  return true;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    if (DesignerPaletteFactory.TIMEPERIOD_TEMPLATE.equals(transfer)) {
      stack.startTrans(""String_Node_Str"");
    }
 else {
      stack.startTrans(""String_Node_Str"");
    }
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
    CrosstabCellHandle cellHandle=((CrosstabCellAdapter)((CrosstabCellEditPart)target).getModel()).getCrosstabCellHandle();
    try {
      cellHandle.addContent(dataHandle,CellHandle.CONTENT_SLOT);
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(dataHandle,null,cellHandle);
      dialog.setAggreate(true);
      if (DesignerPaletteFactory.TIMEPERIOD_TEMPLATE.equals(transfer)) {
        dialog.setTimePeriod(true);
      }
      if (dialog.open() == Window.OK) {
        CreateRequest request=new CreateRequest();
        request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,dataHandle);
        request.setLocation(location.getPoint());
        Command command=editPart.getCommand(request);
        if (command != null && command.canExecute()) {
          dataHandle.setResultSetColumn(dialog.getBindingColumn().getName());
          editPart.getViewer().getEditDomain().getCommandStack().execute(command);
          stack.commit();
        }
 else {
          stack.rollback();
        }
      }
 else {
        stack.rollback();
      }
    }
 catch (    Exception e) {
      stack.rollback();
      ExceptionUtil.handle(e);
    }
  }
  return true;
}",0.9714774671990872
66309,"public ComputedColumnHandle editBinding(ComputedColumnHandle binding) throws SemanticException {
  if (isAggregate()) {
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setAggregateFunction(getFunctionByDisplayName(cmbFunction.getText()).getName());
    ExpressionButtonUtil.saveExpressionButtonControl(txtFilter,binding,ComputedColumn.FILTER_MEMBER);
    binding.clearAggregateOnList();
    if (!isTimePeriod()) {
      String aggStr=cmbAggOn.getText();
      StringTokenizer token=new StringTokenizer(aggStr,""String_Node_Str"");
      while (token.hasMoreTokens()) {
        String agg=token.nextToken();
        if (!agg.equals(ALL))         binding.addAggregateOn(agg);
      }
    }
    binding.setExpression(null);
    binding.clearArgumentList();
    for (Iterator iterator=paramsMap.keySet().iterator(); iterator.hasNext(); ) {
      String arg=(String)iterator.next();
      String value=getControlValue(paramsMap.get(arg));
      if (value != null) {
        AggregationArgument argHandle=StructureFactory.createAggregationArgument();
        argHandle.setName(arg);
        if (ExpressionButtonUtil.getExpressionButton(paramsMap.get(arg)) != null) {
          ExpressionButtonUtil.saveExpressionButtonControl(paramsMap.get(arg),argHandle,AggregationArgument.VALUE_MEMBER);
        }
 else {
          Expression expression=new Expression(value,ExpressionType.JAVASCRIPT);
          argHandle.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
        }
        binding.addArgument(argHandle);
      }
    }
  }
 else {
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    if (ExpressionButtonUtil.getExpressionButton(txtExpression) != null) {
      ExpressionButtonUtil.saveExpressionButtonControl(txtExpression,binding,ComputedColumn.EXPRESSION_MEMBER);
    }
 else {
      Expression expression=new Expression(getControlValue(txtExpression),ExpressionType.JAVASCRIPT);
      binding.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
    }
  }
  if (isTimePeriod()) {
    ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    String dimensionName=timeDimension.getText();
    binding.setProperty(ComputedColumn.TIME_DIMENSION_MEMBER,dimensionName);
    binding.setCalculationType(timeFunction.getName());
    binding.setProperty(ComputedColumn.CALCULATION_ARGUMENTS_MEMBER,null);
    for (Iterator iterator=calculationParamsMap.keySet().iterator(); iterator.hasNext(); ) {
      CalculationArgument argument=StructureFactory.createCalculationArgument();
      String arg=(String)iterator.next();
      argument.setName(arg);
      String value=getControlValue(calculationParamsMap.get(arg));
      if (value != null) {
        if (ExpressionButtonUtil.getExpressionButton(calculationParamsMap.get(arg)) != null) {
          Expression expr=getExpressionByControl(calculationParamsMap.get(arg));
          argument.setValue(expr);
        }
 else {
          Expression expr=new Expression(value,ExpressionType.JAVASCRIPT);
          argument.setValue(expr);
        }
        binding.addCalculationArgument(argument);
      }
    }
    if (todayButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY);
    }
 else     if (dateSelectionButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE);
      ExpressionButtonUtil.saveExpressionButtonControl(dateText,binding,ComputedColumn.REFERENCE_DATE_VALUE_MEMBER);
    }
 else     if (recentButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_ENDING_DATE_IN_DIMENSION);
    }
  }
  return binding;
}","public ComputedColumnHandle editBinding(ComputedColumnHandle binding) throws SemanticException {
  if (isAggregate()) {
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setAggregateFunction(getFunctionByDisplayName(cmbFunction.getText()).getName());
    ExpressionButtonUtil.saveExpressionButtonControl(txtFilter,binding,ComputedColumn.FILTER_MEMBER);
    binding.clearAggregateOnList();
    if (!isTimePeriod()) {
      String aggStr=cmbAggOn.getText();
      StringTokenizer token=new StringTokenizer(aggStr,""String_Node_Str"");
      while (token.hasMoreTokens()) {
        String agg=token.nextToken();
        if (!agg.equals(ALL))         binding.addAggregateOn(agg);
      }
    }
    binding.setExpression(null);
    binding.clearArgumentList();
    for (Iterator iterator=paramsMap.keySet().iterator(); iterator.hasNext(); ) {
      String arg=(String)iterator.next();
      String value=getControlValue(paramsMap.get(arg));
      if (value != null) {
        AggregationArgument argHandle=StructureFactory.createAggregationArgument();
        argHandle.setName(arg);
        if (ExpressionButtonUtil.getExpressionButton(paramsMap.get(arg)) != null) {
          ExpressionButtonUtil.saveExpressionButtonControl(paramsMap.get(arg),argHandle,AggregationArgument.VALUE_MEMBER);
        }
 else {
          Expression expression=new Expression(value,ExpressionType.JAVASCRIPT);
          argHandle.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
        }
        binding.addArgument(argHandle);
      }
    }
  }
 else {
    for (int i=0; i < DATA_TYPE_CHOICES.length; i++) {
      if (DATA_TYPE_CHOICES[i].getDisplayName().equals(cmbType.getText())) {
        binding.setDataType(DATA_TYPE_CHOICES[i].getName());
        break;
      }
    }
    binding.setDisplayName(txtDisplayName.getText());
    binding.setDisplayNameID(txtDisplayNameID.getText());
    if (ExpressionButtonUtil.getExpressionButton(txtExpression) != null) {
      ExpressionButtonUtil.saveExpressionButtonControl(txtExpression,binding,ComputedColumn.EXPRESSION_MEMBER);
    }
 else {
      Expression expression=new Expression(getControlValue(txtExpression),ExpressionType.JAVASCRIPT);
      binding.setExpressionProperty(AggregationArgument.VALUE_MEMBER,expression);
    }
  }
  if (isTimePeriod()) {
    ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    String dimensionName=timeDimension.getText();
    binding.setTimeDimension(dimensionName);
    binding.setCalculationType(timeFunction.getName());
    binding.setProperty(ComputedColumn.CALCULATION_ARGUMENTS_MEMBER,null);
    for (Iterator iterator=calculationParamsMap.keySet().iterator(); iterator.hasNext(); ) {
      CalculationArgument argument=StructureFactory.createCalculationArgument();
      String arg=(String)iterator.next();
      argument.setName(arg);
      String value=getControlValue(calculationParamsMap.get(arg));
      if (value != null) {
        if (ExpressionButtonUtil.getExpressionButton(calculationParamsMap.get(arg)) != null) {
          Expression expr=getExpressionByControl(calculationParamsMap.get(arg));
          argument.setValue(expr);
        }
 else {
          Expression expr=new Expression(value,ExpressionType.JAVASCRIPT);
          argument.setValue(expr);
        }
        binding.addCalculationArgument(argument);
      }
    }
    if (todayButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_TODAY);
    }
 else     if (dateSelectionButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_FIXED_DATE);
      ExpressionButtonUtil.saveExpressionButtonControl(dateText,binding,ComputedColumn.REFERENCE_DATE_VALUE_MEMBER);
    }
 else     if (recentButton.getSelection()) {
      binding.setReferenceDateType(DesignChoiceConstants.REFERENCE_DATE_TYPE_ENDING_DATE_IN_DIMENSION);
    }
  }
  return binding;
}",0.9931828866948754
66310,"public void close() throws IOException {
  view.closeEntry(this);
  super.close();
}","public void close() throws IOException {
  view.closeEntry(this);
  doClose();
}",0.9390243902439024
66311,"public static List<ComputedColumn> generateComputedColumns(ExtendedItemHandle itemHandle,CubeHandle cubeHandle){
  if (cubeHandle != null) {
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    String exprType=UIUtil.getDefaultScriptType();
    IExpressionConverter exprConverter=ExpressionUtility.getExpressionConverter(exprType);
    for (    LevelHandle levelHandle : ChartCubeUtil.getAllLevels(cubeHandle)) {
      String displayNameAttr=null;
      String dataType=levelHandle.getDataType();
      if (levelHandle instanceof TabularLevelHandle && ((TabularLevelHandle)levelHandle).getDisplayColumnName() != null && ((TabularLevelHandle)levelHandle).getDisplayColumnName().trim().length() > 0) {
        displayNameAttr=ICubeQueryUtil.DISPLAY_NAME_ATTR;
        dataType=DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
      }
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelBindingName(levelHandle));
      column.setDataType(dataType);
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),displayNameAttr),exprType));
      columnList.add(column);
      Iterator itLevelAttr=levelHandle.attributesIterator();
      while (itLevelAttr.hasNext()) {
        LevelAttributeHandle laHandle=(LevelAttributeHandle)itLevelAttr.next();
        ComputedColumn columnLA=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelAttrBindingName(levelHandle,laHandle));
        columnLA.setDataType(laHandle.getDataType());
        columnLA.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),laHandle.getName()),exprType));
        columnList.add(columnLA);
      }
    }
    for (    MeasureHandle measureHandle : ChartCubeUtil.getAllMeasures(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createMeasureBindingName(measureHandle));
      column.setDataType(measureHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getMeasureExpression(measureHandle.getName()),exprType));
      column.setAggregateFunction(DataAdapterUtil.getRollUpAggregationName(measureHandle.getFunction()));
      columnList.add(column);
    }
    return columnList;
  }
  return Collections.emptyList();
}","public static List<ComputedColumn> generateComputedColumns(ExtendedItemHandle itemHandle,CubeHandle cubeHandle){
  if (cubeHandle != null) {
    Set<String> bindingNameSet=new HashSet<String>();
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    String exprType=UIUtil.getDefaultScriptType();
    IExpressionConverter exprConverter=ExpressionUtility.getExpressionConverter(exprType);
    for (    LevelHandle levelHandle : ChartCubeUtil.getAllLevels(cubeHandle)) {
      String displayNameAttr=null;
      String dataType=levelHandle.getDataType();
      if (levelHandle instanceof TabularLevelHandle && ((TabularLevelHandle)levelHandle).getDisplayColumnName() != null && ((TabularLevelHandle)levelHandle).getDisplayColumnName().trim().length() > 0) {
        displayNameAttr=ICubeQueryUtil.DISPLAY_NAME_ATTR;
        dataType=DesignChoiceConstants.COLUMN_DATA_TYPE_STRING;
      }
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelBindingName(levelHandle));
      column.setDataType(dataType);
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),displayNameAttr),exprType));
      correctBindingName(column,bindingNameSet);
      columnList.add(column);
      Iterator itLevelAttr=levelHandle.attributesIterator();
      while (itLevelAttr.hasNext()) {
        LevelAttributeHandle laHandle=(LevelAttributeHandle)itLevelAttr.next();
        ComputedColumn columnLA=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelAttrBindingName(levelHandle,laHandle));
        columnLA.setDataType(laHandle.getDataType());
        columnLA.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),laHandle.getName()),exprType));
        correctBindingName(columnLA,bindingNameSet);
        columnList.add(columnLA);
      }
    }
    for (    MeasureHandle measureHandle : ChartCubeUtil.getAllMeasures(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createMeasureBindingName(measureHandle));
      column.setDataType(measureHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getMeasureExpression(measureHandle.getName()),exprType));
      column.setAggregateFunction(DataAdapterUtil.getRollUpAggregationName(measureHandle.getFunction()));
      correctBindingName(column,bindingNameSet);
      columnList.add(column);
    }
    return columnList;
  }
  return Collections.emptyList();
}",0.9613572101790764
66312,"private void createSchemaFilterComposite(boolean supportsSchema,boolean supportsProcedure,Composite tablescomposite){
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout groupLayout=new GridLayout();
  groupLayout.numColumns=3;
  groupLayout.verticalSpacing=10;
  selectTableGroup.setLayout(groupLayout);
  GridData selectTableData=new GridData(GridData.FILL_HORIZONTAL);
  selectTableGroup.setLayoutData(selectTableData);
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  schemaCombo.setVisibleItemCount(30);
  Label FilterLabel=new Label(selectTableGroup,SWT.LEFT);
  FilterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
  GridData searchTxtData=new GridData(GridData.FILL_HORIZONTAL);
  searchTxtData.horizontalSpan=2;
  searchTxt.setLayoutData(searchTxtData);
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
  GridData filterData=new GridData(GridData.FILL_HORIZONTAL);
  filterData.horizontalSpan=2;
  filterComboViewer.getControl().setLayoutData(filterData);
  setupShowSystemTableCheckBox(selectTableGroup);
  setupShowAliasCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  GridData btnData=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  btnData.horizontalSpan=3;
  findButton.setLayoutData(btnData);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
        }
      }
);
    }
  }
);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames(timeOutLimit * 1000);
      for (      String name : allSchemaNames) {
        schemaCombo.add(BidiTransform.transform(name,metadataBidiFormatStr,BidiConstants.DEFAULT_BIDI_FORMAT_STR));
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema && continueConnect) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),metadataBidiFormatStr);
  }
}","private void createSchemaFilterComposite(boolean supportsSchema,boolean supportsProcedure,Composite tablescomposite){
  Group selectTableGroup=new Group(tablescomposite,SWT.FILL);
  GridLayout groupLayout=new GridLayout();
  groupLayout.numColumns=3;
  groupLayout.verticalSpacing=10;
  selectTableGroup.setLayout(groupLayout);
  GridData selectTableData=new GridData(GridData.FILL_HORIZONTAL);
  selectTableGroup.setLayoutData(selectTableData);
  schemaLabel=new Label(selectTableGroup,SWT.LEFT);
  schemaLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  schemaCombo=new Combo(selectTableGroup,prefetchSchema ? SWT.READ_ONLY : SWT.DROP_DOWN);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  schemaCombo.setLayoutData(gd);
  schemaCombo.setVisibleItemCount(30);
  final Label filterLabel=new Label(selectTableGroup,SWT.LEFT);
  filterLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterLabel.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      filterLabel.setToolTipText(JdbcPlugin.getResourceString(""String_Node_Str""));
    }
  }
);
  searchTxt=new Text(selectTableGroup,SWT.BORDER);
  GridData searchTxtData=new GridData(GridData.FILL_HORIZONTAL);
  searchTxtData.horizontalSpan=2;
  searchTxt.setLayoutData(searchTxtData);
  searchTxt.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      searchTxt.setToolTipText(JdbcPlugin.getResourceString(""String_Node_Str""));
    }
  }
);
  Label selectTypeLabel=new Label(selectTableGroup,SWT.NONE);
  selectTypeLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  filterComboViewer=new ComboViewer(selectTableGroup,SWT.READ_ONLY);
  setFilterComboContents(filterComboViewer,supportsProcedure);
  GridData filterData=new GridData(GridData.FILL_HORIZONTAL);
  filterData.horizontalSpan=2;
  filterComboViewer.getControl().setLayoutData(filterData);
  setupShowSystemTableCheckBox(selectTableGroup);
  setupShowAliasCheckBox(selectTableGroup);
  Button findButton=new Button(selectTableGroup,SWT.NONE);
  GridData btnData=new GridData(GridData.HORIZONTAL_ALIGN_CENTER);
  btnData.horizontalSpan=3;
  findButton.setLayoutData(btnData);
  findButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  findButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
        public void run(){
          fc=populateFilterConfig();
          DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
        }
      }
);
    }
  }
);
  String[] allSchemaNames=null;
  if (supportsSchema) {
    String allFlag=JdbcPlugin.getResourceString(""String_Node_Str"");
    schemaCombo.add(allFlag);
    if (prefetchSchema) {
      allSchemaNames=JdbcMetaDataProvider.getInstance().getAllSchemaNames(timeOutLimit * 1000);
      for (      String name : allSchemaNames) {
        schemaCombo.add(BidiTransform.transform(name,metadataBidiFormatStr,BidiConstants.DEFAULT_BIDI_FORMAT_STR));
      }
    }
    schemaCombo.select(0);
  }
 else {
    schemaCombo.removeAll();
    schemaCombo.setEnabled(false);
    schemaLabel.setEnabled(false);
  }
  if (prefetchSchema && continueConnect) {
    fc=populateFilterConfig();
    DBNodeUtil.createTreeRoot(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName(),allSchemaNames),fc,metadataBidiFormatStr,SQLDataSetEditorPage.this.timeOutLimit * 1000);
  }
 else {
    DBNodeUtil.createRootTip(availableDbObjectsTree,new RootNode(dataSetDesign.getDataSourceDesign().getName()),metadataBidiFormatStr);
  }
}",0.9403314917127072
66313,"/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,appContext,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  try {
    BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,appContext,null);
    CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube);
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
    assertTrue(e.getErrorCode().equals(ResourceConstants.RESULT_LENGTH_EXCEED_COLUMN_LIMIT));
  }
}",0.7684334511189634
66314,"protected void startHeaderFooterContainer(int headerHeight,int headerWidth){
  headerWidth+=215;
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeTableWidth(headerWidth);
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeTableLayout();
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",headerHeight);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeCellWidth(headerWidth);
  writer.closeTag(""String_Node_Str"");
}","protected void startHeaderFooterContainer(int headerHeight,int headerWidth,boolean writeColumns){
  headerWidth+=215;
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeTableWidth(headerWidth);
  writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  writeTableLayout();
  writer.closeTag(""String_Node_Str"");
  if (writeColumns) {
    writeColumn(new int[]{headerWidth});
  }
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeAttrTag(""String_Node_Str"",headerHeight);
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeCellWidth(headerWidth);
  writer.closeTag(""String_Node_Str"");
}",0.933734939759036
66315,"/** 
 * Updates chart element Fill.
 * @param name name chart element type.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @generated
 */
public void updateFill(String name,EObject eParentObj,Fill eObj,Fill eRefObj,Fill eDefObj){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eObj instanceof EmbeddedImage) {
    updateEmbeddedImage(name,eParentObj,(EmbeddedImage)eObj,(EmbeddedImage)eRefObj,eDefObj instanceof EmbeddedImage ? (EmbeddedImage)eDefObj : null);
  }
 else   if (eObj instanceof PatternImage) {
    updatePatternImage(name,eParentObj,(PatternImage)eObj,(PatternImage)eRefObj,eDefObj instanceof PatternImage ? (PatternImage)eDefObj : null);
  }
 else   if (eObj instanceof ColorDefinition) {
    updateColorDefinition(name,eParentObj,(ColorDefinition)eObj,(ColorDefinition)eRefObj,eDefObj instanceof ColorDefinition ? (ColorDefinition)eDefObj : null);
  }
 else   if (eObj instanceof Gradient) {
    updateGradient(name,eParentObj,(Gradient)eObj,(Gradient)eRefObj,eDefObj instanceof Gradient ? (Gradient)eDefObj : null);
  }
 else   if (eObj instanceof Image) {
    updateImage(name,eParentObj,(Image)eObj,(Image)eRefObj,eDefObj instanceof Image ? (Image)eDefObj : null);
  }
 else   if (eObj instanceof MultipleFill) {
    updateMultipleFill(name,eParentObj,(MultipleFill)eObj,(MultipleFill)eRefObj,eDefObj instanceof MultipleFill ? (MultipleFill)eDefObj : null);
  }
 else {
    updateFillImpl(name,eParentObj,eObj,eRefObj,eDefObj);
  }
}","/** 
 * Updates chart element Fill.
 * @param name name chart element type.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @generated
 */
public void updateFill(String name,EObject eParentObj,Fill eObj,Fill eRefObj,Fill eDefObj){
  if (eObj != null || (eRefObj == null && eDefObj == null)) {
    return;
  }
 else {
    updateFillImpl(name,eParentObj,eObj,eRefObj,eDefObj);
  }
}",0.3055555555555556
66316,"/** 
 * Updates chart element Fill.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @generated Don't change this method manually.
 */
protected void updateFillImpl(String name,EObject eParentObj,Fill eObj,Fill eRefObj,Fill eDefObj){
  if (eObj == null) {
    if (eRefObj != null) {
      eObj=eRefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
    }
 else     if (eDefObj != null) {
      eObj=eDefObj.copyInstance();
      ChartElementUtil.setEObjectAttribute(eParentObj,name,eObj,false);
      return;
    }
  }
  if (eObj == null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (!eObj.isSetType()) {
    if (eRefObj != null && eRefObj.isSetType()) {
      eObj.setType(eRefObj.getType());
    }
 else     if (eDefObj != null && eDefObj.isSetType()) {
      eObj.setType(eDefObj.getType());
    }
  }
}","/** 
 * Updates chart element Fill.
 * @param eObj chart element object.
 * @param eRefObj reference chart element object.
 * @param eDefObj default chart element object.
 * @generated Don't change this method manually.
 */
protected void updateFillImpl(String name,EObject eParentObj,Fill eObj,Fill eRefObj,Fill eDefObj){
  if (eObj != null || (eRefObj == null && eDefObj == null)) {
    return;
  }
  if (eRefObj != null) {
    ChartElementUtil.setEObjectAttribute(eParentObj,name,eRefObj,false);
  }
  if (eDefObj != null) {
    ChartElementUtil.setEObjectAttribute(eParentObj,name,eDefObj,false);
  }
}",0.5944907110826393
66317,"/** 
 * Returns the index of specified expression on GroupDefinition.
 * @param expr specified expression.
 * @param groupDefinitions list of <code>GroupDefinition</code>
 * @return
 * @throws ChartException
 */
private int getGroupIndex(String expr,List<IGroupDefinition> groupDefinitions) throws ChartException {
  if (expr == null) {
    return -1;
  }
  exprCodec.decode(expr);
  Set<String> bindingNameSet=exprCodec.getRowBindingNameSet();
  if (bindingNameSet.isEmpty()) {
    return -1;
  }
  for (int i=0; i < groupDefinitions.size(); i++) {
    IGroupDefinition gd=groupDefinitions.get(i);
    String exprGroupKey=gd.getKeyExpression();
    Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
    for (    String grpBinding : grpBindings) {
      if (bindingNameSet.contains(grpBinding)) {
        return i;
      }
    }
  }
  return -1;
}","/** 
 * Returns the index of specified expression on GroupDefinition.
 * @param expr specified expression.
 * @param groupDefinitions list of <code>GroupDefinition</code>
 * @return
 * @throws ChartException
 */
private int getGroupIndex(String expr,List<IGroupDefinition> groupDefinitions) throws ChartException {
  if (expr == null) {
    return -1;
  }
  exprCodec.decode(expr);
  Set<String> bindingNameSet=exprCodec.getRowBindingNameSet();
  boolean isJavaScript=ExpressionCodec.JAVASCRIPT.equals(exprCodec.getType());
  for (int i=0; i < groupDefinitions.size(); i++) {
    IGroupDefinition gd=groupDefinitions.get(i);
    String exprGroupKey=gd.getKeyExpression();
    if (isJavaScript) {
      if (expr.indexOf(exprGroupKey) >= 0) {
        return i;
      }
    }
    if (!bindingNameSet.isEmpty()) {
      Set<String> grpBindings=exprCodec.getRowBindingNameSet(exprGroupKey);
      for (      String grpBinding : grpBindings) {
        if (bindingNameSet.contains(grpBinding)) {
          return i;
        }
      }
    }
  }
  return -1;
}",0.5119916579770595
66318,"/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  jndiName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jndiName.isFocusControl() && jndiName.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          OdaException ex=new OdaException(JdbcPlugin.getResourceString(""String_Node_Str""));
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),ex);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(e1.getLocalizedMessage()),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}","/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  jndiName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jndiName.isFocusControl() && jndiName.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          OdaException ex=new OdaException(JdbcPlugin.getResourceString(""String_Node_Str""));
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),ex);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e1.getLocalizedMessage(),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}",0.9926470588235294
66319,"private static List getInputParameters(String reportDesignFile,int taskType,IReportEngine engine){
  IGetParameterDefinitionTask task=null;
  try {
    if (taskType == TASK_TYPE_RENDER) {
      task=engine.createGetParameterDefinitionTask(engine.openReportDocument(reportDesignFile).getReportRunnable());
    }
 else {
      task=engine.createGetParameterDefinitionTask(engine.openReportDesign(reportDesignFile));
    }
    ParameterFactory factory=new ParameterFactory(task);
    List parameters=factory.getRootChildren(false);
    task.close();
    task=null;
    return parameters;
  }
 catch (  EngineException e) {
    if (task != null) {
      task.close();
    }
  }
  return null;
}","private static List getInputParameters(String reportDesignFile,int taskType,IReportEngine engine){
  IGetParameterDefinitionTask task=null;
  IReportDocument document=null;
  try {
    if (taskType == TASK_TYPE_RENDER) {
      document=engine.openReportDocument(reportDesignFile);
      task=engine.createGetParameterDefinitionTask(document.getReportRunnable());
    }
 else {
      task=engine.createGetParameterDefinitionTask(engine.openReportDesign(reportDesignFile));
    }
    ParameterFactory factory=new ParameterFactory(task);
    List parameters=factory.getRootChildren(false);
    task.close();
    if (document != null) {
      document.close();
    }
    task=null;
    return parameters;
  }
 catch (  EngineException e) {
    if (task != null) {
      task.close();
    }
  }
  return null;
}",0.8596256684491979
66320,"public void createContent(Composite parent){
  isCreate=getBinding() == null;
  isRef=getBindingHolder().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF;
  composite=parent;
  ((GridLayout)composite.getLayout()).numColumns=4;
  lbName=new Label(composite,SWT.NONE);
  lbName.setText(NAME);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  gd.widthHint=200;
  if (isRef) {
    cmbName=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
    cmbName.setLayoutData(gd);
    cmbName.setVisibleItemCount(30);
    cmbName.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        modifyDialogContent();
        String bindingName=cmbName.getItem(cmbName.getSelectionIndex());
        for (Iterator iterator=getBindingHolder().getDataBindingReference().getColumnBindings().iterator(); iterator.hasNext(); ) {
          ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
          if (computedColumn.getName().equals(bindingName)) {
            setBinding(computedColumn);
            initDialog();
            return;
          }
        }
      }
    }
);
  }
 else {
    txtName=new Text(composite,SWT.BORDER);
    txtName.setLayoutData(gd);
    txtName.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        modifyDialogContent();
        validate();
      }
    }
);
  }
  lbDisplayNameID=new Label(composite,SWT.NONE);
  lbDisplayNameID.setText(DISPLAY_NAME_ID);
  lbDisplayNameID.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
        e.detail=SWT.TRAVERSE_NONE;
        openKeySelectionDialog();
      }
    }
  }
);
  txtDisplayNameID=new Text(composite,SWT.BORDER | SWT.READ_ONLY);
  txtDisplayNameID.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  btnDisplayNameID=new Button(composite,SWT.NONE);
  btnDisplayNameID.setEnabled(getAvailableResourceUrls() != null && getAvailableResourceUrls().length > 0 ? true : false);
  btnDisplayNameID.setText(""String_Node_Str"");
  btnDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      openKeySelectionDialog();
    }
  }
);
  btnRemoveDisplayNameID=new Button(composite,SWT.NONE);
  btnRemoveDisplayNameID.setImage(ReportPlatformUIImages.getImage(ISharedImages.IMG_TOOL_DELETE));
  btnRemoveDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnRemoveDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      txtDisplayNameID.setText(EMPTY_STRING);
      txtDisplayName.setText(EMPTY_STRING);
      modifyDialogContent();
      updateRemoveBtnState();
    }
  }
);
  new Label(composite,SWT.NONE).setText(DISPLAY_NAME);
  txtDisplayName=new Text(composite,SWT.BORDER);
  txtDisplayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
    }
  }
);
  txtDisplayName.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(DATA_TYPE);
  cmbType=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  cmbType.setLayoutData(gd);
  cmbType.setVisibleItemCount(30);
  cmbType.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
      validate();
    }
    public void widgetSelected(    SelectionEvent arg0){
      modifyDialogContent();
      validate();
    }
  }
);
  Label allowExportLabel=new Label(composite,SWT.NONE);
  allowExportLabel.setText(ALLOW_EXPORT);
  btnAllowExport=new Button(composite,SWT.CHECK);
  btnAllowExport.setSelection(true);
  GridData gd1=new GridData(GridData.FILL_HORIZONTAL);
  gd1.horizontalSpan=3;
  gd1.widthHint=200;
  btnAllowExport.setLayoutData(gd1);
  btnAllowExport.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      modifyDialogContent();
    }
  }
);
  WidgetUtil.setExcludeGridData(allowExportLabel,true);
  WidgetUtil.setExcludeGridData(btnAllowExport,true);
  if (isAggregate()) {
    createAggregateSection(composite);
  }
 else {
    createCommonSection(composite);
  }
  createMessageSection(composite);
  gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  setContentSize(composite);
}","public void createContent(Composite parent){
  isCreate=getBinding() == null;
  isRef=getBindingHolder().getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF;
  composite=parent;
  ((GridLayout)composite.getLayout()).numColumns=4;
  lbName=new Label(composite,SWT.NONE);
  lbName.setText(NAME);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  gd.widthHint=200;
  if (isRef) {
    cmbName=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
    cmbName.setLayoutData(gd);
    cmbName.setVisibleItemCount(30);
    cmbName.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        modifyDialogContent();
        String bindingName=cmbName.getItem(cmbName.getSelectionIndex());
        for (Iterator iterator=getBindingHolder().getDataBindingReference().getColumnBindings().iterator(); iterator.hasNext(); ) {
          ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
          if (computedColumn.getName().equals(bindingName)) {
            setBinding(computedColumn);
            initDialog();
            return;
          }
        }
      }
    }
);
  }
 else {
    txtName=new Text(composite,SWT.BORDER);
    txtName.setLayoutData(gd);
    txtName.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        modifyDialogContent();
        validate();
      }
    }
);
  }
  lbDisplayNameID=new Label(composite,SWT.NONE);
  lbDisplayNameID.setText(DISPLAY_NAME_ID);
  lbDisplayNameID.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
        e.detail=SWT.TRAVERSE_NONE;
        if (btnDisplayNameID.isEnabled()) {
          openKeySelectionDialog();
        }
      }
    }
  }
);
  txtDisplayNameID=new Text(composite,SWT.BORDER | SWT.READ_ONLY);
  txtDisplayNameID.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  btnDisplayNameID=new Button(composite,SWT.NONE);
  btnDisplayNameID.setEnabled(getAvailableResourceUrls() != null && getAvailableResourceUrls().length > 0 ? true : false);
  btnDisplayNameID.setText(""String_Node_Str"");
  btnDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      openKeySelectionDialog();
    }
  }
);
  btnRemoveDisplayNameID=new Button(composite,SWT.NONE);
  btnRemoveDisplayNameID.setImage(ReportPlatformUIImages.getImage(ISharedImages.IMG_TOOL_DELETE));
  btnRemoveDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnRemoveDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      txtDisplayNameID.setText(EMPTY_STRING);
      txtDisplayName.setText(EMPTY_STRING);
      modifyDialogContent();
      updateRemoveBtnState();
    }
  }
);
  new Label(composite,SWT.NONE).setText(DISPLAY_NAME);
  txtDisplayName=new Text(composite,SWT.BORDER);
  txtDisplayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
    }
  }
);
  txtDisplayName.setLayoutData(gd);
  new Label(composite,SWT.NONE).setText(DATA_TYPE);
  cmbType=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  cmbType.setLayoutData(gd);
  cmbType.setVisibleItemCount(30);
  cmbType.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
      validate();
    }
    public void widgetSelected(    SelectionEvent arg0){
      modifyDialogContent();
      validate();
    }
  }
);
  Label allowExportLabel=new Label(composite,SWT.NONE);
  allowExportLabel.setText(ALLOW_EXPORT);
  btnAllowExport=new Button(composite,SWT.CHECK);
  btnAllowExport.setSelection(true);
  GridData gd1=new GridData(GridData.FILL_HORIZONTAL);
  gd1.horizontalSpan=3;
  gd1.widthHint=200;
  btnAllowExport.setLayoutData(gd1);
  btnAllowExport.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      modifyDialogContent();
    }
  }
);
  WidgetUtil.setExcludeGridData(allowExportLabel,true);
  WidgetUtil.setExcludeGridData(btnAllowExport,true);
  if (isAggregate()) {
    createAggregateSection(composite);
  }
 else {
    createCommonSection(composite);
  }
  createMessageSection(composite);
  gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  setContentSize(composite);
}",0.9937970757642888
66321,"public void keyTraversed(TraverseEvent e){
  if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
    e.detail=SWT.TRAVERSE_NONE;
    openKeySelectionDialog();
  }
}","public void keyTraversed(TraverseEvent e){
  if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
    e.detail=SWT.TRAVERSE_NONE;
    if (btnDisplayNameID.isEnabled()) {
      openKeySelectionDialog();
    }
  }
}",0.8663101604278075
66322,"public void createContent(Composite parent){
  composite=parent;
  ((GridLayout)composite.getLayout()).numColumns=4;
  lbName=new Label(composite,SWT.NONE);
  lbName.setText(NAME);
  txtName=new Text(composite,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  gd.widthHint=250;
  txtName.setLayoutData(gd);
  txtName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  lbDisplayNameID=new Label(composite,SWT.NONE);
  lbDisplayNameID.setText(DISPLAY_NAME_ID);
  lbDisplayNameID.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
        e.detail=SWT.TRAVERSE_NONE;
        openKeySelectionDialog();
      }
    }
  }
);
  txtDisplayNameID=new Text(composite,SWT.BORDER | SWT.READ_ONLY);
  txtDisplayNameID.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  txtDisplayNameID.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  btnDisplayNameID=new Button(composite,SWT.NONE);
  btnDisplayNameID.setEnabled(getAvailableResourceUrls() != null && getAvailableResourceUrls().length > 0 ? true : false);
  btnDisplayNameID.setText(""String_Node_Str"");
  btnDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      openKeySelectionDialog();
    }
  }
);
  btnRemoveDisplayNameID=new Button(composite,SWT.NONE);
  btnRemoveDisplayNameID.setImage(ReportPlatformUIImages.getImage(ISharedImages.IMG_TOOL_DELETE));
  btnRemoveDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnRemoveDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      txtDisplayNameID.setText(EMPTY_STRING);
      txtDisplayName.setText(EMPTY_STRING);
      updateRemoveBtnState();
    }
  }
);
  new Label(composite,SWT.NONE).setText(DISPLAY_NAME);
  txtDisplayName=new Text(composite,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  txtDisplayName.setLayoutData(gd);
  txtDisplayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  new Label(composite,SWT.NONE).setText(DATA_TYPE);
  cmbType=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  cmbType.setLayoutData(gd);
  cmbType.setVisibleItemCount(30);
  cmbType.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
      validate();
    }
    public void widgetSelected(    SelectionEvent arg0){
      modifyDialogContent();
      validate();
    }
  }
);
  if (isAggregate()) {
    createAggregateSection(composite);
  }
 else {
    createCommonSection(composite);
  }
  createMessageSection(composite);
  gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  setContentSize(composite);
}","public void createContent(Composite parent){
  composite=parent;
  ((GridLayout)composite.getLayout()).numColumns=4;
  lbName=new Label(composite,SWT.NONE);
  lbName.setText(NAME);
  txtName=new Text(composite,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  gd.widthHint=250;
  txtName.setLayoutData(gd);
  txtName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  lbDisplayNameID=new Label(composite,SWT.NONE);
  lbDisplayNameID.setText(DISPLAY_NAME_ID);
  lbDisplayNameID.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
        e.detail=SWT.TRAVERSE_NONE;
        if (btnDisplayNameID.isEnabled()) {
          openKeySelectionDialog();
        }
      }
    }
  }
);
  txtDisplayNameID=new Text(composite,SWT.BORDER | SWT.READ_ONLY);
  txtDisplayNameID.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  txtDisplayNameID.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  btnDisplayNameID=new Button(composite,SWT.NONE);
  btnDisplayNameID.setEnabled(getAvailableResourceUrls() != null && getAvailableResourceUrls().length > 0 ? true : false);
  btnDisplayNameID.setText(""String_Node_Str"");
  btnDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      openKeySelectionDialog();
    }
  }
);
  btnRemoveDisplayNameID=new Button(composite,SWT.NONE);
  btnRemoveDisplayNameID.setImage(ReportPlatformUIImages.getImage(ISharedImages.IMG_TOOL_DELETE));
  btnRemoveDisplayNameID.setToolTipText(Messages.getString(""String_Node_Str""));
  btnRemoveDisplayNameID.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      txtDisplayNameID.setText(EMPTY_STRING);
      txtDisplayName.setText(EMPTY_STRING);
      updateRemoveBtnState();
    }
  }
);
  new Label(composite,SWT.NONE).setText(DISPLAY_NAME);
  txtDisplayName=new Text(composite,SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  txtDisplayName.setLayoutData(gd);
  txtDisplayName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      modifyDialogContent();
      validate();
    }
  }
);
  new Label(composite,SWT.NONE).setText(DATA_TYPE);
  cmbType=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  cmbType.setLayoutData(gd);
  cmbType.setVisibleItemCount(30);
  cmbType.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent arg0){
      validate();
    }
    public void widgetSelected(    SelectionEvent arg0){
      modifyDialogContent();
      validate();
    }
  }
);
  if (isAggregate()) {
    createAggregateSection(composite);
  }
 else {
    createCommonSection(composite);
  }
  createMessageSection(composite);
  gd=new GridData(GridData.FILL_BOTH);
  composite.setLayoutData(gd);
  setContentSize(composite);
}",0.9912799750856433
66323,"public void keyTraversed(TraverseEvent e){
  if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
    e.detail=SWT.TRAVERSE_NONE;
    openKeySelectionDialog();
  }
}","public void keyTraversed(TraverseEvent e){
  if (e.detail == SWT.TRAVERSE_MNEMONIC && e.doit) {
    e.detail=SWT.TRAVERSE_NONE;
    if (btnDisplayNameID.isEnabled()) {
      openKeySelectionDialog();
    }
  }
}",0.8663101604278075
66324,"public void dispose(){
  reportHandle.removeValidationListener(this);
  SessionHandleAdapter.getInstance().getMediator(reportHandle).removeColleague(getSelectionSynchronizer());
}","public void dispose(){
  reportHandle.removeValidationListener(this);
  ReportMediator mediator=SessionHandleAdapter.getInstance().getMediator(reportHandle,false);
  if (mediator != null) {
    mediator.removeColleague(getSelectionSynchronizer());
  }
}",0.8240740740740741
66325,"/** 
 * The <code>Page</code> implementation of this <code>IPage</code> method disposes of this page's control (if it has one and it has not already been disposed).
 */
public void dispose(){
  selectionChangedListeners.clear();
  treeViewer=null;
  if (reportHandle != null)   SessionHandleAdapter.getInstance().getMediator(reportHandle).removeColleague(this);
  super.dispose();
}","/** 
 * The <code>Page</code> implementation of this <code>IPage</code> method disposes of this page's control (if it has one and it has not already been disposed).
 */
public void dispose(){
  selectionChangedListeners.clear();
  treeViewer=null;
  if (reportHandle != null) {
    ReportMediator mediator=SessionHandleAdapter.getInstance().getMediator(reportHandle,false);
    if (mediator != null) {
      mediator.removeColleague(this);
    }
  }
  super.dispose();
}",0.8896713615023474
66326,"public boolean layoutCheck(){
  int rowCount=getRowCount();
  int columnCount=getColumnCount();
  CrosstabCellAdapter[][] adapters=new CrosstabCellAdapter[rowCount][columnCount];
  for (int i=0; i < oldModelList.size(); i++) {
    CrosstabCellAdapter adapter=(CrosstabCellAdapter)oldModelList.get(i);
    int rowNumber=adapter.getRowNumber();
    int rowSpan=adapter.getRowSpan();
    int columnNumber=adapter.getColumnNumber();
    int columnSpan=adapter.getColumnSpan();
    for (int j=0; j < rowSpan; j++) {
      int adapterRow=rowNumber + j;
      if (adapterRow > rowCount) {
        return false;
      }
      for (int k=0; k < columnSpan; k++) {
        int adapterColumn=columnNumber + k;
        if (adapterColumn > columnCount) {
          return false;
        }
        if (adapters[adapterRow - 1][adapterColumn - 1] == null) {
          adapters[adapterRow - 1][adapterColumn - 1]=adapter;
        }
 else         if (adapters[adapterRow - 1][adapterColumn - 1] != adapter) {
          return false;
        }
      }
    }
  }
  for (int i=0; i < adapters.length; i++) {
    for (int j=0; j < adapters[i].length; j++) {
      if (adapters[i][j] == null) {
        return false;
      }
    }
  }
  return true;
}","public boolean layoutCheck(){
  int rowCount=getRowCount();
  int columnCount=getColumnCount();
  CrosstabCellAdapter[][] adapters=new CrosstabCellAdapter[rowCount][columnCount];
  for (int i=0; i < oldModelList.size(); i++) {
    CrosstabCellAdapter adapter=(CrosstabCellAdapter)oldModelList.get(i);
    int rowNumber=adapter.getRowNumber();
    int rowSpan=adapter.getRowSpan();
    int columnNumber=adapter.getColumnNumber();
    int columnSpan=adapter.getColumnSpan();
    for (int j=0; j < rowSpan; j++) {
      int adapterRow=rowNumber + j;
      if (adapterRow > rowCount) {
        return false;
      }
      for (int k=0; k < columnSpan; k++) {
        int adapterColumn=columnNumber + k;
        if (adapterColumn > columnCount) {
          return false;
        }
        if (adapters[adapterRow - 1][adapterColumn - 1] == null) {
          adapters[adapterRow - 1][adapterColumn - 1]=adapter;
        }
 else         if (adapters[adapterRow - 1][adapterColumn - 1] != adapter) {
        }
      }
    }
  }
  for (int i=0; i < adapters.length; i++) {
    for (int j=0; j < adapters[i].length; j++) {
      if (adapters[i][j] == null) {
        return false;
      }
    }
  }
  return true;
}",0.990139687756779
66327,"/** 
 * Gets the BIRT resource path
 * @return
 * @throws URISyntaxException
 */
public URI getReportDesignPath(){
  if (Utility.getReportModuleHandle() == null || Utility.getReportModuleHandle().getSystemId() == null) {
    return null;
  }
  try {
    return new URI(Utility.getReportModuleHandle().getSystemId().getPath());
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","/** 
 * Gets the BIRT resource path
 * @return
 * @throws URISyntaxException
 */
public URI getReportDesignPath(){
  if (Utility.getReportModuleHandle() == null || Utility.getReportModuleHandle().getSystemId() == null) {
    return null;
  }
  try {
    return Utility.getReportModuleHandle().getSystemId().toURI();
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.9698558322411532
66328,"public IPath getInputPath(IEditorInput input){
  if (input instanceof IURIEditorInput) {
    return new Path(((IURIEditorInput)input).getURI().getPath());
  }
  return null;
}","public IPath getInputPath(IEditorInput input){
  if (input instanceof IURIEditorInput) {
    return new Path(((IURIEditorInput)input).getURI().getPath());
  }
  if (input instanceof IFileEditorInput) {
    return ((IFileEditorInput)input).getFile().getLocation();
  }
  return null;
}",0.7145969498910676
66329,"/** 
 * @see org.eclipse.draw2d.AbstractLayout#calculatePreferredSize(IFigure,int,int)
 */
protected Dimension calculatePreferredSize(IFigure container,int wHint,int hHint){
  if (wHint > -1)   wHint=Math.max(0,wHint - container.getInsets().getWidth());
  if (hHint > -1)   hHint=Math.max(0,hHint - container.getInsets().getHeight());
  int maxWidth;
  maxWidth=wHint;
  hHint=-1;
  if (maxWidth < 0) {
    maxWidth=Integer.MAX_VALUE;
  }
  Dimension prefSize=new Dimension();
  List children=container.getChildren();
  int width=0;
  int height=0;
  IFigure child;
  IFigure lastChild=null;
  Dimension childSize;
  for (int i=0; i < children.size(); i++) {
    child=(IFigure)children.get(i);
    Insets fmargin=getFigureMargin(child);
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    if (getDisplay(child) != ReportItemConstraint.BLOCK) {
      wHint=-1;
    }
    childSize=getChildSize(child,wHint,hHint);
    if (i == 0) {
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
 else     if ((getDisplay(child) == ReportItemConstraint.NONE)) {
    }
 else     if ((width + childSize.width + fmargin.getWidth()+ getMinorSpacing() <= maxWidth) && ((getDisplay(child) == ReportItemConstraint.INLINE) && (getDisplay(lastChild) == ReportItemConstraint.INLINE))) {
      width+=childSize.width + fmargin.getWidth() + getMinorSpacing();
      height=Math.max(height,childSize.height + fmargin.getHeight());
    }
 else {
      prefSize.height+=height + getMajorSpacing();
      prefSize.width=Math.max(prefSize.width,width);
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
    lastChild=child;
  }
  prefSize.height+=height;
  prefSize.width=Math.max(prefSize.width,width);
  prefSize.width+=container.getInsets().getWidth();
  prefSize.height+=container.getInsets().getHeight();
  prefSize.union(getBorderPreferredSize(container));
  return prefSize;
}","/** 
 * @see org.eclipse.draw2d.AbstractLayout#calculatePreferredSize(IFigure,int,int)
 */
protected Dimension calculatePreferredSize(IFigure container,int wHint,int hHint){
  if (wHint > -1)   wHint=Math.max(0,wHint - container.getInsets().getWidth());
  if (hHint > -1)   hHint=Math.max(0,hHint - container.getInsets().getHeight());
  int maxWidth;
  maxWidth=wHint;
  hHint=-1;
  if (maxWidth < 0) {
    maxWidth=Integer.MAX_VALUE;
  }
  Dimension prefSize=new Dimension();
  List children=container.getChildren();
  int width=0;
  int height=0;
  IFigure child;
  IFigure lastChild=null;
  Dimension childSize;
  int caleHint;
  for (int i=0; i < children.size(); i++) {
    child=(IFigure)children.get(i);
    Insets fmargin=getFigureMargin(child);
    if (wHint != -1) {
      wHint=Math.max(0,wHint - fmargin.getWidth());
    }
    if (getDisplay(child) != ReportItemConstraint.BLOCK) {
      caleHint=-1;
    }
 else {
      caleHint=wHint;
    }
    childSize=getChildSize(child,caleHint,hHint);
    if (i == 0) {
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
 else     if ((getDisplay(child) == ReportItemConstraint.NONE)) {
    }
 else     if ((width + childSize.width + fmargin.getWidth()+ getMinorSpacing() <= maxWidth) && ((getDisplay(child) == ReportItemConstraint.INLINE) && (getDisplay(lastChild) == ReportItemConstraint.INLINE))) {
      width+=childSize.width + fmargin.getWidth() + getMinorSpacing();
      height=Math.max(height,childSize.height + fmargin.getHeight());
    }
 else {
      prefSize.height+=height + getMajorSpacing();
      prefSize.width=Math.max(prefSize.width,width);
      width=childSize.width + fmargin.getWidth();
      height=childSize.height + fmargin.getHeight();
    }
    lastChild=child;
  }
  prefSize.height+=height;
  prefSize.width=Math.max(prefSize.width,width);
  prefSize.width+=container.getInsets().getWidth();
  prefSize.height+=container.getInsets().getHeight();
  prefSize.union(getBorderPreferredSize(container));
  return prefSize;
}",0.984744094488189
66330,"private SimpleLevelFilter createSimpleLevelFilter(IFilterDefinition filter,List bindings){
  if (!(filter instanceof CubeFilterDefinition))   return null;
  IBaseExpression expr=((CubeFilterDefinition)filter).getExpression();
  if (!(expr instanceof IConditionalExpression))   return null;
  IConditionalExpression condExpr=(IConditionalExpression)((CubeFilterDefinition)filter).getExpression();
  if (isVariableOperandInDimensionFilter(condExpr))   return null;
  Set refDimLevel;
  try {
    refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(condExpr.getExpression(),bindings);
    if (refDimLevel.size() != 1)     return null;
    DimLevel dimlevel=(DimLevel)refDimLevel.iterator().next();
    if (dimlevel.getAttrName() != null)     return null;
    if (!(condExpr.getOperand1() instanceof IExpressionCollection)) {
      Object Op1=ScriptEvalUtil.evalExpr((IScriptExpression)condExpr.getOperand1(),session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
      if (Op1 == null)       return null;
      ISelection[] selction=new ISelection[1];
      if (condExpr.getOperator() == IConditionalExpression.OP_EQ || condExpr.getOperator() == IConditionalExpression.OP_IN) {
        selction[0]=SelectionFactory.createOneKeySelection(new Object[]{Op1});
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GT) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GE) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,true,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LT) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LE) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,true);
      }
 else       return null;
      return new SimpleLevelFilter(dimlevel,selction);
    }
 else     if (condExpr.getOperator() == IConditionalExpression.OP_IN) {
      IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
      Object[] exprs=combinedExpr.getExpressions().toArray();
      Object[] opValues=new Object[exprs.length];
      boolean existValue=false;
      for (int i=0; i < opValues.length; i++) {
        opValues[i]=ScriptEvalUtil.evalExpr((IBaseExpression)exprs[i],session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
        if (opValues[i] != null) {
          existValue=true;
        }
      }
      ISelection[] selction=new ISelection[1];
      Object[][] keyValues=null;
      if (opValues.length == 1 && opValues[0] instanceof Object[]) {
        Object[] mulValue=(Object[])opValues[0];
        keyValues=new Object[mulValue.length][1];
        for (int i=0; i < mulValue.length; i++) {
          keyValues[i][0]=mulValue[i];
        }
      }
 else {
        keyValues=new Object[opValues.length][1];
        for (int i=0; i < opValues.length; i++) {
          keyValues[i][0]=opValues[i];
        }
      }
      selction[0]=SelectionFactory.createMutiKeySelection(keyValues);
      return new SimpleLevelFilter(dimlevel,selction);
    }
    return null;
  }
 catch (  DataException e) {
    return null;
  }
}","private SimpleLevelFilter createSimpleLevelFilter(IFilterDefinition filter,List bindings){
  if (!(filter instanceof CubeFilterDefinition) || ((CubeFilterDefinition)filter).getAxisQualifierValues() != null)   return null;
  IBaseExpression expr=((CubeFilterDefinition)filter).getExpression();
  if (!(expr instanceof IConditionalExpression))   return null;
  IConditionalExpression condExpr=(IConditionalExpression)((CubeFilterDefinition)filter).getExpression();
  if (isVariableOperandInDimensionFilter(condExpr))   return null;
  Set refDimLevel;
  try {
    refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(condExpr.getExpression(),bindings);
    if (refDimLevel.size() != 1)     return null;
    DimLevel dimlevel=(DimLevel)refDimLevel.iterator().next();
    if (dimlevel.getAttrName() != null)     return null;
    if (!(condExpr.getOperand1() instanceof IExpressionCollection)) {
      Object Op1=ScriptEvalUtil.evalExpr((IScriptExpression)condExpr.getOperand1(),session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
      if (Op1 == null)       return null;
      ISelection[] selction=new ISelection[1];
      if (condExpr.getOperator() == IConditionalExpression.OP_EQ || condExpr.getOperator() == IConditionalExpression.OP_IN) {
        selction[0]=SelectionFactory.createOneKeySelection(new Object[]{Op1});
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GT) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GE) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,true,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LT) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LE) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,true);
      }
 else       return null;
      return new SimpleLevelFilter(dimlevel,selction);
    }
 else     if (condExpr.getOperator() == IConditionalExpression.OP_IN) {
      IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
      Object[] exprs=combinedExpr.getExpressions().toArray();
      Object[] opValues=new Object[exprs.length];
      boolean existValue=false;
      for (int i=0; i < opValues.length; i++) {
        opValues[i]=ScriptEvalUtil.evalExpr((IBaseExpression)exprs[i],session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
        if (opValues[i] != null) {
          existValue=true;
        }
      }
      ISelection[] selction=new ISelection[1];
      Object[][] keyValues=null;
      if (opValues.length == 1 && opValues[0] instanceof Object[]) {
        Object[] mulValue=(Object[])opValues[0];
        keyValues=new Object[mulValue.length][1];
        for (int i=0; i < mulValue.length; i++) {
          keyValues[i][0]=mulValue[i];
        }
      }
 else {
        keyValues=new Object[opValues.length][1];
        for (int i=0; i < opValues.length; i++) {
          keyValues[i][0]=opValues[i];
        }
      }
      selction[0]=SelectionFactory.createMutiKeySelection(keyValues);
      return new SimpleLevelFilter(dimlevel,selction);
    }
    return null;
  }
 catch (  DataException e) {
    return null;
  }
}",0.99035832493884
66331,"/** 
 * Returns the 1-based index of the outermost group in which the current row is the first row.  For example, if a query contain N groups  (group with index 1 being the outermost group, and group with  index N being the innermost group), and this function returns a value M, it indicates that the  current row is the first row in groups with  indexes (M, M+1, ..., N ).
 * @return	The 1-based index of the outermost group in which the current row is the first row; (N+1) if the current row is not at the start of any group;
 */
public int getStartingGroupLevel() throws DataException {
  checkHasCurrentRow();
  if (cacheProvider.getCurrentIndex() == 0)   return 0;
  if (groups.length == 0)   return 1;
  int childGroupIdx=cacheProvider.getCurrentIndex();
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level >= 0; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    if (childGroupIdx == currentGroup.firstChild) {
      childGroupIdx=currentGroupIdx;
      currentGroupIdx=currentGroup.parent;
      continue;
    }
    break;
  }
  return level + 2;
}","/** 
 * Returns the 1-based index of the outermost group in which the current row is the first row. For example, if a query contain N groups (group with index 1 being the outermost group, and group with index N being the innermost group), and this function returns a value M, it indicates that the current row is the first row in groups with indexes (M, M+1, ..., N ).
 * @return	The 1-based index of the outermost group in whichthe current row is the first row; (N+1) if the current row is not at the start of any group;
 */
public int getStartingGroupLevel() throws DataException {
  checkHasCurrentRow();
  if (cacheProvider.getCurrentIndex() == 0)   return 0;
  if (groups.length == 0)   return 1;
  int childGroupIdx=cacheProvider.getCurrentIndex();
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level >= 0; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    if (childGroupIdx == currentGroup.firstChild) {
      childGroupIdx=currentGroupIdx;
      currentGroupIdx=currentGroup.parent;
      continue;
    }
    break;
  }
  return level + 2;
}",0.958670260557053
66332,"private GroupInfo findGroup(int groupLevel,int groupIndex){
  if (groupIndex >= groups[groupLevel].size())   return null;
 else   return (GroupInfo)groups[groupLevel].get(groupIndex);
}","private GroupInfo findGroup(int groupLevel,int groupIndex){
  if (groupIndex >= groups[groupLevel].size())   return null;
 else {
    try {
      return (GroupInfo)groups[groupLevel].get(groupIndex);
    }
 catch (    Exception e) {
      return null;
    }
  }
}",0.8214285714285714
66333,"/** 
 * Gets the index of the current group at the specified group level. The index starts at 0  
 */
public int getCurrentGroupIndex(int groupLevel) throws DataException {
  checkHasCurrentRow();
  if (groupLevel == 0)   return 0;
  if (groupLevel < 0 || groupLevel > groups.length)   throw new DataException(ResourceConstants.INVALID_GROUP_LEVEL,Integer.valueOf(groupLevel));
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level > groupLevel - 1; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    currentGroupIdx=currentGroup.parent;
  }
  return currentGroupIdx;
}","/** 
 * Gets the index of the current group at the specified group level. The index starts at 0
 */
public int getCurrentGroupIndex(int groupLevel) throws DataException {
  checkHasCurrentRow();
  if (groupLevel == 0)   return 0;
  if (groupLevel < 0 || groupLevel > groups.length)   throw new DataException(ResourceConstants.INVALID_GROUP_LEVEL,Integer.valueOf(groupLevel));
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level > groupLevel - 1; level--) {
    GroupInfo currentGroup=findGroup(level,currentGroupIdx);
    currentGroupIdx=currentGroup.parent;
  }
  return currentGroupIdx;
}",0.9984025559105432
66334,"/** 
 * Returns the 1-based index of the outermost group in which the current row is the last row.  For example, if a query contain N groups  (group with index 1 being the outermost group, and group with  index N being the innermost group), and this function returns a value M, it indicates that the  current row is the last row in groups with  indexes (M, M+1, ..., N ). 
 * @return	The 1-based index of the outermost group in which the current row is the last row; (N+1) if the current row is not at the end of any group;
 */
public int getEndingGroupLevel() throws DataException {
  checkHasCurrentRow();
  if (cacheProvider.getCurrentIndex() == cacheProvider.getCount() - 1)   return 0;
  if (groups.length == 0)   return 1;
  int childGroupIdx=cacheProvider.getCurrentIndex();
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level >= 0; level--) {
    GroupInfo nextGroup=findGroup(level,currentGroupIdx + 1);
    if (nextGroup != null && childGroupIdx == nextGroup.firstChild - 1) {
      childGroupIdx=currentGroupIdx;
      currentGroupIdx=findGroup(level,currentGroupIdx).parent;
      continue;
    }
    break;
  }
  return level + 2;
}","/** 
 * Returns the 1-based index of the outermost group in which the current row is the last row. For example, if a query contain N groups (group with index 1 being the outermost group, and group with index N being the innermost group), and this function returns a value M, it indicates that the current row is the last row in groups with indexes (M, M+1, ..., N ).
 * @return	The 1-based index of the outermost group in whichthe current row is the last row; (N+1) if the current row is not at the end of any group;
 */
public int getEndingGroupLevel() throws DataException {
  checkHasCurrentRow();
  if (cacheProvider.getCurrentIndex() == cacheProvider.getCount() - 1)   return 0;
  if (groups.length == 0)   return 1;
  int childGroupIdx=cacheProvider.getCurrentIndex();
  int currentGroupIdx=leafGroupIdx;
  int level;
  for (level=groups.length - 1; level >= 0; level--) {
    GroupInfo nextGroup=findGroup(level,currentGroupIdx + 1);
    if (nextGroup != null && childGroupIdx == nextGroup.firstChild - 1) {
      childGroupIdx=currentGroupIdx;
      currentGroupIdx=findGroup(level,currentGroupIdx).parent;
      continue;
    }
    break;
  }
  return level + 2;
}",0.9613259668508288
66335,"/** 
 * Advance the leaf group with offset.
 * @param offset
 * @throws DataException 
 */
public void move() throws DataException {
  if (groups.length > 0) {
    binaryMove();
  }
}","/** 
 * Advance the leaf group with offset.
 * @param offset
 * @throws DataException
 */
public void move() throws DataException {
  if (groups.length > 0) {
    binaryMove();
  }
}",0.9972602739726028
66336,"public void performRequest(ReportRequest request){
  if (ReportRequest.OPEN_EDITOR.equals(request.getType()) && (request.getSelectionModelList().size() == 1)) {
    if (request.getSelectionModelList().get(0) instanceof MasterPageHandle) {
      handleOpenMasterPage(request);
      return;
    }
    if (request.getSelectionModelList().get(0) instanceof ScriptObjectNode) {
      handleOpenScriptPage(request);
      return;
    }
  }
}","public void performRequest(ReportRequest request){
  if (ReportRequest.OPEN_EDITOR.equals(request.getType()) && (request.getSelectionModelList().size() == 1)) {
    if (request.getSelectionModelList().get(0) instanceof MasterPageHandle) {
      handleOpenMasterPage(request);
      return;
    }
    if (request.getSelectionModelList().get(0) instanceof ScriptObjectNode) {
      ScriptObjectNode node=(ScriptObjectNode)request.getSelectionModelList().get(0);
      if (node.getParent() instanceof PropertyHandle) {
        PropertyHandle proHandle=(PropertyHandle)node.getParent();
        if (proHandle.getElementHandle().getModuleHandle().equals(getModel())) {
          handleOpenScriptPage(request);
        }
      }
      return;
    }
  }
}",0.7364864864864865
66337,"public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof VariableElementHandle && target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    editPart.getRoot().getModel();
    if (editPart.getModel() instanceof ReportDesignHandle || editPart.getModel() instanceof DesignElementHandle || (editPart.getModel() instanceof SlotHandle)) {
      if (editPart.getModel() instanceof SlotHandle) {
        int slot_id=((SlotHandle)editPart.getModel()).getSlotID();
        if (slot_id == ISimpleMasterPageModel.PAGE_HEADER_SLOT || slot_id == ISimpleMasterPageModel.PAGE_FOOTER_SLOT) {
          if (((SlotHandle)editPart.getModel()).getCount() > 0)           return DNDService.LOGIC_FALSE;
 else           return DNDService.LOGIC_TRUE;
        }
 else         if (slot_id == ISimpleMasterPageModel.PAGE_HEADER_SLOT) {
          return DNDService.LOGIC_TRUE;
        }
      }
      if (getMasterPageHandle(editPart) != null || ((VariableElementHandle)transfer).getType().equals(DesignChoiceConstants.VARIABLE_TYPE_REPORT))       return DNDService.LOGIC_TRUE;
 else       return DNDService.LOGIC_FALSE;
    }
  }
  return DNDService.LOGIC_UNKNOW;
}","public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof VariableElementHandle && target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    editPart.getRoot().getModel();
    if (editPart.getModel() instanceof ReportDesignHandle || editPart.getModel() instanceof DesignElementHandle || (editPart.getModel() instanceof SlotHandle)) {
      if (editPart.getModel() instanceof SlotHandle) {
        int slot_id=((SlotHandle)editPart.getModel()).getSlotID();
        if (slot_id == ISimpleMasterPageModel.PAGE_HEADER_SLOT || slot_id == ISimpleMasterPageModel.PAGE_FOOTER_SLOT) {
          if (((SlotHandle)editPart.getModel()).getCount() > 0)           return DNDService.LOGIC_FALSE;
 else           return DNDService.LOGIC_TRUE;
        }
 else         if (slot_id == ISimpleMasterPageModel.PAGE_HEADER_SLOT) {
          return DNDService.LOGIC_TRUE;
        }
      }
      if (getMasterPageHandle(editPart) != null || DesignChoiceConstants.VARIABLE_TYPE_REPORT.equals(((VariableElementHandle)transfer).getType()))       return DNDService.LOGIC_TRUE;
 else       return DNDService.LOGIC_FALSE;
    }
  }
  return DNDService.LOGIC_UNKNOW;
}",0.9577814569536424
66338,"public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSave();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (resolve != null && resolve.reset()) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (resolve != null && resolve.reload(getModel())) {
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      ModuleHandle currentModel=getModel();
      SessionHandleAdapter.getInstance().setReportDesignHandle(currentModel);
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),currentModel);
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        ((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            if (curPage instanceof IAdvanceReportEditorPage) {
              if (((IAdvanceReportEditorPage)curPage).isSensitivePartChange()) {
                curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
              }
            }
 else {
              curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
            }
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}","public void partActivated(IWorkbenchPart part){
  fActivePart=part;
  if (part != this) {
    if (part instanceof PageBookView) {
      PageBookView view=(PageBookView)part;
      if (view.getCurrentPage() instanceof DesignerOutlinePage) {
        ISelectionProvider provider=(ISelectionProvider)view.getCurrentPage();
        ReportRequest request=new ReportRequest(view.getCurrentPage());
        List list=new ArrayList();
        if (provider.getSelection() instanceof IStructuredSelection) {
          list=((IStructuredSelection)provider.getSelection()).toList();
        }
        request.setSelectionObject(list);
        request.setType(ReportRequest.SELECTION);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
        SessionHandleAdapter.getInstance().getMediator().pushState();
      }
    }
    if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
      if (((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getEditDomain().getPaletteViewer() != null) {
        GraphicalEditorWithFlyoutPalette editor=(GraphicalEditorWithFlyoutPalette)getActivePageInstance();
        GraphicalViewer view=editor.getGraphicalViewer();
        view.getEditDomain().loadDefaultTool();
      }
    }
    return;
  }
  if (part == this) {
    confirmSave();
    final ModuleHandle oldHandle=getModel();
    if (needReset) {
      if (resolve != null && resolve.reset()) {
        getProvider().getReportModuleHandle(getEditorInput(),true);
      }
 else {
        needReset=false;
      }
      needReload=false;
    }
    if (needReload) {
      if (resolve != null && resolve.reload(getModel())) {
      }
 else {
        needReload=false;
      }
    }
    if (getEditorInput().exists()) {
      handleActivation();
      ModuleHandle currentModel=getModel();
      SessionHandleAdapter.getInstance().setReportDesignHandle(currentModel);
      String str=SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder();
      UIUtil.processSessionResourceFolder(getEditorInput(),UIUtil.getProjectFromInput(getEditorInput()),currentModel);
      if (!str.equals(SessionHandleAdapter.getInstance().getSessionHandle().getResourceFolder()) && getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        ((GraphicalEditorWithFlyoutPalette)getActivePageInstance()).getGraphicalViewer().getRootEditPart();
        refreshGraphicalEditor();
      }
    }
    if (getActivePageInstance() instanceof IReportEditorPage) {
      boolean isDispatch=false;
      if (getActivePageInstance() instanceof GraphicalEditorWithFlyoutPalette) {
        isDispatch=true;
      }
 else       if (needReload || needReset) {
        isDispatch=true;
      }
      final boolean tempDispatch=isDispatch;
      Display.getCurrent().asyncExec(new Runnable(){
        public void run(){
          IReportEditorPage curPage=(IReportEditorPage)getActivePageInstance();
          if (needReload || needReset) {
            curPage.markPageStale(IPageStaleType.MODEL_RELOAD);
          }
          if (getActivePageInstance() != null) {
            if (curPage instanceof IAdvanceReportEditorPage) {
              if (((IAdvanceReportEditorPage)curPage).isSensitivePartChange()) {
                curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
              }
            }
 else {
              curPage.onBroughtToTop((IReportEditorPage)getActivePageInstance());
            }
          }
          if (!tempDispatch) {
            return;
          }
          if (needReload || needReset) {
            updateRelatedViews();
            UIUtil.refreshCurrentEditorMarkers();
            curPage.markPageStale(IPageStaleType.NONE);
          }
          if (needReset) {
            SessionHandleAdapter.getInstance().resetReportDesign(oldHandle,getModel());
            oldHandle.close();
          }
          needReload=false;
          needReset=false;
        }
      }
);
    }
  }
}",0.9936948297604036
66339,"/** 
 * It is used to test flush. Once the archive file is flushed, the stream should be flushed automactially. test steps: <ol> <li>create a archive file</li> <li>. create a reader and writer.</li> <li>create a output stream using the writer and input stream for reader.</li> <li>write some data into the output stream</li> <li>read the data from the input stream, different.</li> <li>flush the archive file</li> <li>read the data from the input stream, same.</li> </ol>
 */
public void testFlush() throws IOException {
  ArchiveFile af=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ArchiveReader reader=new ArchiveReader(af);
    ArchiveWriter writer=new ArchiveWriter(af);
    OutputStream out=writer.createOutputStream(""String_Node_Str"");
    InputStream in=reader.getInputStream(""String_Node_Str"");
    out.write(12);
    assertEquals(0,in.available());
    af.flush();
    assertEquals(1,in.available());
    int v=in.read();
    assertEquals(12,v);
    v=in.read();
    assertEquals(-1,v);
    in.close();
    out.close();
    reader.close();
    writer.finish();
  }
  finally {
    af.close();
    new File(""String_Node_Str"").delete();
  }
}","/** 
 * It is used to test flush. Once the archive file is flushed, the stream should be flushed automatically. test steps: <ol> <li>create a archive file</li> <li>. create a reader and writer.</li> <li>create a output stream using the writer and input stream for reader.</li> <li>write some data into the output stream</li> <li>read the data from the input stream, different.</li> <li>flush the archive file</li> <li>read the data from the input stream, same.</li> </ol>
 */
public void testFlush() throws IOException {
  ArchiveFile af=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ArchiveReader reader=new ArchiveReader(af);
    ArchiveWriter writer=new ArchiveWriter(af);
    OutputStream out=writer.createOutputStream(""String_Node_Str"");
    InputStream in=reader.getInputStream(""String_Node_Str"");
    out.write(12);
    assertEquals(0,in.available());
    af.flush();
    assertEquals(1,in.available());
    int v=in.read();
    assertEquals(12,v);
    v=in.read();
    assertEquals(-1,v);
    in.close();
    out.close();
    reader.close();
    writer.finish();
  }
  finally {
    af.close();
    new File(""String_Node_Str"").delete();
  }
}",0.9974358974358974
66340,"public void testReadWrite() throws IOException {
  ArchiveFile af=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ArchiveEntry entry=af.createEntry(""String_Node_Str"");
    entry.write(100);
    assertEquals(1,entry.getLength());
    entry.refresh();
    entry.close();
  }
  finally {
    af.close();
    new File(""String_Node_Str"").delete();
  }
}","/** 
 * Demonstrate how to use the archive entry and input/output stream
 */
public void testReadWrite() throws IOException {
  ArchiveFile af=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  try {
    ArchiveWriter writer=new ArchiveWriter(af);
    ArchiveReader reader=new ArchiveReader(af);
    ArchiveEntry entry1=af.createEntry(""String_Node_Str"");
    entry1.write(0,new byte[]{0,0,0,1},0,4);
    assertEquals(4,entry1.getLength());
    RAInputStream in=reader.getInputStream(""String_Node_Str"");
    assertEquals(1,in.readInt());
    in.close();
    entry1.close();
    RAOutputStream out=writer.createOutputStream(""String_Node_Str"");
    out.writeInt(2);
    in=reader.getInputStream(""String_Node_Str"");
    assertEquals(0,in.available());
    af.flush();
    assertEquals(2,in.readInt());
    out.writeInt(3);
    out.close();
    assertEquals(3,in.readInt());
  }
  finally {
    af.close();
    new File(""String_Node_Str"").delete();
  }
}",0.3575757575757576
66341,"public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize && orignalLevelCount == newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate) {
    sortedFactRows.push(newRow);
  }
 else {
    factRows.add(newRow);
  }
}","public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize || orignalLevelCount != newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate) {
    sortedFactRows.push(newRow);
  }
 else {
    factRows.add(newRow);
  }
}",0.9973498233215548
66342,"/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  existReferenceDate=existReferenceDate(aggregations);
  simpleFunc=getFunctionName(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}","/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  existReferenceDate=existReferenceDate(aggregations);
  simpleFunc=getSimpleFunction(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}",0.9980103461997611
66343,"private static boolean equal(AggregationFunctionDefinition func1,AggregationFunctionDefinition func2){
  if (!ComparatorUtil.isEqualObject(func1.getFunctionName(),func2.getFunctionName()))   return false;
  if (!ComparatorUtil.isEqualObject(func1.getMeasureName(),func2.getMeasureName()))   return false;
  if (!ComparatorUtil.isEqualObject(func1.getParaCol(),func2.getParaCol()))   return false;
  if (!ComparatorUtil.isEqualObject(func1.getParaValue(),func2.getParaValue()))   return false;
  if (func1.getFilterEvalHelper() == null && func2.getFilterEvalHelper() == null)   return false;
  return true;
}","private static boolean equal(AggregationFunctionDefinition func1,AggregationFunctionDefinition func2){
  if (!ComparatorUtil.isEqualObject(func1.getFunctionName(),func2.getFunctionName()))   return false;
  if (!ComparatorUtil.isEqualObject(func1.getMeasureName(),func2.getMeasureName()))   return false;
  if (!ComparatorUtil.isEqualObject(func1.getParaCol(),func2.getParaCol()))   return false;
  if (!ComparatorUtil.isEqualObject(func1.getParaValue(),func2.getParaValue()))   return false;
  if (func1.getFilterEvalHelper() != null || func2.getFilterEvalHelper() != null)   return false;
  return true;
}",0.9835255354200988
66344,"public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (this.existReferenceDate) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
    sortedFactRows.push(newRow);
  }
 else {
    factRows.add(row);
  }
}","public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate) {
    sortedFactRows.push(newRow);
  }
 else {
    factRows.add(newRow);
  }
}",0.9370829361296472
66345,"public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate) {
    sortedFactRows.push(newRow);
  }
 else {
    factRows.add(newRow);
  }
}","public void onRow(Row4Aggregation row) throws IOException, DataException {
  Row4Aggregation newRow=new Row4Aggregation();
  if (row.getLevelMembers().length != newMemberSize && orignalLevelCount == newMemberSize) {
    Member[] nMembers=new Member[newMemberSize];
    System.arraycopy(row.getLevelMembers(),0,nMembers,0,firstTimeLevel);
    Member[] timeMember=cubeDimensionReader.getLevelMembers(timeDimensionIndex,endLevelIndex,row.getDimPos()[timeDimensionIndex]);
    System.arraycopy(timeMember,0,nMembers,firstTimeLevel,timeMember.length);
    if ((orignalLevelCount - (lowestTimeLevel + 1)) > 0) {
      System.arraycopy(row.getLevelMembers(),lowestTimeLevel + 1,nMembers,firstTimeLevel + timeMember.length,orignalLevelCount - (lowestTimeLevel + 1));
    }
    newRow.setLevelMembers(nMembers);
    newRow.setDimPos(row.getDimPos());
    newRow.setMeasures(row.getMeasures());
    newRow.setMeasureList(row.getMeasureList());
    newRow.setParameterValues(row.getParameterValues());
  }
 else {
    newRow=row;
  }
  if (this.existReferenceDate) {
    sortedFactRows.push(newRow);
  }
 else {
    factRows.add(newRow);
  }
}",0.9829290206648698
66346,"/** 
 * Returns the categories list in BIRT chart expression builder
 * @param builderCommand
 * @return category style
 */
public static int getExpressionBuilderStyle(int builderCommand){
  if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_CHART_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_SCRIPT_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TRIGGERS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TOOLTIPS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_CUBE_EXPRESSION_TOOLTIPS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS| ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_LEGEND) {
    return ChartExpressionProvider.CATEGORY_WITH_LEGEND_ITEMS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT| ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES;
  }
  return ChartExpressionProvider.CATEGORY_BASE;
}","/** 
 * Returns the categories list in BIRT chart expression builder
 * @param builderCommand
 * @return category style
 */
public static int getExpressionBuilderStyle(int builderCommand){
  if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_CHART_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_SCRIPT_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TRIGGERS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_EXPRESSION_TOOLTIPS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_CUBE_EXPRESSION_TOOLTIPS_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_COLUMN_BINDINGS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS| ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS_SIMPLE) {
    return ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_DATA_POINTS;
  }
 else   if (builderCommand == IUIServiceProvider.COMMAND_HYPERLINK_LEGEND) {
    return ChartExpressionProvider.CATEGORY_WITH_LEGEND_ITEMS | ChartExpressionProvider.CATEGORY_WITH_REPORT_PARAMS | ChartExpressionProvider.CATEGORY_WITH_JAVASCRIPT| ChartExpressionProvider.CATEGORY_WITH_BIRT_VARIABLES;
  }
  return ChartExpressionProvider.CATEGORY_BASE;
}",0.8677832512315271
66347,"/** 
 * Creates chart filter factory instance according to specified item handle.
 * @param item
 * @return
 * @throws ExtendedElementException
 */
public static ChartFilterFactory createChartFilterFactory(Object item) throws ExtendedElementException {
  if (item instanceof ExtendedItemHandle) {
    return getChartFilterFactory(((ExtendedItemHandle)item).getReportItem());
  }
 else   if (item instanceof IReportItem) {
    return createChartFilterFactory((IReportItem)item);
  }
  return new ChartFilterFactory();
}","/** 
 * Creates chart filter factory instance according to specified item handle.
 * @param item
 * @return filter factory
 * @throws ExtendedElementException
 */
public static ChartFilterFactory createChartFilterFactory(Object item) throws ExtendedElementException {
  if (item instanceof ExtendedItemHandle) {
    return getChartFilterFactory(((ExtendedItemHandle)item).getReportItem());
  }
 else   if (item instanceof IReportItem) {
    return createChartFilterFactory(item);
  }
  return new ChartFilterFactory();
}",0.9730250481695568
66348,"/** 
 * @return
 */
public URLValue getURLValue(){
  return fURLValue;
}","public URLValue getURLValue(){
  return fURLValue;
}",0.8387096774193549
66349,"private int getHyperlinkBuilderCommand(){
  int type=this.fTriggerMatrix.getType();
  if ((type & TriggerSupportMatrix.TYPE_DATAPOINT) == TriggerSupportMatrix.TYPE_DATAPOINT) {
    return IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS;
  }
  if ((type & TriggerSupportMatrix.TYPE_LEGEND) == TriggerSupportMatrix.TYPE_LEGEND) {
    return IUIServiceProvider.COMMAND_HYPERLINK_LEGEND;
  }
  return IUIServiceProvider.COMMAND_HYPERLINK;
}","private int getHyperlinkBuilderCommand(){
  int type=this.fTriggerMatrix.getType();
  if ((type & TriggerSupportMatrix.TYPE_DATAPOINT) == TriggerSupportMatrix.TYPE_DATAPOINT) {
    boolean useCube=fContext.getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE) || fContext.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY);
    if (useCube) {
      return IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS_SIMPLE;
    }
    return IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS;
  }
  if ((type & TriggerSupportMatrix.TYPE_LEGEND) == TriggerSupportMatrix.TYPE_LEGEND) {
    return IUIServiceProvider.COMMAND_HYPERLINK_LEGEND;
  }
  return IUIServiceProvider.COMMAND_HYPERLINK;
}",0.755632582322357
66350,"private int getHyperlinkBuilderCommand(){
  int type=this.triggerMatrix.getType();
  if ((type & TriggerSupportMatrix.TYPE_DATAPOINT) == TriggerSupportMatrix.TYPE_DATAPOINT) {
    return IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS;
  }
  if ((type & TriggerSupportMatrix.TYPE_LEGEND) == TriggerSupportMatrix.TYPE_LEGEND) {
    return IUIServiceProvider.COMMAND_HYPERLINK_LEGEND;
  }
  return IUIServiceProvider.COMMAND_HYPERLINK;
}","private int getHyperlinkBuilderCommand(){
  int type=this.triggerMatrix.getType();
  if ((type & TriggerSupportMatrix.TYPE_DATAPOINT) == TriggerSupportMatrix.TYPE_DATAPOINT) {
    boolean useCube=wizardContext.getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE) || wizardContext.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY);
    if (useCube) {
      return IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS_SIMPLE;
    }
    return IUIServiceProvider.COMMAND_HYPERLINK_DATAPOINTS;
  }
  if ((type & TriggerSupportMatrix.TYPE_LEGEND) == TriggerSupportMatrix.TYPE_LEGEND) {
    return IUIServiceProvider.COMMAND_HYPERLINK_LEGEND;
  }
  return IUIServiceProvider.COMMAND_HYPERLINK;
}",0.7487091222030982
66351,"/** 
 * This method will be used by the Chart Builder UI to invoke numerous builder by a specified command.
 * @param command
 * @param inData
 * @return
 * @throws ChartException
 */
public Object invoke(Command command,Object... inData) throws ChartException ;","/** 
 * This method will be used by the Chart Builder UI to invoke numerous builder by a specified command.
 * @param command
 * @param inData
 * @return any objects that caller needs
 * @throws ChartException
 */
public Object invoke(Command command,Object... inData) throws ChartException ;",0.9458483754512635
66352,"/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    List temp2=new ArrayList();
    this.cachedDataSetNames.clear();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof ICacheable)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp2);
          if (qd.getParentQuery() != null && qd.getInputParamBindings().size() == 0) {
            for (int i=0; i < temp2.size(); i++) {
              this.cachedDataSetNames.add(temp2.get(i));
            }
          }
          temp.addAll(temp2);
        }
      }
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}","/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    List temp2=new ArrayList();
    this.cachedDataSetNames.clear();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof ICacheable)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp2);
          if (qd.getParentQuery() != null && qd.getInputParamBindings().size() == 0) {
            for (int i=0; i < temp2.size(); i++) {
              this.cachedDataSetNames.add(temp2.get(i));
            }
          }
          temp.addAll(temp2);
        }
      }
      temp2.clear();
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}",0.9919137466307276
66353,"private AggregationFunctionDefinition getFunctionName(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && existReferenceDate)   return func;
 else   return null;
}","private AggregationFunctionDefinition getFunctionName(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && !existReferenceDate)   return func;
 else   return null;
}",0.9992962702322308
66354,"private static boolean existReferenceDate(AggregationDefinition[] aggregations) throws DataException {
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (aggrFunc[j].getTimeFunction() != null && aggrFunc[j].getTimeFunction().getReferenceDate() != null) {
        return true;
      }
    }
  }
  return false;
}","private static boolean existReferenceDate(AggregationDefinition[] aggregations) throws DataException {
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if ((aggrFunc[j].getTimeFunction() != null && aggrFunc[j].getTimeFunction().getReferenceDate() != null) || (aggrFunc[j].getTimeFunctionFilter() != null && aggrFunc[j].getTimeFunctionFilter().getReferenceDate() != null)) {
        return true;
      }
    }
  }
  return false;
}",0.8937329700272479
66355,"TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  Comparator comparator=new Row4AggregationComparator(getSortType(aggr,cubeDimensionReader));
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}","TimeFunctionCalculator(AggregationDefinition aggr,DimColumn[] parameterColNames,IDataSet4Aggregation.MetaInfo metaInfo,ICubeDimensionReader cubeDimensionReader,long memoryCacheSize) throws DataException, IOException {
  AggregationFunctionDefinition[] timeFunction=aggr.getAggregationTimeFunctions();
  if (timeFunction == null) {
    existTimeFunction=false;
    return;
  }
  existTimeFunction=true;
  tDimName=timeFunction[0].getTimeFunction().getTimeDimension();
  timeDimension=cubeDimensionReader.getDimension(tDimName);
  periodFunction=createTimeFunction(timeFunction);
  periodFunctionResultCache=new Map[periodFunction.length];
  for (int i=0; i < periodFunctionResultCache.length; i++) {
    periodFunctionResultCache[i]=new HashMap<TimeMember,List<TimeMember>>();
  }
  timeDimensionIndex=cubeDimensionReader.getDimensionIndex(tDimName);
  lowestTimeLevel=getLowestTimeLevel(aggr);
  firstTimeLevel=getFirstTimeLevel(aggr);
  existReferenceDate=false;
  referenceDate=new Date[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    if (timeFunction[i].getTimeFunction().getReferenceDate() != null)     referenceDate[i]=timeFunction[i].getTimeFunction().getReferenceDate().getDate();
    if (referenceDate[i] != null) {
      existReferenceDate=true;
    }
  }
  if (existReferenceDate) {
    endLevelIndex=cubeDimensionReader.getlowestLevelIndex(tDimName) - 1;
  }
 else {
    endLevelIndex=cubeDimensionReader.getLevelIndex(tDimName,aggr.getLevels()[lowestTimeLevel].getLevelName());
  }
  orignalLevelCount=aggr.getLevels().length;
  newMemberSize=aggr.getLevels().length - (lowestTimeLevel - firstTimeLevel + 1) + (endLevelIndex + 1);
  Comparator comparator=new Row4AggregationComparator(getSortType(aggr,cubeDimensionReader));
  int levelCount=0;
  if (aggr.getLevels() == null)   levelCount=0;
 else   levelCount=aggr.getLevels().length;
  int levelSize=0;
  if (levelCount != 0) {
    levelSize=getLevelSize(metaInfo,aggr.getLevels());
  }
  int measureSize=0;
  if (aggregationFunction != null && aggregationFunction.length > 0) {
    measureSize=aggregationFunction.length * 64;
  }
  int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
  int bufferSize=(int)(memoryCacheSize / rowSize);
  if (bufferSize < 100)   bufferSize=100;
  sortedFactRows=new DiskSortedStack(bufferSize,false,comparator,Row4Aggregation.getCreator());
  if (memoryCacheSize == 0) {
    sortedFactRows.setUseMemoryOnly(true);
  }
  comparator=new MemberCellIndexComparator(getSortType(aggr,cubeDimensionReader));
  timeMemberFilters=new DiskSortedStack[timeFunction.length];
  for (int i=0; i < timeMemberFilters.length; i++) {
    timeMemberFilters[i]=new DiskSortedStack(bufferSize,false,comparator,MemberCellIndex.getCreator());
    if (memoryCacheSize == 0) {
      timeMemberFilters[i].setUseMemoryOnly(true);
    }
  }
  this.aggregation=aggr;
  this.measureIndexes=new int[timeFunction.length];
  this.parameterColIndex=new int[timeFunction.length];
  this.aggregationFunction=new IAggrFunction[timeFunction.length];
  for (int i=0; i < timeFunction.length; i++) {
    aggregationFunction[i]=AggregationManager.getInstance().getAggregation(timeFunction[i].getFunctionName());
    if (aggregationFunction[i] == null) {
      throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.UNSUPPORTED_FUNCTION) + timeFunction[i].getFunctionName());
    }
    if (AggregationUtil.needDataField(aggregationFunction[i])) {
      this.parameterColIndex[i]=find(parameterColNames,timeFunction[i].getParaCol());
    }
 else {
      this.parameterColIndex[i]=-1;
    }
    final String measureName=timeFunction[i].getMeasureName();
    this.measureIndexes[i]=metaInfo.getMeasureIndex(measureName);
    if (this.measureIndexes[i] == -1 && measureName != null) {
      throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,measureName);
    }
  }
  measureInfos=metaInfo.getMeasureInfos();
  facttableRow=new FacttableRow(measureInfos,cubeDimensionReader,metaInfo);
  this.cubeDimensionReader=cubeDimensionReader;
  getLevelType();
}",0.9792655508368724
66356,"private void initUISheetExtensions(String defaultExtensionId){
  mSheets=new LinkedHashMap<String,Collection<IRegisteredSubtaskEntry>>();
  if (UIHelper.isEclipseMode()) {
    IExtensionRegistry pluginRegistry=Platform.getExtensionRegistry();
    IExtensionPoint extensionPoint=pluginRegistry.getExtensionPoint(""String_Node_Str"",""String_Node_Str"");
    IExtension[] extensions=extensionPoint.getExtensions();
    for (int iC=0; iC < extensions.length; iC++) {
      IExtension extension=extensions[iC];
      IConfigurationElement[] configElements=extension.getConfigurationElements();
      String id=extension.getSimpleIdentifier();
      if (id == null) {
        id=defaultExtensionId;
      }
      List<IRegisteredSubtaskEntry> cSheets=new ArrayList<IRegisteredSubtaskEntry>();
      for (int i=0; i < configElements.length; i++) {
        IConfigurationElement currentTag=configElements[i];
        if (currentTag.getName().equals(""String_Node_Str"")) {
          try {
            cSheets.add(new DefaultRegisteredSubtaskEntryImpl(currentTag.getAttribute(""String_Node_Str""),currentTag.getAttribute(""String_Node_Str""),currentTag.getAttribute(""String_Node_Str""),(ISubtaskSheet)currentTag.createExecutableExtension(""String_Node_Str"")));
          }
 catch (          FrameworkException e) {
            logger.log(e);
          }
        }
      }
      if (!cSheets.isEmpty()) {
        if (mSheets.containsKey(id)) {
          if (extension.getNamespace().equals(NS_NATIVE_IMPL)) {
            cSheets.addAll(mSheets.get(id));
            mSheets.put(id,cSheets);
          }
 else {
            mSheets.get(id).addAll(cSheets);
          }
        }
 else {
          mSheets.put(id,cSheets);
        }
      }
    }
  }
 else {
    List<IRegisteredSubtaskEntry> cSheets=new ArrayList<IRegisteredSubtaskEntry>();
    for (int iC=0; iC < saSheets.length; iC++) {
      try {
        StringTokenizer tokens=new StringTokenizer(saSheets[iC],""String_Node_Str"");
        String sNodeIndex=tokens.nextToken();
        String sNodePath=tokens.nextToken();
        String sDisplayName=tokens.nextToken();
        String sSheetClass=tokens.nextToken();
        DefaultRegisteredSubtaskEntryImpl entry=new DefaultRegisteredSubtaskEntryImpl(sNodeIndex,sNodePath,sDisplayName,(ISubtaskSheet)Class.forName(sSheetClass).newInstance());
        cSheets.add(entry);
      }
 catch (      InstantiationException e) {
        logger.log(e);
      }
catch (      IllegalAccessException e) {
        logger.log(e);
      }
catch (      ClassNotFoundException e) {
        logger.log(e);
      }
    }
    mSheets.put(""String_Node_Str"",cSheets);
  }
}","private void initUISheetExtensions(String defaultExtensionId){
  mSheets=new LinkedHashMap<String,Collection<IRegisteredSubtaskEntry>>();
  if (UIHelper.isEclipseMode()) {
    IExtensionRegistry pluginRegistry=Platform.getExtensionRegistry();
    IExtensionPoint extensionPoint=pluginRegistry.getExtensionPoint(""String_Node_Str"",""String_Node_Str"");
    IExtension[] extensions=extensionPoint.getExtensions();
    for (int iC=0; iC < extensions.length; iC++) {
      IExtension extension=extensions[iC];
      IConfigurationElement[] configElements=extension.getConfigurationElements();
      String id=extension.getSimpleIdentifier();
      if (id == null) {
        id=defaultExtensionId;
      }
      Set<IRegisteredSubtaskEntry> cSheets=new LinkedHashSet<IRegisteredSubtaskEntry>();
      for (int i=0; i < configElements.length; i++) {
        IConfigurationElement currentTag=configElements[i];
        if (currentTag.getName().equals(""String_Node_Str"")) {
          try {
            cSheets.add(new DefaultRegisteredSubtaskEntryImpl(currentTag.getAttribute(""String_Node_Str""),currentTag.getAttribute(""String_Node_Str""),currentTag.getAttribute(""String_Node_Str""),(ISubtaskSheet)currentTag.createExecutableExtension(""String_Node_Str"")));
          }
 catch (          FrameworkException e) {
            logger.log(e);
          }
        }
      }
      if (!cSheets.isEmpty()) {
        if (mSheets.containsKey(id)) {
          Collection<IRegisteredSubtaskEntry> oldSheets=mSheets.get(id);
          Map<Integer,IRegisteredSubtaskEntry> oldSheetsMap=new HashMap<Integer,IRegisteredSubtaskEntry>();
          for (          IRegisteredSubtaskEntry entry : oldSheets) {
            oldSheetsMap.put(entry.getNodeIndex(),entry);
          }
          for (          IRegisteredSubtaskEntry entry : cSheets) {
            IRegisteredSubtaskEntry oldEntry=oldSheetsMap.get(entry.getNodeIndex());
            if (oldEntry == null || ((DefaultRegisteredSubtaskEntryImpl)entry).getPriority() > ((DefaultRegisteredSubtaskEntryImpl)oldEntry).getPriority()) {
              oldSheets.add(entry);
            }
          }
        }
 else {
          mSheets.put(id,cSheets);
        }
      }
    }
  }
 else {
    List<IRegisteredSubtaskEntry> cSheets=new ArrayList<IRegisteredSubtaskEntry>();
    for (int iC=0; iC < saSheets.length; iC++) {
      try {
        StringTokenizer tokens=new StringTokenizer(saSheets[iC],""String_Node_Str"");
        String sNodeIndex=tokens.nextToken();
        String sNodePath=tokens.nextToken();
        String sDisplayName=tokens.nextToken();
        String sSheetClass=tokens.nextToken();
        DefaultRegisteredSubtaskEntryImpl entry=new DefaultRegisteredSubtaskEntryImpl(sNodeIndex,sNodePath,sDisplayName,(ISubtaskSheet)Class.forName(sSheetClass).newInstance());
        cSheets.add(entry);
      }
 catch (      InstantiationException e) {
        logger.log(e);
      }
catch (      IllegalAccessException e) {
        logger.log(e);
      }
catch (      ClassNotFoundException e) {
        logger.log(e);
      }
    }
    mSheets.put(""String_Node_Str"",cSheets);
  }
}",0.8449625891769619
66357,"public int getNodeIndex(){
  return Integer.valueOf(sNodeIndex).intValue();
}","public int getNodeIndex(){
  return nodeIndex;
}",0.768
66358,"public DefaultRegisteredSubtaskEntryImpl(String sNodeIndex,String sNodePath,String sDisplayName,ISubtaskSheet sheet){
  try {
    this.sNodeIndex=Integer.valueOf(sNodeIndex).toString();
  }
 catch (  NumberFormatException e) {
    sNodeIndex=""String_Node_Str"";
  }
  this.sNodePath=sNodePath;
  this.sDisplayName=sDisplayName;
  this.sheetImpl=sheet;
}","public DefaultRegisteredSubtaskEntryImpl(String sNodeIndex,String sNodePath,String sDisplayName,ISubtaskSheet sheet){
  try {
    double nodeIndexWithPriority=Double.valueOf(sNodeIndex);
    nodeIndex=(int)nodeIndexWithPriority;
    priority=(int)(nodeIndexWithPriority * 10 - nodeIndex * 10);
  }
 catch (  NumberFormatException e) {
  }
  this.sNodePath=sNodePath;
  this.sDisplayName=sDisplayName;
  this.sheetImpl=sheet;
}",0.390745501285347
66359,"private static AggregationFunctionDefinition getFunctionName(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()))   return func;
 else   return null;
}","private static AggregationFunctionDefinition getFunctionName(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && func.getTimeFunction() == null)   return func;
 else   return null;
}",0.976123595505618
66360,"private void doCalculate(int functionIndex) throws DataException {
  for (int i=0; i < currentRowList.size(); i++) {
    if (!getFilterResult(currentRowList.get(i),functionIndex))     continue;
    Object[] para=getAccumulatorParameter(currentRowList.get(i),functionIndex);
    for (int j=0; j < currentFilterList[functionIndex].size(); j++) {
      this.accumulators[currentFilterList[functionIndex].get(j).cellPosition][functionIndex].onRow(para);
    }
  }
}","private void doCalculate(int functionIndex) throws DataException {
  for (int i=0; i < currentRowList.size(); i++) {
    if (!getFilterResult(currentRowList.get(i),functionIndex))     continue;
    while (currentRowList.get(i).nextMeasures()) {
      Object[] para=getAccumulatorParameter(currentRowList.get(i),functionIndex);
      for (int j=0; j < currentFilterList[functionIndex].size(); j++) {
        this.accumulators[currentFilterList[functionIndex].get(j).cellPosition][functionIndex].onRow(para);
      }
    }
  }
}",0.9341438703140832
66361,"@Override public List<TimeMember> getResult(TimeMember member){
  List timeMembers=new ArrayList<TimeMember>();
  String[] levelTypes=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar();
  String baseType=translateToCal(cal,levelTypes,values);
  int[] tmp;
  if (baseType.equals(MONTH)) {
    timeMembers.add(member);
  }
 else   if (baseType.equals(WEEK)) {
    int weekOfMonth=cal.get(Calendar.WEEK_OF_MONTH);
    int month=cal.get(Calendar.MONTH);
    int year=cal.get(Calendar.YEAR);
    for (int i=1; i <= weekOfMonth; i++) {
      cal.set(Calendar.YEAR,year);
      cal.set(Calendar.MONTH,month);
      cal.set(Calendar.WEEK_OF_MONTH,i);
      tmp=getValueFromCal(cal,levelTypes);
      TimeMember timeMember=new TimeMember(tmp,levelTypes);
      timeMembers.add(timeMember);
    }
  }
 else   if (baseType.equals(DAY)) {
    int dayOfMonth=cal.get(Calendar.DAY_OF_MONTH);
    for (int i=1; i <= dayOfMonth; i++) {
      cal.set(Calendar.DAY_OF_MONTH,i);
      tmp=getValueFromCal(cal,levelTypes);
      TimeMember timeMember=new TimeMember(tmp,levelTypes);
      timeMembers.add(timeMember);
    }
  }
  return timeMembers;
}","public List<TimeMember> getResult(TimeMember member){
  List timeMembers=new ArrayList<TimeMember>();
  String[] levelTypes=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar();
  String baseType=translateToCal(cal,levelTypes,values);
  int[] tmp;
  if (baseType.equals(MONTH)) {
    timeMembers.add(member);
  }
 else   if (baseType.equals(WEEK)) {
    int weekOfMonth=cal.get(Calendar.WEEK_OF_MONTH);
    int month=cal.get(Calendar.MONTH);
    int year=cal.get(Calendar.YEAR);
    for (int i=1; i <= weekOfMonth; i++) {
      cal.set(Calendar.YEAR,year);
      cal.set(Calendar.MONTH,month);
      cal.set(Calendar.WEEK_OF_MONTH,i);
      tmp=getValueFromCal(cal,levelTypes);
      TimeMember timeMember=new TimeMember(tmp,levelTypes);
      timeMembers.add(timeMember);
    }
  }
 else   if (baseType.equals(DAY)) {
    int dayOfMonth=cal.get(Calendar.DAY_OF_MONTH);
    for (int i=1; i <= dayOfMonth; i++) {
      cal.set(Calendar.DAY_OF_MONTH,i);
      tmp=getValueFromCal(cal,levelTypes);
      TimeMember timeMember=new TimeMember(tmp,levelTypes);
      timeMembers.add(timeMember);
    }
  }
  return timeMembers;
}",0.995751911639762
66362,"@Override public List<TimeMember> getResult(TimeMember member){
  List<TimeMember> timeMembers=new ArrayList<TimeMember>();
  String[] levelTypes=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar();
  translateToCal(cal,levelTypes,values);
  timeMembers.add(member);
  int[] tmp;
  for (int i=0; i < offset - 1; i++) {
    if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_YEAR)) {
      cal.add(Calendar.YEAR,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_MONTH)) {
      cal.add(Calendar.MONTH,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_QUARTER)) {
      cal.add(Calendar.MONTH,-3);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH)) {
      cal.add(Calendar.WEEK_OF_YEAR,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR)) {
      cal.add(Calendar.WEEK_OF_YEAR,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH)) {
      cal.add(Calendar.DATE,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK)) {
      cal.add(Calendar.DATE,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR)) {
      cal.add(Calendar.DATE,-1);
    }
    tmp=getValueFromCal(cal,levelTypes);
    TimeMember timeMember=new TimeMember(tmp,levelTypes);
    timeMembers.add(timeMember);
  }
  List<TimeMember> newTimeMemebers=new ArrayList<TimeMember>();
  for (int i=timeMembers.size() - 1; i >= 0; i--) {
    newTimeMemebers.add(timeMembers.get(i));
  }
  return newTimeMemebers;
}","public List<TimeMember> getResult(TimeMember member){
  List<TimeMember> timeMembers=new ArrayList<TimeMember>();
  String[] levelTypes=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar();
  translateToCal(cal,levelTypes,values);
  timeMembers.add(member);
  int[] tmp;
  for (int i=0; i < offset - 1; i++) {
    if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_YEAR)) {
      cal.add(Calendar.YEAR,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_MONTH)) {
      cal.add(Calendar.MONTH,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_QUARTER)) {
      cal.add(Calendar.MONTH,-3);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_MONTH)) {
      cal.add(Calendar.WEEK_OF_YEAR,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_WEEK_OF_YEAR)) {
      cal.add(Calendar.WEEK_OF_YEAR,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_MONTH)) {
      cal.add(Calendar.DATE,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_WEEK)) {
      cal.add(Calendar.DATE,-1);
    }
 else     if (levelType.equals(TimeMember.TIME_LEVEL_TYPE_DAY_OF_YEAR)) {
      cal.add(Calendar.DATE,-1);
    }
    tmp=getValueFromCal(cal,levelTypes);
    TimeMember timeMember=new TimeMember(tmp,levelTypes);
    timeMembers.add(timeMember);
  }
  List<TimeMember> newTimeMemebers=new ArrayList<TimeMember>();
  for (int i=timeMembers.size() - 1; i >= 0; i--) {
    newTimeMemebers.add(timeMembers.get(i));
  }
  return newTimeMemebers;
}",0.9968652037617556
66363,"@Override public List<TimeMember> getResult(TimeMember member){
  List timeMembers=new ArrayList<TimeMember>();
  String[] levelTypes=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar();
  String baseType=translateToCal(cal,levelTypes,values);
  if (baseType.equals(WEEK)) {
    timeMembers.add(member);
  }
 else   if (baseType.equals(DAY)) {
    int weekday=cal.get(Calendar.DAY_OF_WEEK);
    int[] tmp;
    Calendar newCal=new GregorianCalendar();
    for (int i=1; i <= weekday; i++) {
      newCal.setTimeInMillis(cal.getTimeInMillis() - (weekday - i) * dayTimeInMills);
      tmp=getValueFromCal(newCal,levelTypes);
      TimeMember timeMember=new TimeMember(tmp,levelTypes);
      timeMembers.add(timeMember);
    }
  }
  return timeMembers;
}","public List<TimeMember> getResult(TimeMember member){
  List timeMembers=new ArrayList<TimeMember>();
  String[] levelTypes=member.getLevelType();
  int[] values=member.getMemberValue();
  Calendar cal=new GregorianCalendar();
  String baseType=translateToCal(cal,levelTypes,values);
  if (baseType.equals(WEEK)) {
    timeMembers.add(member);
  }
 else   if (baseType.equals(DAY)) {
    int weekday=cal.get(Calendar.DAY_OF_WEEK);
    int[] tmp;
    Calendar newCal=new GregorianCalendar();
    for (int i=1; i <= weekday; i++) {
      newCal.setTimeInMillis(cal.getTimeInMillis() - (weekday - i) * dayTimeInMills);
      tmp=getValueFromCal(newCal,levelTypes);
      TimeMember timeMember=new TimeMember(tmp,levelTypes);
      timeMembers.add(timeMember);
    }
  }
  return timeMembers;
}",0.9937106918238994
66364,"private static CalculatedMember[] extractMeasure(ICubeQueryDefinition queryDefn,Map measureMapping) throws DataException {
  List measureList=queryDefn.getMeasures();
  if (measureList == null)   return new CalculatedMember[0];
  List measureAggrOns=populateMeasureAggrOns(queryDefn);
  List unreferencedMeasures=getUnreferencedMeasures(queryDefn,measureList,measureMapping,measureAggrOns);
  CalculatedMember[] calculatedMembers1=new CalculatedMember[unreferencedMeasures.size()];
  int index=0;
  Iterator measureIter=unreferencedMeasures.iterator();
  while (measureIter.hasNext()) {
    MeasureDefinition measureDefn=(MeasureDefinition)measureIter.next();
    String innerName=OlapExpressionUtil.createMeasureCalculateMemeberName(measureDefn.getName());
    measureMapping.put(measureDefn.getName(),innerName);
    calculatedMembers1[index]=new CalculatedMember(new CubeAggrDefnOnMeasure(innerName,measureDefn.getName(),measureAggrOns,adaptAggrFunction(measureDefn),null,null),0);
    index++;
  }
  return calculatedMembers1;
}","private static CalculatedMember[] extractMeasure(ICubeQueryDefinition queryDefn,Map measureMapping) throws DataException {
  List measureList=queryDefn.getMeasures();
  if (measureList == null)   return new CalculatedMember[0];
  List measureAggrOns=populateMeasureAggrOns(queryDefn);
  List unreferencedMeasures=getUnreferencedMeasures(queryDefn,measureList,measureMapping,measureAggrOns);
  CalculatedMember[] calculatedMembers1=new CalculatedMember[unreferencedMeasures.size()];
  int index=0;
  Iterator measureIter=unreferencedMeasures.iterator();
  while (measureIter.hasNext()) {
    MeasureDefinition measureDefn=(MeasureDefinition)measureIter.next();
    String innerName=OlapExpressionUtil.createMeasureCalculateMemeberName(measureDefn.getName());
    measureMapping.put(measureDefn.getName(),innerName);
    calculatedMembers1[index]=new CalculatedMember(new CubeAggrDefnOnMeasure(innerName,measureDefn.getName(),measureAggrOns,adaptAggrFunction(measureDefn),null,null,null),0);
    index++;
  }
  return calculatedMembers1;
}",0.9975833736104398
66365,"public CubeNestAggrDefn(String name,IBaseExpression basedExpression,List aggrLevels,String aggrName,List arguments,IBaseExpression filterExpression){
  super(name,aggrLevels,aggrName,arguments,filterExpression);
  this.basedExpression=basedExpression;
}","public CubeNestAggrDefn(String name,IBaseExpression basedExpression,List aggrLevels,String aggrName,List arguments,IBaseExpression filterExpression){
  super(name,aggrLevels,aggrName,null,arguments,filterExpression);
  this.basedExpression=basedExpression;
}",0.9902152641878668
66366,"private ITimeFunction adaptTimeFunction(ComputedColumnHandle handle){
  TimeFunction timeFunction=new TimeFunction();
  IBaseExpression sciptExpr=this.adaptExpression((Expression)handle.getReferenceDate().getExpression());
  Object referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension().getStringValue());
  timeFunction.setBaseTimePeriod(populateTimePeriod(handle.getBaseTimePeriod()));
  timeFunction.setRelativeTimePeriod(populateTimePeriod(handle.getOffset()));
  return timeFunction;
}","private ITimeFunction adaptTimeFunction(ComputedColumnHandle handle) throws DataException, BirtException {
  TimeFunction timeFunction=new TimeFunction();
  IBaseExpression sciptExpr=this.adaptExpression((Expression)handle.getReferenceDate().getExpression());
  Object referenceDate=ScriptEvalUtil.evalExpr(sciptExpr,this.context.getDataEngineContext().getScriptContext(),""String_Node_Str"",0);
  timeFunction.setReferenceDate(new ReferenceDate(DataTypeUtil.toDate(referenceDate)));
  timeFunction.setTimeDimension(handle.getTimeDimension().getStringValue());
  timeFunction.setBaseTimePeriod(populateTimePeriod(handle.getBaseTimePeriod()));
  timeFunction.setRelativeTimePeriod(populateTimePeriod(handle.getOffset()));
  return timeFunction;
}",0.974465148378192
66367,"private ITimePeriod populateTimePeriod(TimePeriodHandle periodHandle){
  String periodType=periodHandle.getTimePeriodType();
  ITimePeriod period;
  if (DesignChoiceConstants.INTERVAL_YEAR.equals(periodType)) {
    period=new TimePeriod(baseTimePeriod.getNumberOfUnit(),TimePeriodType.YEAR);
  }
 else   if (DesignChoiceConstants.INTERVAL_QUARTER.equals(periodType)) {
    period=new TimePeriod(baseTimePeriod.getNumberOfUnit(),TimePeriodType.QUARTER);
  }
 else   if (DesignChoiceConstants.INTERVAL_MONTH.equals(periodType)) {
    period=new TimePeriod(baseTimePeriod.getNumberOfUnit(),TimePeriodType.MONTH);
  }
 else   if (DesignChoiceConstants.INTERVAL_WEEK.equals(periodType)) {
    period=new TimePeriod(baseTimePeriod.getNumberOfUnit(),TimePeriodType.WEEK);
  }
 else   if (DesignChoiceConstants.INTERVAL_DAY.equals(periodType)) {
    period=new TimePeriod(baseTimePeriod.getNumberOfUnit(),TimePeriodType.DAY);
  }
  return period;
}","private ITimePeriod populateTimePeriod(TimePeriodHandle periodHandle){
  String periodType=periodHandle.getTimePeriodType();
  ITimePeriod period=null;
  if (DesignChoiceConstants.INTERVAL_YEAR.equals(periodType)) {
    period=new TimePeriod(periodHandle.getNumberOfUnit(),TimePeriodType.YEAR);
  }
 else   if (DesignChoiceConstants.INTERVAL_QUARTER.equals(periodType)) {
    period=new TimePeriod(periodHandle.getNumberOfUnit(),TimePeriodType.QUARTER);
  }
 else   if (DesignChoiceConstants.INTERVAL_MONTH.equals(periodType)) {
    period=new TimePeriod(periodHandle.getNumberOfUnit(),TimePeriodType.MONTH);
  }
 else   if (DesignChoiceConstants.INTERVAL_WEEK.equals(periodType)) {
    period=new TimePeriod(periodHandle.getNumberOfUnit(),TimePeriodType.WEEK);
  }
 else   if (DesignChoiceConstants.INTERVAL_DAY.equals(periodType)) {
    period=new TimePeriod(periodHandle.getNumberOfUnit(),TimePeriodType.DAY);
  }
  return period;
}",0.928
66368,"private void doCalculate(int functionIndex) throws DataException {
  for (int i=0; i < currentRowList.size(); i++) {
    if (!getFilterResult(currentRowList.get(i),functionIndex))     continue;
    while (currentRowList.get(i).nextMeasures()) {
      Object[] para=getAccumulatorParameter(currentRowList.get(i),functionIndex);
      for (int j=0; j < currentFilterList[functionIndex].size(); j++) {
        this.accumulators[currentFilterList[functionIndex].get(j).cellPosition][functionIndex].onRow(para);
      }
    }
  }
}","private void doCalculate(int functionIndex) throws DataException {
  for (int i=0; i < currentRowList.size(); i++) {
    if (!getFilterResult(currentRowList.get(i),functionIndex))     continue;
    while (currentRowList.get(i).nextMeasures()) {
      Object[] para=getAccumulatorParameter(currentRowList.get(i),functionIndex);
      for (int j=0; j < currentFilterList[functionIndex].size(); j++) {
        this.accumulators[currentFilterList[functionIndex].get(j).cellPosition][functionIndex].onRow(para);
      }
    }
    currentRowList.get(i).firstMeasure();
  }
}",0.9616087751371116
66369,"/** 
 * Returns the fill from palette. If the index is less than the palette colors size, simply return the fill. If else, first return brighter fill, then darker fill. The color fetching logic is like this: In the first round, use the color from palette directly. In the second round, use the brighter color of respective one in the first round. In the third round, use the darker color of respective one in the first round. In the forth round, use the brighter color of respective one in the second round. In the fifth round, use the darker color of respective one in the third round. ...
 * @param elPalette
 * @param index
 * @since 2.5
 * @return fill from palette
 */
public static Fill getPaletteFill(EList<Fill> elPalette,int index){
  final int iPaletteSize=elPalette.size();
  Fill fill=elPalette.get(index % iPaletteSize);
  if (index < iPaletteSize) {
    return goFactory.copyOf(fill);
  }
  if (fill instanceof ColorDefinition) {
    return tunePaletteColor((ColorDefinition)fill,iPaletteSize,index);
  }
  int d=index / iPaletteSize;
  if (d % 2 != 0) {
    Fill brighterFill=getBrighterFill(fill);
    while (d / 2 > 0) {
      d-=2;
      brighterFill=getBrighterFill(brighterFill);
    }
    return brighterFill;
  }
  Fill darkerFill=getDarkerFill(fill);
  while ((d - 1) / 2 > 0) {
    d-=2;
    darkerFill=getDarkerFill(darkerFill);
  }
  return darkerFill;
}","/** 
 * Returns the fill from palette. If the index is less than the palette colors size, simply return the fill. If else, first return brighter fill, then darker fill. The color fetching logic is like this: In the first round, use the color from palette directly. In the second round, use the brighter color of respective one in the first round. In the third round, use the darker color of respective one in the first round. In the forth round, use the brighter color of respective one in the second round. In the fifth round, use the darker color of respective one in the third round. ...
 * @param elPalette
 * @param index
 * @since 2.5
 * @return fill from palette
 */
public static Fill getPaletteFill(EList<Fill> elPalette,int index){
  final int iPaletteSize=elPalette.size();
  if (iPaletteSize == 0) {
    return null;
  }
  Fill fill=elPalette.get(index % iPaletteSize);
  if (index < iPaletteSize) {
    return goFactory.copyOf(fill);
  }
  if (fill instanceof ColorDefinition) {
    return tunePaletteColor((ColorDefinition)fill,iPaletteSize,index);
  }
  int d=index / iPaletteSize;
  if (d % 2 != 0) {
    Fill brighterFill=getBrighterFill(fill);
    while (d / 2 > 0) {
      d-=2;
      brighterFill=getBrighterFill(brighterFill);
    }
    return brighterFill;
  }
  Fill darkerFill=getDarkerFill(fill);
  while ((d - 1) / 2 > 0) {
    d-=2;
    darkerFill=getDarkerFill(darkerFill);
  }
  return darkerFill;
}",0.9829059829059827
66370,"/** 
 * Only for non-collection object
 * @param ob1
 * @param ob2
 * @return
 */
private static boolean isEqualObject(Object ob1,Object ob2){
  if (ob1 == ob2)   return true;
 else   if (ob1 == null || ob2 == null)   return false;
  return ob1.equals(ob2);
}","/** 
 * Only for non-collection object
 * @param ob1
 * @param ob2
 * @return
 */
public static boolean isEqualObject(Object ob1,Object ob2){
  if (ob1 == ob2)   return true;
 else   if (ob1 == null || ob2 == null)   return false;
  return ob1.equals(ob2);
}",0.9787234042553192
66371,"/** 
 * @param row
 * @throws IOException
 * @throws DataException
 */
void onRow(Row4Aggregation row) throws IOException, DataException {
  if (currentResultObj == null) {
    newAggregationResultRow(row);
  }
 else {
    if (currentResultObj.getLevelMembers() == null || compare(row.getLevelMembers(),currentResultObj.getLevelMembers()) == 0) {
      if (accumulators != null) {
        for (int i=0; i < accumulators.length; i++) {
          if (!getFilterResult(row,i)) {
            continue;
          }
          accumulators[i].onRow(getAccumulatorParameter(row,i));
        }
      }
    }
 else {
      if (accumulators != null) {
        currentResultObj.setAggregationValues(new Object[accumulators.length]);
        for (int i=0; i < accumulators.length; i++) {
          accumulators[i].finish();
          currentResultObj.getAggregationValues()[i]=accumulators[i].getValue();
          accumulators[i].start();
        }
      }
      result.add(currentResultObj);
      newAggregationResultRow(row);
    }
  }
}","/** 
 * @param row
 * @throws IOException
 * @throws DataException
 */
void onRow(Row4Aggregation row) throws IOException, DataException {
  if (currentResultObj == null) {
    newAggregationResultRow(row);
  }
 else {
    if (currentResultObj.getLevelMembers() == null || compare(row.getLevelMembers(),currentResultObj.getLevelMembers()) == 0) {
      if (accumulators != null) {
        while (row.nextMeasures()) {
          for (int i=0; i < accumulators.length; i++) {
            if (!getFilterResult(row,i)) {
              continue;
            }
            accumulators[i].onRow(getAccumulatorParameter(row,i));
          }
        }
        row.firstMeasure();
      }
    }
 else {
      if (accumulators != null) {
        currentResultObj.setAggregationValues(new Object[accumulators.length]);
        for (int i=0; i < accumulators.length; i++) {
          accumulators[i].finish();
          currentResultObj.getAggregationValues()[i]=accumulators[i].getValue();
          accumulators[i].start();
        }
      }
      result.add(currentResultObj);
      newAggregationResultRow(row);
    }
  }
}",0.9500699953336444
66372,"/** 
 * @param row
 * @throws DataException
 * @throws IOException 
 */
private void newAggregationResultRow(Row4Aggregation row) throws DataException, IOException {
  currentResultObj=new AggregationResultRow();
  if (levelCount > 0) {
    currentResultObj.setLevelMembers(new Member[levelCount]);
    System.arraycopy(row.getLevelMembers(),0,currentResultObj.getLevelMembers(),0,currentResultObj.getLevelMembers().length);
  }
  if (accumulators != null) {
    for (int i=0; i < accumulators.length; i++) {
      if (!getFilterResult(row,i)) {
        continue;
      }
      accumulators[i].onRow(getAccumulatorParameter(row,i));
    }
  }
}","/** 
 * @param row
 * @throws DataException
 * @throws IOException 
 */
private void newAggregationResultRow(Row4Aggregation row) throws DataException, IOException {
  currentResultObj=new AggregationResultRow();
  if (levelCount > 0) {
    currentResultObj.setLevelMembers(new Member[levelCount]);
    System.arraycopy(row.getLevelMembers(),0,currentResultObj.getLevelMembers(),0,currentResultObj.getLevelMembers().length);
  }
  if (accumulators != null) {
    while (row.nextMeasures()) {
      for (int i=0; i < accumulators.length; i++) {
        if (!getFilterResult(row,i)) {
          continue;
        }
        accumulators[i].onRow(getAccumulatorParameter(row,i));
      }
    }
    row.firstMeasure();
  }
}",0.9449743213499632
66373,"/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, DataException {
  prepareSortedStacks();
  int measureCount=dataSet4Aggregation.getMetaInfo().getMeasureInfos().length;
  int factRowCount=0;
  try {
    while (dataSet4Aggregation.next() && !stopSign.isStopped()) {
      for (int i=0; i < allSortedFactRows.size(); i++) {
        DiskSortedStackWrapper diskSortedStackWrapper=((DiskSortedStackWrapper)allSortedFactRows.get(i));
        int[] levelIndex=diskSortedStackWrapper.levelIndex;
        Row4Aggregation aggregationRow=new Row4Aggregation();
        aggregationRow.setDimPos(dataSet4Aggregation.getDimensionPosition());
        aggregationRow.setLevelMembers(getLevelMembers(levelIndex));
        if (aggregationRow.getLevelMembers() == null) {
          continue;
        }
        aggregationRow.setMeasures(new Object[measureCount]);
        for (int j=0; j < measureCount; j++) {
          aggregationRow.getMeasures()[j]=dataSet4Aggregation.getMeasureValue(j);
        }
        aggregationRow.setParameterValues(getParameterValues());
        diskSortedStackWrapper.diskSortedStack.push(aggregationRow);
      }
      factRowCount++;
      if (maxDataObjectRows > 0 && factRowCount > maxDataObjectRows)       throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, DataException {
  prepareSortedStacks();
  int measureCount=dataSet4Aggregation.getMetaInfo().getMeasureInfos().length;
  int factRowCount=0;
  if (this.aggregationRow == null) {
    this.aggregationRow=new Row4Aggregation[allSortedFactRows.size()];
  }
  DiskSortedStackWrapper[] diskSortedStackWrapper=new DiskSortedStackWrapper[allSortedFactRows.size()];
  for (int i=0; i < allSortedFactRows.size(); i++) {
    diskSortedStackWrapper[i]=((DiskSortedStackWrapper)allSortedFactRows.get(i));
  }
  try {
    while (dataSet4Aggregation.next() && !stopSign.isStopped()) {
      for (int i=0; i < allSortedFactRows.size(); i++) {
        int[] levelIndex=diskSortedStackWrapper[i].levelIndex;
        if (!dataSet4Aggregation.isDuplicatedRow()) {
          Member[] members=getLevelMembers(levelIndex);
          if (aggregationRow[i] != null) {
            Row4Aggregation popRow=this.mergeRow4Aggregations[i].push(aggregationRow[i]);
            if (popRow != null)             diskSortedStackWrapper[i].diskSortedStack.push(popRow);
          }
          aggregationRow[i]=new Row4Aggregation();
          aggregationRow[i].setDimPos(dataSet4Aggregation.getDimensionPosition());
          aggregationRow[i].setLevelMembers(members);
          if (aggregationRow[i].getLevelMembers() == null) {
            continue;
          }
          aggregationRow[i].setMeasures(new Object[measureCount]);
          for (int j=0; j < measureCount; j++) {
            aggregationRow[i].getMeasures()[j]=dataSet4Aggregation.getMeasureValue(j);
          }
          aggregationRow[i].setParameterValues(getParameterValues());
        }
 else {
          Object[] measures=new Object[measureCount];
          for (int j=0; j < measureCount; j++) {
            measures[j]=dataSet4Aggregation.getMeasureValue(j);
          }
          aggregationRow[i].addMeasure(measures);
        }
      }
      factRowCount++;
      if (maxDataObjectRows > 0 && factRowCount > maxDataObjectRows)       throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
    }
    for (int i=0; i < allSortedFactRows.size(); i++) {
      if (aggregationRow[i] != null) {
        Row4Aggregation popRow=this.mergeRow4Aggregations[i].push(aggregationRow[i]);
        if (popRow != null)         diskSortedStackWrapper[i].diskSortedStack.push(popRow);
      }
      List<Row4Aggregation> remainRows=this.mergeRow4Aggregations[i].getAll();
      for (int j=0; j < remainRows.size(); j++) {
        diskSortedStackWrapper[i].diskSortedStack.push(remainRows.get(j));
      }
      this.mergeRow4Aggregations[i]=null;
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.5053613053613054
66374,"/** 
 * @throws IOException 
 * @throws DataException 
 */
private void prepareSortedStacks() throws DataException, IOException {
  allSortedFactRows=new ArrayList();
  int levelSize=0;
  int measureSize=0;
  while (true) {
    int maxLevelCount=-1;
    int aggregationIndex=-1;
    int[] levelSortType=null;
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && ((aggregationCalculators[i].aggregation.getLevels() != null && aggregationCalculators[i].aggregation.getLevels().length > maxLevelCount) || (aggregationCalculators[i].aggregation.getLevels() == null && maxLevelCount == -1))) {
        aggregationIndex=i;
        if (aggregationCalculators[i].aggregation.getLevels() != null)         maxLevelCount=aggregationCalculators[i].aggregation.getLevels().length;
 else         maxLevelCount=0;
        levelSortType=aggregationCalculators[i].aggregation.getSortTypes();
      }
    }
    if (aggregationIndex == -1) {
      break;
    }
    if (memoryCacheSize != 0) {
      if (levelSize == 0)       levelSize=getLevelSize(aggregationCalculators[aggregationIndex].aggregation.getLevels());
 else {
        if (aggregationCalculators[aggregationIndex].aggregation.getLevels() != null)         levelSize+=SizeOfUtil.getArraySize(aggregationCalculators[aggregationIndex].aggregation.getLevels().length);
      }
      if (measureSize == 0)       measureSize=getMeasureSize();
 else {
        if (dataSet4Aggregation.getMetaInfo().getMeasureInfos() != null)         measureSize+=SizeOfUtil.getArraySize(dataSet4Aggregation.getMetaInfo().getMeasureInfos().length);
      }
    }
    Comparator comparator=new Row4AggregationComparator(levelSortType);
    DiskSortedStack diskSortedStack=new DiskSortedStack(100,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      diskSortedStack.setBufferSize(10000);
      diskSortedStack.setUseMemoryOnly(true);
    }
    DiskSortedStackWrapper diskSortedStackReader=new DiskSortedStackWrapper(diskSortedStack,levelIndex[aggregationIndex]);
    this.allSortedFactRows.add(diskSortedStackReader);
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && cover(levelIndex[aggregationIndex],levelIndex[i])) {
        sortedFactRows[i]=diskSortedStackReader;
      }
    }
  }
  if (memoryCacheSize > 0) {
    int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
    int bufferSize=(int)(this.memoryCacheSize * 4 / 5 / rowSize);
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackReader=(DiskSortedStackWrapper)allSortedFactRows.get(i);
      diskSortedStackReader.getDiskSortedStack().setBufferSize(bufferSize);
    }
  }
}","/** 
 * @throws IOException 
 * @throws DataException 
 */
private void prepareSortedStacks() throws DataException, IOException {
  allSortedFactRows=new ArrayList();
  int levelSize=0;
  int measureSize=0;
  while (true) {
    int maxLevelCount=-1;
    int aggregationIndex=-1;
    int[] levelSortType=null;
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && ((aggregationCalculators[i].aggregation.getLevels() != null && aggregationCalculators[i].aggregation.getLevels().length > maxLevelCount) || (aggregationCalculators[i].aggregation.getLevels() == null && maxLevelCount == -1))) {
        aggregationIndex=i;
        if (aggregationCalculators[i].aggregation.getLevels() != null)         maxLevelCount=aggregationCalculators[i].aggregation.getLevels().length;
 else         maxLevelCount=0;
        levelSortType=aggregationCalculators[i].aggregation.getSortTypes();
      }
    }
    if (aggregationIndex == -1) {
      break;
    }
    if (memoryCacheSize != 0) {
      if (levelSize == 0)       levelSize=getLevelSize(aggregationCalculators[aggregationIndex].aggregation.getLevels());
 else {
        if (aggregationCalculators[aggregationIndex].aggregation.getLevels() != null)         levelSize+=SizeOfUtil.getArraySize(aggregationCalculators[aggregationIndex].aggregation.getLevels().length);
      }
      if (measureSize == 0)       measureSize=getMeasureSize();
 else {
        if (dataSet4Aggregation.getMetaInfo().getMeasureInfos() != null)         measureSize+=SizeOfUtil.getArraySize(dataSet4Aggregation.getMetaInfo().getMeasureInfos().length);
      }
    }
    Comparator comparator=new Row4AggregationComparator(levelSortType);
    DiskSortedStack diskSortedStack=new DiskSortedStack(100,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      diskSortedStack.setBufferSize(10000);
      diskSortedStack.setUseMemoryOnly(true);
    }
    DiskSortedStackWrapper diskSortedStackReader=new DiskSortedStackWrapper(diskSortedStack,levelIndex[aggregationIndex]);
    this.allSortedFactRows.add(diskSortedStackReader);
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && cover(levelIndex[aggregationIndex],levelIndex[i])) {
        sortedFactRows[i]=diskSortedStackReader;
      }
    }
  }
  mergeRow4Aggregations=new MergeRow4Aggregation[allSortedFactRows.size()];
  int bufferSize=10000;
  if (memoryCacheSize > 0) {
    int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
    bufferSize=(int)(this.memoryCacheSize * 4 / 5 / rowSize);
    if (this.simpleFunc == null)     bufferSize/=5;
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackReader=(DiskSortedStackWrapper)allSortedFactRows.get(i);
      diskSortedStackReader.getDiskSortedStack().setBufferSize(bufferSize);
    }
  }
  for (int i=0; i < allSortedFactRows.size(); i++) {
    mergeRow4Aggregations[i]=new MergeRow4Aggregation(bufferSize,simpleFunc,measureIndexes4Merge,parameterColIndex4Merge);
  }
}",0.9420489824077268
66375,"/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}","/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  simpleFunc=getFunctionName(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}",0.9021447721179624
66376,"public void launch(String filePath){
  try {
    Class<?> claexten=Class.forName(""String_Node_Str"");
    Field saTypes=claexten.getDeclaredField(""String_Node_Str"");
    saTypes.setAccessible(true);
    saTypes.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeriesUI=claexten.getDeclaredField(""String_Node_Str"");
    saSeriesUI.setAccessible(true);
    saSeriesUI.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Class<?> claps=Class.forName(""String_Node_Str"");
    Field saDataSetProcessors=claps.getDeclaredField(""String_Node_Str"");
    saDataSetProcessors.setAccessible(true);
    saDataSetProcessors.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saRenderers=claps.getDeclaredField(""String_Node_Str"");
    saRenderers.setAccessible(true);
    saRenderers.set(null,new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeries=claps.getDeclaredField(""String_Node_Str"");
    saSeries.setAccessible(true);
    saSeries.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  Display.getDefault();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  ChartEngine.instance(config);
  final SampleStandardDataSheet ssd=new SampleStandardDataSheet();
  if (!UIHelper.isEclipseMode()) {
    try {
      TasksManager.instance().registerTask(TaskSelectType.class.getName(),new TaskSelectType());
      TasksManager.instance().registerTask(TaskSelectData.class.getName(),new TaskSelectData(){
        @Override public void doPreview(){
          super.doPreview();
          ssd.refreshSampleDataPreiview();
        }
      }
);
      TasksManager.instance().registerTask(TaskFormatChart.class.getName(),new TaskFormatChart());
      String sChartTasks=TaskSelectType.class.getName() + ""String_Node_Str"" + TaskSelectData.class.getName()+ ""String_Node_Str""+ TaskFormatChart.class.getName();
      TasksManager.instance().registerWizard(ChartWizard.class.getName(),sChartTasks,""String_Node_Str"");
    }
 catch (    Exception e) {
      WizardBase.displayException(e);
    }
  }
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,ssd);
  ssd.setContext(context);
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public void launch(String filePath){
  try {
    Class<?> claexten=Class.forName(""String_Node_Str"");
    Field saTypes=claexten.getDeclaredField(""String_Node_Str"");
    saTypes.setAccessible(true);
    saTypes.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeriesUI=claexten.getDeclaredField(""String_Node_Str"");
    saSeriesUI.setAccessible(true);
    saSeriesUI.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Class<?> claps=Class.forName(""String_Node_Str"");
    Field saDataSetProcessors=claps.getDeclaredField(""String_Node_Str"");
    saDataSetProcessors.setAccessible(true);
    saDataSetProcessors.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saRenderers=claps.getDeclaredField(""String_Node_Str"");
    saRenderers.setAccessible(true);
    saRenderers.set(null,new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeries=claps.getDeclaredField(""String_Node_Str"");
    saSeries.setAccessible(true);
    saSeries.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  Display.getDefault();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  ChartEngine.instance(config);
  final SampleStandardDataSheet ssd=new SampleStandardDataSheet();
  if (!UIHelper.isEclipseMode()) {
    try {
      TasksManager.instance().registerTask(TaskSelectType.class.getName(),new TaskSelectType());
      TasksManager.instance().registerTask(TaskSelectData.class.getName(),new TaskSelectData(){
        @Override public void doPreview(){
          super.doPreview();
          ssd.refreshSampleDataPreiview();
        }
      }
);
      TasksManager.instance().registerTask(TaskFormatChart.class.getName(),new TaskFormatChart());
      String sChartTasks=TaskSelectType.class.getName() + ""String_Node_Str"" + TaskSelectData.class.getName()+ ""String_Node_Str""+ TaskFormatChart.class.getName();
      TasksManager.instance().registerWizard(ChartWizard.class.getName(),sChartTasks,""String_Node_Str"");
    }
 catch (    Exception e) {
      WizardBase.displayException(e);
    }
  }
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,ssd);
  ((SimpleUIServiceProviderImpl)context.getUIServiceProvider()).setFormatSpecifierHandler(new FormatSpecifierHandler());
  ssd.setContext(context);
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.9890487826952664
66377,"public void handleEvent(Event event){
  if (event.widget.equals(catLabelAttr)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
switch (event.type) {
case LabelAttributesComposite.VISIBILITY_CHANGED_EVENT:
      ChartElementUtil.setEObjectAttribute(series.getCatLabel(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    break;
case LabelAttributesComposite.FONT_CHANGED_EVENT:
  series.getCatLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
series.getCatLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
series.getCatLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.SHADOW_CHANGED_EVENT:
series.getCatLabel().setShadowColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",(LineStyle)event.data,isUnset);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
series.getCatLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
break;
case LabelAttributesComposite.INSETS_CHANGED_EVENT:
series.getCatLabel().setInsets((Insets)event.data);
break;
}
}
 else if (event.widget.equals(btnCatLabels)) {
ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnCatLabels.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnCatLabels.getSelectionState() == TristateCheckbox.STATE_GRAYED);
boolean enabled=series.isSetShowCatLabels() && series.isShowCatLabels();
catLabelAttr.setEnabled(enabled);
btnCLFormatSpecifier.setEnabled(enabled);
}
 else if (event.widget.equals(btnCLFormatSpecifier)) {
FormatSpecifier formatspecifier=null;
if (series.getCatLabelFormatSpecifier() != null) {
formatspecifier=series.getCatLabelFormatSpecifier();
}
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,new AxisType[]{AxisType.LINEAR_LITERAL,AxisType.TEXT_LITERAL,AxisType.DATE_TIME_LITERAL},Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
series.setCatLabelFormatSpecifier(editor.getFormatSpecifier());
}
}
}","public void handleEvent(Event event){
  if (event.widget.equals(catLabelAttr)) {
    boolean isUnset=(event.detail == ChartElementUtil.PROPERTY_UNSET);
switch (event.type) {
case LabelAttributesComposite.VISIBILITY_CHANGED_EVENT:
      ChartElementUtil.setEObjectAttribute(series.getCatLabel(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
    break;
case LabelAttributesComposite.FONT_CHANGED_EVENT:
  series.getCatLabel().getCaption().setFont((FontDefinition)((Object[])event.data)[0]);
series.getCatLabel().getCaption().setColor((ColorDefinition)((Object[])event.data)[1]);
break;
case LabelAttributesComposite.BACKGROUND_CHANGED_EVENT:
series.getCatLabel().setBackground((Fill)event.data);
break;
case LabelAttributesComposite.SHADOW_CHANGED_EVENT:
series.getCatLabel().setShadowColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_STYLE_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",(LineStyle)event.data,isUnset);
break;
case LabelAttributesComposite.OUTLINE_WIDTH_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Integer)event.data).intValue(),isUnset);
break;
case LabelAttributesComposite.OUTLINE_COLOR_CHANGED_EVENT:
series.getCatLabel().getOutline().setColor((ColorDefinition)event.data);
break;
case LabelAttributesComposite.OUTLINE_VISIBILITY_CHANGED_EVENT:
ChartElementUtil.setEObjectAttribute(series.getCatLabel().getOutline(),""String_Node_Str"",((Boolean)event.data).booleanValue(),isUnset);
break;
case LabelAttributesComposite.INSETS_CHANGED_EVENT:
series.getCatLabel().setInsets((Insets)event.data);
break;
}
}
 else if (event.widget.equals(btnCatLabels)) {
ChartElementUtil.setEObjectAttribute(series,""String_Node_Str"",btnCatLabels.getSelectionState() == TristateCheckbox.STATE_SELECTED,btnCatLabels.getSelectionState() == TristateCheckbox.STATE_GRAYED);
boolean enabled=series.isSetShowCatLabels() && series.isShowCatLabels();
catLabelAttr.setEnabled(enabled);
btnCLFormatSpecifier.setEnabled(enabled);
}
 else if (event.widget.equals(btnCLFormatSpecifier)) {
FormatSpecifier formatspecifier=null;
if (series.getCatLabelFormatSpecifier() != null) {
formatspecifier=series.getCatLabelFormatSpecifier();
}
getContext().getUIServiceProvider().getFormatSpecifierHandler().handleFormatSpecifier(cmpContent.getShell(),Messages.getString(""String_Node_Str""),new AxisType[]{AxisType.LINEAR_LITERAL,AxisType.TEXT_LITERAL,AxisType.DATE_TIME_LITERAL},formatspecifier,series,""String_Node_Str"",getContext());
}
}",0.94548256597958
66378,"/** 
 * @param shellParent dialog shell
 * @param formatspecifier format model
 * @param sTitle this argument is obsolete
 * @param axisTypes Axis types to indicate supported data types. Null means all types are supported.
 * @since 2.2
 */
public FormatSpecifierDialog(Shell shellParent,FormatSpecifier formatspecifier,AxisType[] axisTypes,String sTitle){
  this(shellParent,formatspecifier,sTitle);
  this.axisTypes=axisTypes;
}","/** 
 * @param shellParent dialog shell
 * @param formatspecifier format model
 * @param sTitle this argument is obsolete
 * @param axisTypes Axis types to indicate supported data types. Null means all types are supported.
 * @since 2.2
 */
public FormatSpecifierDialog(Shell shellParent,FormatSpecifier formatspecifier,AxisType[] axisTypes,String sTitle){
  this(shellParent,formatspecifier,sTitle);
  if (axisTypes != null && axisTypes.length == 1 && axisTypes[0] == null) {
    this.axisTypes=null;
  }
 else {
    this.axisTypes=axisTypes;
  }
}",0.8335035750766088
66379,"protected void handleFormatBtnSelected(){
  String sAxisTitle=Messages.getString(""String_Node_Str"");
  try {
    String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
    int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
    if (iSeparatorIndex > 0) {
      sTitleString=sTitleString.substring(iSeparatorIndex);
    }
 else     if (iSeparatorIndex == 0) {
      sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
    }
    sAxisTitle+=""String_Node_Str"" + sTitleString + ""String_Node_Str"";
  }
 catch (  NullPointerException e1) {
  }
  FormatSpecifier formatspecifier=null;
  if (getAxisForProcessing().getFormatSpecifier() != null) {
    formatspecifier=getAxisForProcessing().getFormatSpecifier();
  }
  FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),sAxisTitle);
  if (editor.open() == Window.OK) {
    if (editor.getFormatSpecifier() == null) {
      getAxisForProcessing().eUnset(ComponentPackage.eINSTANCE.getAxis_FormatSpecifier());
    }
 else {
      getAxisForProcessing().setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
}","protected void handleFormatBtnSelected(){
  String sAxisTitle=Messages.getString(""String_Node_Str"");
  try {
    String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
    int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
    if (iSeparatorIndex > 0) {
      sTitleString=sTitleString.substring(iSeparatorIndex);
    }
 else     if (iSeparatorIndex == 0) {
      sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
    }
    sAxisTitle+=""String_Node_Str"" + sTitleString + ""String_Node_Str"";
  }
 catch (  NullPointerException e1) {
  }
  FormatSpecifier formatspecifier=null;
  if (getAxisForProcessing().getFormatSpecifier() != null) {
    formatspecifier=getAxisForProcessing().getFormatSpecifier();
  }
  getContext().getUIServiceProvider().getFormatSpecifierHandler().handleFormatSpecifier(cmpContent.getShell(),sAxisTitle,new AxisType[]{getAxisForProcessing().getType()},formatspecifier,getAxisForProcessing(),""String_Node_Str"",getContext());
}",0.7373068432671082
66380,"/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, DataException {
  prepareSortedStacks();
  int measureCount=dataSet4Aggregation.getMetaInfo().getMeasureInfos().length;
  int factRowCount=0;
  if (this.aggregationRow == null) {
    this.aggregationRow=new Row4Aggregation[allSortedFactRows.size()];
  }
  DiskSortedStackWrapper[] diskSortedStackWrapper=new DiskSortedStackWrapper[allSortedFactRows.size()];
  for (int i=0; i < allSortedFactRows.size(); i++) {
    diskSortedStackWrapper[i]=((DiskSortedStackWrapper)allSortedFactRows.get(i));
  }
  try {
    while (dataSet4Aggregation.next() && !stopSign.isStopped()) {
      for (int i=0; i < allSortedFactRows.size(); i++) {
        int[] levelIndex=diskSortedStackWrapper[i].levelIndex;
        if (!dataSet4Aggregation.isDuplicatedRow()) {
          Member[] members=getLevelMembers(levelIndex);
          if (aggregationRow[i] != null) {
            Row4Aggregation popRow=this.mergeRow4Aggregations[i].push(aggregationRow[i]);
            if (popRow != null)             diskSortedStackWrapper[i].diskSortedStack.push(popRow);
          }
          aggregationRow[i]=new Row4Aggregation();
          aggregationRow[i].setDimPos(dataSet4Aggregation.getDimensionPosition());
          aggregationRow[i].setLevelMembers(members);
          if (aggregationRow[i].getLevelMembers() == null) {
            continue;
          }
          aggregationRow[i].setMeasures(new Object[measureCount]);
          for (int j=0; j < measureCount; j++) {
            aggregationRow[i].getMeasures()[j]=dataSet4Aggregation.getMeasureValue(j);
          }
          aggregationRow[i].setParameterValues(getParameterValues());
        }
 else {
          Object[] measures=new Object[measureCount];
          for (int j=0; j < measureCount; j++) {
            measures[j]=dataSet4Aggregation.getMeasureValue(j);
          }
          aggregationRow[i].addMeasure(measures);
        }
      }
      factRowCount++;
      if (maxDataObjectRows > 0 && factRowCount > maxDataObjectRows)       throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
    }
    for (int i=0; i < allSortedFactRows.size(); i++) {
      if (aggregationRow[i] != null) {
        Row4Aggregation popRow=this.mergeRow4Aggregations[i].push(aggregationRow[i]);
        if (popRow != null)         diskSortedStackWrapper[i].diskSortedStack.push(popRow);
      }
      List<Row4Aggregation> remainRows=this.mergeRow4Aggregations[i].getAll();
      for (int j=0; j < remainRows.size(); j++) {
        diskSortedStackWrapper[i].diskSortedStack.push(remainRows.get(j));
      }
      this.mergeRow4Aggregations[i]=null;
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private void populateSortedFactRows(StopSign stopSign) throws IOException, DataException {
  prepareSortedStacks();
  int measureCount=dataSet4Aggregation.getMetaInfo().getMeasureInfos().length;
  int factRowCount=0;
  if (this.aggregationRow == null) {
    this.aggregationRow=new Row4Aggregation[allSortedFactRows.size()];
  }
  DiskSortedStackWrapper[] diskSortedStackWrapper=new DiskSortedStackWrapper[allSortedFactRows.size()];
  for (int i=0; i < allSortedFactRows.size(); i++) {
    diskSortedStackWrapper[i]=((DiskSortedStackWrapper)allSortedFactRows.get(i));
  }
  try {
    while (dataSet4Aggregation.next() && !stopSign.isStopped()) {
      for (int i=0; i < allSortedFactRows.size(); i++) {
        int[] levelIndex=diskSortedStackWrapper[i].levelIndex;
        if (!dataSet4Aggregation.isDuplicatedRow()) {
          Member[] members=getLevelMembers(levelIndex);
          if (aggregationRow[i] != null) {
            if (existReferenceDate) {
              diskSortedStackWrapper[i].diskSortedStack.push(aggregationRow[i]);
            }
 else {
              Row4Aggregation popRow=this.mergeRow4Aggregations[i].push(aggregationRow[i]);
              if (popRow != null)               diskSortedStackWrapper[i].diskSortedStack.push(popRow);
            }
          }
          aggregationRow[i]=new Row4Aggregation();
          aggregationRow[i].setDimPos(dataSet4Aggregation.getDimensionPosition());
          aggregationRow[i].setLevelMembers(members);
          if (aggregationRow[i].getLevelMembers() == null) {
            continue;
          }
          aggregationRow[i].setMeasures(new Object[measureCount]);
          for (int j=0; j < measureCount; j++) {
            aggregationRow[i].getMeasures()[j]=dataSet4Aggregation.getMeasureValue(j);
          }
          aggregationRow[i].setParameterValues(getParameterValues());
        }
 else {
          Object[] measures=new Object[measureCount];
          for (int j=0; j < measureCount; j++) {
            measures[j]=dataSet4Aggregation.getMeasureValue(j);
          }
          aggregationRow[i].addMeasure(measures);
        }
      }
      factRowCount++;
      if (maxDataObjectRows > 0 && factRowCount > maxDataObjectRows)       throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
    }
    for (int i=0; i < allSortedFactRows.size(); i++) {
      if (aggregationRow[i] != null) {
        if (existReferenceDate) {
          diskSortedStackWrapper[i].diskSortedStack.push(aggregationRow[i]);
        }
 else {
          Row4Aggregation popRow=this.mergeRow4Aggregations[i].push(aggregationRow[i]);
          if (popRow != null)           diskSortedStackWrapper[i].diskSortedStack.push(popRow);
        }
      }
      if (!existReferenceDate) {
        List<Row4Aggregation> remainRows=this.mergeRow4Aggregations[i].getAll();
        for (int j=0; j < remainRows.size(); j++) {
          diskSortedStackWrapper[i].diskSortedStack.push(remainRows.get(j));
        }
        this.mergeRow4Aggregations[i]=null;
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9403907163132408
66381,"/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  simpleFunc=getFunctionName(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}","/** 
 * @param dimensionResultIterators
 * @param factTableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(ICubeDimensionReader cubeDimensionReader,IDataSet4Aggregation dataSet4Aggregation,AggregationDefinition[] aggregations,long memoryCacheSize) throws IOException, DataException {
  Object[] params={dataSet4Aggregation,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dataSet4Aggregation=dataSet4Aggregation;
  this.memoryCacheSize=memoryCacheSize;
  getParameterColIndex(aggregations);
  existReferenceDate=existReferenceDate(aggregations);
  simpleFunc=getFunctionName(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  int detailAggregationIndex=-1;
  int detailLevelNum=0;
  if (aggregations.length > 2) {
    for (int i=0; i < aggregations.length; i++) {
      if (aggregations[i].getLevels() != null && aggregations[i].getLevels().length > detailLevelNum) {
        detailLevelNum=aggregations[i].getLevels().length;
        detailAggregationIndex=i;
      }
    }
  }
  this.cubeDimensionReader=cubeDimensionReader;
  timeFunctionCalculator=new TimeFunctionCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.timeFunctionCalculator[i]=new TimeFunctionCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),this.cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
    if (i == detailAggregationIndex)     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 10);
 else     this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,dataSet4Aggregation.getMetaInfo(),cubeDimensionReader,this.memoryCacheSize / 5 / this.aggregationCalculators.length);
  }
  if (simpleFunc != null) {
    measureIndexes4Merge=dataSet4Aggregation.getMetaInfo().getMeasureIndex(simpleFunc.getMeasureName());
    if (AggregationUtil.needDataField(AggregationManager.getInstance().getAggregation(simpleFunc.getFunctionName()))) {
      this.parameterColIndex4Merge=find(paraColumns,simpleFunc.getParaCol());
    }
 else {
      this.parameterColIndex4Merge=-1;
    }
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}",0.9889313745220366
66382,"private static AggregationFunctionDefinition getFunctionName(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && func.getTimeFunction() == null)   return func;
 else   return null;
}","private AggregationFunctionDefinition getFunctionName(AggregationDefinition[] aggregations) throws DataException {
  AggregationFunctionDefinition func=null;
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] aggrFunc=aggregations[i].getAggregationFunctions();
    if (aggrFunc == null)     continue;
    for (int j=0; j < aggrFunc.length; j++) {
      if (func == null && aggrFunc[j].getFilterEvalHelper() == null) {
        func=aggrFunc[j];
      }
 else {
        if (func != null && !equal(func,aggrFunc[j]))         return null;
      }
    }
  }
  if (func != null && isSimepleFunction(func.getFunctionName()) && existReferenceDate)   return func;
 else   return null;
}",0.9617790132036136
66383,"/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context,boolean needCache) throws Exception {
  DocumentDataSource dataSource=context.getDataSource();
  if (dataSource != null) {
    ReportDocumentWriter writer=context.getReportDocWriter();
    IDocArchiveWriter archiverWriter=null;
    if (writer != null) {
      archiverWriter=writer.getArchive();
    }
    return new DataInteractiveEngine(this,context,dataSource.getDataSource(),archiverWriter);
  }
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(this,context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    if (context.getEngineTask().getTaskType() == EngineTask.TASK_DATAEXTRACTION) {
      return new DataInteractiveEngine(this,context,context.getReportDocument().getArchive(),null);
    }
    return new DataPresentationEngine(this,context,context.getReportDocument().getArchive());
  }
  return new DteDataEngine(this,context,needCache);
}","/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context,boolean needCache) throws Exception {
  DocumentDataSource dataSource=context.getDataSource();
  if (dataSource != null) {
    ReportDocumentWriter writer=context.getReportDocWriter();
    IDocArchiveWriter archiverWriter=null;
    if (writer != null) {
      archiverWriter=writer.getArchive();
    }
    return new DataInteractiveEngine(this,context,dataSource.getDataSource(),archiverWriter);
  }
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(this,context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    if (context.getEngineTask().getTaskType() == EngineTask.TASK_DATAEXTRACTION) {
      return new DataInteractiveEngine(this,context,context.getReportDocument().getArchive(),null);
    }
    return new DataPresentationEngine(this,context,context.getReportDocument().getArchive(),needCache);
  }
  return new DteDataEngine(this,context,needCache);
}",0.9580246913580248
66384,"/** 
 * Prepare all default styles for various StyledComponent.
 * @param model
 * @param externalProcessor
 */
public final void prepareStyles(Chart model,IStyleProcessor externalProcessor){
  if (externalProcessor != null) {
    externalProcessor.processStyle(model);
  }
  Stack<StyledComponent> token=new Stack<StyledComponent>();
  token.push(StyledComponent.CHART_ALL_LITERAL);
  prepareComponent(model,token,model,externalProcessor);
  token.clear();
}","/** 
 * Prepare all default styles for various StyledComponent.
 * @param model
 * @param externalProcessor
 */
public final void prepareStyles(Chart model,IStyleProcessor externalProcessor){
  boolean updatedModel=false;
  if (externalProcessor != null) {
    updatedModel=externalProcessor.updateChart(model,null);
  }
  if (!updatedModel) {
    chartValueUpdater.update(model,null);
  }
  if (externalProcessor != null) {
    externalProcessor.processStyle(model);
  }
  Stack<StyledComponent> token=new Stack<StyledComponent>();
  token.push(StyledComponent.CHART_ALL_LITERAL);
  prepareComponent(model,token,model,externalProcessor);
  token.clear();
}",0.8225806451612904
66385,"@Override public void processStyle(Chart cm){
  styleProcessorProxy.updateChart(cm);
  DataSetHandle dataset=ChartItemUtil.getBindingDataSet(handle);
  if (dataset != null) {
    processDataSetStyle(cm);
    return;
  }
  CubeHandle cube=ChartCubeUtil.getBindingCube(handle);
  if (cube == null) {
    return;
  }
  final ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  List<Query> bsQuery=ChartUtil.getBaseSeriesDefinitions(cm).get(0).getDesignTimeSeries().getDataDefinition();
  List<SeriesDefinition> vsds=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  SeriesDefinition vsd=vsds.isEmpty() ? null : vsds.get(0);
  LevelHandle category=bsQuery.size() == 0 ? null : findLevelHandle(cube,exprCodec,bsQuery.get(0));
  LevelHandle yoption=vsd == null ? null : findLevelHandle(cube,exprCodec,vsd.getQuery());
  Query query=null;
  if (vsd != null && vsd.getDesignTimeSeries().getDataDefinition().size() > 0) {
    query=vsd.getDesignTimeSeries().getDataDefinition().get(0);
  }
  MeasureHandle measure=findMeasureHandle(cube,exprCodec,query);
  if (category != null || measure != null || yoption != null) {
    processCubeStyle(cm,category,measure,yoption);
  }
}","@Override public void processStyle(Chart cm){
  DataSetHandle dataset=ChartItemUtil.getBindingDataSet(handle);
  if (dataset != null) {
    processDataSetStyle(cm);
    return;
  }
  CubeHandle cube=ChartCubeUtil.getBindingCube(handle);
  if (cube == null) {
    return;
  }
  final ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  List<Query> bsQuery=ChartUtil.getBaseSeriesDefinitions(cm).get(0).getDesignTimeSeries().getDataDefinition();
  List<SeriesDefinition> vsds=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  SeriesDefinition vsd=vsds.isEmpty() ? null : vsds.get(0);
  LevelHandle category=bsQuery.size() == 0 ? null : findLevelHandle(cube,exprCodec,bsQuery.get(0));
  LevelHandle yoption=vsd == null ? null : findLevelHandle(cube,exprCodec,vsd.getQuery());
  Query query=null;
  if (vsd != null && vsd.getDesignTimeSeries().getDataDefinition().size() > 0) {
    query=vsd.getDesignTimeSeries().getDataDefinition().get(0);
  }
  MeasureHandle measure=findMeasureHandle(cube,exprCodec,query);
  if (category != null || measure != null || yoption != null) {
    processCubeStyle(cm,category,measure,yoption);
  }
}",0.9834254143646408
66386,"/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context,boolean needCache) throws Exception {
  DocumentDataSource dataSource=context.getDataSource();
  if (dataSource != null) {
    ReportDocumentWriter writer=context.getReportDocWriter();
    IDocArchiveWriter archiverWriter=null;
    if (writer != null) {
      archiverWriter=writer.getArchive();
    }
    return new DataInteractiveEngine(this,context,dataSource.getDataSource(),archiverWriter);
  }
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(this,context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    if (context.getEngineTask().getTaskType() == EngineTask.TASK_DATAEXTRACTION) {
      return new DataInteractiveEngine(this,context,context.getReportDocument().getArchive(),null);
    }
    return new DataPresentationEngine(this,context,context.getReportDocument().getArchive());
  }
  return new DteDataEngine(this,context,needCache);
}","/** 
 * create a <code>DataEngine</code> given an execution context
 * @param context the execution context
 * @return a data engine instance
 */
public IDataEngine createDataEngine(ExecutionContext context,boolean needCache) throws Exception {
  DocumentDataSource dataSource=context.getDataSource();
  if (dataSource != null) {
    ReportDocumentWriter writer=context.getReportDocWriter();
    IDocArchiveWriter archiverWriter=null;
    if (writer != null) {
      archiverWriter=writer.getArchive();
    }
    return new DataInteractiveEngine(this,context,dataSource.getDataSource(),archiverWriter);
  }
  ReportDocumentWriter writer=context.getReportDocWriter();
  if (writer != null) {
    return new DataGenerationEngine(this,context,context.getReportDocWriter().getArchive());
  }
  IReportDocument document=context.getReportDocument();
  if (document != null) {
    if (context.getEngineTask().getTaskType() == EngineTask.TASK_DATAEXTRACTION) {
      return new DataInteractiveEngine(this,context,context.getReportDocument().getArchive(),null);
    }
    return new DataPresentationEngine(this,context,context.getReportDocument().getArchive(),needCache);
  }
  return new DteDataEngine(this,context,needCache);
}",0.9580246913580248
66387,"public DataPresentationEngine(DataEngineFactory factory,ExecutionContext context,IDocArchiveReader reader) throws Exception {
  super(factory,context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setAppContext(context.getAppContext());
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
}","public DataPresentationEngine(DataEngineFactory factory,ExecutionContext context,IDocArchiveReader reader,boolean needAccessFactTable) throws Exception {
  super(factory,context);
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_PRESENTATION,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setAppContext(context.getAppContext());
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  loadDteMetaInfo(reader);
  this.needAccessFactTable=needAccessFactTable;
}",0.9552941176470588
66388,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  String resultSetID=loadResultSetID(parentResult,queryID);
  IBaseQueryResults queryResults=null;
  query.setQueryResultsID(resultSetID);
  IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
  ScriptContext scriptContext=context.getScriptContext();
  if (parentResult != null) {
    queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),scriptContext);
  }
 else {
    queryResults=dteSession.execute(pQuery,null,scriptContext);
  }
  CubeResultSet resultSet=null;
  if (parentResult == null) {
    resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
  }
 else {
    resultSet=new CubeResultSet(this,context,parentResult,query,(ICubeQueryResults)queryResults);
  }
  return resultSet;
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  String resultSetID=loadResultSetID(parentResult,queryID);
  IBaseQueryResults queryResults=null;
  query.setQueryResultsID(resultSetID);
  IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
  query.setNeedAccessFactTable(needAccessFactTable);
  ScriptContext scriptContext=context.getScriptContext();
  if (parentResult != null) {
    queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),scriptContext);
  }
 else {
    queryResults=dteSession.execute(pQuery,null,scriptContext);
  }
  CubeResultSet resultSet=null;
  if (parentResult == null) {
    resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
  }
 else {
    resultSet=new CubeResultSet(this,context,parentResult,query,(ICubeQueryResults)queryResults);
  }
  return resultSet;
}",0.9731100963977676
66389,"private IDataEngine getDataEngine(Report report,String archivePath,String archiveMetaName,int mode) throws Exception {
  ExecutionContext context=new ExecutionContext();
  if (mode == MODE_GENERATION) {
    archWriter=new FileArchiveWriter(archivePath);
    archWriter.initialize();
    DataGenerationEngine dataGenEngine=new DataGenerationEngine(null,context,archWriter);
    dataGenEngine.prepare(report,null);
    return dataGenEngine;
  }
 else   if (mode == MODE_PRESENTATION) {
    archReader=new FileArchiveReader(archivePath);
    archReader.open();
    DataPresentationEngine dataPresEngine=new DataPresentationEngine(null,context,archReader);
    dataPresEngine.prepare(report,null);
    return dataPresEngine;
  }
 else {
    return null;
  }
}","private IDataEngine getDataEngine(Report report,String archivePath,String archiveMetaName,int mode) throws Exception {
  ExecutionContext context=new ExecutionContext();
  if (mode == MODE_GENERATION) {
    archWriter=new FileArchiveWriter(archivePath);
    archWriter.initialize();
    DataGenerationEngine dataGenEngine=new DataGenerationEngine(null,context,archWriter);
    dataGenEngine.prepare(report,null);
    return dataGenEngine;
  }
 else   if (mode == MODE_PRESENTATION) {
    archReader=new FileArchiveReader(archivePath);
    archReader.open();
    DataPresentationEngine dataPresEngine=new DataPresentationEngine(null,context,archReader,false);
    dataPresEngine.prepare(report,null);
    return dataPresEngine;
  }
 else {
    return null;
  }
}",0.996042216358839
66390,"protected void updatePageContent() throws BirtException {
  if (page != null) {
    IPageContent pc=(IPageContent)page.getContent();
    pc.setPageNumber(context.getPageNumber());
    if (context.needLayoutPageContent()) {
      IPageContent pageContent=ReportExecutorUtil.executeMasterPage(context.getReportExecutor(),context.getPageNumber(),(MasterPageDesign)pc.getGenerateBy());
      page.content=pageContent;
    }
  }
}","protected void updatePageContent() throws BirtException {
  if (page != null) {
    IPageContent pc=(IPageContent)page.getContent();
    pc.setPageNumber(context.getPageNumber());
    if (context.needLayoutPageContent()) {
      IPageContent pageContent=ReportExecutorUtil.executeMasterPage(context.getReportExecutor(),context.getPageNumber(),(MasterPageDesign)pc.getGenerateBy());
      context.getPageLM().layoutPageContent(pageContent);
      page.content=pageContent;
    }
  }
}",0.9361233480176212
66391,"public ReportRunnable cloneRunnable(){
  ReportDesignHandle newDesign=(ReportDesignHandle)designHandle.copy().getHandle(null);
  newDesign.setFileName(getReportName());
  ReportRunnable newRunnable=new ReportRunnable(engine,newDesign);
  newRunnable.setReportName(reportName);
  newRunnable.setPrepared(prepared);
  return newRunnable;
}","public ReportRunnable cloneRunnable(){
  Map options=((ReportDesignHandle)designHandle).getOptions();
  ReportDesignHandle newDesign=(ReportDesignHandle)designHandle.copy().getHandle(null);
  newDesign.setOptions(options);
  newDesign.setFileName(getReportName());
  ReportRunnable newRunnable=new ReportRunnable(engine,newDesign);
  newRunnable.setReportName(reportName);
  newRunnable.setPrepared(prepared);
  return newRunnable;
}",0.8025974025974026
66392,"/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof ICacheable)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp);
        }
      }
    }
    this.cachedDataSetNames.clear();
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}","/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    List temp2=new ArrayList();
    this.cachedDataSetNames.clear();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof ICacheable)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp2);
          if (qd.getParentQuery() != null && qd.getInputParamBindings().size() == 0) {
            for (int i=0; i < temp2.size(); i++) {
              this.cachedDataSetNames.add(temp2.get(i));
            }
          }
          temp.addAll(temp2);
        }
      }
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}",0.7225130890052356
66393,"/** 
 * @param cubeHandle
 * @throws BirtException
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createDimensionQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      if (CubeHandleUtil.isTimeDimension(dim)) {
        FilterDefinition filter=null;
        if (((TabularDimensionHandle)dim).getSharedDimension() != null) {
          filter=buildFilterForTimeDimension(((TabularDimensionHandle)dim).getSharedDimension(),hier);
        }
 else {
          filter=buildFilterForTimeDimension(dim,hier);
        }
        if (filter != null)         query.addFilter(filter);
      }
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}","/** 
 * @param cubeHandle
 * @throws BirtException
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createDimensionQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      if (CubeHandleUtil.isTimeDimension(dim)) {
        FilterDefinition filter=null;
        if ((dim instanceof TabularDimensionHandle) && ((TabularDimensionHandle)dim).getSharedDimension() != null) {
          filter=buildFilterForTimeDimension(((TabularDimensionHandle)dim).getSharedDimension(),hier);
        }
 else {
          filter=buildFilterForTimeDimension(dim,hier);
        }
        if (filter != null)         query.addFilter(filter);
      }
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}",0.9925360180524214
66394,"/** 
 * handle the foreign content object. Foreign content can be created by following design element: <li> Text(HTML). It will create a TEMPLATE_TYPE foreign object. <li> MultiLine(HTML). It will create a HTML_TYPE forign object <li> MultiLine(PlainText).It will create a TEXT_TYPE foreign object <li> Extended item. It will create a TEXT_TYPE/HTML_TYPE/IMAGE_TYPE/VALUE_TYPE foreign object.
 */
private IContent localizeForeign(IForeignContent foreignContent){
  IReportContent reportContent=getReportContent();
  String rawFormat=foreignContent.getRawType();
  Object rawValue=foreignContent.getRawValue();
  handleOnRender(foreignContent);
  if (IForeignContent.TEMPLATE_TYPE.equals(rawFormat)) {
    processTemplateContent(foreignContent);
    return foreignContent;
  }
  if (IForeignContent.EXTERNAL_TYPE.equals(rawFormat)) {
    return processExtendedContent(foreignContent);
  }
  if (IForeignContent.IMAGE_TYPE.equals(rawFormat)) {
    if (rawValue instanceof IImageContent) {
      IImageContent image=(IImageContent)rawValue;
      processImage(image);
      return image;
    }
    if (rawValue instanceof byte[]) {
      IImageContent imageContent=reportContent.createImageContent(foreignContent);
      imageContent.setImageSource(IImageContent.IMAGE_EXPRESSION);
      imageContent.setData((byte[])rawValue);
      processImage(imageContent);
      return imageContent;
    }
  }
  if (IForeignContent.TEXT_TYPE.equals(rawFormat)) {
    ITextContent textContent=reportContent.createDataContent(foreignContent);
    textContent.setText(rawValue == null ? ""String_Node_Str"" : rawValue.toString());
    return textContent;
  }
  if (IForeignContent.HTML_TYPE.equals(rawFormat)) {
    String key=foreignContent.getRawKey();
    if (key != null) {
      String text=localize(foreignContent,key,null);
      if (text != null) {
        foreignContent.setRawValue(text);
      }
    }
 else {
      Object value=foreignContent.getRawValue();
      String text=format(value,foreignContent.getComputedStyle());
      if (text != null) {
        foreignContent.setRawValue(text);
      }
    }
    return foreignContent;
  }
  if (IForeignContent.VALUE_TYPE.equals(rawFormat)) {
    IDataContent dataContent=reportContent.createDataContent(foreignContent);
    dataContent.setParent(foreignContent.getParent());
    dataContent.setValue(rawValue);
    processData(dataContent);
    return dataContent;
  }
  return foreignContent;
}","/** 
 * handle the foreign content object. Foreign content can be created by following design element: <li> Text(HTML). It will create a TEMPLATE_TYPE foreign object. <li> MultiLine(HTML). It will create a HTML_TYPE forign object <li> MultiLine(PlainText).It will create a TEXT_TYPE foreign object <li> Extended item. It will create a TEXT_TYPE/HTML_TYPE/IMAGE_TYPE/VALUE_TYPE foreign object.
 */
private IContent localizeForeign(IForeignContent foreignContent){
  IReportContent reportContent=getReportContent();
  handleOnRender(foreignContent);
  String rawFormat=foreignContent.getRawType();
  Object rawValue=foreignContent.getRawValue();
  if (IForeignContent.TEMPLATE_TYPE.equals(rawFormat)) {
    processTemplateContent(foreignContent);
    return foreignContent;
  }
  if (IForeignContent.EXTERNAL_TYPE.equals(rawFormat)) {
    return processExtendedContent(foreignContent);
  }
  if (IForeignContent.IMAGE_TYPE.equals(rawFormat)) {
    if (rawValue instanceof IImageContent) {
      IImageContent image=(IImageContent)rawValue;
      processImage(image);
      return image;
    }
    if (rawValue instanceof byte[]) {
      IImageContent imageContent=reportContent.createImageContent(foreignContent);
      imageContent.setImageSource(IImageContent.IMAGE_EXPRESSION);
      imageContent.setData((byte[])rawValue);
      processImage(imageContent);
      return imageContent;
    }
  }
  if (IForeignContent.TEXT_TYPE.equals(rawFormat)) {
    ITextContent textContent=reportContent.createDataContent(foreignContent);
    textContent.setText(rawValue == null ? ""String_Node_Str"" : rawValue.toString());
    return textContent;
  }
  if (IForeignContent.HTML_TYPE.equals(rawFormat)) {
    String key=foreignContent.getRawKey();
    if (key != null) {
      String text=localize(foreignContent,key,null);
      if (text != null) {
        foreignContent.setRawValue(text);
      }
    }
 else {
      Object value=foreignContent.getRawValue();
      String text=format(value,foreignContent.getComputedStyle());
      if (text != null) {
        foreignContent.setRawValue(text);
      }
    }
    return foreignContent;
  }
  if (IForeignContent.VALUE_TYPE.equals(rawFormat)) {
    IDataContent dataContent=reportContent.createDataContent(foreignContent);
    dataContent.setParent(foreignContent.getParent());
    dataContent.setValue(rawValue);
    processData(dataContent);
    return dataContent;
  }
  return foreignContent;
}",0.9860541427399508
66395,"/** 
 * @throws DataException
 */
private void binaryMove() throws DataException {
  List<GroupInfo> groupList=this.getGroups()[groups.length - 1];
  int low=leafGroupIdx;
  if (groupList.size() == Integer.MAX_VALUE) {
    int i=0;
    while (true) {
      if (groupList.get(i).firstChild > cacheProvider.getCurrentIndex()) {
        this.leafGroupIdx=i - 1;
        return;
      }
      i++;
    }
  }
  int high=groupList.size() - 1;
  int mid;
  while (low <= high) {
    mid=(high + low) / 2;
    if (((GroupInfo)groupList.get(mid)).firstChild > cacheProvider.getCurrentIndex()) {
      high=mid - 1;
    }
 else     if (mid == groupList.size() - 1 || ((GroupInfo)groupList.get(mid + 1)).firstChild > cacheProvider.getCurrentIndex()) {
      leafGroupIdx=mid;
      return;
    }
 else {
      low=mid + 1;
    }
  }
}","/** 
 * @throws DataException
 */
private void binaryMove() throws DataException {
  List<GroupInfo> groupList=this.getGroups()[groups.length - 1];
  int low=leafGroupIdx;
  if (groupList.size() == Integer.MAX_VALUE) {
    int i=0;
    while (true) {
      GroupInfo info=groupList.get(i);
      if (info == null)       return;
      if (info.firstChild > cacheProvider.getCurrentIndex()) {
        this.leafGroupIdx=i - 1;
        return;
      }
      i++;
    }
  }
  int high=groupList.size() - 1;
  int mid;
  while (low <= high) {
    mid=(high + low) / 2;
    if (((GroupInfo)groupList.get(mid)).firstChild > cacheProvider.getCurrentIndex()) {
      high=mid - 1;
    }
 else     if (mid == groupList.size() - 1 || ((GroupInfo)groupList.get(mid + 1)).firstChild > cacheProvider.getCurrentIndex()) {
      leafGroupIdx=mid;
      return;
    }
 else {
      low=mid + 1;
    }
  }
}",0.957334891876096
66396,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)     return Strategy.Complex;
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      SortingOptimizer opt=new SortingOptimizer(dataSet,query);
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  SortingOptimizer opt=new SortingOptimizer(dataSet,query);
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)     return Strategy.Complex;
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0) {
    if (!opt.acceptQuerySorting())     return Strategy.Complex;
  }
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}",0.980355252323256
66397,"/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)     return Strategy.Complex;
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}","/** 
 * @param query
 * @param dataSet
 * @return
 * @throws DataException
 */
public static Strategy getQueryExecutionStrategy(DataEngineSession session,IQueryDefinition query,IBaseDataSetDesign dataSet) throws DataException {
  if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)   return Strategy.Complex;
  if (query.getGroups() != null && query.getGroups().size() > 0) {
    if (session.getEngineContext().getMode() == DataEngineContext.MODE_UPDATE)     return Strategy.Complex;
    for (    IGroupDefinition group : (List<IGroupDefinition>)query.getGroups()) {
      if (group.getFilters().isEmpty() && group.getSorts().isEmpty() && !query.getQueryExecutionHints().doSortBeforeGrouping())       continue;
      SortingOptimizer opt=new SortingOptimizer(dataSet,query);
      if (opt.acceptGroupSorting()) {
        continue;
      }
      return Strategy.Complex;
    }
  }
  if (query.getFilters() != null && query.getFilters().size() > 0) {
    return Strategy.Complex;
  }
  if (query.getSorts() != null && query.getSorts().size() > 0)   return Strategy.Complex;
  if (query.getSubqueries() != null && query.getSubqueries().size() > 0)   return Strategy.Complex;
  if (!query.usesDetails()) {
    return Strategy.Complex;
  }
  boolean hasAggregation=false;
  if (query.getBindings() != null) {
    Iterator bindingIt=query.getBindings().values().iterator();
    while (bindingIt.hasNext()) {
      IBinding binding=(IBinding)bindingIt.next();
      if (binding.getAggrFunction() != null) {
        hasAggregation=true;
        IAggrFunction aggr=AggregationManager.getInstance().getAggregation(binding.getAggrFunction());
        if (aggr != null && aggr.getNumberOfPasses() > 1) {
          return Strategy.Complex;
        }
        List exprs=new ArrayList();
        exprs.addAll(binding.getArguments());
        if (binding.getExpression() != null)         exprs.add(binding.getExpression());
        for (int i=0; i < exprs.size(); i++) {
          Object expr=exprs.get(i);
          if (!(expr instanceof IScriptExpression)) {
            return Strategy.Complex;
          }
          IScriptExpression scriptExpr=(IScriptExpression)expr;
          try {
            List<IColumnBinding> columnExprs=ExpressionUtil.extractColumnExpressions(scriptExpr.getText());
            for (            IColumnBinding temp : columnExprs) {
              Object obj=query.getBindings().get(temp.getResultSetColumnName());
              if (obj instanceof IBinding) {
                IBinding bindingObj=(IBinding)obj;
                if (bindingObj.getAggrFunction() != null)                 return Strategy.Complex;
                IBaseExpression baseExpr=((IBinding)obj).getExpression();
                if (baseExpr instanceof IScriptExpression) {
                  String cb=ExpressionUtil.getColumnName(((IScriptExpression)baseExpr).getText());
                  if (ScriptEvalUtil.compare(bindingObj.getBindingName(),cb) != 0)                   return Strategy.Complex;
                }
              }
            }
          }
 catch (          BirtException e) {
            return Strategy.Complex;
          }
        }
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(binding.getExpression())) {
        return Strategy.Complex;
      }
    }
  }
  if (dataSet != null) {
    if (dataSet.getFilters() != null) {
      if (FilterUtil.hasMutipassFilters(dataSet.getFilters())) {
        return Strategy.Complex;
      }
    }
    if (dataSet.needDistinctValue())     return Strategy.Complex;
    if (dataSet.getComputedColumns() != null) {
      List computedColumns=dataSet.getComputedColumns();
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null)         return Strategy.Complex;
        if (computedColumn.getExpression() instanceof IScriptExpression) {
          if (ExpressionUtil.hasAggregation(((IScriptExpression)computedColumn.getExpression()).getText())) {
            return Strategy.Complex;
          }
        }
      }
    }
  }
  return hasAggregation ? Strategy.SimpleLookingFoward : Strategy.SimpleNoLookingFoward;
}",0.984641228701704
66398,"public GroupInfo get(int index){
  GroupInfo groupInfo=new GroupInfo();
  try {
    this.dataSource.seek((index * 2 + 1) * IOUtil.INT_LENGTH + this.initOffset);
    groupInfo.parent=IOUtil.readInt(this.dataSource);
    groupInfo.firstChild=IOUtil.readInt(this.dataSource);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return groupInfo;
}","public GroupInfo get(int index){
  GroupInfo groupInfo=new GroupInfo();
  try {
    this.dataSource.seek((index * 2 + 1) * IOUtil.INT_LENGTH + this.initOffset);
    groupInfo.parent=IOUtil.readInt(this.dataSource);
    groupInfo.firstChild=IOUtil.readInt(this.dataSource);
  }
 catch (  IOException e) {
    try {
      if (this.dataSource.length() == ((index * 2 + 1) * IOUtil.INT_LENGTH + this.initOffset)) {
        return null;
      }
    }
 catch (    IOException e1) {
    }
    throw new RuntimeException(e);
  }
  return groupInfo;
}",0.7571743929359823
66399,"public Object getObject(String arg0) throws OLAPException {
  if (this.resultSet == null || this.resultSet.getMeasureResult() == null)   return null;
  try {
    int id=this.view.getAggregationRegisterTable().getAggregationResultID(arg0);
    int index=this.view.getAggregationRegisterTable().getAggregationIndex(id,arg0);
    if (synchronizedWithEdge(id,arg0,getCurrentValueOnEdge(arg0)))     return this.resultSet.getMeasureResult()[id].getQueryResultSet().getAggregationValue(index);
 else {
      return null;
    }
  }
 catch (  IOException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
catch (  DataException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
}","public Object getObject(String arg0) throws OLAPException {
  if (this.resultSet == null || this.resultSet.getMeasureResult() == null)   return null;
  try {
    int index=0, aggrIndex=0;
    IAggregationResultSet rs=null;
    if (aggregationResultSetIDMap.containsKey(arg0)) {
      index=aggregationResultSetIDMap.get(arg0).intValue();
      rs=this.resultSet.getMeasureResult()[index].getQueryResultSet();
      aggrIndex=rs.getAggregationIndex(arg0);
    }
 else {
      IEdgeAxis[] axis=this.resultSet.getMeasureResult();
      for (; index < axis.length; index++) {
        aggrIndex=axis[index].getQueryResultSet().getAggregationIndex(arg0);
        if (aggrIndex >= 0) {
          rs=axis[index].getQueryResultSet();
          aggregationResultSetIDMap.put(arg0,Integer.valueOf(index));
          break;
        }
      }
    }
    if (synchronizedWithEdge(index,rs,arg0,getCurrentValueOnEdge(arg0)))     return rs.getAggregationValue(aggrIndex);
 else {
      return null;
    }
  }
 catch (  IOException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
catch (  DataException e) {
    throw new OLAPException(e.getLocalizedMessage());
  }
}",0.5268817204301075
66400,"/** 
 * @param view
 * @param result
 * @param relationMap
 * @param manager
 */
public AggregationAccessor(BirtCubeView view,IResultSet result,Map relationMap){
  this.resultSet=result;
  this.view=view;
  this.relationMap=relationMap;
  this.dimensionPrepared=false;
  this.dimensionCursorMap=new HashMap();
  if (result == null || result.getMeasureResult() == null)   return;
  this.currentPosition=new int[this.resultSet.getMeasureResult().length];
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      if (this.resultSet.getMeasureResult()[i].getQueryResultSet().length() > 0) {
        this.resultSet.getMeasureResult()[i].getQueryResultSet().seek(0);
        currentPosition[i]=0;
      }
 else {
        currentPosition[i]=-1;
      }
    }
 catch (    IOException e) {
    }
  }
  initMeasureNavigator();
}","/** 
 * @param view
 * @param result
 * @param relationMap
 * @param manager
 */
public AggregationAccessor(BirtCubeView view,IResultSet result,Map relationMap){
  this.resultSet=result;
  this.view=view;
  this.relationMap=relationMap;
  this.dimensionPrepared=false;
  this.dimensionCursorMap=new HashMap();
  this.aggregationResultSetIDMap=new HashMap<String,Integer>();
  if (result == null || result.getMeasureResult() == null)   return;
  this.currentPosition=new int[this.resultSet.getMeasureResult().length];
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      if (this.resultSet.getMeasureResult()[i].getQueryResultSet().length() > 0) {
        this.resultSet.getMeasureResult()[i].getQueryResultSet().seek(0);
        currentPosition[i]=0;
      }
 else {
        currentPosition[i]=-1;
      }
    }
 catch (    IOException e) {
    }
  }
  initMeasureNavigator();
}",0.9635535307517084
66401,"/** 
 * @param aggrIndex
 * @throws OLAPException
 * @throws IOException
 * @throws DataException
 */
public boolean synchronizedWithEdge(int aggrIndex,String aggrName,Map valueMap) throws OLAPException, IOException, DataException {
  IAggregationResultSet rs=this.resultSet.getMeasureResult()[aggrIndex].getQueryResultSet();
  if (rs == null || rs.length() <= 0)   return false;
  if (valueMap == null)   return true;
  CalculatedMember member=this.view.getAggregationRegisterTable().getCalculatedMember(aggrName);
  List memberList=member.getCubeAggrDefn().getAggrLevelsInAggregationResult();
  if (Arrays.deepEquals(rs.getAllLevels(),member.getCubeAggrDefn().getAggrLevelsInDefinition().toArray())) {
    return findValueMatcher(rs,memberList,valueMap,aggrIndex);
  }
 else {
    return findValueMatcherOneByOne(rs,memberList,valueMap,aggrIndex);
  }
}","/** 
 * @param aggrIndex
 * @throws OLAPException
 * @throws IOException
 * @throws DataException
 */
private boolean synchronizedWithEdge(int index,IAggregationResultSet rs,String aggrName,Map valueMap) throws OLAPException, IOException, DataException {
  if (rs == null || rs.length() <= 0)   return false;
  if (valueMap == null)   return true;
  List memberList=Arrays.asList(rs.getAllLevels());
  CalculatedMember member=this.view.getAggregationRegisterTable().getCalculatedMember(aggrName);
  if (member != null && member.getCubeAggrDefn() instanceof CubeRunningNestAggrDefn) {
    return findValueMatcherOneByOne(rs,memberList,valueMap,index);
  }
 else {
    return findValueMatcher(rs,memberList,valueMap,index);
  }
}",0.6573957016434893
66402,"public int getAggregationIndex(String name) throws IOException {
  int index=rs1.getAggregationIndex(name);
  if (index < 0) {
    int index2=rs2.getAggregationIndex(name);
    if (index2 >= 0) {
      index+=rs1.getAggregationCount();
    }
  }
  return index;
}","public int getAggregationIndex(String name) throws IOException {
  int index=rs1.getAggregationIndex(name);
  if (index < 0) {
    index=rs2.getAggregationIndex(name);
    if (index >= 0) {
      index+=rs1.getAggregationCount();
    }
  }
  return index;
}",0.9769230769230768
66403,"public static MemberTreeNode[] createMinute(){
  MemberTreeNode[] nodes=new MemberTreeNode[60];
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createMinute(){
  MemberTreeNode[] nodes=new MemberTreeNode[60];
  calendar.clear();
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.MINUTE,i);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.8192090395480226
66404,"public static MemberTreeNode[] createSecond(){
  MemberTreeNode[] nodes=new MemberTreeNode[60];
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createSecond(){
  MemberTreeNode[] nodes=new MemberTreeNode[60];
  calendar.clear();
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.SECOND,i);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.8192090395480226
66405,"public static MemberTreeNode[] createQuarterMonthNode(int quarter){
  MemberTreeNode[] nodes=new MemberTreeNode[3];
switch (quarter) {
case 0:
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{Integer.valueOf(i)});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  break;
case 1:
for (int i=4; i <= nodes.length + 3; i++) {
  Member member=new Member();
  member.setKeyValues(new Object[]{Integer.valueOf(i)});
  nodes[i - 4]=new MemberTreeNode(member);
}
break;
case 2:
for (int i=7; i <= nodes.length + 6; i++) {
Member member=new Member();
member.setKeyValues(new Object[]{Integer.valueOf(i)});
nodes[i - 7]=new MemberTreeNode(member);
}
break;
case 3:
for (int i=10; i <= nodes.length + 9; i++) {
Member member=new Member();
member.setKeyValues(new Object[]{Integer.valueOf(i)});
nodes[i - 10]=new MemberTreeNode(member);
}
break;
}
return nodes;
}","private static MemberTreeNode[] createQuarterMonthNode(int quarter){
  MemberTreeNode[] nodes=new MemberTreeNode[3];
  calendar.clear();
switch (quarter) {
case 0:
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{Integer.valueOf(i)});
      calendar.set(Calendar.MONTH,i - 1);
      member.setAttributes(new Object[]{calendar.getTime()});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  break;
case 1:
for (int i=4; i <= nodes.length + 3; i++) {
  Member member=new Member();
  member.setKeyValues(new Object[]{Integer.valueOf(i)});
  calendar.set(Calendar.MONTH,i - 1);
  member.setAttributes(new Object[]{calendar.getTime()});
  nodes[i - 4]=new MemberTreeNode(member);
}
break;
case 2:
for (int i=7; i <= nodes.length + 6; i++) {
Member member=new Member();
member.setKeyValues(new Object[]{Integer.valueOf(i)});
calendar.set(Calendar.MONTH,i - 1);
member.setAttributes(new Object[]{calendar.getTime()});
;
nodes[i - 7]=new MemberTreeNode(member);
}
break;
case 3:
for (int i=10; i <= nodes.length + 9; i++) {
Member member=new Member();
member.setKeyValues(new Object[]{Integer.valueOf(i)});
calendar.set(Calendar.MONTH,i - 1);
member.setAttributes(new Object[]{calendar.getTime()});
nodes[i - 10]=new MemberTreeNode(member);
}
break;
}
return nodes;
}",0.8150776053215077
66406,"public static MemberTreeNode[] getDateTimeNodes(DimLevel[] dimLevels,Object dateTimeValue,int index,MirrorMetaInfo service){
  String[] dateTypes=new String[dimLevels.length - index];
  for (int i=index; i < dimLevels.length; i++) {
    dateTypes[i - index]=service.getLevelType(dimLevels[i]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}","public static MemberTreeNode[] getDateTimeNodes(DimLevel[] dimLevels,Object dateTimeValue,int index,MirrorMetaInfo service){
  String[] dateTypes=new String[dimLevels.length - index];
  for (int i=index; i < dimLevels.length; i++) {
    dateTypes[i - index]=service.getLevelType(dimLevels[i]);
  }
  calendar=Calendar.getInstance(service.getSession().getEngineContext().getLocale());
  calendar.setTimeZone(service.getSession().getEngineContext().getTimeZone());
  calendar.clear();
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  return parent;
}",0.9725333997178658
66407,"public static MemberTreeNode[] createMonthNode(){
  MemberTreeNode[] nodes=new MemberTreeNode[12];
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createMonthNode(){
  MemberTreeNode[] nodes=new MemberTreeNode[12];
  calendar.clear();
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.MONTH,i - 1);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.800557880055788
66408,"public static MemberTreeNode[] createDayOfWeek(){
  MemberTreeNode[] nodes=new MemberTreeNode[7];
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createDayOfWeek(){
  MemberTreeNode[] nodes=new MemberTreeNode[7];
  calendar.clear();
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.DAY_OF_WEEK,i);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.8145048814504882
66409,"public static MemberTreeNode[] createDayOfMonth(int year,int month){
  boolean isLeapYear=false;
  if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
    isLeapYear=true;
  }
  MemberTreeNode[] nodes=new MemberTreeNode[0];
  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
    nodes=new MemberTreeNode[31];
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{new Integer(i)});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  }
 else   if (month == 2) {
    if (isLeapYear) {
      nodes=new MemberTreeNode[29];
      for (int i=1; i <= nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{Integer.valueOf(i)});
        nodes[i - 1]=new MemberTreeNode(member);
      }
    }
 else {
      nodes=new MemberTreeNode[28];
      for (int i=1; i <= nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{Integer.valueOf(i)});
        nodes[i - 1]=new MemberTreeNode(member);
      }
    }
  }
 else {
    nodes=new MemberTreeNode[30];
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{Integer.valueOf(i)});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  }
  return nodes;
}","private static MemberTreeNode[] createDayOfMonth(int year,int month){
  boolean isLeapYear=false;
  if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
    isLeapYear=true;
  }
  MemberTreeNode[] nodes=new MemberTreeNode[0];
  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
    nodes=new MemberTreeNode[31];
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{new Integer(i)});
      calendar.set(Calendar.MONTH,month - 1);
      calendar.set(Calendar.DATE,i);
      member.setAttributes(new Object[]{calendar.getTime()});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  }
 else   if (month == 2) {
    if (isLeapYear) {
      nodes=new MemberTreeNode[29];
      for (int i=1; i <= nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{Integer.valueOf(i)});
        calendar.set(Calendar.MONTH,month - 1);
        calendar.set(Calendar.DATE,i);
        member.setAttributes(new Object[]{calendar.getTime()});
        nodes[i - 1]=new MemberTreeNode(member);
      }
    }
 else {
      nodes=new MemberTreeNode[28];
      for (int i=1; i <= nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{Integer.valueOf(i)});
        calendar.set(Calendar.MONTH,month - 1);
        calendar.set(Calendar.DATE,i);
        member.setAttributes(new Object[]{calendar.getTime()});
        nodes[i - 1]=new MemberTreeNode(member);
      }
    }
  }
 else {
    nodes=new MemberTreeNode[30];
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{Integer.valueOf(i)});
      calendar.set(Calendar.MONTH,month - 1);
      calendar.set(Calendar.DATE,i);
      member.setAttributes(new Object[]{calendar.getTime()});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  }
  return nodes;
}",0.8188645238810454
66410,"public static MemberTreeNode[] createDayOfYearNode(int year){
  int count=0;
  if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
    count=366;
  }
 else {
    count=365;
  }
  MemberTreeNode[] nodes=new MemberTreeNode[count];
  for (int i=1; i <= count; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createDayOfYearNode(int year){
  calendar.clear();
  int count=0;
  if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
    count=366;
  }
 else {
    count=365;
  }
  MemberTreeNode[] nodes=new MemberTreeNode[count];
  for (int i=1; i <= count; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.DAY_OF_YEAR,i);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.8646998982706002
66411,"public static MemberTreeNode[] createHour(){
  MemberTreeNode[] nodes=new MemberTreeNode[24];
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createHour(){
  MemberTreeNode[] nodes=new MemberTreeNode[24];
  calendar.clear();
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.HOUR_OF_DAY,i);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.8124118476727785
66412,"public static MemberTreeNode[] createQuarterNode(){
  MemberTreeNode[] nodes=new MemberTreeNode[4];
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}","private static MemberTreeNode[] createQuarterNode(){
  MemberTreeNode[] nodes=new MemberTreeNode[4];
  calendar.clear();
  for (int i=1; i <= nodes.length; i++) {
    Member member=new Member();
    member.setKeyValues(new Object[]{Integer.valueOf(i)});
    calendar.set(Calendar.MONTH,(i - 1) * 3);
    member.setAttributes(new Object[]{calendar.getTime()});
    nodes[i - 1]=new MemberTreeNode(member);
  }
  return nodes;
}",0.7944827586206896
66413,"/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      if (CubeHandleUtil.isTimeDimension(dim))       continue;
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createDimensionQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}","/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      if (CubeHandleUtil.isTimeDimension(dim)) {
        FilterDefinition filter=buildFilterForTimeDimension(dim,hier);
        if (filter != null)         query.addFilter(filter);
      }
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createDimensionQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}",0.9696379914363564
66414,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
      ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9376728355669006
66415,"/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      if (CubeHandleUtil.isTimeDimension(dim)) {
        FilterDefinition filter=buildFilterForTimeDimension(dim,hier);
        if (filter != null)         query.addFilter(filter);
      }
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createDimensionQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}","/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createDimensionQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      if (CubeHandleUtil.isTimeDimension(dim)) {
        FilterDefinition filter=buildFilterForTimeDimension(dim,hier);
        if (filter != null)         query.addFilter(filter);
      }
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}",0.928191489361702
66416,"static private boolean contains(String formats,String format){
  int index=formats.indexOf(format);
  if (index != -1) {
    if (index > 0) {
      if (formats.charAt(index - 1) != ',') {
        return false;
      }
    }
    int lastIndex=index + format.length();
    if (lastIndex < formats.length()) {
      if (formats.charAt(lastIndex) != ',') {
        return false;
      }
    }
    return true;
  }
  return false;
}","static private boolean contains(String formats,String format){
  int index=0;
  int lastIndex=0;
  do {
    index=formats.indexOf(format,lastIndex);
    if (index == -1) {
      break;
    }
    lastIndex=index + format.length();
    if (index > 0) {
      if (formats.charAt(index - 1) != ',') {
        continue;
      }
    }
    if (lastIndex < formats.length()) {
      if (formats.charAt(lastIndex) != ',') {
        continue;
      }
    }
    return true;
  }
 while (index != -1);
  return false;
}",0.7109207708779444
66417,"protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  if (doesLoadFromCache() == true) {
    DataSourceQuery dsQuery=new DataSourceQuery(dataEngine.getSession());
    JointDataSetQuery jointQuery=(JointDataSetQuery)odiQuery;
    this.prepareCacheQuery(dsQuery);
    dsQuery.setExprProcessor(jointQuery.getExprProcessor());
    List fetchEvents=jointQuery.getFetchEvents();
    if (fetchEvents != null)     for (int i=0; i < fetchEvents.size(); i++)     dsQuery.addOnFetchEvent((IResultObjectEvent)fetchEvents.get(i));
    dsQuery.setMaxRows(jointQuery.getMaxRows());
    dsQuery.setOrdering(toList(jointQuery.getOrdering()));
    dsQuery.setGrouping(toList(jointQuery.getGrouping()));
    return dsQuery.execute(eventHandler);
  }
  ResultIterator left=null;
  ResultIterator right=null;
  try {
    DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
    dscm.setDataSourceAndDataSet(leftDataSourceDesign,leftDataSetDesgin,leftParameterHints,leftAppContext);
    left=(ResultIterator)leftQueryResults.getResultIterator();
    dscm.setDataSourceAndDataSet(rightDataSourceDesign,rightDataSetDesgin,rightParameterHints,rightAppContext);
    right=(ResultIterator)rightQueryResults.getResultIterator();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initialize(dataEngine,appContext,left,right);
  JointResultMetadata jrm=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType,dataEngine.getSession(),dataSetDesign.getRowFetchLimit());
  DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
  dscm.setDataSourceAndDataSet(null,dataSetDesign,parameterHints,dscm.getCurrentAppContext());
  if (doesSaveToCache() == false)   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler,dataEngine.getSession());
 else   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,new DataSetToCache(populator,resultClass,dataEngine.getSession()),eventHandler,dataEngine.getSession());
}","protected org.eclipse.birt.data.engine.odi.IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  if (doesLoadFromCache() == true) {
    DataSourceQuery dsQuery=new DataSourceQuery(dataEngine.getSession());
    JointDataSetQuery jointQuery=(JointDataSetQuery)odiQuery;
    this.prepareCacheQuery(dsQuery);
    dsQuery.setExprProcessor(jointQuery.getExprProcessor());
    List fetchEvents=jointQuery.getFetchEvents();
    if (fetchEvents != null)     for (int i=0; i < fetchEvents.size(); i++)     dsQuery.addOnFetchEvent((IResultObjectEvent)fetchEvents.get(i));
    dsQuery.setMaxRows(jointQuery.getMaxRows());
    dsQuery.setOrdering(toList(jointQuery.getOrdering()));
    dsQuery.setGrouping(toList(jointQuery.getGrouping()));
    dsQuery.setQueryDefinition(jointQuery.getQueryDefinition());
    return dsQuery.execute(eventHandler);
  }
  ResultIterator left=null;
  ResultIterator right=null;
  try {
    DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
    dscm.setDataSourceAndDataSet(leftDataSourceDesign,leftDataSetDesgin,leftParameterHints,leftAppContext);
    left=(ResultIterator)leftQueryResults.getResultIterator();
    dscm.setDataSourceAndDataSet(rightDataSourceDesign,rightDataSetDesgin,rightParameterHints,rightAppContext);
    right=(ResultIterator)rightQueryResults.getResultIterator();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initialize(dataEngine,appContext,left,right);
  JointResultMetadata jrm=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
  resultClass=jrm.getResultClass();
  populator=JointDataSetPopulatorFactory.getBinaryTreeDataSetPopulator(left.getOdiResult(),right.getOdiResult(),jrm,matcher,joinType,dataEngine.getSession(),dataSetDesign.getRowFetchLimit());
  DataSetCacheManager dscm=dataEngine.getSession().getDataSetCacheManager();
  dscm.setDataSourceAndDataSet(null,dataSetDesign,parameterHints,dscm.getCurrentAppContext());
  if (doesSaveToCache() == false)   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,populator,eventHandler,dataEngine.getSession());
 else   return new CachedResultSet((BaseQuery)this.odiQuery,resultClass,new DataSetToCache(populator,resultClass,dataEngine.getSession()),eventHandler,dataEngine.getSession());
}",0.985723698660224
66418,"/** 
 * @throws DataException
 */
private void prepareCurrentRow() throws DataException {
  clear();
  this.rdSaveHelper.doSaveBasic();
  if (!this.isEmpty()) {
    if (needCache()) {
      bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap,true);
      try {
        saveCurrentRow();
      }
 catch (      IOException e) {
        try {
          this.metaOutputStream.close();
          this.rowOutputStream.close();
        }
 catch (        IOException ce) {
        }
        throw new DataException(ResourceConstants.WRITE_CACHE_TEMPFILE_ERROR,e);
      }
catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
 else {
      if (this.getRdSaveHelper().isSummaryQuery())       bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap,true);
 else       bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap,false);
    }
  }
}","/** 
 * @throws DataException
 */
private void prepareCurrentRow() throws DataException {
  clear();
  this.rdSaveHelper.doSaveBasic();
  if (needCache() && !this.isEmpty()) {
    bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap,true);
    try {
      saveCurrentRow();
    }
 catch (    IOException e) {
      try {
        this.metaOutputStream.close();
        this.rowOutputStream.close();
      }
 catch (      IOException ce) {
      }
      throw new DataException(ResourceConstants.WRITE_CACHE_TEMPFILE_ERROR,e);
    }
catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
 else {
    if (this.getRdSaveHelper().isSummaryQuery())     bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap,true);
 else     bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap,false);
  }
}",0.8620283018867925
66419,"/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas,true);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas,true);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
protected void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultPropertyValues(viewDatas);
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas,true);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultPropertyValues(viewDatas);
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas,true);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.9899469421949176
66420,"private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  Locale locale=getLocale();
  if (locale != null) {
    scriptContext.setLocale(locale);
  }
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler != null) {
      handler.initialize();
    }
    if (handler == null) {
      handler=engine.getConfig().getStatusHandler();
    }
    if (handler != null) {
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  if (applicationClassLoader != null) {
    scriptContext.setApplicationClassLoader(applicationClassLoader);
  }
}","private void initializeScriptContext(){
  scriptContext=new ScriptContext();
  if (engine != null) {
    EngineConfig config=engine.getConfig();
    IStatusHandler statusHandler=config.getStatusHandler();
    if (statusHandler != null) {
      scriptContext.setAttribute(""String_Node_Str"",statusHandler);
    }
  }
  Locale locale=getLocale();
  if (locale != null) {
    scriptContext.setLocale(locale);
  }
  scriptContext.setAttribute(""String_Node_Str"",new ReportObject());
  scriptContext.setAttribute(""String_Node_Str"",params);
  scriptContext.setAttribute(""String_Node_Str"",configs);
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(totalPage));
  scriptContext.setAttribute(""String_Node_Str"",this);
  scriptContext.setAttribute(""String_Node_Str"",pageVariables);
  if (runnable != null) {
    registerDesign(runnable);
  }
  if (reportContext != null) {
    scriptContext.setAttribute(""String_Node_Str"",reportContext);
  }
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(pageNumber));
  scriptContext.setAttribute(""String_Node_Str"",Long.valueOf(totalPage));
  if (task != null) {
    IStatusHandler handler=task.getStatusHandler();
    if (handler != null) {
      handler.initialize();
    }
    if (handler == null) {
      handler=engine.getConfig().getStatusHandler();
    }
    if (handler != null) {
      scriptContext.setAttribute(""String_Node_Str"",handler);
    }
  }
  if (transientBeans != null) {
    Iterator entries=transientBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      scriptContext.setAttribute((String)entry.getKey(),entry.getValue());
    }
  }
  if (persistentBeans != null) {
    Iterator entries=persistentBeans.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      registerInRoot((String)entry.getKey(),entry.getValue());
    }
  }
  scriptContext.setApplicationClassLoader(getApplicationClassLoader());
}",0.9785800240673886
66421,"public void closeReportletQueries() throws EngineException {
  for (  Query query : queries) {
    if (query.rsets != null) {
      for (      IBaseResultSet rset : query.rsets) {
        rset.close();
      }
    }
  }
  queries.clear();
}","public void closeReportletQueries() throws EngineException {
  for (  Query query : queries) {
    if (query.rsets != null) {
      for (      IBaseResultSet rset : query.rsets) {
        if (rset != null)         rset.close();
      }
    }
  }
  queries.clear();
}",0.9486166007905138
66422,"protected void doExecute() throws BirtException {
  IReportItemExecutor executor=bodyExecutor;
  IContent content=null;
  while (executor.hasNextChild()) {
    executor=executor.getNextChild();
    parentExecutors.add(executor);
    content=executor.execute();
    DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
{
      if (docExt != null) {
        if (docExt.getIndex() == offset) {
          if (content instanceof TableGroupContent || content instanceof RowContent || content instanceof CellContent|| content instanceof AbstractBandContent) {
            do {
              content=(IContent)content.getParent();
              WrappedExecutor parentExecutor=new WrappedExecutor(executor.getParent(),content,executor);
              executor=parentExecutor;
            }
 while (!(content instanceof TableContent));
          }
          bodyContent=content;
          childExecutor=executor;
          break;
        }
      }
    }
  }
  IStyle cs=bodyContent.getComputedStyle();
  IStyle is=bodyContent.getInlineStyle();
  CSSEngine engine=bodyContent.getCSSEngine();
  IStyle mergedStyle=(is != null ? is : new StyleDeclaration(engine));
  for (int i=0; i < StyleConstants.NUMBER_OF_STYLE; i++) {
    if (isNullValue(mergedStyle.getProperty(i)) && engine.isInheritedProperty(i)) {
      mergedStyle.setProperty(i,cs.getProperty(i));
    }
  }
  bodyContent.setInlineStyle(mergedStyle);
}","protected void doExecute() throws BirtException {
  IReportItemExecutor executor=bodyExecutor;
  IContent content=null;
  executor.execute();
  while (executor.hasNextChild()) {
    executor=executor.getNextChild();
    parentExecutors.add(executor);
    content=executor.execute();
    DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
{
      if (docExt != null) {
        if (docExt.getIndex() == offset) {
          if (content instanceof TableGroupContent || content instanceof RowContent || content instanceof CellContent|| content instanceof AbstractBandContent) {
            do {
              content=(IContent)content.getParent();
              WrappedExecutor parentExecutor=new WrappedExecutor(executor.getParent(),content,executor);
              executor=parentExecutor;
            }
 while (!(content instanceof TableContent));
          }
          bodyContent=content;
          childExecutor=executor;
          break;
        }
      }
    }
  }
  IStyle cs=bodyContent.getComputedStyle();
  IStyle is=bodyContent.getInlineStyle();
  CSSEngine engine=bodyContent.getCSSEngine();
  IStyle mergedStyle=(is != null ? is : new StyleDeclaration(engine));
  for (int i=0; i < StyleConstants.NUMBER_OF_STYLE; i++) {
    if (isNullValue(mergedStyle.getProperty(i)) && engine.isInheritedProperty(i)) {
      mergedStyle.setProperty(i,cs.getProperty(i));
    }
  }
  bodyContent.setInlineStyle(mergedStyle);
}",0.9924346629986244
66423,"public Object doClone(CopyPolicy policy) throws CloneNotSupportedException {
  TableItem clonedTable=(TableItem)super.doClone(policy);
  clonedTable.refreshRenderModel(table.getTable().getModule());
  return clonedTable;
}","public Object doClone(CopyPolicy policy) throws CloneNotSupportedException {
  TableItem clonedTable=(TableItem)super.doClone(policy);
  clonedTable.refreshRenderModel(table.getTable().getModule());
  clonedTable.cachedColumn=null;
  return clonedTable;
}",0.9308176100628932
66424,"public IEditorInput createEditorInput(Object file){
  if (file instanceof File) {
    File handle=(File)file;
    String fileName=handle.getAbsolutePath();
    IWorkspace space=ResourcesPlugin.getWorkspace();
    IWorkspaceRoot root=space.getRoot();
    try {
      IFile[] resources=root.findFilesForLocationURI(new URL(""String_Node_Str"" + fileName).toURI());
      if (resources != null && resources.length > 0) {
        IEditorInput input=new FileEditorInput(resources[0]);
        return input;
      }
 else {
        IFileStore fileStore=EFS.getLocalFileSystem().getStore(new Path(fileName));
        IFileInfo fetchInfo=fileStore.fetchInfo();
        if (!fetchInfo.isDirectory() && fetchInfo.exists()) {
          return new FileStoreEditorInput(fileStore);
        }
      }
    }
 catch (    Exception e) {
      return null;
    }
  }
  return null;
}","public IEditorInput createEditorInput(Object file){
  if (file instanceof File) {
    File handle=(File)file;
    String fileName=handle.getAbsolutePath();
    IWorkspace space=ResourcesPlugin.getWorkspace();
    IWorkspaceRoot root=space.getRoot();
    try {
      IFile[] resources=root.findFilesForLocationURI(new File(fileName).toURI());
      if (resources != null && resources.length > 0) {
        IEditorInput input=new FileEditorInput(resources[0]);
        return input;
      }
 else {
        IFileStore fileStore=EFS.getLocalFileSystem().getStore(new Path(fileName));
        IFileInfo fetchInfo=fileStore.fetchInfo();
        if (!fetchInfo.isDirectory() && fetchInfo.exists()) {
          return new FileStoreEditorInput(fileStore);
        }
      }
    }
 catch (    Exception e) {
      return null;
    }
  }
  return null;
}",0.9830111306385472
66425,"/** 
 * populate output columns
 * @throws BirtException
 */
protected void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultPropertyValues(viewDatas);
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas,true);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultPropertyValues(viewDatas);
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas,true);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
protected void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateDefaultPropertyValues(viewDatas);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      updateDefaultAnalysisEnablement(viewDatas);
      if (isNewlyCreated) {
        updateDefaultPropertyValues(viewDatas);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.9573221757322176
66426,"protected void updateDefaultPropertyValues(DataSetViewData[] viewDatas){
  updateDefaultAnalysisEnablement(viewDatas);
}","protected void updateDefaultPropertyValues(DataSetViewData[] viewDatas){
  updateAnalysisTypes(viewDatas,true);
}",0.8927038626609443
66427,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_SIMPLEX,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_SIMPLEX,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fitToPaper=new ConfigurableOption(PostscriptRenderOption.OPTION_FIT_TO_PAPER);
  fitToPaper.setDisplayName(getMessage(""String_Node_Str""));
  fitToPaper.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fitToPaper.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fitToPaper.setDefaultValue(Boolean.FALSE);
  fitToPaper.setToolTip(null);
  fitToPaper.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection,fitToPaper};
}",0.968086642599278
66428,"public void addData(int col,SheetData data){
  if (col < getColumnCount()) {
    int rowIndex=data.getRowIndex();
    columns.get(col).add(data);
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    BookmarkDef bookmark=data.getBookmark();
    if (bookmark == null) {
      return;
    }
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowIndex);
  }
}","public void addData(int col,SheetData data){
  if (col < getColumnCount()) {
    int rowIndex=data.getRowIndex();
    columns.get(col).add(data);
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    BookmarkDef bookmark=data.getBookmark();
    if (bookmark != null) {
      bookmark.setStartColumn(data.getStartX());
      bookmark.setStartRow(rowIndex);
    }
  }
}",0.7957839262187089
66429,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_SIMPLEX,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection};
}",0.9710433583575916
66430,"public void setDuplex(String duplex){
  options.put(OPTION_DUPLEX,duplex);
}","public void setDuplex(int duplex){
  options.put(OPTION_DUPLEX,duplex);
}",0.9664429530201344
66431,"public String getDuplex(){
  return getStringOption(OPTION_DUPLEX);
}","public int getDuplex(){
  return getIntOption(OPTION_DUPLEX,DUPLEX_SIMPLEX);
}",0.8163265306122449
66432,"private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=executor.getSession().getQueryResultIDUtil().nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
        FileSecurity.fileMakeDirs(tmpDir);
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=executor.getSession().getQueryResultIDUtil().nextID();
        CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
    initLoadedAggregationResultSets(rs,aggrDefns);
  }
  executor.setQueryResultsId(id);
  return rs;
}","private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs=null;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    if (saveToRD || executor.getCubeQueryDefinition().cacheQueryResults())     id=executor.getSession().getQueryResultIDUtil().nextID();
    rs=executeQuery(view,aggrDefns,saveToRD,id);
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
      initLoadedAggregationResultSets(rs,aggrDefns);
    }
 else {
      if (executor.getContext().getDocReader() != null) {
        rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion(),cubeQueryExecutorHelper.getMemoryCacheSize());
        initLoadedAggregationResultSets(rs,aggrDefns);
      }
 else {
        rs=executeQuery(view,aggrDefns,saveToRD,id);
      }
    }
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.3177464788732394
66433,"protected void handleDrop(){
  updateTargetRequest();
  updateTargetEditPart();
  if (DNDService.getInstance().performDrop(TemplateTransfer.getInstance().getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getDropLocation()))) {
    return;
  }
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) {
      String extensionName=template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length());
      for (int i=0; i < entries.length; i++) {
        if (entries[i].getItemName().equals(extensionName)) {
          try {
            CommandUtils.setVariable(""String_Node_Str"",getTargetEditPart());
            CommandUtils.setVariable(""String_Node_Str"",getTargetRequest());
            getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,entries[i].executeCreate());
            selectAddedObject();
            return;
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
 else     if (objectType instanceof DimensionHandle) {
      preHandle=new DimensionHandleToolExtends();
    }
 else     if (objectType instanceof MeasureHandle) {
      preHandle=new MeasureHandleToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    stack.startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    if (isEmbeddImage) {
      Object dragObj=getSingleTransferData(template);
      if (dragObj instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)dragObj).getElementHandle().getRoot() instanceof LibraryHandle) {
          ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
          LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
          try {
            if (moduleHandle.getFileName() != library.getFileName() && UIUtil.includeLibrary(moduleHandle,library)) {
              EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
              image.setType(((EmbeddedImageHandle)dragObj).getType());
              DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        stack.rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (!isTheme) {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        stack.rollback();
        return;
      }
      Request request=new Request();
      if (getCreateRequest().getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY) != null) {
        request.getExtendedData().put(DesignerConstants.NEWOBJECT_FROM_LIBRARY,getCreateRequest().getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY));
      }
      if (isScalarparameter || isResultSetColumn) {
        request.setType(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        if (model instanceof GroupHandle) {
          GroupHandle handle=(GroupHandle)model;
          getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,((CellHandle)((RowHandle)handle.getHeader().get(0)).getCells().get(0)).getContent().get(0));
        }
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        request.setType(ReportRequest.SELECTION);
        selectAddedObject(request);
      }
 else {
        request.setType(ReportRequest.CREATE_ELEMENT);
        selectAddedObject(request);
      }
    }
    stack.commit();
  }
}","protected void handleDrop(){
  updateTargetRequest();
  updateTargetEditPart();
  if (DNDService.getInstance().performDrop(TemplateTransfer.getInstance().getTemplate(),getTargetEditPart(),DND.DROP_DEFAULT,new DNDLocation(getDropLocation()))) {
    return;
  }
  boolean isScalarparameter=false;
  boolean isResultSetColumn=false;
  boolean isEmbeddImage=false;
  final Object template=TemplateTransfer.getInstance().getTemplate();
  Assert.isNotNull(template);
  Assert.isTrue(handleValidateDrag(template));
  AbstractToolHandleExtends preHandle=null;
  String transName=null;
  if (template instanceof String) {
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (template.toString().startsWith(IReportElementConstants.REPORT_ELEMENT_EXTENDED)) {
      String extensionName=template.toString().substring(IReportElementConstants.REPORT_ELEMENT_EXTENDED.length());
      for (int i=0; i < entries.length; i++) {
        if (entries[i].getItemName().equals(extensionName)) {
          try {
            CommandUtils.setVariable(""String_Node_Str"",getTargetEditPart());
            CommandUtils.setVariable(""String_Node_Str"",getTargetRequest());
            getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,entries[i].executeCreate());
            selectAddedObject();
            return;
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    transName=TRANS_LABEL_CREATE_ELEMENT;
    preHandle=BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(template);
  }
 else   if (handleValidateInsert(template)) {
    transName=InsertInLayoutAction.DISPLAY_TEXT;
    Object objectType=getFactory(template).getObjectType();
    if (objectType instanceof DataSetHandle) {
      preHandle=new DataSetToolExtends();
    }
 else     if (objectType instanceof DataSetItemModel) {
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ResultSetColumnHandle) {
      isResultSetColumn=true;
      preHandle=new DataSetColumnToolExtends();
    }
 else     if (objectType instanceof ScalarParameterHandle) {
      isScalarparameter=true;
      preHandle=new ParameterToolExtends();
    }
 else     if (objectType instanceof DimensionHandle) {
      preHandle=new DimensionHandleToolExtends();
    }
 else     if (objectType instanceof MeasureHandle) {
      preHandle=new MeasureHandleToolExtends();
    }
  }
 else   if (handleValidateLibrary(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
 else     preHandle=new LibraryElementsToolHandleExtends((DesignElementHandle)dragObj);
  }
 else   if (handleValidateOutline(template)) {
    Object dragObj=getSingleTransferData(template);
    if (dragObj instanceof EmbeddedImageHandle) {
      isEmbeddImage=true;
      preHandle=new ImageToolExtends();
    }
  }
  if (preHandle != null) {
    CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
    if (stack == null && getTargetEditPart() != null) {
      Object obj=DNDUtil.unwrapToModel(getTargetEditPart().getModel());
      ModuleHandle moduleHandle=null;
      if (obj instanceof DesignElementHandle) {
        moduleHandle=((DesignElementHandle)obj).getModuleHandle();
      }
 else       if (obj instanceof SlotHandle) {
        moduleHandle=((SlotHandle)obj).getElementHandle().getModuleHandle();
      }
      if (moduleHandle != null) {
        SessionHandleAdapter.getInstance().setReportDesignHandle(moduleHandle);
        stack=moduleHandle.getCommandStack();
      }
    }
    if (stack == null) {
      return;
    }
    stack.startTrans(transName);
    preHandle.setRequest(this.getCreateRequest());
    preHandle.setTargetEditPart(getTargetEditPart());
    if (isEmbeddImage) {
      Object dragObj=getSingleTransferData(template);
      if (dragObj instanceof EmbeddedImageHandle) {
        if (((EmbeddedImageHandle)dragObj).getElementHandle().getRoot() instanceof LibraryHandle) {
          ModuleHandle moduleHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
          LibraryHandle library=(LibraryHandle)((EmbeddedImageHandle)dragObj).getElementHandle().getRoot();
          try {
            if (moduleHandle.getFileName() != library.getFileName() && UIUtil.includeLibrary(moduleHandle,library)) {
              EmbeddedImage image=StructureFactory.newEmbeddedImageFrom((EmbeddedImageHandle)dragObj,moduleHandle);
              image.setType(((EmbeddedImageHandle)dragObj).getType());
              DNDUtil.addEmbeddedImageHandle(getTargetEditPart().getModel(),image);
            }
          }
 catch (          Exception e) {
            ExceptionHandler.handle(e);
          }
        }
      }
    }
    Command command=this.getCommand();
    if (command != null && command.canExecute()) {
      if (!(preHandle.preHandleMouseUp())) {
        stack.rollback();
        return;
      }
    }
    boolean isTheme=checkTheme(preHandle,getSingleTransferData(template));
    if (!isTheme) {
      super.handleDrop();
      if (!preHandle.postHandleCreation()) {
        stack.rollback();
        return;
      }
      Request request=new Request();
      if (getCreateRequest().getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY) != null) {
        request.getExtendedData().put(DesignerConstants.NEWOBJECT_FROM_LIBRARY,getCreateRequest().getExtendedData().get(DesignerConstants.NEWOBJECT_FROM_LIBRARY));
      }
      if (isScalarparameter || isResultSetColumn) {
        request.setType(ReportRequest.CREATE_SCALARPARAMETER_OR_RESULTSETCOLUMN);
        Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        if (model instanceof GroupHandle) {
          GroupHandle handle=(GroupHandle)model;
          getCreateRequest().getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,((CellHandle)((RowHandle)handle.getHeader().get(0)).getCells().get(0)).getContent().get(0));
        }
        selectAddedObject(request);
      }
 else       if (isEmbeddImage) {
        Object dragObj=getSingleTransferData(template);
        final Object model=getCreateRequest().getExtendedData().get(DesignerConstants.KEY_NEWOBJECT);
        try {
          ((ImageHandle)model).setImageName(((EmbeddedImageHandle)dragObj).getName());
        }
 catch (        SemanticException e) {
          ExceptionHandler.handle(e);
        }
        request.setType(ReportRequest.SELECTION);
        selectAddedObject(request);
      }
 else {
        request.setType(ReportRequest.CREATE_ELEMENT);
        selectAddedObject(request);
      }
    }
    stack.commit();
  }
}",0.9504504504504504
66434,"public Control createContents(Composite parent){
  initColumnNames();
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[0]);
  column.setWidth(150);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[1]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[2]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[3]);
  column.setWidth(100);
  initializeFilters();
  viewer.getViewer().setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      ArrayList filterList=new ArrayList(10);
      Iterator iter=filters.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          filterList.add(iter.next());
        }
      }
      return filterList.toArray();
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.getViewer().setLabelProvider(new FilterTableProvider());
  viewer.getViewer().setInput(filters);
  addListeners();
  setToolTips();
  return viewer.getControl();
}","public Control createContents(Composite parent){
  initColumnNames();
  viewer=new PropertyHandleTableViewer(parent,true,true,true);
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[0]);
  column.setWidth(150);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[1]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[2]);
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(cellLabels[3]);
  column.setWidth(100);
  initializeFilters();
  viewer.getViewer().setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      ArrayList filterList=new ArrayList(10);
      Iterator iter=filters.iterator();
      if (iter != null) {
        while (iter.hasNext()) {
          filterList.add(iter.next());
        }
      }
      return filterList.toArray();
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.getViewer().setLabelProvider(new FilterTableProvider());
  viewer.getViewer().setInput(filters);
  addListeners();
  setToolTips();
  ((DataSetHandle)getContainer().getModel()).addListener(this);
  return viewer.getControl();
}",0.9665211062590976
66435,"private static boolean isReferenceToLevelOrMeasure(IBaseExpression expression,List<IBinding> bindings) throws DataException {
  String measure=OlapExpressionCompiler.getReferencedScriptObject(expression,ScriptConstants.MEASURE_SCRIPTABLE);
  if (measure != null)   return true;
  String dimension=OlapExpressionCompiler.getReferencedScriptObject(expression,ScriptConstants.DIMENSION_SCRIPTABLE);
  if (dimension != null)   return true;
  List bindingNames=ExpressionCompilerUtil.extractColumnExpression(expression,ScriptConstants.DATA_BINDING_SCRIPTABLE);
  for (int i=0; i < bindingNames.size(); i++) {
    IBinding binding=getBinding((String)bindingNames.get(i),bindings);
    if (binding != null && isReferenceToLevelOrMeasure(binding.getExpression(),bindings))     return true;
  }
  return false;
}","private static boolean isReferenceToLevelOrMeasure(IBaseExpression expression,List<IBinding> bindings) throws DataException {
  String measure=OlapExpressionCompiler.getReferencedScriptObject(expression,ScriptConstants.MEASURE_SCRIPTABLE);
  if (measure != null)   return true;
  String dimension=OlapExpressionCompiler.getReferencedScriptObject(expression,ScriptConstants.DIMENSION_SCRIPTABLE);
  if (dimension != null)   return true;
  List bindingNames=ExpressionCompilerUtil.extractColumnExpression(expression,ScriptConstants.DATA_BINDING_SCRIPTABLE);
  for (int i=0; i < bindingNames.size(); i++) {
    IBinding binding=getBinding((String)bindingNames.get(i),bindings);
    if (binding == null)     return true;
    if (isReferenceToLevelOrMeasure(binding.getExpression(),bindings))     return true;
  }
  return false;
}",0.9736034376918354
66436,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_SIMPLEX,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setChoices(new OptionValue[]{new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE,getMessage(""String_Node_Str"")),new OptionValue(IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE,getMessage(""String_Node_Str""))});
  duplex.setDefaultValue(IPostscriptRenderOption.DUPLEX_SIMPLEX);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection};
}",0.9627683531001352
66437,"public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,String resolution,boolean color,int scale,boolean autoPaperSizeSelection) throws IOException {
  this.scale=scale;
  this.autoPaperSizeSelection=autoPaperSizeSelection;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,String paperTray,Object duplex,int copies,boolean collate,String resolution,boolean color,int scale,boolean autoPaperSizeSelection) throws IOException {
  this.scale=scale;
  this.autoPaperSizeSelection=autoPaperSizeSelection;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9932960893854748
66438,"private void setDuplex(String duplex){
  if (duplex != null && !""String_Node_Str"".equalsIgnoreCase(duplex)) {
    String duplexValue=duplex;
    String tumbleValue=""String_Node_Str"";
    if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
      tumbleValue=""String_Node_Str"";
    }
    out.println(""String_Node_Str"" + duplexValue);
    out.println(""String_Node_Str"" + tumbleValue + ""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}","private void setDuplex(Object duplex){
  String duplexValue=null;
  boolean tumble=false;
  if (duplex instanceof String) {
    String value=(String)duplex;
    if (""String_Node_Str"".equalsIgnoreCase(value)) {
      return;
    }
    if (""String_Node_Str"".equalsIgnoreCase(value)) {
      duplexValue=""String_Node_Str"";
      tumble=false;
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(value)) {
      duplexValue=""String_Node_Str"";
      tumble=true;
    }
  }
 else   if (duplex instanceof Integer) {
    int value=(Integer)duplex;
    if (value == IPostscriptRenderOption.DUPLEX_SIMPLEX) {
      return;
    }
    if (value == IPostscriptRenderOption.DUPLEX_FLIP_ON_LONG_EDGE) {
      duplexValue=""String_Node_Str"";
      tumble=false;
    }
 else     if (value == IPostscriptRenderOption.DUPLEX_FLIP_ON_SHORT_EDGE) {
      duplexValue=""String_Node_Str"";
      tumble=true;
    }
  }
  out.println(""String_Node_Str"" + duplexValue);
  out.println(""String_Node_Str"" + tumble + ""String_Node_Str"");
  if (tumble) {
    out.println(""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
}",0.3633114949374628
66439,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  boolean autoPaperSizeSelection=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION,true);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,color,scale,autoPaperSizeSelection);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  Object duplex=renderOption.getOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  boolean autoPaperSizeSelection=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION,true);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,color,scale,autoPaperSizeSelection);
}",0.9927302100161552
66440,void setDuplex(String duplex);,void setDuplex(int duplex);,0.912280701754386
66441,String getDuplex();,int getDuplex();,0.8571428571428571
66442,"private void addContent(IContent content){
  if (!bufferAllContents) {
    ReportItemDesign design=getGenerateDesign(content);
    if (design != null) {
      if (design.getOnPageBreak() != null || design.getJavaClass() != null) {
        if (!contents.contains(content)) {
          contents.add(content);
        }
      }
    }
  }
 else {
    if (!contents.contains(content)) {
      contents.add(content);
    }
  }
}","private void addContent(IContent content){
  if (!bufferAllContents) {
    ReportItemDesign design=getGenerateDesign(content);
    if (design != null) {
      if (ScriptExecutor.needOnPageBreak(design,executionContext)) {
        if (!contents.contains(content)) {
          contents.add(content);
        }
      }
    }
  }
 else {
    if (!contents.contains(content)) {
      contents.add(content);
    }
  }
}",0.4934131736526946
66443,"public static void handleOnPageBreak(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnPageBreak(autoTextDesign)) {
      return;
    }
    IAutoTextInstance autoText=new AutoTextInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(autoText,autoTextDesign.getOnPageBreak(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextDesign,context);
    if (eh != null)     eh.onPageBreak(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextDesign.getHandle());
  }
}","public static void handleOnPageBreak(IAutoTextContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign autoTextDesign=(ReportItemDesign)generateBy;
  try {
    if (!needOnPageBreak(autoTextDesign,context)) {
      return;
    }
    IAutoTextInstance autoText=new AutoTextInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(autoText,autoTextDesign.getOnPageBreak(),context).didRun())     return;
    IAutoTextEventHandler eh=getEventHandler(autoTextDesign,context);
    if (eh != null)     eh.onPageBreak(autoText,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,autoTextDesign.getHandle());
  }
}",0.9946018893387314
66444,"public static void handleOnPageBreak(ICellContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  if (!needOnPageBreak(cellDesign)) {
    return;
  }
  try {
    ICellInstance cell=new CellInstance(content,context,RunningState.RENDER,false);
    if (handleScript(cell,cellDesign.getOnPageBreak(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onPageBreak(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}","public static void handleOnPageBreak(ICellContent content,ExecutionContext context){
  Object generateBy=content.getGenerateBy();
  if (generateBy == null) {
    return;
  }
  ReportItemDesign cellDesign=(ReportItemDesign)generateBy;
  if (!needOnPageBreak(cellDesign,context)) {
    return;
  }
  try {
    ICellInstance cell=new CellInstance(content,context,RunningState.RENDER,false);
    if (handleScript(cell,cellDesign.getOnPageBreak(),context).didRun())     return;
    ICellEventHandler eh=getEventHandler(cellDesign,context);
    if (eh != null)     eh.onPageBreak(cell,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,cellDesign.getHandle());
  }
}",0.9942028985507246
66445,"public static void handleOnPageBreak(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(dataItemDesign)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(dataItem,dataItemDesign.getOnPageBreak(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onPageBreak(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}","public static void handleOnPageBreak(IDataContent content,ExecutionContext context){
  ReportItemDesign dataItemDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(dataItemDesign,context)) {
    return;
  }
  try {
    IDataItemInstance dataItem=new DataItemInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(dataItem,dataItemDesign.getOnPageBreak(),context).didRun())     return;
    IDataItemEventHandler eh=getEventHandler(dataItemDesign,context);
    if (eh != null)     eh.onPageBreak(dataItem,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,dataItemDesign.getHandle());
  }
}",0.9938931297709924
66446,"public static void handleOnPageBreak(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(gridDesign)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(grid,gridDesign.getOnPageBreak(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onPageBreak(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}","public static void handleOnPageBreak(ITableContent content,ExecutionContext context){
  ReportItemDesign gridDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(gridDesign,context)) {
    return;
  }
  try {
    IGridInstance grid=new GridInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(grid,gridDesign.getOnPageBreak(),context).didRun())     return;
    IGridEventHandler eh=getEventHandler(gridDesign,context);
    if (eh != null)     eh.onPageBreak(grid,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,gridDesign.getHandle());
  }
}",0.9934640522875816
66447,"public static void handleOnPageBreak(IImageContent content,ExecutionContext context){
  ReportItemDesign imageDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(imageDesign)) {
    return;
  }
  try {
    IImageInstance image=new ImageInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(image,imageDesign.getOnPageBreak(),context).didRun())     return;
    IImageEventHandler eh=getEventHandler(imageDesign,context);
    if (eh != null)     eh.onPageBreak(image,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,imageDesign.getHandle());
  }
}","public static void handleOnPageBreak(IImageContent content,ExecutionContext context){
  ReportItemDesign imageDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(imageDesign,context)) {
    return;
  }
  try {
    IImageInstance image=new ImageInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(image,imageDesign.getOnPageBreak(),context).didRun())     return;
    IImageEventHandler eh=getEventHandler(imageDesign,context);
    if (eh != null)     eh.onPageBreak(image,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,imageDesign.getHandle());
  }
}",0.9935794542536116
66448,"public static void handleOnPageBreak(ILabelContent content,ExecutionContext context){
  ReportItemDesign labelDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(labelDesign)) {
    return;
  }
  try {
    ILabelInstance label=new LabelInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(label,labelDesign.getOnPageBreak(),context).didRun())     return;
    ILabelEventHandler eh=getEventHandler(labelDesign,context);
    if (eh != null)     eh.onPageBreak(label,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,labelDesign.getHandle());
  }
}","public static void handleOnPageBreak(ILabelContent content,ExecutionContext context){
  ReportItemDesign labelDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(labelDesign,context)) {
    return;
  }
  try {
    ILabelInstance label=new LabelInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(label,labelDesign.getOnPageBreak(),context).didRun())     return;
    ILabelEventHandler eh=getEventHandler(labelDesign,context);
    if (eh != null)     eh.onPageBreak(label,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,labelDesign.getHandle());
  }
}",0.9935794542536116
66449,"public static void handleOnPageBreak(IListGroupContent content,ExecutionContext context){
  ReportItemDesign listGroupDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(listGroupDesign)) {
    return;
  }
  try {
    ReportElementInstance list=new ReportElementInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(list,listGroupDesign.getOnPageBreak(),context).didRun())     return;
    IListGroupEventHandler eh=getEventHandler(listGroupDesign,context);
    if (eh != null)     eh.onPageBreak(list,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,listGroupDesign.getHandle());
  }
}","public static void handleOnPageBreak(IListGroupContent content,ExecutionContext context){
  ReportItemDesign listGroupDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(listGroupDesign,context)) {
    return;
  }
  try {
    ReportElementInstance list=new ReportElementInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(list,listGroupDesign.getOnPageBreak(),context).didRun())     return;
    IListGroupEventHandler eh=getEventHandler(listGroupDesign,context);
    if (eh != null)     eh.onPageBreak(list,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,listGroupDesign.getHandle());
  }
}",0.9939668174962292
66450,"public static void handleOnPageBreak(IListContent content,ExecutionContext context){
  ReportItemDesign listDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(listDesign)) {
    return;
  }
  try {
    IListInstance list=new ListInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(list,listDesign.getOnPageBreak(),context).didRun())     return;
    IListEventHandler eh=getEventHandler(listDesign,context);
    if (eh != null)     eh.onPageBreak(list,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,listDesign.getHandle());
  }
}","public static void handleOnPageBreak(IListContent content,ExecutionContext context){
  ReportItemDesign listDesign=(ReportItemDesign)content.getGenerateBy();
  if (!needOnPageBreak(listDesign,context)) {
    return;
  }
  try {
    IListInstance list=new ListInstance(content,context,RunningState.PAGEBREAK);
    if (handleScript(list,listDesign.getOnPageBreak(),context).didRun())     return;
    IListEventHandler eh=getEventHandler(listDesign,context);
    if (eh != null)     eh.onPageBreak(list,context.getReportContext());
  }
 catch (  Exception e) {
    addException(context,e,listDesign.getHandle());
  }
}",0.9934533551554828
66451,"private SimpleLevelFilter createSimpleLevelFilter(IFilterDefinition filter,List bindings){
  if (!(filter instanceof CubeFilterDefinition))   return null;
  IBaseExpression expr=((CubeFilterDefinition)filter).getExpression();
  if (!(expr instanceof IConditionalExpression))   return null;
  IConditionalExpression condExpr=(IConditionalExpression)((CubeFilterDefinition)filter).getExpression();
  Set refDimLevel;
  try {
    refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(condExpr.getExpression(),bindings);
    if (refDimLevel.size() != 1)     return null;
    DimLevel dimlevel=(DimLevel)refDimLevel.iterator().next();
    if (dimlevel.getAttrName() != null)     return null;
    if (!(condExpr.getOperand1() instanceof IExpressionCollection)) {
      Object Op1=ScriptEvalUtil.evalExpr((IScriptExpression)condExpr.getOperand1(),session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
      if (Op1 == null)       return null;
      ISelection[] selction=new ISelection[1];
      if (condExpr.getOperator() == IConditionalExpression.OP_EQ || condExpr.getOperator() == IConditionalExpression.OP_IN) {
        selction[0]=SelectionFactory.createOneKeySelection(new Object[]{Op1});
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GT) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GE) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,true,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LT) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LE) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,true);
      }
 else       return null;
      return new SimpleLevelFilter(dimlevel,selction);
    }
 else     if (condExpr.getOperator() == IConditionalExpression.OP_IN) {
      IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
      Object[] exprs=combinedExpr.getExpressions().toArray();
      Object[] opValues=new Object[exprs.length];
      boolean existValue=false;
      for (int i=0; i < opValues.length; i++) {
        opValues[i]=ScriptEvalUtil.evalExpr((IBaseExpression)exprs[i],session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
        if (opValues[i] != null) {
          existValue=true;
        }
      }
      ISelection[] selction=new ISelection[1];
      Object[][] keyValues=null;
      if (opValues.length == 1 && opValues[0] instanceof Object[]) {
        Object[] mulValue=(Object[])opValues[0];
        keyValues=new Object[mulValue.length][1];
        for (int i=0; i < mulValue.length; i++) {
          keyValues[i][0]=mulValue[i];
        }
      }
 else {
        keyValues=new Object[opValues.length][1];
        for (int i=0; i < opValues.length; i++) {
          keyValues[i][0]=opValues[i];
        }
      }
      selction[0]=SelectionFactory.createMutiKeySelection(keyValues);
      return new SimpleLevelFilter(dimlevel,selction);
    }
    return null;
  }
 catch (  DataException e) {
    return null;
  }
}","private SimpleLevelFilter createSimpleLevelFilter(IFilterDefinition filter,List bindings){
  if (!(filter instanceof CubeFilterDefinition))   return null;
  IBaseExpression expr=((CubeFilterDefinition)filter).getExpression();
  if (!(expr instanceof IConditionalExpression))   return null;
  IConditionalExpression condExpr=(IConditionalExpression)((CubeFilterDefinition)filter).getExpression();
  if (isVariableOperandInDimensionFilter(condExpr))   return null;
  Set refDimLevel;
  try {
    refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(condExpr.getExpression(),bindings);
    if (refDimLevel.size() != 1)     return null;
    DimLevel dimlevel=(DimLevel)refDimLevel.iterator().next();
    if (dimlevel.getAttrName() != null)     return null;
    if (!(condExpr.getOperand1() instanceof IExpressionCollection)) {
      Object Op1=ScriptEvalUtil.evalExpr((IScriptExpression)condExpr.getOperand1(),session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
      if (Op1 == null)       return null;
      ISelection[] selction=new ISelection[1];
      if (condExpr.getOperator() == IConditionalExpression.OP_EQ || condExpr.getOperator() == IConditionalExpression.OP_IN) {
        selction[0]=SelectionFactory.createOneKeySelection(new Object[]{Op1});
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GT) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_GE) {
        selction[0]=SelectionFactory.createRangeSelection(new Object[]{Op1},null,true,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LT) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,false);
      }
 else       if (condExpr.getOperator() == IConditionalExpression.OP_LE) {
        selction[0]=SelectionFactory.createRangeSelection(null,new Object[]{Op1},false,true);
      }
 else       return null;
      return new SimpleLevelFilter(dimlevel,selction);
    }
 else     if (condExpr.getOperator() == IConditionalExpression.OP_IN) {
      IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
      Object[] exprs=combinedExpr.getExpressions().toArray();
      Object[] opValues=new Object[exprs.length];
      boolean existValue=false;
      for (int i=0; i < opValues.length; i++) {
        opValues[i]=ScriptEvalUtil.evalExpr((IBaseExpression)exprs[i],session.getEngineContext().getScriptContext().newContext(scope),ScriptExpression.defaultID,0);
        if (opValues[i] != null) {
          existValue=true;
        }
      }
      ISelection[] selction=new ISelection[1];
      Object[][] keyValues=null;
      if (opValues.length == 1 && opValues[0] instanceof Object[]) {
        Object[] mulValue=(Object[])opValues[0];
        keyValues=new Object[mulValue.length][1];
        for (int i=0; i < mulValue.length; i++) {
          keyValues[i][0]=mulValue[i];
        }
      }
 else {
        keyValues=new Object[opValues.length][1];
        for (int i=0; i < opValues.length; i++) {
          keyValues[i][0]=opValues[i];
        }
      }
      selction[0]=SelectionFactory.createMutiKeySelection(keyValues);
      return new SimpleLevelFilter(dimlevel,selction);
    }
    return null;
  }
 catch (  DataException e) {
    return null;
  }
}",0.9901687454145268
66452,"public static Set<String> getDerivedMeasureNames(List<IBinding> bindings) throws DataException {
  Set<String> directRef=new HashSet<String>();
  Set<String> all=new HashSet<String>();
  for (  IBinding binding : bindings) {
    all.add(binding.getBindingName());
    if (isDirectRerenrence(binding.getExpression(),bindings)) {
      directRef.add(binding.getBindingName());
    }
  }
  all.removeAll(directRef);
  return all;
}","public static Set<String> getDerivedMeasureNames(List<IBinding> bindings) throws DataException {
  Set<String> directRef=new HashSet<String>();
  Set<String> all=new HashSet<String>();
  for (  IBinding binding : bindings) {
    if (isReferenceToLevelOrMeasure(binding.getExpression(),bindings))     all.add(binding.getBindingName());
    if (isDirectRerenrence(binding.getExpression(),bindings)) {
      directRef.add(binding.getBindingName());
    }
  }
  all.removeAll(directRef);
  return all;
}",0.7982740021574973
66453,"private boolean isExistModelFile(){
  if (getModel() == null) {
    return true;
  }
  File file=new File(getModel().getFileName());
  if (file.exists() && file.isFile()) {
    return true;
  }
  return false;
}","public boolean isExistModelFile(){
  if (getModel() == null) {
    return true;
  }
  File file=new File(getModel().getFileName());
  if (file.exists() && file.isFile()) {
    return true;
  }
  return false;
}",0.973871733966746
66454,"/** 
 * is visit successful
 */
public boolean visit(IResourceDelta delta){
  if (delta == null || !delta.getResource().equals(getFile(getEditorInput())))   return true;
  if (delta.getKind() == IResourceDelta.REMOVED) {
    Display display=getSite().getShell().getDisplay();
    if ((IResourceDelta.MOVED_TO & delta.getFlags()) == 0) {
      display.asyncExec(new Runnable(){
        public void run(){
          if (!isDirty()) {
            closeEditor(false);
          }
 else {
            String title=DLG_SAVE_TITLE;
            String message=DLG_SAVE_CONFIRM_DELETE;
            String[] buttons={DLG_SAVE_BUTTON_SAVE,DLG_SAVE_BUTTON_CLOSE};
            MessageDialog dialog=new MessageDialog(getSite().getShell(),title,null,message,MessageDialog.QUESTION,buttons,0);
            if (dialog.open() == Dialog.OK) {
              doSaveAs();
            }
 else {
              closeEditor(false);
            }
          }
        }
      }
);
    }
 else {
      final IFile newFile=ResourcesPlugin.getWorkspace().getRoot().getFile(delta.getMovedToPath());
      display.asyncExec(new Runnable(){
        public void run(){
          FileEditorInput input=new FileEditorInput(newFile);
          setAllInput(input);
        }
      }
);
    }
  }
 else   if (delta.getKind() == IResourceDelta.CHANGED) {
  }
  return false;
}","/** 
 * is visit successful
 */
public boolean visit(IResourceDelta delta){
  if (delta == null || !delta.getResource().equals(getFile(getEditorInput())))   return true;
  if (delta.getKind() == IResourceDelta.REMOVED) {
    Display display=getSite().getShell().getDisplay();
    if ((IResourceDelta.MOVED_TO & delta.getFlags()) == 0) {
      display.asyncExec(new Runnable(){
        public void run(){
          if (!isDirty()) {
            closeEditor(false);
          }
 else {
            String title=DLG_SAVE_TITLE;
            String message=DLG_SAVE_CONFIRM_DELETE;
            String[] buttons={DLG_SAVE_BUTTON_SAVE,DLG_SAVE_BUTTON_CLOSE};
            MessageDialog dialog=new MessageDialog(getSite().getShell(),title,null,message,MessageDialog.QUESTION,buttons,0);
            if (dialog.open() == Dialog.OK) {
              doSaveAs();
              if (!isExistModelFile()) {
                closeEditor(false);
              }
            }
 else {
              closeEditor(false);
            }
          }
        }
      }
);
    }
 else {
      final IFile newFile=ResourcesPlugin.getWorkspace().getRoot().getFile(delta.getMovedToPath());
      display.asyncExec(new Runnable(){
        public void run(){
          FileEditorInput input=new FileEditorInput(newFile);
          setAllInput(input);
        }
      }
);
    }
  }
 else   if (delta.getKind() == IResourceDelta.CHANGED) {
  }
  return false;
}",0.966340933767644
66455,"/** 
 * valid only if createInstance is already called
 * @return
 */
public static TempDir getInstance(){
  return instance;
}","/** 
 * valid only if createInstance is already called
 * @return
 */
public static TempDir getInstance(){
  if (instance == null) {
    String tempDir=System.getProperty(""String_Node_Str"") + ""String_Node_Str"" + File.separator;
    File f=new File(tempDir);
    if (f.exists()) {
      deleteDirectory(f);
    }
    instance=new TempDir(tempDir);
  }
  return instance;
}",0.4457831325301205
66456,"private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValueText=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValueText.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValueText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValueText.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValueText.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValueText.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValueText,provider,(DataSetHandle)getContainer().getModel(),true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValueText,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}","private void createExpressionCell(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  defaultValueComposite=ControlProvider.getDefaultComposite(parent);
  defaultValueString=Utility.getNonNullString(structureHandle.getDefaultValue());
  defaultValueText=ControlProvider.createText(defaultValueComposite,defaultValueString);
  defaultValueText.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  defaultValueText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (defaultValueText.isEnabled()) {
        defaultValueString=defaultValueText.getText();
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(defaultValueText.getText());
      expressionBuilder.setExpressionProvier(null);
      if (expressionBuilder.open() == OK) {
        defaultValueText.setText(expressionBuilder.getResult().trim());
      }
    }
  }
;
  ExpressionProvider provider=new ExpressionProvider((DataSetHandle)getContainer().getModel());
  ExpressionButtonUtil.createExpressionButton(defaultValueComposite,defaultValueText,provider,(DataSetHandle)getContainer().getModel(),true,SWT.PUSH);
  ExpressionButtonUtil.initExpressionButtonControl(defaultValueText,structureHandle,DataSetParameter.DEFAULT_VALUE_MEMBER);
}",0.9805171803046404
66457,"MetaDataRetriever(OdaConnectionProvider odaConnectionProvider,DataSetDesign dataSetDesign){
  try {
    IConnection connection=odaConnectionProvider.openConnection();
    query=connection.newQuery(dataSetDesign.getOdaExtensionDataSetId());
    QuerySpecification querySpec=new QuerySpecificationHelper((String)null).createQuerySpecification();
    Properties properties=dataSetDesign.getPublicProperties();
    if (properties != null) {
      for (      Property prop : properties.getProperties()) {
        querySpec.setProperty(prop.getName(),prop.getValue());
      }
    }
    query.setSpecification(querySpec);
    query.prepare(dataSetDesign.getQueryText());
    try {
      paramMeta=query.getParameterMetaData();
    }
 catch (    OdaException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
    }
    if (!(query instanceof IAdvancedQuery)) {
      resultMeta=query.getMetaData();
    }
  }
 catch (  OdaException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage(),e);
  }
}","MetaDataRetriever(OdaConnectionProvider odaConnectionProvider,DataSetDesign dataSetDesign){
  try {
    IConnection connection=odaConnectionProvider.openConnection();
    query=connection.newQuery(dataSetDesign.getOdaExtensionDataSetId());
    QuerySpecification querySpec=new QuerySpecificationHelper((String)null).createQuerySpecification();
    Properties properties=dataSetDesign.getPublicProperties();
    if (properties != null) {
      for (      Property prop : properties.getProperties()) {
        querySpec.setProperty(prop.getName(),prop.getValue());
      }
    }
    try {
      query.setSpecification(querySpec);
    }
 catch (    UnsupportedOperationException ue) {
    }
    query.prepare(dataSetDesign.getQueryText());
    try {
      paramMeta=query.getParameterMetaData();
    }
 catch (    OdaException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
    }
    if (!(query instanceof IAdvancedQuery)) {
      resultMeta=query.getMetaData();
    }
  }
 catch (  OdaException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage(),e);
  }
}",0.965451055662188
66458,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption autoPaperSizeSelection=new ConfigurableOption(PostscriptRenderOption.OPTION_AUTO_PAPER_SIZE_SELECTION);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.BOOLEAN);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  paperTray.setDefaultValue(true);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi,autoPaperSizeSelection};
}",0.9620791108205295
66459,"static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(Integer.valueOf(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(new String(new char[]{getListChar(nestCount)}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}","protected static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(Integer.valueOf(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(new String(new char[]{getListChar(nestCount)}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}",0.9990377213240954
66460,"/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
static void processNodes(Element ele,Map cssStyles,IContent content,ActionContent action,int nestCount){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(TAG_VALUEOF)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action,nestCount);
      }
    }
 else     if (node.getNodeName().equals(TAG_IMAGE)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action,nestCount);
      }
    }
 else     if (node.getNodeName().equals(TAG_SCRIPT)) {
      continue;
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=createLabel(node.getNodeValue(),content);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,cssStyles,content,action,++level,nestCount);
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
protected static void processNodes(Element ele,Map cssStyles,IContent content,ActionContent action,int nestCount){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(TAG_VALUEOF)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action,nestCount);
      }
    }
 else     if (node.getNodeName().equals(TAG_IMAGE)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action,nestCount);
      }
    }
 else     if (node.getNodeName().equals(TAG_SCRIPT)) {
      continue;
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      if (isInExcelMode) {
        if (isFirst) {
          isFirst=false;
          builder.append(node.getNodeValue());
          ILabelContent label=createLabel(node.getNodeValue(),content);
          firstLabel=label;
          if (action != null) {
            label.setHyperlinkAction(action);
          }
        }
 else {
          if (firstLabel != null) {
            firstLabel.setText(builder.append(node.getNodeValue()).toString());
            if (action != null) {
              firstLabel.setHyperlinkAction(action);
            }
          }
        }
      }
 else {
        ILabelContent label=createLabel(node.getNodeValue(),content);
        if (action != null) {
          label.setHyperlinkAction(action);
        }
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,cssStyles,content,action,++level,nestCount);
    }
  }
}",0.8069510268562401
66461,"protected void endCell(ICellContent cell){
  currentCell=cell;
  for (int i=cell.getColumn(); i < cell.getColumn() + cell.getColSpan(); i++) {
    cells[i]+=cell.getRowSpan();
  }
  for (int i=0; i < cells.length; i++)   System.out.print(cells[i]);
  System.out.println();
}","protected void endCell(ICellContent cell){
  currentCell=cell;
  for (int i=cell.getColumn(); i < cell.getColumn() + cell.getColSpan(); i++) {
    cells[i]+=cell.getRowSpan();
  }
}",0.7956043956043956
66462,"public void endTable(ITableContent table){
  if (cachedStartTable != null) {
    cachedStartTable=null;
    return;
  }
  if (enableMetadata) {
    metadataEmitter.endTable(table);
  }
  writer.closeTag(HTMLTags.TAG_TABLE);
  if (enableMetadata) {
    metadataEmitter.endWrapTable(table);
  }
  boolean DIVWrap=((Boolean)tableDIVWrapedFlagStack.pop()).booleanValue();
  if (DIVWrap) {
    writer.closeTag(HTMLTags.TAG_DIV);
  }
  logger.log(Level.FINE,""String_Node_Str"");
}","protected void endTable(ITableContent tableContent){
  layoutStack.pop();
  columnCountStack.pop();
  if (!layoutStack.isEmpty()) {
    cells=layoutStack.peek();
  }
  if (!columnCountStack.isEmpty()) {
    columnCount=columnCountStack.peek();
  }
}",0.1745152354570637
66463,"public void startTable(ITableContent table){
  cachedStartTable=table;
}","protected void startTable(ITableContent tableContent){
  int columnCount=tableContent.getColumnCount();
  cells=new int[columnCount];
  this.columnCount=columnCount;
  layoutStack.push(cells);
  columnCountStack.push(columnCount);
}",0.3223684210526316
66464,"public void startRow(IRowContent row){
}","protected void startRow(){
}",0.6176470588235294
66465,"public void endRow(IRowContent row){
  if (enableMetadata) {
    metadataEmitter.endRow(row);
  }
  writer.closeTag(HTMLTags.TAG_TR);
}","protected void endRow(){
  currentCell=null;
  for (int i=0; i < columnCount; i++) {
    cells[i]--;
  }
}",0.3568464730290456
66466,"public void startCell(ICellContent cell){
  logger.log(Level.FINE,""String_Node_Str"");
  String tagName=null;
  boolean isHead=isCellInHead(cell);
  if (isHead) {
    tagName=HTMLTags.TAG_TH;
  }
 else {
    tagName=HTMLTags.TAG_TD;
  }
  writer.openTag(tagName);
  writer.attribute(""String_Node_Str"",cell.getScope());
  writer.attribute(""String_Node_Str"",cell.getBookmark());
  writer.attribute(""String_Node_Str"",cell.getHeaders());
  String styleClass=cell.getStyleClass();
  setStyleName(styleClass,cell);
  int colSpan=cell.getColSpan();
  if (colSpan > 1) {
    writer.attribute(HTMLTags.ATTR_COLSPAN,colSpan);
  }
  int rowSpan=cell.getRowSpan();
  if (rowSpan > 1) {
    writer.attribute(HTMLTags.ATTR_ROWSPAN,rowSpan);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildCellStyle(cell,styleBuffer,isHead);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleCellAlign(cell);
  htmlEmitter.handleCellVAlign(cell);
  boolean bookmarkOutput=false;
  if (metadataFilter != null) {
    bookmarkOutput=metadataEmitter.outputMetadataProperty(metadataFilter.needMetaData(HTMLEmitterUtil.getElementHandle(cell)),cell,tagName);
  }
  if (!startedGroups.isEmpty()) {
    if (!bookmarkOutput) {
      IGroupContent group=(IGroupContent)startedGroups.firstElement();
      String bookmark=group.getBookmark();
      if (bookmark == null) {
        bookmark=idGenerator.generateUniqueID();
        group.setBookmark(bookmark);
      }
      outputBookmark(group,null);
      startedGroups.remove(group);
    }
    Iterator iter=startedGroups.iterator();
    while (iter.hasNext()) {
      IGroupContent group=(IGroupContent)iter.next();
      outputBookmark(group);
    }
    startedGroups.clear();
  }
  if (cell.hasDiagonalLine()) {
    DimensionType cellHeight=getCellHeight(cell);
    if (cellHeight != null && !""String_Node_Str"".equals(cellHeight.getUnits())) {
      writer.openTag(HTMLTags.TAG_DIV);
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
      outputDiagonalImage(cell,cellHeight);
    }
  }
  if (enableMetadata) {
    metadataEmitter.startCell(cell);
  }
}","protected void startCell(ICellContent cell){
  if (needAddEmptyCell(cell)) {
    addEmptyCell(cell);
  }
}",0.0758928571428571
66467,"public void endCell(ICellContent cell){
  logger.log(Level.FINE,""String_Node_Str"");
  if (enableMetadata) {
    metadataEmitter.endCell(cell);
  }
  if (cell.hasDiagonalLine()) {
    DimensionType cellHeight=getCellHeight(cell);
    if (cellHeight != null && !""String_Node_Str"".equals(cellHeight.getUnits())) {
      writer.closeTag(HTMLTags.TAG_DIV);
    }
  }
  if (isCellInHead(cell)) {
    writer.closeTag(HTMLTags.TAG_TH);
  }
 else {
    writer.closeTag(HTMLTags.TAG_TD);
  }
}","protected void endCell(ICellContent cell){
  currentCell=cell;
  for (int i=cell.getColumn(); i < cell.getColumn() + cell.getColSpan(); i++) {
    cells[i]+=cell.getRowSpan();
  }
  for (int i=0; i < cells.length; i++)   System.out.print(cells[i]);
  System.out.println();
}",0.1400264200792602
66468,"public SimpleResultSet(CandidateQuery dataSourceQuery,final ICustomDataSet customDataSet,IResultClass resultMetadata,IEventHandler handler,GroupSpec[] groupSpecs,DataEngineSession session,boolean forceLookingForward) throws DataException {
  SmartCacheRequest scRequest=new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(customDataSet),resultMetadata,false);
  this.closeable=new ICloseable(){
    public void close() throws DataException {
      customDataSet.close();
    }
  }
;
  this.handler=handler;
  this.initialize(dataSourceQuery,handler,scRequest,resultClass,groupSpecs,session,forceLookingForward);
}","public SimpleResultSet(CandidateQuery dataSourceQuery,final ICustomDataSet customDataSet,IResultClass resultClass,IEventHandler handler,GroupSpec[] groupSpecs,DataEngineSession session,boolean forceLookingForward) throws DataException {
  SmartCacheRequest scRequest=new SmartCacheRequest(dataSourceQuery.getMaxRows(),dataSourceQuery.getFetchEvents(),new OdiAdapter(customDataSet),resultClass,false);
  this.closeable=new ICloseable(){
    public void close() throws DataException {
      customDataSet.close();
    }
  }
;
  this.handler=handler;
  this.initialize(dataSourceQuery,handler,scRequest,resultClass,groupSpecs,session,forceLookingForward);
}",0.9802130898021308
66469,"/** 
 * Make a multi-pass to a filter that needs multipass, meanly TopN and BottomN.The pass actually contains two steps. 1.FIRST PASS: in this step we just go through all result rows and make preparation work for the second step 2.SECOND PASS: in this step the rows that are not qualified is filtered out
 * @param filterPass
 * @param stopSign
 * @throws DataException
 */
protected void makeMultiPassToFilter(FilterPassController filterPass) throws DataException {
  int max=populator.getQuery().getMaxRows();
  populator.getQuery().setMaxRows(0);
  ResultSetCache sCache=populator.getCache();
  makeFirstPassToMultiPassFilter(filterPass);
  populator.setCache(sCache);
  sCache.reset();
  sCache.next();
  populator.getGroupProcessorManager().getGroupCalculationUtil().getGroupInformationUtil().setLeaveGroupIndex(0);
  populator.getGroupProcessorManager().getGroupCalculationUtil().setResultSetCache(sCache);
  populator.getQuery().setMaxRows(max);
  makeSecondPassToMultiPassFilter(filterPass);
  Iterator filterIt=filterByRow.getFilterList().iterator();
  while (filterIt.hasNext()) {
    IFilterDefinition fd=(IFilterDefinition)filterIt.next();
    if (FilterUtil.isFilterNeedMultiPass(fd)) {
      fd.getExpression().setHandle(null);
    }
  }
  filterPass.setSecondPassRowCount(0);
}","/** 
 * Make a multi-pass to a filter that needs multipass, meanly TopN and BottomN.The pass actually contains two steps. 1.FIRST PASS: in this step we just go through all result rows and make preparation work for the second step 2.SECOND PASS: in this step the rows that are not qualified is filtered out
 * @param filterPass
 * @param stopSign
 * @throws DataException
 */
protected void makeMultiPassToFilter(FilterPassController filterPass) throws DataException {
  int max=populator.getQuery().getMaxRows();
  populator.getQuery().setMaxRows(0);
  ResultSetCache sCache=populator.getCache();
  populator.setClearCacheResultSet(false);
  makeFirstPassToMultiPassFilter(filterPass);
  populator.setCache(sCache);
  sCache.reset();
  sCache.next();
  populator.setClearCacheResultSet(true);
  populator.getGroupProcessorManager().getGroupCalculationUtil().getGroupInformationUtil().setLeaveGroupIndex(0);
  populator.getGroupProcessorManager().getGroupCalculationUtil().setResultSetCache(sCache);
  populator.getQuery().setMaxRows(max);
  makeSecondPassToMultiPassFilter(filterPass);
  Iterator filterIt=filterByRow.getFilterList().iterator();
  while (filterIt.hasNext()) {
    IFilterDefinition fd=(IFilterDefinition)filterIt.next();
    if (FilterUtil.isFilterNeedMultiPass(fd)) {
      fd.getExpression().setHandle(null);
    }
  }
  filterPass.setSecondPassRowCount(0);
}",0.9681767128416324
66470,"private void setMeasureDataTypeForCubeQuery(ICubeQueryDefinition query){
  List measures=query.getMeasures();
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    for (int i=0; i < measures.size(); i++) {
      IMeasureDefinition measureDef=(IMeasureDefinition)measures.get(i);
      MeasureHandle measureHandle=cubeHandle.getMeasure(measureDef.getName());
      if (measureHandle != null)       measureDef.setDataType(DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()));
      if (cubeHandle instanceof TabularCubeHandle && ((TabularCubeHandle)cubeHandle).autoPrimaryKey()) {
        measureDef.setAggrFunction(null);
      }
    }
  }
}","private void setMeasureDataTypeForCubeQuery(ICubeQueryDefinition query){
  List measures=query.getMeasures();
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    for (int i=0; i < measures.size(); i++) {
      IMeasureDefinition measureDef=(IMeasureDefinition)measures.get(i);
      MeasureHandle measureHandle=cubeHandle.getMeasure(measureDef.getName());
      if (measureHandle != null)       measureDef.setDataType(DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()));
      if (cubeHandle.getBooleanProperty(ITabularCubeModel.AUTO_KEY_PROP)) {
        measureDef.setAggrFunction(null);
      }
    }
  }
}",0.8733118971061093
66471,"/** 
 * Create shell images
 */
private static Image[] createImages(){
  String[] productImageURLs=getProductImageURLs();
  if (productImageURLs != null) {
    ArrayList shellImgs=new ArrayList();
    for (int i=0; i < productImageURLs.length; i++) {
      if (""String_Node_Str"".equals(productImageURLs[i])) {
        continue;
      }
      URL imageURL=null;
      try {
        imageURL=new URL(productImageURLs[i]);
      }
 catch (      MalformedURLException mue) {
        IProduct product=Platform.getProduct();
        if (product != null) {
          Bundle productBundle=product.getDefiningBundle();
          if (productBundle != null) {
            imageURL=Platform.find(productBundle,new Path(productImageURLs[i]));
          }
        }
      }
      Image image=null;
      String key=imageURL.toString();
      if (imageURL != null) {
        if (CorePlugin.getDefault().getImageRegistry().get(key) != null) {
          image=CorePlugin.getDefault().getImageRegistry().get(key);
        }
 else {
          image=ImageDescriptor.createFromURL(imageURL).createImage();
          CorePlugin.getDefault().getImageRegistry().put(key,image);
        }
      }
      if (image != null) {
        shellImgs.add(image);
      }
    }
    return (Image[])shellImgs.toArray(new Image[shellImgs.size()]);
  }
  return new Image[0];
}","/** 
 * Create shell images
 */
private static Image[] createImages(){
  String[] productImageURLs=getProductImageURLs();
  if (productImageURLs != null) {
    ArrayList shellImgs=new ArrayList();
    for (int i=0; i < productImageURLs.length; i++) {
      if (""String_Node_Str"".equals(productImageURLs[i])) {
        continue;
      }
      URL imageURL=null;
      try {
        imageURL=new URL(productImageURLs[i]);
      }
 catch (      MalformedURLException mue) {
        IProduct product=Platform.getProduct();
        if (product != null) {
          Bundle productBundle=product.getDefiningBundle();
          if (productBundle != null) {
            imageURL=Platform.find(productBundle,new Path(productImageURLs[i]));
          }
        }
      }
      Image image=null;
      if (imageURL != null) {
        String key=imageURL.toString();
        if (CorePlugin.getDefault().getImageRegistry().get(key) != null) {
          image=CorePlugin.getDefault().getImageRegistry().get(key);
        }
 else {
          image=ImageDescriptor.createFromURL(imageURL).createImage();
          CorePlugin.getDefault().getImageRegistry().put(key,image);
        }
      }
      if (image != null) {
        shellImgs.add(image);
      }
    }
    return (Image[])shellImgs.toArray(new Image[shellImgs.size()]);
  }
  return new Image[0];
}",0.9768656716417912
66472,"/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion(this.getQueryResultUID());
    if (this.version == VersionManager.VERSION_2_0) {
      this.version=VersionManager.getLatestVersion();
    }
    vm.setVersion(version,this.getQueryResultUID());
    vm.setVersion(VersionManager.getLatestVersion(),null);
  }
 else {
    String queryResultId=this.getQueryResultUID();
    this.version=vm.getVersion(queryResultId);
    if (this.version == 0 && queryResultId != null) {
      this.version=vm.getLatestVersion();
      vm.setVersion(this.version,queryResultId);
    }
  }
}","/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    this.version=vm.getVersion(this.getQueryResultUID());
    if (this.version == VersionManager.VERSION_2_0) {
      this.version=VersionManager.getLatestVersion();
    }
    vm.setVersion(version,this.getQueryResultUID());
    vm.setVersion(VersionManager.getLatestVersion(),null);
  }
 else {
    String queryResultId=this.getQueryResultUID();
    this.version=vm.getVersion(queryResultId);
    if (this.version == 0 && queryResultId != null) {
      this.version=vm.getLatestVersion();
      if (this.context.getDocWriter() != null)       vm.setVersion(this.version,queryResultId);
    }
  }
}",0.9827396254131472
66473,"private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
        }
      }
    }
  }
}","private void initCalculationTypeCombo(String dimensionName){
  DimensionHandle handle=getCrosstabReportItemHandle().getCube().getDimension(dimensionName);
  String cal=calculationType.getText();
  isStatic=true;
  if (recentButton.getSelection()) {
    isStatic=false;
  }
  times=TimeFunctionManager.getCalculationTypes(handle,getUseLevels(dimensionName),isStatic);
  String[] items=new String[times.size()];
  String[] names=new String[times.size()];
  for (int i=0; i < times.size(); i++) {
    items[i]=times.get(i).getDisplayName();
    names[i]=times.get(i).getName();
  }
  calculationType.setItems(items);
  if (getBinding() == null) {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      calculationType.select(0);
    }
    handleCalculationSelectEvent();
  }
 else {
    if (cal != null && getItemIndex(items,cal) >= 0) {
      calculationType.select(getItemIndex(items,cal));
    }
 else {
      ITimeFunction function=getTimeFunctionByDisplaName(getBinding().getCalculationType());
      if (function == null) {
        return;
      }
      String name=function.getName();
      int itemIndex=getItemIndex(names,name);
      if (itemIndex >= 0) {
        calculationType.select(itemIndex);
      }
 else {
        calculationType.select(0);
      }
    }
    handleCalculationSelectEvent();
    ITimeFunction function=getTimeFunctionByIndex(calculationType.getSelectionIndex());
    List<IArgumentInfo> infos=function.getArguments();
    for (int i=0; i < infos.size(); i++) {
      String argName=infos.get(i).getName();
      if (calculationParamsMap.containsKey(argName)) {
        if (getArgumentValue(getBinding(),argName) != null) {
          Control control=calculationParamsMap.get(argName);
          ExpressionHandle obj=(ExpressionHandle)getArgumentValue(getBinding(),argName);
          if (infos.get(i).getPeriodChoices() == null || infos.get(i).getPeriodChoices().isEmpty()) {
            initExpressionButtonControl(control,obj);
          }
 else {
            Combo combo=(Combo)control;
            String str=obj.getStringExpression();
            if (str == null || str.length() == 0) {
              combo.select(0);
            }
 else {
              int comboIndex=getItemIndex(combo.getItems(),str);
              if (comboIndex >= 0) {
                combo.select(comboIndex);
              }
 else {
                combo.select(0);
              }
            }
          }
        }
      }
    }
  }
}",0.9891826923076924
66474,"public void validate(){
  if (txtName != null && (txtName.getText() == null || txtName.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else   if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else {
    if (this.binding == null) {
      for (Iterator iterator=this.bindingHolder.getColumnBindings().iterator(); iterator.hasNext(); ) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
        if (computedColumn.getName().equals(txtName.getText())) {
          dialog.setCanFinish(false);
          this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{txtName.getText()}));
          this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
          return;
        }
      }
    }
    if (isAggregate()) {
      IAggrFunction function=getFunctionByDisplayName(cmbFunction.getText());
      IParameterDefn[] params=function.getParameterDefn();
      if (params.length > 0) {
        for (        final IParameterDefn param : params) {
          if (param.isDataField()) {
            Combo cmbDataField=(Combo)paramsMap.get(param.getName());
            String expression=cmbDataField.getText();
            DataRequestSession session=null;
            try {
              session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
              if (session.getCubeQueryUtil().getReferencedMeasureName(expression) != null && function.getType() == IAggrFunction.RUNNING_AGGR) {
                dialog.setCanFinish(false);
                this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{function.getName()}));
                this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
                return;
              }
              dialog.setCanFinish(true);
            }
 catch (            Exception e) {
            }
 finally {
              if (session != null) {
                session.shutdown();
              }
            }
          }
        }
      }
    }
    dialogCanFinish();
    this.messageLine.setText(""String_Node_Str"");
    this.messageLine.setImage(null);
    if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
      dialog.setCanFinish(false);
      return;
    }
    if (isAggregate()) {
      try {
        IAggrFunction aggregation=DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName());
        if (aggregation.getParameterDefn().length > 0) {
          IParameterDefn[] parameters=aggregation.getParameterDefn();
          for (          IParameterDefn param : parameters) {
            if (!param.isOptional()) {
              String paramValue=getControlValue(paramsMap.get(param.getName()));
              if (paramValue == null || paramValue.trim().equals(""String_Node_Str"")) {
                dialog.setCanFinish(false);
                return;
              }
            }
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (isTimePeriod()) {
      ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
      List<IArgumentInfo> infos=timeFunction.getArguments();
      for (int i=0; i < infos.size(); i++) {
        String paramValue=getControlValue(calculationParamsMap.get(infos.get(i).getName()));
        if (paramValue == null || paramValue.trim().equals(""String_Node_Str"") && !infos.get(i).isOptional()) {
          dialog.setCanFinish(false);
          return;
        }
      }
      String dimensionName=getTimeDimsionName();
      if (!isUseDimension(dimensionName) && recentButton.getSelection()) {
        this.messageLine.setText(Messages.getString(""String_Node_Str""));
        this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
        dialog.setCanFinish(false);
        return;
      }
      if (dateSelectionButton.getSelection() && (dateText.getText() == null || dateText.getText().trim().equals(""String_Node_Str""))) {
        dialog.setCanFinish(false);
        return;
      }
    }
    dialogCanFinish();
  }
  updateRemoveBtnState();
}","public void validate(){
  if (txtName != null && (txtName.getText() == null || txtName.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else   if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
    dialog.setCanFinish(false);
  }
 else {
    if (this.binding == null) {
      for (Iterator iterator=this.bindingHolder.getColumnBindings().iterator(); iterator.hasNext(); ) {
        ComputedColumnHandle computedColumn=(ComputedColumnHandle)iterator.next();
        if (computedColumn.getName().equals(txtName.getText())) {
          dialog.setCanFinish(false);
          this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{txtName.getText()}));
          this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
          return;
        }
      }
    }
    if (isAggregate()) {
      IAggrFunction function=getFunctionByDisplayName(cmbFunction.getText());
      IParameterDefn[] params=function.getParameterDefn();
      if (params.length > 0) {
        for (        final IParameterDefn param : params) {
          if (param.isDataField()) {
            Combo cmbDataField=(Combo)paramsMap.get(param.getName());
            String expression=cmbDataField.getText();
            DataRequestSession session=null;
            try {
              session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
              if (session.getCubeQueryUtil().getReferencedMeasureName(expression) != null && function.getType() == IAggrFunction.RUNNING_AGGR) {
                dialog.setCanFinish(false);
                this.messageLine.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{function.getName()}));
                this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
                return;
              }
              dialog.setCanFinish(true);
            }
 catch (            Exception e) {
            }
 finally {
              if (session != null) {
                session.shutdown();
              }
            }
          }
        }
      }
    }
    dialogCanFinish();
    this.messageLine.setText(""String_Node_Str"");
    this.messageLine.setImage(null);
    if (txtExpression != null && (txtExpression.getText() == null || txtExpression.getText().trim().equals(""String_Node_Str""))) {
      dialog.setCanFinish(false);
      return;
    }
    if (isAggregate()) {
      try {
        IAggrFunction aggregation=DataUtil.getAggregationManager().getAggregation(getFunctionByDisplayName(cmbFunction.getText()).getName());
        if (aggregation.getParameterDefn().length > 0) {
          IParameterDefn[] parameters=aggregation.getParameterDefn();
          for (          IParameterDefn param : parameters) {
            if (!param.isOptional()) {
              String paramValue=getControlValue(paramsMap.get(param.getName()));
              if (paramValue == null || paramValue.trim().equals(""String_Node_Str"")) {
                dialog.setCanFinish(false);
                return;
              }
            }
          }
        }
      }
 catch (      BirtException e) {
      }
    }
    if (isTimePeriod()) {
      ITimeFunction timeFunction=getTimeFunctionByIndex(calculationType.getSelectionIndex());
      if (timeFunction != null) {
        List<IArgumentInfo> infos=timeFunction.getArguments();
        for (int i=0; i < infos.size(); i++) {
          String paramValue=getControlValue(calculationParamsMap.get(infos.get(i).getName()));
          if (paramValue == null || paramValue.trim().equals(""String_Node_Str"") && !infos.get(i).isOptional()) {
            dialog.setCanFinish(false);
            return;
          }
        }
        String dimensionName=getTimeDimsionName();
        if (!isUseDimension(dimensionName) && recentButton.getSelection()) {
          this.messageLine.setText(Messages.getString(""String_Node_Str""));
          this.messageLine.setImage(PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK));
          dialog.setCanFinish(false);
          return;
        }
        if (dateSelectionButton.getSelection() && (dateText.getText() == null || dateText.getText().trim().equals(""String_Node_Str""))) {
          dialog.setCanFinish(false);
          return;
        }
      }
    }
    dialogCanFinish();
  }
  updateRemoveBtnState();
}",0.9858156028368794
66475,"/** 
 * @param queryDefn
 * @param measureList
 * @param measureMapping 
 * @param measureAggrOns 
 * @return
 * @throws DataException 
 */
private static List getUnreferencedMeasures(ICubeQueryDefinition queryDefn,List measureList,Map measureMapping,List measureAggrOns) throws DataException {
  List result=new ArrayList();
  List bindings=queryDefn.getBindings();
  for (Iterator i=measureList.iterator(); i.hasNext(); ) {
    MeasureDefinition measure=(MeasureDefinition)i.next();
    IBinding referenceBinding=getMeasureDirectReferenceBinding(measure,bindings,measureAggrOns);
    if (referenceBinding != null) {
      measureMapping.put(measure.getName(),referenceBinding.getBindingName());
    }
 else {
      result.add(measure);
    }
  }
  return result;
}","/** 
 * @param queryDefn
 * @param measureList
 * @param measureMapping 
 * @param measureAggrOns 
 * @return
 * @throws DataException 
 */
private static List getUnreferencedMeasures(ICubeQueryDefinition queryDefn,List measureList,Map measureMapping,List measureAggrOns) throws DataException {
  List result=new ArrayList();
  List bindings=queryDefn.getBindings();
  for (Iterator i=measureList.iterator(); i.hasNext(); ) {
    MeasureDefinition measure=(MeasureDefinition)i.next();
    if (measure.getAggrFunction() == null || measure.getAggrFunction().trim().length() == 0) {
      continue;
    }
    IBinding referenceBinding=getMeasureDirectReferenceBinding(measure,bindings,measureAggrOns);
    if (referenceBinding != null) {
      measureMapping.put(measure.getName(),referenceBinding.getBindingName());
    }
 else {
      result.add(measure);
    }
  }
  return result;
}",0.929047907822923
66476,"private void setMeasureDataTypeForCubeQuery(ICubeQueryDefinition query){
  List measures=query.getMeasures();
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    for (int i=0; i < measures.size(); i++) {
      IMeasureDefinition measureDef=(IMeasureDefinition)measures.get(i);
      MeasureHandle measureHandle=cubeHandle.getMeasure(measureDef.getName());
      if (measureHandle != null)       measureDef.setDataType(DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()));
    }
  }
}","private void setMeasureDataTypeForCubeQuery(ICubeQueryDefinition query){
  List measures=query.getMeasures();
  if (this.cubeMetaDataHandleMap != null && this.cubeMetaDataHandleMap.containsKey(query.getName())) {
    CubeHandle cubeHandle=(CubeHandle)this.cubeMetaDataHandleMap.get(query.getName());
    for (int i=0; i < measures.size(); i++) {
      IMeasureDefinition measureDef=(IMeasureDefinition)measures.get(i);
      MeasureHandle measureHandle=cubeHandle.getMeasure(measureDef.getName());
      if (measureHandle != null)       measureDef.setDataType(DataAdapterUtil.adaptModelDataType(measureHandle.getDataType()));
      if (cubeHandle instanceof TabularCubeHandle && ((TabularCubeHandle)cubeHandle).autoPrimaryKey()) {
        measureDef.setAggrFunction(null);
      }
    }
  }
}",0.8915325402379286
66477,"private void adaptDTE(org.eclipse.birt.data.engine.api.IResultMetaData dteMeta){
  int count=dteMeta.getColumnCount();
  for (int index=0; index < count; index++) {
    try {
      metaEntries.add(new MetaDataEntry(dteMeta.getColumnName(index + 1),dteMeta.getColumnLabel(index + 1),dteMeta.getColumnType(index + 1)));
    }
 catch (    BirtException ex) {
    }
  }
}","private void adaptDTE(org.eclipse.birt.data.engine.api.IResultMetaData dteMeta){
  if (dteMeta == null)   return;
  int count=dteMeta.getColumnCount();
  for (int index=0; index < count; index++) {
    try {
      metaEntries.add(new MetaDataEntry(dteMeta.getColumnName(index + 1),dteMeta.getColumnLabel(index + 1),dteMeta.getColumnType(index + 1)));
    }
 catch (    BirtException ex) {
    }
  }
}",0.9569752281616688
66478,"/** 
 * For the given odi resultset, calcaulate the value of aggregate from aggregateTable
 * @param aggrTable
 * @param odiResult
 * @throws DataException 
 */
public ProgressiveAggregationHelper(IAggrDefnManager manager,String tempDir,Scriptable currentScope,ScriptContext sc) throws DataException {
  this.manager=manager;
  this.currentRoundAggrValue=new List[0];
  this.accumulators=new ArrayList<Accumulator>();
  this.sc=sc;
  try {
    this.currentScope=((IDataScriptEngine)this.sc.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSContext(sc).initStandardObjects();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  this.currentScope.setParentScope(currentScope);
  this.jsRow=new DummyJSResultSetRow();
  this.currentScope.put(""String_Node_Str"",this.currentScope,this.jsRow);
  this.populateAggregations(tempDir);
}","/** 
 * For the given odi resultset, calcaulate the value of aggregate from aggregateTable
 * @param aggrTable
 * @param odiResult
 * @throws DataException 
 */
public ProgressiveAggregationHelper(IAggrDefnManager manager,String tempDir,Scriptable currentScope,ScriptContext sc) throws DataException {
  this.manager=manager;
  this.currentRoundAggrValue=new List[0];
  this.accumulators=new ArrayList<Accumulator>();
  this.sc=sc;
  try {
    this.currentScope=((IDataScriptEngine)this.sc.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSContext(sc).initStandardObjects();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  this.currentScope.setParentScope(currentScope);
  this.jsRow=new DummyJSResultSetRow();
  this.currentScope.put(""String_Node_Str"",this.currentScope,this.jsRow);
  this.currentScope.put(""String_Node_Str"",this.currentScope,this.jsRow);
  this.populateAggregations(tempDir);
}",0.9588268471517204
66479,"protected void okPressed(){
  CommandStack stack=getActionStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  if (input == null) {
    List measureList=new ArrayList();
    List functionList=new ArrayList();
    measureList.addAll(getLevel().getAggregationMeasures());
    functionList.add(getFunctionNames()[0]);
    for (int i=0; i < measureList.size(); i++) {
      functionList.add(getLevel().getAggregationFunction((MeasureViewHandle)measureList.get(i)));
    }
    measureList.add(getMeasure());
    try {
      getLevel().removeSubTotal();
      CrosstabCellHandle cellHandle=getLevel().addSubTotal(measureList,functionList);
      if (cellHandle != null)       CrosstabUIHelper.createSubTotalLabel(getLevel(),cellHandle);
      stack.commit();
    }
 catch (    SemanticException e) {
      stack.rollback();
    }
  }
  super.okPressed();
}","protected void okPressed(){
  CommandStack stack=getActionStack();
  if (input == null) {
    stack.startTrans(Messages.getString(""String_Node_Str""));
    List measureList=new ArrayList();
    List functionList=new ArrayList();
    measureList.addAll(getLevel().getAggregationMeasures());
    functionList.add(getFunctionNames()[0]);
    for (int i=0; i < measureList.size(); i++) {
      functionList.add(getLevel().getAggregationFunction((MeasureViewHandle)measureList.get(i)));
    }
    measureList.add(getMeasure());
    try {
      getLevel().removeSubTotal();
      CrosstabCellHandle cellHandle=getLevel().addSubTotal(measureList,functionList);
      if (cellHandle != null)       CrosstabUIHelper.createSubTotalLabel(getLevel(),cellHandle);
      stack.commit();
    }
 catch (    SemanticException e) {
      stack.rollback();
    }
  }
  super.okPressed();
}",0.9723502304147466
66480,"/** 
 * Make a multi-pass to a filter that needs multipass, meanly TopN and BottomN.The pass actually contains two steps. 1.FIRST PASS: in this step we just go through all result rows and make preparation work for the second step 2.SECOND PASS: in this step the rows that are not qualified is filtered out
 * @param filterPass
 * @param stopSign
 * @throws DataException
 */
protected void makeMultiPassToFilter(FilterPassController filterPass) throws DataException {
  int max=populator.getQuery().getMaxRows();
  populator.getQuery().setMaxRows(0);
  ResultSetCache sCache=populator.getCache();
  makeFirstPassToMultiPassFilter(filterPass);
  populator.setCache(sCache);
  sCache.reset();
  sCache.next();
  populator.getGroupProcessorManager().getGroupCalculationUtil().getGroupInformationUtil().setLeaveGroupIndex(0);
  populator.getGroupProcessorManager().getGroupCalculationUtil().setResultSetCache(sCache);
  populator.getQuery().setMaxRows(max);
  makeSecondPassToMultiPassFilter(filterPass);
  Iterator filterIt=filterByRow.getFilterList().iterator();
  while (filterIt.hasNext()) {
    IFilterDefinition fd=(IFilterDefinition)filterIt.next();
    if (FilterUtil.isFilterNeedMultiPass(fd)) {
      fd.getExpression().setHandle(null);
    }
  }
  filterPass.setSecondPassRowCount(0);
}","/** 
 * Make a multi-pass to a filter that needs multipass, meanly TopN and BottomN.The pass actually contains two steps. 1.FIRST PASS: in this step we just go through all result rows and make preparation work for the second step 2.SECOND PASS: in this step the rows that are not qualified is filtered out
 * @param filterPass
 * @param stopSign
 * @throws DataException
 */
protected void makeMultiPassToFilter(FilterPassController filterPass) throws DataException {
  int max=populator.getQuery().getMaxRows();
  populator.getQuery().setMaxRows(0);
  ResultSetCache sCache=populator.getCache();
  populator.setClearCacheResultSet(false);
  makeFirstPassToMultiPassFilter(filterPass);
  populator.setCache(sCache);
  sCache.reset();
  sCache.next();
  populator.setClearCacheResultSet(true);
  populator.getGroupProcessorManager().getGroupCalculationUtil().getGroupInformationUtil().setLeaveGroupIndex(0);
  populator.getGroupProcessorManager().getGroupCalculationUtil().setResultSetCache(sCache);
  populator.getQuery().setMaxRows(max);
  makeSecondPassToMultiPassFilter(filterPass);
  Iterator filterIt=filterByRow.getFilterList().iterator();
  while (filterIt.hasNext()) {
    IFilterDefinition fd=(IFilterDefinition)filterIt.next();
    if (FilterUtil.isFilterNeedMultiPass(fd)) {
      fd.getExpression().setHandle(null);
    }
  }
  filterPass.setSecondPassRowCount(0);
}",0.9681767128416324
66481,"/** 
 * Removes a measure view in the given position.
 * @param index the position index of the measure view to remove, 0-based integer
 * @throws SemanticException
 */
public void removeMeasure(int index) throws SemanticException {
  getMeasuresProperty().drop(index);
  CrosstabModelUtil.updateHeaderCell(this,-1,-1);
}","/** 
 * Removes a measure view in the given position.
 * @param index the position index of the measure view to remove, 0-based integer
 * @throws SemanticException
 */
public void removeMeasure(int index) throws SemanticException {
  getMeasuresProperty().drop(index);
  int targetAxis=MEASURE_DIRECTION_VERTICAL.equals(getMeasureDirection()) ? ROW_AXIS_TYPE : COLUMN_AXIS_TYPE;
  List<LevelViewHandle> levels=CrosstabModelUtil.getAllAggregationLevels(this,targetAxis);
  for (  LevelViewHandle lv : levels) {
    if (lv.isInnerMost() || lv.getAggregationHeader() == null) {
      continue;
    }
    if (lv.getAggregationMeasures().size() == 0) {
      lv.getAggregationHeaderProperty().drop(0);
    }
  }
  CrosstabCellHandle grandtotalCell=getGrandTotal(targetAxis);
  if (grandtotalCell != null && getAggregationMeasures(targetAxis).size() == 0) {
    grandtotalCell.getModelHandle().drop();
  }
  CrosstabModelUtil.updateHeaderCell(this,-1,-1);
}",0.5043205027494109
66482,"public boolean next() throws DataException {
  return this.exprResultSet.next();
}","public boolean next() throws DataException {
  if (!this.isFirstNext) {
    return this.doNext();
  }
 else {
    this.isFirstNext=false;
    return this.hasFirstNext;
  }
}",0.5254901960784314
66483,"public void moveTo(int rowIndex) throws BirtException {
  this.exprResultSet.moveTo(rowIndex);
}","public void moveTo(int rowIndex) throws BirtException {
  if (rowIndex >= 0) {
    this.isFirstNext=false;
  }
  this.exprResultSet.moveTo(rowIndex);
}",0.7773279352226721
66484,"public ResultIterator2(String tempDir,DataEngineContext context,QueryResults queryResults,String queryResultID,String subQueryName,int currParentIndex,int lowestGroupLevel,IBaseQueryDefinition qd) throws DataException {
  super(tempDir,context,queryResults,queryResultID,subQueryName,currParentIndex,qd);
  this.lowestGroupLevel=lowestGroupLevel;
  this.currRowIndex=-1;
}","public ResultIterator2(String tempDir,DataEngineContext context,QueryResults queryResults,String queryResultID,String subQueryName,int currParentIndex,int lowestGroupLevel,IBaseQueryDefinition qd) throws DataException {
  super(tempDir,context,queryResults,queryResultID,subQueryName,currParentIndex,qd);
  this.lowestGroupLevel=lowestGroupLevel;
  if (this.hasFirstNext)   this.currRowIndex=0;
 else   this.currRowIndex=-1;
}",0.9323308270676692
66485,"public void moveTo(int rowIndex) throws BirtException {
  if (rowIndex < 0 || rowIndex < this.currRowIndex)   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,Integer.valueOf(rowIndex));
 else   if (rowIndex == currRowIndex)   return;
  int gapRows=rowIndex - currRowIndex;
  for (int i=0; i < gapRows; i++) {
    if (this.next() == false)     throw new DataException(ResourceConstants.INVALID_ROW_INDEX,Integer.valueOf(rowIndex));
  }
}","public void moveTo(int rowIndex) throws BirtException {
  if (rowIndex >= 0) {
    this.isFirstNext=false;
  }
  if (rowIndex < 0 || rowIndex < this.currRowIndex)   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,Integer.valueOf(rowIndex));
 else   if (rowIndex == currRowIndex)   return;
  int gapRows=rowIndex - currRowIndex;
  for (int i=0; i < gapRows; i++) {
    if (this.next() == false)     throw new DataException(ResourceConstants.INVALID_ROW_INDEX,Integer.valueOf(rowIndex));
  }
}",0.9421661409043112
66486,"/** 
 * Checks if a element is in a table header/footer row, or group header/footer row.
 * @param text
 * @return
 */
private boolean isInHeaderFooter(ReportElementHandle elementHandle){
  DesignElementHandle containerHandle=elementHandle.getContainer();
  while (containerHandle != null) {
    if (containerHandle instanceof RowHandle) {
      Boolean rowResult=(Boolean)rowHeaderFooterCache.get(containerHandle);
      if (rowResult != null) {
        return rowResult.booleanValue();
      }
      RowHandle rowHandle=(RowHandle)containerHandle;
      DesignElementHandle rowParentHnadle=rowHandle.getContainer();
      if (rowParentHnadle instanceof TableHandle) {
        int slotID=((TableHandle)rowParentHnadle).findContentSlot(rowHandle);
        if (TableHandle.HEADER_SLOT == slotID || TableHandle.FOOTER_SLOT == slotID) {
          rowHeaderFooterCache.put(containerHandle,Boolean.TRUE);
          return true;
        }
      }
 else       if (rowParentHnadle instanceof TableGroupHandle) {
        int slotID=((TableGroupHandle)rowParentHnadle).findContentSlot(rowHandle);
        if (TableGroupHandle.HEADER_SLOT == slotID || TableGroupHandle.FOOTER_SLOT == slotID) {
          if (rowParentHnadle.getContainer() instanceof TableHandle) {
            rowHeaderFooterCache.put(containerHandle,Boolean.TRUE);
            return true;
          }
        }
      }
      rowHeaderFooterCache.put(containerHandle,Boolean.FALSE);
    }
    if (containerHandle instanceof ReportDesignHandle) {
      return false;
    }
    if (containerHandle.getStringProperty(""String_Node_Str"") != null) {
      return false;
    }
    if (containerHandle instanceof ReportItemHandle) {
      if (((ReportItemHandle)containerHandle).getDataBindingReference() != null) {
        return false;
      }
    }
    containerHandle=containerHandle.getContainer();
  }
  return false;
}","/** 
 * Checks if a element is in a table header/footer row, or group header/footer row.
 * @param text
 * @return
 */
private boolean isInHeaderFooter(ReportElementHandle elementHandle){
  DesignElementHandle containerHandle=elementHandle.getContainer();
  while (containerHandle != null) {
    if (containerHandle instanceof RowHandle) {
      Boolean rowResult=(Boolean)rowHeaderFooterCache.get(containerHandle);
      if (rowResult != null) {
        return rowResult.booleanValue();
      }
      RowHandle rowHandle=(RowHandle)containerHandle;
      DesignElementHandle rowParentHnadle=rowHandle.getContainer();
      if (rowParentHnadle instanceof TableHandle) {
        int slotID=((TableHandle)rowParentHnadle).findContentSlot(rowHandle);
        if (TableHandle.HEADER_SLOT == slotID || TableHandle.FOOTER_SLOT == slotID) {
          rowHeaderFooterCache.put(containerHandle,Boolean.TRUE);
          return true;
        }
      }
 else       if (rowParentHnadle instanceof TableGroupHandle) {
        int slotID=((TableGroupHandle)rowParentHnadle).findContentSlot(rowHandle);
        if (TableGroupHandle.HEADER_SLOT == slotID || TableGroupHandle.FOOTER_SLOT == slotID) {
          if (rowParentHnadle.getContainer() instanceof TableHandle) {
            rowHeaderFooterCache.put(containerHandle,Boolean.TRUE);
            return true;
          }
        }
      }
 else       if (!(rowParentHnadle instanceof GridHandle)) {
        rowHeaderFooterCache.put(containerHandle,Boolean.FALSE);
      }
    }
 else     if (containerHandle instanceof ReportDesignHandle) {
      return false;
    }
    if (containerHandle.getStringProperty(""String_Node_Str"") != null) {
      return false;
    }
    if (containerHandle instanceof ReportItemHandle) {
      if (((ReportItemHandle)containerHandle).getDataBindingReference() != null) {
        return false;
      }
    }
    containerHandle=containerHandle.getContainer();
  }
  return false;
}",0.9801255230125524
66487,"/** 
 * @param level
 * @param filter
 * @return
 * @throws IOException
 * @throws DataException
 */
private static BaseDiskSortedStack find(Level level,ISelection[] filter) throws IOException, DataException {
  IDiskArray indexKeyArray=level.getDiskIndex().find(filter);
  if (indexKeyArray != null) {
    int len=0;
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      len+=key.getDimensionPos().length;
    }
    PrimitiveDiskSortedStack resultStack=new PrimitiveDiskSortedStack(len,true,true);
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      int[] pos=key.getDimensionPos();
      for (int j=0; j < pos.length; j++) {
        resultStack.push(Integer.valueOf(pos[j]));
      }
    }
    return resultStack;
  }
 else {
    return new PrimitiveDiskSortedStack(1,true,true);
  }
}","/** 
 * @param level
 * @param filter
 * @return
 * @throws IOException
 * @throws DataException
 */
private static BaseDiskSortedStack find(Level level,ISelection[] filter) throws IOException, DataException {
  IDiskArray indexKeyArray=null;
  if (level.getDiskIndex() != null)   indexKeyArray=level.getDiskIndex().find(filter);
  if (indexKeyArray != null) {
    int len=0;
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      len+=key.getDimensionPos().length;
    }
    PrimitiveDiskSortedStack resultStack=new PrimitiveDiskSortedStack(len,true,true);
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      int[] pos=key.getDimensionPos();
      for (int j=0; j < pos.length; j++) {
        resultStack.push(Integer.valueOf(pos[j]));
      }
    }
    return resultStack;
  }
 else {
    return new PrimitiveDiskSortedStack(1,true,true);
  }
}",0.968682505399568
66488,"public void create(){
  super.create();
  Point pt=getShell().computeSize(-1,-1);
  pt.x=Math.max(pt.x,400);
  pt.y=Math.max(pt.y,200);
  getShell().setSize(pt);
  getShell().setText(getTitle());
}","public void create(){
  super.create();
  Point pt=getShell().computeSize(-1,-1);
  pt.x=Math.max(pt.x,520);
  pt.y=Math.max(pt.y,250);
  getShell().setSize(pt);
  getShell().setText(getTitle());
}",0.9847715736040608
66489,"public AdapterException(String errorCode,Throwable cause,Object argv[]){
  super(_pluginId,errorCode,argv,resourceBundle,cause);
}","public AdapterException(String errorCode,Throwable cause,Object argv[]){
  super(_pluginId,errorCode,argv,getResourceBundle(),cause);
}",0.9735849056603774
66490,"/** 
 * @param locale
 */
private AdapterResourceHandle(ULocale locale){
  super(locale);
}","/** 
 * @param locale
 */
public AdapterResourceHandle(ULocale locale){
  super(locale);
}",0.9502762430939228
66491,"protected boolean updateResultSetSetting() throws SemanticException {
  if (selectResultSetCheckBox == null)   return false;
  if (selectResultSetCheckBox.getSelection()) {
    if (resultSetNumber.getSelection()) {
      ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetNumber(new Integer(this.numberText));
    }
 else     if (resultSetName.getSelection()) {
      ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(this.nameText);
    }
  }
  if (changed) {
    Iterator it=((DataSetEditor)getContainer()).getHandle().resultSetIterator();
    while (it.hasNext()) {
      it.remove();
    }
  }
  changed=false;
  return true;
}","protected boolean updateResultSetSetting() throws SemanticException {
  if (selectResultSetCheckBox == null)   return false;
  if (selectResultSetCheckBox.getSelection()) {
    if (resultSetNumber.getSelection()) {
      ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetNumber(new Integer(this.numberText));
    }
 else     if (resultSetName.getSelection()) {
      ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(this.nameText);
    }
  }
  if (changed) {
    Iterator it=((DataSetEditor)getContainer()).getHandle().resultSetIterator();
    while (it.hasNext()) {
      it.next();
      it.remove();
    }
  }
  changed=false;
  return true;
}",0.9877785765636232
66492,"public void endNormalContainer(){
  XlsContainer container=getCurrentContainer();
  if (container != null) {
    if (container.isEmpty()) {
      Data data=page.createEmptyData(container.getStyle());
      ContainerSizeInfo containerSize=container.getSizeInfo();
      data.setStartX(containerSize.getStartCoordinate());
      data.setEndX(containerSize.getEndCoordinate());
      addData(data,container);
    }
    engine.applyContainerBottomStyle(container,page);
  }
  containers.pop();
}","public void endNormalContainer(){
  XlsContainer container=getCurrentContainer();
  if (container != null) {
    if (container.isEmpty()) {
      Data data=page.createEmptyData(container.getStyle());
      ContainerSizeInfo containerSize=container.getSizeInfo();
      data.setStartX(containerSize.getStartCoordinate());
      data.setEndX(containerSize.getEndCoordinate());
      addData(data,container);
      if (!(container instanceof XlsCell)) {
        setParentContainerIndex();
      }
    }
    engine.applyContainerBottomStyle(container,page);
  }
  containers.pop();
}",0.9177570093457944
66493,"protected static void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  ReportDesignHandle reportDesign=foreign.getReportContent().getDesign().getReportDesign();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(reportDesign);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap,foreign.getReportContent().getReportContext() == null ? null : foreign.getReportContent().getReportContext().getAppContext());
    IContainerContent container=foreign.getReportContent().createContainerContent();
    IStyle parentStyle=foreign.getStyle();
    if (CSSValueConstants.INLINE_VALUE.equals(parentStyle.getProperty(IStyle.STYLE_DISPLAY))) {
      container.getStyle().setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    }
    addChild(foreign,container);
    processNodes(body,styleMap,container,null);
  }
}","protected static void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  ReportDesignHandle reportDesign=foreign.getReportContent().getDesign().getReportDesign();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(reportDesign);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap,foreign.getReportContent().getReportContext() == null ? null : foreign.getReportContent().getReportContext().getAppContext());
    IContainerContent container=foreign.getReportContent().createContainerContent();
    IStyle parentStyle=foreign.getStyle();
    if (CSSValueConstants.INLINE_VALUE.equals(parentStyle.getProperty(IStyle.STYLE_DISPLAY))) {
      container.getStyle().setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    }
    addChild(foreign,container);
    processNodes(body,styleMap,container,null,0);
  }
}",0.9992378048780488
66494,"static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    if (ele.getParentNode().getNodeName().equals(TAG_OL)) {
      text.setText(Integer.valueOf(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL)) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action);
    }
 else {
      processNodes(ele,cssStyles,container,action);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action);
  }
 else {
    processNodes(ele,cssStyles,content,action);
  }
}","static void handleElement(Element ele,Map<Element,StyleProperties> cssStyles,IContent content,ActionContent action,int index,int nestCount){
  StyleProperties sp=cssStyles.get(ele);
  if (sp != null) {
    if (""String_Node_Str"".equals(sp.getStyle().getDisplay())) {
      return;
    }
  }
  String lTagName=ele.getTagName().toLowerCase();
  if (lTagName.equals(TAG_A)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent actionContent=handleAnchor(ele,container,action);
    processNodes(ele,cssStyles,content,actionContent,0);
  }
 else   if (lTagName.equals(TAG_IMG)) {
    outputImg(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_OBJECT)) {
    outputEmbedContent(ele,cssStyles,content);
  }
 else   if (lTagName.equals(TAG_BR)) {
    ILabelContent label=content.getReportContent().createLabelContent();
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (lTagName.equals(TAG_UL) || lTagName.equals(TAG_OL)) {
    IReportContent report=content.getReportContent();
    ITableContent table=report.createTableContent();
    addChild(content,table);
    Column column1=new Column(report);
    column1.setWidth(new DimensionType(2,""String_Node_Str""));
    table.addColumn(column1);
    column1=new Column(report);
    table.addColumn(column1);
    handleStyle(ele,cssStyles,table);
    processNodes(ele,cssStyles,table,action,nestCount);
  }
 else   if (lTagName.equals(TAG_LI) && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    IReportContent report=content.getReportContent();
    IRowContent row=report.createRowContent();
    addChild(content,row);
    handleStyle(ele,cssStyles,row);
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    style.setProperty(IStyle.STYLE_PADDING_BOTTOM,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_LEFT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_RIGHT,IStyle.NUMBER_0);
    style.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
    ICellContent orderCell=report.createCellContent();
    orderCell.setRowSpan(1);
    orderCell.setColumn(0);
    orderCell.setColSpan(1);
    orderCell.setInlineStyle(style);
    addChild(row,orderCell);
    TextContent text=(TextContent)report.createTextContent();
    addChild(orderCell,text);
    boolean nestList=false;
    int count=ele.getChildNodes().getLength();
    if (count == 1) {
      Node firstChild=ele.getFirstChild();
      String nodeName=firstChild.getNodeName();
      if (TAG_OL.equals(nodeName) || TAG_UL.equals(nodeName)) {
        nestList=true;
      }
    }
    if (ele.getParentNode().getNodeName().equals(TAG_OL) && !nestList) {
      text.setText(Integer.valueOf(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(TAG_UL) && !nestList) {
      text.setText(new String(new char[]{getListChar(nestCount)}));
    }
    ICellContent childCell=report.createCellContent();
    childCell.setRowSpan(1);
    childCell.setColumn(1);
    childCell.setColSpan(1);
    childCell.setInlineStyle(style);
    addChild(row,childCell);
    processNodes(ele,cssStyles,childCell,action,nestCount + 1);
  }
 else   if (lTagName.equals(TAG_DD) || lTagName.equals(TAG_DT)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (lTagName.equals(TAG_DD)) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=(TextContent)content.getReportContent().createTextContent();
      addChild(container,text);
      if (ele.getParentNode().getNodeName().equals(TAG_DL)) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=content.getReportContent().createContainerContent();
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,cssStyles,container,action,nestCount + 1);
    }
 else {
      processNodes(ele,cssStyles,container,action,nestCount);
    }
  }
 else   if (TAG_TABLE.equals(lTagName)) {
    TableProcessor.processTable(ele,cssStyles,content,action);
  }
 else   if (htmlBlockDisplay.contains(lTagName) || htmlInlineDisplay.contains(lTagName)) {
    IContainerContent container=content.getReportContent().createContainerContent();
    handleStyle(ele,cssStyles,container);
    addChild(content,container);
    processNodes(ele,cssStyles,container,action,nestCount);
  }
 else {
    processNodes(ele,cssStyles,content,action,nestCount);
  }
}",0.9230614906209248
66495,"/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
static void processNodes(Element ele,Map cssStyles,IContent content,ActionContent action){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(TAG_VALUEOF)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action);
      }
    }
 else     if (node.getNodeName().equals(TAG_IMAGE)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action);
      }
    }
 else     if (node.getNodeName().equals(TAG_SCRIPT)) {
      continue;
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=createLabel(node.getNodeValue(),content);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,cssStyles,content,action,++level);
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
static void processNodes(Element ele,Map cssStyles,IContent content,ActionContent action,int nestCount){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(TAG_VALUEOF)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action,nestCount);
      }
    }
 else     if (node.getNodeName().equals(TAG_IMAGE)) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,action,nestCount);
      }
    }
 else     if (node.getNodeName().equals(TAG_SCRIPT)) {
      continue;
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=createLabel(node.getNodeValue(),content);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,cssStyles,content,action,++level,nestCount);
    }
  }
}",0.9824701195219124
66496,"public void processNodes(){
  HTML2Content.processNodes(element,cssStyles,content,action);
}","public void processNodes(){
  HTML2Content.processNodes(element,cssStyles,content,action,0);
}",0.989247311827957
66497,"public ModelDteApiAdapter(ExecutionContext context) throws BirtException {
  this.context=context;
  scriptContext=context.getScriptContext();
  this.jsScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
}","public ModelDteApiAdapter(ExecutionContext context) throws BirtException {
  this.context=context;
  this.jsScope=((IDataScriptEngine)context.getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(context.getScriptContext());
}",0.8571428571428571
66498,"protected IExtractionResults extractQuery(DataSetHandle dataset) throws BirtException {
  QueryDefinition newQuery=constructQuery(dataset);
  DataRequestSession session=executionContext.getDataEngine().getDTESession();
  final ModelDteApiAdapter apiAdapter=new ModelDteApiAdapter(executionContext);
  apiAdapter.defineDataSet(dataset,session);
  session.registerQueries(new IQueryDefinition[]{newQuery});
  IBasePreparedQuery preparedQuery=session.prepare(newQuery);
  IQueryResults result=(IQueryResults)session.execute(preparedQuery,null,executionContext.getScriptContext());
  ResultMetaData metadata=new ResultMetaData(result.getResultMetaData());
  return new ExtractionResults(result,metadata,null,0,maxRow){
    public void close(){
      super.close();
      apiAdapter.close();
    }
  }
;
}","protected IExtractionResults extractQuery(DataSetHandle dataset) throws BirtException {
  QueryDefinition newQuery=constructQuery(dataset);
  DataRequestSession session=executionContext.getDataEngine().getDTESession();
  ModelDteApiAdapter apiAdapter=new ModelDteApiAdapter(executionContext);
  apiAdapter.defineDataSet(dataset,session);
  session.registerQueries(new IQueryDefinition[]{newQuery});
  IBasePreparedQuery preparedQuery=session.prepare(newQuery);
  IQueryResults result=(IQueryResults)session.execute(preparedQuery,null,executionContext.getScriptContext());
  ResultMetaData metadata=new ResultMetaData(result.getResultMetaData());
  return new ExtractionResults(result,metadata,null,0,maxRow);
}",0.937748344370861
66499,"public void shutdown(){
  dteSession.shutdown();
  queryCache.close();
  adapter.close();
  if (factory != null) {
    factory.closeDataEngine(this);
  }
}","public void shutdown(){
  dteSession.shutdown();
  queryCache.close();
  if (factory != null) {
    factory.closeDataEngine(this);
  }
}",0.9347079037800688
66500,"public CubeCursorImpl(IBaseQueryResults outerResults,CubeCursor cursor,Scriptable scope,ScriptContext cx,ICubeQueryDefinition queryDefn,BirtCubeView view) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  this.cubeView=view;
  this.cx=cx;
  this.dimensionCursorMap=new HashMap<DimLevel,DimensionCursor>();
  populateDimensionCursor();
  this.outerResults=OlapExpressionUtil.createQueryResultsScriptable(outerResults);
  this.bindingMap=new HashMap();
  this.validBindingSet=new HashSet();
  this.dataTypeMap=new HashMap();
  List<IBinding> allBindings=CubeQueryDefinitionUtil.getAllBindings(queryDefn);
  for (int i=0; i < allBindings.size(); i++) {
    IBinding binding=(IBinding)allBindings.get(i);
    final String bindingName=binding.getBindingName();
    validBindingSet.add(bindingName);
    final IBaseExpression expr=binding.getExpression();
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(bindingName,expr);
      if (expr instanceof IScriptExpression) {
        if (!isSimpleDimensionExpression(((IScriptExpression)expr).getText()))         OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
      }
 else       OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
    }
    dataTypeMap.put(bindingName,Integer.valueOf(binding.getDataType()));
  }
  this.scope.put(ScriptConstants.DATA_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
  this.scope.put(ScriptConstants.DATA_SET_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
}","public CubeCursorImpl(IBaseQueryResults outerResults,CubeCursor cursor,Scriptable scope,ScriptContext cx,ICubeQueryDefinition queryDefn,BirtCubeView view) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  this.cubeView=view;
  this.cx=cx;
  this.dimensionCursorMap=new HashMap<DimLevel,DimensionCursor>();
  populateDimensionCursor();
  this.outerResults=OlapExpressionUtil.createQueryResultsScriptable(outerResults);
  this.bindingMap=new HashMap();
  this.dimLevelMap=new HashMap<String,DimLevel>();
  this.validBindingSet=new HashSet();
  this.dataTypeMap=new HashMap();
  List<IBinding> allBindings=CubeQueryDefinitionUtil.getAllBindings(queryDefn);
  for (int i=0; i < allBindings.size(); i++) {
    IBinding binding=(IBinding)allBindings.get(i);
    final String bindingName=binding.getBindingName();
    validBindingSet.add(bindingName);
    final IBaseExpression expr=binding.getExpression();
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(bindingName,expr);
      if (expr instanceof IScriptExpression) {
        if (!isSimpleDimensionExpression(((IScriptExpression)expr).getText()))         OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
      }
 else       OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
    }
    dataTypeMap.put(bindingName,Integer.valueOf(binding.getDataType()));
  }
  this.scope.put(ScriptConstants.DATA_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
  this.scope.put(ScriptConstants.DATA_SET_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
}",0.9838658652325214
66501,"public void close() throws DataException {
  try {
    if (this.groupOutput != null) {
      for (int i=0; i < this.groupOutput.length; i++) {
        this.groupOutput[i].seek(0);
        IOUtil.writeInt(this.groupOutput[i],this.groupInstanceIndex[i]);
        this.groupOutput[i].close();
      }
      this.groupOutput=null;
    }
    if (this.aggrOutput != null) {
      for (int i=0; i < this.aggrOutput.length; i++) {
        if (this.aggrOutput[i] != null)         this.aggrOutput[i].close();
      }
      this.aggrOutput=null;
    }
    if (this.aggrIndexOutput != null) {
      for (int i=0; i < this.aggrIndexOutput.length; i++) {
        if (this.aggrIndexOutput[i] != null)         this.aggrIndexOutput[i].close();
      }
      this.aggrIndexOutput=null;
    }
    if (this.overallAggrs.size() > 0 && this.combinedAggrIndexOutput != null) {
      this.combinedAggrIndexRAOutput.seek(0);
      IOUtil.writeLong(this.combinedAggrIndexOutput,this.combinedAggrRAOutput.getOffset());
      this.combinedAggrIndexRAOutput.close();
      for (      String aggrName : overallAggrs) {
        IOUtil.writeObject(this.combinedAggrOutput,this.aggrHelper.getLatestAggrValue(aggrName));
      }
      this.combinedAggrOutput.close();
    }
    if (this.aggrHelper != null) {
      this.aggrHelper.close();
      this.aggrHelper=null;
    }
    if (this.groupBys.length == 0) {
      OutputStream out=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      IOUtil.writeInt(out,0);
      out.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public void close() throws DataException {
  try {
    if (this.groupOutput != null) {
      for (int i=0; i < this.groupOutput.length; i++) {
        this.groupOutput[i].seek(0);
        IOUtil.writeInt(this.groupOutput[i],this.groupInstanceIndex[i]);
        this.groupOutput[i].close();
      }
      this.groupOutput=null;
    }
    if (this.aggrOutput != null) {
      for (int i=0; i < this.aggrOutput.length; i++) {
        if (this.aggrOutput[i] != null)         this.aggrOutput[i].close();
      }
      this.aggrOutput=null;
    }
    if (this.aggrIndexOutput != null) {
      for (int i=0; i < this.aggrIndexOutput.length; i++) {
        if (this.aggrIndexOutput[i] != null)         this.aggrIndexOutput[i].close();
      }
      this.aggrIndexOutput=null;
    }
    if (this.overallAggrs.size() > 0 && this.combinedAggrIndexOutput != null) {
      this.combinedAggrIndexRAOutput.seek(0);
      IOUtil.writeLong(this.combinedAggrIndexOutput,this.combinedAggrRAOutput.getOffset());
      this.combinedAggrIndexRAOutput.close();
      for (      String aggrName : overallAggrs) {
        IOUtil.writeObject(this.combinedAggrOutput,this.aggrHelper.getLatestAggrValue(aggrName));
      }
      this.combinedAggrOutput.close();
    }
    if (this.aggrHelper != null) {
      this.aggrHelper.close();
      this.aggrHelper=null;
    }
    if (this.groupBys.length == 0 && this.streamManager != null) {
      OutputStream out=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      IOUtil.writeInt(out,0);
      out.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9910607866507748
66502,"private void refactorCubeQueryDefinition(ICubeQueryDefinition query) throws DataException, AdapterException {
  List bindings=query.getBindings();
  List levelExprList=getAllAggrOns(query);
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (binding.getAggrFunction() != null) {
      if (IBuildInAggregation.TOTAL_TOP_N_FUNC.equals(binding.getAggrFunction()) || IBuildInAggregation.TOTAL_BOTTOM_N_FUNC.equals(binding.getAggrFunction()) || IBuildInAggregation.TOTAL_TOP_N_FUNC.equals(binding.getAggrFunction())|| IBuildInAggregation.TOTAL_TOP_N_FUNC.equals(binding.getAggrFunction())) {
        throw new AdapterException(ResourceConstants.UNSUPPORTED_AGGR_IN_BINDING,new Object[]{binding.getBindingName()});
      }
    }
    String measureName=OlapExpressionUtil.getMeasure(binding.getExpression());
    if (measureName != null) {
      if (binding.getAggrFunction() == null) {
        String aggrFunc=getAggrFunction(query,measureName);
        binding.setAggrFunction(aggrFunc);
        if (binding.getAggregatOns().size() == 0) {
          for (Iterator itr=levelExprList.iterator(); itr.hasNext(); ) {
            binding.addAggregateOn(itr.next().toString());
          }
        }
      }
    }
  }
}","private void refactorCubeQueryDefinition(ICubeQueryDefinition query) throws DataException, AdapterException {
  List bindings=query.getBindings();
  List levelExprList=getAllAggrOns(query);
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    String measureName=OlapExpressionUtil.getMeasure(binding.getExpression());
    if (measureName != null) {
      if (binding.getAggrFunction() == null) {
        String aggrFunc=getAggrFunction(query,measureName);
        binding.setAggrFunction(aggrFunc);
        if (binding.getAggregatOns().size() == 0) {
          for (Iterator itr=levelExprList.iterator(); itr.hasNext(); ) {
            binding.addAggregateOn(itr.next().toString());
          }
        }
      }
    }
  }
}",0.7582797825012358
66503,"public boolean next() throws DataException {
  if (this.index < this.cachedRows.size() - 1) {
    this.index++;
    return true;
  }
 else   if (this.index == this.cachedRows.size() - 1) {
    boolean result=this.source.next();
    this.index++;
    if (result) {
      this.cachedRows.add(new ResultObjectHolder(this.source.getCurrentResult(),this.source.getStartingGroupLevel(),this.source.getEndingGroupLevel(),source.getGroupIndex()));
    }
    return result;
  }
 else {
    return false;
  }
}","public boolean next() throws DataException {
  if (this.index < this.cachedRows.size() - 1) {
    this.source.saveToDataSetStream(this.getCurrentResult());
    this.index++;
    if (index == this.cachedRows.size() - 1) {
      this.source.saveToDataSetStream(this.getCurrentResult());
    }
    return true;
  }
 else   if (this.index == this.cachedRows.size() - 1) {
    boolean result=this.source.next();
    this.index++;
    if (result) {
      this.cachedRows.add(new ResultObjectHolder(this.source.getCurrentResult(),this.source.getStartingGroupLevel(),this.source.getEndingGroupLevel(),source.getGroupIndex()));
    }
    return result;
  }
 else {
    return false;
  }
}",0.8481764206955047
66504,"public boolean next() throws DataException {
  if (currResultObj == null)   return false;
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.populateResultClass(this.currResultObj.getResultClass()).getFieldCount();
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet,streamsWrapper.getOutputStringTable(getResultClass()),streamsWrapper.getStreamForIndex(getResultClass(),handler.getAppContext()),this.rowCount - 1);
      }
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
  try {
    this.groupCalculator.next(this.rowResultSet.getIndex());
    this.groupCalculator.registerPreviousResultObject(this.currResultObj);
    this.currResultObj=this.rowResultSet.next();
    this.groupCalculator.registerCurrentResultObject(this.currResultObj);
    this.groupCalculator.registerNextResultObject(this.rowResultSet.getNext());
  }
 catch (  DataException e) {
    this.currResultObj=null;
    throw e;
  }
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}","public boolean next() throws DataException {
  if (currResultObj == null)   return false;
  saveToDataSetStream(currResultObj);
  try {
    this.groupCalculator.next(this.rowResultSet.getIndex());
    this.groupCalculator.registerPreviousResultObject(this.currResultObj);
    this.currResultObj=this.rowResultSet.next();
    this.groupCalculator.registerCurrentResultObject(this.currResultObj);
    this.groupCalculator.registerNextResultObject(this.rowResultSet.getNext());
  }
 catch (  DataException e) {
    this.currResultObj=null;
    throw e;
  }
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}",0.1390658174097664
66505,"/** 
 * clear unused column hints
 * @throws BirtException
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getModule(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
        if (!found) {
          try {
            handle.removeItem(hint);
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
  }
}","/** 
 * clear unused column hints
 * @throws BirtException
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getModule(),ColumnHint.COLUMN_NAME_MEMBER);
      String alias=(String)hint.getProperty(handle.getModule(),ColumnHint.ALIAS_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          String name=metaData.getColumnName(m + 1);
          if (name != null && (name.equals(columnName)) || name.equals(alias)) {
            found=true;
            break;
          }
        }
        if (!found) {
          try {
            handle.removeItem(hint);
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
  }
}",0.8713768115942029
66506,"/** 
 * Used in the filter select value dialog in dataset editor
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle,boolean useDataSetFilter) throws BirtException {
  ScriptExpression expr=null;
  DataSetHandle targetHandle=dataSetHandle;
  Map appContext=new HashMap();
  DataSetPreviewer previewer=null;
  try {
    if (!useDataSetFilter) {
      IDesignElement element=dataSetHandle.copy();
      ((DataSet)element).setProperty(IDataSetModel.FILTER_PROP,new ArrayList());
      targetHandle=ExternalUIUtil.newDataSetHandle(dataSetHandle,(DesignElement)element);
    }
    previewer=new DataSetPreviewer(targetHandle,0,PreviewType.RESULTSET);
    DataModelAdapter adapter=new DataModelAdapter(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,targetHandle.getModuleHandle()));
    expr=adapter.adaptExpression(expression);
    boolean startsWithRow=ExpressionUtility.isColumnExpression(expr.getText(),true);
    boolean startsWithDataSetRow=ExpressionUtility.isColumnExpression(expr.getText(),false);
    if (!startsWithRow && !startsWithDataSetRow) {
      throw new DataException(Messages.getString(""String_Node_Str""));
    }
    String dataSetColumnName=null;
    if (startsWithDataSetRow) {
      dataSetColumnName=ExpressionUtil.getColumnName(expr.getText());
    }
 else {
      dataSetColumnName=ExpressionUtil.getColumnBindingName(expr.getText());
    }
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
    identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
    identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
    appContext.put(resouceIDs,identifiers);
    AppContextPopulator.populateApplicationContext(targetHandle,appContext);
    previewer.open(appContext,getEngineConfig(targetHandle.getModuleHandle()));
    IResultIterator itr=previewer.preview();
    Set visitedValues=new HashSet();
    Object value=null;
    while (itr.next()) {
      if (visitedValues.size() > 10000) {
        break;
      }
      value=itr.getValue(dataSetColumnName);
      if (!visitedValues.contains(value)) {
        visitedValues.add(value);
      }
    }
    if (visitedValues.isEmpty())     return Collections.EMPTY_LIST;
    return new ArrayList(visitedValues);
  }
  finally {
    AppContextResourceReleaser.release(appContext);
    if (previewer != null)     previewer.close();
  }
}","/** 
 * Used in the filter select value dialog in dataset editor
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle,boolean useDataSetFilter) throws BirtException {
  ScriptExpression expr=null;
  DataSetHandle targetHandle=dataSetHandle;
  Map appContext=new HashMap();
  DataSetPreviewer previewer=null;
  try {
    if (!useDataSetFilter) {
      IDesignElement element=dataSetHandle.copy();
      ((DataSet)element).setProperty(IDataSetModel.FILTER_PROP,new ArrayList());
      targetHandle=ExternalUIUtil.newDataSetHandle(dataSetHandle,(DesignElement)element);
    }
    previewer=new DataSetPreviewer(targetHandle,0,PreviewType.RESULTSET);
    DataModelAdapter adapter=new DataModelAdapter(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,targetHandle.getModuleHandle()));
    expr=adapter.adaptExpression(expression);
    boolean startsWithRow=ExpressionUtility.isColumnExpression(expr.getText(),true);
    boolean startsWithDataSetRow=ExpressionUtility.isColumnExpression(expr.getText(),false);
    if (!startsWithRow && !startsWithDataSetRow) {
      throw new DataException(Messages.getString(""String_Node_Str""));
    }
    String dataSetColumnName=null;
    if (startsWithDataSetRow) {
      dataSetColumnName=ExpressionUtil.getColumnName(expr.getText());
    }
 else {
      dataSetColumnName=ExpressionUtil.getColumnBindingName(expr.getText());
    }
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
    identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
    identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
    appContext.put(resouceIDs,identifiers);
    AppContextPopulator.populateApplicationContext(targetHandle,appContext);
    previewer.open(appContext,getEngineConfig(targetHandle.getModuleHandle()));
    IResultIterator itr=previewer.preview();
    Set visitedValues=new HashSet();
    Object value=null;
    while (itr.next()) {
      if (visitedValues.size() > 10000) {
        break;
      }
      value=itr.getValue(dataSetColumnName);
      if (value != null && !visitedValues.contains(value)) {
        visitedValues.add(value);
      }
    }
    if (visitedValues.isEmpty())     return Collections.EMPTY_LIST;
    return new ArrayList(visitedValues);
  }
  finally {
    AppContextResourceReleaser.release(appContext);
    if (previewer != null)     previewer.close();
  }
}",0.9967821313647548
66507,"/** 
 * @param d
 * @return
 */
private static Calendar getCalendar(Date d){
  Calendar c=null;
  if (d instanceof java.sql.Date) {
    c=Calendar.getInstance(TimeZone.getDefault(),defaultLocale);
  }
 else {
    c=Calendar.getInstance(timeZone,defaultLocale);
  }
  if (d == null) {
    c.clear();
    c.set(1970,0,1);
  }
 else {
    c.setTime(d);
  }
  return c;
}","/** 
 * @param d
 * @return
 */
private static Calendar getCalendar(Date d){
  Calendar c=null;
  if (d instanceof java.sql.Date) {
    c=Calendar.getInstance(TimeZone.getDefault(),defaultLocale);
  }
 else {
    c=Calendar.getInstance(timeZone,defaultLocale);
  }
  c.setMinimalDaysInFirstWeek(1);
  if (d == null) {
    c.clear();
    c.set(1970,0,1);
  }
 else {
    c.setTime(d);
  }
  return c;
}",0.9557291666666666
66508,"public boolean next() throws DataException {
  if (currResultObj == null)   return false;
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.populateResultClass(this.currResultObj.getResultClass()).getFieldCount();
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet,streamsWrapper.getOutputStringTable(getResultClass()),streamsWrapper.getStreamForIndex(getResultClass(),handler.getAppContext()),this.rowCount - 1);
      }
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
  try {
    this.groupCalculator.next();
    this.groupCalculator.registerPreviousResultObject(this.currResultObj);
    this.currResultObj=this.rowResultSet.next();
    this.groupCalculator.registerCurrentResultObject(this.currResultObj);
  }
 catch (  DataException e) {
    this.currResultObj=null;
    throw e;
  }
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}","public boolean next() throws DataException {
  if (currResultObj == null)   return false;
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.populateResultClass(this.currResultObj.getResultClass()).getFieldCount();
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet,streamsWrapper.getOutputStringTable(getResultClass()),streamsWrapper.getStreamForIndex(getResultClass(),handler.getAppContext()),this.rowCount - 1);
      }
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
  try {
    this.groupCalculator.registerCurrentResultObject(this.currResultObj);
    this.groupCalculator.registerPreviousResultObject(this.previewObj);
    this.previewObj=this.currResultObj;
    this.currResultObj=this.rowResultSet.next();
    this.groupCalculator.registerNextResultObject(this.currResultObj);
    this.groupCalculator.next();
  }
 catch (  DataException e) {
    this.currResultObj=null;
    throw e;
  }
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}",0.8210084033613445
66509,"public int getStartingGroupLevel() throws DataException {
  return this.groupCalculator.getStartingGroup();
}","public int getStartingGroupLevel() throws DataException {
  this.groupCalculator.registerCurrentResultObject(this.currResultObj);
  this.groupCalculator.registerPreviousResultObject(this.previewObj);
  return this.groupCalculator.getStartingGroup();
}",0.6055555555555555
66510,"public int getEndingGroupLevel() throws DataException {
  this.groupCalculator.registerNextResultObject(this.rowResultSet.getNext());
  return this.groupCalculator.getEndingGroup();
}","public int getEndingGroupLevel() throws DataException {
  this.groupCalculator.registerCurrentResultObject(this.currResultObj);
  this.groupCalculator.registerNextResultObject(this.rowResultSet.getNext());
  return this.groupCalculator.getEndingGroup();
}",0.8356164383561644
66511,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model.getColumnName(),dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=(DataSetHandle)model.getElementHandle();
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (Iterator iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
            ColumnHintHandle element=(ColumnHintHandle)iter.next();
            if (element.getColumnName().equals(str) || str.equals(element.getAlias())) {
              type=element.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn.getColumnName(),dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_COUNT);
        }
 else         if (DesignChoiceConstants.COLUMN_DATA_TYPE_STRING.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  ActionHandle actionHandle=UIUtil.getColumnAction(model);
  if (actionHandle != null) {
    List source=new ArrayList();
    source.add(actionHandle.getStructure());
    List newAction=ModelUtil.cloneStructList(source);
    dataHandle.setAction((Action)newAction.get(0));
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        int index=-1;
        if (target instanceof CellHandle) {
          CellHandle cellTarget=(CellHandle)target;
          CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
          index=cellAdapter.getColumnNumber();
        }
        return addGroupHandle(tableHandle,model.getColumnName(),dataHandle,index - 1);
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        DataSetHandle dataset=(DataSetHandle)model.getElementHandle();
        String str=UIUtil.getAnalysisColumn(model);
        String type=""String_Node_Str"";
        ResultSetColumnHandle newResultColumn=null;
        if (str != null) {
          List columnList=DataUtil.getColumnList(dataset);
          for (int i=0; i < columnList.size(); i++) {
            ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)columnList.get(i);
            if (str.equals(resultSetColumn.getColumnName())) {
              newResultColumn=resultSetColumn;
              break;
            }
          }
          for (Iterator iter=dataset.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator(); iter.hasNext(); ) {
            ColumnHintHandle element=(ColumnHintHandle)iter.next();
            if (element.getColumnName().equals(str) || str.equals(element.getAlias())) {
              type=element.getAnalysis();
              break;
            }
          }
          if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(type)) {
            boolean hasGroup=false;
            SlotHandle slotHandle=tableHandle.getGroups();
            for (            Object o : slotHandle.getContents()) {
              GroupHandle group=(GroupHandle)o;
              if (group.getName().equals(str))               hasGroup=true;
            }
            if (!hasGroup) {
              ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
              bindingColumn.setDataType(model.getDataType());
              ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
              String displayKey=UIUtil.getColumnDisplayNameKey(model);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              dataHandle.setResultSetColumn(model.getColumnName());
              bindingColumn=StructureFactory.newComputedColumn(tableHandle,newResultColumn.getColumnName());
              bindingColumn.setDataType(newResultColumn.getDataType());
              ExpressionUtility.setBindingColumnExpression(newResultColumn,bindingColumn);
              bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(newResultColumn));
              displayKey=UIUtil.getColumnDisplayNameKey(newResultColumn);
              if (displayKey != null)               bindingColumn.setDisplayNameID(displayKey);
              tableHandle.addColumnBinding(bindingColumn,false);
              int index=-1;
              if (target instanceof CellHandle) {
                CellHandle cellTarget=(CellHandle)target;
                CellHandleAdapter cellAdapter=HandleAdapterFactory.getInstance().getCellHandleAdapter(cellTarget);
                index=cellAdapter.getColumnNumber();
              }
              return addGroupHandle(tableHandle,newResultColumn.getColumnName(),dataHandle,index - 1);
            }
          }
        }
        if (target instanceof CellHandle) {
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          column.setDataType(model.getDataType());
          ExpressionUtility.setBindingColumnExpression(model,column);
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model))) {
        CellHandle cellHandle=(CellHandle)target;
        ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        ExpressionUtility.setBindingColumnExpression(model,column);
        column.setDataType(model.getDataType());
        ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,false);
        DesignElementHandle group=cellHandle.getContainer().getContainer();
        if (group instanceof GroupHandle) {
          binding.setAggregateOn(((GroupHandle)group).getName());
        }
 else {
          binding.setAggregateOn(null);
        }
        if (DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT.equals(model.getDataType()) || DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL.equals(model.getDataType())) {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
        }
 else {
          binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
        }
        dataHandle.setResultSetColumn(binding.getName());
        InsertInLayoutRule rule=new GroupKeySetRule(target,model);
        if (rule.canInsert()) {
          rule.insert(model);
        }
        return dataHandle;
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  ActionHandle actionHandle=UIUtil.getColumnAction(model);
  if (actionHandle != null) {
    List source=new ArrayList();
    source.add(actionHandle.getStructure());
    List newAction=ModelUtil.cloneStructList(source);
    dataHandle.setAction((Action)newAction.get(0));
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9891843385443726
66512,"public void update(AbstractArea area) throws BirtException {
  super.update(area);
  if (currentIP + area.getAllocatedWidth() > getContentWidth()) {
    setNeedClip(true);
  }
}","public void update(AbstractArea area) throws BirtException {
  super.update(area);
  if (currentIP + area.getAllocatedWidth() > getContentWidth() || area.getX() < 0) {
    setNeedClip(true);
  }
}",0.9490616621983914
66513,"public boolean canFinish(){
  return dataSetPage.canFinish() && columnDefPage.isPageComplete();
}","public boolean canFinish(){
  return dataSetPage.isPageComplete() && dataSetPage.canFinish() && columnDefPage.isPageComplete();
}",0.8584070796460177
66514,"public boolean canFinish(){
  try {
    if (m_designSession != null)     return m_designSession.getNewWizard().canFinish();
 else {
      if (this.nextPage != null) {
        return nextPage.isPageComplete() && isPageComplete();
      }
      return isPageComplete();
    }
  }
 catch (  OdaException e) {
    return false;
  }
}","public boolean canFinish(){
  if (!validStatus())   return false;
  try {
    if (m_designSession != null)     return m_designSession.getNewWizard().canFinish();
 else {
      if (this.nextPage != null) {
        return nextPage.isPageComplete();
      }
      return isPageComplete();
    }
  }
 catch (  OdaException e) {
    return false;
  }
}",0.849112426035503
66515,"public boolean canFinish(){
  return dataSetPage.isPageComplete() && dataSetPage.canFinish() && columnDefPage.isPageComplete();
}","public boolean canFinish(){
  return dataSetPage.canFinish() && columnDefPage.isPageComplete();
}",0.8584070796460177
66516,"private List convertDeleteList(List list){
  List retValue=new ArrayList();
  for (int i=0; i < list.size(); i++) {
    Object obj=list.get(i);
    if (obj instanceof IStructuredSelection) {
      List objs=((IStructuredSelection)obj).toList();
      for (int j=0; j < objs.size(); j++) {
        if (objs.get(j) instanceof SlotHandle) {
          List temsps=((SlotHandle)objs.get(j)).getContents();
          for (int k=0; k < temsps.size(); k++) {
            retValue.add(temsps.get(k));
          }
        }
 else         if (objs.get(j) instanceof MeasureGroupHandle) {
          retValue.addAll(((MeasureGroupHandle)objs.get(j)).getContents(MeasureGroupHandle.MEASURES_PROP));
        }
 else {
          retValue.add(objs.get(j));
        }
      }
    }
 else {
      retValue.add(obj);
    }
  }
  return retValue;
}","private List convertDeleteList(List list){
  List retValue=new ArrayList();
  for (int i=0; i < list.size(); i++) {
    Object obj=list.get(i);
    if (obj instanceof IStructuredSelection) {
      List objs=((IStructuredSelection)obj).toList();
      for (int j=0; j < objs.size(); j++) {
        if (objs.get(j) instanceof SlotHandle) {
          List temsps=((SlotHandle)objs.get(j)).getContents();
          for (int k=0; k < temsps.size(); k++) {
            retValue.add(temsps.get(k));
          }
        }
 else         if (objs.get(j) instanceof MeasureGroupHandle) {
          retValue.addAll(((MeasureGroupHandle)objs.get(j)).getContents(MeasureGroupHandle.MEASURES_PROP));
        }
 else {
          retValue.add(objs.get(j));
        }
      }
    }
 else     if (obj instanceof MeasureGroupHandle) {
      retValue.addAll(((MeasureGroupHandle)obj).getContents(MeasureGroupHandle.MEASURES_PROP));
    }
 else {
      retValue.add(obj);
    }
  }
  return retValue;
}",0.9109020475926952
66517,"/** 
 * @param source
 * @return
 */
public static PatternKey getPatterKey(String source){
  int colonNumber=0;
  int blankNumber=0;
  int hyphenNumber=0;
  int dotNumber=0;
  int timeZomeNumber=0;
  boolean beLastBlank=false;
  for (int i=0; i < source.length(); i++) {
switch (source.charAt(i)) {
case ':':
{
        beLastBlank=false;
        colonNumber++;
        break;
      }
case ' ':
{
      if (!beLastBlank) {
        blankNumber++;
      }
      beLastBlank=true;
      break;
    }
case '-':
{
    beLastBlank=false;
    if (blankNumber == 0) {
      hyphenNumber++;
    }
 else {
      timeZomeNumber++;
    }
    break;
  }
case '.':
{
  beLastBlank=false;
  dotNumber++;
  break;
}
case '+':
case 'z':
case 'Z':
{
beLastBlank=false;
timeZomeNumber++;
break;
}
}
if (timeZomeNumber > 0) {
break;
}
}
if (hyphenNumber == 0 && colonNumber == 0 && source.length() > 4) {
return null;
}
return (new PatternKey(colonNumber,blankNumber,hyphenNumber,dotNumber,timeZomeNumber));
}","/** 
 * @param source
 * @return
 */
public static PatternKey getPatterKey(String source){
  int colonNumber=0;
  int blankNumber=0;
  int hyphenNumber=0;
  int dotNumber=0;
  int timeZomeNumber=0;
  boolean beLastBlank=false;
  for (int i=0; i < source.length(); i++) {
switch (source.charAt(i)) {
case ':':
{
        beLastBlank=false;
        colonNumber++;
        break;
      }
case ' ':
{
      if (!beLastBlank) {
        blankNumber++;
      }
      beLastBlank=true;
      break;
    }
case '-':
{
    beLastBlank=false;
    if (blankNumber == 0) {
      hyphenNumber++;
    }
 else {
      timeZomeNumber++;
    }
    break;
  }
case '.':
{
  beLastBlank=false;
  dotNumber++;
  break;
}
case '+':
case 'z':
case 'Z':
{
beLastBlank=false;
timeZomeNumber++;
break;
}
}
if (timeZomeNumber > 0) {
break;
}
}
if (hyphenNumber == 0 && colonNumber == 0 && !isValidYear(source)) {
return null;
}
return (new PatternKey(colonNumber,blankNumber,hyphenNumber,dotNumber,timeZomeNumber));
}",0.9802731411229136
66518,"public ModelDteApiAdapter(ExecutionContext context) throws BirtException {
  this.context=context;
  this.jsScope=((IDataScriptEngine)context.getScriptContext().getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(context.getScriptContext());
}","public ModelDteApiAdapter(ExecutionContext context) throws BirtException {
  this.context=context;
  scriptContext=context.getScriptContext();
  this.jsScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
}",0.7644787644787645
66519,"protected IExtractionResults extractQuery(DataSetHandle dataset) throws BirtException {
  QueryDefinition newQuery=constructQuery(dataset);
  DataRequestSession session=executionContext.getDataEngine().getDTESession();
  ModelDteApiAdapter apiAdapter=new ModelDteApiAdapter(executionContext);
  apiAdapter.defineDataSet(dataset,session);
  session.registerQueries(new IQueryDefinition[]{newQuery});
  IBasePreparedQuery preparedQuery=session.prepare(newQuery);
  IQueryResults result=(IQueryResults)session.execute(preparedQuery,null,executionContext.getScriptContext());
  ResultMetaData metadata=new ResultMetaData(result.getResultMetaData());
  return new ExtractionResults(result,metadata,null,0,maxRow);
}","protected IExtractionResults extractQuery(DataSetHandle dataset) throws BirtException {
  QueryDefinition newQuery=constructQuery(dataset);
  DataRequestSession session=executionContext.getDataEngine().getDTESession();
  ModelDteApiAdapter apiAdapter=new ModelDteApiAdapter(executionContext);
  apiAdapter.defineDataSet(dataset,session);
  session.registerQueries(new IQueryDefinition[]{newQuery});
  IBasePreparedQuery preparedQuery=session.prepare(newQuery);
  IQueryResults result=(IQueryResults)session.execute(preparedQuery,null,executionContext.getScriptContext());
  ResultMetaData metadata=new ResultMetaData(result.getResultMetaData());
  apiAdapter.close();
  return new ExtractionResults(result,metadata,null,0,maxRow);
}",0.984743411927878
66520,"public void shutdown(){
  dteSession.shutdown();
  queryCache.close();
  if (factory != null) {
    factory.closeDataEngine(this);
  }
}","public void shutdown(){
  dteSession.shutdown();
  queryCache.close();
  adapter.close();
  if (factory != null) {
    factory.closeDataEngine(this);
  }
}",0.9347079037800688
66521,"private IRunAndRenderTask createRunAndRenderTask(IReportRunnable runnable,OutputStream outputStream,InputOptions inputOptions,Map parameters,Boolean embeddable,List activeIds,RenderOption aRenderOption,Map displayTexts,String reportTitle,Integer maxRows) throws ReportServiceException {
  RenderOption renderOption=aRenderOption;
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRunAndRenderTask runAndRenderTask=engine.createRunAndRenderTask(runnable);
  runAndRenderTask.setLocale(locale);
  com.ibm.icu.util.TimeZone tz=BirtUtility.toICUTimeZone(timeZone);
  if (tz != null) {
    runAndRenderTask.setTimeZone(tz);
  }
  if (parameters != null) {
    runAndRenderTask.setParameterValues(parameters);
  }
  if (displayTexts != null) {
    Iterator keys=displayTexts.keySet().iterator();
    while (keys.hasNext()) {
      String paramName=DataUtil.getString(keys.next());
      String displayText=DataUtil.getString(displayTexts.get(paramName));
      runAndRenderTask.setParameterDisplayText(paramName,displayText);
    }
  }
  if (maxRows != null)   runAndRenderTask.setMaxRowsPerQuery(maxRows.intValue());
  Map context=BirtUtility.getAppContext(request);
  runAndRenderTask.setAppContext(context);
  ViewerHTMLActionHandler handler=new ViewerHTMLActionHandler(locale,timeZone,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
  handler.setPageOverflow(Integer.toString(pageOverflow));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  IViewingSession session=ViewingSessionUtil.getSession(request);
  if (!ParameterAccessor.isPDFLayout(format)) {
    if (session != null) {
      handler.setViewingSessionId(session.getId());
    }
 else {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
  }
  if (renderOption == null) {
    if (ParameterAccessor.isPDFLayout(format)) {
      renderOption=createPDFRenderOption(servletPath,request,pageOverflow,isDesigner);
    }
 else {
      if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))       svgFlag=false;
      renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
    }
  }
  renderOption.setOutputStream(outputStream);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
  renderOption.setActionHandler(handler);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  if (renderOption instanceof IHTMLRenderOption) {
    boolean isEmbeddable=false;
    if (embeddable != null)     isEmbeddable=embeddable.booleanValue();
    if (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
  }
  renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
  initializeEmitterConfigs(request,renderOption.getOptions());
  runAndRenderTask.setRenderOption(renderOption);
  return runAndRenderTask;
}","private IRunAndRenderTask createRunAndRenderTask(IReportRunnable runnable,OutputStream outputStream,InputOptions inputOptions,Map parameters,Boolean embeddable,List activeIds,RenderOption aRenderOption,Map displayTexts,String reportTitle,Integer maxRows) throws ReportServiceException {
  RenderOption renderOption=aRenderOption;
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRunAndRenderTask runAndRenderTask=engine.createRunAndRenderTask(runnable);
  runAndRenderTask.setLocale(locale);
  com.ibm.icu.util.TimeZone tz=BirtUtility.toICUTimeZone(timeZone);
  if (tz != null) {
    runAndRenderTask.setTimeZone(tz);
  }
  if (parameters != null) {
    runAndRenderTask.setParameterValues(parameters);
  }
  if (displayTexts != null) {
    Iterator keys=displayTexts.keySet().iterator();
    while (keys.hasNext()) {
      String paramName=DataUtil.getString(keys.next());
      String displayText=DataUtil.getString(displayTexts.get(paramName));
      runAndRenderTask.setParameterDisplayText(paramName,displayText);
    }
  }
  if (maxRows != null)   runAndRenderTask.setMaxRowsPerQuery(maxRows.intValue());
  Map context=BirtUtility.getAppContext(request);
  runAndRenderTask.setAppContext(context);
  ViewerHTMLActionHandler handler=new ViewerHTMLActionHandler(locale,timeZone,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
  handler.setPageOverflow(pageOverflow);
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  IViewingSession session=ViewingSessionUtil.getSession(request);
  if (!ParameterAccessor.isPDFLayout(format)) {
    if (session != null) {
      handler.setViewingSessionId(session.getId());
    }
 else {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
  }
  if (renderOption == null) {
    if (ParameterAccessor.isPDFLayout(format)) {
      renderOption=createPDFRenderOption(servletPath,request,pageOverflow,isDesigner);
    }
 else {
      if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))       svgFlag=false;
      renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
    }
  }
  renderOption.setOutputStream(outputStream);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
  renderOption.setActionHandler(handler);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  if (renderOption instanceof IHTMLRenderOption) {
    boolean isEmbeddable=false;
    if (embeddable != null)     isEmbeddable=embeddable.booleanValue();
    if (IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
  }
  renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
  initializeEmitterConfigs(request,renderOption.getOptions());
  runAndRenderTask.setRenderOption(renderOption);
  return runAndRenderTask;
}",0.9978048780487804
66522,"/** 
 * Creates a new render task and configure it.
 * @param out output stream
 * @param reportDocument report document
 * @param inputOptions input options
 * @param pageNumber page number
 * @param activeIds active IDs
 * @return configured render task
 * @throws ViewingSessionExpiredException
 */
private IRenderTask createRenderTask(OutputStream out,IReportDocument reportDocument,InputOptions inputOptions,long pageNumber,List activeIds) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  if (reportDocument == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
  }
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,pageOverflow,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,false,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,isEmbeddable,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    handler.setViewingSessionId(session.getId());
  }
  handler.setPageOverflow(Integer.toString(pageOverflow));
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  if (pageNumber >= 0) {
    initializeEmitterConfigs(request,renderOption.getOptions());
  }
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  com.ibm.icu.util.TimeZone tz=BirtUtility.toICUTimeZone(timeZone);
  if (tz != null) {
    renderTask.setTimeZone(tz);
  }
  return renderTask;
}","/** 
 * Creates a new render task and configure it.
 * @param out output stream
 * @param reportDocument report document
 * @param inputOptions input options
 * @param pageNumber page number
 * @param activeIds active IDs
 * @return configured render task
 * @throws ViewingSessionExpiredException
 */
private IRenderTask createRenderTask(OutputStream out,IReportDocument reportDocument,InputOptions inputOptions,long pageNumber,List activeIds) throws ReportServiceException {
  HttpServletRequest request=(HttpServletRequest)inputOptions.getOption(InputOptions.OPT_REQUEST);
  Locale locale=(Locale)inputOptions.getOption(InputOptions.OPT_LOCALE);
  TimeZone timeZone=(TimeZone)inputOptions.getOption(InputOptions.OPT_TIMEZONE);
  Boolean isMasterPageContent=(Boolean)inputOptions.getOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT);
  boolean masterPage=isMasterPageContent == null ? true : isMasterPageContent.booleanValue();
  Boolean svgFlag=(Boolean)inputOptions.getOption(InputOptions.OPT_SVG_FLAG);
  String format=(String)inputOptions.getOption(InputOptions.OPT_FORMAT);
  String emitterId=(String)inputOptions.getOption(InputOptions.OPT_EMITTER_ID);
  String iServletPath=(String)inputOptions.getOption(InputOptions.OPT_SERVLET_PATH);
  boolean rtl=isRtl(inputOptions);
  boolean isDesigner=isDesigner(inputOptions);
  int pageOverflow=getPageOverflow(inputOptions);
  if (reportDocument == null) {
    throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
  }
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (ParameterAccessor.isPDFLayout(format)) {
    renderOption=createPDFRenderOption(servletPath,request,pageOverflow,ParameterAccessor.isDesigner());
  }
 else {
    if (!IBirtConstants.HTML_RENDER_FORMAT.equalsIgnoreCase(format))     svgFlag=false;
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new IllegalStateException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request,session);
  }
  if (!IBirtConstants.EXCEL_RENDER_FORMAT.equalsIgnoreCase(format)) {
    ((IRenderOption)renderOption).setOption(IRenderOption.HTML_PAGINATION,Boolean.TRUE);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  renderOption.setEmitterID(emitterId);
  ViewerHTMLActionHandler handler=null;
  if (ParameterAccessor.isPDFLayout(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,false,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,Boolean.valueOf(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,timeZone,isEmbeddable,rtl,masterPage,format,Boolean.valueOf(svgFlag),Boolean.toString(isDesigner));
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new ReportServiceException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    handler.setViewingSessionId(session.getId());
  }
  handler.setPageOverflow(pageOverflow);
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  if (pageNumber >= 0) {
    initializeEmitterConfigs(request,renderOption.getOptions());
  }
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  com.ibm.icu.util.TimeZone tz=BirtUtility.toICUTimeZone(timeZone);
  if (tz != null) {
    renderTask.setTimeZone(tz);
  }
  return renderTask;
}",0.9980846988721004
66523,"/** 
 * @param pageOverflow the pageOverflow to set
 */
public void setPageOverflow(String pageOverflow){
  this.pageOverflow=pageOverflow;
}","/** 
 * @param pageOverflow the pageOverflow to set
 */
public void setPageOverflow(int pageOverflow){
  this.pageOverflow=pageOverflow;
}",0.982078853046595
66524,"/** 
 * @return the pageOverflow
 */
public String getPageOverflow(){
  return pageOverflow;
}","/** 
 * @return the pageOverflow
 */
public int getPageOverflow(){
  return pageOverflow;
}",0.972972972972973
66525,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=getBaseUrl(context);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (timeZone != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_TIMEZONE,timeZone.getID()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  if (pageOverflow != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,pageOverflow));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=getBaseUrl(context);
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0 || baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (timeZone != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_TIMEZONE,timeZone.getID()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  if (svg != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
  }
  if (isDesigner != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
  }
  if (pageOverflow > 0) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,String.valueOf(pageOverflow)));
  }
  if (isMasterPageContent != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(isMasterPageContent)));
  }
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9897021987197328
66526,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=getBaseUrl(context);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            if (valueObj instanceof List) {
              if (((List)valueObj).size() == 1) {
                valueObj=((List)valueObj).get(0);
              }
 else {
                valueObj=((List)valueObj).toArray();
              }
            }
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i],timeZone);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(IBirtConstants.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (timeZone != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_TIMEZONE,timeZone.getID()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    if (pageOverflow != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,pageOverflow));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            options.setOption(InputOptions.OPT_TIMEZONE,timeZone);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          if (bookmark != null) {
            link.append(""String_Node_Str"");
            link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
          }
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=getBaseUrl(context);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            if (valueObj instanceof List) {
              if (((List)valueObj).size() == 1) {
                valueObj=((List)valueObj).get(0);
              }
 else {
                valueObj=((List)valueObj).toArray();
              }
            }
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i],timeZone);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(IBirtConstants.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (timeZone != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_TIMEZONE,timeZone.getID()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    if (pageOverflow > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,String.valueOf(pageOverflow)));
    }
    if (isMasterPageContent != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(isMasterPageContent)));
    }
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            options.setOption(InputOptions.OPT_TIMEZONE,timeZone);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          if (bookmark != null) {
            link.append(""String_Node_Str"");
            link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
          }
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9915394519036234
66527,"/** 
 * Constructor. This is for runAndRender task.
 * @param locale
 * @param isEmbeddable
 * @param isRtl
 * @param isMasterPageContent
 * @param format
 * @param svg
 * @param isDesigner
 */
public ViewerHTMLActionHandler(Locale locale,TimeZone timeZone,boolean isRtl,boolean isMasterPageContent,String format,Boolean svg,String isDesigner){
  this.locale=locale;
  this.timeZone=timeZone;
  this.isRtl=isRtl;
  this.isMasterPageContent=isMasterPageContent;
  this.hostFormat=format;
  this.svg=svg;
  this.isDesigner=isDesigner;
}","/** 
 * Constructor. This is for runAndRender task.
 * @param locale
 * @param isEmbeddable
 * @param isRtl
 * @param isMasterPageContent
 * @param format
 * @param svg
 * @param isDesigner
 */
public ViewerHTMLActionHandler(Locale locale,TimeZone timeZone,boolean isRtl,boolean isMasterPageContent,String format,Boolean svg,String isDesigner){
  this.locale=locale;
  this.timeZone=timeZone;
  this.isRtl=isRtl;
  this.isMasterPageContent=isMasterPageContent ? null : Boolean.FALSE;
  this.hostFormat=format;
  this.svg=svg ? Boolean.TRUE : null;
  this.isDesigner=isDesigner;
}",0.936208445642408
66528,"/** 
 * Used in the filter select value dialog in dataset editor
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle,boolean useDataSetFilter) throws BirtException {
}","/** 
 * Used in the filter select value dialog in dataset editor
 * @param expression
 * @param dataSetHandle
 * @param binding
 * @param useDataSetFilter
 * @return
 * @throws BirtException
 */
public static List getSelectValueList(Expression expression,DataSetHandle dataSetHandle,boolean useDataSetFilter) throws BirtException {
  ScriptExpression expr=null;
  DataSetHandle targetHandle=dataSetHandle;
  Map appContext=new HashMap();
  DataSetPreviewer previewer=null;
  try {
    if (!useDataSetFilter) {
      IDesignElement element=dataSetHandle.copy();
      ((DataSet)element).setProperty(IDataSetModel.FILTER_PROP,new ArrayList());
      targetHandle=ExternalUIUtil.newDataSetHandle(dataSetHandle,(DesignElement)element);
    }
    previewer=new DataSetPreviewer(targetHandle,0,PreviewType.RESULTSET);
    DataModelAdapter adapter=new DataModelAdapter(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,targetHandle.getModuleHandle()));
    expr=adapter.adaptExpression(expression);
    boolean startsWithRow=ExpressionUtility.isColumnExpression(expr.getText(),true);
    boolean startsWithDataSetRow=ExpressionUtility.isColumnExpression(expr.getText(),false);
    if (!startsWithRow && !startsWithDataSetRow) {
      throw new DataException(Messages.getString(""String_Node_Str""));
    }
    String dataSetColumnName=null;
    if (startsWithDataSetRow) {
      dataSetColumnName=ExpressionUtil.getColumnName(expr.getText());
    }
 else {
      dataSetColumnName=ExpressionUtil.getColumnBindingName(expr.getText());
    }
    ResourceIdentifiers identifiers=new ResourceIdentifiers();
    String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
    identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
    identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
    appContext.put(resouceIDs,identifiers);
    AppContextPopulator.populateApplicationContext(targetHandle,appContext);
    previewer.open(appContext,getEngineConfig(targetHandle.getModuleHandle()));
    IResultIterator itr=previewer.preview();
    Set visitedValues=new HashSet();
    Object value=null;
    while (itr.next()) {
      if (visitedValues.size() > 10000) {
        break;
      }
      value=itr.getValue(dataSetColumnName);
      if (!visitedValues.contains(value)) {
        visitedValues.add(value);
      }
    }
    if (visitedValues.isEmpty())     return Collections.EMPTY_LIST;
    return new ArrayList(visitedValues);
  }
  finally {
    AppContextResourceReleaser.release(appContext);
    if (previewer != null)     previewer.close();
  }
}",0.2245448415374241
66529,"protected IExtractionResults extractQuery(DataSetHandle dataset) throws BirtException {
  QueryDefinition newQuery=constructQuery(dataset);
  DataRequestSession session=executionContext.getDataEngine().getDTESession();
  ModelDteApiAdapter apiAdapter=new ModelDteApiAdapter(executionContext);
  apiAdapter.defineDataSet(dataset,session);
  session.registerQueries(new IQueryDefinition[]{newQuery});
  IBasePreparedQuery preparedQuery=session.prepare(newQuery);
  IQueryResults result=(IQueryResults)session.execute(preparedQuery,null,executionContext.getScriptContext());
  ResultMetaData metadata=new ResultMetaData(result.getResultMetaData());
  apiAdapter.close();
  return new ExtractionResults(result,metadata,null,0,maxRow);
}","protected IExtractionResults extractQuery(DataSetHandle dataset) throws BirtException {
  QueryDefinition newQuery=constructQuery(dataset);
  DataRequestSession session=executionContext.getDataEngine().getDTESession();
  final ModelDteApiAdapter apiAdapter=new ModelDteApiAdapter(executionContext);
  apiAdapter.defineDataSet(dataset,session);
  session.registerQueries(new IQueryDefinition[]{newQuery});
  IBasePreparedQuery preparedQuery=session.prepare(newQuery);
  IQueryResults result=(IQueryResults)session.execute(preparedQuery,null,executionContext.getScriptContext());
  ResultMetaData metadata=new ResultMetaData(result.getResultMetaData());
  return new ExtractionResults(result,metadata,null,0,maxRow){
    public void close(){
      super.close();
      apiAdapter.close();
    }
  }
;
}",0.9242819843342036
66530,"protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  boolean rtl=content.isDirectionRTL();
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      if (computedStyle != null && computedStyle.getFontFamily() != null) {
        fontFamily=mapGenericFont(computedStyle.getFontFamily());
      }
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth,rtl);
    }
 else {
      int level=rtl ? 1 : 0;
      BidiSplitter bidiSplitter=new BidiSplitter(new Chunk(txt,0,level,level));
      if (bidiSplitter.hasMore()) {
        do {
          Chunk ch=bidiSplitter.getNext();
          level=ch.getRunLevel();
          FontSplitter fontSplitter=getFontSplitter(content,ch.getText());
          while (fontSplitter.hasMore()) {
            ch=fontSplitter.getNext();
            wordWriter.writeContent(type,ch.getText(),computedStyle,inlineStyle,getFontFamily(computedStyle,ch),hyper,inlineFlag,textFlag,paragraphWidth,(level & 1) != 0 || !rtl && level > 0);
            textFlag=fontSplitter.hasMore() || bidiSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
          }
        }
 while (bidiSplitter.hasMore());
      }
 else {
        FontSplitter fontSplitter=getFontSplitter(content,((TextContent)content).getText());
        while (fontSplitter.hasMore()) {
          Chunk ch=fontSplitter.getNext();
          int offset=ch.getOffset();
          int length=ch.getLength();
          fontFamily=getFontFamily(computedStyle,ch);
          String string=null;
          if (ch == Chunk.HARD_LINE_BREAK) {
            string=ch.getText();
          }
 else {
            string=txt.substring(offset,offset + length);
          }
          wordWriter.writeContent(type,string,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth,rtl);
          textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
        }
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth,rtl);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth,rtl);
  }
}","protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  boolean rtl=content.isDirectionRTL();
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      if (computedStyle != null && computedStyle.getFontFamily() != null) {
        fontFamily=mapGenericFont(computedStyle.getFontFamily());
      }
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth,rtl);
    }
 else {
      int level=rtl ? 1 : 0;
      BidiSplitter bidiSplitter=new BidiSplitter(new Chunk(txt,0,level,level));
      if (bidiSplitter.hasMore()) {
        do {
          Chunk ch=bidiSplitter.getNext();
          level=ch.getRunLevel();
          FontSplitter fontSplitter=getFontSplitter(content,ch.getText());
          while (fontSplitter.hasMore()) {
            ch=fontSplitter.getNext();
            wordWriter.writeContent(type,ch.getText(),computedStyle,inlineStyle,getFontFamily(computedStyle,ch),hyper,inlineFlag,textFlag,paragraphWidth,(level & 1) != 0 || !rtl && level > 0);
            textFlag=fontSplitter.hasMore() || bidiSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
          }
        }
 while (bidiSplitter.hasMore());
      }
 else {
        FontSplitter fontSplitter=getFontSplitter(content,((TextContent)content).getText());
        while (fontSplitter.hasMore()) {
          Chunk ch=fontSplitter.getNext();
          int offset=ch.getOffset();
          int length=ch.getLength();
          fontFamily=getFontFamily(computedStyle,ch);
          String string=null;
          if (ch instanceof LineBreakChunk) {
            string=ch.getText();
          }
 else {
            string=txt.substring(offset,offset + length);
          }
          wordWriter.writeContent(type,string,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth,rtl);
          textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
        }
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth,rtl);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth,rtl);
  }
}",0.9924812030075189
66531,"private Chunk processLineBreak(){
  Chunk lineBreakChunk=null;
  if (chunkText[currentPos] == '\n') {
    lineBreakChunk=Chunk.HARD_LINE_BREAK;
    lineBreakChunk.setText(""String_Node_Str"");
    lineBreakChunk.setOffset(currentPos);
  }
 else   if (chunkText[currentPos] == '\r') {
    lineBreakChunk=Chunk.HARD_LINE_BREAK;
    lineBreakChunk.setOffset(currentPos);
    if (currentPos + 1 < chunkText.length && chunkText[currentPos + 1] == '\n') {
      lineBreakChunk.setText(""String_Node_Str"");
    }
 else {
      lineBreakChunk.setText(""String_Node_Str"");
    }
  }
  if (lineBreakChunk != null) {
    return processLineBreak(lineBreakChunk);
  }
  return null;
}","private Chunk processLineBreak(){
  Chunk lineBreakChunk=null;
  if (chunkText[currentPos] == '\n') {
    lineBreakChunk=new LineBreakChunk(""String_Node_Str"");
    lineBreakChunk.setOffset(currentPos);
  }
 else   if (chunkText[currentPos] == '\r') {
    lineBreakChunk=new LineBreakChunk(""String_Node_Str"");
    lineBreakChunk.setOffset(currentPos);
    if (currentPos + 1 < chunkText.length && chunkText[currentPos + 1] == '\n') {
      lineBreakChunk.setText(""String_Node_Str"");
    }
 else {
      lineBreakChunk.setText(""String_Node_Str"");
    }
  }
  if (lineBreakChunk != null) {
    return processLineBreak(lineBreakChunk);
  }
  return null;
}",0.9097801364670204
66532,"private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    if (isEmptyWordVestige(wordVestige)) {
      offset+=wordVestige.getLength();
      wordVestige=null;
      return null;
    }
 else {
      lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
      TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
      textArea.setMaxWidth(maxLineWidth);
      textArea.setWidth(0);
      addWordIntoTextArea(textArea,wordVestige);
      return textArea;
    }
  }
  if (null != remainWord) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk == Chunk.HARD_LINE_BREAK) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
        lineBreakCollapse=LINE_BREAK_COLLAPSE_OCCUPIED;
      }
      return textArea;
    }
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    fontInfo=chunk.getFontInfo();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
  }
  TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}","private TextArea getNextTextArea(int maxLineWidth){
  if (null != wordVestige) {
    if (isEmptyWordVestige(wordVestige)) {
      offset+=wordVestige.getLength();
      wordVestige=null;
      return null;
    }
 else {
      lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
      TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
      textArea.setMaxWidth(maxLineWidth);
      textArea.setWidth(0);
      addWordIntoTextArea(textArea,wordVestige);
      return textArea;
    }
  }
  if (null != remainWord) {
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
    textArea.setMaxWidth(maxLineWidth);
    textArea.setWidth(0);
    addWordIntoTextArea(textArea,remainWord);
    remainWord=null;
    return textArea;
  }
  if (null == remainWords || !remainWords.hasWord()) {
    Chunk chunk=remainChunks.getNext();
    if (chunk instanceof LineBreakChunk) {
      FontHandler handler=new FontHandler(fontManager,textContent,false);
      TextArea textArea=createTextArea(textContent,handler.getFontInfo(),true);
      textArea.setTextLength(chunk.getLength());
      hasLineBreak=true;
      if (lineBreakCollapse == LINE_BREAK_COLLAPSE_STANDING_BY) {
        lineBreakCollapse=LINE_BREAK_COLLAPSE_OCCUPIED;
      }
      return textArea;
    }
    lineBreakCollapse=LINE_BREAK_COLLAPSE_FREE;
    fontInfo=chunk.getFontInfo();
    runLevel=chunk.getRunLevel();
    remainWords=new WordRecognizerWrapper(chunk.getText(),context.getLocale());
  }
  TextArea textArea=createTextArea(textContent,offset,runLevel,fontInfo);
  textArea.setMaxWidth(maxLineWidth);
  textArea.setWidth(0);
  addWordsIntoTextArea(textArea,remainWords);
  return textArea;
}",0.9864670313849696
66533,"public List<IBookmarkInfo> getBookmarkInfos(Locale locale) throws EngineException {
  if (!isComplete()) {
    return null;
  }
  ArrayList<IBookmarkInfo> results=new ArrayList<IBookmarkInfo>();
  loadCoreStreamLazily();
  if (indexReader != null) {
    try {
      List<BookmarkContent> bookmarks=indexReader.getBookmarkContents();
      if (bookmarks == null) {
        return null;
      }
      ReportDesignHandle report=this.getReportDesign();
      for (      BookmarkContent bookmark : bookmarks) {
        long designId=bookmark.getElementId();
        DesignElementHandle handle=report.getElementByID(designId);
        if (handle == null)         continue;
        String elementType=handle.getDefn().getName();
        String displayName=null;
        if (handle instanceof ReportItemHandle) {
          displayName=((ReportItemHandle)handle).getBookmarkDisplayName();
        }
        if (locale != null) {
          if (handle instanceof ReportElementHandle) {
            ReportElementHandle elementHandle=(ReportElementHandle)handle;
            displayName=ModuleUtil.getExternalizedValue(elementHandle,bookmark.getBookmark(),displayName,ULocale.forLocale(locale));
          }
        }
        results.add(new BookmarkInfo(bookmark.getBookmark(),displayName,elementType));
      }
    }
 catch (    IOException ex) {
      throw new EngineException(MessageConstants.BOOKMARK_FETCHING_EXCEPTION,ex);
    }
  }
  return results;
}","public List<IBookmarkInfo> getBookmarkInfos(Locale locale) throws EngineException {
  if (!isComplete()) {
    return null;
  }
  ArrayList<IBookmarkInfo> results=new ArrayList<IBookmarkInfo>();
  loadCoreStreamLazily();
  if (indexReader != null) {
    try {
      List<BookmarkContent> bookmarks=indexReader.getBookmarkContents();
      if (bookmarks == null) {
        return null;
      }
      ReportDesignHandle report=this.getReportDesign();
      for (      BookmarkContent bookmark : bookmarks) {
        String bookmarkString=bookmark.getBookmark();
        if (bookmarkString.startsWith(ExecutorManager.BOOKMARK_PREFIX)) {
          continue;
        }
        long designId=bookmark.getElementId();
        DesignElementHandle handle=report.getElementByID(designId);
        if (handle == null)         continue;
        String elementType=handle.getDefn().getName();
        String displayName=null;
        if (handle instanceof ReportItemHandle) {
          displayName=((ReportItemHandle)handle).getBookmarkDisplayName();
        }
        if (locale != null) {
          if (handle instanceof ReportElementHandle) {
            ReportElementHandle elementHandle=(ReportElementHandle)handle;
            displayName=ModuleUtil.getExternalizedValue(elementHandle,bookmarkString,displayName,ULocale.forLocale(locale));
          }
        }
        results.add(new BookmarkInfo(bookmarkString,displayName,elementType));
      }
    }
 catch (    IOException ex) {
      throw new EngineException(MessageConstants.BOOKMARK_FETCHING_EXCEPTION,ex);
    }
  }
  return results;
}",0.9347826086956522
66534,"@Override public void doSave(StreamManager manager) throws DataException {
  this.streamManager=manager;
  if (this.streamManager != null) {
    this.tempOutput=(RAOutputStream)streamManager.getOutStream(DataEngineContext.PROGRESSIVE_VIEWING_GROUP_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    try {
      IOUtil.writeInt(this.tempOutput,this.groupBys.length);
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
}","public void doSave(StreamManager manager) throws DataException {
  this.streamManager=manager;
  if (this.streamManager != null) {
    this.tempOutput=(RAOutputStream)streamManager.getOutStream(DataEngineContext.PROGRESSIVE_VIEWING_GROUP_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    try {
      IOUtil.writeInt(this.tempOutput,this.groupBys.length);
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
}",0.9895397489539748
66535,"@Override public int getEndingGroup() throws DataException {
  return this.getBreakingGroup(current,next);
}","public int getEndingGroup() throws DataException {
  return this.getBreakingGroup(current,next);
}",0.9514563106796116
66536,"@Override public int getStartingGroup() throws DataException {
  return this.getBreakingGroup(previous,current);
}","public int getStartingGroup() throws DataException {
  return this.getBreakingGroup(previous,current);
}",0.9541284403669724
66537,"@Override public void close() throws DataException {
  try {
    if (this.tempOutput != null) {
      this.tempOutput.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public void close() throws DataException {
  try {
    if (this.tempOutput != null) {
      this.tempOutput.close();
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9772727272727272
66538,"@Override public void registerPreviousResultObject(IResultObject previous){
  this.previous=previous;
}","public void registerPreviousResultObject(IResultObject previous){
  this.previous=previous;
}",0.9489795918367347
66539,"@Override public void registerCurrentResultObject(IResultObject current){
  this.current=current;
}","public void registerCurrentResultObject(IResultObject current){
  this.current=current;
}",0.946808510638298
66540,"@Override public void registerNextResultObject(IResultObject next){
  this.next=next;
}","public void registerNextResultObject(IResultObject next){
  this.next=next;
}",0.9390243902439024
66541,"@Override public void next(boolean hasNext) throws DataException {
}","public void next(boolean hasNext) throws DataException {
}",0.9206349206349206
66542,"@Override public int[] getGroupStartAndEndIndex(int groupIndex) throws DataException {
  if (this.groupStartingEndingIndex != null)   return this.groupStartingEndingIndex.get(groupIndex);
  this.groupStartingEndingIndex=new ArrayList<int[]>();
  List<List<Integer>> temp=new ArrayList<List<Integer>>();
  for (int i=0; i <= this.groupCount; i++)   temp.add(new ArrayList<Integer>());
  for (int i=0; i < this.cacheProvider.getCount(); i++) {
    int starting=this.getStartingGroupLevel(i);
    int ending=this.getEndingGroupLevel(i);
    for (int j=starting; j < temp.size(); j++) {
      temp.get(j).add(i);
    }
    for (int j=ending; j < temp.size(); j++) {
      temp.get(j).add(i + 1);
    }
  }
  for (int i=0; i < temp.size(); i++) {
    List<Integer> tempArray=temp.get(i);
    int[] startingEnding=new int[tempArray.size()];
    for (int j=0; j < tempArray.size(); j++)     startingEnding[j]=tempArray.get(j);
    this.groupStartingEndingIndex.add(startingEnding);
  }
  return this.groupStartingEndingIndex.get(groupIndex);
}","public int[] getGroupStartAndEndIndex(int groupIndex) throws DataException {
  if (this.groupStartingEndingIndex != null)   return this.groupStartingEndingIndex.get(groupIndex);
  this.groupStartingEndingIndex=new ArrayList<int[]>();
  List<List<Integer>> temp=new ArrayList<List<Integer>>();
  for (int i=0; i <= this.groupCount; i++)   temp.add(new ArrayList<Integer>());
  for (int i=0; i < this.cacheProvider.getCount(); i++) {
    int starting=this.getStartingGroupLevel(i);
    int ending=this.getEndingGroupLevel(i);
    for (int j=starting; j < temp.size(); j++) {
      temp.get(j).add(i);
    }
    for (int j=ending; j < temp.size(); j++) {
      temp.get(j).add(i + 1);
    }
  }
  for (int i=0; i < temp.size(); i++) {
    List<Integer> tempArray=temp.get(i);
    int[] startingEnding=new int[tempArray.size()];
    for (int j=0; j < tempArray.size(); j++)     startingEnding[j]=tempArray.get(j);
    this.groupStartingEndingIndex.add(startingEnding);
  }
  return this.groupStartingEndingIndex.get(groupIndex);
}",0.9951503394762368
66543,"@Override public void move() throws DataException {
}","public void move() throws DataException {
}",0.8958333333333334
66544,"@Override public int getEndingGroupLevel() throws DataException {
  return this.getEndingGroupLevel(this.cacheProvider.getCurrentIndex());
}","public int getEndingGroupLevel() throws DataException {
  return this.getEndingGroupLevel(this.cacheProvider.getCurrentIndex());
}",0.9629629629629628
66545,"@Override public void last(int groupLevel) throws DataException {
  if (this.getEndingGroupLevel() <= groupLevel)   return;
 else {
    while (this.cacheProvider.next()) {
      if (this.getEndingGroupLevel() <= groupLevel)       return;
    }
  }
}","public void last(int groupLevel) throws DataException {
  if (this.getEndingGroupLevel() <= groupLevel)   return;
 else {
    while (this.cacheProvider.next()) {
      if (this.getEndingGroupLevel() <= groupLevel)       return;
    }
  }
}",0.9795081967213116
66546,"@Override public int getStartingGroupLevel() throws DataException {
  return this.getStartingGroupLevel(this.cacheProvider.getCurrentIndex());
}","public int getStartingGroupLevel() throws DataException {
  return this.getStartingGroupLevel(this.cacheProvider.getCurrentIndex());
}",0.9640287769784172
66547,"@Override public void setCacheProvider(CacheProvider cacheProvider){
  this.cacheProvider=cacheProvider;
}","public void setCacheProvider(CacheProvider cacheProvider){
  this.cacheProvider=cacheProvider;
}",0.9504950495049505
66548,"@Override public int getCurrentGroupIndex(int groupLevel) throws DataException {
  throw new UnsupportedOperationException();
}","public int getCurrentGroupIndex(int groupLevel) throws DataException {
  throw new UnsupportedOperationException();
}",0.9590163934426228
66549,"@Override public void close() throws DataException {
  try {
    if (this.inputStream != null) {
      this.inputStream.close();
      this.inputStream=null;
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public void close() throws DataException {
  try {
    if (this.inputStream != null) {
      this.inputStream.close();
      this.inputStream=null;
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9800796812749004
66550,"/** 
 * Save the current list in memory to disk.
 * @throws DataException 
 * @throws FileNotFoundException
 * @throws IOException
 */
private void saveToDisk() throws DataException {
  try {
    File cacheFile=null;
    if (currentCacheNo < fileList.size()) {
      cacheFile=(File)(fileList.get(currentCacheNo));
    }
 else {
      cacheFile=getCacheFile(this.currentCacheNo);
      fileList.add(cacheFile);
    }
    FileOutputStream fos=FileSecurity.createFileOutputStream(cacheFile);
    DataOutputStream oos=new DataOutputStream(new BufferedOutputStream(fos));
    writeList(oos,currentCache);
    oos.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
}","/** 
 * Save the current list in memory to disk.
 * @throws DataException 
 * @throws FileNotFoundException
 * @throws IOException
 */
private void saveToDisk() throws DataException {
  FileOutputStream fos=null;
  DataOutputStream oos=null;
  try {
    File cacheFile=null;
    if (currentCacheNo < fileList.size()) {
      cacheFile=(File)(fileList.get(currentCacheNo));
    }
 else {
      cacheFile=getCacheFile(this.currentCacheNo);
      fileList.add(cacheFile);
    }
    fos=FileSecurity.createFileOutputStream(cacheFile);
    oos=new DataOutputStream(new BufferedOutputStream(fos));
    writeList(oos,currentCache);
    oos.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    try {
      if (oos != null)       oos.close();
    }
 catch (    IOException ie) {
    }
    logger.severe(""String_Node_Str"" + e.toString());
  }
}",0.8463329452852154
66551,"/** 
 * Load the data of currect no from disk.
 * @throws DataException 
 */
private void loadFromDisk() throws DataException {
  try {
    FileInputStream fis=FileSecurity.createFileInputStream(getCacheFile(this.currentCacheNo));
    DataInputStream ois=new DataInputStream(new BufferedInputStream(fis));
    this.currentCache=readList(ois);
    ois.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
}","/** 
 * Load the data of currect no from disk.
 * @throws DataException 
 */
private void loadFromDisk() throws DataException {
  FileInputStream fis=null;
  DataInputStream ois=null;
  try {
    fis=FileSecurity.createFileInputStream(getCacheFile(this.currentCacheNo));
    ois=new DataInputStream(new BufferedInputStream(fis));
    this.currentCache=readList(ois);
    ois.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    try {
      if (ois != null)       ois.close();
    }
 catch (    IOException ie) {
    }
    logger.severe(""String_Node_Str"" + e.toString());
  }
}",0.848585690515807
66552,"protected void outputResultObjects(IResultObject[] resultObjects,int indexOfUnit) throws IOException, DataException {
  rowFile.writeRows(resultObjects,resultObjects.length);
}","protected void outputResultObjects(IResultObject[] resultObjects,int indexOfUnit) throws IOException, DataException {
  try {
    rowFile.writeRows(resultObjects,resultObjects.length);
  }
 catch (  IOException ie) {
    rowFile.close();
    throw ie;
  }
}",0.812933025404157
66553,"/** 
 * @throws DataException
 */
private void prepareCurrentRow() throws DataException {
  clear();
  bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap);
  if (needCache() && !this.isEmpty()) {
    try {
      saveCurrentRow();
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.WRITE_CACHE_TEMPFILE_ERROR,e);
    }
catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}","/** 
 * @throws DataException
 */
private void prepareCurrentRow() throws DataException {
  clear();
  bindingColumnsEvalUtil.getColumnsValue(boundColumnValueMap);
  if (needCache() && !this.isEmpty()) {
    try {
      saveCurrentRow();
    }
 catch (    IOException e) {
      try {
        this.metaOutputStream.close();
        this.rowOutputStream.close();
      }
 catch (      IOException ce) {
      }
      throw new DataException(ResourceConstants.WRITE_CACHE_TEMPFILE_ERROR,e);
    }
catch (    BirtException e) {
      throw DataException.wrap(e);
    }
  }
}",0.863681592039801
66554,"private static String getFilePath(URL url){
  String path=url.getFile();
  try {
    return URLDecoder.decode(path,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    return path;
  }
}","private static String getFilePath(URL url){
  String path=url.getFile();
  return decode(path);
}",0.6402640264026402
66555,"/** 
 * @param isLeftDataSet
 * @param dataSetName
 * @return
 * @throws DataException
 */
private IQueryResults populatePreparedQuery(IQueryResults outer,boolean isLeftDataSet,String dataSetName) throws DataException {
  List conditions=PreparedJointDataSourceQuery.this.dataSet.getJoinConditions();
  QueryDefinition queryDefinition=new QueryDefinition();
  queryDefinition.setAutoBinding(true);
  queryDefinition.setDataSetName(dataSetName);
  setParameterBindings(dataEngine,dataSetName,isLeftDataSet,queryDefinition);
  for (int i=0; i < conditions.size(); i++) {
    addSortToQuery((IJoinCondition)conditions.get(i),isLeftDataSet,queryDefinition);
  }
  IPreparedQuery preparedQuery=PreparedQueryUtil.newInstance(dataEngine,queryDefinition,appContext);
  try {
    return preparedQuery.execute(outer,null);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param isLeftDataSet
 * @param dataSetName
 * @return
 * @throws DataException
 */
private IQueryResults populatePreparedQuery(IQueryResults outer,boolean isLeftDataSet,String dataSetName) throws DataException {
  List conditions=PreparedJointDataSourceQuery.this.dataSet.getJoinConditions();
  QueryDefinition queryDefinition=new QueryDefinition();
  queryDefinition.setAsTempQuery();
  queryDefinition.setAutoBinding(true);
  queryDefinition.setDataSetName(dataSetName);
  setParameterBindings(dataEngine,dataSetName,isLeftDataSet,queryDefinition);
  for (int i=0; i < conditions.size(); i++) {
    addSortToQuery((IJoinCondition)conditions.get(i),isLeftDataSet,queryDefinition);
  }
  IPreparedQuery preparedQuery=PreparedQueryUtil.newInstance(dataEngine,queryDefinition,appContext);
  try {
    return preparedQuery.execute(outer,null);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9800443458980044
66556,"/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=propList.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    String bindingName=""String_Node_Str"";
    boolean isEncryptable=false;
    if (propList.get(i) instanceof String[]) {
      bindingName=((String[])propList.get(i))[0];
      nameLabel.setText(((String[])propList.get(i))[1] + Messages.getString(""String_Node_Str""));
    }
 else     if (propList.get(i) instanceof IPropertyDefn) {
      IPropertyDefn propDefn=(IPropertyDefn)propList.get(i);
      bindingName=propDefn.getName();
      nameLabel.setText(propDefn.getDisplayName() + Messages.getString(""String_Node_Str""));
      isEncryptable=propDefn.isEncryptable();
    }
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (QUERYTEXT.equals(bindingName)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (isEncryptable) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression(bindingName);
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      String contextId=getDynamicContextId(odsh.getExtensionID(),odsh.getExtensionID());
      if (contextId != null) {
        Utility.setSystemHelp(composite,contextId);
      }
 else {
        Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      String contextId=getDynamicContextId(((OdaDataSetHandle)ds).getExtensionID(),odsh.getExtensionID());
      if (contextId != null) {
        Utility.setSystemHelp(composite,contextId);
      }
 else {
        Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    createExpressionButton(composite,propertyText,bindingName,isEncryptable);
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}","/** 
 * the content
 */
public Control createContents(Composite parent){
  initPropertyBinding();
  int size=propList.size();
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(3,false));
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
  composite.setLayoutData(gridData);
  Label nameLabel;
  Text propertyText=null;
  for (int i=0; i < size; i++) {
    nameLabel=new Label(composite,SWT.NONE);
    String bindingName=""String_Node_Str"";
    boolean isEncryptable=false;
    if (propList.get(i) instanceof String[]) {
      bindingName=((String[])propList.get(i))[0];
      nameLabel.setText(((String[])propList.get(i))[1] + Messages.getString(""String_Node_Str""));
    }
 else     if (propList.get(i) instanceof IPropertyDefn) {
      IPropertyDefn propDefn=(IPropertyDefn)propList.get(i);
      bindingName=propDefn.getName();
      nameLabel.setText(propDefn.getDisplayName() + Messages.getString(""String_Node_Str""));
      isEncryptable=propDefn.isEncryptable();
    }
    nameLabelList.add(nameLabel);
    GridData data=new GridData(GridData.FILL_HORIZONTAL);
    if (QUERYTEXT.equals(bindingName)) {
      propertyText=new Text(composite,SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
      data.heightHint=100;
    }
 else     if (isEncryptable) {
      propertyText=new Text(composite,SWT.BORDER);
      if (ds instanceof DesignElementHandle) {
        Expression expr=((DesignElementHandle)ds).getPropertyBindingExpression(bindingName);
        if (expr != null && ExpressionType.CONSTANT.equals(expr.getType())) {
          Text dummy=new Text(composite,SWT.BORDER | SWT.PASSWORD);
          propertyText.setEchoChar(dummy.getEchoChar());
          dummy.dispose();
        }
      }
    }
 else     propertyText=new Text(composite,SWT.BORDER);
    propertyText.setLayoutData(data);
    propertyText.setText((String)bindingValue.get(i) == null ? ""String_Node_Str"" : (String)bindingValue.get(i));
    propertyTextList.add(propertyText);
    if (ds instanceof OdaDataSourceHandle) {
      handle=(OdaDataSourceHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)ds;
      String contextId=getDynamicContextId(odsh.getExtensionID(),odsh.getExtensionID());
      if (contextId != null) {
        Utility.setSystemHelp(composite,contextId);
      }
 else {
        Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
 else     if (ds instanceof OdaDataSetHandle) {
      handle=(OdaDataSetHandle)ds;
      OdaDataSourceHandle odsh=(OdaDataSourceHandle)(((OdaDataSetHandle)ds).getDataSource());
      String contextId=getDynamicContextId(((OdaDataSetHandle)ds).getExtensionID(),odsh.getExtensionID());
      if (contextId != null) {
        Utility.setSystemHelp(composite,contextId);
      }
 else {
        Utility.setSystemHelp(composite,IHelpConstants.PREFIX + ""String_Node_Str"" + ""String_Node_Str""+ odsh.getExtensionID().replace('.','_')+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    createExpressionButton(composite,propertyText,bindingName,isEncryptable);
    if (i == 0) {
      propertyText.setFocus();
    }
  }
  if (size <= 0)   setEmptyPropertyMessages(composite);
  return composite;
}",0.991713123399126
66557,"/** 
 * Returns the classpath associated with given report file.
 * @param reportFilePath The full path of the report file.
 * @return
 */
public static URL[] getWorkspaceClassPath(String reportFilePath){
  ArrayList<URL> urls=new ArrayList<URL>();
  try {
    IReportClasspathResolver provider=ReportPlugin.getDefault().getReportClasspathResolverService();
    if (provider != null) {
      String[] classpaths=provider.resolveClasspath(reportFilePath);
      if (classpaths != null && classpaths.length != 0) {
        for (int j=0; j < classpaths.length; j++) {
          File file=new File(classpaths[j]);
          try {
            urls.add(file.toURI().toURL());
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
 catch (  Exception e) {
  }
  return urls.toArray(new URL[urls.size()]);
}","/** 
 * Returns the classpath associated with given report file.
 * @param reportFilePath The full path of the report file.
 * @return
 */
public static URL[] getWorkspaceClassPath(String reportFilePath){
  ArrayList<URL> urls=new ArrayList<URL>();
  try {
    IReportClasspathResolver provider=ReportPlugin.getDefault().getReportClasspathResolverService();
    if (provider != null) {
      String[] classpaths=provider.resolveClasspath(reportFilePath);
      if (classpaths != null && classpaths.length != 0) {
        for (int j=0; j < classpaths.length; j++) {
          File file=new File(classpaths[j]);
          try {
            urls.add(file.toURI().toURL());
          }
 catch (          MalformedURLException e) {
            e.printStackTrace();
          }
        }
      }
    }
  }
 catch (  Throwable t) {
  }
  return urls.toArray(new URL[urls.size()]);
}",0.9874285714285714
66558,"/** 
 * @return
 */
private boolean createSelectedDataSourceODAV2(){
  Object dataSourceObj=getSelectedDataSource();
  String driverName=null;
  Class classType=null;
  if (dataSourceObj instanceof ExtensionManifest) {
    driverName=((ExtensionManifest)dataSourceObj).getExtensionID();
    classType=OdaDataSourceHandle.class;
  }
  try {
    DataSourceHandle dsHandle=helper.createDataSource(classType,dataSourceName.getText(),driverName);
    slotHandle.add(dsHandle);
    createSelectedDataSourceTearDown();
    return true;
  }
 catch (  SemanticException e) {
    getActivityStack().rollback();
    ExceptionHandler.handle(e);
    return false;
  }
}","/** 
 * @return
 */
private boolean createSelectedDataSourceODAV2(){
  Object dataSourceObj=getSelectedDataSource();
  String driverName=null;
  Class classType=null;
  if (dataSourceObj instanceof ExtensionManifest) {
    driverName=((ExtensionManifest)dataSourceObj).getExtensionID();
    classType=OdaDataSourceHandle.class;
  }
  try {
    DataSourceHandle dsHandle=helper.createDataSource(classType,dsName,driverName);
    slotHandle.add(dsHandle);
    createSelectedDataSourceTearDown();
    return true;
  }
 catch (  SemanticException e) {
    getActivityStack().rollback();
    ExceptionHandler.handle(e);
    return false;
  }
}",0.9845440494590416
66559,"/** 
 * @return
 */
private boolean createNoneODASelectedDataSource(){
  DataSourceHandle dsHandle=null;
  if (helper.SCRIPT_DATA_SOURCE_DISPLAY_NAME.equals(prevSelectedDataSourceType.toString())) {
    String driverName=DataUIConstants.DATA_SOURCE_SCRIPT;
    Class classType=ScriptDataSourceHandle.class;
    dsHandle=helper.createDataSource(classType,dataSourceName.getText(),driverName);
  }
 else {
    dsHandle=helper.createNoneOdaDataSourceHandle(dataSourceName.getText(),prevSelectedDataSourceType);
  }
  if (dsHandle == null)   return false;
  try {
    slotHandle.add(dsHandle);
  }
 catch (  ContentException e) {
    ExceptionHandler.handle(e);
  }
catch (  NameException e) {
    ExceptionHandler.handle(e);
  }
  if (dsHandle instanceof ScriptDataSourceHandle) {
    Utility.setScriptActivityEditor();
  }
  createSelectedDataSourceTearDown();
  return true;
}","/** 
 * @return
 */
private boolean createNoneODASelectedDataSource(){
  DataSourceHandle dsHandle=null;
  if (helper.SCRIPT_DATA_SOURCE_DISPLAY_NAME.equals(prevSelectedDataSourceType.toString())) {
    String driverName=DataUIConstants.DATA_SOURCE_SCRIPT;
    Class classType=ScriptDataSourceHandle.class;
    dsHandle=helper.createDataSource(classType,dsName,driverName);
  }
 else {
    dsHandle=helper.createNoneOdaDataSourceHandle(dsName,prevSelectedDataSourceType);
  }
  if (dsHandle == null)   return false;
  try {
    slotHandle.add(dsHandle);
  }
 catch (  ContentException e) {
    ExceptionHandler.handle(e);
  }
catch (  NameException e) {
    ExceptionHandler.handle(e);
  }
  if (dsHandle instanceof ScriptDataSourceHandle) {
    Utility.setScriptActivityEditor();
  }
  createSelectedDataSourceTearDown();
  return true;
}",0.9766627771295217
66560,"public void createControl(Composite parent){
  helper=new DataSourceSelectionHelper();
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  setupDSChoiceListRadio(composite);
  setupConnectionProfileRadio(composite);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.horizontalSpan=2;
  dataSourceList=new ListViewer(composite,SWT.SINGLE | SWT.BORDER);
  dataSourceList.getControl().setLayoutData(layoutData);
  dataSourceList.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      return (Object[])inputElement;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  dataSourceList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      String displayName=null;
      if (element instanceof ExtensionManifest) {
        ExtensionManifest config=(ExtensionManifest)element;
        DataSetProvider.findDataSourceElement(config.getExtensionID());
        displayName=config.getDataSourceDisplayName();
      }
 else {
        displayName=element.toString();
      }
      return displayName;
    }
  }
);
  dataSourceList.setInput(helper.getFilteredDataSourceArray());
  dataSourceList.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      prevSelectedDataSourceType=getSelectedDataSource();
      setPageComplete(!helper.hasNextPage(prevSelectedDataSourceType) && getMessageType() != ERROR);
    }
  }
);
  dataSourceList.setSorter(new ViewerSorter());
  dataSourceNameLabel=new Label(composite,SWT.NONE);
  dataSourceNameLabel.setText(Messages.getString(""String_Node_Str""));
  dataSourceName=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SOURCE_ELEMENT);
  if (name != null) {
    dataSourceName.setText(Utility.getUniqueDataSourceName(name));
  }
 else {
    dataSourceName.setText(Utility.getUniqueDataSourceName(Messages.getString(""String_Node_Str"")));
  }
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  dataSourceName.setLayoutData(layoutData);
  dataSourceName.setToolTipText(EMPTY_NAME);
  dataSourceName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (StringUtil.isBlank(dataSourceName.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(dataSourceName.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{dataSourceName.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(Messages.getString(""String_Node_Str""));
      }
      setPageComplete(!helper.hasNextPage(getSelectedDataSource()) && getMessageType() != ERROR);
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_NEW);
}","public void createControl(Composite parent){
  helper=new DataSourceSelectionHelper();
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  setupDSChoiceListRadio(composite);
  setupConnectionProfileRadio(composite);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.horizontalSpan=2;
  dataSourceList=new ListViewer(composite,SWT.SINGLE | SWT.BORDER);
  dataSourceList.getControl().setLayoutData(layoutData);
  dataSourceList.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      return (Object[])inputElement;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  dataSourceList.setLabelProvider(new LabelProvider(){
    public String getText(    Object element){
      String displayName=null;
      if (element instanceof ExtensionManifest) {
        ExtensionManifest config=(ExtensionManifest)element;
        DataSetProvider.findDataSourceElement(config.getExtensionID());
        displayName=config.getDataSourceDisplayName();
      }
 else {
        displayName=element.toString();
      }
      return displayName;
    }
  }
);
  dataSourceList.setInput(helper.getFilteredDataSourceArray());
  dataSourceList.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      prevSelectedDataSourceType=getSelectedDataSource();
      setPageComplete(!helper.hasNextPage(prevSelectedDataSourceType) && getMessageType() != ERROR);
    }
  }
);
  dataSourceList.setSorter(new ViewerSorter());
  dataSourceNameLabel=new Label(composite,SWT.NONE);
  dataSourceNameLabel.setText(Messages.getString(""String_Node_Str""));
  dataSourceName=new Text(composite,SWT.BORDER);
  String name=ReportPlugin.getDefault().getCustomName(ReportDesignConstants.DATA_SOURCE_ELEMENT);
  if (name != null) {
    dataSourceName.setText(Utility.getUniqueDataSourceName(name));
  }
 else {
    dataSourceName.setText(Utility.getUniqueDataSourceName(Messages.getString(""String_Node_Str"")));
  }
  dsName=dataSourceName.getText().trim();
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  dataSourceName.setLayoutData(layoutData);
  dataSourceName.setToolTipText(EMPTY_NAME);
  dataSourceName.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      dsName=dataSourceName.getText().trim();
      if (StringUtil.isBlank(dataSourceName.getText().trim())) {
        setMessage(EMPTY_NAME,ERROR);
      }
 else       if (isDuplicateName()) {
        setMessage(DUPLICATE_NAME,ERROR);
      }
 else       if (containInvalidCharactor(dataSourceName.getText())) {
        String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{dataSourceName.getText()});
        setMessage(msg,ERROR);
      }
 else {
        setMessage(Messages.getString(""String_Node_Str""));
      }
      setPageComplete(!helper.hasNextPage(getSelectedDataSource()) && getMessageType() != ERROR);
    }
  }
);
  setControl(composite);
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_NEW);
}",0.986254295532646
66561,"public void modifyText(ModifyEvent e){
  if (StringUtil.isBlank(dataSourceName.getText().trim())) {
    setMessage(EMPTY_NAME,ERROR);
  }
 else   if (isDuplicateName()) {
    setMessage(DUPLICATE_NAME,ERROR);
  }
 else   if (containInvalidCharactor(dataSourceName.getText())) {
    String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{dataSourceName.getText()});
    setMessage(msg,ERROR);
  }
 else {
    setMessage(Messages.getString(""String_Node_Str""));
  }
  setPageComplete(!helper.hasNextPage(getSelectedDataSource()) && getMessageType() != ERROR);
}","public void modifyText(ModifyEvent e){
  dsName=dataSourceName.getText().trim();
  if (StringUtil.isBlank(dataSourceName.getText().trim())) {
    setMessage(EMPTY_NAME,ERROR);
  }
 else   if (isDuplicateName()) {
    setMessage(DUPLICATE_NAME,ERROR);
  }
 else   if (containInvalidCharactor(dataSourceName.getText())) {
    String msg=Messages.getFormattedString(""String_Node_Str"",new Object[]{dataSourceName.getText()});
    setMessage(msg,ERROR);
  }
 else {
    setMessage(Messages.getString(""String_Node_Str""));
  }
  setPageComplete(!helper.hasNextPage(getSelectedDataSource()) && getMessageType() != ERROR);
}",0.9646464646464646
66562,"/** 
 * @param dataSourceElement
 * @return
 */
private IWizardPage getNextPageODAV2(IConfigurationElement dataSourceElement){
  useODAV3=false;
  AbstractDataSourceConnectionWizard connectionWizard=null;
  IConfigurationElement[] elements=dataSourceElement.getChildren(""String_Node_Str"");
  if (elements != null && elements.length > 0) {
    Object wizard=null;
    try {
      wizard=elements[0].createExecutableExtension(""String_Node_Str"");
    }
 catch (    CoreException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
    if (wizard instanceof AbstractDataSourceConnectionWizard) {
      String wizardTitle=Messages.getString(""String_Node_Str"");
      connectionWizard=((AbstractDataSourceConnectionWizard)wizard);
      connectionWizard.setWindowTitle(wizardTitle);
      connectionWizard.setConfigurationElement(dataSourceElement);
      connectionWizard.addPages();
    }
  }
  dataSourceIsCreated=true;
  if (connectionWizard != null) {
    try {
      connectionWizard.getDataSource().setName(dataSourceName.getText());
      return connectionWizard.getStartingPage();
    }
 catch (    NameException e) {
      dataSourceIsCreated=false;
      ExceptionHandler.handle(e);
    }
  }
  return super.getNextPage();
}","/** 
 * @param dataSourceElement
 * @return
 */
private IWizardPage getNextPageODAV2(IConfigurationElement dataSourceElement){
  useODAV3=false;
  AbstractDataSourceConnectionWizard connectionWizard=null;
  IConfigurationElement[] elements=dataSourceElement.getChildren(""String_Node_Str"");
  if (elements != null && elements.length > 0) {
    Object wizard=null;
    try {
      wizard=elements[0].createExecutableExtension(""String_Node_Str"");
    }
 catch (    CoreException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
    if (wizard instanceof AbstractDataSourceConnectionWizard) {
      String wizardTitle=Messages.getString(""String_Node_Str"");
      connectionWizard=((AbstractDataSourceConnectionWizard)wizard);
      connectionWizard.setWindowTitle(wizardTitle);
      connectionWizard.setConfigurationElement(dataSourceElement);
      connectionWizard.addPages();
    }
  }
  dataSourceIsCreated=true;
  if (connectionWizard != null) {
    try {
      connectionWizard.getDataSource().setName(dsName);
      return connectionWizard.getStartingPage();
    }
 catch (    NameException e) {
      dataSourceIsCreated=false;
      ExceptionHandler.handle(e);
    }
  }
  return super.getNextPage();
}",0.9918433931484504
66563,"/** 
 * @param dataSourceElementID
 * @return
 */
private IWizardPage getNextPageODAV3(String dataSourceElementID,DesignSessionRequest request){
  useODAV3=true;
  try {
    if (m_designSession == null)     m_designSession=DataSourceDesignSession.startNewDesign(dataSourceElementID,dataSourceName.getText(),null,request);
 else     m_designSession.restartNewDesign(dataSourceElementID,dataSourceName.getText(),null,request);
    m_designSession.setUseProfileSelectionPage(false);
    return m_designSession.getWizardStartingPage();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return super.getNextPage();
}","/** 
 * @param dataSourceElementID
 * @return
 */
private IWizardPage getNextPageODAV3(String dataSourceElementID,DesignSessionRequest request){
  useODAV3=true;
  try {
    if (m_designSession == null)     m_designSession=DataSourceDesignSession.startNewDesign(dataSourceElementID,dsName,null,request);
 else     m_designSession.restartNewDesign(dataSourceElementID,dsName,null,request);
    m_designSession.setUseProfileSelectionPage(false);
    return m_designSession.getWizardStartingPage();
  }
 catch (  OdaException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return super.getNextPage();
}",0.9680511182108626
66564,"JarLoader(URL url) throws IOException {
  baseUrl=url;
  jarUrl=new URL(""String_Node_Str"",""String_Node_Str"",-1,baseUrl + ""String_Node_Str"");
  if (baseUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    String filePath=baseUrl.getFile();
    jarFile=new JarFile(filePath);
  }
 else {
    JarURLConnection jarConn=(JarURLConnection)jarUrl.openConnection();
    jarFile=jarConn.getJarFile();
  }
}","JarLoader(URL url) throws IOException {
  baseUrl=url;
  jarUrl=new URL(""String_Node_Str"",""String_Node_Str"",-1,baseUrl + ""String_Node_Str"");
  if (baseUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    String filePath=getFilePath(baseUrl);
    jarFile=new JarFile(filePath);
  }
 else {
    JarURLConnection jarConn=(JarURLConnection)jarUrl.openConnection();
    jarFile=jarConn.getJarFile();
  }
}",0.974169741697417
66565,"FileLoader(URL url){
  baseUrl=url;
  baseDir=new File(url.getFile());
  codeSource=new CodeSource(baseUrl,(CodeSigner[])null);
}","FileLoader(URL url){
  baseUrl=url;
  baseDir=new File(getFilePath(url));
  codeSource=new CodeSource(baseUrl,(CodeSigner[])null);
}",0.9578544061302682
66566,"/** 
 * Computes the axis start/end shifts (due to start/end labels) and also takes into consideration all start/end shifts of any overlay axes in the same direction as the current scale.
 * @param la
 * @param iOrientation
 * @param iLocation
 * @param aax
 */
final void computeAxisStartEndShifts(IDisplayServer xs,Label la,int iOrientation,int iLocation,AllAxes aax) throws ChartException {
  final double dMaxSS=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxStartShift() : 0;
  final double dMaxES=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxEndShift() : 0;
  if ((!la.isVisible()) && !info.bLabelWithinAxes) {
    dStartShift=dMaxSS;
    dEndShift=dMaxES;
    return;
  }
  if (isCategoryScale()) {
    final double dUnitSize=getUnitSize();
    final DataSetIterator dsi=getData();
    final int iDateTimeUnit;
    BoundingBox bb=null;
    try {
      iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
    }
 catch (    ClassCastException e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(info.rtc.getULocale()));
    }
    final double rotation=la.getCaption().getFont().getRotation();
    final boolean bCenter=rotation == 0 || rotation == 90 || rotation == -90;
    if (!isTickLabelVisible(labelVisHelper.getFirstVisibleIndex())) {
      dStartShift=dMaxSS;
    }
 else {
      la.getCaption().setValue(formatCategoryValue(getType(),dsi.first(),iDateTimeUnit));
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        if (bCenter) {
          dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
        }
 else         if (info.iScaleDirection == FORWARD) {
          dStartShift=Math.max(dMaxSS,bb.getHotPoint() - dUnitSize / 2);
        }
 else {
          dStartShift=Math.max(dMaxSS,bb.getHeight() - bb.getHotPoint() - dUnitSize / 2);
        }
      }
 else       if (iOrientation == HORIZONTAL) {
        if (bCenter) {
          dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
        }
 else         if (info.iScaleDirection == BACKWARD) {
          dStartShift=Math.max(dMaxSS,bb.getWidth() - bb.getHotPoint() - dUnitSize / 2);
        }
 else {
          dStartShift=Math.max(dMaxSS,bb.getHotPoint() - dUnitSize / 2);
        }
      }
    }
    if (!isTickLabelVisible(labelVisHelper.getLastVisibleIndex())) {
      dEndShift=dMaxES;
    }
 else {
      la.getCaption().setValue(formatCategoryValue(getType(),dsi.last(),iDateTimeUnit));
      bb=info.cComp.computeBox(xs,iLocation,la,0,dEnd);
      if (iOrientation == VERTICAL) {
        if (bCenter) {
          dEndShift=Math.max(dMaxES,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
        }
 else         if (info.iScaleDirection == FORWARD) {
          dEndShift=Math.max(dMaxES,bb.getHeight() - bb.getHotPoint() - dUnitSize / 2);
        }
 else {
          dEndShift=Math.max(dMaxES,bb.getHotPoint() - dUnitSize / 2);
        }
      }
 else       if (iOrientation == HORIZONTAL) {
        if (bCenter) {
          dEndShift=Math.max(dMaxES,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
        }
 else         if (info.iScaleDirection == BACKWARD) {
          dEndShift=Math.max(dMaxES,bb.getHotPoint() - dUnitSize / 2);
        }
 else {
          dEndShift=Math.max(dMaxES,bb.getWidth() - bb.getHotPoint() - dUnitSize / 2);
        }
      }
    }
  }
 else   if ((info.type & NUMERICAL) == NUMERICAL) {
    if ((info.type & LINEAR) == LINEAR) {
      DecimalFormat df=null;
      Object value=AxisValueProvider.getValue(getMinimum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        if (!isBigNumber()) {
          df=new DecimalFormat(getNumericPattern());
        }
 else {
          df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
        }
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      value=AxisValueProvider.getValue(getMaximum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
      }
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
 else     if ((info.type & LOGARITHMIC) == LOGARITHMIC) {
      DecimalFormat df=null;
      Object value=AxisValueProvider.getValue(getMinimum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=null;
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      value=AxisValueProvider.getValue(getMaximum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
      }
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
  }
 else   if (getType() == DATE_TIME) {
    CDateTime cdt=asDateTime(getMinimum());
    final int iUnit=asInteger(context.getUnit());
    IDateFormatWrapper sdf=null;
    String sText=null;
    if (info.fs == null) {
      sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,info.rtc.getULocale());
    }
    try {
      sText=ValueFormatter.format(cdt,info.fs,info.rtc.getULocale(),sdf);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    BoundingBox bb=info.cComp.computeBox(xs,iLocation,la,0,0);
    if (iOrientation == VERTICAL) {
      dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
    }
 else     if (iOrientation == HORIZONTAL) {
      dStartShift=Math.max(dMaxSS,bb.getHotPoint());
    }
    cdt=asDateTime(getMaximum());
    try {
      sText=ValueFormatter.format(cdt,info.fs,info.rtc.getULocale(),sdf);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    bb=info.cComp.computeBox(xs,iLocation,la,0,dEnd);
    if (iOrientation == VERTICAL) {
      dEndShift=Math.max(dMaxES,bb.getHotPoint());
    }
 else     if (iOrientation == HORIZONTAL) {
      dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
    }
  }
}","/** 
 * Computes the axis start/end shifts (due to start/end labels) and also takes into consideration all start/end shifts of any overlay axes in the same direction as the current scale.
 * @param la
 * @param iOrientation
 * @param iLocation
 * @param aax
 */
final void computeAxisStartEndShifts(IDisplayServer xs,Label la,int iOrientation,int iLocation,AllAxes aax) throws ChartException {
  final double dMaxSS=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxStartShift() : 0;
  final double dMaxES=(aax != null && iOrientation == aax.getOrientation()) ? aax.getMaxEndShift() : 0;
  if ((!la.isVisible()) && !info.bLabelWithinAxes) {
    dStartShift=dMaxSS;
    dEndShift=dMaxES;
    return;
  }
  if (isCategoryScale()) {
    final double dUnitSize=getUnitSize();
    final DataSetIterator dsi=getData();
    final int iDateTimeUnit;
    BoundingBox bb=null;
    try {
      iDateTimeUnit=(getType() == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
    }
 catch (    ClassCastException e) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(info.rtc.getULocale()));
    }
    final double rotation=la.getCaption().getFont().getRotation();
    final boolean bCenter=rotation == 0 || rotation == 90 || rotation == -90;
    if (!isTickLabelVisible(0)) {
      dStartShift=dMaxSS;
    }
 else {
      la.getCaption().setValue(formatCategoryValue(getType(),dsi.first(),iDateTimeUnit));
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        if (bCenter) {
          dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getHeight()) ? 0 : (bb.getHeight() - dUnitSize) / 2);
        }
 else         if (info.iScaleDirection == FORWARD) {
          dStartShift=Math.max(dMaxSS,bb.getHotPoint() - dUnitSize / 2);
        }
 else {
          dStartShift=Math.max(dMaxSS,bb.getHeight() - bb.getHotPoint() - dUnitSize / 2);
        }
      }
 else       if (iOrientation == HORIZONTAL) {
        if (bCenter) {
          dStartShift=Math.max(dMaxSS,(dUnitSize > bb.getWidth()) ? 0 : (bb.getWidth() - dUnitSize) / 2);
        }
 else         if (info.iScaleDirection == BACKWARD) {
          dStartShift=Math.max(dMaxSS,bb.getWidth() - bb.getHotPoint() - dUnitSize / 2);
        }
 else {
          dStartShift=Math.max(dMaxSS,bb.getHotPoint() - dUnitSize / 2);
        }
      }
    }
    if (!isTickLabelVisible(dsi.size() - 1)) {
      dEndShift=dMaxES;
      if (labelVisHelper.getLastVisibleIndex() < (dsi.size() - 1)) {
        double tmpEndShift=computeEndShift(xs,la,iOrientation,iLocation,dMaxES,dUnitSize * (dsi.size() - labelVisHelper.getLastVisibleIndex()),dsi,iDateTimeUnit,bCenter);
        if (tmpEndShift > dEndShift) {
          dEndShift=tmpEndShift;
        }
      }
    }
 else {
      dEndShift=computeEndShift(xs,la,iOrientation,iLocation,dMaxES,dUnitSize,dsi,iDateTimeUnit,bCenter);
    }
  }
 else   if ((info.type & NUMERICAL) == NUMERICAL) {
    if ((info.type & LINEAR) == LINEAR) {
      DecimalFormat df=null;
      Object value=AxisValueProvider.getValue(getMinimum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        if (!isBigNumber()) {
          df=new DecimalFormat(getNumericPattern());
        }
 else {
          df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
        }
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      value=AxisValueProvider.getValue(getMaximum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
      }
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
 else     if ((info.type & LOGARITHMIC) == LOGARITHMIC) {
      DecimalFormat df=null;
      Object value=AxisValueProvider.getValue(getMinimum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
      }
      String sValue=null;
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      BoundingBox bb=null;
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
      }
 else       if (iOrientation == HORIZONTAL) {
        dStartShift=Math.max(dMaxSS,bb.getHotPoint());
      }
      value=AxisValueProvider.getValue(getMaximum(),isBigNumber() ? this.getBigNumberDivisor() : null);
      if (info.fs == null) {
        df=new DecimalFormat(ValueFormatter.getNumericPattern((Number)value));
      }
      try {
        sValue=ValueFormatter.format(value,info.fs,info.rtc.getULocale(),df);
      }
 catch (      ChartException dfex) {
        logger.log(dfex);
        sValue=IConstants.NULL_STRING;
      }
      la.getCaption().setValue(sValue);
      bb=info.cComp.computeBox(xs,iLocation,la,0,0);
      if (iOrientation == VERTICAL) {
        dEndShift=Math.max(dMaxES,bb.getHotPoint());
      }
 else       if (iOrientation == HORIZONTAL) {
        dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
      }
    }
  }
 else   if (getType() == DATE_TIME) {
    CDateTime cdt=asDateTime(getMinimum());
    final int iUnit=asInteger(context.getUnit());
    IDateFormatWrapper sdf=null;
    String sText=null;
    if (info.fs == null) {
      sdf=DateFormatWrapperFactory.getPreferredDateFormat(iUnit,info.rtc.getULocale());
    }
    try {
      sText=ValueFormatter.format(cdt,info.fs,info.rtc.getULocale(),sdf);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    BoundingBox bb=info.cComp.computeBox(xs,iLocation,la,0,0);
    if (iOrientation == VERTICAL) {
      dStartShift=Math.max(dMaxSS,(bb.getHeight() - bb.getHotPoint()));
    }
 else     if (iOrientation == HORIZONTAL) {
      dStartShift=Math.max(dMaxSS,bb.getHotPoint());
    }
    cdt=asDateTime(getMaximum());
    try {
      sText=ValueFormatter.format(cdt,info.fs,info.rtc.getULocale(),sdf);
    }
 catch (    ChartException dfex) {
      logger.log(dfex);
      sText=IConstants.NULL_STRING;
    }
    la.getCaption().setValue(sText);
    bb=info.cComp.computeBox(xs,iLocation,la,0,dEnd);
    if (iOrientation == VERTICAL) {
      dEndShift=Math.max(dMaxES,bb.getHotPoint());
    }
 else     if (iOrientation == HORIZONTAL) {
      dEndShift=Math.max(dMaxES,(bb.getWidth() - bb.getHotPoint()));
    }
  }
}",0.910489423733019
66567,"public void open(Map appContext,EngineConfig config) throws BirtException {
  engine=createReportEngine(config);
  task=engine.createDatasetPreviewTask();
  task.setMaxRow(maxRow);
  task.setDataSet(dataSetHandle);
  task.setAppContext(appContext);
  ReportParameterUtil.completeParamDefalutValues(task,dataSetHandle.getModuleHandle());
}","public void open(Map appContext,EngineConfig config) throws BirtException {
  engine=createReportEngine(config);
  if (mode == PreviewType.RESULTSET) {
    task=engine.createDatasetPreviewTask();
  }
 else {
    task=new OutParameterPreviewTask((ReportEngine)engine);
  }
  task.setMaxRow(maxRow);
  task.setDataSet(dataSetHandle);
  task.setAppContext(appContext);
  ReportParameterUtil.completeParamDefalutValues(task,dataSetHandle.getModuleHandle());
}",0.8423707440100883
66568,"public DataSetPreviewer(DataSetHandle dataSetHandle,int maxRow,DataSetEditor container){
  this.dataSetHandle=dataSetHandle;
  this.maxRow=maxRow;
}","public DataSetPreviewer(DataSetHandle dataSetHandle,int maxRow,PreviewType mode){
  this.dataSetHandle=dataSetHandle;
  this.maxRow=maxRow;
  this.mode=mode;
}",0.8338762214983714
66569,"protected Control createContents(Composite parent){
  Control control=super.createContents(parent);
  getShell().setText(title);
  setTitle(TITLE);
  setMessage(PROMRT_MESSAGE);
  categoryTable.setInput(""String_Node_Str"");
  handleDefaultSelection();
  getShell().setDefaultButton(null);
  sourceViewer.getTextWidget().setFocus();
  return control;
}","protected Control createContents(Composite parent){
  Control control=super.createContents(parent);
  getShell().setText(title);
  setTitle(TITLE);
  setMessage(PROMRT_MESSAGE);
  categoryTable.setInput(""String_Node_Str"");
  handleDefaultSelection();
  sourceViewer.getTextWidget().setFocus();
  return control;
}",0.9441930618401206
66570,"JarLoader(URL url) throws IOException {
  baseUrl=url;
  jarUrl=new URL(""String_Node_Str"",""String_Node_Str"",-1,baseUrl + ""String_Node_Str"");
  if (baseUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    String filePath=getFilePath(baseUrl);
    jarFile=new JarFile(filePath);
  }
 else {
    JarURLConnection jarConn=(JarURLConnection)jarUrl.openConnection();
    jarFile=jarConn.getJarFile();
  }
}","JarLoader(URL url) throws IOException {
  baseUrl=url;
  jarUrl=new URL(""String_Node_Str"",""String_Node_Str"",-1,baseUrl + ""String_Node_Str"");
  if (baseUrl.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
    String filePath=baseUrl.getFile();
    jarFile=new JarFile(filePath);
  }
 else {
    JarURLConnection jarConn=(JarURLConnection)jarUrl.openConnection();
    jarFile=jarConn.getJarFile();
  }
}",0.974169741697417
66571,"FileLoader(URL url){
  baseUrl=url;
  baseDir=new File(getFilePath(url));
  codeSource=new CodeSource(baseUrl,(CodeSigner[])null);
}","FileLoader(URL url){
  baseUrl=url;
  baseDir=new File(url.getFile());
  codeSource=new CodeSource(baseUrl,(CodeSigner[])null);
}",0.9578544061302682
66572,"/** 
 * Converts the dimension value to a locale-independent string. The string will be converted into a format like ""#.###"", there is no group separator and remains at most 3 digits after the decimal separator. e.g: ""12,000,000.12345cm"" will be converted into ""12000000.123""
 * @return The string presentation of this dimension value.
 */
public String toString(){
  String value=StringUtil.doubleToString(measure,MAX_FORMAT_NUMBER);
  return value + units;
}","/** 
 * Converts the dimension value to a locale-independent string. The string will be converted into a format like ""#.###"", there is no group separator and remains at most 3 digits after the decimal separator. e.g: ""12,000,000.12345cm"" will be converted into ""12000000.123""
 * @return The string presentation of this dimension value.
 */
public String toString(){
  String value=formatter.format(measure);
  return value + units;
}",0.9339305711086228
66573,"/** 
 * Parses a dimension string in locale-independent way. The input string must match the following: <ul> <li>null</li> <li>[1-9][0-9]*[.[0-9]*[ ]*[in|cm|mm|pt|pc|em|ex|px|%]] </li> </ul>
 * @param value the dimension string to parse
 * @return a dimension object representing the dimension string.
 * @throws PropertyValueException if the string is not valid
 * @deprecated replaced by {@link StringUtil#parse(String)}
 */
public static DimensionValue parse(String value) throws PropertyValueException {
  return DimensionValueUtil.doParse(value,false,null);
}","/** 
 * Parses a dimension string in locale-independent way. The input string must match the following: <ul> <li>null</li> <li>[1-9][0-9]*[.[0-9]*[ ]*[in|cm|mm|pt|pc|em|ex|px|%]]</li> </ul>
 * @param value the dimension string to parse
 * @return a dimension object representing the dimension string.
 * @throws PropertyValueException if the string is not valid
 * @deprecated replaced by {@link StringUtil#parse(String)}
 */
public static DimensionValue parse(String value) throws PropertyValueException {
  return DimensionValueUtil.doParse(value,false,null);
}",0.9991126885536824
66574,"public final IReportItem copy(){
  final ChartReportItemImpl crii=new ChartReportItemImpl(handle);
  crii.bCopied=true;
  if (!ChartCubeUtil.isAxisChart(handle)) {
    crii.cm=cm == null ? null : cm.copyInstance();
  }
  return crii;
}","public final IReportItem copy(){
  final ChartReportItemImpl crii=new ChartReportItemImpl(handle);
  crii.bCopied=true;
  if (!ChartCubeUtil.isAxisChart(handle)) {
    if (cm == null) {
      crii.cm=null;
    }
 else {
synchronized (this) {
        try {
          crii.cm=cm.copyInstance();
        }
 catch (        ConcurrentModificationException e) {
          crii.cm=cm.copyInstance();
        }
catch (        NullPointerException e) {
          crii.cm=cm.copyInstance();
        }
      }
    }
  }
  return crii;
}",0.4447368421052631
66575,"/** 
 * Return the category map.
 * @return
 */
private Map<String,Category> getCategoryMap(){
  if (categories != null)   return categories;
  categories=new HashMap<String,Category>();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(EXTENSION_POINT);
  if (extPoint == null)   return categories;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null) {
    return categories;
  }
  for (int e=0; e < exts.length; e++) {
    try {
      IConfigurationElement[] configElems=exts[e].getConfigurationElements();
      if (configElems == null)       continue;
      for (int i=0; i < configElems.length; i++) {
        boolean isVisible=extractBoolean(configElems[i].getAttribute(ATTRIBUTE_ISVISIBLE),true);
        if (configElems[i].getName().equals(ELEMENT_CATEGORY)) {
          Category category=new Category(configElems[i].getAttribute(ATTRIBUTE_NAME),configElems[i].getAttribute(ATTRIBUTE_DESC),isVisible);
          categories.put(category.getName(),category);
          IScriptFunctionFactory factory=null;
          if (configElems[i].getAttribute(ATTRIBUTE_FACTORYCLASS) != null)           factory=(IScriptFunctionFactory)configElems[i].createExecutableExtension(ATTRIBUTE_FACTORYCLASS);
          IConfigurationElement[] functions=configElems[i].getChildren(ELEMENT_FUNCTION);
          for (int j=0; j < functions.length; j++) {
            IScriptFunction function=getScriptFunction(category,factory,functions[j]);
            if (function != null)             category.addFunction(function);
          }
        }
 else         if (configElems[i].getName().equals(ELEMENT_FUNCTION)) {
          if (categories.get(DEFAULT_CATEGORYNAME) == null) {
            categories.put(DEFAULT_CATEGORYNAME,new Category(DEFAULT_CATEGORYNAME,null,isVisible));
          }
          IScriptFunction function=getScriptFunction(categories.get(DEFAULT_CATEGORYNAME),null,configElems[i]);
          if (function != null)           categories.get(DEFAULT_CATEGORYNAME).addFunction(function);
        }
 else         if (configElems[i].getName().equals(ELEMENT_JSLIB)) {
          populateResources(jsLibs,""String_Node_Str"",configElems[i]);
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  return categories;
}","/** 
 * Return the category map.
 * @return
 */
private synchronized Map<String,Category> getCategoryMap(){
  if (categories != null)   return categories;
  categories=new HashMap<String,Category>();
  IExtensionRegistry extReg=Platform.getExtensionRegistry();
  IExtensionPoint extPoint=extReg.getExtensionPoint(EXTENSION_POINT);
  if (extPoint == null)   return categories;
  IExtension[] exts=extPoint.getExtensions();
  if (exts == null) {
    return categories;
  }
  for (int e=0; e < exts.length; e++) {
    try {
      IConfigurationElement[] configElems=exts[e].getConfigurationElements();
      if (configElems == null)       continue;
      for (int i=0; i < configElems.length; i++) {
        boolean isVisible=extractBoolean(configElems[i].getAttribute(ATTRIBUTE_ISVISIBLE),true);
        if (configElems[i].getName().equals(ELEMENT_CATEGORY)) {
          Category category=new Category(configElems[i].getAttribute(ATTRIBUTE_NAME),configElems[i].getAttribute(ATTRIBUTE_DESC),isVisible);
          categories.put(category.getName(),category);
          IScriptFunctionFactory factory=null;
          if (configElems[i].getAttribute(ATTRIBUTE_FACTORYCLASS) != null)           factory=(IScriptFunctionFactory)configElems[i].createExecutableExtension(ATTRIBUTE_FACTORYCLASS);
          IConfigurationElement[] functions=configElems[i].getChildren(ELEMENT_FUNCTION);
          for (int j=0; j < functions.length; j++) {
            IScriptFunction function=getScriptFunction(category,factory,functions[j]);
            if (function != null)             category.addFunction(function);
          }
        }
 else         if (configElems[i].getName().equals(ELEMENT_FUNCTION)) {
          if (categories.get(DEFAULT_CATEGORYNAME) == null) {
            categories.put(DEFAULT_CATEGORYNAME,new Category(DEFAULT_CATEGORYNAME,null,isVisible));
          }
          IScriptFunction function=getScriptFunction(categories.get(DEFAULT_CATEGORYNAME),null,configElems[i]);
          if (function != null)           categories.get(DEFAULT_CATEGORYNAME).addFunction(function);
        }
 else         if (configElems[i].getName().equals(ELEMENT_JSLIB)) {
          populateResources(jsLibs,""String_Node_Str"",configElems[i]);
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  return categories;
}",0.9972120952176712
66576,"protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridLayout twoColLayout=new GridLayout();
  twoColLayout.numColumns=2;
  twoColLayout.marginWidth=10;
  twoColLayout.marginHeight=10;
  mainComposite.setLayout(twoColLayout);
  externalBiDiFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(mainComposite,Messages.getString(""String_Node_Str""),new BidiFormat(externalBiDiFormatStr));
  return mainComposite;
}","protected Control createContents(Composite parent){
  Composite mainComposite=new Composite(parent,SWT.NONE);
  GridLayout twoColLayout=new GridLayout();
  twoColLayout.numColumns=2;
  twoColLayout.marginWidth=10;
  twoColLayout.marginHeight=10;
  mainComposite.setLayout(twoColLayout);
  externalBiDiFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(mainComposite,Messages.getString(""String_Node_Str""),new BidiFormat(externalBiDiFormatStr));
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_PREFERENCE_JDBC_BIDI);
  return mainComposite;
}",0.9175557710960232
66577,"protected Control createDialogArea(Composite parent){
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  contents.setLayout(new GridLayout());
  this.setTitle(ADVANCED_DIALOG_TITLE);
  this.setMessage(ADVANCED_DIALOG_MSG);
  getShell().setText(ADVANCED_DIALOG_TITLE);
  applyDialogFont(contents);
  initializeDialogUnits(area);
  if (disabledContentBidiFormat != null && disabledMetadataBidiFormat != null && !BidiConstants.EMPTY_STR.equals(disabledContentBidiFormat) && !BidiConstants.EMPTY_STR.equals(disabledMetadataBidiFormat)) {
    disableTransform=true;
  }
  Composite bidiArea=new Composite(area,SWT.NONE);
  GridLayout bidiGridLayout=new GridLayout();
  bidiGridLayout.numColumns=4;
  bidiGridLayout.marginHeight=10;
  bidiGridLayout.marginWidth=5;
  bidiGridLayout.horizontalSpacing=5;
  bidiGridLayout.verticalSpacing=10;
  bidiGridLayout.makeColumnsEqualWidth=true;
  bidiArea.setLayout(bidiGridLayout);
  bidiMetadataFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_METADATA_BIDI_FORMAT,disableTransform ? disabledMetadataBidiFormat : metadataBidiFormat);
  bidiContentFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_CONTENT_BIDI_FORMAT,disableTransform ? disabledContentBidiFormat : contentBidiFormat);
  disableTransformButton=new Button(bidiArea,SWT.CHECK);
  disableTransformButton.setText(DISABLE_BIDI_CHECKBOX_TEXT);
  disableTransformButton.setSelection(disableTransform);
  if (disableTransform) {
    handleDisableTransform();
  }
  disableTransformButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      disableTransform=!disableTransform;
      handleDisableTransform();
    }
  }
);
  Utility.setSystemHelp(area,IHelpConstants.CONEXT_ID_PREFERENCE_DATASET_JDBC_BIDI);
  return area;
}","protected Control createDialogArea(Composite parent){
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  contents.setLayout(new GridLayout());
  this.setTitle(ADVANCED_DIALOG_TITLE);
  this.setMessage(ADVANCED_DIALOG_MSG);
  getShell().setText(ADVANCED_DIALOG_TITLE);
  applyDialogFont(contents);
  initializeDialogUnits(area);
  if (disabledContentBidiFormat != null && disabledMetadataBidiFormat != null && !BidiConstants.EMPTY_STR.equals(disabledContentBidiFormat) && !BidiConstants.EMPTY_STR.equals(disabledMetadataBidiFormat)) {
    disableTransform=true;
  }
  Composite bidiArea=new Composite(area,SWT.NONE);
  GridLayout bidiGridLayout=new GridLayout();
  bidiGridLayout.numColumns=4;
  bidiGridLayout.marginHeight=10;
  bidiGridLayout.marginWidth=5;
  bidiGridLayout.horizontalSpacing=5;
  bidiGridLayout.verticalSpacing=10;
  bidiGridLayout.makeColumnsEqualWidth=true;
  bidiArea.setLayout(bidiGridLayout);
  bidiMetadataFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_METADATA_BIDI_FORMAT,disableTransform ? disabledMetadataBidiFormat : metadataBidiFormat);
  bidiContentFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_CONTENT_BIDI_FORMAT,disableTransform ? disabledContentBidiFormat : contentBidiFormat);
  disableTransformButton=new Button(bidiArea,SWT.CHECK);
  disableTransformButton.setText(DISABLE_BIDI_CHECKBOX_TEXT);
  disableTransformButton.setSelection(disableTransform);
  if (disableTransform) {
    handleDisableTransform();
  }
  disableTransformButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      disableTransform=!disableTransform;
      handleDisableTransform();
    }
  }
);
  Utility.setSystemHelp(area,IHelpConstants.CONEXT_ID_DATASOURCE_JDBC_BIDI_SETTING);
  return area;
}",0.9866735007688364
66578,"/** 
 * update DataSetHandle
 * @param response
 * @param dataSetHandle
 * @param isSourceChanged
 */
public void updateDataSetHandle(DesignSessionResponse response,DataSetDesign requestDesign,OdaDataSetHandle dataSetHandle,boolean isSourceChanged){
  initDesignSessionFields(response);
  if (isSessionOk()) {
    EcoreUtil.EqualityHelper equalityHelper=new EcoreUtil.EqualityHelper();
    if (equalityHelper.equals(response.getDataSetDesign(),requestDesign) && equalityHelper.equals(response.getDesignerState(),this.designerState))     return;
    try {
      DataSetDesign design=response.getDataSetDesign();
      if (ReportPlugin.getDefault().getPluginPreferences().getBoolean(DateSetPreferencePage.PROMPT_ENABLE) == true) {
        IAmbiguousOption ambiguousOption=modelOdaAdapter.getAmbiguousOption(design,dataSetHandle);
        if (ambiguousOption != null && !ambiguousOption.getAmbiguousParameters().isEmpty()) {
          PromptParameterDialog dialog=new PromptParameterDialog(Messages.getString(""String_Node_Str""));
          dialog.setInput(ambiguousOption);
          if (dialog.open() == Dialog.OK) {
            Object result=dialog.getResult();
            if (result instanceof List) {
              List<OdaDataSetParameter> selectedParameters=(List)result;
              updateROMDesignerState(dataSetHandle);
              modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,selectedParameters,null,isSourceChanged);
              DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
              return;
            }
          }
 else {
            updateROMDesignerState(dataSetHandle);
            modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
            DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
            return;
          }
        }
      }
      updateROMDesignerState(dataSetHandle);
      modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
      DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return;
}","/** 
 * update DataSetHandle
 * @param response
 * @param dataSetHandle
 * @param isSourceChanged
 */
public void updateDataSetHandle(DesignSessionResponse response,DataSetDesign requestDesign,OdaDataSetHandle dataSetHandle,boolean isSourceChanged){
  initDesignSessionFields(response);
  if (isSessionOk()) {
    EcoreUtil.EqualityHelper equalityHelper=new EcoreUtil.EqualityHelper();
    if (equalityHelper.equals(response.getDataSetDesign(),requestDesign) && equalityHelper.equals(response.getDesignerState(),this.designerState))     return;
    try {
      DataSetDesign design=response.getDataSetDesign();
      if (ReportPlugin.getDefault().getPluginPreferences().getBoolean(DateSetPreferencePage.PROMPT_ENABLE) == true) {
        IAmbiguousOption ambiguousOption=modelOdaAdapter.getAmbiguousOption(design,dataSetHandle);
        if (ambiguousOption != null && !ambiguousOption.getAmbiguousParameters().isEmpty()) {
          PromptParameterDialog dialog=new PromptParameterDialog(Messages.getString(""String_Node_Str""));
          dialog.setInput(ambiguousOption);
          if (dialog.open() == Dialog.OK) {
            Object result=dialog.getResult();
            if (result instanceof List) {
              List<OdaDataSetParameter> selectedParameters=(List)result;
              updateROMDesignerState(dataSetHandle);
              modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,selectedParameters,null,isSourceChanged);
              DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
              return;
            }
          }
 else {
            updateROMDesignerState(dataSetHandle);
            modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
            DataSetUIUtil.updateColumnCacheAfterCleanRs(dataSetHandle);
            return;
          }
        }
      }
      updateROMDesignerState(dataSetHandle);
      modelOdaAdapter.updateDataSetHandle(design,dataSetHandle,isSourceChanged);
      if (dataSetHandle.getCachedMetaDataHandle() != null && dataSetHandle.getCachedMetaDataHandle().getResultSet() != null)       dataSetHandle.getCachedMetaDataHandle().getResultSet().clearValue();
      DataSetUIUtil.updateColumnCache(dataSetHandle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
  }
  return;
}",0.952122854561879
66579,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(hint.getAnalysis());
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
        items[i].setAlias(hint.getAlias());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
    }
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(hint.getAnalysis());
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
        items[i].setAlias(hint.getAlias());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
    }
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}",0.9987511150758251
66580,"/** 
 * @param meta
 * @throws BirtException
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  Set computedColumnNameSet=new HashSet();
  Iterator computedIter=dataSetHandle.computedColumnsIterator();
  while (computedIter.hasNext()) {
    ComputedColumnHandle handle=(ComputedColumnHandle)computedIter.next();
    computedColumnNameSet.add(handle.getName());
  }
  List columnList=new ArrayList();
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!computedColumnNameSet.contains(meta.getColumnName(i))) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      if (meta.getColumnType(i) != DataType.ANY_TYPE)       rsColumn.setDataType(DataAdapterUtil.adapterToModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(Integer.valueOf(i));
      columnList.add(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
  CompatibilityUtil.addResultSetColumn(dataSetHandle,columnList);
}","/** 
 * @param meta
 * @throws BirtException
 */
private void addResultSetColumn(DataSetHandle dataSetHandle,IResultMetaData meta) throws BirtException {
  if (meta == null || !(dataSetHandle instanceof OdaDataSetHandle))   return;
  Set computedColumnNameSet=new HashSet();
  Iterator computedIter=dataSetHandle.computedColumnsIterator();
  while (computedIter.hasNext()) {
    ComputedColumnHandle handle=(ComputedColumnHandle)computedIter.next();
    computedColumnNameSet.add(handle.getName());
  }
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_PROP);
  for (int i=1; i <= meta.getColumnCount(); i++) {
    OdaResultSetColumn rsColumn=new OdaResultSetColumn();
    String uniqueName;
    if (!computedColumnNameSet.contains(meta.getColumnName(i))) {
      uniqueName=MetaDataPopulator.getUniqueName(orgColumnNameSet,uniqueColumnNameSet,meta.getColumnName(i),i - 1);
      rsColumn.setColumnName(uniqueName);
      if (meta.getColumnType(i) != DataType.ANY_TYPE)       rsColumn.setDataType(DataAdapterUtil.adapterToModelDataType(meta.getColumnType(i)));
      rsColumn.setNativeName(meta.getColumnName(i));
      rsColumn.setPosition(Integer.valueOf(i));
      handle.addItem(rsColumn);
      uniqueColumnNameSet.add(uniqueName);
    }
  }
}",0.8619307832422587
66581,"public SAXParser get(Map<String,?> properties) throws ParserConfigurationException, SAXException {
  Set<String> keys=null;
  if (properties != null)   keys=properties.keySet();
synchronized (this) {
    List<SAXParser> list=parserCache.get(keys);
    if (list != null) {
      int size=list.size();
      if (size > 0) {
        return list.remove(size - 1);
      }
    }
 else     parserCache.put(keys,new ArrayList<SAXParser>());
  }
  return createParser(properties);
}","public SAXParser get(Map<String,?> properties) throws ParserConfigurationException, SAXException {
  Set<String> keys=null;
  if (properties != null) {
    keys=new HashSet<String>(properties.keySet());
  }
synchronized (this) {
    List<SAXParser> list=parserCache.get(keys);
    if (list != null) {
      int size=list.size();
      if (size > 0) {
        return list.remove(size - 1);
      }
    }
 else     parserCache.put(keys,new ArrayList<SAXParser>());
  }
  return createParser(properties);
}",0.9682702149437052
66582,"/** 
 * set Dte temporary dir.
 * @param tmpdir
 */
public void setTmpdir(String tmpdir){
  this.tmpDir=tmpdir;
}","/** 
 * set Dte temporary dir.
 * @param tmpdir
 */
public void setTmpdir(String tmpdir){
  this.tmpDir=tmpdir;
  DataEngineThreadLocal.getInstance().getPathManager().setTempPath(getTmpdir());
}",0.7361563517915309
66583,"public List<String> getACLs(){
  return this.acls;
}","public Map<String,Integer> getACLs(){
  return this.acls;
}",0.8648648648648649
66584,"/** 
 * Read acl collections from doc archive.
 * @param reader
 * @return
 * @throws DataException
 */
private void loadGeneralACL() throws DataException {
  this.acls=new ArrayList<String>();
  if (!engine.getContext().hasInStream(""String_Node_Str"",null,DataEngineContext.ACL_COLLECTION_STREAM)) {
    return;
  }
  DataInputStream aclCollectionStream=new DataInputStream(engine.getContext().getInputStream(""String_Node_Str"",null,DataEngineContext.ACL_COLLECTION_STREAM));
  try {
    int count=IOUtil.readInt(aclCollectionStream);
    for (int i=0; i < count; i++)     acls.add(IOUtil.readString(aclCollectionStream));
    aclCollectionStream.close();
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","/** 
 * Read acl collections from doc archive.
 * @param reader
 * @return
 * @throws DataException
 */
private void loadGeneralACL() throws DataException {
  this.acls=new LinkedHashMap<String,Integer>();
  if (!engine.getContext().hasInStream(""String_Node_Str"",null,DataEngineContext.ACL_COLLECTION_STREAM)) {
    return;
  }
  DataInputStream aclCollectionStream=new DataInputStream(engine.getContext().getInputStream(""String_Node_Str"",null,DataEngineContext.ACL_COLLECTION_STREAM));
  try {
    int count=IOUtil.readInt(aclCollectionStream);
    for (int i=0; i < count; i++)     acls.put(IOUtil.readString(aclCollectionStream),i);
    aclCollectionStream.close();
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9748010610079576
66585,"/** 
 * Write ACL collections to the doc archive.
 * @param writer
 * @param acls
 * @throws DataException
 */
private void saveGeneralACL(){
  try {
    if (engine.getContext().getDocWriter() == null || this.acls.isEmpty())     return;
    DataOutputStream aclCollectionStream=new DataOutputStream(engine.getContext().getOutputStream(""String_Node_Str"",null,DataEngineContext.ACL_COLLECTION_STREAM));
    IOUtil.writeInt(aclCollectionStream,acls.size());
    for (    String acl : acls) {
      IOUtil.writeString(aclCollectionStream,acl);
    }
    aclCollectionStream.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getLocalizedMessage(),e);
  }
}","/** 
 * Write ACL collections to the doc archive.
 * @param writer
 * @param acls
 * @throws DataException
 */
private void saveGeneralACL(){
  try {
    if (engine.getContext().getDocWriter() == null || this.acls.isEmpty())     return;
    DataOutputStream aclCollectionStream=new DataOutputStream(engine.getContext().getOutputStream(""String_Node_Str"",null,DataEngineContext.ACL_COLLECTION_STREAM));
    IOUtil.writeInt(aclCollectionStream,acls.size());
    for (    String acl : acls.keySet()) {
      IOUtil.writeString(aclCollectionStream,acl);
    }
    aclCollectionStream.close();
  }
 catch (  Exception e) {
    throw new RuntimeException(e.getLocalizedMessage(),e);
  }
}",0.9933481152993348
66586,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(hint.getAnalysis());
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
    }
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(hint.getAnalysis());
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
        items[i].setAlias(hint.getAlias());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
    }
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}",0.9908289875921596
66587,"protected Control createDialogArea(Composite parent){
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  contents.setLayout(new GridLayout());
  this.setTitle(ADVANCED_DIALOG_TITLE);
  this.setMessage(ADVANCED_DIALOG_MSG);
  getShell().setText(ADVANCED_DIALOG_TITLE);
  applyDialogFont(contents);
  initializeDialogUnits(area);
  if (disabledContentBidiFormat != null && disabledMetadataBidiFormat != null && !BidiConstants.EMPTY_STR.equals(disabledContentBidiFormat) && !BidiConstants.EMPTY_STR.equals(disabledMetadataBidiFormat)) {
    disableTransform=true;
  }
  Composite bidiArea=new Composite(area,SWT.NONE);
  GridLayout bidiGridLayout=new GridLayout();
  bidiGridLayout.numColumns=4;
  bidiGridLayout.marginHeight=10;
  bidiGridLayout.marginWidth=5;
  bidiGridLayout.horizontalSpacing=5;
  bidiGridLayout.verticalSpacing=10;
  bidiGridLayout.makeColumnsEqualWidth=true;
  bidiArea.setLayout(bidiGridLayout);
  bidiMetadataFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_METADATA_BIDI_FORMAT,disableTransform ? disabledMetadataBidiFormat : metadataBidiFormat);
  bidiContentFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_CONTENT_BIDI_FORMAT,disableTransform ? disabledContentBidiFormat : contentBidiFormat);
  disableTransformButton=new Button(bidiArea,SWT.CHECK);
  disableTransformButton.setText(DISABLE_BIDI_CHECKBOX_TEXT);
  disableTransformButton.setSelection(disableTransform);
  if (disableTransform) {
    handleDisableTransform();
  }
  disableTransformButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      disableTransform=!disableTransform;
      handleDisableTransform();
    }
  }
);
  return area;
}","protected Control createDialogArea(Composite parent){
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  contents.setLayoutData(new GridData(GridData.FILL_BOTH));
  contents.setLayout(new GridLayout());
  this.setTitle(ADVANCED_DIALOG_TITLE);
  this.setMessage(ADVANCED_DIALOG_MSG);
  getShell().setText(ADVANCED_DIALOG_TITLE);
  applyDialogFont(contents);
  initializeDialogUnits(area);
  if (disabledContentBidiFormat != null && disabledMetadataBidiFormat != null && !BidiConstants.EMPTY_STR.equals(disabledContentBidiFormat) && !BidiConstants.EMPTY_STR.equals(disabledMetadataBidiFormat)) {
    disableTransform=true;
  }
  Composite bidiArea=new Composite(area,SWT.NONE);
  GridLayout bidiGridLayout=new GridLayout();
  bidiGridLayout.numColumns=4;
  bidiGridLayout.marginHeight=10;
  bidiGridLayout.marginWidth=5;
  bidiGridLayout.horizontalSpacing=5;
  bidiGridLayout.verticalSpacing=10;
  bidiGridLayout.makeColumnsEqualWidth=true;
  bidiArea.setLayout(bidiGridLayout);
  bidiMetadataFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_METADATA_BIDI_FORMAT,disableTransform ? disabledMetadataBidiFormat : metadataBidiFormat);
  bidiContentFormatFrame=BidiGUIUtility.INSTANCE.addBiDiFormatFrame(bidiArea,EXTERNAL_SYSTEM_CONTENT_BIDI_FORMAT,disableTransform ? disabledContentBidiFormat : contentBidiFormat);
  disableTransformButton=new Button(bidiArea,SWT.CHECK);
  disableTransformButton.setText(DISABLE_BIDI_CHECKBOX_TEXT);
  disableTransformButton.setSelection(disableTransform);
  if (disableTransform) {
    handleDisableTransform();
  }
  disableTransformButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      disableTransform=!disableTransform;
      handleDisableTransform();
    }
  }
);
  Utility.setSystemHelp(area,IHelpConstants.CONEXT_ID_PREFERENCE_DATASET_JDBC_BIDI);
  return area;
}",0.9777312025150642
66588,"public void startPage(IPageContent page){
  pageNumber=page.getPageNumber();
  executionContext.getProgressMonitor().onProgress(IProgressMonitor.START_PAGE,(int)pageNumber);
  try {
    String masterPageName=null;
    Object generateBy=page.getGenerateBy();
    if (generateBy != null && generateBy instanceof MasterPageDesign) {
      masterPageName=((MasterPageDesign)generateBy).getName();
    }
    if (!savedMasterPages.contains(masterPageName)) {
      long pageOffset=writeFullContent(pageWriter,page);
      writeBuffer.reset();
      DataOutputStream indexBuffer=new DataOutputStream(writeBuffer);
      IOUtil.writeString(indexBuffer,masterPageName);
      IOUtil.writeLong(indexBuffer,pageOffset);
      indexStream.write(writeBuffer.toByteArray());
      savedMasterPages.add(masterPageName);
    }
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    close();
  }
  IArea pageArea=(IArea)page.getExtension(IContent.LAYOUT_EXTENSION);
  if (pageArea != null) {
    pageArea.accept(new BookmarkCollector());
  }
}","public void startPage(IPageContent page){
  pageNumber=page.getPageNumber();
  executionContext.getProgressMonitor().onProgress(IProgressMonitor.START_PAGE,(int)pageNumber);
  IArea pageArea=(IArea)page.getExtension(IContent.LAYOUT_EXTENSION);
  if (pageArea != null) {
    pageArea.accept(new BookmarkCollector());
  }
}",0.4655547498187092
66589,"protected void open(){
  try {
    pageWriter=new ReportContentWriterV3(document.getArchive(),ReportDocumentConstants.PAGE_STREAM);
    indexStream=document.getArchive().createRandomAccessStream(ReportDocumentConstants.PAGE_INDEX_STREAM);
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    close();
  }
}","protected void open(IReportContent report){
  try {
    writer=new ReportContentWriterV3(document.getArchive(),ReportDocumentConstants.CONTENT_STREAM);
    writer.writeReport(report);
    pageWriter=new ReportContentWriterV3(document.getArchive(),ReportDocumentConstants.PAGE_STREAM);
    indexStream=document.getArchive().createRandomAccessStream(ReportDocumentConstants.PAGE_INDEX_STREAM);
  }
 catch (  IOException ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
    close();
  }
}",0.8163265306122449
66590,"/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count,Map<String,StringTable> stringTableMap,Map<String,DataSetInMemoryStringIndex> index) throws DataException {
  int i=0;
  try {
    Object[] obs=new Object[rsMeta.getFieldCount()];
    for (i=0; i < count; i++) {
      if (rsMeta.isIndexColumn(i + 1)) {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        if (index.containsKey(rsMeta.getFieldName(i + 1))) {
          obs[i]=index.get(rsMeta.getFieldName(i + 1)).getKeyValue(obs[i]);
        }
      }
 else       if (rsMeta.getFieldMetaData(i + 1).getDataType() == String.class && rsMeta.isCompressedColumn(i + 1)) {
        StringTable stringTable=null;
        if (stringTableMap != null) {
          stringTable=stringTableMap.get(rsMeta.getFieldName(i + 1));
        }
        if (stringTable != null) {
          obs[i]=stringTable.getStringValue(IOUtil.readInt(dis));
        }
 else {
          obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        }
      }
 else {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
      }
    }
    return new ResultObject(rsMeta,obs);
  }
 catch (  IOException e) {
    Throwable t=e.getCause();
    if (t instanceof ClassNotFoundException) {
      throw new DataException(ResourceConstants.FAIL_LOAD_CLASS,e,new String[]{t.getMessage(),rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
 else {
      throw new DataException(ResourceConstants.FAIL_LOAD_COLUMN_VALUE,e,new String[]{rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
  }
}","/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count,Map<String,StringTable> stringTableMap,Map<String,DataSetInMemoryStringIndex> index) throws DataException {
  int i=0;
  try {
    Object[] obs=new Object[rsMeta.getFieldCount()];
    for (i=0; i < count; i++) {
      if (rsMeta.isIndexColumn(i + 1) && (index.containsKey(rsMeta.getFieldName(i + 1)))) {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        obs[i]=index.get(rsMeta.getFieldName(i + 1)).getKeyValue(obs[i]);
      }
 else       if (rsMeta.getFieldMetaData(i + 1).getDataType() == String.class && rsMeta.isCompressedColumn(i + 1)) {
        StringTable stringTable=null;
        if (stringTableMap != null) {
          stringTable=stringTableMap.get(rsMeta.getFieldName(i + 1));
        }
        if (stringTable != null) {
          obs[i]=stringTable.getStringValue(IOUtil.readInt(dis));
        }
 else {
          obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        }
      }
 else {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
      }
    }
    return new ResultObject(rsMeta,obs);
  }
 catch (  IOException e) {
    Throwable t=e.getCause();
    if (t instanceof ClassNotFoundException) {
      throw new DataException(ResourceConstants.FAIL_LOAD_CLASS,e,new String[]{t.getMessage(),rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
 else {
      throw new DataException(ResourceConstants.FAIL_LOAD_COLUMN_VALUE,e,new String[]{rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
  }
}",0.9644902634593356
66591,"/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,byte[] imageData,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageData == null || imageData.length == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(imageData,null,null);
  imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    int resolutionX=image.getPhysicalWidthDpi();
    int resolutionY=image.getPhysicalHeightDpi();
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    imageWidth=((float)image.getWidth()) / resolutionX * 72;
    imageHeight=((float)image.getHeight()) / resolutionY * 72;
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}","/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,byte[] imageData,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageData == null || imageData.length == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(imageData,null,null);
  imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    int resolutionX=image.getPhysicalWidthDpi();
    int resolutionY=image.getPhysicalHeightDpi();
    if (resolutionX <= 0 || resolutionY <= 0) {
      resolutionX=96;
      resolutionY=96;
    }
    imageWidth=((float)image.getWidth()) / resolutionX * 72;
    imageHeight=((float)image.getHeight()) / resolutionY * 72;
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}",0.9882399059192474
66592,"public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy,dataSetHandle);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    try {
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      DataService.getInstance().unRegisterSession(session);
      session.shutdown();
      engineTask.close();
      engine.destroy();
    }
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot());
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    try {
      drSession.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      drSession.shutdown();
    }
  }
}","public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    try {
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      DataService.getInstance().unRegisterSession(session);
      session.shutdown();
      engineTask.close();
      engine.destroy();
    }
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot());
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    try {
      drSession.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      drSession.shutdown();
    }
  }
}",0.9961685823754788
66593,"private String getFontFamily(IStyle c_style,Chunk ch){
  String fontFamily=null;
  if (c_style != null && c_style.getFontFamily() != null) {
    fontFamily=c_style.getFontFamily();
  }
 else {
    FontInfo info=ch.getFontInfo();
    fontFamily=info.getFontName();
  }
  return fontFamily;
}","private String getFontFamily(IStyle c_style,Chunk ch){
  String fontFamily=null;
  if (c_style != null && c_style.getFontFamily() != null) {
    fontFamily=mapGenericFont(c_style.getFontFamily());
  }
 else {
    FontInfo info=ch.getFontInfo();
    fontFamily=info.getFontName();
  }
  return fontFamily;
}",0.9731543624161074
66594,"private FontSplitter getFontSplitter(IContent content,String text){
  FontMappingManager fontManager=FontMappingManagerFactory.getInstance().getFontMappingManager(""String_Node_Str"",Locale.getDefault());
  FontSplitter fontSplitter=new FontSplitter(fontManager,new Chunk(text),(TextContent)content,true,false);
  return fontSplitter;
}","private FontSplitter getFontSplitter(IContent content,String text){
  FontMappingManager fontManager=FontMappingManagerFactory.getInstance().getFontMappingManager(""String_Node_Str"",Locale.getDefault());
  FontSplitter fontSplitter=new FontSplitter(fontManager,new Chunk(text),(TextContent)content,false,false);
  return fontSplitter;
}",0.9895366218236172
66595,"/** 
 * @param aggrName
 * @param groupInstanceIndex
 * @return
 * @throws DataException
 */
public Object getValue(String aggrName,int groupInstanceIndex) throws DataException {
  try {
    if (this.contains(aggrName)) {
      Object value=holders.get(aggrName).get(groupInstanceIndex);
      if (value != null && value instanceof BirtException)       throw (BirtException)value;
      if (qd != null && qd.getBindings().containsKey(aggrName)) {
        IBinding b=(IBinding)qd.getBindings().get(aggrName);
        value=DataTypeUtil.convert(value,b.getDataType());
      }
      return value;
    }
    return null;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  BirtException e) {
    throw new DataException(e.getErrorCode(),e);
  }
}","/** 
 * @param aggrName
 * @param groupInstanceIndex
 * @return
 * @throws DataException
 */
public Object getValue(String aggrName,int groupInstanceIndex) throws DataException {
  try {
    if (this.contains(aggrName)) {
      Object value=holders.get(aggrName).get(groupInstanceIndex);
      if (value != null && value instanceof BirtException)       throw (BirtException)value;
      if (qd != null && qd.getBindings().containsKey(aggrName)) {
        IBinding b=(IBinding)qd.getBindings().get(aggrName);
        value=DataTypeUtil.convert(value,b.getDataType());
      }
      return value;
    }
    return null;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  BirtException e) {
    if (e instanceof DataException)     throw new DataException(e.getErrorCode(),((DataException)e).getArgument());
    throw new DataException(e.getErrorCode(),e);
  }
}",0.9305064782096584
66596,"/** 
 * @param obj1
 * @param obj2
 * @return
 */
private static boolean isTwoExpressionEqual(IConditionalExpression obj1,IConditionalExpression obj2){
  if (obj1.getOperator() != obj2.getOperator())   return false;
  return isEqualString(obj1.getGroupName(),obj2.getGroupName()) && isTwoExpressionEqual(obj1.getExpression(),obj2.getExpression()) && isTwoExpressionEqual(obj1.getOperand1(),obj2.getOperand1())&& isTwoExpressionEqual(obj1.getOperand2(),obj2.getOperand2());
}","/** 
 * @param obj1
 * @param obj2
 * @return
 */
private static boolean isTwoExpressionEqual(IConditionalExpression obj1,IConditionalExpression obj2,boolean ignoreDataTypes){
  if (obj1.getOperator() != obj2.getOperator())   return false;
  return isEqualString(obj1.getGroupName(),obj2.getGroupName()) && isTwoExpressionEqual(obj1.getExpression(),obj2.getExpression(),ignoreDataTypes) && isTwoExpressionEqual(obj1.getOperand1(),obj2.getOperand1(),ignoreDataTypes)&& isTwoExpressionEqual(obj1.getOperand2(),obj2.getOperand2(),ignoreDataTypes);
}",0.9294117647058824
66597,"/** 
 * @param b1
 * @param b2
 * @return
 * @throws DataException
 */
public static boolean isTwoBindingEqual(IBinding b1,IBinding b2) throws DataException {
  if (!isTwoExpressionEqual(b1.getExpression(),b2.getExpression()))   return false;
  if (!isEqualString(b1.getAggrFunction(),b2.getAggrFunction()))   return false;
  if (b1.getDataType() != b2.getDataType())   return false;
  if (!isTwoExpressionEqual(b1.getFilter(),b2.getFilter()))   return false;
  if (b1.getAggregatOns().size() != b2.getAggregatOns().size())   return false;
  for (int i=0; i < b1.getAggregatOns().size(); i++) {
    if (!isEqualString(b1.getAggregatOns().get(i).toString(),b2.getAggregatOns().get(i).toString()))     return false;
  }
  if (b1.getArguments().size() != b2.getArguments().size())   return false;
  for (int i=0; i < b1.getArguments().size(); i++) {
    if (!isTwoExpressionEqual((IBaseExpression)b1.getArguments().get(i),(IBaseExpression)b2.getArguments().get(i)))     return false;
  }
  return true;
}","/** 
 * @param b1
 * @param b2
 * @return
 * @throws DataException
 */
public static boolean isTwoBindingEqual(IBinding b1,IBinding b2) throws DataException {
  if (b1.getDataType() != b2.getDataType())   return false;
  if (!isTwoExpressionEqual(b1.getExpression(),b2.getExpression(),true))   return false;
  if (!isEqualString(b1.getAggrFunction(),b2.getAggrFunction()))   return false;
  if (!isTwoExpressionEqual(b1.getFilter(),b2.getFilter(),true))   return false;
  if (b1.getAggregatOns().size() != b2.getAggregatOns().size())   return false;
  for (int i=0; i < b1.getAggregatOns().size(); i++) {
    if (!isEqualString(b1.getAggregatOns().get(i).toString(),b2.getAggregatOns().get(i).toString()))     return false;
  }
  if (b1.getArguments().size() != b2.getArguments().size())   return false;
  for (int i=0; i < b1.getArguments().size(); i++) {
    if (!isTwoExpressionEqual((IBaseExpression)b1.getArguments().get(i),(IBaseExpression)b2.getArguments().get(i),true))     return false;
  }
  return true;
}",0.4918195339613287
66598,"/** 
 * @param inputParamBindings1
 * @param inputParamBindings2
 * @return
 */
private static boolean isInputParameterBindingEquals(Collection inputParamBindings1,Collection inputParamBindings2){
  if (inputParamBindings1 == inputParamBindings2)   return true;
  if (inputParamBindings1 == null || inputParamBindings2 == null)   return false;
  if (inputParamBindings1.size() != inputParamBindings2.size())   return false;
  Iterator it1=inputParamBindings1.iterator();
  Iterator it2=inputParamBindings2.iterator();
  while (it1.hasNext()) {
    IInputParameterBinding binding1=(IInputParameterBinding)it1.next();
    IInputParameterBinding binding2=(IInputParameterBinding)it2.next();
    if (!isTwoExpressionEqual(binding1.getExpr(),binding2.getExpr()))     return false;
    if (!isEqualString(binding1.getName(),binding2.getName()))     return false;
    if (binding1.getPosition() != binding2.getPosition())     return false;
  }
  return true;
}","/** 
 * @param inputParamBindings1
 * @param inputParamBindings2
 * @return
 */
private static boolean isInputParameterBindingEquals(Collection inputParamBindings1,Collection inputParamBindings2){
  if (inputParamBindings1 == inputParamBindings2)   return true;
  if (inputParamBindings1 == null || inputParamBindings2 == null)   return false;
  if (inputParamBindings1.size() != inputParamBindings2.size())   return false;
  Iterator it1=inputParamBindings1.iterator();
  Iterator it2=inputParamBindings2.iterator();
  while (it1.hasNext()) {
    IInputParameterBinding binding1=(IInputParameterBinding)it1.next();
    IInputParameterBinding binding2=(IInputParameterBinding)it2.next();
    if (!isTwoExpressionEqual(binding1.getExpr(),binding2.getExpr(),false))     return false;
    if (!isEqualString(binding1.getName(),binding2.getName()))     return false;
    if (binding1.getPosition() != binding2.getPosition())     return false;
  }
  return true;
}",0.9968619246861924
66599,"/** 
 * @param se
 * @param se2
 * @return
 */
private static boolean isEqualExpression2(IScriptExpression se,IScriptExpression se2){
  if (se == se2)   return true;
 else   if (se == null || se2 == null)   return false;
  return se.getDataType() == se2.getDataType() && isEqualObject(se.getText(),se2.getText());
}","/** 
 * @param se
 * @param se2
 * @return
 */
private static boolean isEqualExpression2(IScriptExpression se,IScriptExpression se2){
  if (se == se2)   return true;
 else   if (se == null || se2 == null)   return false;
  return (se.getDataType() == se2.getDataType() || (se.getDataType() == DataType.ANY_TYPE && se2.getDataType() == DataType.UNKNOWN_TYPE) || (se.getDataType() == DataType.UNKNOWN_TYPE && se2.getDataType() == DataType.ANY_TYPE)) && isEqualObject(se.getText(),se2.getText());
}",0.6888888888888889
66600,"/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  if (timeZone != null && timeZone.inDaylightTime(d1))   diff-=timeZone.getDSTSavings();
  if (timeZone != null && timeZone.inDaylightTime(d2))   diff+=timeZone.getDSTSavings();
  return diff / 1000l;
}","/** 
 * Return difference in number of seconds
 * @param d1
 * @param d2
 * @return
 */
private static long diffSecond(Date d1,Date d2){
  if (d1 == null || d2 == null) {
    throw new java.lang.IllegalArgumentException(Messages.getString(""String_Node_Str""));
  }
  long diff=d2.getTime() - d1.getTime();
  try {
    if (timeZone != null && timeZone.inDaylightTime(d1))     diff-=timeZone.getDSTSavings();
    if (timeZone != null && timeZone.inDaylightTime(d2))     diff+=timeZone.getDSTSavings();
  }
 catch (  NullPointerException ne) {
    if (timeZone != null) {
      java.util.TimeZone jTimeZone=java.util.TimeZone.getTimeZone(timeZone.getID());
      jTimeZone.setRawOffset(timeZone.getRawOffset());
      if (timeZone != null && jTimeZone.inDaylightTime(d1))       diff-=jTimeZone.getDSTSavings();
      if (timeZone != null && jTimeZone.inDaylightTime(d2))       diff+=jTimeZone.getDSTSavings();
    }
  }
  return diff / 1000l;
}",0.7007601935038009
66601,"/** 
 * @param streamManager
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public static RDGroupUtil loadGroupUtil(String tempDir,StreamManager streamManager,int streamPos,int streamScope) throws DataException {
  RAInputStream stream=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
  RAInputStream[] groupStreams=null;
  int gNumber=0;
  try {
    gNumber=IOUtil.readInt(stream);
    groupStreams=new RAInputStream[gNumber];
    long nextOffset=IOUtil.INT_LENGTH;
    for (int i=0; i < gNumber; i++) {
      RAInputStream rain=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
      rain.seek(nextOffset);
      groupStreams[i]=rain;
      int asize=IOUtil.readInt(stream);
      nextOffset=nextOffset + IOUtil.INT_LENGTH + 2 * IOUtil.INT_LENGTH * asize;
      stream.seek(nextOffset);
    }
    stream.close();
  }
 catch (  IOException e) {
  }
  return new RDGroupUtil(tempDir,gNumber,groupStreams);
}","/** 
 * @param streamManager
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public static RDGroupUtil loadGroupUtil(String tempDir,StreamManager streamManager,int streamPos,int streamScope) throws DataException {
  RAInputStream stream=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
  RAInputStream[] groupStreams=null;
  int gNumber=0;
  try {
    gNumber=IOUtil.readInt(stream);
    groupStreams=new RAInputStream[gNumber];
    long nextOffset=IOUtil.INT_LENGTH;
    for (int i=0; i < gNumber; i++) {
      RAInputStream rain=streamManager.getInStream(DataEngineContext.GROUP_INFO_STREAM,streamPos,streamScope);
      rain.seek(nextOffset);
      groupStreams[i]=rain;
      int asize=IOUtil.readInt(stream);
      nextOffset=nextOffset + IOUtil.INT_LENGTH + 2 * IOUtil.INT_LENGTH * asize;
      stream.seek(nextOffset);
    }
  }
 catch (  IOException e) {
  }
 finally {
    try {
      stream.close();
    }
 catch (    IOException e) {
    }
  }
  return new RDGroupUtil(tempDir,gNumber,groupStreams);
}",0.9485224022878932
66602,"public void close() throws DataException {
  try {
    if (exprResultReader != null) {
      exprResultReader.close();
      exprResultReader=null;
    }
    if (rowExprsRAIs != null) {
      rowExprsRAIs.close();
      rowExprsRAIs=null;
    }
    if (rowLenRAIs != null) {
      rowLenRAIs.close();
      rowLenRAIs=null;
    }
    if (rowInfoRAIs != null) {
      rowInfoRAIs.close();
      rowInfoRAIs=null;
    }
  }
 catch (  IOException e) {
  }
}","public void close() throws DataException {
  try {
    if (exprResultReader != null) {
      exprResultReader.close();
      exprResultReader=null;
    }
    if (rowExprsRAIs != null) {
      rowExprsRAIs.close();
      rowExprsRAIs=null;
    }
    if (rowLenRAIs != null) {
      rowLenRAIs.close();
      rowLenRAIs=null;
    }
    if (rowInfoRAIs != null) {
      rowInfoRAIs.close();
      rowInfoRAIs=null;
    }
    if (dataSetResultSet != null) {
      dataSetResultSet.close();
      dataSetResultSet=null;
    }
    if (rdGroupUtil != null) {
      rdGroupUtil.close();
      rdGroupUtil=null;
    }
  }
 catch (  IOException e) {
  }
}",0.8262056414922657
66603,"/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader,ScriptContext context) throws BirtException {
  Object[] params={Integer.valueOf(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  this.scriptContext=context;
  this.currentLocale=ULocale.getDefault();
  this.currentTimeZone=TimeZone.getDefault();
  this.isDteScriptContext=false;
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer,ClassLoader classLoader,ScriptContext context) throws BirtException {
  Object[] params={Integer.valueOf(mode),scope,reader,writer,classLoader};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.classLoader=classLoader;
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  this.scriptContext=context;
  this.currentLocale=ULocale.getDefault();
  this.currentTimeZone=TimeZone.getDefault();
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}",0.9873417721518988
66604,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (this.context != null && this.context.isDteScriptContext()) {
    ScriptContext sContext=this.context.getScriptContext();
    ScriptContext pContext=sContext.getParent();
    while (pContext != null) {
      sContext=pContext;
      pContext=sContext.getParent();
    }
    sContext.close();
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.9311055161364156
66605,"/** 
 * Gets a DataEngineContext for use to initialize data engine
 */
public DataEngineContext getDataEngineContext() throws BirtException {
  if (this.context != null)   return this.context;
  this.context=DataEngineContext.newInstance(mode,sContext,docReader,docWriter,appClassLoader);
  this.context.setDteScriptContext(this.isDteScriptContext);
  if (cacheSet)   this.context.setCacheOption(cacheOption,cacheCount);
  return this.context;
}","/** 
 * Gets a DataEngineContext for use to initialize data engine
 */
public DataEngineContext getDataEngineContext() throws BirtException {
  if (this.context != null)   return this.context;
  this.context=DataEngineContext.newInstance(mode,sContext,docReader,docWriter,appClassLoader);
  if (cacheSet)   this.context.setCacheOption(cacheOption,cacheCount);
  return this.context;
}",0.7285886610373945
66606,"/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  try {
    if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))     throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,Integer.valueOf(mode));
    this.mode=mode;
    this.moduleHandle=moduleHandle;
    this.appClassLoader=classLoader;
    ScriptContext internalScriptContext=null;
    if (scriptContext == null) {
      internalScriptContext=new ScriptContext();
      scriptContext=internalScriptContext.newContext(this.getTopScope());
      isDteScriptContext=true;
    }
    this.sContext=scriptContext;
    this.topScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
    this.hasExternalScope=topScope != null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}","/** 
 * Creates a DataEngine context in the provided mode, using the provided top level scope. Also sets the handle of the report design being executed. 
 * @param mode Data Session mode. Can be MODE_GENERATION, MODE_PRESENTATION or MODE_DIRECT_PRESENTATION
 * @param moduleHandle If not null, this report module is used to look up data setand data source definition when executing queries.
 * @param scriptContext
 * @param classLoader
 * @throws AdapterException
 */
public DataSessionContext(int mode,ModuleHandle moduleHandle,ScriptContext scriptContext,ClassLoader classLoader) throws AdapterException {
  try {
    if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == MODE_DIRECT_PRESENTATION || mode == MODE_UPDATE))     throw new AdapterException(ResourceConstants.ADAPTER_INVALID_MODE,Integer.valueOf(mode));
    this.mode=mode;
    this.moduleHandle=moduleHandle;
    this.appClassLoader=classLoader;
    ScriptContext internalScriptContext=null;
    if (scriptContext == null) {
      internalScriptContext=new ScriptContext();
      scriptContext=internalScriptContext.newContext(this.getTopScope());
      DataEngineThreadLocal.getInstance().getCloseListener().add(new ScriptContextCloser(internalScriptContext));
    }
    this.sContext=scriptContext;
    this.topScope=((IDataScriptEngine)scriptContext.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(scriptContext);
    this.hasExternalScope=topScope != null;
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}",0.957071547420965
66607,"/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      try {
        reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      }
 catch (      Exception e) {
      }
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    try {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    }
 catch (    Exception e) {
    }
    if (ParameterAccessor.isValidFilePath(ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}","/** 
 * Returns the report design handle
 * @param request
 * @throws Exception
 * @return Report Design Handle
 */
protected IViewerReportDesignHandle getDesignHandle(HttpServletRequest request) throws Exception {
  IViewerReportDesignHandle design=null;
  IReportRunnable reportRunnable=null;
  IReportDocument reportDocumentInstance=null;
  boolean isDocumentExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT_DOCUMENT);
  boolean isReportExist=ParameterAccessor.isReportParameterExist(request,ParameterAccessor.PARAM_REPORT);
  if (isDocumentExist && !isReportExist) {
    boolean isValidDocument=ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT));
    if (isValidDocument) {
      try {
        reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
      }
 catch (      Exception e) {
      }
      if (reportDocumentInstance != null) {
        reportRunnable=reportDocumentInstance.getReportRunnable();
      }
 else {
        throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_FILE_ERROR,new String[]{this.reportDocumentName});
      }
    }
 else {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
  }
 else   if (isReportExist) {
    if (isDocumentExist && !ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT_DOCUMENT))) {
      throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_DOCUMENT_ACCESS_ERROR,new String[]{this.reportDocumentName});
    }
    try {
      reportDocumentInstance=ReportEngineService.getInstance().openReportDocument(this.reportDesignName,this.reportDocumentName,this.moduleOptions);
    }
 catch (    Exception e) {
    }
    if (ParameterAccessor.isValidFilePath(request,ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_REPORT))) {
      try {
        reportRunnable=BirtUtility.getRunnableFromDesignFile(request,this.reportDesignName,this.moduleOptions);
        if (reportRunnable == null) {
          throw new ViewerException(ResourceConstants.GENERAL_EXCEPTION_REPORT_FILE_ERROR,new String[]{this.reportDesignName});
        }
      }
 catch (      EngineException e) {
        this.exception=e;
      }
    }
  }
  if (reportDocumentInstance != null) {
    this.documentInUrl=true;
    this.parameterMap=reportDocumentInstance.getParameterValues();
    if (!reportDocumentInstance.isComplete() && isReportExist)     this.isDocumentProcessing=true;
    reportDocumentInstance.close();
  }
  if (reportRunnable != null) {
    design=new BirtViewerReportDesignHandle(IViewerReportDesignHandle.RPT_RUNNABLE_OBJECT,reportRunnable);
  }
  return design;
}",0.9958144401813742
66608,"/** 
 * If set isWorkingFolderAccessOnly as true, check the file if exist in working folder.
 * @param filePath
 * @return boolean
 */
public static boolean isValidFilePath(String filePath){
  if (filePath == null)   return false;
  if (isWorkingFolderAccessOnly) {
    File docFile=new File(filePath);
    if (!docFile.isAbsolute()) {
      if (filePath.indexOf(""String_Node_Str"") != -1)       return false;
      return true;
    }
    File docFolder=new File(workingFolder);
    if (docFolder.isAbsolute()) {
      String absolutePath=docFile.getAbsolutePath();
      String docFolderPath=docFolder.getAbsolutePath();
      if (isWindowsPlatform()) {
        absolutePath=absolutePath.toLowerCase();
        docFolderPath=docFolderPath.toLowerCase();
      }
      return absolutePath.startsWith(docFolderPath);
    }
 else {
      return false;
    }
  }
  return true;
}","/** 
 * If set isWorkingFolderAccessOnly as true, check the file if exist in working folder.
 * @param filePath
 * @return boolean
 */
public static boolean isValidFilePath(HttpServletRequest request,String filePath){
  if (filePath == null)   return false;
  if (!POLICY_ALL.equalsIgnoreCase(urlReportPathPolicy)) {
    File f=new File(filePath);
    if (!f.isAbsolute()) {
      try {
        URL url=new URL(filePath);
        if (POLICY_DOMAIN.equalsIgnoreCase(urlReportPathPolicy)) {
          String dm=request.getServerName();
          if (!dm.equals(url.getHost())) {
            return false;
          }
        }
 else {
          return false;
        }
      }
 catch (      MalformedURLException e) {
      }
    }
  }
  if (isWorkingFolderAccessOnly) {
    File docFile=new File(filePath);
    if (!docFile.isAbsolute()) {
      if (filePath.indexOf(""String_Node_Str"") != -1)       return false;
      return true;
    }
    File docFolder=new File(workingFolder);
    if (docFolder.isAbsolute()) {
      String absolutePath=docFile.getAbsolutePath();
      String docFolderPath=docFolder.getAbsolutePath();
      if (isWindowsPlatform()) {
        absolutePath=absolutePath.toLowerCase();
        docFolderPath=docFolderPath.toLowerCase();
      }
      return absolutePath.startsWith(docFolderPath);
    }
 else {
      return false;
    }
  }
  return true;
}",0.7438970261873058
66609,"/** 
 * Get report document name. If passed file path is null, get document file from request. If isCreated is true, try to create the document file when file path is null.
 * @param request
 * @param filePath
 * @param isCreated
 * @return
 * @throws ViewerException
 */
public static String getReportDocument(HttpServletRequest request,String filePath,boolean isCreated) throws ViewerException {
  if (filePath == null) {
    filePath=DataUtil.trimString(getParameter(request,PARAM_REPORT_DOCUMENT));
  }
  filePath=decodeFilePath(request,filePath);
  if (filePath.length() <= 0 && !isCreated)   return null;
  if (filePath.length() <= 0) {
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new ViewerException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    return session.getCachedReportDocument(getReport(request,null),null);
  }
 else {
    filePath=getRealPathOnWorkingFolder(filePath,request);
  }
  return filePath;
}","/** 
 * Get report document name. If passed file path is null, get document file from request. If isCreated is true, try to create the document file when file path is null.
 * @param request
 * @param filePath
 * @param isCreate
 * @return
 * @throws ViewerException
 */
public static String getReportDocument(HttpServletRequest request,String filePath,boolean isCreate) throws ViewerException {
  if (filePath == null) {
    filePath=DataUtil.trimString(getParameter(request,PARAM_REPORT_DOCUMENT));
  }
  filePath=decodeFilePath(request,filePath);
  if (filePath.length() <= 0 && !isCreate)   return null;
  if (filePath.length() <= 0) {
    IViewingSession session=ViewingSessionUtil.getSession(request);
    if (session == null) {
      throw new ViewerException(BirtResources.getMessage(ResourceConstants.GENERAL_ERROR_NO_VIEWING_SESSION));
    }
    return session.getCachedReportDocument(getReport(request,null),null);
  }
 else {
    filePath=getRealPathOnWorkingFolder(filePath,request);
  }
  return filePath;
}",0.9985330073349632
66610,"/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  String documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  String imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  webAppTimeZone=getTimeZoneFromString(context.getInitParameter(INIT_PARAM_TIMEZONE));
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  String initResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  if (isDesigner && initResourceFolder == null)   initResourceFolder=""String_Node_Str"" + IBirtConstants.SYS_PROP_RESOURCE_PATH + ""String_Node_Str"";
  birtResourceFolder=processRealPath(context,initResourceFolder,null,false);
  if (isDesigner) {
    isOverWrite=true;
  }
 else {
    String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
    if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
      isOverWrite=true;
    }
 else {
      isOverWrite=false;
    }
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  String exportFilenameGeneratorClassName=context.getInitParameter(INIT_PARAM_FILENAME_GENERATOR_CLASS);
  if (exportFilenameGeneratorClassName != null) {
    Object generatorInstance=null;
    try {
      Class generatorClass=Class.forName(exportFilenameGeneratorClassName);
      generatorInstance=generatorClass.newInstance();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (generatorInstance != null) {
      if (generatorInstance instanceof IFilenameGeneratorFactory) {
        exportFilenameGenerator=((IFilenameGeneratorFactory)generatorInstance).createFilenameGenerator(context);
      }
 else       if (generatorInstance instanceof IFilenameGenerator) {
        exportFilenameGenerator=(IFilenameGenerator)generatorInstance;
      }
    }
  }
  if (exportFilenameGenerator == null) {
    exportFilenameGenerator=new DefaultFilenameGenerator();
  }
  initViewingSessionConfig(documentFolder,imageFolder);
  isInitContext=true;
}","/** 
 * Initial the parameters class. Web.xml is in UTF-8 format. No need to do encoding convertion.
 * @param context Servlet Context
 */
public synchronized static void initParameters(ServletContext context){
  if (isInitContext)   return;
  if (""String_Node_Str"".equalsIgnoreCase(System.getProperty(IBirtConstants.SYS_PROP_BIRT_ISDESIGNER)))   isDesigner=true;
  String workingPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_WORKING_PATH + ""String_Node_Str"";
  workingFolder=processWorkingFolder(context,context.getInitParameter(INIT_PARAM_WORKING_DIR));
  String initDocumentFolder=context.getInitParameter(INIT_PARAM_DOCUMENT_FOLDER);
  if (isDesigner && initDocumentFolder == null)   initDocumentFolder=workingPath + IBirtConstants.DEFAULT_DOCUMENT_FOLDER;
  String documentFolder=processRealPath(context,initDocumentFolder,IBirtConstants.DEFAULT_DOCUMENT_FOLDER,true);
  String initImageFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_IMAGE_DIR);
  if (isDesigner && initImageFolder == null)   initImageFolder=workingPath + IBirtConstants.DEFAULT_IMAGE_FOLDER;
  String imageFolder=processRealPath(context,initImageFolder,IBirtConstants.DEFAULT_IMAGE_FOLDER,true);
  String initLogFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_DIR);
  if (isDesigner && initLogFolder == null)   initLogFolder=workingPath + IBirtConstants.DEFAULT_LOGS_FOLDER;
  logFolder=processRealPath(context,initLogFolder,IBirtConstants.DEFAULT_LOGS_FOLDER,true);
  logLevel=context.getInitParameter(ParameterAccessor.INIT_PARAM_LOG_LEVEL);
  if (logLevel == null)   logLevel=IBirtConstants.DEFAULT_LOGS_LEVEL;
  String rootPath=""String_Node_Str"" + IBirtConstants.SYS_PROP_ROOT_PATH + ""String_Node_Str"";
  String initScriptlibFolder=context.getInitParameter(ParameterAccessor.INIT_PARAM_SCRIPTLIB_DIR);
  if (isDesigner && initScriptlibFolder == null)   initScriptlibFolder=rootPath + IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER;
  scriptLibDir=processRealPath(context,initScriptlibFolder,IBirtConstants.DEFAULT_SCRIPTLIB_FOLDER,false);
  webAppLocale=getLocaleFromString(context.getInitParameter(INIT_PARAM_LOCALE));
  if (webAppLocale == null)   webAppLocale=Locale.getDefault();
  webAppTimeZone=getTimeZoneFromString(context.getInitParameter(INIT_PARAM_TIMEZONE));
  isWorkingFolderAccessOnly=Boolean.valueOf(context.getInitParameter(INIT_PARAM_WORKING_FOLDER_ACCESS_ONLY)).booleanValue();
  urlReportPathPolicy=context.getInitParameter(INIT_PARAM_URL_REPORT_PATH_POLICY);
  String s_maxRows=context.getInitParameter(INIT_PARAM_VIEWER_MAXROWS);
  try {
    maxRows=Integer.valueOf(s_maxRows).intValue();
  }
 catch (  NumberFormatException e) {
    maxRows=-1;
  }
  String s_maxRowLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_ROWLEVELS);
  try {
    maxCubeRowLevels=Integer.valueOf(s_maxRowLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeRowLevels=-1;
  }
  String s_maxColumnLevels=context.getInitParameter(INIT_PARAM_VIEWER_MAXCUBE_COLUMNLEVELS);
  try {
    maxCubeColumnLevels=Integer.valueOf(s_maxColumnLevels).intValue();
  }
 catch (  NumberFormatException e) {
    maxCubeColumnLevels=-1;
  }
  String s_cubeMemSize=context.getInitParameter(INIT_PARAM_VIEWER_CUBEMEMSIZE);
  try {
    cubeMemorySize=Integer.valueOf(s_cubeMemSize).intValue();
  }
 catch (  NumberFormatException e) {
    cubeMemorySize=0;
  }
  String initResourceFolder=context.getInitParameter(INIT_PARAM_BIRT_RESOURCE_PATH);
  if (isDesigner && initResourceFolder == null)   initResourceFolder=""String_Node_Str"" + IBirtConstants.SYS_PROP_RESOURCE_PATH + ""String_Node_Str"";
  birtResourceFolder=processRealPath(context,initResourceFolder,null,false);
  if (isDesigner) {
    isOverWrite=true;
  }
 else {
    String s_overwrite=DataUtil.trimString(context.getInitParameter(INIT_PARAM_OVERWRITE_DOCUMENT));
    if (""String_Node_Str"".equalsIgnoreCase(s_overwrite)) {
      isOverWrite=true;
    }
 else {
      isOverWrite=false;
    }
  }
  initProps=initViewerProps(context,initProps);
  if (loggers == null) {
    loggers=new HashMap();
  }
  for (Iterator i=initProps.keySet().iterator(); i.hasNext(); ) {
    String name=(String)i.next();
    if (name.startsWith(""String_Node_Str"")) {
      String loggerName=name.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      String levelName=(String)initProps.get(name);
      loggers.put(loggerName,levelName);
      i.remove();
    }
  }
  String flag=DataUtil.trimString(context.getInitParameter(INIT_PARAM_PRINT_SERVERSIDE));
  if (IBirtConstants.VAR_ON.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=true;
  }
 else   if (IBirtConstants.VAR_OFF.equalsIgnoreCase(flag)) {
    isSupportedPrintOnServer=false;
  }
  String s_agentstyle=context.getInitParameter(INIT_PARAM_AGENTSTYLE_ENGINE);
  if (""String_Node_Str"".equalsIgnoreCase(s_agentstyle))   isAgentStyle=false;
  String exportFilenameGeneratorClassName=context.getInitParameter(INIT_PARAM_FILENAME_GENERATOR_CLASS);
  if (exportFilenameGeneratorClassName != null) {
    Object generatorInstance=null;
    try {
      Class generatorClass=Class.forName(exportFilenameGeneratorClassName);
      generatorInstance=generatorClass.newInstance();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    if (generatorInstance != null) {
      if (generatorInstance instanceof IFilenameGeneratorFactory) {
        exportFilenameGenerator=((IFilenameGeneratorFactory)generatorInstance).createFilenameGenerator(context);
      }
 else       if (generatorInstance instanceof IFilenameGenerator) {
        exportFilenameGenerator=(IFilenameGenerator)generatorInstance;
      }
    }
  }
  if (exportFilenameGenerator == null) {
    exportFilenameGenerator=new DefaultFilenameGenerator();
  }
  initViewingSessionConfig(documentFolder,imageFolder);
  isInitContext=true;
}",0.9928144749372348
66611,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  if (this.context != null && this.context.isDteScriptContext()) {
    ScriptContext sContext=this.context.getScriptContext();
    ScriptContext pContext=sContext.getParent();
    while (pContext != null) {
      sContext=pContext;
      pContext=sContext.getParent();
    }
    sContext.close();
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.9311055161364156
66612,"/** 
 * Populate records to be retrieved when re-render resultSetTable
 * @param metaData
 * @param query
 * @throws BirtException
 */
private void populateRecords(IResultIterator iter){
  try {
    if (iter != null) {
      IResultMetaData meta=iter.getResultMetaData();
      while (iter.next()) {
        CellValue[] record=new CellValue[meta.getColumnCount()];
        for (int n=0; n < record.length; n++) {
          CellValue cv=new CellValue();
          Object value=iter.getValue(meta.getColumnName(n + 1));
          String disp=null;
          if (value instanceof Number)           disp=value.toString();
 else           disp=iter.getString(meta.getColumnName(n + 1));
          cv.setDisplayValue(disp);
          cv.setRealValue(value);
          record[n]=cv;
        }
        recordList.add(record);
      }
      setPromptLabelText();
      iter.close();
    }
  }
 catch (  RuntimeException e) {
    errorList.add(e);
  }
catch (  BirtException e) {
    errorList.add(e);
  }
}","/** 
 * Populate records to be retrieved when re-render resultSetTable
 * @param metaData
 * @param query
 * @throws BirtException
 */
private void populateRecords(IResultIterator iter){
  try {
    if (iter != null) {
      IResultMetaData meta=iter.getResultMetaData();
      if (meta.getColumnCount() > 0) {
        while (iter.next()) {
          CellValue[] record=new CellValue[meta.getColumnCount()];
          for (int n=0; n < record.length; n++) {
            CellValue cv=new CellValue();
            Object value=iter.getValue(meta.getColumnName(n + 1));
            String disp=null;
            if (value instanceof Number)             disp=value.toString();
 else             disp=iter.getString(meta.getColumnName(n + 1));
            cv.setDisplayValue(disp);
            cv.setRealValue(value);
            record[n]=cv;
          }
          recordList.add(record);
        }
      }
      setPromptLabelText();
      iter.close();
    }
  }
 catch (  RuntimeException e) {
    errorList.add(e);
  }
catch (  BirtException e) {
    errorList.add(e);
  }
}",0.9628198937711252
66613,"/** 
 * @param targetLevel
 * @param bindingExpr
 * @param bindings
 * @param rowEdgeExprList
 * @param columnEdgeExprList
 * @return
 * @throws AdapterException
 */
public static List getReferencedLevels(String targetLevel,String bindingExpr,List bindings,List rowEdgeExprList,List columnEdgeExprList) throws AdapterException {
  try {
    List result=new ArrayList();
    DimensionLevel target=getTargetDimLevel(targetLevel);
    String bindingName=getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null;
    }
    int candidateEdge=getAxisQualifierEdgeType(rowEdgeExprList,columnEdgeExprList,target);
    if (candidateEdge == -1)     return result;
    if (isMeasure) {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
        populateLevels(rowEdgeExprList,result);
      break;
case ICubeQueryDefinition.COLUMN_EDGE:
    populateLevels(columnEdgeExprList,result);
  break;
}
}
 else {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
populateAxisLevels(aggrOns,rowEdgeExprList,result);
break;
case ICubeQueryDefinition.COLUMN_EDGE:
populateAxisLevels(aggrOns,columnEdgeExprList,result);
break;
}
}
return result;
}
 catch (DataException e) {
throw new AdapterException(e.getLocalizedMessage(),e);
}
}","/** 
 * @param targetLevel
 * @param bindingExpr
 * @param bindings
 * @param rowEdgeExprList
 * @param columnEdgeExprList
 * @return
 * @throws AdapterException
 */
public static List getReferencedLevels(String targetLevel,String bindingExpr,List bindings,List rowEdgeExprList,List columnEdgeExprList) throws AdapterException {
  try {
    List result=new ArrayList();
    DimensionLevel target=getTargetDimLevel(targetLevel);
    String bindingName=getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null;
      if (!isMeasure) {
        isMeasure=getReferencedScriptObject(binding.getExpression(),""String_Node_Str"") != null;
      }
    }
    int candidateEdge=getAxisQualifierEdgeType(rowEdgeExprList,columnEdgeExprList,target);
    if (candidateEdge == -1)     return result;
    if (isMeasure) {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
        populateLevels(rowEdgeExprList,result);
      break;
case ICubeQueryDefinition.COLUMN_EDGE:
    populateLevels(columnEdgeExprList,result);
  break;
}
}
 else {
switch (candidateEdge) {
case ICubeQueryDefinition.ROW_EDGE:
populateAxisLevels(aggrOns,rowEdgeExprList,result);
break;
case ICubeQueryDefinition.COLUMN_EDGE:
populateAxisLevels(aggrOns,columnEdgeExprList,result);
break;
}
}
return result;
}
 catch (DataException e) {
throw new AdapterException(e.getLocalizedMessage(),e);
}
}",0.9647188533627344
66614,"private int getLevelSize(IDataSet4Aggregation.MetaInfo metaInfo,DimLevel[] dimLevel) throws DataException {
  if (dimLevel == null || dimLevel.length == 0) {
    return 0;
  }
  int[] dataType=new int[dimLevel.length];
  for (int i=0; i < dimLevel.length; i++) {
    DimColumn dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getLevelName());
    ColumnInfo columnInfo=metaInfo.getColumnInfo(dimColumn);
    dataType[i]=columnInfo.getDataType();
  }
  return SizeOfUtil.getObjectSize(dataType);
}","private int getLevelSize(IDataSet4Aggregation.MetaInfo metaInfo,DimLevel[] dimLevel) throws DataException {
  if (dimLevel == null || dimLevel.length == 0) {
    return 0;
  }
  int[] dataType=new int[dimLevel.length];
  for (int i=0; i < dimLevel.length; i++) {
    DimColumn dimColumn=null;
    if (dimLevel[i].getAttrName() == null)     dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getLevelName());
 else     dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getAttrName());
    ColumnInfo columnInfo=metaInfo.getColumnInfo(dimColumn);
    dataType[i]=columnInfo.getDataType();
  }
  return SizeOfUtil.getObjectSize(dataType);
}",0.8553359683794466
66615,"private int getLevelSize(DimLevel[] dimLevel) throws DataException {
  if (dimLevel == null || dimLevel.length == 0) {
    return 0;
  }
  int[] dataType=new int[dimLevel.length];
  for (int i=0; i < dimLevel.length; i++) {
    DimColumn dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getLevelName());
    ColumnInfo columnInfo=(dataSet4Aggregation.getMetaInfo()).getColumnInfo(dimColumn);
    dataType[i]=columnInfo.getDataType();
  }
  return SizeOfUtil.getObjectSize(dataType);
}","private int getLevelSize(DimLevel[] dimLevel) throws DataException {
  if (dimLevel == null || dimLevel.length == 0) {
    return 0;
  }
  int[] dataType=new int[dimLevel.length];
  for (int i=0; i < dimLevel.length; i++) {
    DimColumn dimColumn=null;
    if (dimLevel[i].getAttrName() == null)     dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getLevelName());
 else     dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getAttrName());
    ColumnInfo columnInfo=(dataSet4Aggregation.getMetaInfo()).getColumnInfo(dimColumn);
    dataType[i]=columnInfo.getDataType();
  }
  return SizeOfUtil.getObjectSize(dataType);
}",0.8525382755842063
66616,"public ColumnInfo getColumnInfo(DimColumn dimColumn) throws DataException {
  String dimensionName=dimColumn.getDimensionName();
  String levelName=dimColumn.getLevelName();
  String columnName=dimColumn.getColumnName();
  int dimIndex=getDimensionIndex(dimensionName);
  if (dimIndex < 0) {
    throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_DIMENSION) + dimensionName);
  }
  IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
  int levelIndex=itr.getLevelIndex(levelName);
  if (levelIndex < 0) {
    throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_LEVEL) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str"");
  }
  ILevel levelInfo=itr.getDimesion().getHierarchy().getLevels()[levelIndex];
  int columnIndex=-1;
  int dataType=DataType.UNKNOWN_TYPE;
  boolean isKey=false;
  for (int i=0; i < levelInfo.getKeyNames().length; i++) {
    if (levelInfo.getKeyNames()[i].equals(columnName)) {
      columnIndex=i;
      dataType=levelInfo.getKeyDataType(columnName);
      isKey=true;
      break;
    }
  }
  if (!isKey) {
    for (int i=0; i < levelInfo.getAttributeNames().length; i++) {
      if (levelInfo.getAttributeNames()[i].equals(columnName)) {
        columnIndex=i;
        dataType=levelInfo.getAttributeDataType(columnName);
        break;
      }
    }
  }
  if (columnIndex < 0) {
    throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_KEY_OR_ATTR) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str""+ columnName+ ""String_Node_Str"");
  }
  return new ColumnInfo(dimIndex,levelIndex,columnIndex,dataType,isKey);
}","public ColumnInfo getColumnInfo(DimColumn dimColumn) throws DataException {
  String dimensionName=dimColumn.getDimensionName();
  String levelName=dimColumn.getLevelName();
  String columnName=dimColumn.getColumnName();
  int dimIndex=getDimensionIndex(dimensionName);
  if (dimIndex < 0) {
    throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_DIMENSION) + dimensionName);
  }
  IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
  int levelIndex=itr.getLevelIndex(levelName);
  if (levelIndex < 0) {
    throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_LEVEL) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str"");
  }
  ILevel levelInfo=itr.getDimesion().getHierarchy().getLevels()[levelIndex];
  int columnIndex=-1;
  int dataType=DataType.UNKNOWN_TYPE;
  boolean isKey=false;
  for (int i=0; i < levelInfo.getKeyNames().length; i++) {
    if (levelInfo.getKeyNames()[i].equals(columnName)) {
      columnIndex=i;
      dataType=levelInfo.getKeyDataType(columnName);
      isKey=true;
      break;
    }
 else     if (levelInfo.getName().equals(columnName)) {
      columnIndex=i;
      dataType=levelInfo.getKeyDataType(levelInfo.getKeyNames()[0]);
      isKey=true;
      break;
    }
  }
  if (!isKey && levelInfo.getAttributeNames() != null) {
    for (int i=0; i < levelInfo.getAttributeNames().length; i++) {
      if (levelInfo.getAttributeNames()[i].equals(columnName)) {
        columnIndex=i;
        dataType=levelInfo.getAttributeDataType(columnName);
        break;
      }
    }
  }
  if (columnIndex < 0) {
    throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_KEY_OR_ATTR) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str""+ columnName+ ""String_Node_Str"");
  }
  return new ColumnInfo(dimIndex,levelIndex,columnIndex,dataType,isKey);
}",0.9400749063670412
66617,"public MetaInfo getMetaInfo(){
  return new IDataSet4Aggregation.MetaInfo(){
    public String[] getAttributeNames(    int dimIndex,    int levelIndex){
      IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
      if (!itr.getDimesion().isTime()) {
        return itr.getDimesion().getHierarchy().getLevels()[levelIndex].getAttributeNames();
      }
 else {
        return null;
      }
    }
    public ColumnInfo getColumnInfo(    DimColumn dimColumn) throws DataException {
      String dimensionName=dimColumn.getDimensionName();
      String levelName=dimColumn.getLevelName();
      String columnName=dimColumn.getColumnName();
      int dimIndex=getDimensionIndex(dimensionName);
      if (dimIndex < 0) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_DIMENSION) + dimensionName);
      }
      IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
      int levelIndex=itr.getLevelIndex(levelName);
      if (levelIndex < 0) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_LEVEL) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str"");
      }
      ILevel levelInfo=itr.getDimesion().getHierarchy().getLevels()[levelIndex];
      int columnIndex=-1;
      int dataType=DataType.UNKNOWN_TYPE;
      boolean isKey=false;
      for (int i=0; i < levelInfo.getKeyNames().length; i++) {
        if (levelInfo.getKeyNames()[i].equals(columnName)) {
          columnIndex=i;
          dataType=levelInfo.getKeyDataType(columnName);
          isKey=true;
          break;
        }
      }
      if (!isKey) {
        for (int i=0; i < levelInfo.getAttributeNames().length; i++) {
          if (levelInfo.getAttributeNames()[i].equals(columnName)) {
            columnIndex=i;
            dataType=levelInfo.getAttributeDataType(columnName);
            break;
          }
        }
      }
      if (columnIndex < 0) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_KEY_OR_ATTR) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str""+ columnName+ ""String_Node_Str"");
      }
      return new ColumnInfo(dimIndex,levelIndex,columnIndex,dataType,isKey);
    }
    public int getDimensionIndex(    String dimensionName){
      for (int i=0; i < dimensionResultIterators.length; i++) {
        if (dimensionResultIterators[i].getDimesion().getName().equals(dimensionName)) {
          return i;
        }
      }
      return -1;
    }
    public String[] getKeyNames(    int dimIndex,    int levelIndex){
      IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
      if (itr.getDimesion().isTime()) {
        return new String[]{TimeDimensionUtil.getFieldName(levelIndex)};
      }
 else {
        return itr.getDimesion().getHierarchy().getLevels()[levelIndex].getKeyNames();
      }
    }
    public int getLevelIndex(    String dimensionName,    String levelName){
      int dimIndex=getDimensionIndex(dimensionName);
      if (dimIndex >= 0) {
        IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
        return itr.getLevelIndex(levelName);
      }
      return -1;
    }
    public int getMeasureIndex(    String measureName){
      if (measureName == null) {
        return -1;
      }
      MeasureInfo[] measureInfo=getMeasureInfos();
      for (int i=0; i < measureInfo.length; i++) {
        if (measureName.equals(measureInfo[i].getMeasureName())) {
          return i;
        }
      }
      return -1;
    }
    public MeasureInfo[] getMeasureInfos(){
      if (computedMeasureHelper != null && computedMeasureHelper.getAllComputedMeasureInfos() != null) {
        MeasureInfo[] cubeMeasureInfo=factTableRowIterator.getMeasureInfos();
        MeasureInfo[] computedMeasureInfo=computedMeasureHelper.getAllComputedMeasureInfos();
        MeasureInfo[] result=new MeasureInfo[computedMeasureInfo.length + cubeMeasureInfo.length];
        System.arraycopy(cubeMeasureInfo,0,result,0,cubeMeasureInfo.length);
        System.arraycopy(computedMeasureInfo,0,result,cubeMeasureInfo.length,computedMeasureInfo.length);
        return result;
      }
 else {
        return factTableRowIterator.getMeasureInfos();
      }
    }
  }
;
}","public MetaInfo getMetaInfo(){
  return new IDataSet4Aggregation.MetaInfo(){
    public String[] getAttributeNames(    int dimIndex,    int levelIndex){
      IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
      if (!itr.getDimesion().isTime()) {
        return itr.getDimesion().getHierarchy().getLevels()[levelIndex].getAttributeNames();
      }
 else {
        return null;
      }
    }
    public ColumnInfo getColumnInfo(    DimColumn dimColumn) throws DataException {
      String dimensionName=dimColumn.getDimensionName();
      String levelName=dimColumn.getLevelName();
      String columnName=dimColumn.getColumnName();
      int dimIndex=getDimensionIndex(dimensionName);
      if (dimIndex < 0) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_DIMENSION) + dimensionName);
      }
      IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
      int levelIndex=itr.getLevelIndex(levelName);
      if (levelIndex < 0) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_LEVEL) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str"");
      }
      ILevel levelInfo=itr.getDimesion().getHierarchy().getLevels()[levelIndex];
      int columnIndex=-1;
      int dataType=DataType.UNKNOWN_TYPE;
      boolean isKey=false;
      for (int i=0; i < levelInfo.getKeyNames().length; i++) {
        if (levelInfo.getKeyNames()[i].equals(columnName)) {
          columnIndex=i;
          dataType=levelInfo.getKeyDataType(columnName);
          isKey=true;
          break;
        }
 else         if (levelInfo.getName().equals(columnName)) {
          columnIndex=i;
          dataType=levelInfo.getKeyDataType(levelInfo.getKeyNames()[0]);
          isKey=true;
          break;
        }
      }
      if (!isKey && levelInfo.getAttributeNames() != null) {
        for (int i=0; i < levelInfo.getAttributeNames().length; i++) {
          if (levelInfo.getAttributeNames()[i].equals(columnName)) {
            columnIndex=i;
            dataType=levelInfo.getAttributeDataType(columnName);
            break;
          }
        }
      }
      if (columnIndex < 0) {
        throw new DataException(DataResourceHandle.getInstance().getMessage(ResourceConstants.NONEXISTENT_KEY_OR_ATTR) + ""String_Node_Str"" + dimensionName+ ""String_Node_Str""+ levelName+ ""String_Node_Str""+ columnName+ ""String_Node_Str"");
      }
      return new ColumnInfo(dimIndex,levelIndex,columnIndex,dataType,isKey);
    }
    public int getDimensionIndex(    String dimensionName){
      for (int i=0; i < dimensionResultIterators.length; i++) {
        if (dimensionResultIterators[i].getDimesion().getName().equals(dimensionName)) {
          return i;
        }
      }
      return -1;
    }
    public String[] getKeyNames(    int dimIndex,    int levelIndex){
      IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
      if (itr.getDimesion().isTime()) {
        return new String[]{TimeDimensionUtil.getFieldName(levelIndex)};
      }
 else {
        return itr.getDimesion().getHierarchy().getLevels()[levelIndex].getKeyNames();
      }
    }
    public int getLevelIndex(    String dimensionName,    String levelName){
      int dimIndex=getDimensionIndex(dimensionName);
      if (dimIndex >= 0) {
        IDimensionResultIterator itr=dimensionResultIterators[dimIndex];
        return itr.getLevelIndex(levelName);
      }
      return -1;
    }
    public int getMeasureIndex(    String measureName){
      if (measureName == null) {
        return -1;
      }
      MeasureInfo[] measureInfo=getMeasureInfos();
      for (int i=0; i < measureInfo.length; i++) {
        if (measureName.equals(measureInfo[i].getMeasureName())) {
          return i;
        }
      }
      return -1;
    }
    public MeasureInfo[] getMeasureInfos(){
      if (computedMeasureHelper != null && computedMeasureHelper.getAllComputedMeasureInfos() != null) {
        MeasureInfo[] cubeMeasureInfo=factTableRowIterator.getMeasureInfos();
        MeasureInfo[] computedMeasureInfo=computedMeasureHelper.getAllComputedMeasureInfos();
        MeasureInfo[] result=new MeasureInfo[computedMeasureInfo.length + cubeMeasureInfo.length];
        System.arraycopy(cubeMeasureInfo,0,result,0,cubeMeasureInfo.length);
        System.arraycopy(computedMeasureInfo,0,result,cubeMeasureInfo.length,computedMeasureInfo.length);
        return result;
      }
 else {
        return factTableRowIterator.getMeasureInfos();
      }
    }
  }
;
}",0.9722346618898344
66618,"private DimLevel[] getAggregateOnLevels(String bindingName) throws DataException {
  for (Iterator it=queryDefn.getBindings().iterator(); it.hasNext(); ) {
    IBinding binding=(IBinding)it.next();
    if (binding.getBindingName().equals(bindingName)) {
      List aggrs=binding.getAggregatOns();
      if (aggrs.size() == 0) {
        if (OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE) != null)         return null;
        IBinding directReferenceBinding=OlapExpressionUtil.getDirectMeasureBinding(binding,queryDefn.getBindings());
        if (directReferenceBinding != null) {
          return getAggregateOnLevels(directReferenceBinding.getBindingName());
        }
        List levelList=new ArrayList();
        IEdgeDefinition rowEdge=queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
        populateDimLevel(levelList,rowEdge);
        IEdgeDefinition colEdge=queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
        populateDimLevel(levelList,colEdge);
        DimLevel[] levels=new DimLevel[levelList.size()];
        levelList.toArray(levels);
        return levels;
      }
 else {
        DimLevel[] levels=new DimLevel[aggrs.size()];
        for (int i=0; i < aggrs.size(); i++) {
          levels[i]=OlapExpressionUtil.getTargetDimLevel(aggrs.get(i).toString());
        }
        return levels;
      }
    }
  }
  return null;
}","private DimLevel[] getAggregateOnLevels(String bindingName) throws DataException {
  for (Iterator it=queryDefn.getBindings().iterator(); it.hasNext(); ) {
    IBinding binding=(IBinding)it.next();
    if (binding.getBindingName().equals(bindingName)) {
      List aggrs=binding.getAggregatOns();
      if (aggrs.size() == 0) {
        if (OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE) != null)         return null;
        IBinding directReferenceBinding=OlapExpressionUtil.getDirectMeasureBinding(binding,queryDefn.getBindings());
        if (directReferenceBinding != null && directReferenceBinding != binding) {
          return getAggregateOnLevels(directReferenceBinding.getBindingName());
        }
        List levelList=new ArrayList();
        IEdgeDefinition rowEdge=queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
        populateDimLevel(levelList,rowEdge);
        IEdgeDefinition colEdge=queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
        populateDimLevel(levelList,colEdge);
        DimLevel[] levels=new DimLevel[levelList.size()];
        levelList.toArray(levels);
        return levels;
      }
 else {
        DimLevel[] levels=new DimLevel[aggrs.size()];
        for (int i=0; i < aggrs.size(); i++) {
          levels[i]=OlapExpressionUtil.getTargetDimLevel(aggrs.get(i).toString());
        }
        return levels;
      }
    }
  }
  return null;
}",0.987085514834206
66619,"public void setUp() throws Exception {
  super.setUp();
  Context context=Context.enter();
  scope=context.initStandardObjects();
  Context.exit();
  expectedValue=new ArrayList();
  appContextMap.put(DataEngine.DATASET_CACHE_OPTION,""String_Node_Str"");
  this.appContextMap.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,null);
  myDataEngine=newDataEngine();
}","public void setUp() throws Exception {
  super.setUp();
  Context context=Context.enter();
  scope=context.initStandardObjects();
  Context.exit();
  expectedValue=new ArrayList();
  appContextMap.put(DataEngine.DATASET_CACHE_OPTION,""String_Node_Str"");
  myDataEngine=newDataEngine();
}",0.89375
66620,"/** 
 * Gets the report design file path
 * @return
 */
public URI getBIRTResourcePath(){
  try {
    return new URI(encode(ReportPlugin.getDefault().getResourceFolder(UIUtil.getCurrentProject(),(ModuleHandle)null)));
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","/** 
 * Gets the report design file path
 * @return
 */
public URI getBIRTResourcePath(){
  if (UIUtil.getCurrentProject() == null) {
    try {
      ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
      if (handle != null) {
        return new URI(encode(handle.getResourceFolder()));
      }
    }
 catch (    URISyntaxException e) {
    }
  }
  try {
    return new URI(encode(ReportPlugin.getDefault().getResourceFolder(UIUtil.getCurrentProject(),(ModuleHandle)null)));
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.4407582938388625
66621,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,DataSetHandleProcessContext procesCtx) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,this.dataEngine,this.modelAdaptor,procesCtx);
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,DataSetHandleProcessContext procesCtx) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,this.dataEngine,this.modelAdaptor,procesCtx);
  preDefineDataSet(handle);
}",0.9624664879356568
66622,"/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      return cacheObject.isCachedDataReusable(requiredCapability);
    }
 else {
      return false;
    }
  }
}","/** 
 * @param dsAndDs
 * @return
 */
boolean doesLoadFromCache(DataSourceAndDataSet dsAndDs,int requiredCapability){
synchronized (cacheMap) {
    IDataSetCacheObject cacheObject=(IDataSetCacheObject)cacheMap.get(dsAndDs);
    if (cacheObject != null) {
      boolean reusable=cacheObject.isCachedDataReusable(requiredCapability);
      if (!reusable) {
        cacheObject.release();
        cacheMap.remove(dsAndDs);
      }
      return reusable;
    }
 else {
      return false;
    }
  }
}",0.8342989571263036
66623,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9874934314240672
66624,"protected boolean doAction() throws Exception {
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  DataSetHandle dsHandle=(DataSetHandle)getSelection();
  if (!(dsHandle instanceof JointDataSetHandle) && !(dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dsHandle,false);
  return (dialog.open() == IDialogConstants.OK_ID);
}","protected boolean doAction() throws Exception {
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  DataSetHandle dsHandle=(DataSetHandle)getSelection();
  if (!(dsHandle instanceof JointDataSetHandle) && !(dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dsHandle,false,false);
  return (dialog.open() == IDialogConstants.OK_ID);
}",0.9974226804123713
66625,"private boolean editDataSet(DataSetHandle ds){
  dataSetHandle=ds;
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,true);
  return (dialog.open() == Window.OK);
}","private boolean editDataSet(DataSetHandle ds){
  dataSetHandle=ds;
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,true,true);
  return (dialog.open() == Window.OK);
}",0.9929873772791024
66626,"private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,false);
  return (dialog.open() == Window.OK);
}","private boolean editDataSet(List existingDataSets,List newDataSets){
  if (existingDataSets == null || newDataSets == null) {
    return false;
  }
  if (newDataSets.size() <= existingDataSets.size()) {
    return false;
  }
  dataSetHandle=findNewDataSet(existingDataSets,newDataSets);
  if (dataSetHandle == null)   return false;
  if (dataSetHandle instanceof ScriptDataSetHandle) {
    return false;
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),dataSetHandle,false,true);
  return (dialog.open() == Window.OK);
}",0.9956709956709956
66627,"public AdvancedDataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput){
  super(parentShell,ds,needToFocusOnOutput);
}","public AdvancedDataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput,boolean isNewlyCreated){
  super(parentShell,ds,needToFocusOnOutput,isNewlyCreated);
}",0.8805031446540881
66628,"/** 
 * The constructor.
 * @param parentShell
 */
public DataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput){
  super(parentShell,ds);
  ExternalUIUtil.validateDataSetHandle(ds);
  initModelManager();
  this.needToFocusOnOutput=needToFocusOnOutput;
  String dataSourceType, dataSetType;
  if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle dataSource=(OdaDataSourceHandle)((OdaDataSetHandle)ds).getDataSource();
    dataSourceType=dataSource.getExtensionID();
    dataSetType=((OdaDataSetHandle)ds).getExtensionID();
  }
 else   if (ds instanceof ScriptDataSetHandle) {
    dataSourceType=DataUIConstants.DATA_SOURCE_SCRIPT;
    dataSetType=DataUIConstants.DATA_SET_SCRIPT;
  }
 else   if (ds instanceof JointDataSetHandle) {
    dataSourceType=""String_Node_Str"";
    dataSetType=""String_Node_Str"";
  }
 else {
    dataSourceType=ExternalUIUtil.getDataSourceType(ds);
    dataSetType=ExternalUIUtil.getDataSetType(ds);
  }
  boolean containsDataSource=ExternalUIUtil.containsDataSource(ds);
  if (containsDataSource) {
    addPageTo(""String_Node_Str"",DATA_SOURCE_SELECTION_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetDataSourceSelectionPage());
    if (DesignSessionUtil.hasValidOdaDesignUIExtension(dataSourceType)) {
      addCustomPageODAV3((OdaDataSetHandle)ds,dataSourceType,dataSetType);
    }
 else     addBirtPage(dataSourceType,dataSetType);
  }
  addCommonPages(ds);
  setPageFocus();
  itemModelManager.start(ds,needToFocusOnOutput);
}","/** 
 * The constructor.
 * @param parentShell
 */
public DataSetEditor(Shell parentShell,DataSetHandle ds,boolean needToFocusOnOutput,boolean isNewlyCreated){
  super(parentShell,ds);
  this.isNewlyCreated=isNewlyCreated;
  ExternalUIUtil.validateDataSetHandle(ds);
  initModelManager();
  this.needToFocusOnOutput=needToFocusOnOutput;
  String dataSourceType, dataSetType;
  if (ds instanceof OdaDataSetHandle) {
    OdaDataSourceHandle dataSource=(OdaDataSourceHandle)((OdaDataSetHandle)ds).getDataSource();
    dataSourceType=dataSource.getExtensionID();
    dataSetType=((OdaDataSetHandle)ds).getExtensionID();
  }
 else   if (ds instanceof ScriptDataSetHandle) {
    dataSourceType=DataUIConstants.DATA_SOURCE_SCRIPT;
    dataSetType=DataUIConstants.DATA_SET_SCRIPT;
  }
 else   if (ds instanceof JointDataSetHandle) {
    dataSourceType=""String_Node_Str"";
    dataSetType=""String_Node_Str"";
  }
 else {
    dataSourceType=ExternalUIUtil.getDataSourceType(ds);
    dataSetType=ExternalUIUtil.getDataSetType(ds);
  }
  boolean containsDataSource=ExternalUIUtil.containsDataSource(ds);
  if (containsDataSource) {
    addPageTo(""String_Node_Str"",DATA_SOURCE_SELECTION_PAGE,Messages.getString(""String_Node_Str""),null,new DataSetDataSourceSelectionPage());
    if (DesignSessionUtil.hasValidOdaDesignUIExtension(dataSourceType)) {
      addCustomPageODAV3((OdaDataSetHandle)ds,dataSourceType,dataSetType);
    }
 else     addBirtPage(dataSourceType,dataSetType);
  }
  addCommonPages(ds);
  setPageFocus();
  itemModelManager.start(ds,needToFocusOnOutput);
}",0.9800588427590716
66629,"/** 
 * The constructor.
 */
public OutputColumnsPage(){
  super();
}","/** 
 * The constructor.
 */
public OutputColumnsPage(boolean isNewlyCreated){
  super();
  this.isNewlyCreated=isNewlyCreated;
}",0.696969696969697
66630,"/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}","/** 
 * populate output columns
 * @throws BirtException
 */
private void populateOutputColums() throws BirtException {
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
  ModuleHandle handle=((DataSetEditor)getContainer()).getHandle().getModuleHandle();
  DataSessionContext context;
  if (handle instanceof ReportDesignHandle) {
    Map dataSetMap=new HashMap();
    Map dataSourceMap=new HashMap();
    DummyEngineTask engineTask=null;
    DataRequestSession session=null;
    ReportEngine engine=null;
    try {
      EngineConfig ec=new EngineConfig();
      ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      DataSetMetaDataHelper.clearPropertyBindingMap(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
      ReportDesignHandle copy=(ReportDesignHandle)(handle.copy().getHandle(null));
      engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
      session=engineTask.getDataSession();
      engineTask.run();
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas);
      }
      if (((DataSetEditor)getContainer()).getHandle() instanceof JointDataSetHandle) {
        PropertyHandle properyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
        if (properyHandle != null) {
          for (int i=0; i < viewDatas.length; i++) {
            for (Iterator columns=properyHandle.iterator(); columns.hasNext(); ) {
              ColumnHintHandle column=(ColumnHintHandle)columns.next();
              if (viewDatas[i].getName().equals(column.getColumnName())) {
                viewDatas[i].setAlias(column.getAlias());
                break;
              }
            }
          }
        }
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
      DataSetMetaDataHelper.resetPropertyBinding(((DataSetEditor)getContainer()).getHandle(),dataSetMap,dataSourceMap);
    }
  }
 else {
    context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    DataRequestSession session=DataRequestSession.newSession(context);
    try {
      DataSetViewData[] viewDatas=DataSetProvider.getCurrentInstance().populateAllOutputColumns(((DataSetEditor)getContainer()).getHandle(),session);
      if (viewDatas == null) {
        viewDatas=((DataSetEditor)getContainer()).getCurrentItemModel(false,false);
      }
      if (isNewlyCreated) {
        updateAnalysisTypes(viewDatas);
      }
      viewer.getViewer().setInput(viewDatas);
    }
  finally {
      session.shutdown();
    }
  }
  Thread.currentThread().setContextClassLoader(oldContextLoader);
}",0.977633902295468
66631,"protected boolean performEdit(ReportElementHandle handle){
  DataSetHandle dsHandle=(DataSetHandle)handle;
  if (!(dsHandle instanceof JointDataSetHandle || dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(DataSetHandle)handle,false);
  return dialog.open() == Dialog.OK;
}","protected boolean performEdit(ReportElementHandle handle){
  DataSetHandle dsHandle=(DataSetHandle)handle;
  if (!(dsHandle instanceof JointDataSetHandle || dsHandle instanceof DerivedDataSetHandle) && dsHandle.getDataSource() == null) {
    try {
      List dataSourceList=DEUtil.getDataSources();
      String[] names=new String[dataSourceList.size()];
      for (int i=0; i < names.length; i++) {
        names[i]=((DataSourceHandle)dataSourceList.get(i)).getName();
      }
      DataSourceSelectionDialog dataSorucedialog=new DataSourceSelectionDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),names);
      if (dataSorucedialog.open() == Dialog.CANCEL)       return false;
      dsHandle.setDataSource(dataSorucedialog.getResult().toString());
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
      return false;
    }
  }
  DataSetEditor dialog=new AdvancedDataSetEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(DataSetHandle)handle,false,false);
  return dialog.open() == Dialog.OK;
}",0.997229916897507
66632,"/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          if (hint.getDisplayNameKey() != null) {
            columns[n].setExternalizedName(hint.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,hint.getModule().getLocale()));
          }
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(getDefaultAnalysisType(columns[n].getName(),columns[n].getDataTypeName(),hint.getAnalysis()));
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(columns[n].getAnalysis())) {
            columns[n].setAnalysisColumn(hint.getAnalysis());
          }
 else {
            columns[n].setAnalysisColumn(null);
          }
          columns[n].setAnalysisColumn(hint.getAnalysisColumn());
          columns[n].setACLExpression(hint.getACLExpression());
          columns[n].setIndexColumn(hint.isIndexColumn());
          columns[n].setRemoveDuplicateValues(hint.isCompressed());
          break;
        }
      }
    }
  }
}","/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          if (hint.getDisplayNameKey() != null) {
            columns[n].setExternalizedName(hint.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,hint.getModule().getLocale()));
          }
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(hint.getAnalysis());
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(columns[n].getAnalysis())) {
            columns[n].setAnalysisColumn(hint.getAnalysis());
          }
 else {
            columns[n].setAnalysis(null);
            columns[n].setAnalysisColumn(null);
          }
          columns[n].setAnalysisColumn(hint.getAnalysisColumn());
          columns[n].setACLExpression(hint.getACLExpression());
          columns[n].setIndexColumn(hint.isIndexColumn());
          columns[n].setRemoveDuplicateValues(hint.isCompressed());
          break;
        }
      }
    }
  }
}",0.973257698541329
66633,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
          items[i].setAnalysisColumn(null);
        }
      }
    }
    updateModel(dataSetHandle,items);
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(hint.getAnalysis());
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
    }
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}",0.9145448203697244
66634,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setDisplayName(hint.getDisplayName());
      items[i].setDisplayNameKey(hint.getDisplayNameKey());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(hint.getAnalysis());
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setDisplayName(hint.getDisplayName());
      items[i].setDisplayNameKey(hint.getDisplayNameKey());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}",0.960558751027116
66635,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9874934314240672
66636,"/** 
 * Generate a Javascript constant expression by user input string and target BIRT data type.
 * @param input user input string.
 * @param dataType target BIRT data type. available values defined in {@code org.eclipse.birt.core.data.DataType}
 * @return generated Javascript constant expression text
 * @throws BIRTException
 */
public static String generateConstantExpr(String input,int dataType) throws BirtException {
  if (input == null) {
    return null;
  }
  if (dataType == DataType.DECIMAL_TYPE) {
    return ""String_Node_Str"" + input + ""String_Node_Str"";
  }
  if (dataType == DataType.STRING_TYPE || dataType == DataType.DATE_TYPE || dataType == DataType.SQL_DATE_TYPE || dataType == DataType.SQL_TIME_TYPE) {
    return JavascriptEvalUtil.transformToJsExpression(input);
  }
  return input;
}","/** 
 * Generate a Javascript constant expression by user input string and target BIRT data type.
 * @param input user input string.
 * @param dataType target BIRT data type. available values defined in {@code org.eclipse.birt.core.data.DataType}
 * @return generated Javascript constant expression text
 * @throws BIRTException
 */
public static String generateConstantExpr(String input,int dataType) throws BirtException {
  if (input == null) {
    return null;
  }
  if (dataType == DataType.DECIMAL_TYPE) {
    return ""String_Node_Str"" + input + ""String_Node_Str"";
  }
  if (dataType == DataType.STRING_TYPE || dataType == DataType.DATE_TYPE || dataType == DataType.SQL_DATE_TYPE || dataType == DataType.SQL_TIME_TYPE || dataType == DataType.JAVA_OBJECT_TYPE) {
    return JavascriptEvalUtil.transformToJsExpression(input);
  }
  return input;
}",0.9752863170584688
66637,"/** 
 * Gets the report design file path
 * @return
 */
public URI getBIRTResourcePath(){
  try {
    return new URI(encode(ReportPlugin.getDefault().getResourceFolder()));
  }
 catch (  URISyntaxException e) {
    return null;
  }
}","/** 
 * Gets the report design file path
 * @return
 */
public URI getBIRTResourcePath(){
  try {
    return new URI(encode(ReportPlugin.getDefault().getResourceFolder(UIUtil.getCurrentProject(),(ModuleHandle)null)));
  }
 catch (  URISyntaxException e) {
    return null;
  }
}",0.9119373776908024
66638,"public void splitColumns(int startCoordinate,int endCoordinate,int[] columnStartCoordinates,boolean autoExtend){
  int[] scale=axis.getColumnCoordinatesInRange(startCoordinate,endCoordinate);
  for (int i=0; i < scale.length - 1; i++) {
    int startPosition=scale[i];
    int endPostion=scale[i + 1];
    int[] range=inRange(startPosition,endPostion,columnStartCoordinates);
    if (range.length > 0) {
      int pos=axis.getColumnIndexByCoordinate(startPosition);
      currentCache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  if (autoExtend) {
    int index=0;
    int currentColumnCount=columnStartCoordinates.length;
    while (index < currentColumnCount && columnStartCoordinates[index] <= endCoordinate) {
      index++;
    }
    for (int i=index; i < currentColumnCount; i++) {
      axis.addCoordinate(columnStartCoordinates[i]);
    }
    int newColumnCount=currentColumnCount - index;
    currentCache.insertColumns(newColumnCount);
  }
}","public void splitColumns(int startCoordinate,int endCoordinate,int[] columnStartCoordinates,boolean autoExtend){
  int[] scale=axis.getColumnCoordinatesInRange(startCoordinate,endCoordinate);
  for (int i=0; i < scale.length - 1; i++) {
    int startPosition=scale[i];
    int endPostion=scale[i + 1];
    int[] range=inRange(startPosition,endPostion,columnStartCoordinates);
    if (range.length > 0) {
      int pos=axis.getColumnIndexByCoordinate(startPosition);
      currentCache.insertColumns(pos,range.length);
      for (int j=0; j < range.length; j++) {
        axis.addCoordinate(range[j]);
      }
    }
  }
  if (autoExtend) {
    int index=0;
    int currentColumnCount=columnStartCoordinates.length;
    while (index < currentColumnCount && AxisProcessor.round(columnStartCoordinates[index]) <= endCoordinate) {
      index++;
    }
    for (int i=index; i < currentColumnCount; i++) {
      axis.addCoordinate(columnStartCoordinates[i]);
    }
    int newColumnCount=currentColumnCount - index;
    currentCache.insertColumns(newColumnCount);
  }
}",0.9900237529691212
66639,"private int[] inRange(int start,int end,int[] data){
  int[] range=new int[data.length];
  int count=0;
  for (int i=0; i < range.length; i++) {
    if ((data[i] > start) && (data[i] < end)) {
      range[count++]=data[i];
    }
  }
  int[] result=new int[count];
  System.arraycopy(range,0,result,0,count);
  return result;
}","private int[] inRange(int start,int end,int[] data){
  int[] range=new int[data.length];
  int count=0;
  for (int i=0; i < range.length; i++) {
    int value=AxisProcessor.round(data[i]);
    if ((value > start) && (value < end)) {
      range[count++]=value;
    }
  }
  int[] result=new int[count];
  System.arraycopy(range,0,result,0,count);
  return result;
}",0.8840579710144928
66640,"public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    try {
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      DataService.getInstance().unRegisterSession(session);
      session.shutdown();
      engineTask.close();
      engine.destroy();
    }
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot());
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    try {
      drSession.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      drSession.shutdown();
    }
  }
}","public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy,dataSetHandle);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    try {
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      DataService.getInstance().unRegisterSession(session);
      session.shutdown();
      engineTask.close();
      engine.destroy();
    }
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot());
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    try {
      drSession.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      drSession.shutdown();
    }
  }
}",0.9961685823754788
66641,"/** 
 * update output parameter table result
 */
private void updateResults(){
  int outputParamsSize=outputParametersSize();
  if (outputParamsSize == 0)   return;
  DataRequestSession session=null;
  try {
    ModuleHandle handle=null;
    DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
    handle=dsHandle.getModuleHandle();
    EngineConfig ec=new EngineConfig();
    ClassLoader parent=Thread.currentThread().getContextClassLoader();
    if (parent == null) {
      parent=this.getClass().getClassLoader();
    }
    ClassLoader customClassLoader=DataSetProvider.getCustomScriptClassLoader(parent,handle);
    ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,customClassLoader);
    ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
    engineTask.setAppContext(appContext);
    engineTask.run();
    session=engineTask.getDataSession();
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    query.setMaxRows(1);
    PropertyHandle propertyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    int paramsSize=propertyHandle.getListValue().size();
    Iterator paramIter=propertyHandle.iterator();
    int outputParamIndex=0;
    TableLayout layout=new TableLayout();
    TableColumn column=null;
    TableItem tableItem=null;
    List paramColumnBindingNames=new ArrayList();
    for (int n=1; n <= paramsSize; n++) {
      DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
      if (!paramDefn.isOutput())       continue;
      column=new TableColumn(outputParameterTable,SWT.LEFT);
      column.setText(paramDefn.getName());
      column.setResizable(true);
      layout.addColumnData(new ColumnPixelData(120,true));
      String bindingName=PREFIX_PARAMETER + (outputParamIndex++);
      IBinding binding=new Binding(bindingName);
      binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
      paramColumnBindingNames.add(bindingName);
      query.addBinding(binding);
      column.pack();
    }
    outputParameterTable.setLayout(layout);
    outputParameterTable.layout(true);
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults actualResultSet=helper.execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,session);
    if (actualResultSet != null) {
      IResultIterator iter=actualResultSet.getResultIterator();
      iter.next();
      String[] record=new String[outputParamIndex];
      for (int n=0; n < record.length; n++) {
        record[n]=iter.getString(paramColumnBindingNames.get(n).toString());
      }
      tableItem=new TableItem(outputParameterTable,SWT.NONE);
      tableItem.setText(record);
      actualResultSet.close();
    }
  }
 catch (  BirtException ex) {
    ExceptionHandler.handle(ex);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
}","/** 
 * update output parameter table result
 */
private void updateResults(){
  int outputParamsSize=outputParametersSize();
  if (outputParamsSize == 0)   return;
  DataRequestSession session=null;
  try {
    ModuleHandle handle=null;
    DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
    handle=dsHandle.getModuleHandle();
    EngineConfig ec=new EngineConfig();
    ClassLoader parent=Thread.currentThread().getContextClassLoader();
    if (parent == null) {
      parent=this.getClass().getClassLoader();
    }
    ClassLoader customClassLoader=DataSetProvider.getCustomScriptClassLoader(parent,handle);
    ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,customClassLoader);
    ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport,dsHandle);
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
    engineTask.setAppContext(appContext);
    engineTask.run();
    session=engineTask.getDataSession();
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    query.setMaxRows(1);
    PropertyHandle propertyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    int paramsSize=propertyHandle.getListValue().size();
    Iterator paramIter=propertyHandle.iterator();
    int outputParamIndex=0;
    TableLayout layout=new TableLayout();
    TableColumn column=null;
    TableItem tableItem=null;
    List paramColumnBindingNames=new ArrayList();
    for (int n=1; n <= paramsSize; n++) {
      DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
      if (!paramDefn.isOutput())       continue;
      column=new TableColumn(outputParameterTable,SWT.LEFT);
      column.setText(paramDefn.getName());
      column.setResizable(true);
      layout.addColumnData(new ColumnPixelData(120,true));
      String bindingName=PREFIX_PARAMETER + (outputParamIndex++);
      IBinding binding=new Binding(bindingName);
      binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
      paramColumnBindingNames.add(bindingName);
      query.addBinding(binding);
      column.pack();
    }
    outputParameterTable.setLayout(layout);
    outputParameterTable.layout(true);
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults actualResultSet=helper.execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,session);
    if (actualResultSet != null) {
      IResultIterator iter=actualResultSet.getResultIterator();
      iter.next();
      String[] record=new String[outputParamIndex];
      for (int n=0; n < record.length; n++) {
        record[n]=iter.getString(paramColumnBindingNames.get(n).toString());
      }
      tableItem=new TableItem(outputParameterTable,SWT.NONE);
      tableItem.setText(record);
      actualResultSet.close();
    }
  }
 catch (  BirtException ex) {
    ExceptionHandler.handle(ex);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
}",0.998731143380798
66642,"public DummyEngineTask(ReportEngine engine,IReportRunnable runnable,ModuleHandle moduleHandle){
  super(engine,runnable);
  setEngineTaskParameters(this,moduleHandle);
  this.taskType=IEngineTask.TASK_UNKNOWN;
}","public DummyEngineTask(ReportEngine engine,IReportRunnable runnable,ModuleHandle moduleHandle,DataSetHandle handle){
  super(engine,runnable);
  setEngineTaskParameters(this,moduleHandle);
  this.taskType=IEngineTask.TASK_UNKNOWN;
  this.dataSetHandle=handle;
}",0.8940677966101694
66643,"private void defineDataSourceDataSet(IQueryDefinition queryDefn) throws BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,dataEngine,this.modelAdaptor);
  }
}","private void defineDataSourceDataSet(IQueryDefinition queryDefn) throws BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,dataEngine,this.modelAdaptor,null);
  }
}",0.9960095770151636
66644,"public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor);
    }
  }
  if (((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName()) == null)   dataEngine.defineDataSet(modelAdaptor.adaptDataSet(dataSet));
}","public static void defineDataSourceAndDataSet(DataSetHandle dataSet,DataEngine dataEngine,IModelAdapter modelAdaptor,QueryExecutionHelper.DataSetHandleProcessContext context) throws BirtException {
  if (dataSet == null)   return;
  DataSourceHandle dataSource=dataSet.getDataSource();
  if (dataSource != null && ((DataEngineImpl)dataEngine).getDataSourceRuntime(dataSource.getName()) == null) {
    dataEngine.defineDataSource(modelAdaptor.adaptDataSource(dataSource));
  }
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=jointDataSet.dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          dataEngine.defineDataSource(modelAdaptor.adaptDataSource(childDataSource));
        }
        defineDataSourceAndDataSet(childDataSet,dataEngine,modelAdaptor,context);
      }
    }
  }
  if (dataSet instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)dataSet).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSourceAndDataSet((DataSetHandle)inputDataSet.get(i),dataEngine,modelAdaptor,context);
    }
  }
  IBaseDataSetDesign design=((DataEngineImpl)dataEngine).getDataSetDesign(dataSet.getQualifiedName());
  if (design == null) {
    design=modelAdaptor.adaptDataSet(dataSet);
    dataEngine.defineDataSet(design);
  }
  if (context != null)   context.process(design,dataSet);
}",0.8975195822454308
66645,"/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn,boolean keepDataSetFilter,boolean allowAggregation) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    major=handle;
    defineDataSet(handle,keepDataSetFilter,allowAggregation);
  }
}","/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(IQueryDefinition queryDefn,boolean keepDataSetFilter,boolean allowAggregation) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
        break;
      }
    }
    major=handle;
    defineDataSet(handle,new DataSetHandleProcessContext(major,useResultHints,keepDataSetFilter,allowAggregation));
  }
}",0.9657794676806084
66646,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  session.defineDataSet(baseDS);
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,DataSetHandleProcessContext procesCtx) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DefineDataSourceSetUtil.defineDataSourceAndDataSet(handle,this.dataEngine,this.modelAdaptor,procesCtx);
}",0.2396039603960396
66647,"/** 
 * Executes a method script. Each script should be identified with a unique name within the scope (such as ""afterOpen"", ""onFetch"" etc.). This class  assumes that the content of a named method script is immutable, therefore it defines each named script only once.
 * @param methodName Identification of the script
 * @param script Script text
 * @return Return value from the script
 */
public Object runScript(String methodName,String script) throws BirtException {
  methodName=METHOD_NAME_PREFIX + methodName;
  try {
    if (!scope.has(methodName,scope)) {
      String scriptText=""String_Node_Str"" + methodName + ""String_Node_Str""+ script+ ""String_Node_Str"";
      ScriptEvalUtil.evaluateJSAsExpr(cx,scope,scriptText,ScriptExpression.defaultID,1);
    }
    String callScriptText=methodName + ""String_Node_Str"";
    Object result=ScriptEvalUtil.evaluateJSAsExpr(cx,scope,callScriptText,ScriptExpression.defaultID,1);
    return result;
  }
 catch (  DataException e) {
    throw new DataException(ResourceConstants.SCIRPT_FUNCTION_EXECUTION_FAIL,e,new Object[]{methodName,script});
  }
}","/** 
 * Executes a method script. Each script should be identified with a unique name within the scope (such as ""afterOpen"", ""onFetch"" etc.). This class  assumes that the content of a named method script is immutable, therefore it defines each named script only once.
 * @param methodName Identification of the script
 * @param script Script text
 * @param id script id using in debug mode
 * @return Return value from the script
 */
public Object runScript(String methodName,String script,String id) throws BirtException {
  methodName=METHOD_NAME_PREFIX + methodName;
  try {
    if (!scope.has(methodName,scope)) {
      String scriptText=""String_Node_Str"" + methodName + ""String_Node_Str""+ script+ ""String_Node_Str"";
      ScriptEvalUtil.evaluateJSAsExpr(cx,scope,scriptText,id,1);
    }
    String callScriptText=methodName + ""String_Node_Str"";
    Object result=ScriptEvalUtil.evaluateJSAsExpr(cx,scope,callScriptText,id,1);
    return result;
  }
 catch (  DataException e) {
    throw new DataException(ResourceConstants.SCIRPT_FUNCTION_EXECUTION_FAIL,e,new Object[]{methodName,script});
  }
}",0.9503868912152936
66648,"/** 
 * Evaluates a ROM script and converts the result type into one accepted by BIRT: Double (for all numeric types), java.util.Date, String, Boolean. Converts Javascript exception and script runtime exceptions to DataException
 * @param cx
 * @param scope
 * @param scriptText
 * @param source
 * @param lineNo
 * @return
 * @throws DataException
 */
public static Object evaluateJSAsExpr(ScriptContext cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + scriptText + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  Object result;
  try {
    result=JavascriptEvalUtil.evaluateScript(Context.getCurrentContext(),scope,scriptText,""String_Node_Str"",0);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  return result;
}","/** 
 * Evaluates a ROM script and converts the result type into one accepted by BIRT: Double (for all numeric types), java.util.Date, String, Boolean. Converts Javascript exception and script runtime exceptions to DataException
 * @param cx
 * @param scope
 * @param scriptText
 * @param source
 * @param lineNo
 * @return
 * @throws DataException
 */
public static Object evaluateJSAsExpr(ScriptContext cx,Scriptable scope,String scriptText,String source,int lineNo) throws DataException {
  if (logger.isLoggable(Level.FINER))   logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + scriptText + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
  Object result;
  try {
    result=JavascriptEvalUtil.evaluateScript(Context.getCurrentContext(),scope,scriptText,source,0);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  return result;
}",0.9872857932559423
66649,"public void handleOnFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  if (reportContext == null)   return;
  try {
    if (!this.useOnFetchEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),ON_FETCH,dataSetHandle.getOnFetch());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.onFetch(new DataSetInstance(dataSet),new DataSetRow(row),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOnFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  if (reportContext == null)   return;
  try {
    if (!this.useOnFetchEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),ON_FETCH,dataSetHandle.getOnFetch(),onFetchMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.onFetch(new DataSetInstance(dataSet),new DataSetRow(row),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.985239852398524
66650,"public void handleBeforeOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),BEFORE_OPEN,dataSetHandle.getBeforeOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),BEFORE_OPEN,dataSetHandle.getBeforeOpen(),beforeOpenMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9819219790675549
66651,"public void handleBeforeClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),BEFORE_CLOSE,dataSetHandle.getBeforeClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),BEFORE_CLOSE,dataSetHandle.getBeforeClose(),beforeCloseMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9811676082862524
66652,"public void handleAfterClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),AFTER_CLOSE,dataSetHandle.getAfterClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterClose(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),AFTER_CLOSE,dataSetHandle.getAfterClose(),afterCloseMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9808660624370594
66653,"public DataSetScriptExecutor(DataSetHandle dataSetHandle,ExecutionContext context) throws BirtException {
  super(context);
  this.dataSetHandle=dataSetHandle;
  String className=dataSetHandle.getEventHandlerClass();
  initEventHandler(className);
  useOnFetchEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getOnFetch());
  useAfterCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getAfterClose());
  useAfterOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getAfterOpen());
  useBeforeOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getBeforeOpen());
  useBeforeCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getBeforeClose());
}","public DataSetScriptExecutor(DataSetHandle dataSetHandle,ExecutionContext context) throws BirtException {
  super(context);
  this.dataSetHandle=dataSetHandle;
  String className=dataSetHandle.getEventHandlerClass();
  initEventHandler(className);
  useOnFetchEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getOnFetch());
  useAfterCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getAfterClose());
  useAfterOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getAfterOpen());
  useBeforeOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getBeforeOpen());
  useBeforeCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getBeforeClose());
  beforeOpenMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(ISimpleDataSetModel.BEFORE_OPEN_METHOD));
  beforeCloseMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(ISimpleDataSetModel.BEFORE_CLOSE_METHOD));
  afterOpenMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(ISimpleDataSetModel.AFTER_OPEN_METHOD));
  afterCloseMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(ISimpleDataSetModel.AFTER_CLOSE_METHOD));
  onFetchMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(ISimpleDataSetModel.ON_FETCH_METHOD));
}",0.7047619047619048
66654,"public void handleAfterOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),AFTER_OPEN,dataSetHandle.getAfterOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterOpen(IDataSetInstanceHandle dataSet){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      Scriptable scope=getScriptScope(dataSet);
      ScriptStatus status=handleJS(scope,dataSet.getName(),AFTER_OPEN,dataSetHandle.getAfterOpen(),afterOpenMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSetInstance(dataSet),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9826923076923076
66655,"protected ScriptStatus handleJS(Scriptable scope,String name,String method,String script){
  return handleJS(scope,DATA_SET,name,method,script);
}","protected ScriptStatus handleJS(Scriptable scope,String name,String method,String script,String id){
  return handleJS(scope,DATA_SET,name,method,script,id);
}",0.9573770491803278
66656,"public DataSourceScriptExecutor(DataSourceHandle dataSourceHandle,ExecutionContext context) throws BirtException {
  super(context);
  this.dataSourceHandle=dataSourceHandle;
  String className=dataSourceHandle.getEventHandlerClass();
  initEventHandler(className);
  this.useBeforeOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getBeforeOpen());
  this.useBeforeCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getBeforeClose());
  this.useAfterOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getAfterOpen());
  this.useAfterCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getAfterClose());
}","public DataSourceScriptExecutor(DataSourceHandle dataSourceHandle,ExecutionContext context) throws BirtException {
  super(context);
  this.dataSourceHandle=dataSourceHandle;
  String className=dataSourceHandle.getEventHandlerClass();
  initEventHandler(className);
  this.useBeforeOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getBeforeOpen());
  this.useBeforeCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getBeforeClose());
  this.useAfterOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getAfterOpen());
  this.useAfterCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSourceHandle.getAfterClose());
  beforeOpenMethodID=ModuleUtil.getScriptUID(dataSourceHandle.getPropertyHandle(IDataSourceModel.BEFORE_OPEN_METHOD));
  beforeCloseMethodID=ModuleUtil.getScriptUID(dataSourceHandle.getPropertyHandle(IDataSourceModel.BEFORE_CLOSE_METHOD));
  afterOpenMethodID=ModuleUtil.getScriptUID(dataSourceHandle.getPropertyHandle(IDataSourceModel.AFTER_OPEN_METHOD));
  afterCloseMethodID=ModuleUtil.getScriptUID(dataSourceHandle.getPropertyHandle(IDataSourceModel.AFTER_CLOSE_METHOD));
}",0.7370165745856354
66657,"public void handleBeforeOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_OPEN,dataSourceHandle.getBeforeOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeOpenEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_OPEN,dataSourceHandle.getBeforeOpen(),beforeOpenMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9816425120772948
66658,"public void handleBeforeClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_CLOSE,dataSourceHandle.getBeforeClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleBeforeClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useBeforeCloseEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),BEFORE_CLOSE,dataSourceHandle.getBeforeClose(),beforeCloseMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.beforeClose(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9808795411089866
66659,"public void handleAfterClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_CLOSE,dataSourceHandle.getAfterClose());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterClose(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterCloseEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_CLOSE,dataSourceHandle.getAfterClose(),afterCloseMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterClose(reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9803108808290156
66660,"public void handleAfterOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_OPEN,dataSourceHandle.getAfterOpen());
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleAfterOpen(IDataSourceInstanceHandle dataSource){
  if (reportContext == null)   return;
  try {
    if (!this.useAfterOpenEventHandler) {
      ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),AFTER_OPEN,dataSourceHandle.getAfterOpen(),afterOpenMethodID);
      if (status.didRun())       return;
    }
    if (eventHandler != null)     eventHandler.afterOpen(new DataSourceInstance(dataSource),reportContext);
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.982421875
66661,"protected ScriptStatus handleJS(Scriptable scope,String name,String method,String script){
  return handleJS(scope,DATA_SOURCE,name,method,script);
}","protected ScriptStatus handleJS(Scriptable scope,String name,String method,String script,String id){
  return handleJS(scope,DATA_SOURCE,name,method,script,id);
}",0.9581993569131833
66662,"protected abstract ScriptStatus handleJS(Scriptable scope,String name,String method,String script);","protected abstract ScriptStatus handleJS(Scriptable scope,String name,String method,String script,String id);",0.9519230769230768
66663,"public boolean handleDescribe(IDataSetInstanceHandle dataSet,IScriptDataSetMetaDataDefinition metaData) throws BirtException {
  try {
    if (!this.useDescribeEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),DESCRIBE,((ScriptDataSetHandle)dataSetHandle).getDescribe());
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,new Object[]{""String_Node_Str"",result});
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.describe(new DataSetInstance(dataSet),new ScriptedDataSetMetaData(metaData));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}","public boolean handleDescribe(IDataSetInstanceHandle dataSet,IScriptDataSetMetaDataDefinition metaData) throws BirtException {
  try {
    if (!this.useDescribeEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),DESCRIBE,((ScriptDataSetHandle)dataSetHandle).getDescribe(),describeMethodID);
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,new Object[]{""String_Node_Str"",result});
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.describe(new DataSetInstance(dataSet),new ScriptedDataSetMetaData(metaData));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}",0.9899348727057432
66664,"public void handleOpen(IDataSetInstanceHandle dataSet) throws BirtException {
  try {
    if (!this.useOpenEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),OPEN,((ScriptDataSetHandle)dataSetHandle).getOpen());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOpen(IDataSetInstanceHandle dataSet) throws BirtException {
  try {
    if (!this.useOpenEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),OPEN,((ScriptDataSetHandle)dataSetHandle).getOpen(),openMethodID);
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9861554845580404
66665,"public void handleClose(IDataSetInstanceHandle dataSet){
  try {
    if (!this.useCloseEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),CLOSE,((ScriptDataSetHandle)dataSetHandle).getClose());
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleClose(IDataSetInstanceHandle dataSet){
  try {
    if (!this.useCloseEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),CLOSE,((ScriptDataSetHandle)dataSetHandle).getClose(),closeMethodID);
      if (status.didRun())       return;
    }
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSetInstance(dataSet));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.9845474613686536
66666,"public ScriptDataSetScriptExecutor(ScriptDataSetHandle dataSetHandle,ExecutionContext context) throws BirtException {
  super(dataSetHandle,context);
  this.fetchScript=dataSetHandle.getFetch();
  useOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getOpen());
  useFetchEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getFetch());
  useCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getClose());
  useDescribeEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getDescribe());
}","public ScriptDataSetScriptExecutor(ScriptDataSetHandle dataSetHandle,ExecutionContext context) throws BirtException {
  super(dataSetHandle,context);
  this.fetchScript=dataSetHandle.getFetch();
  useOpenEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getOpen());
  useFetchEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getFetch());
  useCloseEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getClose());
  useDescribeEventHandler=ScriptTextUtil.isNullOrComments(dataSetHandle.getDescribe());
  openMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(IScriptDataSetModel.OPEN_METHOD));
  closeMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(IScriptDataSetModel.CLOSE_METHOD));
  fetchMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(IScriptDataSetModel.FETCH_METHOD));
  describeMethodID=ModuleUtil.getScriptUID(dataSetHandle.getPropertyHandle(IScriptDataSetModel.DESCRIBE_METHOD));
}",0.707774798927614
66667,"public boolean handleFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  try {
    if (!useFetchEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),FETCH,this.fetchScript);
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,new Object[]{""String_Node_Str"",result});
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.fetch(new DataSetInstance(dataSet),new UpdatableDataSetRow(row));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}","public boolean handleFetch(IDataSetInstanceHandle dataSet,IDataRow row){
  try {
    if (!useFetchEventHandler) {
      ScriptStatus status=handleJS(getScriptScope(dataSet),dataSet.getName(),FETCH,this.fetchScript,fetchMethodID);
      if (status.didRun()) {
        Object result=status.result();
        if (result instanceof Boolean)         return ((Boolean)result).booleanValue();
 else         throw new DataException(ResourceConstants.EXPECT_BOOLEAN_RETURN_TYPE,new Object[]{""String_Node_Str"",result});
      }
    }
    if (scriptedEventHandler != null)     return scriptedEventHandler.fetch(new DataSetInstance(dataSet),new UpdatableDataSetRow(row));
  }
 catch (  Exception e) {
    addException(context,e);
  }
  return false;
}",0.9904371584699454
66668,"public void handleOpen(IDataSourceInstanceHandle dataSource){
  try {
    ScriptStatus status=super.handleJS(dataSource.getScriptScope(),dataSource.getName(),OPEN,((ScriptDataSourceHandle)dataSourceHandle).getOpen());
    if (status.didRun())     return;
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSourceInstance(dataSource));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleOpen(IDataSourceInstanceHandle dataSource){
  try {
    String id=ModuleUtil.getScriptUID(dataSourceHandle.getPropertyHandle(IScriptDataSourceModel.OPEN_METHOD));
    ScriptStatus status=super.handleJS(dataSource.getScriptScope(),dataSource.getName(),OPEN,((ScriptDataSourceHandle)dataSourceHandle).getOpen(),id);
    if (status.didRun())     return;
    if (scriptedEventHandler != null)     scriptedEventHandler.open(new DataSourceInstance(dataSource));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.88125
66669,"public void handleClose(IDataSourceInstanceHandle dataSource){
  try {
    ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),CLOSE,((ScriptDataSourceHandle)dataSourceHandle).getClose());
    if (status.didRun())     return;
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSourceInstance(dataSource));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}","public void handleClose(IDataSourceInstanceHandle dataSource){
  try {
    String id=ModuleUtil.getScriptUID(dataSourceHandle.getPropertyHandle(IScriptDataSourceModel.CLOSE_METHOD));
    ScriptStatus status=handleJS(dataSource.getScriptScope(),dataSource.getName(),CLOSE,((ScriptDataSourceHandle)dataSourceHandle).getClose(),id);
    if (status.didRun())     return;
    if (scriptedEventHandler != null)     scriptedEventHandler.close(new DataSourceInstance(dataSource));
  }
 catch (  Exception e) {
    addException(context,e);
  }
}",0.8798328108672936
66670,"public void add(DocumentExtension ext){
  ext.setParent(index);
  if (firstChild == -1) {
    updateFirstChild(ext);
    lastChild=firstChild;
    lastChildId=firstChildId;
    return;
  }
  if (head == null) {
    if (ext.contentId == lastChildId + 1) {
      ext.setPrevious(lastChild);
      ext.setNext(-1);
      lastChild=ext.index;
      lastChildId=ext.contentId;
    }
 else {
      head=new ExtensionSegment(firstChildId,firstChild,lastChildId,lastChild);
      insert(ext);
    }
  }
 else {
    if (ext.contentId == latest.endId + 1) {
      ext.setPrevious(latest.endIndex);
      if (latest.next != null) {
        ext.setNext(latest.next.startIndex);
      }
 else {
        ext.setNext(-1);
      }
      latest.endId=ext.contentId;
      latest.endIndex=ext.index;
    }
 else {
      insert(ext);
    }
  }
}","public void add(DocumentExtension ext){
  ext.setParent(index);
  if (firstChild == -1) {
    updateFirstChild(ext);
    lastChild=firstChild;
    lastChildId=firstChildId;
    return;
  }
  if (head == null) {
    if (ext.contentId == lastChildId + 1) {
      ext.setPrevious(lastChild);
      ext.setNext(-1);
      lastChild=ext.index;
      lastChildId=ext.contentId;
    }
 else {
      head=new ExtensionSegment(firstChildId,firstChild,lastChildId,lastChild);
      insert(ext);
    }
  }
 else {
    if (latest != null && ext.contentId == latest.endId + 1) {
      ext.setPrevious(latest.endIndex);
      if (latest.next != null) {
        ext.setNext(latest.next.startIndex);
      }
 else {
        ext.setNext(-1);
      }
      latest.endId=ext.contentId;
      latest.endIndex=ext.index;
    }
 else {
      insert(ext);
    }
  }
}",0.9892215568862276
66671,"/** 
 * @param bindingName
 * @param bindings
 * @return
 * @throws DataException
 */
private static boolean isAggregationBinding(String bindingName,List bindings) throws DataException {
  boolean find=false;
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (bindingName.equals(binding.getBindingName())) {
      find=true;
      if (OlapExpressionUtil.isAggregationBinding(binding))       return true;
      List refBindingName=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
      for (int j=0; j < refBindingName.size(); j++) {
        if (isAggregationBinding((String)refBindingName.get(j),bindings))         return true;
      }
    }
  }
  if (!find)   return true;
  return false;
}","/** 
 * @param bindingName
 * @param bindings
 * @return
 * @throws DataException
 */
private static boolean isAggregationBinding(String bindingName,List bindings) throws DataException {
  boolean find=false;
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (bindingName.equals(binding.getBindingName())) {
      find=true;
      if (OlapExpressionUtil.isAggregationBinding(binding)) {
        return true;
      }
      if (OlapExpressionUtil.isDirectRerenrence(binding.getExpression(),bindings)) {
        return false;
      }
      List refBindingName=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
      for (int j=0; j < refBindingName.size(); j++) {
        if (isAggregationBinding((String)refBindingName.get(j),bindings))         return true;
      }
    }
  }
  if (!find)   return true;
  return false;
}",0.9060518731988472
66672,"/** 
 * Gets the area which is split from the original area.
 * @param ablatedChildren the children which is split off the original area.
 * @param newHeight the new content height
 * @return
 */
protected BlockContainerArea getSplitArea(ArrayList ablatedChildren,int newHeight){
  BlockContainerArea newContainer=cloneArea();
  for (int i=0; i < ablatedChildren.size(); i++) {
    ContainerArea child=(ContainerArea)ablatedChildren.get(i);
    child.setParent(newContainer);
    newContainer.addChild(child);
    children.remove(child);
  }
  newContainer.updateContentHeight(newHeight);
  return newContainer;
}","/** 
 * Gets the area which is split from the original area.
 * @param ablatedChildren the children which is split off the original area.
 * @param newHeight the new content height
 * @return
 */
protected BlockContainerArea getSplitArea(ArrayList ablatedChildren,int newHeight){
  BlockContainerArea newContainer=cloneArea();
  for (int i=0; i < ablatedChildren.size(); i++) {
    ContainerArea child=(ContainerArea)ablatedChildren.get(i);
    child.setParent(newContainer);
    newContainer.addChild(child);
    children.remove(child);
  }
  newContainer.updateContentHeight(newHeight);
  applyAlignment(newContainer);
  return newContainer;
}",0.9745627980922098
66673,"/** 
 * Updates the row height and the height of the cells in the row.
 * @param rowArea
 * @param height
 */
private void updateRowHeight(RowArea row,int height,boolean isFixedLayout){
  if (height < 0)   return;
  row.setHeight(height);
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null) {
      if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea refCell=((DummyCell)cell).getCell();
          int delta=((DummyCell)cell).getDelta();
          refCell.setHeight(delta + height);
          verticalAlign(refCell);
        }
 else {
          int cellHeight=cell.getHeight();
          cell.setHeight(height);
          verticalAlign(cell);
          if (isFixedLayout && cellHeight > height) {
            cell.setNeedClip(true);
          }
        }
      }
      i=i + cell.getColSpan() - 1;
    }
  }
}","/** 
 * Updates the row height and the height of the cells in the row.
 * @param rowArea
 * @param height
 */
private void updateRowHeight(RowArea row,int height,boolean isFixedLayout){
  if (height < 0)   return;
  row.setHeight(height);
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell != null) {
      if (cell.getRowSpan() == 1) {
        if (cell instanceof DummyCell) {
          CellArea refCell=((DummyCell)cell).getCell();
          int delta=((DummyCell)cell).getDelta();
          refCell.setHeight(delta + height);
          align(refCell);
        }
 else {
          int cellHeight=cell.getHeight();
          cell.setHeight(height);
          align(cell);
          if (isFixedLayout && cellHeight > height) {
            cell.setNeedClip(true);
          }
        }
      }
      i=i + cell.getColSpan() - 1;
    }
  }
}",0.9887133182844244
66674,"/** 
 * When pagination happens, if drop cells should be finished by force, we need to end these cells and vertical align for them.
 */
public int resolveAll(RowArea row){
  if (row == null || rows.size() == 0) {
    return 0;
  }
  int originalRowHeight=row.getHeight();
  int height=originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (null == cell) {
      continue;
    }
    if (cell instanceof DummyCell) {
      DummyCell dummyCell=(DummyCell)cell;
      int delta=dummyCell.getDelta();
    }
 else {
      height=Math.max(height,cell.getHeight());
    }
    i=i + cell.getColSpan() - 1;
  }
  int dValue=height - originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null) {
      continue;
    }
    if (cell instanceof DummyCell) {
      int delta=((DummyCell)cell).getDelta();
      if (cell.getRowSpan() == 1) {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        verticalAlign(refCell);
      }
 else {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        verticalAlign(refCell);
      }
    }
 else {
      int oh=cell.getHeight();
      cell.setHeight(height);
      if (oh != height) {
        verticalAlign(cell);
      }
    }
    i=i + cell.getColSpan() - 1;
  }
  row.setHeight(height);
  return dValue;
}","/** 
 * When pagination happens, if drop cells should be finished by force, we need to end these cells and vertical align for them.
 */
public int resolveAll(RowArea row){
  if (row == null || rows.size() == 0) {
    return 0;
  }
  int originalRowHeight=row.getHeight();
  int height=originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (null == cell) {
      continue;
    }
    if (cell instanceof DummyCell) {
      DummyCell dummyCell=(DummyCell)cell;
      int delta=dummyCell.getDelta();
    }
 else {
      height=Math.max(height,cell.getHeight());
    }
    i=i + cell.getColSpan() - 1;
  }
  int dValue=height - originalRowHeight;
  for (int i=startCol; i <= endCol; i++) {
    CellArea cell=row.getCell(i);
    if (cell == null) {
      continue;
    }
    if (cell instanceof DummyCell) {
      int delta=((DummyCell)cell).getDelta();
      if (cell.getRowSpan() == 1) {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        align(refCell);
      }
 else {
        CellArea refCell=((DummyCell)cell).getCell();
        refCell.setHeight(delta + height);
        align(refCell);
      }
    }
 else {
      int oh=cell.getHeight();
      cell.setHeight(height);
      if (oh != height) {
        align(cell);
      }
    }
    i=i + cell.getColSpan() - 1;
  }
  row.setHeight(height);
  return dValue;
}",0.8416257883672039
66675,"private static void saveCubeOperation(DataOutputStream dos,ICubeOperation co) throws DataException, IOException {
}","private static void saveCubeOperation(DataOutputStream dos,ICubeOperation co) throws DataException, IOException {
  if (co == null) {
    IOUtil.writeBool(dos,false);
    return;
  }
  IOUtil.writeBool(dos,true);
  if (co instanceof AddingNestAggregations) {
    IOUtil.writeInt(dos,CUBE_OPERATION_FLAG_ADDING_NEST_AGGRS);
    saveBindings(dos,Arrays.asList(co.getNewBindings()));
  }
}",0.4590818363273453
66676,"/** 
 * @param session
 * @param filterIterator
 * @param query
 * @throws AdapterException 
 */
private static void popualteFilter(DataRequestSession session,Iterator filterIterator,QueryDefinition query) throws AdapterException {
  while (filterIterator.hasNext()) {
    FilterConditionHandle filter=(FilterConditionHandle)filterIterator.next();
    query.addFilter(session.getModelAdaptor().adaptFilter(filter));
  }
}","/** 
 * @param session
 * @param filterIterator
 * @param query
 * @throws AdapterException 
 */
private static void popualteFilter(DataRequestSession session,Iterator filterIterator,QueryDefinition query) throws AdapterException {
  while (filterIterator.hasNext()) {
    FilterConditionHandle filter=(FilterConditionHandle)filterIterator.next();
    if (query instanceof CubeCreationQueryDefinition) {
      ((CubeCreationQueryDefinition)query).addDataSetFilter(session.getModelAdaptor().adaptFilter(filter));
    }
 else     query.addFilter(session.getModelAdaptor().adaptFilter(filter));
  }
}",0.8192534381139489
66677,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  boolean removeDuplicated=false;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    resultSetList=MetaDataUtil.getResultPropertyHandle(dataSetHandle);
    removeDuplicated=true;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      uniqueColumnNameSet.add(resultSetColumn.getColumnName());
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,resultSetColumn.getColumnName()) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,resultSetColumn.getColumnName());
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        if (removeDuplicated) {
          if (uniqueColumnNameSet.contains(columnName))           continue;
        }
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  boolean removeDuplicated=false;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    resultSetList=MetaDataUtil.getResultPropertyHandle(dataSetHandle);
    removeDuplicated=true;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      uniqueColumnNameSet.add(resultSetColumn.getColumnName());
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      ColumnHintHandle columnHint=findColumnHint(dataSetHandle,resultSetColumn.getColumnName());
      if (columnHint != null) {
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        if (removeDuplicated) {
          if (uniqueColumnNameSet.contains(columnName))           continue;
        }
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.980507070964454
66678,"/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope,DataEngineContext dtCotnext,ModelAdapter adapter) throws BirtException {
  super(source.getQualifiedName());
  bindingScope=propBindingScope;
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue=""String_Node_Str"";
      Expression expression=source.getPropertyBindingExpression(propName);
      org.eclipse.birt.data.engine.api.querydefn.ScriptExpression script=adapter.adaptExpression(expression);
      if (bindingScope != null && script != null && DataSessionContext.MODE_UPDATE != dtCotnext.getMode()) {
        Object value=JavascriptEvalUtil.evaluateScript(null,bindingScope,script.getText(),ScriptExpression.defaultID,0);
        propValue=(value == null ? null : value.toString());
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this,source);
}","/** 
 * Creates adaptor based on Model OdaDataSourceHandle.
 * @param source model handle
 * @param propBindingScope Javascript scope in which to evaluate property bindings. If null,property bindings are not evaluated.
 */
public OdaDataSourceAdapter(OdaDataSourceHandle source,Scriptable propBindingScope,DataEngineContext dtCotnext,ModelAdapter adapter) throws BirtException {
  super(source.getQualifiedName());
  DataAdapterUtil.adaptBaseDataSource(source,this);
  String driverName=source.getExtensionID();
  if (driverName == null || driverName.length() == 0) {
    throw new AdapterException(ResourceConstants.DATASOURCE_EXID_ERROR,source.getName());
  }
  setExtensionID(driverName);
  Map staticProps=DataAdapterUtil.getExtensionProperties(source,source.getExtensionPropertyDefinitionList());
  if (staticProps != null && !staticProps.isEmpty()) {
    Iterator propNamesItr=staticProps.keySet().iterator();
    while (propNamesItr.hasNext()) {
      String propName=(String)propNamesItr.next();
      assert(propName != null);
      String propValue=""String_Node_Str"";
      Expression expression=source.getPropertyBindingExpression(propName);
      org.eclipse.birt.data.engine.api.querydefn.ScriptExpression script=adapter.adaptExpression(expression);
      if (propBindingScope != null && script != null && DataSessionContext.MODE_UPDATE != dtCotnext.getMode()) {
        Object value=JavascriptEvalUtil.evaluateScript(null,propBindingScope,script.getText(),ScriptExpression.defaultID,0);
        propValue=(value == null ? null : value.toString());
      }
 else {
        propValue=(String)staticProps.get(propName);
      }
      addPublicProperty(propName,propValue);
    }
  }
  Iterator elmtIter=source.privateDriverPropertiesIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ExtendedPropertyHandle modelProp=(ExtendedPropertyHandle)elmtIter.next();
      addPrivateProperty(modelProp.getName(),modelProp.getValue());
    }
  }
  addPropertyConfigurationId(this,source);
}",0.9889135254988912
66679,"/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  if (extendedItemManager != null) {
    extendedItemManager.close();
    extendedItemManager=null;
  }
  if (engineExtensionManager != null) {
    engineExtensionManager.close();
    engineExtensionManager=null;
  }
  if (scriptContext != null) {
    scriptContext.close();
    scriptContext=null;
  }
  if (bookmarkManager != null) {
    bookmarkManager.close();
    bookmarkManager=null;
  }
  if (dataSource != null) {
    try {
      dataSource.close();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    dataSource=null;
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (closeClassLoader && applicationClassLoader instanceof ApplicationClassLoader) {
    ((ApplicationClassLoader)applicationClassLoader).close();
  }
  IStatusHandler handler=task.getStatusHandler();
  if (handler != null) {
    handler.finish();
  }
  applicationClassLoader=null;
  engine=null;
  executor=null;
  tocBuilder=null;
  configs=null;
  params=null;
  persistentBeans=null;
  transientBeans=null;
  pageVariables=null;
  docWriter=null;
  reportIR=null;
  appContext=null;
  reportContext=null;
  renderOption=null;
  reportDoc=null;
  reportContent=null;
  design=null;
  content=null;
  rsets=null;
  reportHandles=null;
  errors.clear();
  stringFormatters=null;
  numberFormatters=null;
  dateFormatters=null;
  pageBreakListeners=null;
  eventHandlerManager=null;
  progressMonitor=null;
  element=null;
}","/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  if (extendedItemManager != null) {
    extendedItemManager.close();
    extendedItemManager=null;
  }
  if (engineExtensionManager != null) {
    engineExtensionManager.close();
    engineExtensionManager=null;
  }
  if (scriptContext != null) {
    unRegisterDataObject();
    scriptContext.close();
    scriptContext=null;
  }
  if (bookmarkManager != null) {
    bookmarkManager.close();
    bookmarkManager=null;
  }
  if (dataSource != null) {
    try {
      dataSource.close();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    dataSource=null;
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (closeClassLoader && applicationClassLoader instanceof ApplicationClassLoader) {
    ((ApplicationClassLoader)applicationClassLoader).close();
  }
  IStatusHandler handler=task.getStatusHandler();
  if (handler != null) {
    handler.finish();
  }
  applicationClassLoader=null;
  engine=null;
  executor=null;
  tocBuilder=null;
  configs=null;
  params=null;
  persistentBeans=null;
  transientBeans=null;
  pageVariables=null;
  docWriter=null;
  reportIR=null;
  appContext=null;
  reportContext=null;
  renderOption=null;
  reportDoc=null;
  reportContent=null;
  design=null;
  content=null;
  rsets=null;
  reportHandles=null;
  errors.clear();
  stringFormatters=null;
  numberFormatters=null;
  dateFormatters=null;
  pageBreakListeners=null;
  eventHandlerManager=null;
  progressMonitor=null;
  element=null;
}",0.991161616161616
66680,"public void startTable(ITableContent table){
  XlsContainer currentContainer=getCurrentContainer();
  if (currentContainer == null) {
    addContainer(null);
    return;
  }
  ContainerSizeInfo sizeInfo=currentContainer.getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  int dpi=context.getDpi();
  if (autoExtend()) {
    info=LayoutUtil.createTable(table,width,dpi);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width,dpi),dpi);
    info=new ColumnsInfo(columns);
  }
  String caption=table.getCaption();
  if (caption != null) {
    addCaption(caption,table.getComputedStyle());
  }
  addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  XlsContainer currentContainer=getCurrentContainer();
  if (currentContainer == null) {
    addContainer(null);
    return;
  }
  ContainerSizeInfo sizeInfo=currentContainer.getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  int dpi=context.getDpi();
  if (context.isAutoLayout()) {
    info=LayoutUtil.createTable(table,width,dpi,autoExtend());
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width,dpi),dpi);
    info=new ColumnsInfo(columns);
  }
  String caption=table.getCaption();
  if (caption != null) {
    addCaption(caption,table.getComputedStyle());
  }
  addTable(table,info,sizeInfo);
}",0.911660777385159
66681,"public static ColumnsInfo createTable(ITableContent table,int width,int dpi){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth > 0 && unassignedCount == 0 && table.getWidth() != null) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width,int dpi,boolean autoExtend){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if ((leftWidth > 0 || !autoExtend && leftWidth < 0) && unassignedCount == 0 && table.getWidth() != null) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else       if (!autoExtend) {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.9667812142038946
66682,"public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet,stringTable,map,i);
    }
    this.reset();
    this.moveTo(currIndex);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IResultObject ro=this.diskBasedResultSet.nextRow();
      if (ro == null)       return;
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,ro,colCount,resultSetNameSet,stringTable,map,i);
    }
    this.reset();
    this.moveTo(currIndex);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.8866840731070496
66683,"public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int originalRowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=originalRowCount + this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(outputStream,rowCount);
    if (outputStream instanceof RAOutputStream)     ((RAOutputStream)outputStream).seek(((RAOutputStream)outputStream).length());
    if (rowLensStream instanceof RAOutputStream)     ((RAOutputStream)rowLensStream).seek(((RAOutputStream)rowLensStream).length());
    DataOutputStream dos=new DataOutputStream(outputStream);
    DataOutputStream rlos=new DataOutputStream(rowLensStream);
    long offset=4;
    if (outputStream instanceof RAOutputStream)     offset=((RAOutputStream)outputStream).length();
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rlos,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,map,originalRowCount + i);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int originalRowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=originalRowCount + this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(outputStream,rowCount);
    if (outputStream instanceof RAOutputStream)     ((RAOutputStream)outputStream).seek(((RAOutputStream)outputStream).length());
    if (rowLensStream instanceof RAOutputStream)     ((RAOutputStream)rowLensStream).seek(((RAOutputStream)rowLensStream).length());
    DataOutputStream dos=new DataOutputStream(outputStream);
    DataOutputStream rlos=new DataOutputStream(rowLensStream);
    long offset=4;
    if (outputStream instanceof RAOutputStream)     offset=((RAOutputStream)outputStream).length();
    for (int i=0; i < rowCount - originalRowCount; i++) {
      IOUtil.writeLong(rlos,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,map,originalRowCount + i);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.99266692396758
66684,"public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int originalRowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=originalRowCount + this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(outputStream,rowCount);
    if (outputStream instanceof RAOutputStream)     ((RAOutputStream)outputStream).seek(((RAOutputStream)outputStream).length());
    if (rowLensStream instanceof RAOutputStream)     ((RAOutputStream)rowLensStream).seek(((RAOutputStream)rowLensStream).length());
    DataOutputStream dos=new DataOutputStream(outputStream);
    DataOutputStream rlos=new DataOutputStream(rowLensStream);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    if (outputStream instanceof RAOutputStream)     offset=((RAOutputStream)outputStream).length();
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rlos,offset);
      offset+=ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet,stringTable,map,i + originalRowCount);
    }
    this.reset();
    this.moveTo(currIndex);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void incrementalUpdate(OutputStream outputStream,OutputStream rowLensStream,int originalRowCount,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> map,List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=originalRowCount + this.diskBasedResultSet.getCount();
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(outputStream,rowCount);
    if (outputStream instanceof RAOutputStream)     ((RAOutputStream)outputStream).seek(((RAOutputStream)outputStream).length());
    if (rowLensStream instanceof RAOutputStream)     ((RAOutputStream)rowLensStream).seek(((RAOutputStream)rowLensStream).length());
    DataOutputStream dos=new DataOutputStream(outputStream);
    DataOutputStream rlos=new DataOutputStream(rowLensStream);
    int currIndex=this.currResultIndex;
    this.reset();
    long offset=4;
    if (outputStream instanceof RAOutputStream)     offset=((RAOutputStream)outputStream).length();
    for (int i=0; i < rowCount - originalRowCount; i++) {
      IOUtil.writeLong(rlos,offset);
      offset+=ResultSetUtil.writeResultObject(dos,this.diskBasedResultSet.nextRow(),colCount,resultSetNameSet,stringTable,map,i + originalRowCount);
    }
    this.reset();
    this.moveTo(currIndex);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.9933356716941424
66685,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    Object originalMemCache=null;
    Object originalRowLimit=null;
    try {
      sl.process(dim);
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
        originalRowLimit=appContext.remove(DataEngine.DATA_SET_CACHE_ROW_LIMIT);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
 finally {
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
      if (originalRowLimit != null) {
        appContext.put(DataEngine.DATA_SET_CACHE_ROW_LIMIT,originalRowLimit);
      }
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9031982942430704
66686,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  if (container == null) {
    return;
  }
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  int imageWidthDpi=context.getDpi();
  int imageHeightDpi=context.getDpi();
  int imageHeight;
  int imageWidth;
  byte[] imageData=null;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    imageData=imageInfo.getData();
    int[] imageSize=getImageSize(image,imageInfo,parentSizeInfo,imageWidthDpi,imageHeightDpi);
    imageHeight=imageSize[0];
    imageWidth=imageSize[1];
  }
 catch (  IOException ex) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),0,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),0,imageWidthDpi);
  }
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(imageWidth);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,imageData,imageSize.getWidth(),imageHeight,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data,container);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  if (container == null) {
    return;
  }
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  int imageWidthDpi=context.getDpi();
  int imageHeightDpi=context.getDpi();
  int imageHeight;
  int imageWidth;
  byte[] imageData=null;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    imageData=imageInfo.getData();
    int[] imageSize=getImageSize(image,imageInfo,parentSizeInfo,imageWidthDpi,imageHeightDpi);
    imageHeight=imageSize[0];
    imageWidth=imageSize[1];
  }
 catch (  IOException ex) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),0,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),0,imageWidthDpi);
  }
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(imageWidth);
  int[] imageCoordinates=splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(imageCoordinates[0],imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,imageData,imageSize.getWidth(),imageHeight,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data,container);
}",0.9788041758937044
66687,"protected boolean canLeave(){
  return false;
}","protected boolean canLeave(){
  return true;
}",0.9247311827956988
66688,"protected void doSkipToExecutor(InstanceID iid,long offset) throws Exception {
  IQueryResultSet rset=(IQueryResultSet)rsets[0];
  long uid=iid.getUniqueID();
  DataID dataId=iid.getDataID();
  long rowId=dataId.getRowID();
  long rsetPosition=rset.getRowIndex();
  if (rsetPosition == rowId) {
    if (currentElement >= totalElements) {
      collectExecutables(uid == 0,true);
    }
  }
 else {
    rset.skipTo(rowId);
    collectExecutables(uid == 0,true);
  }
  for (int i=0; i < totalElements; i++) {
    if (executableElements[i].getID() == iid.getComponentID()) {
      currentElement=i;
      return;
    }
  }
  currentElement=totalElements;
}","protected void doSkipToExecutor(InstanceID iid,long offset) throws Exception {
  IQueryResultSet rset=(IQueryResultSet)rsets[0];
  long uid=iid.getUniqueID();
  DataID dataId=iid.getDataID();
  long rowId=0;
  if (dataId != null) {
    rowId=dataId.getRowID();
  }
  long rsetPosition=rset.getRowIndex();
  if (rsetPosition == rowId) {
    if (currentElement >= totalElements) {
      collectExecutables(uid == 0,true);
    }
  }
 else {
    rset.skipTo(rowId);
    collectExecutables(uid == 0,true);
  }
  for (int i=0; i < totalElements; i++) {
    if (executableElements[i].getID() == iid.getComponentID()) {
      currentElement=i;
      return;
    }
  }
  currentElement=totalElements;
}",0.9695167286245352
66689,"protected void doSkipToExecutor(InstanceID iid,long offset) throws Exception {
  IQueryResultSet rset=(IQueryResultSet)rsets[0];
  long uid=iid.getUniqueID();
  DataID dataId=iid.getDataID();
  long rowId=dataId.getRowID();
  long rsetPosition=rset.getRowIndex();
  if (rsetPosition == rowId) {
    if (currentElement >= totalElements) {
      collectExecutables(uid == 0,true);
    }
  }
 else {
    rset.skipTo(rowId);
    collectExecutables(uid == 0,true);
  }
  for (int i=0; i < totalElements; i++) {
    if (executableElements[i].getID() == iid.getComponentID()) {
      currentElement=i;
      return;
    }
  }
  currentElement=totalElements;
}","protected void doSkipToExecutor(InstanceID iid,long offset) throws Exception {
  IQueryResultSet rset=(IQueryResultSet)rsets[0];
  long uid=iid.getUniqueID();
  DataID dataId=iid.getDataID();
  long rowId=0;
  if (dataId != null) {
    rowId=dataId.getRowID();
  }
  long rsetPosition=rset.getRowIndex();
  if (rsetPosition == rowId) {
    if (currentElement >= totalElements) {
      collectExecutables(uid == 0,true);
    }
  }
 else {
    rset.skipTo(rowId);
    collectExecutables(uid == 0,true);
  }
  for (int i=0; i < totalElements; i++) {
    if (executableElements[i].getID() == iid.getComponentID()) {
      currentElement=i;
      return;
    }
  }
  currentElement=totalElements;
}",0.9695167286245352
66690,"/** 
 * to indicate whether the specified <code>resultSet</code> has aggregation definition for any one of the <code>aggregationNames</code>.
 * @param resultSet
 * @param aggregationNames
 * @return
 * @throws IOException
 */
private boolean hasDefinition(IAggregationResultSet resultSet,String[] aggregationNames) throws IOException {
  for (int j=0; j < aggregationNames.length; j++) {
    if (resultSet.getAggregationIndex(aggregationNames[j]) >= 0) {
      return true;
    }
  }
  return false;
}","/** 
 * to indicate whether the specified <code>resultSet</code> has aggregation definition for any one of the <code>aggregationNames</code>. //TODO Currently we do not support the filter on drilled aggregate result. 
 * @param resultSet
 * @param aggregationNames
 * @return
 * @throws IOException
 */
private boolean hasDefinition(IAggregationResultSet resultSet,String[] aggregationNames) throws IOException {
  for (int j=0; j < aggregationNames.length; j++) {
    if (resultSet.getAggregationIndex(aggregationNames[j]) >= 0 && !(resultSet.getAggregationDefinition() instanceof DrilledAggregationDefinition)) {
      return true;
    }
  }
  return false;
}",0.8632846087704213
66691,"/** 
 * Return the enclosed document iterator.
 * @return
 */
ResultIterator getDocumentIterator(){
  return this.docIt;
}","/** 
 * Return the enclosed document iterator.
 * @return
 */
public ResultIterator getDocumentIterator(){
  return this.docIt;
}",0.9721115537848606
66692,"public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  if (this.query.isSummaryQuery()) {
    this.populator.getDocumentIterator().getExprResultSet().getDataSetResultSet().next();
  }
  Object[] field=new Object[this.resultClass.getFieldCount()];
  IResultObject curr=this.populator.getDocumentIterator().getExprResultSet().getDataSetResultSet().getResultObject();
  if (curr == null) {
    return null;
  }
  for (int i=0; i < curr.getResultClass().getFieldCount(); i++) {
    field[i]=curr.getFieldValue(i + 1);
  }
  for (int i=curr.getResultClass().getFieldCount(); i < field.length; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_AGGREGATION_BINDING_FOR_PLS,this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
  }
  return new ResultObject(this.resultClass,field);
}","public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  Object[] field=new Object[this.resultClass.getFieldCount()];
  IResultObject curr=this.populator.getDocumentIterator().getExprResultSet().getDataSetResultSet().getResultObject();
  if (curr == null) {
    return null;
  }
  for (int i=0; i < curr.getResultClass().getFieldCount(); i++) {
    field[i]=curr.getFieldValue(i + 1);
  }
  for (int i=curr.getResultClass().getFieldCount(); i < field.length; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_AGGREGATION_BINDING_FOR_PLS,this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
  }
  return new ResultObject(this.resultClass,field);
}",0.9329237071172556
66693,"protected Data addDataContent(IDataContent data){
  float height=getContentHeight(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getText(),style,url,bookmark,height);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      excelData=engine.addData(data.getText(),style,url,bookmark,locale,height);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale,height);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale,height);
    }
  }
  return excelData;
}","protected Data addDataContent(IDataContent data){
  float height=getContentHeight(data);
  HyperlinkDef url=parseHyperLink(data);
  BookmarkDef bookmark=getBookmark(data);
  Data excelData=null;
  Object generateBy=data.getGenerateBy();
  IStyle style=data.getComputedStyle();
  DataFormatValue dataformat=style.getDataFormat();
  MapDesign map=null;
  if (generateBy instanceof DataItemDesign) {
    DataItemDesign design=(DataItemDesign)generateBy;
    map=design.getMap();
  }
  if (map != null && map.getRuleCount() > 0 && data.getLabelText() != null) {
    excelData=engine.addData(data.getText(),style,url,bookmark,height);
  }
 else {
    String locale=null;
    int type=ExcelUtil.getType(data.getValue());
    if (type == SheetData.STRING) {
      if (dataformat != null) {
        locale=dataformat.getStringLocale();
      }
      String text=data.getValue() == null ? null : data.getText();
      excelData=engine.addData(text,style,url,bookmark,locale,height);
    }
 else     if (type == Data.NUMBER) {
      if (dataformat != null) {
        locale=dataformat.getNumberLocale();
      }
      excelData=engine.addData(data.getValue(),style,url,bookmark,locale,height);
    }
 else {
      if (dataformat != null) {
        locale=dataformat.getDateTimeLocale();
      }
      excelData=engine.addDateTime(data,style,url,bookmark,locale,height);
    }
  }
  return excelData;
}",0.9622018348623852
66694,"public IResultIterator getSecondaryIterator(ScriptContext context,String subQueryName) throws BirtException {
  CachedQueryResults rs=new CachedQueryResults(this.session,QuerySharingUtil.getSubQueryID(this.queryResults.getID(),subQueryName,this.rowIndex),this.queryResults.getPreparedQuery());
  if (!rs.existCachedFile()) {
    throw new DataException(ResourceConstants.NOT_SUPPORT_REPORT_ITEM_SUBQUERY);
  }
  return rs.getResultIterator();
}","public IResultIterator getSecondaryIterator(ScriptContext context,String subQueryName) throws BirtException {
  CachedQueryResults rs=new CachedQueryResults(this.session,QuerySharingUtil.getSubQueryID(this.queryResults.getID(),subQueryName,this.rowIndex),this.queryResults.getPreparedQuery(),this.appContext);
  if (!rs.existCachedFile()) {
    if (qsWithSubIterator == null) {
      String queryResultsId=null;
      try {
        queryResultsId=this.queryResults.getPreparedQuery().getReportQueryDefn().getQueryResultsID();
        ((QueryDefinition)(this.queryResults.getPreparedQuery().getReportQueryDefn())).setQueryResultsID(null);
        IPreparedQuery query=PreparedQueryUtil.newInstance((DataEngineImpl)this.session.getEngine(),this.queryResults.getPreparedQuery().getReportQueryDefn(),this.appContext);
        qsWithSubIterator=query.execute(null,this.session.getSharedScope());
        qsWithSubIterator.getResultIterator().moveTo(currRowIndex);
        ((QueryResults)qsWithSubIterator).setID(queryResultsId);
        return qsWithSubIterator.getResultIterator().getSecondaryIterator(context,subQueryName);
      }
  finally {
        ((QueryDefinition)(this.queryResults.getPreparedQuery().getReportQueryDefn())).setQueryResultsID(queryResultsId);
      }
    }
 else {
      qsWithSubIterator.getResultIterator().moveTo(currRowIndex);
      return qsWithSubIterator.getResultIterator().getSecondaryIterator(context,subQueryName);
    }
  }
  return rs.getResultIterator();
}",0.3888314374353671
66695,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(DataEngineSession session,String tempDir,IQueryResults queryResults) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.lastRowIndex=this.currRowIndex - 1;
  this.queryResults=queryResults;
  this.startingGroupLevel=0;
  this.endingGroupLevel=queryResults.getPreparedQuery().getReportQueryDefn().getGroups().size() + 1;
  this.session=session;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream,0);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    existCachedFile=false;
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(DataEngineSession session,String tempDir,IQueryResults queryResults,Map appContext) throws DataException {
  Object[] params={tempDir,queryResults.getID()};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  this.lastRowIndex=this.currRowIndex - 1;
  this.queryResults=queryResults;
  this.startingGroupLevel=0;
  this.endingGroupLevel=queryResults.getPreparedQuery().getReportQueryDefn().getGroups().size() + 1;
  this.session=session;
  this.appContext=appContext;
  try {
    createCacheInputStream(tempDir);
    resultClass=new ResultClass(this.metaInputStream,0);
    rowCount=IOUtil.readInt(rowInputStream);
    if (rowCount == -1)     rowCount=Integer.MAX_VALUE;
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream,DataEngineSession.getCurrentClassLoader()));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    existCachedFile=false;
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.983012457531144
66696,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineSession session,String queryResultID,IPreparedQuery preparedQuery) throws DataException {
  this.session=session;
  String tempDir=session.getTempDir();
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.pQuery=preparedQuery;
  this.resultIterator=new CacheResultIterator(session,tempDir,this);
  this.existCachedFile=((CacheResultIterator)this.resultIterator).existCachedFile();
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineSession session,String queryResultID,IPreparedQuery preparedQuery,Map appContext) throws DataException {
  this.session=session;
  String tempDir=session.getTempDir();
  Object[] params={tempDir,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.pQuery=preparedQuery;
  this.resultIterator=new CacheResultIterator(session,tempDir,this,appContext);
  this.existCachedFile=((CacheResultIterator)this.resultIterator).existCachedFile();
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}",0.9812409812409812
66697,"public IQueryResults getQueryResults(String queryResultID) throws DataException {
  if (context.getMode() == DataEngineContext.MODE_PRESENTATION || (context.getMode() == DataEngineContext.MODE_UPDATE && context.getDocWriter() == null)) {
    return new QueryResults(this.session.getTempDir(),this.context,queryResultID);
  }
  if (context.getMode() == DataEngineContext.MODE_GENERATION || context.getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return new CachedQueryResults(session,queryResultID,null);
  }
  return null;
}","public IQueryResults getQueryResults(String queryResultID) throws DataException {
  if (context.getMode() == DataEngineContext.MODE_PRESENTATION || (context.getMode() == DataEngineContext.MODE_UPDATE && context.getDocWriter() == null)) {
    return new QueryResults(this.session.getTempDir(),this.context,queryResultID);
  }
  if (context.getMode() == DataEngineContext.MODE_GENERATION || context.getMode() == DataEngineContext.DIRECT_PRESENTATION) {
    return new CachedQueryResults(session,queryResultID,null,null);
  }
  return null;
}",0.9953401677539608
66698,"/** 
 * @param queryDefn
 * @param session
 * @param context
 * @param targetGroups
 */
public DummyPreparedQuery(IQueryDefinition queryDefn,DataEngineSession session,DataEngineContext context,List<IGroupInstanceInfo> targetGroups){
  this(queryDefn,session);
  this.context=context;
  this.targetGroups=targetGroups;
}","/** 
 * @param queryDefn
 * @param session
 * @param context
 * @param targetGroups
 */
public DummyPreparedQuery(IQueryDefinition queryDefn,DataEngineSession session,DataEngineContext context,List<IGroupInstanceInfo> targetGroups){
  this(queryDefn,session,new HashMap());
  this.context=context;
  this.targetGroups=targetGroups;
}",0.9785276073619632
66699,"public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  try {
    if (context == null)     return new CachedQueryResults(session,this.queryDefn.getQueryResultsID(),this);
 else     return new QueryResults(this.tempDir,this.context,this.queryDefn.getQueryResultsID(),outerResults,this.targetGroups);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","public IQueryResults execute(IBaseQueryResults outerResults,Scriptable scope) throws DataException {
  try {
    if (context == null)     return new CachedQueryResults(session,this.queryDefn.getQueryResultsID(),this,this.appContext);
 else     return new QueryResults(this.tempDir,this.context,this.queryDefn.getQueryResultsID(),outerResults,this.targetGroups);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9811764705882352
66700,"private void writeLetterSpacing(IStyle style){
  int letterSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_LETTER_SPACING));
  writeAttrTag(""String_Node_Str"",WordUtil.parseSpacing(letterSpacing));
}","private void writeLetterSpacing(IStyle style){
  int letterSpacing=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_LETTER_SPACING));
  writeAttrTag(""String_Node_Str"",WordUtil.milliPt2Twips(letterSpacing));
}",0.9452954048140044
66701,"/** 
 * If the cell properties is not set, then check the row properties and write those properties.
 * @param style this cell style
 */
private void writeCellProperties(IStyle style){
  if (style == null) {
    return;
  }
  writeBackgroundColor(style.getBackgroundColor());
  writeCellBorders(style);
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    writeAttrTag(""String_Node_Str"",WordUtil.parseVerticalAlign(verticalAlign));
  }
  String noWrap=CSSConstants.CSS_NOWRAP_VALUE.equalsIgnoreCase(style.getWhiteSpace()) ? ""String_Node_Str"" : ""String_Node_Str"";
  writeAttrTag(""String_Node_Str"",noWrap);
}","/** 
 * If the cell properties is not set, then check the row properties and write those properties.
 * @param style this cell style
 */
private void writeCellProperties(IStyle style){
  if (style == null) {
    return;
  }
  writeBackgroundColor(style.getBackgroundColor());
  writeCellBorders(style);
  writeCellPadding(style);
  String verticalAlign=style.getVerticalAlign();
  if (verticalAlign != null) {
    writeAttrTag(""String_Node_Str"",WordUtil.parseVerticalAlign(verticalAlign));
  }
  String noWrap=CSSConstants.CSS_NOWRAP_VALUE.equalsIgnoreCase(style.getWhiteSpace()) ? ""String_Node_Str"" : ""String_Node_Str"";
  writeAttrTag(""String_Node_Str"",noWrap);
}",0.9792467332820908
66702,"protected IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData(null,null,new HashMap());
    StreamManager manager=new StreamManager(getEngineContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn)) {
      if (PLSUtil.needUpdateDataSet(queryDefn,manager)) {
        if (getEngineContext().getDocWriter() != null) {
          populatePLSDataSetData(eventHandler,manager);
          dataSetResult.close();
          rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
          dataSetResult=rdLoad.loadDataSetData(null,null,null);
        }
 else {
          org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn);
          PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
          IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession());
          dataSetResult.close();
          cleanUpOldRD();
          return resultIterator;
        }
      }
 else {
        cleanUpOldRD();
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession());
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","protected IResultIterator executeOdiQuery(IEventHandler eventHandler) throws DataException {
  try {
    RDLoad rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
    DataSetResultSet dataSetResult=rdLoad.loadDataSetData(null,null,new HashMap());
    StreamManager manager=new StreamManager(getEngineContext(),new QueryResultInfo(queryDefn.getQueryResultsID(),null,0));
    if (PLSUtil.isPLSEnabled(queryDefn)) {
      if (PLSUtil.needUpdateDataSet(queryDefn,manager)) {
        if (getEngineContext().getDocWriter() != null) {
          populatePLSDataSetData(eventHandler,manager);
          dataSetResult.close();
          rdLoad=RDUtil.newLoad(engine.getSession().getTempDir(),getEngineContext(),new QueryResultInfo(realBasedQueryID,null,-1));
          dataSetResult=rdLoad.loadDataSetData(null,null,null);
        }
 else {
          org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=null;
          if (queryDefn.isSummaryQuery()) {
            docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator2(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn.getGroups().size(),queryDefn.isSummaryQuery(),queryDefn);
          }
 else {
            docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn);
          }
          PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
          IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(populator.getResultClass()),populator,eventHandler,engine.getSession());
          dataSetResult.close();
          cleanUpOldRD();
          return resultIterator;
        }
      }
 else {
        cleanUpOldRD();
      }
    }
    IResultClass meta=dataSetResult.getResultClass();
    IResultIterator resultIterator=new CachedResultSet(query,populateResultClass(meta),dataSetResult,eventHandler,engine.getSession());
    dataSetResult.close();
    return resultIterator;
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9204545454545454
66703,"/** 
 * @param eventHandler
 * @param stopSign
 * @param manager
 * @throws DataException
 * @throws IOException
 */
private void populatePLSDataSetData(IEventHandler eventHandler,StreamManager manager) throws DataException, IOException {
  org.eclipse.birt.data.engine.impl.document.ResultIterator docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn);
  PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
  ResultClass processedRC=(ResultClass)populateResultClass(populator.getResultClass());
  SmartCache cache=new SmartCache(new CacheRequest(0,new ArrayList(),null,eventHandler),new OdiAdapter(populator),processedRC,engine.getSession());
  manager.dropStream1(DataEngineContext.DATASET_DATA_STREAM);
  manager.dropStream1(DataEngineContext.DATASET_DATA_LEN_STREAM);
  cleanUpOldRD();
  OutputStream resultClassStream=manager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  processedRC.doSave(resultClassStream,new ArrayList(queryDefn.getBindings().values()),manager.getVersion());
  resultClassStream.close();
  DataOutputStream dataSetDataStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  DataOutputStream rowLensStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  cache.doSave(dataSetDataStream,rowLensStream,null,new HashMap(),eventHandler.getAllColumnBindings());
  dataSetDataStream.flush();
  cache.close();
  DataOutputStream plsGroupLevelStream=new DataOutputStream(manager.getOutStream(DataEngineContext.PLS_GROUPLEVEL_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  IOUtil.writeInt(plsGroupLevelStream,PLSUtil.getOutmostPlsGroupLevel(queryDefn));
  plsGroupLevelStream.close();
}","/** 
 * @param eventHandler
 * @param stopSign
 * @param manager
 * @throws DataException
 * @throws IOException
 */
private void populatePLSDataSetData(IEventHandler eventHandler,StreamManager manager) throws DataException, IOException {
  org.eclipse.birt.data.engine.impl.document.ResultIterator docIt;
  if (!queryDefn.isSummaryQuery()) {
    docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn);
  }
 else {
    docIt=new org.eclipse.birt.data.engine.impl.document.ResultIterator2(engine.getSession().getTempDir(),getEngineContext(),null,queryDefn.getQueryResultsID(),queryDefn.getGroups().size(),queryDefn.isSummaryQuery(),queryDefn);
  }
  PLSEnabledDataSetPopulator populator=new PLSEnabledDataSetPopulator(queryDefn,queryDefn.getQueryExecutionHints().getTargetGroupInstances(),docIt);
  ResultClass processedRC=(ResultClass)populateResultClass(populator.getResultClass());
  SmartCache cache=new SmartCache(new CacheRequest(0,new ArrayList(),null,eventHandler),new OdiAdapter(populator),processedRC,engine.getSession());
  manager.dropStream1(DataEngineContext.DATASET_DATA_STREAM);
  manager.dropStream1(DataEngineContext.DATASET_DATA_LEN_STREAM);
  cleanUpOldRD();
  OutputStream resultClassStream=manager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  processedRC.doSave(resultClassStream,new ArrayList(queryDefn.getBindings().values()),manager.getVersion());
  resultClassStream.close();
  DataOutputStream dataSetDataStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  DataOutputStream rowLensStream=new DataOutputStream(manager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  cache.doSave(dataSetDataStream,rowLensStream,null,new HashMap(),eventHandler.getAllColumnBindings());
  dataSetDataStream.flush();
  cache.close();
  DataOutputStream plsGroupLevelStream=new DataOutputStream(manager.getOutStream(DataEngineContext.PLS_GROUPLEVEL_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
  IOUtil.writeInt(plsGroupLevelStream,PLSUtil.getOutmostPlsGroupLevel(queryDefn));
  plsGroupLevelStream.close();
}",0.9339067451335444
66704,"public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  Object[] field=new Object[this.resultClass.getFieldCount()];
  IResultObject curr=this.populator.getDocumentIterator().getExprResultSet().getDataSetResultSet().getResultObject();
  if (curr == null) {
    return null;
  }
  for (int i=0; i < curr.getResultClass().getFieldCount(); i++) {
    field[i]=curr.getFieldValue(i + 1);
  }
  for (int i=curr.getResultClass().getFieldCount(); i < field.length; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_AGGREGATION_BINDING_FOR_PLS,this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
  }
  return new ResultObject(this.resultClass,field);
}","public IResultObject next() throws DataException {
  if (!this.populator.next())   return null;
  if (this.query.isSummaryQuery()) {
    this.populator.getDocumentIterator().getExprResultSet().getDataSetResultSet().next();
  }
  Object[] field=new Object[this.resultClass.getFieldCount()];
  IResultObject curr=this.populator.getDocumentIterator().getExprResultSet().getDataSetResultSet().getResultObject();
  if (curr == null) {
    return null;
  }
  for (int i=0; i < curr.getResultClass().getFieldCount(); i++) {
    field[i]=curr.getFieldValue(i + 1);
  }
  for (int i=curr.getResultClass().getFieldCount(); i < field.length; i++) {
    try {
      field[i]=this.populator.getDocumentIterator().getValue(this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
 catch (    BirtException e) {
      throw new DataException(ResourceConstants.INVALID_AGGREGATION_BINDING_FOR_PLS,this.originalBindingNames.get(i - curr.getResultClass().getFieldCount()));
    }
  }
  return new ResultObject(this.resultClass,field);
}",0.9329237071172556
66705,"private String getReplacedExpressionText(String text,Map measureMap,Map derivedMeasureMap,Map createdBindings,IBinding binding,List bindingsInCubeQuery) throws DataException {
  List measureNames=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(text.substring(1,text.length() - 1)),ExpressionUtil.MEASURE_INDICATOR);
  for (int i=0; i < measureNames.size(); i++) {
    if (measureMap.containsKey(measureNames.get(i).toString())) {
      IBinding b=(IBinding)createdBindings.get(measureNames.get(i).toString());
      String bindingName=b.getBindingName();
      if (!Arrays.deepEquals(b.getAggregatOns().toArray(),binding.getAggregatOns().toArray())) {
        IBinding newBinding=new Binding(bindingName + ""String_Node_Str"" + binding.getBindingName());
        newBinding.setDataType(b.getDataType());
        newBinding.setAggrFunction(b.getAggrFunction());
        newBinding.setExpression(b.getExpression());
        newBinding.getAggregatOns().addAll(binding.getAggregatOns());
        IBinding sameBinding=getSameBindingInQuery(newBinding,bindingsInCubeQuery);
        if (sameBinding != null) {
          bindingName=sameBinding.getBindingName();
        }
 else {
          bindingName=newBinding.getBindingName();
          realBindings.add(newBinding);
        }
      }
      text=text.replace(ExpressionUtil.createJSMeasureExpression(measureNames.get(i).toString()),ExpressionUtil.createJSDataExpression(bindingName));
    }
 else     if (derivedMeasureMap.containsKey(measureNames.get(i).toString())) {
      text=text.replace(ExpressionUtil.createJSMeasureExpression(measureNames.get(i).toString()),""String_Node_Str"" + ((ScriptExpression)((DerivedMeasureDefinition)derivedMeasureMap.get(measureNames.get(i).toString())).getExpression()).getText() + ""String_Node_Str"");
      text=getReplacedExpressionText(text,measureMap,derivedMeasureMap,createdBindings,binding,bindingsInCubeQuery);
    }
  }
  return text;
}","private String getReplacedExpressionText(String text,Map measureMap,Map derivedMeasureMap,Map createdBindings,IBinding binding,List bindingsInCubeQuery) throws DataException {
  List measureNames=ExpressionCompilerUtil.extractColumnExpression(new ScriptExpression(text.substring(1,text.length() - 1)),ExpressionUtil.MEASURE_INDICATOR);
  for (int i=0; i < measureNames.size(); i++) {
    if (measureMap.containsKey(measureNames.get(i).toString())) {
      IBinding b=(IBinding)createdBindings.get(measureNames.get(i).toString());
      String bindingName=b.getBindingName();
      if (!Arrays.deepEquals(b.getAggregatOns().toArray(),binding.getAggregatOns().toArray()) || b.getAggrFunction() != binding.getAggrFunction()) {
        IBinding newBinding=new Binding(bindingName + ""String_Node_Str"" + binding.getBindingName());
        newBinding.setDataType(b.getDataType());
        newBinding.setAggrFunction(binding.getAggrFunction());
        newBinding.setExpression(b.getExpression());
        newBinding.getAggregatOns().addAll(binding.getAggregatOns());
        IBinding sameBinding=getSameBindingInQuery(newBinding,bindingsInCubeQuery);
        if (sameBinding != null) {
          bindingName=sameBinding.getBindingName();
        }
 else {
          bindingName=newBinding.getBindingName();
          realBindings.add(newBinding);
        }
      }
      text=text.replace(ExpressionUtil.createJSMeasureExpression(measureNames.get(i).toString()),ExpressionUtil.createJSDataExpression(bindingName));
    }
 else     if (derivedMeasureMap.containsKey(measureNames.get(i).toString())) {
      text=text.replace(ExpressionUtil.createJSMeasureExpression(measureNames.get(i).toString()),""String_Node_Str"" + ((ScriptExpression)((DerivedMeasureDefinition)derivedMeasureMap.get(measureNames.get(i).toString())).getExpression()).getText() + ""String_Node_Str"");
      text=getReplacedExpressionText(text,measureMap,derivedMeasureMap,createdBindings,binding,bindingsInCubeQuery);
    }
  }
  return text;
}",0.9853090172239108
66706,"private void getDsMinMax(){
  double calcMin=Double.MAX_VALUE;
  double calcMax=Double.MIN_VALUE;
  if (!getFirstSeries().isSetRadarAutoScale() || getFirstSeries().isRadarAutoScale()) {
    autoscale=true;
  }
 else {
    double taxisMin=getFirstSeries().getWebLabelMin();
    double taxisMax=getFirstSeries().getWebLabelMax();
    if ((taxisMax - taxisMin) == 0.0) {
      autoscale=true;
    }
  }
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  DataSet dst;
  EList<SeriesDefinition> el=((ChartWithoutAxes)getModel()).getSeriesDefinitions();
  ArrayList<Series> al=new ArrayList<Series>();
  ((ChartWithoutAxesImpl)getModel()).recursivelyGetSeries(el,al,0,0);
  final Series[] sea=al.toArray(new Series[al.size()]);
  for (int i=0; i < sea.length; i++) {
    try {
      iDSP=ps.getDataSetProcessor(sea[i].getClass());
      dst=sea[i].getDataSet();
      Double min=((Number)iDSP.getMinimum(dst)).doubleValue();
      Double max=((Number)iDSP.getMaximum(dst)).doubleValue();
      if (min != null && min < calcMin) {
        calcMin=min;
      }
      if (max != null && max > calcMax) {
        calcMax=max;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (autoscale) {
    this.axisMin=calcMin;
    this.axisMax=calcMax;
  }
 else {
    if (getFirstSeries().getWebLabelMin() > calcMin) {
      this.axisMin=calcMin;
    }
 else {
      this.axisMin=getFirstSeries().getWebLabelMin();
    }
    if (getFirstSeries().getWebLabelMax() < calcMax) {
      this.axisMax=calcMax;
    }
 else {
      this.axisMax=getFirstSeries().getWebLabelMax();
    }
  }
}","private void getDsMinMax() throws ChartException {
  double calcMin=Double.MAX_VALUE;
  double calcMax=Double.MIN_VALUE;
  if (!getFirstSeries().isSetRadarAutoScale() || getFirstSeries().isRadarAutoScale()) {
    autoscale=true;
  }
 else {
    double taxisMin=getFirstSeries().getWebLabelMin();
    double taxisMax=getFirstSeries().getWebLabelMax();
    if ((taxisMax - taxisMin) == 0.0) {
      autoscale=true;
    }
  }
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  DataSet dst;
  EList<SeriesDefinition> el=((ChartWithoutAxes)getModel()).getSeriesDefinitions();
  ArrayList<Series> al=new ArrayList<Series>();
  ((ChartWithoutAxesImpl)getModel()).recursivelyGetSeries(el,al,0,0);
  final Series[] sea=al.toArray(new Series[al.size()]);
  for (int i=0; i < sea.length; i++) {
    iDSP=ps.getDataSetProcessor(sea[i].getClass());
    dst=sea[i].getDataSet();
    Double min=((Number)iDSP.getMinimum(dst)).doubleValue();
    Double max=((Number)iDSP.getMaximum(dst)).doubleValue();
    if (min != null && min < calcMin) {
      calcMin=min;
    }
    if (max != null && max > calcMax) {
      calcMax=max;
    }
  }
  if (autoscale) {
    this.axisMin=calcMin;
    this.axisMax=calcMax;
  }
 else {
    if (getFirstSeries().getWebLabelMin() > calcMin) {
      this.axisMin=calcMin;
    }
 else {
      this.axisMin=getFirstSeries().getWebLabelMin();
    }
    if (getFirstSeries().getWebLabelMax() < calcMax) {
      this.axisMax=calcMax;
    }
 else {
      this.axisMax=getFirstSeries().getWebLabelMax();
    }
  }
}",0.7541706011960969
66707,"public void compute(Bounds bo,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.GENERATION,vex);
  }
  try {
    dpha=srh.getDataPoints();
    double[] da=srh.asPrimitiveDoubleValues();
    if (dpha == null || da == null || dpha.length < 1 || da.length < 1) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",org.eclipse.birt.chart.engine.extension.i18n.Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    RadarSeries rsd=getFirstSeries();
    int psc=rsd.getPlotSteps().intValue();
    if (psc > 20) {
      psc=20;
    }
    if (psc < 1) {
      psc=1;
    }
    scaleCount=psc;
    double cvr=((ChartWithoutAxes)getModel()).getCoverage();
    if (cvr <= 0) {
      cvr=0.8;
    }
    percentReduce=1 - cvr;
    dSafeSpacing*=getDeviceScale();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.GENERATION,ex);
  }
}","public void compute(Bounds bo,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  validateDataSetCount(isrh);
  dpha=srh.getDataPoints();
  double[] da=srh.asPrimitiveDoubleValues();
  if (dpha == null || da == null || dpha.length < 1 || da.length < 1) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",org.eclipse.birt.chart.engine.extension.i18n.Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  RadarSeries rsd=getFirstSeries();
  int psc=rsd.getPlotSteps().intValue();
  if (psc > 20) {
    psc=20;
  }
  if (psc < 1) {
    psc=1;
  }
  scaleCount=psc;
  double cvr=((ChartWithoutAxes)getModel()).getCoverage();
  if (cvr <= 0) {
    cvr=0.8;
  }
  percentReduce=1 - cvr;
  dSafeSpacing*=getDeviceScale();
}",0.8099658036150464
66708,"private void renderPolys(IDeviceRenderer idr,Location[] prelo,Series se,SeriesDefinition sd){
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(se);
  if (iThisSeriesIndex == -1)   iThisSeriesIndex=getSeriesIndex();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  Fill fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  LineAttributes llia=((RadarSeries)se).getLineAttributes();
  final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),PolygonRenderEvent.class);
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),LineRenderEvent.class);
  if (se.isSetTranslucent() && se.isTranslucent()) {
    if (fPaletteEntry instanceof ColorDefinition) {
      fPaletteEntry=goFactory.translucent((ColorDefinition)fPaletteEntry);
    }
  }
  if (!((RadarSeries)se).isFillPolys()) {
    lre.setLineAttributes(llia);
    for (int i=0; i < (prelo.length - 1); i++) {
      if (prelo[i] == null || prelo[i + 1] == null) {
        continue;
      }
      lre.setStart(prelo[i]);
      lre.setEnd(prelo[i + 1]);
      try {
        idr.drawLine(lre);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (((RadarSeries)se).isConnectEndpoints()) {
      if (prelo[0] != null && prelo[prelo.length - 1] != null) {
        lre.setStart(prelo[0]);
        lre.setEnd(prelo[prelo.length - 1]);
        try {
          idr.drawLine(lre);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
 else {
    pre.setBackground(fPaletteEntry);
    pre.setPoints(prelo);
    pre.setOutline(llia);
    try {
      idr.drawPolygon(pre);
      idr.fillPolygon(pre);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","private void renderPolys(IDeviceRenderer idr,Location[] prelo,Series se,SeriesDefinition sd) throws ChartException {
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(se);
  if (iThisSeriesIndex == -1)   iThisSeriesIndex=getSeriesIndex();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  Fill fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
  LineAttributes llia=((RadarSeries)se).getLineAttributes();
  final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),PolygonRenderEvent.class);
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),LineRenderEvent.class);
  if (se.isSetTranslucent() && se.isTranslucent()) {
    if (fPaletteEntry instanceof ColorDefinition) {
      fPaletteEntry=goFactory.translucent((ColorDefinition)fPaletteEntry);
    }
  }
  if (!((RadarSeries)se).isFillPolys()) {
    lre.setLineAttributes(llia);
    for (int i=0; i < (prelo.length - 1); i++) {
      if (prelo[i] == null || prelo[i + 1] == null) {
        continue;
      }
      lre.setStart(prelo[i]);
      lre.setEnd(prelo[i + 1]);
      idr.drawLine(lre);
    }
    if (((RadarSeries)se).isConnectEndpoints()) {
      if (prelo[0] != null && prelo[prelo.length - 1] != null) {
        lre.setStart(prelo[0]);
        lre.setEnd(prelo[prelo.length - 1]);
        idr.drawLine(lre);
      }
    }
  }
 else {
    pre.setBackground(fPaletteEntry);
    pre.setPoints(prelo);
    pre.setOutline(llia);
    idr.drawPolygon(pre);
    idr.fillPolygon(pre);
  }
}",0.9019145802650956
66709,"private void renderAxes(IDeviceRenderer idr,PolarCoordinate pc,Series se,double magnitude){
  Location center=pc.getCenter();
  int iCount=pc.getCount();
  pc=new PolarCoordinate(center,iCount,1,0);
  Location lo=center.copyInstance();
  LineAttributes lia=null;
  LineAttributes wlia=null;
  RadarSeries rsd=getFirstSeries();
  wlia=rsd.getWebLineAttributes();
  if (wlia == null) {
    lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),LineRenderEvent.class);
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),OvalRenderEvent.class);
  lre.setLineAttributes(lia);
  lre.setStart(center);
  try {
    for (int i=0; i < iCount; i++) {
      pc.computeLocation(lo,i,magnitude);
      lre.setEnd(lo);
      idr.drawLine(lre);
      DataPointHints dph=dpha[i];
      if ((rsd.isSetShowCatLabels() && rsd.isShowCatLabels()) || (!rsd.isSetShowCatLabels())) {
        drawAxisRadialLabel(idr,pc,lo,i,dph.getBaseValue());
      }
    }
    String subType=getModel().getSubType();
    if (STANDARD_SUBTYPE_LITERAL.equals(subType) || BULLSEYE_SUBTYPE_LITERAL.equals(subType)) {
      ore.setBackground(lia.getColor());
      ore.setOutline(lia);
      Bounds bo=BoundsImpl.create(0,0,0,0);
      for (int sc=1; sc <= scaleCount; sc++) {
        double spiderMag=magnitude * sc / scaleCount;
        ore.setBounds(pc.computeBounds(bo,spiderMag));
        idr.drawOval(ore);
      }
    }
 else     if (SPIDER_SUBTYPE_LITERAL.equals(subType)) {
      Location lo1=lo.copyInstance();
      for (int sc=1; sc < scaleCount + 1; sc++) {
        double spiderMag=magnitude * sc / scaleCount;
        pc.computeLocation(lo1,0,spiderMag);
        for (int index=1; index < iCount + 1; index++) {
          lo.set(lo1.getX(),lo1.getY());
          pc.computeLocation(lo1,index,spiderMag);
          lre.setStart(lo);
          lre.setEnd(lo1);
          idr.drawLine(lre);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void renderAxes(IDeviceRenderer idr,PolarCoordinate pc,double magnitude) throws ChartException {
  Location center=pc.getCenter();
  int iCount=pc.getCount();
  pc=new PolarCoordinate(center,iCount,1,0);
  Location lo=center.copyInstance();
  LineAttributes lia=null;
  LineAttributes wlia=null;
  RadarSeries rsd=getFirstSeries();
  wlia=rsd.getWebLineAttributes();
  if (wlia == null) {
    lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  StructureSource ss=StructureSource.createPlot(getModel().getPlot());
  final LineRenderEvent lre=((EventObjectCache)idr).getEventObject(ss,LineRenderEvent.class);
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(ss,OvalRenderEvent.class);
  lre.setLineAttributes(lia);
  lre.setStart(center);
  for (int i=0; i < iCount; i++) {
    pc.computeLocation(lo,i,magnitude);
    lre.setEnd(lo);
    idr.drawLine(lre);
    DataPointHints dph=dpha[i];
    if ((rsd.isSetShowCatLabels() && rsd.isShowCatLabels()) || (!rsd.isSetShowCatLabels())) {
      drawAxisRadialLabel(idr,pc,lo,i,dph.getBaseValue());
    }
  }
  String subType=getModel().getSubType();
  if (STANDARD_SUBTYPE_LITERAL.equals(subType) || BULLSEYE_SUBTYPE_LITERAL.equals(subType)) {
    ore.setBackground(lia.getColor());
    ore.setOutline(lia);
    Bounds bo=BoundsImpl.create(0,0,0,0);
    for (int sc=1; sc <= scaleCount; sc++) {
      double spiderMag=magnitude * sc / scaleCount;
      ore.setBounds(pc.computeBounds(bo,spiderMag));
      idr.drawOval(ore);
    }
  }
 else   if (SPIDER_SUBTYPE_LITERAL.equals(subType)) {
    Location lo1=lo.copyInstance();
    for (int sc=1; sc < scaleCount + 1; sc++) {
      double spiderMag=magnitude * sc / scaleCount;
      pc.computeLocation(lo1,0,spiderMag);
      for (int index=1; index < iCount + 1; index++) {
        lo.set(lo1.getX(),lo1.getY());
        pc.computeLocation(lo1,index,spiderMag);
        lre.setStart(lo);
        lre.setEnd(lo1);
        idr.drawLine(lre);
      }
    }
  }
}",0.910824988078207
66710,"public void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  if ((bo.getWidth() == 0) && (bo.getHeight() == 0)) {
    return;
  }
  final ClientArea ca=lg.getClientArea();
  final LineAttributes lia=ca.getOutline();
  final RadarSeries ls=(RadarSeries)getSeries();
  if (fPaletteEntry == null) {
    fPaletteEntry=ColorDefinitionImpl.RED();
  }
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
  rre.setBackground(ca.getBackground());
  rre.setOutline(lia);
  rre.setBounds(bo);
  ipr.fillRectangle(rre);
  LineAttributes liaMarker=ls.getLineAttributes();
  if (!liaMarker.isSetVisible()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  if (liaMarker.isVisible()) {
    final LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(StructureSource.createLegend(lg),LineRenderEvent.class);
    if (fPaletteEntry instanceof ColorDefinition && (ls.isSetPaletteLineColor() && ls.isPaletteLineColor())) {
      liaMarker=goFactory.copyOf(liaMarker);
      liaMarker.setColor(goFactory.copyOf(FillUtil.getColor(fPaletteEntry)));
    }
    lre.setLineAttributes(liaMarker);
    lre.setStart(LocationImpl.create(bo.getLeft() + 1,bo.getTop() + bo.getHeight() / 2));
    lre.setEnd(LocationImpl.create(bo.getLeft() + bo.getWidth() - 1,bo.getTop() + bo.getHeight() / 2));
    ipr.drawLine(lre);
  }
  SeriesDefinition sd=getSeriesDefinition();
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ls.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ls.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ls);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  m=ls.getMarker();
  double width=bo.getWidth() / getDeviceScale();
  double height=bo.getHeight() / getDeviceScale();
  int markerSize=(int)(((width > height ? height : width) - 2) / 2);
  if (markerSize <= 0) {
    markerSize=1;
  }
  if (m != null && m.isVisible()) {
    renderMarker(lg,ipr,m,LocationImpl.create(bo.getLeft() + bo.getWidth() / 2,bo.getTop() + bo.getHeight() / 2),ls.getLineAttributes(),fPaletteEntry,null,new Integer(markerSize),false,false);
  }
}","public void renderLegendGraphic(IPrimitiveRenderer ipr,Legend lg,Fill fPaletteEntry,Bounds bo) throws ChartException {
  if ((bo.getWidth() == 0) && (bo.getHeight() == 0)) {
    return;
  }
  final ClientArea ca=lg.getClientArea();
  final LineAttributes lia=ca.getOutline();
  final RadarSeries ls=(RadarSeries)getSeries();
  if (fPaletteEntry == null) {
    fPaletteEntry=ColorDefinitionImpl.RED();
  }
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
  rre.setBackground(ca.getBackground());
  rre.setOutline(lia);
  rre.setBounds(bo);
  ipr.fillRectangle(rre);
  LineAttributes liaMarker=ls.getLineAttributes();
  if (!liaMarker.isSetVisible()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  if (liaMarker.isVisible()) {
    final LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(StructureSource.createLegend(lg),LineRenderEvent.class);
    if (fPaletteEntry instanceof ColorDefinition && (ls.isSetPaletteLineColor() && ls.isPaletteLineColor())) {
      liaMarker=goFactory.copyOf(liaMarker);
      liaMarker.setColor(goFactory.copyOf(FillUtil.getColor(fPaletteEntry)));
    }
    lre.setLineAttributes(liaMarker);
    lre.setStart(LocationImpl.create(bo.getLeft() + 1,bo.getTop() + bo.getHeight() / 2));
    lre.setEnd(LocationImpl.create(bo.getLeft() + bo.getWidth() - 1,bo.getTop() + bo.getHeight() / 2));
    ipr.drawLine(lre);
  }
  SeriesDefinition sd=getSeriesDefinition();
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ls.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ls.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ls);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ls,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  m=ls.getMarker();
  double width=bo.getWidth() / getDeviceScale();
  double height=bo.getHeight() / getDeviceScale();
  int markerSize=(int)(((width > height ? height : width) - 2) / 2);
  if (markerSize <= 0) {
    markerSize=1;
  }
  if (m != null && m.isVisible()) {
    renderMarker(lg,ipr,m,LocationImpl.create(bo.getLeft() + bo.getWidth() / 2,bo.getTop() + bo.getHeight() / 2),ls.getLineAttributes(),fPaletteEntry,null,Integer.valueOf(markerSize),false,false);
  }
}",0.9976479811838496
66711,"private void renderOvalBackgrounds(IDeviceRenderer idr,Location center,Series se,double magnitude){
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),OvalRenderEvent.class);
  LineAttributes lia=null;
  LineAttributes wlia=((RadarSeries)se).getWebLineAttributes();
  if (wlia == null) {
    lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  ore.setBackground(lia.getColor());
  ore.setOutline(lia);
  for (int sc=scaleCount; sc >= 1; sc--) {
    double spiderMag=magnitude * sc / scaleCount;
    ore.setBounds(goFactory.createBounds(center.getX() - spiderMag,center.getY() - spiderMag,spiderMag * 2,spiderMag * 2));
    Fill wPaletteEntry=null;
    Palette pa=sd.getSeriesPalette();
    int ps=pa.getEntries().size();
    int tscnt=getSeriesCount();
    int palcnt=ps + tscnt + sc;
    if (palcnt > ps)     palcnt=1;
    wPaletteEntry=FillUtil.getPaletteFill(pa.getEntries(),sc + 1);
    if (wPaletteEntry instanceof ColorDefinition) {
      RadarSeries rsd=getFirstSeries();
      if (rsd.isBackgroundOvalTransparent()) {
        wPaletteEntry=goFactory.translucent((ColorDefinition)wPaletteEntry);
      }
    }
    ore.setBackground(wPaletteEntry);
    try {
      idr.fillOval(ore);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","private void renderOvalBackgrounds(IDeviceRenderer idr,Location center,Series se,double magnitude) throws ChartException {
  final OvalRenderEvent ore=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),OvalRenderEvent.class);
  LineAttributes lia=null;
  LineAttributes wlia=((RadarSeries)se).getWebLineAttributes();
  if (wlia == null) {
    lia=LineAttributesImpl.create(ColorDefinitionImpl.GREY(),LineStyle.SOLID_LITERAL,1);
  }
 else {
    lia=wlia;
  }
  ore.setBackground(lia.getColor());
  ore.setOutline(lia);
  for (int sc=scaleCount; sc >= 1; sc--) {
    double spiderMag=magnitude * sc / scaleCount;
    ore.setBounds(goFactory.createBounds(center.getX() - spiderMag,center.getY() - spiderMag,spiderMag * 2,spiderMag * 2));
    Fill wPaletteEntry=null;
    Palette pa=sd.getSeriesPalette();
    int ps=pa.getEntries().size();
    int tscnt=getSeriesCount();
    int palcnt=ps + tscnt + sc;
    if (palcnt > ps)     palcnt=1;
    wPaletteEntry=FillUtil.getPaletteFill(pa.getEntries(),sc + 1);
    if (wPaletteEntry instanceof ColorDefinition) {
      RadarSeries rsd=getFirstSeries();
      if (rsd.isBackgroundOvalTransparent()) {
        wPaletteEntry=goFactory.translucent((ColorDefinition)wPaletteEntry);
      }
    }
    ore.setBackground(wPaletteEntry);
    idr.fillOval(ore);
  }
}",0.9625231910946196
66712,"/** 
 * @param idr
 * @param bo
 * @throws ChartException
 */
private final void render(IDeviceRenderer idr,Bounds bo,RadarSeries se,SeriesDefinition sd) throws ChartException {
  List<Series> rts=sd.getRunTimeSeries();
  int iThisSeriesIndex=rts.indexOf(se);
  if (iThisSeriesIndex == -1)   iThisSeriesIndex=getSeriesIndex();
  int totalSeriesCnt=getSeriesCount();
  int currSeriesIdx=getSeriesIndex();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  dc=getDeferredCache();
  Bounds boCA=goFactory.copyOf(bo);
  double dh=boCA.getHeight() - (boCA.getHeight() * percentReduce);
  double dl=boCA.getLeft() + (boCA.getWidth() * percentReduce) / 2;
  double dt=boCA.getTop() + (boCA.getHeight() * percentReduce) / 2;
  double dw=boCA.getWidth() - (boCA.getWidth() * percentReduce);
  double centrePointX=Math.round(dl + dw / 2);
  double centrePointY=Math.round(dt + dh / 2);
  double mag=dh / 2;
  Location cntpt=LocationImpl.create(centrePointX,centrePointY);
  if (currSeriesIdx == 1) {
    if (BULLSEYE_SUBTYPE_LITERAL.equals(getModel().getSubType())) {
      renderOvalBackgrounds(idr,cntpt,se,mag);
    }
  }
  PolarCoordinate pc=new PolarCoordinate(cntpt,dpha.length,getSeriesCount() - 1,getSeriesIndex() - 1);
  final boolean bPaletteByCategory=isPaletteByCategory();
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,se);
  }
  Location loAxis=LocationImpl.create(centrePointX,centrePointY);
  List<Location> loList=new LinkedList<Location>();
  for (int index=0; index < dpha.length; index++) {
    DataPointHints dph=dpha[index];
    if (isNaN(dph.getOrthogonalValue())) {
      if (!se.isFillPolys()) {
        loList.add(null);
      }
      continue;
    }
    double currval=((Number)dph.getOrthogonalValue()).doubleValue();
    pc.computeLocation(loAxis,index,mag);
    Location lo=pc.createLocation(index,mag * (1 - ((getAxisMax() - currval) / (getAxisMax() - getAxisMin()))));
    loList.add(lo);
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,index);
      updateTranslucency(fPaletteEntry,se);
    }
    LineAttributes llia=se.getLineAttributes();
    if (se.isPaletteLineColor() && index == 0) {
      llia.setColor(goFactory.copyOf(FillUtil.getColor(fPaletteEntry)));
    }
    Marker m=se.getMarker();
    if (m != null) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dph);
      renderMarker(se,idr,m,lo,llia,fPaletteEntry,dph,m.getSize(),true,false);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dph);
    }
    drawSeriesLabel(idr,pc,dph,lo);
  }
  renderPolys(idr,loList.toArray(new Location[loList.size()]),se,sd);
  if (currSeriesIdx == (totalSeriesCnt - 1)) {
    if (se.getWebLineAttributes() != null && se.getWebLineAttributes().isVisible()) {
      renderAxes(idr,pc,se,mag);
    }
    RadarSeries rsd=getFirstSeries();
    if (rsd.isShowWebLabels()) {
      Location loLabel=LocationImpl.create(0,0);
      for (int sc=0; sc <= scaleCount; sc++) {
        final TextRenderEvent stre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),TextRenderEvent.class);
        Label la=null;
        if (rsd.getWebLabel() != null) {
          la=goFactory.copyOf(rsd.getWebLabel());
        }
 else {
          la=goFactory.copyOf(rsd.getLabel());
        }
        la.setVisible(true);
        stre.setTextPosition(TextRenderEvent.RIGHT);
        double lblperc;
        if (sc == 0) {
          lblperc=getAxisMin();
        }
 else         if (sc == (scaleCount)) {
          lblperc=getAxisMax();
        }
 else {
          lblperc=(((double)sc / scaleCount) * (getAxisMax() - getAxisMin())) + getAxisMin();
        }
        String weblabel=ValueFormatter.format(lblperc,rsd.getWebLabelFormatSpecifier(),rtc.getULocale(),null);
        la.getCaption().setValue(weblabel);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,SCRIPT_KEY_WEB,la,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
        stre.setLabel(la);
        stre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
        double ycord=mag * sc / scaleCount;
        ycord=Math.round(centrePointY - ycord);
        double xcord=Math.round(centrePointX - (mag * 0.25));
        loLabel.set(xcord,ycord);
        stre.setLocation(loLabel);
        dc.addLabel(stre);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,SCRIPT_KEY_WEB,la,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
      }
    }
  }
}","/** 
 * @param idr
 * @param bo
 * @throws ChartException
 */
private final void render(IDeviceRenderer idr,Bounds bo,RadarSeries se,SeriesDefinition sd) throws ChartException {
  List<Series> rts=sd.getRunTimeSeries();
  int iThisSeriesIndex=rts.indexOf(se);
  if (iThisSeriesIndex == -1)   iThisSeriesIndex=getSeriesIndex();
  int totalSeriesCnt=getSeriesCount();
  int currSeriesIdx=getSeriesIndex();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  dc=getDeferredCache();
  Bounds boCA=goFactory.copyOf(bo);
  double dh=boCA.getHeight() - (boCA.getHeight() * percentReduce);
  double dl=boCA.getLeft() + (boCA.getWidth() * percentReduce) / 2;
  double dt=boCA.getTop() + (boCA.getHeight() * percentReduce) / 2;
  double dw=boCA.getWidth() - (boCA.getWidth() * percentReduce);
  double centrePointX=Math.round(dl + dw / 2);
  double centrePointY=Math.round(dt + dh / 2);
  double mag=dh / 2;
  Location cntpt=LocationImpl.create(centrePointX,centrePointY);
  if (currSeriesIdx == 1) {
    if (BULLSEYE_SUBTYPE_LITERAL.equals(getModel().getSubType())) {
      renderOvalBackgrounds(idr,cntpt,se,mag);
    }
  }
  PolarCoordinate pc=new PolarCoordinate(cntpt,dpha.length,getSeriesCount() - 1,getSeriesIndex() - 1);
  final boolean bPaletteByCategory=isPaletteByCategory();
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,se);
  }
  Location loAxis=LocationImpl.create(centrePointX,centrePointY);
  List<Location> loList=new LinkedList<Location>();
  for (int index=0; index < dpha.length; index++) {
    DataPointHints dph=dpha[index];
    if (isNaN(dph.getOrthogonalValue())) {
      if (!se.isFillPolys()) {
        loList.add(null);
      }
      continue;
    }
    double currval=((Number)dph.getOrthogonalValue()).doubleValue();
    pc.computeLocation(loAxis,index,mag);
    Location lo=pc.createLocation(index,mag * (1 - ((getAxisMax() - currval) / (getAxisMax() - getAxisMin()))));
    loList.add(lo);
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,index);
      updateTranslucency(fPaletteEntry,se);
    }
    LineAttributes llia=se.getLineAttributes();
    if (se.isPaletteLineColor() && index == 0) {
      llia.setColor(goFactory.copyOf(FillUtil.getColor(fPaletteEntry)));
    }
    Marker m=se.getMarker();
    if (m != null) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dph);
      renderMarker(se,idr,m,lo,llia,fPaletteEntry,dph,m.getSize(),true,false);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dph);
    }
    drawSeriesLabel(idr,pc,dph,lo);
  }
  renderPolys(idr,loList.toArray(new Location[loList.size()]),se,sd);
  if (currSeriesIdx == (totalSeriesCnt - 1)) {
    if (se.getWebLineAttributes() != null && se.getWebLineAttributes().isVisible()) {
      renderAxes(idr,pc,mag);
    }
    RadarSeries rsd=getFirstSeries();
    if (rsd.isShowWebLabels()) {
      Location loLabel=LocationImpl.create(0,0);
      for (int sc=0; sc <= scaleCount; sc++) {
        final TextRenderEvent stre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),TextRenderEvent.class);
        Label la=null;
        if (rsd.getWebLabel() != null) {
          la=goFactory.copyOf(rsd.getWebLabel());
        }
 else {
          la=goFactory.copyOf(rsd.getLabel());
        }
        la.setVisible(true);
        stre.setTextPosition(TextRenderEvent.RIGHT);
        double lblperc;
        if (sc == 0) {
          lblperc=getAxisMin();
        }
 else         if (sc == (scaleCount)) {
          lblperc=getAxisMax();
        }
 else {
          lblperc=(((double)sc / scaleCount) * (getAxisMax() - getAxisMin())) + getAxisMin();
        }
        String weblabel=ValueFormatter.format(lblperc,rsd.getWebLabelFormatSpecifier(),rtc.getULocale(),null);
        la.getCaption().setValue(weblabel);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,SCRIPT_KEY_WEB,la,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
        stre.setLabel(la);
        stre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
        double ycord=mag * sc / scaleCount;
        ycord=Math.round(centrePointY - ycord);
        double xcord=Math.round(centrePointX - (mag * 0.25));
        loLabel.set(xcord,ycord);
        stre.setLocation(loLabel);
        dc.addLabel(stre);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,SCRIPT_KEY_WEB,la,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
      }
    }
  }
}",0.9997102848865282
66713,"/** 
 * @param appContext
 * @throws DataException
 */
private void configureDataSetCache(Scriptable outerScope,IQueryDefinition querySpec,Map appContext,Scriptable scope) throws DataException {
  if (querySpec == null)   return;
  String queryResultID=querySpec.getQueryResultsID();
  if (queryResultID != null)   return;
  if (dataSetDesign == null)   return;
  Collection parameterHints=null;
  IBaseDataSourceDesign dataSourceDesign=this.dataEngine.getDataSourceDesign(dataSetDesign.getDataSourceName());
  DataSourceRuntime dsRuntime=this.dataEngine.getDataSourceRuntime(dataSetDesign.getDataSourceName());
  if (dsRuntime != null) {
    DataSetRuntime dataSet=DataSetRuntime.newInstance(dataSetDesign,null,this.dataEngine.getSession());
    parameterHints=new ParameterUtil(outerScope,dataSet,this.queryDefn,scope,this.dataEngine.getSession().getEngineContext().getScriptContext()).resolveDataSetParameters(true);
  }
  getDataSetCacheManager().setDataSourceAndDataSet(dataSourceDesign,dataSetDesign,parameterHints,this.appContext);
}","/** 
 * @param appContext
 * @throws DataException
 */
private void configureDataSetCache(Scriptable outerScope,IQueryDefinition querySpec,Map appContext,Scriptable scope) throws DataException {
  if (querySpec == null)   return;
  String queryResultID=querySpec.getQueryResultsID();
  if (queryResultID != null)   return;
  if (dataSetDesign == null)   return;
  Collection parameterHints=null;
  IBaseDataSourceDesign dataSourceDesign=this.dataEngine.getDataSourceDesign(dataSetDesign.getDataSourceName());
  DataSourceRuntime dsRuntime=this.dataEngine.getDataSourceRuntime(dataSetDesign.getDataSourceName());
  if (dsRuntime != null) {
    DataSetRuntime dataSet=DataSetRuntime.newInstance(dataSetDesign,null,this.dataEngine.getSession());
    parameterHints=new ParameterUtil(outerScope,dataSet,this.queryDefn,scope,this.dataEngine.getSession().getEngineContext().getScriptContext()).resolveDataSetParameters(true);
  }
  getDataSetCacheManager().setDataSourceAndDataSet(dataSourceDesign,this.dataEngine.getDataSetDesign(dataSetDesign.getName()),parameterHints,this.appContext);
}",0.9670433145009416
66714,"private ICubeCursor createCursor(IBindingValueFetcher fetcher) throws DataException, IOException, OLAPException {
  ICubeCursor cursor;
  CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
  executor.getFacttableBasedFilterHelpers().addAll(this.preparedQuery.getInternalFilters());
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=null;
  try {
    cube=loadCube(documentManager,executor);
  }
 catch (  Exception ex) {
    throw new DataException(ResourceConstants.FAIL_LOAD_CUBE,ex);
  }
  BirtCubeView bcv=new BirtCubeView(executor,cube,appContext,fetcher);
  CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube);
  cube.close();
  String newResultSetId=executor.getQueryResultsId();
  if (newResultSetId != null) {
    this.queryResultsId=newResultSetId;
  }
  this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
  this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.cubeQueryDefinition,bcv));
  cursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
  return cursor;
}","private ICubeCursor createCursor(IBindingValueFetcher fetcher) throws DataException, IOException, OLAPException {
  ICubeCursor cursor;
  CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
  executor.getFacttableBasedFilterHelpers().addAll(this.preparedQuery.getInternalFilters());
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=null;
  try {
    if (!isStandAloneQuery(cubeQueryDefinition,session.getEngineContext()))     cube=loadCube(documentManager,executor);
  }
 catch (  Exception ex) {
    throw new DataException(ResourceConstants.FAIL_LOAD_CUBE,ex);
  }
  BirtCubeView bcv=new BirtCubeView(executor,cube,appContext,fetcher);
  CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube);
  if (cube != null)   cube.close();
  String newResultSetId=executor.getQueryResultsId();
  if (newResultSetId != null) {
    this.queryResultsId=newResultSetId;
  }
  this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
  this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.cubeQueryDefinition,bcv));
  cursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
  return cursor;
}",0.9632465543644716
66715,"/** 
 * @param view
 * @param cube
 * @param calculatedMember
 * @throws DataException
 */
static void validateCubeQueryDefinition(BirtCubeView view,ICube cube) throws DataException {
  if (view.getColumnEdgeView() == null && view.getRowEdgeView() == null) {
  }
  if (view.getColumnEdgeView() != null) {
    validateOnEdgeDefinition(cube,view.getColumnEdgeView());
  }
  if (view.getRowEdgeView() != null) {
    validateOnEdgeDefinition(cube,view.getRowEdgeView());
  }
}","/** 
 * @param view
 * @param cube
 * @param calculatedMember
 * @throws DataException
 */
static void validateCubeQueryDefinition(BirtCubeView view,ICube cube) throws DataException {
  if (cube == null)   return;
  if (view.getColumnEdgeView() == null && view.getRowEdgeView() == null) {
  }
  if (view.getColumnEdgeView() != null) {
    validateOnEdgeDefinition(cube,view.getColumnEdgeView());
  }
  if (view.getRowEdgeView() != null) {
    validateOnEdgeDefinition(cube,view.getRowEdgeView());
  }
}",0.969199178644764
66716,"/** 
 * Expand the cell of the passed sheet data. Creates empty data entries to cover the given rowspan and updates the border accordingly.
 * @param sheetData sheet data
 * @param currentColumnIndex current column index
 * @param rowspan number of cells to which to expand the cell 
 */
private void spanWithEmptyData(SheetData sheetData,int currentColumnIndex,int rowspan){
  SheetData ref=sheetData;
  while (ref.isBlank()) {
    ref=((BlankData)ref).getData();
    if (ref == null) {
      return;
    }
  }
  int rowIndex=sheetData.getRowIndex();
  for (int p=1; p <= rowspan; p++) {
    Data blank=new Data();
    blank.setRowIndex(rowIndex + p);
    blank.setValue(""String_Node_Str"");
    blank.setStartX(ref.getStartX());
    blank.setEndX(ref.getEndX());
    int styleId=sheetData.getStyleId();
    if (styleId != -1) {
      StyleEntry refStyle=styleEngine.getStyle(styleId);
      StyleEntry blankCellStyle=new StyleEntry(refStyle);
      removeTopBorder(blankCellStyle);
      blank.setStyleId(styleEngine.getStyleId(blankCellStyle));
      if (refStyle.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP) != null) {
        StyleEntry refNewStyle=new StyleEntry(refStyle);
        removeBottomBorder(refNewStyle);
        sheetData.setStyleId(styleEngine.getStyleId(refNewStyle));
      }
    }
    currentCache.addData(currentColumnIndex,blank);
  }
}","/** 
 * Expand the cell of the passed sheet data. Creates empty data entries to cover the given rowspan and updates the border accordingly.
 * @param sheetData sheet data
 * @param currentColumnIndex current column index
 * @param rowspan number of cells to which to expand the cell 
 */
private void spanWithEmptyData(SheetData sheetData,int currentColumnIndex,int rowspan){
  SheetData ref=sheetData;
  while (ref.isBlank()) {
    ref=((BlankData)ref).getData();
    if (ref == null) {
      return;
    }
  }
  int rowIndex=sheetData.getRowIndex();
  for (int p=1; p <= rowspan; p++) {
    Data blank=createData();
    blank.setRowIndex(rowIndex + p);
    blank.setValue(""String_Node_Str"");
    blank.setStartX(ref.getStartX());
    blank.setEndX(ref.getEndX());
    int styleId=sheetData.getStyleId();
    if (styleId != -1) {
      StyleEntry refStyle=styleEngine.getStyle(styleId);
      StyleEntry blankCellStyle=new StyleEntry(refStyle);
      removeTopBorder(blankCellStyle);
      blank.setStyleId(styleEngine.getStyleId(blankCellStyle));
      if (refStyle.getProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP) != null) {
        StyleEntry refNewStyle=new StyleEntry(refStyle);
        removeBottomBorder(refNewStyle);
        sheetData.setStyleId(styleEngine.getStyleId(refNewStyle));
      }
    }
    currentCache.addData(currentColumnIndex,blank);
  }
}",0.9963396778916545
66717,"/** 
 * Get result set column name collection from column binding map
 * @param cacheRequestMap
 * @return
 * @throws DataException
 */
public static Set getRsColumnRequestMap(List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=new HashSet();
  if (cacheRequestMap != null) {
    Iterator<IBinding> iter=cacheRequestMap.iterator();
    List<String> dataSetColumnList=null;
    while (iter.hasNext()) {
      IBinding binding=iter.next();
      dataSetColumnList=binding == null ? null : ExpressionCompilerUtil.extractDataSetColumnExpression(binding.getExpression());
      if (dataSetColumnList != null) {
        resultSetNameSet.addAll(dataSetColumnList);
      }
    }
  }
  return resultSetNameSet;
}","/** 
 * Get result set column name collection from column binding map
 * @param cacheRequestMap
 * @return
 * @throws DataException
 */
public static Set getRsColumnRequestMap(List<IBinding> cacheRequestMap) throws DataException {
  Set resultSetNameSet=new HashSet();
  if (cacheRequestMap != null) {
    Iterator<IBinding> iter=cacheRequestMap.iterator();
    List<String> dataSetColumnList=null;
    while (iter.hasNext()) {
      IBinding binding=iter.next();
      dataSetColumnList=null;
      if (binding != null) {
        if (binding.getExpression() != null)         dataSetColumnList=ExpressionCompilerUtil.extractDataSetColumnExpression(binding.getExpression());
 else         dataSetColumnList=ExpressionCompilerUtil.extractDataSetColumnExpression(getArgumentExpression(binding));
      }
      if (dataSetColumnList != null) {
        resultSetNameSet.addAll(dataSetColumnList);
      }
    }
  }
  return resultSetNameSet;
}",0.854916067146283
66718,"protected void createPage(){
  page=new Page(context.getContentWidth(),engine,maxCol,context.getSheetName());
  page.initalize();
  context.setPage(page);
}","protected void createPage(XlsContainer pageContainer){
  page=new Page(context.getContentWidth(),engine,maxCol,context.getSheetName(),pageContainer);
  page.initalize();
  context.setPage(page);
}",0.8863636363636364
66719,"private void newPage(){
  createPage();
  for (  XlsTable table : tables) {
    splitColumns(table.getColumnsInfo(),table.getParent().getSizeInfo());
  }
  resetContainers();
}","private void newPage(){
  createPage(containers.get(0));
  for (  XlsTable table : tables) {
    splitColumns(table.getColumnsInfo(),table.getParent().getSizeInfo());
  }
  resetContainers();
}",0.9539295392953928
66720,"public void complete(Page page){
  engine.applyContainerBottomStyle(containers.get(0),page);
  Iterator<SheetData[]> iterator=page.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
    page.calculateRowHeight(rowData,context.isRTL());
  }
}","public void complete(Page page){
  engine.applyContainerBottomStyle(page.getPageContainer(),page);
  Iterator<SheetData[]> iterator=page.getRowIterator();
  while (iterator.hasNext()) {
    SheetData[] rowData=iterator.next();
    for (int j=0; j < rowData.length; j++) {
      SheetData data=rowData[j];
      if (data == null || data.isBlank()) {
        continue;
      }
      HyperlinkDef hyperLink=data.getHyperlinkDef();
      if (hyperLink != null) {
        if (hyperLink.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
          setLinkedBookmark(data,hyperLink);
        }
      }
    }
    page.calculateRowHeight(rowData,context.isRTL());
  }
}",0.9709923664122138
66721,"@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}","@SuppressWarnings(""String_Node_Str"") public IPreparedDSQuery prepare() throws DataException {
  if (odaStatement != null)   throw new DataException(ResourceConstants.QUERY_HAS_PREPARED);
  populateQuerySpecification();
  odaStatement=dataSource.prepareStatement(queryText,queryType,this.querySpecificaton);
  addPropertiesToPreparedStatement();
  addParameterDefns();
  IOdaDataSetDesign design=null;
  if (session.getDataSetCacheManager().getCurrentDataSetDesign() instanceof IOdaDataSetDesign)   design=(IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign();
  if (design != null) {
    if (canAccessResultSetByName(design)) {
      addCustomFields(design.getPrimaryResultSetName(),odaStatement);
      addColumnHints(design.getPrimaryResultSetName(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetName(),this.projectedFields);
    }
 else     if (canAccessResultSetByNumber(design)) {
      addCustomFields(design.getPrimaryResultSetNumber(),odaStatement);
      addColumnHints(design.getPrimaryResultSetNumber(),odaStatement);
      if (this.projectedFields != null)       odaStatement.setColumnsProjection(design.getPrimaryResultSetNumber(),this.projectedFields);
    }
 else {
      prepareColumns();
    }
  }
 else {
    prepareColumns();
  }
  odaStatement.setMaxRows(this.getRowFetchLimit());
  try {
    ICancellable queryCanceller=new OdaQueryCanceller(odaStatement,session.getStopSign());
    this.session.getCancelManager().register(queryCanceller);
    if (!session.getStopSign().isStopped())     resultMetadata=getMetaData((IOdaDataSetDesign)session.getDataSetCacheManager().getCurrentDataSetDesign(),odaStatement);
    if (queryCanceller.collectException() != null) {
      if (!(queryCanceller.collectException().getCause() instanceof UnsupportedOperationException))       throw queryCanceller.collectException();
    }
    this.session.getCancelManager().deregister(queryCanceller);
  }
 catch (  DataException e) {
    resultMetadata=null;
  }
  return this;
}",0.8603200433957147
66722,"public IResultIterator getResultIterator() throws DataException {
  this.session.getStopSign().start();
  if (queryService == null)   throw new DataException(ResourceConstants.RESULT_CLOSED);
  try {
    if (iterator == null) {
      this.queryService.initAutoBinding();
      this.queryService.validateQuery();
      org.eclipse.birt.data.engine.odi.IResultIterator odiIterator=queryService.executeQuery();
      if (queryService.getQueryDefn() instanceof IQueryDefinition && !((QueryDefinition)queryService.getQueryDefn()).isTempQuery()) {
        iterator=QueryResultsUtil.processOdiResult(session,this,(IQueryDefinition)queryService.getQueryDefn(),odiIterator,((IQueryDefinition)queryService.getQueryDefn()).getDataSetName());
        if (iterator != null)         return iterator;
      }
      if (isDummyQuery(odiIterator)) {
        iterator=new DummyResultIterator(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
      }
 else {
        if (queryService.getQueryDefn() instanceof IQueryDefinition && ((IQueryDefinition)queryService.getQueryDefn()).isSummaryQuery()) {
          iterator=new ResultIterator2(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
        }
 else         if (queryService.getQueryDefn().usesDetails() == true || queryService.getQueryDefn().cacheQueryResults()) {
          iterator=new ResultIterator(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
        }
 else {
          iterator=new ResultIterator2(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
        }
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  logger.logp(Level.FINE,QueryResults.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return iterator;
}","public IResultIterator getResultIterator() throws DataException {
  if (this.session.getStopSign().isStopped())   return null;
  if (queryService == null)   throw new DataException(ResourceConstants.RESULT_CLOSED);
  try {
    if (iterator == null) {
      this.queryService.initAutoBinding();
      this.queryService.validateQuery();
      org.eclipse.birt.data.engine.odi.IResultIterator odiIterator=queryService.executeQuery();
      if (queryService.getQueryDefn() instanceof IQueryDefinition && !((QueryDefinition)queryService.getQueryDefn()).isTempQuery()) {
        iterator=QueryResultsUtil.processOdiResult(session,this,(IQueryDefinition)queryService.getQueryDefn(),odiIterator,((IQueryDefinition)queryService.getQueryDefn()).getDataSetName());
        if (iterator != null)         return iterator;
      }
      if (isDummyQuery(odiIterator)) {
        iterator=new DummyResultIterator(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
      }
 else {
        if (queryService.getQueryDefn() instanceof IQueryDefinition && ((IQueryDefinition)queryService.getQueryDefn()).isSummaryQuery()) {
          iterator=new ResultIterator2(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
        }
 else         if (queryService.getQueryDefn().usesDetails() == true || queryService.getQueryDefn().cacheQueryResults()) {
          iterator=new ResultIterator(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
        }
 else {
          iterator=new ResultIterator2(new ResultService(session,this),odiIterator,this.queryScope,this.queryService.getStartingRawID());
        }
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  logger.logp(Level.FINE,QueryResults.class.getName(),""String_Node_Str"",""String_Node_Str"");
  return iterator;
}",0.9903065234477338
66723,"public void cancel() throws OdaException {
  try {
    if (this.preStat != null)     this.preStat.cancel();
  }
 catch (  SQLException e) {
    throw new OdaException(e);
  }
}","public void cancel() throws OdaException {
  try {
    if (this.preStat != null) {
      System.out.println(""String_Node_Str"");
      this.preStat.cancel();
    }
  }
 catch (  SQLException e) {
    throw new OdaException(e);
  }
}",0.7469287469287469
66724,"public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    if (preStat != null) {
      this.preStat.close();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPAREDSTATEMENT_CANNOT_CLOSE,e);
  }
  this.cachedResultMetaData=null;
  this.cachedResultSet=null;
}","public void close() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  try {
    if (preStat != null) {
      System.out.println(""String_Node_Str"");
      this.preStat.close();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPAREDSTATEMENT_CANNOT_CLOSE,e);
  }
  this.cachedResultMetaData=null;
  this.cachedResultSet=null;
}",0.9466192170818504
66725,"public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  try {
    if (maxrows >= 0 && !maxRowsUpToDate) {
      preStat.setMaxRows(maxrows);
      maxRowsUpToDate=true;
    }
    return preStat.execute();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}","public boolean execute() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  try {
    if (maxrows >= 0 && !maxRowsUpToDate) {
      preStat.setMaxRows(maxrows);
      maxRowsUpToDate=true;
    }
    System.out.println(""String_Node_Str"");
    return preStat.execute();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.QUERY_EXECUTE_FAIL,e);
  }
}",0.9531079607415486
66726,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (maxrows >= 0 && !maxRowsUpToDate) {
      try {
        preStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    return new ResultSet(this.preStat.executeQuery());
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(preStat);
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (maxrows >= 0 && !maxRowsUpToDate) {
      try {
        preStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    System.out.println(""String_Node_Str"");
    return new ResultSet(this.preStat.executeQuery());
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.9688179840464104
66727,"/** 
 * @param bindingName
 * @param bindings
 * @return
 * @throws DataException
 */
private static boolean isAggregationBinding(String bindingName,List bindings) throws DataException {
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (bindingName.equals(binding.getBindingName())) {
      if (OlapExpressionUtil.isAggregationBinding(binding))       return true;
      List refBindingName=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
      for (int j=0; j < refBindingName.size(); j++) {
        if (isAggregationBinding((String)refBindingName.get(j),bindings))         return true;
      }
    }
  }
  return false;
}","/** 
 * @param bindingName
 * @param bindings
 * @return
 * @throws DataException
 */
private static boolean isAggregationBinding(String bindingName,List bindings) throws DataException {
  boolean find=false;
  for (int i=0; i < bindings.size(); i++) {
    IBinding binding=(IBinding)bindings.get(i);
    if (bindingName.equals(binding.getBindingName())) {
      find=true;
      if (OlapExpressionUtil.isAggregationBinding(binding))       return true;
      List refBindingName=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
      for (int j=0; j < refBindingName.size(); j++) {
        if (isAggregationBinding((String)refBindingName.get(j),bindings))         return true;
      }
    }
  }
  if (!find)   return true;
  return false;
}",0.9565217391304348
66728,"private void writeDataFormat(StyleEntry style){
  Integer type=(Integer)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (type == null)   return;
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
 else   if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    NumberFormatValue numberFormat=(NumberFormatValue)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    String format=numberFormat.getFormat();
    writer.attribute(""String_Node_Str"",format);
    writer.closeTag(""String_Node_Str"");
  }
}","private void writeDataFormat(StyleEntry style){
  Integer type=(Integer)style.getProperty(StyleConstant.DATA_TYPE_PROP);
  if (type == null)   return;
  if (type == SheetData.DATE && style.getProperty(StyleConstant.DATE_FORMAT_PROP) != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",style.getProperty(StyleConstant.DATE_FORMAT_PROP));
    writer.closeTag(""String_Node_Str"");
  }
 else   if (type == Data.NUMBER && style.getProperty(StyleConstant.NUMBER_FORMAT_PROP) != null) {
    NumberFormatValue numberFormat=(NumberFormatValue)style.getProperty(StyleConstant.NUMBER_FORMAT_PROP);
    String format=numberFormat.getFormat();
    if (format != null) {
      writer.openTag(""String_Node_Str"");
      writer.attribute(""String_Node_Str"",format);
      writer.closeTag(""String_Node_Str"");
    }
  }
}",0.9290953545232272
66729,"private IResultObject getConvertedResultObject(IResultObject resultObject) throws DataException {
  if (resultObject == null)   return null;
  if (columnIndexListForTypeConvert == null)   return resultObject;
  Object[] obj=new Object[resultClass.getFieldCount()];
  for (int i=1; i <= resultClass.getFieldCount(); i++) {
    if (columnIndexListForTypeConvert.contains(i)) {
      try {
        obj[i - 1]=DataTypeUtil.convert(resultObject.getFieldValue(i),DataTypeUtil.toApiDataType(resultClass.getFieldMetaData(i).getDataType()));
      }
 catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
 else {
      obj[i - 1]=resultObject.getFieldValue(i);
    }
  }
  IResultObject result=new ResultObject(resultObject.getResultClass(),obj);
  return result;
}","private IResultObject getConvertedResultObject(IResultObject resultObject) throws DataException {
  if (resultObject == null)   return null;
  if (columnIndexListForTypeConvert == null)   return resultObject;
  Object[] obj=new Object[resultClass.getFieldCount()];
  for (int i=1; i <= resultClass.getFieldCount(); i++) {
    if (columnIndexListForTypeConvert.contains(i)) {
      try {
        obj[i - 1]=DataTypeUtil.convert(resultObject.getFieldValue(i),DataTypeUtil.toApiDataType(resultClass.getFieldMetaData(i).getDataType()));
      }
 catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
 else {
      obj[i - 1]=resultObject.getFieldValue(i);
    }
  }
  IResultObject result=new ResultObject(resultClass,obj);
  return result;
}",0.981958762886598
66730,"public static float convertTextIndentToEM(String indent,float fontSize){
  DimensionType size=DimensionType.parserUnit(indent);
  float indentInPt=convertDimensionType(size,0,96) / 1000f;
  if (indentInPt != 0f) {
    return indentInPt / fontSize;
  }
  return 0f;
}","public static float convertTextIndentToEM(String indent,float fontSize){
  DimensionType size=DimensionType.parserUnit(indent);
  try {
    float indentInPt=convertDimensionType(size,0,96) / 1000f;
    if (indentInPt != 0f) {
      return indentInPt / fontSize;
    }
  }
 catch (  Exception ignored) {
  }
  return 0f;
}",0.9063032367972744
66731,"public void endPage(IPageContent pageContent) throws BirtException {
  IContent footer=pageContent.getPageFooter();
  if (!page.isOutputInMasterPage() && footer != null) {
    contentVisitor.visitChildren(footer,null);
  }
  Object pageLabelObj=context.getReportContext().getPageVariable(IReportContext.PAGE_VAR_PAGE_LABEL);
  if (pageLabelObj instanceof String) {
    String pageLabel=(String)pageLabelObj;
    pageLabel=ExcelUtil.getValidSheetName(pageLabel);
    page.setSheetName(pageLabel);
  }
  outputSheet(page);
  page=null;
}","public void endPage(IPageContent pageContent) throws BirtException {
  IContent footer=pageContent.getPageFooter();
  if (!page.isOutputInMasterPage() && footer != null) {
    contentVisitor.visitChildren(footer,null);
  }
  Object pageLabelObj=context.getReportContext().getPageVariable(IReportContext.PAGE_VAR_PAGE_LABEL);
  if (pageLabelObj instanceof String) {
    String pageLabel=(String)pageLabelObj;
    pageLabel=ExcelUtil.getValidSheetName(pageLabel);
    page.setSheetName(pageLabel);
  }
  outputSheet(page);
  containers.clear();
  page=null;
}",0.9798534798534798
66732,"private Set<Integer> getBetween(Object key1,Object key2) throws DataException {
  try {
    key1=DataTypeUtil.convert(key1,this.keyDataType);
    key2=DataTypeUtil.convert(key2,this.keyDataType);
  }
 catch (  BirtException e1) {
    throw DataException.wrap(e1);
  }
  BTreeCursor bCursor=btree.createCursor();
  Set<Integer> result=new HashSet<Integer>();
  try {
    if (!bCursor.first())     return result;
    if (((Comparable)bCursor.getKey()).compareTo(key1) <= 0) {
      bCursor.moveTo(key1);
      if (((Comparable)bCursor.getKey()).compareTo(key2) > 0)       return result;
      if (((Comparable)bCursor.getKey()).compareTo(key1) >= 0)       result.addAll(bCursor.getValues());
    }
 else {
      bCursor.beforeFirst();
    }
    while (bCursor.next()) {
      if (((Comparable)bCursor.getKey()).compareTo(key2) > 0)       return result;
      result.addAll(bCursor.getValues());
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
  return result;
}","private Set<Integer> getBetween(Object key1,Object key2) throws DataException {
  Object min, max;
  if (ScriptEvalUtil.compare(key1,key2) <= 0) {
    min=key1;
    max=key2;
  }
 else {
    min=key2;
    max=key1;
  }
  try {
    min=DataTypeUtil.convert(min,this.keyDataType);
    max=DataTypeUtil.convert(max,this.keyDataType);
  }
 catch (  BirtException e1) {
    throw DataException.wrap(e1);
  }
  BTreeCursor bCursor=btree.createCursor();
  Set<Integer> result=new HashSet<Integer>();
  try {
    if (!bCursor.first())     return result;
    if (ScriptEvalUtil.compare(bCursor.getKey(),min) <= 0) {
      bCursor.moveTo(min);
      if (((Comparable)bCursor.getKey()).compareTo(max) > 0)       return result;
      if (((Comparable)bCursor.getKey()).compareTo(min) >= 0)       result.addAll(bCursor.getValues());
    }
 else {
      bCursor.beforeFirst();
    }
    while (bCursor.next()) {
      if (((Comparable)bCursor.getKey()).compareTo(max) > 0)       return result;
      result.addAll(bCursor.getValues());
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
  return result;
}",0.8783216783216783
66733,"/** 
 * @throws FileNotFoundException
 */
private void initializeWriterAsTempWriter() throws FileNotFoundException {
  tempFilePath=context.getTempFileDir() + ""String_Node_Str"" + Thread.currentThread().getId();
  FileOutputStream out=new FileOutputStream(tempFilePath);
  tempWriter=new ExcelXmlWriter(out,context);
  writer=tempWriter;
}","/** 
 * @throws FileNotFoundException
 */
private void initializeWriterAsTempWriter() throws FileNotFoundException {
  String tempFolder=context.getTempFileDir();
  if (!(tempFolder.endsWith(""String_Node_Str"") || tempFolder.endsWith(""String_Node_Str""))) {
    tempFolder=tempFolder.concat(""String_Node_Str"");
  }
  tempFilePath=tempFolder + ""String_Node_Str"" + UUID.randomUUID().toString();
  FileOutputStream out=new FileOutputStream(tempFilePath);
  tempWriter=new ExcelXmlWriter(out,context);
  writer=tempWriter;
}",0.6214953271028038
66734,"private IResultClass mergeResultHint(List modelResultHints,IResultClass meta){
  if (modelResultHints == null || modelResultHints.isEmpty())   return meta;
  IResultClass newResultClass;
  try {
    newResultClass=copyResultClass(meta);
  }
 catch (  Exception ex) {
    return meta;
  }
  int count=newResultClass.getFieldCount();
  try {
    for (int i=1; i <= count; i++) {
      String fieldName=newResultClass.getFieldName(i);
      Class odaType=newResultClass.getFieldMetaData(i).getDataType();
      for (int j=0; j < modelResultHints.size(); j++) {
        if (((IColumnDefinition)modelResultHints.get(j)).getColumnName().equals(fieldName)) {
          int apiType=((IColumnDefinition)modelResultHints.get(j)).getDataType();
          if (DataTypeUtil.toApiDataType(odaType) != apiType) {
            newResultClass.getFieldMetaData(i).setDataType(DataType.getClass(apiType));
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return newResultClass;
}","private IResultClass mergeResultHint(List modelResultHints,IResultClass meta){
  if (modelResultHints == null || modelResultHints.isEmpty())   return meta;
  IResultClass newResultClass;
  try {
    newResultClass=copyResultClass(meta);
  }
 catch (  Exception ex) {
    return meta;
  }
  int count=newResultClass.getFieldCount();
  try {
    for (int i=1; i <= count; i++) {
      String fieldName=newResultClass.getFieldName(i);
      Class odaType=newResultClass.getFieldMetaData(i).getDataType();
      for (int j=0; j < modelResultHints.size(); j++) {
        if (((IColumnDefinition)modelResultHints.get(j)).getColumnName().equals(fieldName)) {
          int apiType=((IColumnDefinition)modelResultHints.get(j)).getDataType();
          if (apiType > 0 && DataTypeUtil.toApiDataType(odaType) != apiType) {
            newResultClass.getFieldMetaData(i).setDataType(DataType.getClass(apiType));
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return newResultClass;
}",0.992548435171386
66735,"public int getGlyphIndex(char c){
  int[] glyphIndexs=(int[])getCMap().get(c);
  return glyphIndexs[0];
}","public int getGlyphIndex(char c){
  int[] glyphIndexs=(int[])getCMap().get((int)c);
  return glyphIndexs[0];
}",0.9767441860465116
66736,"/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,Collection<String> driverClassPath,boolean refreshClassLoader) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,refreshClassLoader,driverClassPath);
    if (driverClass == null) {
      ClassLoader loader=Thread.currentThread().getContextClassLoader();
      if (loader != null) {
        try {
          driverClass=Class.forName(className,true,loader);
        }
 catch (        ClassNotFoundException e1) {
          driverClass=null;
        }
      }
    }
  }
  if (driverClass == null) {
    logger.warning(""String_Node_Str"" + className);
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
  Driver driver=null;
  try {
    driver=this.getDriverInstance(driverClass);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}","/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws OdaException 
 */
private Driver findDriver(String className,Collection<String> driverClassPath,boolean refreshClassLoader,boolean refreshDriver) throws OdaException {
  Class driverClass=null;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true,refreshClassLoader,driverClassPath);
    if (driverClass == null) {
      ClassLoader loader=Thread.currentThread().getContextClassLoader();
      if (loader != null) {
        try {
          driverClass=Class.forName(className,true,loader);
        }
 catch (        ClassNotFoundException e1) {
          driverClass=null;
        }
      }
    }
  }
  if (driverClass == null) {
    logger.warning(""String_Node_Str"" + className);
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
  Driver driver=null;
  try {
    driver=this.getDriverInstance(driverClass,refreshDriver);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}",0.9874564459930314
66737,"/** 
 * Deregister the driver by the given class name from DriverManager
 * @param className
 * @return true if deregister the driver successfully
 * @throws OdaException
 */
public boolean deregisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return false;
  if (isDeregistered(className)) {
    return true;
  }
  Driver driver=findDriver(className,null,false);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      if (registeredDrivers.containsKey(className)) {
        DriverManager.deregisterDriver(new WrappedDriver(driver,className));
        registeredDrivers.remove(className);
      }
      registeredDrivers.put(className,DRIVER_DEREGISTERED);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  return true;
}","/** 
 * Deregister the driver by the given class name from DriverManager
 * @param className
 * @return true if deregister the driver successfully
 * @throws OdaException
 */
public boolean deregisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return false;
  if (isDeregistered(className)) {
    return true;
  }
  Driver driver=findDriver(className,null,false,false);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      if (registeredDrivers.containsKey(className)) {
        DriverManager.deregisterDriver(new WrappedDriver(driver,className));
        registeredDrivers.remove(className);
      }
      registeredDrivers.put(className,DRIVER_DEREGISTERED);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  return true;
}",0.9967032967032968
66738,"/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    registerDriver(driverClass,null,true);
    try {
      return DriverManager.getConnection(url,connectionProperties);
    }
 catch (    Exception ex) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(ex.getLocalizedMessage()));
    }
  }
}","/** 
 * Implementation of getConnection() methods. Gets connection from either java.sql.DriverManager,  or from IConnectionFactory defined in the extension
 */
private synchronized Connection doConnect(String driverClass,String url,String jndiNameUrl,Properties connectionProperties,Collection<String> driverClassPath) throws SQLException, OdaException {
  Connection jndiDSConnection=getJndiDSConnection(driverClass,jndiNameUrl,connectionProperties);
  if (jndiDSConnection != null)   return jndiDSConnection;
  IConnectionFactory factory=getDriverConnectionFactory(driverClass);
  if (factory != null) {
    if (logger.isLoggable(Level.FINER))     logger.finer(""String_Node_Str"" + driverClass + ""String_Node_Str""+ LogUtil.encryptURL(url));
    return factory.getConnection(driverClass,url,connectionProperties);
  }
  loadAndRegisterDriver(driverClass,driverClassPath);
  if (logger.isLoggable(Level.FINER))   logger.finer(""String_Node_Str"" + LogUtil.encryptURL(url));
  try {
    return DriverManager.getConnection(url,connectionProperties);
  }
 catch (  Exception e) {
    registerDriver(driverClass,null,true,true);
    try {
      return DriverManager.getConnection(url,connectionProperties);
    }
 catch (    Exception ex) {
      throw new JDBCException(ResourceConstants.CONN_GET_ERROR,null,truncate(ex.getLocalizedMessage()));
    }
  }
}",0.9981447124304268
66739,"public Driver getDriverInstance(Class driver) throws OdaException {
  String driverName=driver.getName();
  if (this.cachedJdbcDriver.containsKey(driverName)) {
    return this.cachedJdbcDriver.get(driverName);
  }
 else {
    Driver instance=null;
    try {
      instance=(Driver)driver.newInstance();
    }
 catch (    Exception e) {
      throw new OdaException(e);
    }
    this.cachedJdbcDriver.put(driverName,instance);
    return instance;
  }
}","public Driver getDriverInstance(Class driver,boolean refreshDriver) throws OdaException {
  String driverName=driver.getName();
  if (refreshDriver || !this.cachedJdbcDriver.containsKey(driverName)) {
    Driver instance=null;
    try {
      instance=(Driver)driver.newInstance();
    }
 catch (    Exception e) {
      throw new OdaException(e);
    }
    this.cachedJdbcDriver.put(driverName,instance);
    return instance;
  }
 else {
    return this.cachedJdbcDriver.get(driverName);
  }
}",0.8270042194092827
66740,"/** 
 * If driver is found in the drivers directory, its class is not accessible in this class's ClassLoader. DriverManager will not allow this class to create connections using such driver. To solve the problem, we create a wrapper Driver in  our class loader, and register it with DriverManager
 * @param className
 * @param driverClassPath
 * @param refreshClassLoader
 * @throws OdaException
 */
private void registerDriver(String className,Collection<String> driverClassPath,boolean refreshClassLoader) throws OdaException {
  Driver driver=findDriver(className,driverClassPath,refreshClassLoader);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}","/** 
 * If driver is found in the drivers directory, its class is not accessible in this class's ClassLoader. DriverManager will not allow this class to create connections using such driver. To solve the problem, we create a wrapper Driver in  our class loader, and register it with DriverManager
 * @param className
 * @param driverClassPath
 * @param refreshClassLoader
 * @throws OdaException
 */
private void registerDriver(String className,Collection<String> driverClassPath,boolean refreshClassLoader,boolean refreshDriver) throws OdaException {
  Driver driver=findDriver(className,driverClassPath,refreshClassLoader,refreshDriver);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}",0.9815573770491804
66741,"public void loadAndRegisterDriver(String className,Collection<String> driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.info(""String_Node_Str"" + className);
  }
  registerDriver(className,driverClassPath,false);
}","public void loadAndRegisterDriver(String className,Collection<String> driverClassPath) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.FINE)) {
    logger.info(""String_Node_Str"" + className);
  }
  registerDriver(className,driverClassPath,false,false);
}",0.9941747572815534
66742,"/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
protected void addCommonPages(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addScriptOutputColumnDefnPage();
    addParametersPage();
    addFiltersPage();
    addDataSetSettingPage(ds);
    addResultSetPreviewPage();
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addOutputColumnsPage();
    addComputedColumnsPage();
    if (includeInputParameterPage)     addParametersPage();
    addDataSetFilterPage();
    addPropertyBindingPage();
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addOutputParameterPreviewPage();
    addResultSetPreviewPage();
  }
 else   if (ds instanceof JointDataSetHandle) {
    addJointDataSetPage();
    addOutputColumnsPage();
    addComputedColumnsPage();
    addParametersPage();
    addFiltersPage();
    addResultSetPreviewPage();
  }
 else {
    IPropertyPage[] pages=ExternalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      if (!needToFocusOnOutput && pages.length > 0) {
        setDefaultNode(pages[0].getClass().getName());
      }
      addOutputColumnsPage();
      if (ExternalUIUtil.needUtilityPages(ds)) {
        addComputedColumnsPage();
        addParametersPage();
        addFiltersPage();
      }
      addResultSetPreviewPage();
    }
  }
}","/** 
 * add several common use page for Birt data set editor
 * @param ds
 */
protected void addCommonPages(DataSetHandle ds){
  if (ds instanceof ScriptDataSetHandle) {
    addScriptOutputColumnDefnPage();
    addParametersPage();
    addFiltersPage();
    addDataSetSettingPage(ds);
    addResultSetPreviewPage();
  }
 else   if (ds instanceof OdaDataSetHandle) {
    addOutputColumnsPage();
    addComputedColumnsPage();
    if (includeInputParameterPage)     addParametersPage();
    addDataSetFilterPage();
    addPropertyBindingPage();
    addDataSetSettingPage(ds);
    if (includeOutputParameterPage)     addOutputParameterPreviewPage();
    addResultSetPreviewPage();
  }
 else   if (ds instanceof JointDataSetHandle) {
    addJointDataSetPage();
    addOutputColumnsPage();
    addComputedColumnsPage();
    addParametersPage();
    addFiltersPage();
    addResultSetPreviewPage();
  }
 else {
    IPropertyPage[] pages=ExternalUIUtil.getCommonPages(ds);
    if (pages != null && pages.length > 0) {
      for (int i=0; i < pages.length; i++) {
        addPageTo(""String_Node_Str"",pages[i].getClass().getName(),pages[i].getName(),null,pages[i]);
      }
      if (!needToFocusOnOutput && pages.length > 0) {
        setDefaultNode(pages[0].getClass().getName());
      }
      addOutputColumnsPage();
      addComputedColumnsPage();
      addParametersPage();
      addFiltersPage();
      addResultSetPreviewPage();
    }
  }
}",0.9431779516842465
66743,"public DataSetPreviewer(DataSetHandle dataSetHandle,int maxRow){
  this.dataSetHandle=dataSetHandle;
  this.maxRow=maxRow;
}","public DataSetPreviewer(DataSetHandle dataSetHandle,int maxRow,DataSetEditor container){
  this.dataSetHandle=dataSetHandle;
  this.maxRow=maxRow;
}",0.9117647058823528
66744,"public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    try {
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      session.shutdown();
      engineTask.close();
      engine.destroy();
    }
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot());
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    try {
      drSession.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      drSession.shutdown();
    }
  }
}","public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    try {
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      DataService.getInstance().unRegisterSession(session);
      session.shutdown();
      engineTask.close();
      engine.destroy();
    }
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot());
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    try {
      drSession.refreshMetaData(dataSetHandle,holdEvent);
    }
  finally {
      drSession.shutdown();
    }
  }
}",0.9832402234636872
66745,"protected final void clearResultSetTable(){
  if (recordList == null)   recordList=new ArrayList();
 else   recordList.clear();
  resultSetTable.removeAll();
  TableColumn[] columns=resultSetTable.getColumns();
  for (int n=0; n < columns.length; n++) {
    columns[n].dispose();
  }
}","protected final void clearResultSetTable(){
  if (recordList == null)   recordList=new ArrayList();
 else   recordList.clear();
  resultSetTable.removeAll();
  if (this.errorList != null) {
    this.errorList.clear();
  }
  TableColumn[] columns=resultSetTable.getColumns();
  for (int n=0; n < columns.length; n++) {
    columns[n].dispose();
  }
}",0.8990536277602523
66746,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference());
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        Map appContext=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          IResultIterator itr=previewer.preview();
          metaData=itr.getResultMetaData();
          populateRecords(itr);
          monitor.done();
        }
 catch (        BirtException e) {
          metaData=null;
          throw new InvocationTargetException(e);
        }
 finally {
          try {
            AppContextResourceReleaser.release(appContext);
            previewer.close();
          }
 catch (          BirtException e) {
            e.printStackTrace();
          }
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference(),((DataSetEditor)getContainer()));
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        Map appContext=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          IResultIterator itr=previewer.preview();
          metaData=itr.getResultMetaData();
          populateRecords(itr);
          monitor.done();
        }
 catch (        BirtException e) {
          metaData=null;
          throw new InvocationTargetException(e);
        }
 finally {
          try {
            AppContextResourceReleaser.release(appContext);
            previewer.close();
          }
 catch (          BirtException e) {
            e.printStackTrace();
          }
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}",0.9942342342342342
66747,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setDisplayName(hint.getDisplayName());
      items[i].setDisplayNameKey(hint.getDisplayNameKey());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  try {
    DataService.getInstance().registerSession(dataSetHandle,session);
    IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
    if (metaData == null)     return new DataSetViewData[0];
    DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
    for (int i=0; i < metaData.getColumnCount(); i++) {
      items[i]=new DataSetViewData();
      items[i].setName(metaData.getColumnName(i + 1));
      items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
      items[i].setAlias(metaData.getColumnAlias(i + 1));
      items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
      items[i].setPosition(i + 1);
      items[i].setDataType(metaData.getColumnType(i + 1));
      ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
      if (hint != null) {
        if (!items[i].isComputedColumn()) {
          items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
            items[i].setAnalysisColumn(hint.getAnalysisColumn());
          }
 else {
            items[i].setAnalysisColumn(null);
          }
        }
 else {
          items[i].setAnalysis(hint.getAnalysis());
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
        items[i].setDisplayName(hint.getDisplayName());
        items[i].setDisplayNameKey(hint.getDisplayNameKey());
        items[i].setACLExpression(hint.getACLExpression());
        items[i].setFormat(hint.getFormat());
        items[i].setDisplayLength(hint.getDisplayLength());
        items[i].setHeading(hint.getHeading());
        items[i].setHelpText(hint.getHelpText());
        items[i].setFormatValue(hint.getValueFormat());
        items[i].setHorizontalAlign(hint.getHorizontalAlign());
        items[i].setTextFormat(hint.getTextFormat());
        items[i].setDescription(hint.getDescription());
        items[i].setWordWrap(hint.wordWrap());
        items[i].setIndexColumn(hint.isIndexColumn());
        items[i].setRemoveDuplicateValues(hint.isCompressed());
      }
 else {
        if (items[i].isComputedColumn()) {
          items[i].setAnalysis(null);
          items[i].setAnalysisColumn(null);
        }
 else {
          items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
          items[i].setAnalysisColumn(null);
        }
      }
    }
    updateModel(dataSetHandle,items);
    return items;
  }
  finally {
    DataService.getInstance().unRegisterSession(session);
  }
}",0.9621527777777776
66748,"public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> index,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=this.rsMeta.getFieldCount();
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,index,i);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","public void doSave(DataOutputStream outputStream,DataOutputStream rowLensStream,Map<String,StringTable> stringTable,Map<String,IIndexSerializer> index,List<IBinding> cacheRequestMap) throws DataException {
  DataOutputStream dos=new DataOutputStream(outputStream);
  Set resultSetNameSet=ResultSetUtil.getRsColumnRequestMap(cacheRequestMap);
  try {
    int rowCount=this.resultObjects.length;
    int colCount=getColumnCount(this.rsMeta);
    IOUtil.writeInt(dos,rowCount);
    long offset=4;
    for (int i=0; i < rowCount; i++) {
      IOUtil.writeLong(rowLensStream,offset);
      offset+=ResultSetUtil.writeResultObject(dos,resultObjects[i],colCount,resultSetNameSet,stringTable,index,i);
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.98125
66749,"public CellArea cloneArea(){
  CellArea cloneCell=cell.cloneArea();
  cell.setRowSpan(cell.getRowSpan() - cell.getUsedRowSpan() + 1);
  return cloneCell;
}","public CellArea cloneArea(){
  CellArea cloneCell=cell.cloneArea();
  return cloneCell;
}",0.7295081967213115
66750,"public void relayoutChildren() throws BirtException {
  String nextRowId=null;
  if (layout.unresolvedRow != null) {
    nextRowId=this.getNextRowId(layout.unresolvedRow);
  }
  layout.clear();
  addRows(this,layout,nextRowId);
  layout.mergeUnresolvedRowHint();
}","public void relayoutChildren() throws BirtException {
  String nextRowId=null;
  if (unresolvedRow != null) {
    nextRowId=this.getNextRowId(unresolvedRow);
  }
  layout.clear();
  setUnresolvedRow=false;
  addRows(this,layout,nextRowId);
  setUnresolvedRow();
}",0.888045540796964
66751,"public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    unresolvedRow=tableResult.getLastRow();
    int h=tableResult.layout.resolveAll(unresolvedRow);
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    layout.setUnresolvedRow(unresolvedRow);
    if (context.isFixedLayout()) {
      FixedLayoutPageHintGenerator pageHintGenerator=context.getPageHintGenerator();
      if (pageHintGenerator != null && unresolvedRow != null) {
        InstanceID unresolvedTableIID=unresolvedRow.getTableArea().getContent().getInstanceID();
        if (unresolvedTableIID != null) {
          pageHintGenerator.addUnresolvedRowHint(unresolvedTableIID.toUniqueString(),convertRowToHint(unresolvedRow));
        }
      }
    }
  }
  relayoutChildren();
  return result;
}","public SplitResult split(int height,boolean force) throws BirtException {
  SplitResult result=super.split(height,force);
  if (result.getResult() != null) {
    TableArea tableResult=(TableArea)result.getResult();
    unresolvedRow=tableResult.getLastRow();
    int h=tableResult.layout.resolveAll(unresolvedRow);
    if (h > 0) {
      tableResult.setHeight(tableResult.getHeight() + h);
    }
    tableResult.resolveBottomBorder();
    if (context.isFixedLayout()) {
      FixedLayoutPageHintGenerator pageHintGenerator=context.getPageHintGenerator();
      if (pageHintGenerator != null && unresolvedRow != null) {
        InstanceID unresolvedTableIID=unresolvedRow.getTableArea().getContent().getInstanceID();
        if (unresolvedTableIID != null) {
          pageHintGenerator.addUnresolvedRowHint(unresolvedTableIID.toUniqueString(),convertRowToHint(unresolvedRow));
        }
      }
    }
  }
  relayoutChildren();
  return result;
}",0.9772492244053774
66752,"protected void addRows(ContainerArea container,TableLayout layout,String rowId) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    InstanceID id=row.getContent().getInstanceID();
    if (rowId != null && id != null && rowId.equals(id.toUniqueString())) {
      layout.mergeUnresolvedRowHint();
    }
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      layout.addRow(row,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout,rowId);
      child.updateChildrenPosition();
    }
    container.updateChildrenPosition();
  }
}","protected void addRows(ContainerArea container,TableLayout layout,String rowId) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    InstanceID id=row.getContent().getInstanceID();
    if (rowId != null && id != null && rowId.equals(id.toUniqueString())) {
      setUnresolvedRow();
    }
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      layout.addRow(row,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout,rowId);
      child.updateChildrenPosition();
    }
    container.updateChildrenPosition();
  }
}",0.992627085758634
66753,"protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  IRowContent row=report.createRowContent();
  row.setParent(content);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(getColumnCount());
  cell.setColumn(0);
  StyleDeclaration cstyle=new StyleDeclaration(report.getCSSEngine());
  cstyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.HIDDEN_VALUE);
  cell.setInlineStyle(cstyle);
  cell.setParent(row);
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setParent(cell);
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(this,context,row);
  captionRow.isDummy=true;
  captionRow.setParent(this);
  captionRow.setWidth(width);
  captionRow.initialize();
  CellArea captionCell=new CellArea(captionRow,context,cell);
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionCell.initialize();
  captionCell.isDummy=true;
  captionRow.children.add(captionCell);
  BlockTextArea captionText=new BlockTextArea(captionCell,context,captionLabel);
  captionText.isDummy=true;
  captionText.layout();
  int h=captionText.getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  captionRow.finished=true;
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}","protected void addCaption(String caption) throws BirtException {
  if (caption == null || ""String_Node_Str"".equals(caption)) {
    return;
  }
  ReportContent report=(ReportContent)content.getReportContent();
  IRowContent row=report.createRowContent();
  row.setParent(content);
  ICellContent cell=report.createCellContent();
  cell.setColSpan(getColumnCount());
  cell.setColumn(0);
  StyleDeclaration cstyle=new StyleDeclaration(report.getCSSEngine());
  cstyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.HIDDEN_VALUE);
  cstyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.HIDDEN_VALUE);
  cell.setInlineStyle(cstyle);
  cell.setParent(row);
  ILabelContent captionLabel=report.createLabelContent();
  captionLabel.setParent(cell);
  captionLabel.setText(caption);
  StyleDeclaration style=new StyleDeclaration(report.getCSSEngine());
  style.setProperty(IStyle.STYLE_TEXT_ALIGN,IStyle.CENTER_VALUE);
  captionLabel.setInlineStyle(style);
  RowArea captionRow=new RowArea(this,context,row);
  captionRow.isDummy=true;
  captionRow.setParent(this);
  captionRow.setWidth(width);
  captionRow.initialize();
  CellArea captionCell=new CellArea(captionRow,context,cell);
  captionCell.setWidth(width);
  captionCell.setMaxAvaWidth(width);
  captionCell.initialize();
  captionCell.isDummy=true;
  captionCell.setRowSpan(1);
  captionRow.children.add(captionCell);
  BlockTextArea captionText=new BlockTextArea(captionCell,context,captionLabel);
  captionText.isDummy=true;
  captionText.layout();
  int h=captionText.getAllocatedHeight();
  captionCell.setContentHeight(h);
  captionRow.setHeight(captionCell.getAllocatedHeight());
  captionRow.finished=true;
  add(captionRow);
  if (repeatList == null) {
    repeatList=new ArrayList();
  }
  repeatList.add(captionRow);
  update(captionRow);
}",0.9922397645169924
66754,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=cubeQueryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=cubeMetaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeQueryMap.get(cubeHandle),cubeMetaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  DataSetIterator dataForCube=null;
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=cubeQueryMap.get(cubeHandle);
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
    if (!fromJoin) {
      List<ColumnMeta> metas=cubeMetaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      String countBindingName=""String_Node_Str"";
      IBinding b=new Binding(countBindingName);
      b.setAggrFunction(IBuildInAggregation.TOTAL_COUNT_FUNC);
      QueryDefinition q=cubeQueryMap.get(cubeHandle);
      q.addBinding(b);
      dataForCube=new DataSetIterator(this,cubeQueryMap.get(cubeHandle),cubeMetaMap.get(cubeHandle),appContext);
      int rowCount=0;
      try {
        rowCount=dataForCube.getSummaryInt(countBindingName);
      }
 catch (      BirtException e) {
        rowCount=1;
      }
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,new DataSetIteratorForTempPK(rowCount),appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
  }
  try {
    if (dataForCube == null) {
      dataForCube=new DataSetIterator(this,cubeQueryMap.get(cubeHandle),cubeMetaMap.get(cubeHandle),appContext);
    }
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,dataForCube,this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.8915757863126285
66755,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateTempPKDimension(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext) throws AdapterException {
  QueryDefinition q=null;
  ILevelDefn[] tempLevels=new ILevelDefn[]{CubeElementFactory.createLevelDefinition(getCubeTempPKFieldName(cubeHandle),new String[]{getCubeTempPKFieldName(cubeHandle)},new String[]{})};
  IHierarchy h=null;
  try {
    q=createQueryForTempPKDimension(cubeHandle);
    h=cubeMaterializer.createHierarchy(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKHierarchyName(cubeHandle),new DataSetIteratorForTempPK(this,q,appContext),tempLevels,dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,getCubeTempPKDimensionName(cubeHandle) + ""String_Node_Str"" + getCubeTempPKHierarchyName(cubeHandle));
  }
  try {
    return cubeMaterializer.createDimension(getCubeTempPKDimensionName(cubeHandle),h);
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,getCubeTempPKDimensionName(cubeHandle));
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateTempPKDimension(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,DataSetIteratorForTempPK dataForTempPK,Map appContext) throws AdapterException {
  QueryDefinition q=null;
  ILevelDefn[] tempLevels=new ILevelDefn[]{CubeElementFactory.createLevelDefinition(getCubeTempPKFieldName(cubeHandle),new String[]{getCubeTempPKFieldName(cubeHandle)},new String[]{})};
  IHierarchy h=null;
  try {
    h=cubeMaterializer.createHierarchy(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKHierarchyName(cubeHandle),dataForTempPK,tempLevels,dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,getCubeTempPKDimensionName(cubeHandle) + ""String_Node_Str"" + getCubeTempPKHierarchyName(cubeHandle));
  }
  try {
    return cubeMaterializer.createDimension(getCubeTempPKDimensionName(cubeHandle),h);
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,getCubeTempPKDimensionName(cubeHandle));
  }
}",0.8983180428134556
66756,"@SuppressWarnings(""String_Node_Str"") DataSetIteratorForTempPK(DataRequestSessionImpl session,IQueryDefinition query,Map appContext) throws BirtException {
  IBinding b=new Binding(COUNT_BINDING_NAME);
  b.setAggrFunction(IBuildInAggregation.TOTAL_COUNT_FUNC);
  query.addBinding(b);
  executeQuery(session,query,appContext);
}","@SuppressWarnings(""String_Node_Str"") DataSetIteratorForTempPK(int rowCount) throws BirtException {
  this.rowCount=rowCount;
}",0.4911504424778761
66757,"private int[] calculateColumnCoordinates(ColumnsInfo table,int startCoordinate,int endCoordinate,boolean autoExtend){
  int columnCount=table != null ? table.getColumnCount() : 0;
  int[] columnStartCoordinates=new int[columnCount + 1];
  columnStartCoordinates[0]=startCoordinate;
  for (int i=1; i <= columnCount; i++) {
    if (!autoExtend && (columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1)) > endCoordinate) {
      columnStartCoordinates[i]=endCoordinate;
    }
 else     columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
  }
  return columnStartCoordinates;
}","private int[] calculateColumnCoordinates(ColumnsInfo table,int startCoordinate,int endCoordinate,boolean autoExtend){
  XlsContainer currentContainer=getCurrentContainer();
  if (table == null) {
    return new int[0];
  }
  int columnCount=table.getColumnCount();
  int totalWidth=0;
  for (int i=0; i < columnCount; i++) {
    totalWidth+=table.getColumnWidth(i);
  }
  boolean overflow=totalWidth > endCoordinate - startCoordinate;
  int[] columnStartCoordinates=new int[columnCount + 1];
  if (isRightAligned(currentContainer) && !(overflow && autoExtend)) {
    columnStartCoordinates[columnCount]=endCoordinate;
    for (int i=columnCount - 1; i >= 0; i--) {
      columnStartCoordinates[i]=Math.max(startCoordinate,columnStartCoordinates[i + 1] - table.getColumnWidth(i));
    }
  }
 else {
    columnStartCoordinates[0]=startCoordinate;
    for (int i=1; i <= columnCount; i++) {
      if (!autoExtend && (columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1)) > endCoordinate) {
        columnStartCoordinates[i]=endCoordinate;
      }
 else       columnStartCoordinates[i]=columnStartCoordinates[i - 1] + table.getColumnWidth(i - 1);
    }
  }
  return columnStartCoordinates;
}",0.5152017689331122
66758,"void preDefineCube(Map appContext,CubeHandle handle) throws BirtException ;","void preDefineCube(DataSessionContext appContext,CubeHandle handle) throws BirtException ;",0.8848484848484849
66759,"/** 
 * @param appContext
 * @param dsource
 * @param dset
 * @param moduleHandle
 * @throws BirtException
 */
void preDefineDataSet(Map appContext,IBaseDataSourceDesign dsource,IBaseDataSetDesign dset,ModuleHandle moduleHandle) throws BirtException ;","/** 
 * @param appContext
 * @param dsource
 * @param dset
 * @param moduleHandle
 * @throws BirtException
 */
void preDefineDataSet(DataSessionContext appContext,IBaseDataSourceDesign dsource,IBaseDataSetDesign dset,ModuleHandle moduleHandle) throws BirtException ;",0.9593810444874274
66760,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  CubeHandleUtil.defineCube(dataEngine,cubeHandle,this.sessionContext.getAppContext());
  ICubeInterceptor cubeInterceptor=CubeInterceptorFinder.find(cubeHandle);
  if (cubeInterceptor != null) {
    cubeInterceptor.preDefineCube(this.sessionContext.getAppContext(),cubeHandle);
    if (this.cubeInterceptorList == null) {
      this.cubeInterceptorList=new ArrayList<ICubeInterceptor>();
    }
    this.cubeInterceptorList.add(cubeInterceptor);
  }
  if (cubeInterceptor == null || cubeInterceptor.needDefineCube()) {
    Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
    Iterator itr=involvedDataSets.iterator();
    while (itr.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)itr.next();
      BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
      BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
      if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)       this.defineDataSource(baseDataSource);
      if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
        DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
      }
    }
    if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
      this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
    }
    prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  CubeHandleUtil.defineCube(dataEngine,cubeHandle,this.sessionContext.getAppContext());
  ICubeInterceptor cubeInterceptor=CubeInterceptorFinder.find(cubeHandle);
  if (cubeInterceptor != null) {
    cubeInterceptor.preDefineCube(this.sessionContext,cubeHandle);
    if (this.cubeInterceptorList == null) {
      this.cubeInterceptorList=new ArrayList<ICubeInterceptor>();
    }
    this.cubeInterceptorList.add(cubeInterceptor);
  }
  if (cubeInterceptor == null || cubeInterceptor.needDefineCube()) {
    Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
    Iterator itr=involvedDataSets.iterator();
    while (itr.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)itr.next();
      BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
      BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
      if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)       this.defineDataSource(baseDataSource);
      if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
        DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
      }
    }
    if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
      this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
    }
    prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
  }
}",0.9946666666666668
66761,"public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(sessionContext.getAppContext(),dataEngine.getDataSourceDesign(design.getDataSourceName()),design,getDataSessionContext().getModuleHandle());
    if (this.dataSetInterceptorList == null) {
      this.dataSetInterceptorList=new ArrayList<IDataSetInterceptor>();
    }
    this.dataSetInterceptorList.add(dataSetInterceptor);
  }
  dataEngine.defineDataSet(design);
}","public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(sessionContext,dataEngine.getDataSourceDesign(design.getDataSourceName()),design,getDataSessionContext().getModuleHandle());
    if (this.dataSetInterceptorList == null) {
      this.dataSetInterceptorList=new ArrayList<IDataSetInterceptor>();
    }
    this.dataSetInterceptorList.add(dataSetInterceptor);
  }
  dataEngine.defineDataSet(design);
}",0.9863945578231292
66762,"public void setReportContent(ReportContent content){
  this.reportContent=content;
  content.setReportContext(reportContext);
}","public void setReportContent(ReportContent content){
  this.reportContent=content;
  if (contentErrors.size() > 0) {
    reportContent.getErrors().addAll(contentErrors);
    contentErrors.clear();
  }
  content.setReportContext(reportContext);
}",0.6827956989247311
66763,"public static String formatNumberPattern(String givenValue,ULocale locale){
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  if (isScientific(givenValue)) {
    givenValue=givenValue.replace(""String_Node_Str"",""String_Node_Str"");
    return givenValue;
  }
  int count=givenValue.length();
  StringBuffer returnStr=new StringBuffer();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr.append('\'');
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr.append(""String_Node_Str"").append(temp);
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr.append(""String_Node_Str"").append(temp);
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr.append(""String_Node_Str"").append(symbol).append(""String_Node_Str"");
        }
 else         if (currencySymbol.indexOf(temp) != -1) {
          returnStr.append(""String_Node_Str"").append(temp).append(""String_Node_Str"");
        }
 else {
          returnStr.append(temp);
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr.append(""String_Node_Str"");
  }
  return returnStr.toString();
}","public static String formatNumberPattern(String givenValue,ULocale locale){
  if (givenValue == null) {
    return ""String_Node_Str"";
  }
  if (givenValue.length() == 1) {
    char ch=givenValue.charAt(0);
    if (ch == 'G' || ch == 'g' || ch == 'd' || ch == 'D') {
      return ""String_Node_Str"";
    }
    if (ch == 'C' || ch == 'c') {
      return getCurrencySymbol(locale) + ""String_Node_Str"";
    }
    if (ch == 'f' || ch == 'F') {
      return ""String_Node_Str"";
    }
    if (ch == 'N' || ch == 'n') {
      return ""String_Node_Str"";
    }
    if (ch == 'p' || ch == 'P') {
      return ""String_Node_Str"";
    }
    if (ch == 'e' || ch == 'E') {
      return ""String_Node_Str"";
    }
    if (ch == 'x' || ch == 'X') {
      return ""String_Node_Str"";
    }
  }
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (givenValue.equals(""String_Node_Str""))   return ""String_Node_Str"";
  if (validType(givenValue)) {
    return givenValue;
  }
  if (isScientific(givenValue)) {
    givenValue=givenValue.replace(""String_Node_Str"",""String_Node_Str"");
    return givenValue;
  }
  int count=givenValue.length();
  StringBuffer returnStr=new StringBuffer();
  boolean flag=false;
  for (int num=0; num < count; num++) {
    char temp=givenValue.charAt(num);
    if (temp == '\'') {
      if (flag) {
        flag=false;
      }
 else {
        char nextChar=givenValue.charAt(num + 1);
        if (nextChar == '\'') {
          returnStr.append('\'');
          num++;
          flag=false;
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (flag) {
        returnStr.append(""String_Node_Str"").append(temp);
      }
 else {
        if (specialStr.indexOf(temp) != -1) {
          returnStr.append(""String_Node_Str"").append(temp);
        }
 else         if (temp == '¤') {
          String symbol=getCurrencySymbol(locale);
          returnStr.append(symbol);
        }
 else         if (currencySymbol.indexOf(temp) != -1) {
          returnStr.append(temp);
        }
 else {
          returnStr.append(temp);
        }
      }
    }
  }
  if (returnStr.indexOf(""String_Node_Str"") == -1 && returnStr.indexOf(""String_Node_Str"") == -1) {
    returnStr.append(""String_Node_Str"");
  }
  return returnStr.toString();
}",0.9794952681388012
66764,"/** 
 * The alias name is unique or not
 * @param newValue
 * @return
 */
protected boolean isUnique(String newValue){
  DataSetViewData[] items=null;
  if (viewer == null || viewer.getViewer() == null) {
    items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true,true);
  }
 else {
    items=(DataSetViewData[])viewer.getViewer().getInput();
  }
  for (int i=0; i < items.length; i++) {
    if ((items[i].getAlias() != null && items[i].getAlias().equals(newValue)) || (items[i].getName() != null && items[i].getName().equals(newValue))) {
      return false;
    }
  }
  return true;
}","/** 
 * The alias name is unique or not
 * @param newValue
 * @return
 */
protected boolean isUnique(String newValue,DataSetViewData currentItem){
  DataSetViewData[] items=null;
  if (viewer == null || viewer.getViewer() == null) {
    items=DataSetProvider.getCurrentInstance().getColumns(((DataSetEditor)getContainer()).getHandle(),false,true,true);
  }
 else {
    items=(DataSetViewData[])viewer.getViewer().getInput();
  }
  for (int i=0; i < items.length; i++) {
    if (items[i].getName() != null && items[i].getName().equals(currentItem.getName())) {
      continue;
    }
    if ((items[i].getAlias() != null && items[i].getAlias().equals(newValue)) || (items[i].getName() != null && items[i].getName().equals(newValue))) {
      return false;
    }
  }
  return true;
}",0.8929577464788733
66765,"private void createTextCell(Composite parent,final int index) throws IllegalArgumentException, IntrospectionException, IllegalAccessException, InvocationTargetException {
  final Text tx=ControlProvider.createText(parent,(String)Utility.getProperty(data,cellProperties[index]));
  tx.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  if (index < 2) {
    tx.setEditable(false);
  }
 else {
    tx.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        try {
          if (index == 2) {
            boolean isUniqueName=isUnique(tx.getText());
            if (!isUniqueName)             updateStatus(getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"")));
 else             updateStatus(getOKStatus());
          }
          Object txText=tx.getText();
          if (tx.getText().trim().length() == 0)           txText=null;
          Utility.setProperty(data,cellProperties[index],txText);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
);
  }
  if (index == 2) {
    tx.setFocus();
  }
}","private void createTextCell(Composite parent,final int index) throws IllegalArgumentException, IntrospectionException, IllegalAccessException, InvocationTargetException {
  final Text tx=ControlProvider.createText(parent,(String)Utility.getProperty(data,cellProperties[index]));
  tx.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  if (index < 2) {
    tx.setEditable(false);
  }
 else {
    tx.addModifyListener(new ModifyListener(){
      public void modifyText(      ModifyEvent e){
        try {
          if (index == 2) {
            boolean isUniqueName=isUnique(tx.getText(),data);
            if (!isUniqueName)             updateStatus(getMiscStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"")));
 else             updateStatus(getOKStatus());
          }
          Object txText=tx.getText();
          if (tx.getText().trim().length() == 0)           txText=null;
          Utility.setProperty(data,cellProperties[index],txText);
        }
 catch (        Exception e1) {
          ExceptionHandler.handle(e1);
        }
      }
    }
);
  }
  if (index == 2) {
    tx.setFocus();
  }
}",0.9977548271216884
66766,"private void processTextStyle(StringBuffer buffer,IStyle style){
  outputStyleInQuote(style.getFontFamily(),style.getFontWeight(),style.getFontStyle(),buffer);
  String underLine=style.getTextUnderline();
  if (underLine != null && underLine.equalsIgnoreCase(""String_Node_Str"")) {
    buffer.append(""String_Node_Str"");
  }
  String lineTrough=style.getTextLineThrough();
  if (lineTrough != null && ""String_Node_Str"".equalsIgnoreCase(lineTrough)) {
    buffer.append(""String_Node_Str"");
  }
  if (style.getProperty(IStyle.STYLE_FONT_SIZE) != null) {
    buffer.append(""String_Node_Str"" + StyleBuilder.convertFontSize(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  }
}","private void processTextStyle(StringBuffer buffer,IStyle style){
  outputStyleInQuote(style.getFontFamily(),style.getFontWeight(),style.getFontStyle(),buffer);
  String underLine=style.getTextUnderline();
  if (underLine != null && underLine.equalsIgnoreCase(""String_Node_Str"")) {
    buffer.append(""String_Node_Str"");
  }
  String lineTrough=style.getTextLineThrough();
  if (lineTrough != null && ""String_Node_Str"".equalsIgnoreCase(lineTrough)) {
    buffer.append(""String_Node_Str"");
  }
  if (style.getProperty(IStyle.STYLE_FONT_SIZE) != null) {
    buffer.append(""String_Node_Str"" + StyleBuilder.convertFontSize(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  }
  String color=style.getColor();
  if (color != null) {
    int value=ColorUtil.parseColor(color);
    if (value >= 0) {
      buffer.append(""String_Node_Str"");
      buffer.append(Integer.toHexString(value));
    }
  }
}",0.8584298584298584
66767,"private boolean canSpan(SheetData data,XlsContainer rowContainer,int currentColumn,int lastColumn){
  SheetData realData=ExcelUtil.getRealData(data);
  if (realData == null)   return false;
  if (!isInContainer(realData,rowContainer) && realData.getRowSpanInDesign() <= 0) {
    return false;
  }
  for (int i=currentColumn + 1; i < lastColumn; i++) {
    SheetData lastData=getColumnLastData(i);
    SheetData lastRealData=ExcelUtil.getRealData(lastData);
    if (lastRealData == null || lastRealData.getRowIndex() <= realData.getRowIndex()) {
      continue;
    }
    if (realData.getStartX() > lastRealData.getStartX()) {
      return false;
    }
  }
  return true;
}","private boolean canSpan(SheetData data,XlsContainer rowContainer,int currentColumn,int lastColumn){
  SheetData realData=ExcelUtil.getRealData(data);
  if (realData == null)   return false;
  if (!isInContainer(realData,rowContainer) && realData.getRowSpanInDesign() <= 0) {
    return false;
  }
  for (int i=currentColumn + 1; i < lastColumn; i++) {
    SheetData lastData=getColumnLastData(i);
    SheetData lastRealData=ExcelUtil.getRealData(lastData);
    if (lastRealData == null || lastRealData.getRowIndex() <= realData.getRowIndex()) {
      continue;
    }
    if (realData.getEndX() > lastRealData.getStartX()) {
      return false;
    }
  }
  return true;
}",0.9612518628912072
66768,"public CellArea deepClone(){
  CellArea cell=(CellArea)super.deepClone();
  cell.setRowSpan(rowSpan - usedRowSpan);
  cell.setColSpan(colSpan);
  cell.setBoxStyle(new BoxStyle(cell.getBoxStyle()));
  if (getRowSpan() > 1) {
    cell.setHeight(currentBP + getOffsetY() + localProperties.getPaddingBottom());
  }
  return cell;
}","public CellArea deepClone(){
  CellArea cell=(CellArea)super.deepClone();
  cell.setRowSpan(rowSpan);
  cell.setColSpan(colSpan);
  cell.setBoxStyle(new BoxStyle(cell.getBoxStyle()));
  if (getRowSpan() > 1) {
    cell.setHeight(currentBP + getOffsetY() + localProperties.getPaddingBottom());
  }
  return cell;
}",0.978125
66769,"public void relayoutChildren() throws BirtException {
  layout.clear();
  addRows(this,layout);
}","public void relayoutChildren() throws BirtException {
  String nextRowId=null;
  if (layout.unresolvedRow != null) {
    nextRowId=this.getNextRowId(layout.unresolvedRow);
  }
  layout.clear();
  addRows(this,layout,nextRowId);
  layout.mergeUnresolvedRowHint();
}",0.5373961218836565
66770,"protected void addRows(ContainerArea container,TableLayout layout) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      layout.addRow(row,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout);
      child.updateChildrenPosition();
    }
    container.updateChildrenPosition();
  }
}","protected void addRows(ContainerArea container,TableLayout layout,String rowId) throws BirtException {
  if (container instanceof RowArea) {
    RowArea row=(RowArea)container;
    InstanceID id=row.getContent().getInstanceID();
    if (rowId != null && id != null && rowId.equals(id.toUniqueString())) {
      layout.mergeUnresolvedRowHint();
    }
    if (row.needResolveBorder) {
      int size=row.getChildrenCount();
      for (int i=0; i < size; i++) {
        CellArea cell=(CellArea)row.getChild(i);
        int ch=cell.getContentHeight();
        cell.boxStyle.clearBorder();
        layout.resolveBorderConflict(cell,true);
        cell.setContentHeight(ch);
      }
      row.needResolveBorder=false;
    }
    if (row.finished) {
      if (row.getChildrenCount() != row.cells.length) {
        for (int i=0; i < row.cells.length; i++) {
          if (row.cells[i] instanceof DummyCell) {
            row.cells[i]=null;
          }
        }
      }
      layout.addRow(row,context.isFixedLayout());
    }
  }
 else {
    int size=container.getChildrenCount();
    for (int i=0; i < size; i++) {
      ContainerArea child=(ContainerArea)container.getChild(i);
      addRows(child,layout,rowId);
      child.updateChildrenPosition();
    }
    container.updateChildrenPosition();
  }
}",0.9199332777314428
66771,"private UnresolvedRowHint convertRowToHint(RowArea row){
  IRowContent rowContent=(IRowContent)row.getContent();
  ITableContent table=rowContent.getTable();
  InstanceID tableId=table.getInstanceID();
  InstanceID rowId=rowContent.getInstanceID();
  UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
  if (row.cells != null) {
    for (int i=0; i < row.cells.length; i++) {
      AbstractArea area=(AbstractArea)row.cells[i];
      String style=null;
      if (area instanceof DummyCell) {
        CellArea cell=((DummyCell)area).getCell();
        ICellContent cellContent=(ICellContent)cell.getContent();
        if (cellContent != null) {
          style=cellContent.getStyle().getCssText();
        }
        hint.addUnresolvedCell(style,cell.columnID,((DummyCell)area).colSpan,((DummyCell)area).rowSpan);
      }
 else       if (area instanceof CellArea) {
        CellArea cell=(CellArea)area;
        ICellContent cellContent=(ICellContent)cell.getContent();
        if (cellContent != null) {
          style=cellContent.getStyle().getCssText();
        }
        hint.addUnresolvedCell(style,cell.columnID,cell.colSpan,cell.rowSpan);
      }
    }
  }
  return hint;
}","private UnresolvedRowHint convertRowToHint(RowArea row){
  IRowContent rowContent=(IRowContent)row.getContent();
  ITableContent table=rowContent.getTable();
  InstanceID tableId=table.getInstanceID();
  InstanceID rowId=rowContent.getInstanceID();
  UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
  if (row.cells != null) {
    for (int i=0; i < row.cells.length; i++) {
      AbstractArea area=(AbstractArea)row.cells[i];
      String style=null;
      if (area instanceof DummyCell) {
        CellArea cell=((DummyCell)area).getCell();
        ICellContent cellContent=(ICellContent)cell.getContent();
        if (cellContent != null) {
          style=cellContent.getStyle().getCssText();
        }
        hint.addUnresolvedCell(style,cell.columnID,((DummyCell)area).colSpan,((DummyCell)area).rowSpan);
      }
 else       if (area instanceof CellArea) {
        CellArea cell=(CellArea)area;
        ICellContent cellContent=(ICellContent)cell.getContent();
        if (cellContent != null) {
          style=cellContent.getStyle().getCssText();
        }
        hint.addUnresolvedCell(style,cellContent.getColumn(),cellContent.getColSpan(),cellContent.getRowSpan());
      }
    }
  }
  return hint;
}",0.9798387096774194
66772,"public Object[] getElements(Object inputElement){
  ArrayList elementsList=new ArrayList(inputParameterGroup.getParameters().getContents());
  for (Iterator iter=elementsList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle handle=(ScalarParameterHandle)iter.next();
    String[] columns=getDataSetColumns(handle,false);
    boolean found=false;
    for (int i=0; i < columns.length; i++) {
      if (DEUtil.getColumnExpression(columns[i]).equals(handle.getValueExpr())) {
        found=true;
        break;
      }
    }
    if (!found) {
      try {
        handle.setValueExpr(null);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
  return elementsList.toArray();
}","public Object[] getElements(Object inputElement){
  ArrayList elementsList=new ArrayList(inputParameterGroup.getParameters().getContents());
  for (Iterator iter=elementsList.iterator(); iter.hasNext(); ) {
    ScalarParameterHandle handle=(ScalarParameterHandle)iter.next();
    String[] columns=getDataSetColumns(handle,false);
    boolean found=false;
    for (int i=0; i < columns.length; i++) {
      if (DEUtil.getColumnExpression(columns[i]).equals(handle.getValueExpr()) || DEUtil.getResultSetColumnExpression(columns[i]).equals(handle.getValueExpr())) {
        found=true;
        break;
      }
    }
    if (!found) {
      try {
        handle.setValueExpr(null);
      }
 catch (      SemanticException e) {
        ExceptionHandler.handle(e);
      }
    }
  }
  return elementsList.toArray();
}",0.9473684210526316
66773,"/** 
 * The constructor.
 * @param _cwa
 * @param _render
 * @param _lia
 * @param _faX
 * @param _faY
 * @param _bShowAsTape
 */
public CurveRenderer(ChartWithAxes _cwa,BaseRenderer _render,LineAttributes _lia,Location[] _lo,double _zeroLocation,boolean _bShowAsTape,double _tapeWidth,boolean _bFillArea,boolean _bTranslucent,boolean _bUseLastState,boolean _bDeferred,boolean _bKeepState,Fill paletteEntry,boolean usePaletteLineColor,boolean connectMissingValue){
  cwa=_cwa;
  bRendering3D=_lo instanceof Location3D[];
  loPoints=_lo;
  tempPoints=_lo;
  bConnectMissingValue=connectMissingValue;
  bFillArea=_bFillArea;
  bShowAsTape=_bShowAsTape;
  bDeferred=_bDeferred;
  loa=(bShowAsTape || bFillArea) ? new Location[4] : null;
  loa3d=(bRendering3D) ? new Location3D[4] : null;
  if (_tapeWidth == -1) {
    dTapeWidth=_cwa.getSeriesThickness() * _render.getDeviceScale();
  }
 else {
    dTapeWidth=_tapeWidth;
  }
  if (loa != null) {
    for (int i=0; i < 4; i++) {
      loa[i]=goFactory.createLocation(0,0);
    }
  }
  if (loa3d != null) {
    for (int i=0; i < 4; i++) {
      loa3d[i]=goFactory.createLocation3D(0,0,0);
    }
  }
  lia=_lia;
  zeroLocation=_zeroLocation;
  bTranslucent=_bTranslucent;
  oSource=StructureSource.createSeries(_render.getSeries());
  dc=_render.getDeferredCache();
  dc.setPlaneShadowsComparator(WrappedInstruction.getDefaultComarator());
  dc.setPlanesComparator(WrappedInstruction.getDefaultComarator());
  this.iRender=_render;
  loStart=goFactory.createLocation(0,0);
  loEnd=goFactory.createLocation(0,0);
  bUseLastState=_bUseLastState;
  bKeepState=_bKeepState;
  if (usePaletteLineColor) {
    lia=goFactory.copyOf(lia);
    lia.setColor(FillUtil.getColor(paletteEntry));
  }
  if (bFillArea) {
    fillColor=FillUtil.getColor(paletteEntry);
    tapeColor=fillColor.brighter();
    sideColor=fillColor.darker();
  }
 else {
    fillColor=lia.getColor();
    tapeColor=lia.getColor().brighter();
    sideColor=lia.getColor().darker();
  }
  if (bTranslucent) {
    fillColor=fillColor.translucent();
    tapeColor=tapeColor.translucent();
    sideColor=sideColor.translucent();
  }
}","/** 
 * The constructor.
 * @param _cwa
 * @param _render
 * @param _lia
 * @param _faX
 * @param _faY
 * @param _bShowAsTape
 */
public CurveRenderer(ChartWithAxes _cwa,BaseRenderer _render,LineAttributes _lia,Location[] _lo,double _zeroLocation,boolean _bShowAsTape,double _tapeWidth,boolean _bFillArea,boolean _bTranslucent,boolean _bUseLastState,boolean _bDeferred,boolean _bKeepState,Fill paletteEntry,boolean usePaletteLineColor,boolean connectMissingValue){
  cwa=_cwa;
  bRendering3D=_lo instanceof Location3D[];
  loPoints=_lo;
  tempPoints=_lo;
  bConnectMissingValue=connectMissingValue;
  bFillArea=_bFillArea;
  bShowAsTape=_bShowAsTape;
  bDeferred=_bDeferred;
  loa=(bShowAsTape || bFillArea) ? new Location[4] : null;
  loa3d=(bRendering3D) ? new Location3D[4] : null;
  if (_tapeWidth == -1) {
    dTapeWidth=_cwa.getSeriesThickness() * _render.getDeviceScale();
  }
 else {
    dTapeWidth=_tapeWidth;
  }
  if (loa != null) {
    for (int i=0; i < 4; i++) {
      loa[i]=goFactory.createLocation(0,0);
    }
  }
  if (loa3d != null) {
    for (int i=0; i < 4; i++) {
      loa3d[i]=goFactory.createLocation3D(0,0,0);
    }
  }
  lia=_lia;
  zeroLocation=_zeroLocation;
  bTranslucent=_bTranslucent;
  oSource=StructureSource.createSeries(_render.getSeries());
  dc=_render.getDeferredCache();
  if (bShowAsTape) {
    dc.setPlanesComparator(WrappedInstruction.getDefaultComarator());
  }
  this.iRender=_render;
  loStart=goFactory.createLocation(0,0);
  loEnd=goFactory.createLocation(0,0);
  bUseLastState=_bUseLastState;
  bKeepState=_bKeepState;
  if (usePaletteLineColor) {
    lia=goFactory.copyOf(lia);
    lia.setColor(FillUtil.getColor(paletteEntry));
  }
  if (bFillArea) {
    fillColor=FillUtil.getColor(paletteEntry);
    tapeColor=fillColor.brighter();
    sideColor=fillColor.darker();
  }
 else {
    fillColor=lia.getColor();
    tapeColor=lia.getColor().brighter();
    sideColor=lia.getColor().darker();
  }
  if (bTranslucent) {
    fillColor=fillColor.translucent();
    tapeColor=tapeColor.translucent();
    sideColor=sideColor.translucent();
  }
}",0.9742011834319526
66774,"public void testNullKeyValue() throws IOException {
  RAMBTreeFile file=new RAMBTreeFile();
  BTreeOption<Integer,String> option=new BTreeOption<Integer,String>();
  option.setHasValue(true);
  option.setKeySize(4);
  option.setKeySerializer(new IntegerSerializer());
  option.setFile(file);
  option.setAllowNullKey(true);
  BTree<Integer,String> btree=new BTree<Integer,String>(option);
  for (int i=0; i < 10000; i++) {
    if (!btree.exist(Integer.valueOf(i))) {
      btree.insert(Integer.valueOf(i),(String)null);
    }
  }
  btree.insert(null,""String_Node_Str"");
  assertEquals(10001,btree.getTotalKeys());
  assertEquals(10001,btree.getTotalValues());
  btree.close();
}","public void testNullKeyValue() throws IOException {
  RAMBTreeFile file=new RAMBTreeFile();
  BTreeOption<Integer,String> option=new BTreeOption<Integer,String>();
  option.setHasValue(true);
  option.setKeySerializer(new IntegerSerializer());
  option.setFile(file);
  option.setAllowNullKey(true);
  BTree<Integer,String> btree=new BTree<Integer,String>(option);
  for (int i=0; i < 10000; i++) {
    if (!btree.exist(Integer.valueOf(i))) {
      btree.insert(Integer.valueOf(i),(String)null);
    }
  }
  btree.insert(null,""String_Node_Str"");
  assertEquals(10001,btree.getTotalKeys());
  assertEquals(10001,btree.getTotalValues());
  btree.close();
}",0.981981981981982
66775,"int getKeySize(BTreeValue<K> key){
  if (keySize == 0) {
    return 4 + key.getBytes().length;
  }
  return keySize;
}","int getKeySize(BTreeValue<K> key){
  if (allowNullKey) {
    if (key == NULL_KEY) {
      return 1;
    }
    if (keySize == 0) {
      return 5 + key.getBytes().length;
    }
    return keySize + 1;
  }
  if (keySize == 0) {
    return 4 + key.getBytes().length;
  }
  return keySize;
}",0.582716049382716
66776,"private void setAxisDeleteEnabled(){
  if (btnAxisDelete != null) {
    btnAxisDelete.setEnabled(ChartUIUtil.getOrthogonalAxisNumber(getChart()) > 1);
  }
}","private void setAxisDeleteEnabled(){
  if (btnAxisDelete != null) {
    btnAxisDelete.setEnabled(ChartUIUtil.getOrthogonalAxisNumber(getChart()) > 1 && cmbAxisSelect.getSelectionIndex() > 0);
  }
}",0.8838526912181303
66777,"public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btnSeriesDelete)) {
    updateColorRegistry(cmbSeriesSelect.getSelectionIndex());
    removeSeriesDefinition();
    setSeriesDeleteEnabled();
    int oldSelectedIndex=cmbSeriesSelect.getSelectionIndex();
    refreshSeriesCombo();
    if (oldSelectedIndex > cmbSeriesSelect.getItemCount() - 2) {
      oldSelectedIndex=cmbSeriesSelect.getItemCount() - 2;
    }
    cmbSeriesSelect.select(oldSelectedIndex);
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbSeriesSelect)) {
    if (cmbSeriesSelect.getSelectionIndex() == cmbSeriesSelect.getItemCount() - 1 && !isPartChart()) {
      addNewSeriesDefinition();
      setSeriesDeleteEnabled();
      refreshSeriesCombo();
      cmbSeriesSelect.select(cmbSeriesSelect.getItemCount() - 2);
    }
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbAxisSelect)) {
    if (cmbAxisSelect.getSelectionIndex() == cmbAxisSelect.getItemCount() - 1) {
      String currentDimension=ChartUIUtil.getDimensionString(getChart().getDimension());
      boolean isDimensionSupported=wizardContext.getChartType().isDimensionSupported(currentDimension,wizardContext,cmbAxisSelect.getItemCount(),0);
      if (!isDimensionSupported) {
        ChartAdapter.beginIgnoreNotifications();
        getChart().setDimension(ChartUIUtil.getDimensionType(wizardContext.getChartType().getDefaultDimension()));
        ChartAdapter.endIgnoreNotifications();
      }
      ChartUIUtil.addAxis((ChartWithAxes)getChart());
      setAxisDeleteEnabled();
      refreshAxisCombo();
      cmbAxisSelect.select(cmbAxisSelect.getItemCount() - 2);
    }
    axisIndex=cmbAxisSelect.getSelectionIndex();
    updateAllSeriesUnderAxis();
  }
 else   if (e.widget.equals(btnAxisDelete)) {
    updateColorRegistry(-1);
    ChartUIUtil.removeAxis(getChart(),axisIndex);
    setAxisDeleteEnabled();
    refreshAxisCombo();
    if (axisIndex > cmbAxisSelect.getItemCount() - 2) {
      axisIndex=cmbAxisSelect.getItemCount() - 2;
    }
    cmbAxisSelect.select(axisIndex);
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    updateAllSeriesUnderAxis();
  }
  ChartUIUtil.checkAggregateType(wizardContext);
}","public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btnSeriesDelete)) {
    updateColorRegistry(cmbSeriesSelect.getSelectionIndex());
    removeSeriesDefinition();
    int oldSelectedIndex=cmbSeriesSelect.getSelectionIndex();
    refreshSeriesCombo();
    if (oldSelectedIndex > cmbSeriesSelect.getItemCount() - 2) {
      oldSelectedIndex=cmbSeriesSelect.getItemCount() - 2;
    }
    cmbSeriesSelect.select(oldSelectedIndex);
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbSeriesSelect)) {
    if (cmbSeriesSelect.getSelectionIndex() == cmbSeriesSelect.getItemCount() - 1 && !isPartChart()) {
      addNewSeriesDefinition();
      refreshSeriesCombo();
      cmbSeriesSelect.select(cmbSeriesSelect.getItemCount() - 2);
    }
    updateDataDefinition();
    refreshQuery();
    setSelectedSeriesIndex();
    selectDataUI.layoutAll();
  }
 else   if (e.widget.equals(cmbAxisSelect)) {
    if (cmbAxisSelect.getSelectionIndex() == cmbAxisSelect.getItemCount() - 1) {
      String currentDimension=ChartUIUtil.getDimensionString(getChart().getDimension());
      boolean isDimensionSupported=wizardContext.getChartType().isDimensionSupported(currentDimension,wizardContext,cmbAxisSelect.getItemCount(),0);
      if (!isDimensionSupported) {
        ChartAdapter.beginIgnoreNotifications();
        getChart().setDimension(ChartUIUtil.getDimensionType(wizardContext.getChartType().getDefaultDimension()));
        ChartAdapter.endIgnoreNotifications();
      }
      ChartUIUtil.addAxis((ChartWithAxes)getChart());
      refreshAxisCombo();
      cmbAxisSelect.select(cmbAxisSelect.getItemCount() - 2);
    }
    axisIndex=cmbAxisSelect.getSelectionIndex();
    updateAllSeriesUnderAxis();
  }
 else   if (e.widget.equals(btnAxisDelete)) {
    updateColorRegistry(-1);
    ChartUIUtil.removeAxis(getChart(),axisIndex);
    refreshAxisCombo();
    if (axisIndex > cmbAxisSelect.getItemCount() - 2) {
      axisIndex=cmbAxisSelect.getItemCount() - 2;
    }
    cmbAxisSelect.select(axisIndex);
    ChartUIUtil.setSeriesName(wizardContext.getModel());
    updateAllSeriesUnderAxis();
  }
  setAxisDeleteEnabled();
  setSeriesDeleteEnabled();
  ChartUIUtil.checkAggregateType(wizardContext);
}",0.8651591289782244
66778,"private void setSeriesDeleteEnabled(){
  if (btnSeriesDelete != null) {
    btnSeriesDelete.setEnabled(seriesDefns.size() > 1);
  }
}","private void setSeriesDeleteEnabled(){
  if (btnSeriesDelete != null) {
    btnSeriesDelete.setEnabled(seriesDefns.size() > 1 && cmbSeriesSelect.getSelectionIndex() > 0);
  }
}",0.86084142394822
66779,"public void actionPerformed(ActionEvent e){
  int i=jcbModels.getSelectedIndex();
  cm=PrimitiveCharts.createChart(i);
  if (cm instanceof ChartWithAxes) {
    boolean bStockChart=i == 7;
    boolean bBubbleChart=i == 10;
    jcbTransposed.setEnabled(!bStockChart);
    if (bStockChart) {
      jcbTransposed.setSelected(false);
    }
    jcbLogarithmic.setEnabled(!bBubbleChart);
    if (bBubbleChart) {
      jcbLogarithmic.setSelected(false);
    }
    jcbPercent.setEnabled(true);
    ChartWithAxes cwa=((ChartWithAxes)cm);
    cwa.setTransposed(jcbTransposed.isSelected());
    Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
    if (jcbLogarithmic.isSelected()) {
      if (ax.getType() == AxisType.LINEAR_LITERAL) {
        ax.setType(AxisType.LOGARITHMIC_LITERAL);
      }
    }
 else {
      if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
        ax.setType(AxisType.LINEAR_LITERAL);
      }
    }
    if (jcbPercent.isSelected() == true) {
      ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
    }
 else {
      ax.setFormatSpecifier(null);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    jcbTransposed.setEnabled(false);
    jcbLogarithmic.setEnabled(false);
    jcbPercent.setEnabled(false);
  }
  if (jcbModels.getSelectedIndex() == 7 || jcbModels.getSelectedIndex() == 6 || jcbModels.getSelectedIndex() == 9) {
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
 else {
switch (jcbDimensions.getSelectedIndex()) {
case 0:
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    break;
case 1:
  cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
break;
}
}
bNeedsGeneration=true;
scv.repaint();
}","public void actionPerformed(ActionEvent e){
  int i=jcbModels.getSelectedIndex();
  cm=PrimitiveCharts.createChart(i);
  if (cm instanceof ChartWithAxes) {
    jcbPercent.setEnabled(true);
    ChartWithAxes cwa=((ChartWithAxes)cm);
    cwa.setTransposed(jcbTransposed.isSelected());
    Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
    if (jcbLogarithmic.isSelected()) {
      if (ax.getType() == AxisType.LINEAR_LITERAL) {
        ax.setType(AxisType.LOGARITHMIC_LITERAL);
      }
    }
 else {
      if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
        ax.setType(AxisType.LINEAR_LITERAL);
      }
    }
    if (jcbPercent.isSelected() == true) {
      ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
    }
 else {
      ax.setFormatSpecifier(null);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    jcbTransposed.setEnabled(false);
    jcbLogarithmic.setEnabled(false);
    jcbPercent.setEnabled(false);
  }
  if (jcbModels.getSelectedIndex() == 7 || jcbModels.getSelectedIndex() == 6 || jcbModels.getSelectedIndex() == 9) {
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
 else {
switch (jcbDimensions.getSelectedIndex()) {
case 0:
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    break;
case 1:
  cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
break;
}
}
bNeedsGeneration=true;
scv.repaint();
}",0.9059720457433292
66780,"ControlPanel(SwingChartViewerSelector scv){
  this.scv=scv;
  setLayout(new GridLayout(0,1,0,0));
  JPanel jp1=new JPanel();
  jp1.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));
  jp1.add(new JLabel(""String_Node_Str""));
  jcbModels=new JComboBox();
  String[] models=PrimitiveCharts.getAvailableModelList();
  for (int i=0; i < models.length; i++) {
    jcbModels.addItem(models[i]);
  }
  jcbModels.setSelectedIndex(0);
  jp1.add(jcbModels);
  jcbDimensions=new JComboBox();
  jcbDimensions.addItem(""String_Node_Str"");
  jcbDimensions.addItem(""String_Node_Str"");
  jp1.add(jcbDimensions);
  jcbTransposed=new JCheckBox(""String_Node_Str"",false);
  jp1.add(jcbTransposed);
  jcbPercent=new JCheckBox(""String_Node_Str"",false);
  jp1.add(jcbPercent);
  jcbLogarithmic=new JCheckBox(""String_Node_Str"",false);
  jp1.add(jcbLogarithmic);
  jbUpdate=new JButton(""String_Node_Str"");
  jbUpdate.addActionListener(this);
  jp1.add(jbUpdate);
  add(jp1);
}","ControlPanel(SwingChartViewerSelector scv){
  this.scv=scv;
  setLayout(new GridLayout(0,1,0,0));
  JPanel jp1=new JPanel();
  jp1.setLayout(new FlowLayout(FlowLayout.LEFT,5,5));
  jp1.add(new JLabel(""String_Node_Str""));
  jcbModels=new JComboBox();
  String[] models=PrimitiveCharts.getAvailableModelList();
  for (int i=0; i < models.length; i++) {
    jcbModels.addItem(models[i]);
  }
  jcbModels.setSelectedIndex(0);
  jp1.add(jcbModels);
  jcbModels.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      int index=jcbModels.getSelectedIndex();
      if (index == 7) {
        jcbTransposed.setSelected(false);
        jcbTransposed.setEnabled(false);
        jcbLogarithmic.setEnabled(true);
      }
 else       if (index == 10) {
        jcbTransposed.setEnabled(true);
        jcbLogarithmic.setSelected(false);
        jcbLogarithmic.setEnabled(false);
      }
 else {
        jcbTransposed.setEnabled(true);
        jcbLogarithmic.setEnabled(true);
      }
    }
  }
);
  jcbDimensions=new JComboBox();
  jcbDimensions.addItem(""String_Node_Str"");
  jcbDimensions.addItem(""String_Node_Str"");
  jp1.add(jcbDimensions);
  jcbTransposed=new JCheckBox(""String_Node_Str"",false);
  jp1.add(jcbTransposed);
  jcbPercent=new JCheckBox(""String_Node_Str"",false);
  jp1.add(jcbPercent);
  jcbLogarithmic=new JCheckBox(""String_Node_Str"",false);
  jp1.add(jcbLogarithmic);
  jbUpdate=new JButton(""String_Node_Str"");
  jbUpdate.addActionListener(this);
  jp1.add(jbUpdate);
  add(jp1);
}",0.7653721682847896
66781,"public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btn)) {
    int iSelection=cbType.getSelectionIndex();
    cm=PrimitiveCharts.createChart(iSelection);
    if (cm instanceof ChartWithAxes) {
      cbTransposed.setEnabled(true);
      cbLogarithmic.setEnabled(true);
      cbPercent.setEnabled(true);
      ChartWithAxes cwa=((ChartWithAxes)cm);
      cwa.setTransposed(cbTransposed.getSelection());
      Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
      if (cbLogarithmic.getSelection()) {
        if (ax.getType() == AxisType.LINEAR_LITERAL) {
          ax.setType(AxisType.LOGARITHMIC_LITERAL);
        }
      }
 else {
        if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
          ax.setType(AxisType.LINEAR_LITERAL);
        }
      }
      if (cbPercent.getSelection() == true) {
        ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
      }
 else {
        ax.setFormatSpecifier(null);
      }
    }
 else     if (cm instanceof ChartWithoutAxes) {
      cbTransposed.setEnabled(false);
      cbLogarithmic.setEnabled(false);
      cbPercent.setEnabled(false);
    }
    if (cbType.getSelectionIndex() == 7 || cbType.getSelectionIndex() == 6 || cbType.getSelectionIndex() == 9) {
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    }
 else {
switch (cbDimension.getSelectionIndex()) {
case 0:
        cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
      break;
case 1:
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
  break;
}
}
bNeedsGeneration=true;
this.redraw();
}
}","public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btn)) {
    int iSelection=cbType.getSelectionIndex();
    cm=PrimitiveCharts.createChart(iSelection);
    if (cm instanceof ChartWithAxes) {
      cbPercent.setEnabled(true);
      ChartWithAxes cwa=((ChartWithAxes)cm);
      cwa.setTransposed(cbTransposed.getSelection());
      Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
      if (cbLogarithmic.getSelection()) {
        if (ax.getType() == AxisType.LINEAR_LITERAL) {
          ax.setType(AxisType.LOGARITHMIC_LITERAL);
        }
      }
 else {
        if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
          ax.setType(AxisType.LINEAR_LITERAL);
        }
      }
      if (cbPercent.getSelection() == true) {
        ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
      }
 else {
        ax.setFormatSpecifier(null);
      }
    }
 else     if (cm instanceof ChartWithoutAxes) {
      cbTransposed.setEnabled(false);
      cbLogarithmic.setEnabled(false);
      cbPercent.setEnabled(false);
    }
    if (cbType.getSelectionIndex() == 7 || cbType.getSelectionIndex() == 6 || cbType.getSelectionIndex() == 9) {
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    }
 else {
switch (cbDimension.getSelectionIndex()) {
case 0:
        cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
      break;
case 1:
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
  break;
}
}
bNeedsGeneration=true;
this.redraw();
}
}",0.9761677788369876
66782,"/** 
 * main() method for constructing the selector layout.
 * @param args
 */
public static void main(String[] args){
  Display display=Display.getDefault();
  Shell shell=new Shell(display);
  shell.setSize(800,600);
  shell.setLayout(new GridLayout());
  SwtChartViewerSelector scv=new SwtChartViewerSelector(shell,SWT.NO_BACKGROUND);
  scv.setLayoutData(new GridData(GridData.FILL_BOTH));
  scv.addPaintListener(scv);
  Composite cBottom=new Composite(shell,SWT.NONE);
  cBottom.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cBottom.setLayout(new RowLayout());
  Label la=new Label(cBottom,SWT.NONE);
  la.setText(""String_Node_Str"");
  cbType=new Combo(cBottom,SWT.DROP_DOWN | SWT.READ_ONLY);
  String[] models=PrimitiveCharts.getAvailableModelList();
  for (int i=0; i < models.length; i++) {
    cbType.add(models[i]);
  }
  cbType.select(0);
  cbDimension=new Combo(cBottom,SWT.DROP_DOWN | SWT.READ_ONLY);
  cbDimension.add(""String_Node_Str"");
  cbDimension.add(""String_Node_Str"");
  cbDimension.select(0);
  cbTransposed=new Button(cBottom,SWT.CHECK);
  cbTransposed.setText(""String_Node_Str"");
  cbPercent=new Button(cBottom,SWT.CHECK);
  cbPercent.setText(""String_Node_Str"");
  cbLogarithmic=new Button(cBottom,SWT.CHECK);
  cbLogarithmic.setText(""String_Node_Str"");
  btn=new Button(cBottom,SWT.NONE);
  btn.setText(""String_Node_Str"");
  btn.addSelectionListener(scv);
  shell.setText(scv.getClass().getName() + ""String_Node_Str"" + scv.idr.getClass().getName()+ ""String_Node_Str"");
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  display.dispose();
}","/** 
 * main() method for constructing the selector layout.
 * @param args
 */
public static void main(String[] args){
  Display display=Display.getDefault();
  Shell shell=new Shell(display);
  shell.setSize(800,600);
  shell.setLayout(new GridLayout());
  SwtChartViewerSelector scv=new SwtChartViewerSelector(shell,SWT.NO_BACKGROUND);
  scv.setLayoutData(new GridData(GridData.FILL_BOTH));
  scv.addPaintListener(scv);
  Composite cBottom=new Composite(shell,SWT.NONE);
  cBottom.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cBottom.setLayout(new RowLayout());
  Label la=new Label(cBottom,SWT.NONE);
  la.setText(""String_Node_Str"");
  cbType=new Combo(cBottom,SWT.DROP_DOWN | SWT.READ_ONLY);
  String[] models=PrimitiveCharts.getAvailableModelList();
  for (int i=0; i < models.length; i++) {
    cbType.add(models[i]);
  }
  cbType.select(0);
  cbType.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int index=cbType.getSelectionIndex();
      if (index == 7) {
        cbTransposed.setSelection(false);
        cbTransposed.setEnabled(false);
        cbLogarithmic.setEnabled(true);
      }
 else       if (index == 10) {
        cbTransposed.setEnabled(true);
        cbLogarithmic.setSelection(false);
        cbLogarithmic.setEnabled(false);
      }
 else {
        cbTransposed.setEnabled(true);
        cbLogarithmic.setEnabled(true);
      }
    }
  }
);
  cbDimension=new Combo(cBottom,SWT.DROP_DOWN | SWT.READ_ONLY);
  cbDimension.add(""String_Node_Str"");
  cbDimension.add(""String_Node_Str"");
  cbDimension.select(0);
  cbTransposed=new Button(cBottom,SWT.CHECK);
  cbTransposed.setText(""String_Node_Str"");
  cbPercent=new Button(cBottom,SWT.CHECK);
  cbPercent.setText(""String_Node_Str"");
  cbLogarithmic=new Button(cBottom,SWT.CHECK);
  cbLogarithmic.setText(""String_Node_Str"");
  btn=new Button(cBottom,SWT.NONE);
  btn.setText(""String_Node_Str"");
  btn.addSelectionListener(scv);
  shell.setText(scv.getClass().getName() + ""String_Node_Str"" + scv.idr.getClass().getName()+ ""String_Node_Str"");
  shell.open();
  while (!shell.isDisposed()) {
    if (!display.readAndDispatch())     display.sleep();
  }
  display.dispose();
}",0.8480290456431535
66783,"public static String formatDateTime(String format,ULocale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  if (code == null) {
    return format;
  }
  return code + format;
}","public static String formatDateTime(String format,ULocale locale){
  String code=locale2Code.get(locale);
  if (code == null) {
    String language=locale.getLanguage();
    code=locale2Code.get(new ULocale(language,""String_Node_Str""));
  }
  if (code == null) {
    return format;
  }
  return code + format;
}",0.831946755407654
66784,"public ImageData(String uri,String altText,int imageWidth,int imageHeight,StyleEntry styleId,int datatype,OdsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=imageHeight / 1000;
  this.imageHeight=(int)height;
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  this.altText=altText;
  imageUrl=uri;
  rowSpanInDesign=0;
}","public ImageData(String uri,String altText,int imageWidth,int imageHeight,StyleEntry styleId,int datatype,OdsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=imageHeight / 1000f;
  this.imageHeight=(int)height;
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  this.altText=altText;
  imageUrl=uri;
  rowSpanInDesign=0;
}",0.9987325728770596
66785,"protected void writeTableRow(IRowContent row,StyleEntry tableStyle){
  StyleEntry rowStyle=StyleBuilder.createStyleEntry(row.getComputedStyle(),StyleConstant.TYPE_TABLE_ROW);
  if (rowStyle != null && tableStyle != null) {
    StyleBuilder.mergeInheritableProp(tableStyle,rowStyle);
  }
  Collection list=row.getChildren();
  Iterator iter=list.iterator();
  int cellCount=list.size();
  int currentCellCount=0;
  while (iter.hasNext()) {
    currentCellCount++;
    ICellContent child=(ICellContent)iter.next();
    String tag=""String_Node_Str"";
switch (currentCellCount) {
case 1:
      tag=""String_Node_Str"";
    break;
case 2:
  tag=""String_Node_Str"";
break;
case 3:
tag=""String_Node_Str"";
break;
default :
break;
}
writer.openTag(tag);
writeTableCell(child,rowStyle);
writer.closeTag(tag);
}
}","protected void writeTableRow(IRowContent row,StyleEntry tableStyle){
  StyleEntry rowStyle=StyleBuilder.createStyleEntry(row.getComputedStyle(),StyleConstant.TYPE_TABLE_ROW);
  if (rowStyle != null && tableStyle != null) {
    StyleBuilder.mergeInheritableProp(tableStyle,rowStyle);
  }
  Collection list=row.getChildren();
  Iterator iter=list.iterator();
  int currentCellCount=0;
  while (iter.hasNext()) {
    currentCellCount++;
    ICellContent child=(ICellContent)iter.next();
    String tag=""String_Node_Str"";
switch (currentCellCount) {
case 1:
      tag=""String_Node_Str"";
    break;
case 2:
  tag=""String_Node_Str"";
break;
case 3:
tag=""String_Node_Str"";
break;
default :
break;
}
writer.openTag(tag);
writeTableCell(child,rowStyle);
writer.closeTag(tag);
}
}",0.9814932992980216
66786,"protected void writeTableCell(ICellContent cell,StyleEntry rowStyle){
  StringBuffer sb=new StringBuffer();
  Collection list=cell.getChildren();
  Iterator iter=list.iterator();
  if (iter.hasNext()) {
    StyleEntry cellStyle=StyleBuilder.createStyleEntry(cell.getComputedStyle(),StyleConstant.TYPE_TABLE_CELL);
    if (cellStyle != null && rowStyle != null) {
      StyleBuilder.mergeInheritableProp(cellStyle,rowStyle);
    }
    StyleEntry textStyle=StyleBuilder.createEmptyStyleEntry(StyleConstant.TYPE_TEXT);
    if (cellStyle != null) {
      StyleBuilder.mergeInheritableProp(textStyle,cellStyle);
    }
    writer.openTag(""String_Node_Str"");
    while (iter.hasNext()) {
      writeTextContent(iter.next(),textStyle);
    }
    writer.closeTag(""String_Node_Str"");
  }
}","protected void writeTableCell(ICellContent cell,StyleEntry rowStyle){
  Collection list=cell.getChildren();
  Iterator iter=list.iterator();
  if (iter.hasNext()) {
    StyleEntry cellStyle=StyleBuilder.createStyleEntry(cell.getComputedStyle(),StyleConstant.TYPE_TABLE_CELL);
    if (cellStyle != null && rowStyle != null) {
      StyleBuilder.mergeInheritableProp(cellStyle,rowStyle);
    }
    StyleEntry textStyle=StyleBuilder.createEmptyStyleEntry(StyleConstant.TYPE_TEXT);
    if (cellStyle != null) {
      StyleBuilder.mergeInheritableProp(textStyle,cellStyle);
    }
    writer.openTag(""String_Node_Str"");
    while (iter.hasNext()) {
      writeTextContent(iter.next(),textStyle);
    }
    writer.closeTag(""String_Node_Str"");
  }
}",0.975
66787,"public void startTable(ITableContent table){
  XlsContainer currentContainer=getCurrentContainer();
  if (currentContainer == null) {
    addContainer(null);
    return;
  }
  ContainerSizeInfo sizeInfo=currentContainer.getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  boolean isAutoTable=true;
  int dpi=context.getDpi();
  if (isAutoTable) {
    info=LayoutUtil.createTable(table,width,dpi);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width,dpi),dpi);
    info=new ColumnsInfo(columns);
  }
  String caption=table.getCaption();
  if (caption != null) {
    addCaption(caption,table.getComputedStyle());
  }
  addTable(table,info,sizeInfo);
}","public void startTable(ITableContent table){
  XlsContainer currentContainer=getCurrentContainer();
  if (currentContainer == null) {
    addContainer(null);
    return;
  }
  ContainerSizeInfo sizeInfo=currentContainer.getSizeInfo();
  int width=sizeInfo.getWidth();
  ColumnsInfo info=null;
  int dpi=context.getDpi();
  if (autoExtend()) {
    info=LayoutUtil.createTable(table,width,dpi);
  }
 else {
    int[] columns=LayoutUtil.createFixedTable(table,LayoutUtil.getElementWidth(table,width,dpi),dpi);
    info=new ColumnsInfo(columns);
  }
  String caption=table.getCaption();
  if (caption != null) {
    addCaption(caption,table.getComputedStyle());
  }
  addTable(table,info,sizeInfo);
}",0.9640591966173362
66788,"public void addTable(IContainerContent content,ColumnsInfo columns,ContainerSizeInfo size){
  IStyle style=content.getComputedStyle();
  XlsContainer currentContainer=getCurrentContainer();
  if (currentContainer == null) {
    addContainer(null);
    tables.push(null);
    return;
  }
  ContainerSizeInfo parentSizeInfo=currentContainer.getSizeInfo();
  boolean isTop=containers.size() == 1;
  boolean autoExtend=isTop && context.isAutoLayout();
  int[] columnStartCoordinates=splitColumns(columns,parentSizeInfo,autoExtend);
  createTable(columns,style,currentContainer,columnStartCoordinates);
}","public void addTable(IContainerContent content,ColumnsInfo columns,ContainerSizeInfo size){
  IStyle style=content.getComputedStyle();
  XlsContainer currentContainer=getCurrentContainer();
  if (currentContainer == null) {
    addContainer(null);
    tables.push(null);
    return;
  }
  ContainerSizeInfo parentSizeInfo=currentContainer.getSizeInfo();
  int[] columnStartCoordinates=splitColumns(columns,parentSizeInfo,autoExtend());
  createTable(columns,style,currentContainer,columnStartCoordinates);
}",0.755877034358047
66789,"public static ColumnsInfo createTable(ITableContent table,int width,int dpi){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width,int dpi){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth > 0 && unassignedCount == 0 && table.getWidth() != null) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.9001931745009659
66790,"private boolean canSpan(SheetData data,XlsContainer rowContainer,int currentColumn,int lastColumn){
  SheetData realData=ExcelUtil.getRealData(data);
  if (realData == null)   return false;
  if (!isInContainer(realData,rowContainer)) {
    return false;
  }
  for (int i=currentColumn + 1; i < lastColumn; i++) {
    SheetData lastData=getColumnLastData(i);
    SheetData lastRealData=ExcelUtil.getRealData(lastData);
    if (lastRealData == null || lastRealData.getRowIndex() <= realData.getRowIndex()) {
      continue;
    }
    if (realData.getStartX() > lastRealData.getStartX()) {
      return false;
    }
  }
  return realData.getRowSpanInDesign() > 0;
}","private boolean canSpan(SheetData data,XlsContainer rowContainer,int currentColumn,int lastColumn){
  SheetData realData=ExcelUtil.getRealData(data);
  if (realData == null)   return false;
  if (!isInContainer(realData,rowContainer) && realData.getRowSpanInDesign() <= 0) {
    return false;
  }
  for (int i=currentColumn + 1; i < lastColumn; i++) {
    SheetData lastData=getColumnLastData(i);
    SheetData lastRealData=ExcelUtil.getRealData(lastData);
    if (lastRealData == null || lastRealData.getRowIndex() <= realData.getRowIndex()) {
      continue;
    }
    if (realData.getStartX() > lastRealData.getStartX()) {
      return false;
    }
  }
  return true;
}",0.9438202247191012
66791,"private void setupDirectories() throws IOException {
  String dataDir;
  if (sm_pluginFile != null && sm_manifestsDir != null)   return;
  if (sm_pluginTest) {
    IBundle dataBundle=Platform.getBundle(""String_Node_Str"");
    URL url=dataBundle.getEntry(""String_Node_Str"");
    dataDir=Platform.asLocalURL(url).getPath();
    IBundle driverBundle=Platform.getBundle(sm_dtpFlatfileId);
    URL jdbcUrl=driverBundle.getEntry(""String_Node_Str"");
    sm_pluginFile=Platform.asLocalURL(jdbcUrl).getPath() + sm_pluginFileName;
  }
 else {
    dataDir=""String_Node_Str"";
    sm_pluginFile=dataDir + ""String_Node_Str"" + sm_dtpFlatfileId+ ""String_Node_Str""+ sm_pluginFileName;
    System.setProperty(""String_Node_Str"",dataDir + ""String_Node_Str"");
  }
  sm_manifestsDir=dataDir + ""String_Node_Str"" + sm_birtFlatfileId+ ""String_Node_Str"";
}","private void setupDirectories() throws IOException {
  String dataDir;
  if (sm_pluginFile != null && sm_manifestsDir != null)   return;
  if (sm_pluginTest) {
    Bundle dataBundle=org.eclipse.core.runtime.Platform.getBundle(""String_Node_Str"");
    URL url=dataBundle.getEntry(""String_Node_Str"");
    dataDir=org.eclipse.core.runtime.Platform.asLocalURL(url).getPath();
    Bundle driverBundle=org.eclipse.core.runtime.Platform.getBundle(sm_dtpFlatfileId);
    URL jdbcUrl=driverBundle.getEntry(""String_Node_Str"");
    sm_pluginFile=org.eclipse.core.runtime.Platform.asLocalURL(jdbcUrl).getPath() + sm_pluginFileName;
  }
 else {
    dataDir=""String_Node_Str"";
    sm_pluginFile=dataDir + ""String_Node_Str"" + sm_dtpFlatfileId+ ""String_Node_Str""+ sm_pluginFileName;
    System.setProperty(""String_Node_Str"",dataDir + ""String_Node_Str"");
  }
  sm_manifestsDir=dataDir + ""String_Node_Str"" + sm_birtFlatfileId+ ""String_Node_Str"";
}",0.9419795221843004
66792,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  CubeHandleUtil.defineCube(dataEngine,cubeHandle,this.sessionContext.getAppContext());
  ICubeInterceptor interceptor=CubeInterceptorFinder.find(cubeHandle);
  if (interceptor != null) {
    interceptor.preDefineCube(this.sessionContext.getAppContext(),cubeHandle);
  }
  if (interceptor == null || interceptor.needDefineCube()) {
    Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
    Iterator itr=involvedDataSets.iterator();
    while (itr.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)itr.next();
      BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
      BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
      if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)       this.defineDataSource(baseDataSource);
      if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
        DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
      }
    }
    if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
      this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
    }
    prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  CubeHandleUtil.defineCube(dataEngine,cubeHandle,this.sessionContext.getAppContext());
  ICubeInterceptor cubeInterceptor=CubeInterceptorFinder.find(cubeHandle);
  if (cubeInterceptor != null) {
    cubeInterceptor.preDefineCube(this.sessionContext.getAppContext(),cubeHandle);
    if (this.cubeInterceptorList == null) {
      this.cubeInterceptorList=new ArrayList<ICubeInterceptor>();
    }
    this.cubeInterceptorList.add(cubeInterceptor);
  }
  if (cubeInterceptor == null || cubeInterceptor.needDefineCube()) {
    Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
    Iterator itr=involvedDataSets.iterator();
    while (itr.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)itr.next();
      BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
      BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
      if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)       this.defineDataSource(baseDataSource);
      if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
        DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
      }
    }
    if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
      this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
    }
    prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
  }
}",0.930364086249558
66793,"public void shutdown(){
  if (cubeMaterializer != null) {
    try {
      cubeMaterializer.close();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
    }
  }
  DataSessionFinalizeUtil.finalize(this);
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
}","public void shutdown(){
  if (cubeMaterializer != null) {
    try {
      cubeMaterializer.close();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
    }
  }
  DataSessionFinalizeUtil.finalize(this);
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (this.dataSetInterceptorList != null || this.cubeInterceptorList != null) {
    try {
      AppContextResourceReleaser.release(this.sessionContext.getAppContext());
    }
 catch (    BirtException e) {
    }
  }
}",0.748564867967853
66794,"public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  IDataSetInterceptor interceptor=DataSetInterceptorFinder.find(design);
  if (interceptor != null) {
    interceptor.preDefineDataSet(sessionContext.getAppContext(),dataEngine.getDataSourceDesign(design.getDataSourceName()),design,getDataSessionContext().getModuleHandle());
  }
  dataEngine.defineDataSet(design);
}","public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  IDataSetInterceptor dataSetInterceptor=DataSetInterceptorFinder.find(design);
  if (dataSetInterceptor != null) {
    dataSetInterceptor.preDefineDataSet(sessionContext.getAppContext(),dataEngine.getDataSourceDesign(design.getDataSourceName()),design,getDataSessionContext().getModuleHandle());
    if (this.dataSetInterceptorList == null) {
      this.dataSetInterceptorList=new ArrayList<IDataSetInterceptor>();
    }
    this.dataSetInterceptorList.add(dataSetInterceptor);
  }
  dataEngine.defineDataSet(design);
}",0.788675429726997
66795,"private void fillRightSide(int lindex){
  int index=lindex;
  double x=loa[index].getX();
  double y=loa[index].getY();
  loaPlane[0].set(x,y);
  loaPlane[1].set(x + dTapeWidth,y - dTapeWidth);
  double lastLocation=loaLast == null ? zeroLocation : trans.getY(loaLast[index]);
  if (trans == Transposition.TRANSPOSED) {
    loaPlane[2].set(lastLocation + dTapeWidth,y - dTapeWidth);
    loaPlane[3].set(lastLocation,y);
  }
 else {
    loaPlane[2].set(x + dTapeWidth,lastLocation - dTapeWidth);
    loaPlane[3].set(x,lastLocation);
  }
  pre.setOutline(null);
  pre.setBackground(sideColor);
  pre.setPoints(loaPlane);
  pre.setSourceObject(createDataPointSource(index));
  dc.addPlane(pre,PrimitiveRenderEvent.FILL);
}","private void fillRightSide(int lindex){
  int index=lindex;
  double x=loa[index].getX();
  double y=loa[index].getY();
  loaPlane[0].set(x,y);
  loaPlane[1].set(x + dTapeWidth,y - dTapeWidth);
  double lastLocation=loaLast == null ? zeroLocation : trans.getY(loaLast[loaLast.length - (loa.length - index)]);
  if (trans == Transposition.TRANSPOSED) {
    loaPlane[2].set(lastLocation + dTapeWidth,y - dTapeWidth);
    loaPlane[3].set(lastLocation,y);
  }
 else {
    loaPlane[2].set(x + dTapeWidth,lastLocation - dTapeWidth);
    loaPlane[3].set(x,lastLocation);
  }
  pre.setOutline(null);
  pre.setBackground(sideColor);
  pre.setPoints(loaPlane);
  pre.setSourceObject(createDataPointSource(index));
  dc.addPlane(pre,PrimitiveRenderEvent.FILL);
}",0.9714285714285714
66796,"@Override protected void saveStates(){
  RunTimeContext rtc=context.line.getRunTimeContext();
  if (context.line.isLastRuntimeSeriesInAxis()) {
    rtc.putState(STACKED_SERIES_LOCATION_KEY,null);
    rtc.putState(AREA_ENVELOPS,null);
  }
 else {
    rtc.putState(STACKED_SERIES_LOCATION_KEY,loa);
    rtc.putState(AREA_ENVELOPS,envelops);
  }
}","@Override protected void saveStates(){
  RunTimeContext rtc=context.line.getRunTimeContext();
  if (context.line.isLastRuntimeSeriesInAxis()) {
    rtc.putState(STACKED_SERIES_LOCATION_KEY,null);
    rtc.putState(AREA_ENVELOPS,null);
  }
 else {
    List<double[]> list=new ArrayList<double[]>();
    for (    Location lo : loa) {
      double[] l=new double[]{lo.getX(),lo.getY()};
      list.add(l);
    }
    rtc.putState(STACKED_SERIES_LOCATION_KEY,list);
    rtc.putState(AREA_ENVELOPS,envelops);
  }
}",0.8037602820211516
66797,"/** 
 * @param ipr
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 * @throws ChartException
 */
private final void plotPlane(IPrimitiveRenderer ipr,double x1,double y1,double x2,double y2,double z1,double z2,boolean drawSide,boolean leftSide) throws ChartException {
  if (bRendering3D) {
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,Polygon3DRenderEvent.class);
    pre.setOutline(null);
    pre.setDoubleSided(true);
    pre.setBackground(tapeColor);
    if (!leftSide) {
      loa3d[0].set(x1 + kError,y1 + kError,z1);
      loa3d[1].set(x2 + kError,y2 + kError,z2);
      loa3d[2].set(x2 + kError,y2 + kError,z2 - dTapeWidth);
      loa3d[3].set(x1 + kError,y1 + kError,z1 - dTapeWidth);
      pre.setPoints3D(loa3d);
      dc.addPlane(pre,PrimitiveRenderEvent.FILL);
    }
    if (drawSide) {
      pre.setBackground(sideColor);
      if (leftSide) {
        if (y1 + kError > zeroLocation) {
          loa3d[0].set(x1 + kError,y1 + kError,z1);
          loa3d[1].set(x1 + kError,y1 + kError,z1 - dTapeWidth);
          loa3d[2].set(x1 + kError,zeroLocation,z1 - dTapeWidth);
          loa3d[3].set(x1 + kError,zeroLocation,z1);
        }
 else {
          loa3d[0].set(x1 + kError,y1 + kError,z1);
          loa3d[1].set(x1 + kError,zeroLocation,z1);
          loa3d[2].set(x1 + kError,zeroLocation,z1 - dTapeWidth);
          loa3d[3].set(x1 + kError,y1 + kError,z1 - dTapeWidth);
        }
      }
 else {
        if (y2 + kError > zeroLocation) {
          loa3d[0].set(x2 + kError,y2 + kError,z2);
          loa3d[1].set(x2 + kError,zeroLocation,z2);
          loa3d[2].set(x2 + kError,zeroLocation,z2 - dTapeWidth);
          loa3d[3].set(x2 + kError,y2 + kError,z2 - dTapeWidth);
        }
 else {
          loa3d[0].set(x2 + kError,y2 + kError,z2);
          loa3d[1].set(x2 + kError,y2 + kError,z2 - dTapeWidth);
          loa3d[2].set(x2 + kError,zeroLocation,z2 - dTapeWidth);
          loa3d[3].set(x2 + kError,zeroLocation,z2);
        }
      }
      pre.setPoints3D(loa3d);
      dc.addPlane(pre,PrimitiveRenderEvent.FILL);
    }
  }
 else {
    final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setOutline(null);
    pre.setBackground(tapeColor);
    loa[0].set(x1 + kError,y1 + kError);
    loa[1].set(x2 + kError,y2 + kError);
    loa[2].set(x2 + kError + dTapeWidth,y2 + kError - dTapeWidth);
    loa[3].set(x1 + kError + dTapeWidth,y1 + kError - dTapeWidth);
    pre.setPoints(loa);
    if (bDeferred) {
      dc.addPlane(pre,PrimitiveRenderEvent.FILL);
    }
 else {
      ipr.fillPolygon(pre);
    }
    if (drawSide) {
      pre.setBackground(sideColor);
      if (leftSide) {
        loa[0].set(x1 + kError,y1 + kError);
        loa[1].set(x1 + kError + dTapeWidth,y1 + kError - dTapeWidth);
        if (cwa.isTransposed()) {
          loa[2].set(zeroLocation + dTapeWidth,y1 + kError - dTapeWidth);
          loa[3].set(zeroLocation,y1 + kError);
        }
 else {
          loa[2].set(x1 + kError + dTapeWidth,zeroLocation - dTapeWidth);
          loa[3].set(x1 + kError,zeroLocation);
        }
      }
 else {
        loa[0].set(x2 + kError,y2 + kError);
        loa[1].set(x2 + kError + dTapeWidth,y2 + kError - dTapeWidth);
        if (cwa.isTransposed()) {
          loa[2].set(zeroLocation + dTapeWidth,y2 + kError - dTapeWidth);
          loa[3].set(zeroLocation,y2 + kError);
        }
 else {
          loa[2].set(x2 + kError + dTapeWidth,zeroLocation - dTapeWidth);
          loa[3].set(x2 + kError,zeroLocation);
        }
      }
      pre.setPoints(loa);
      if (bDeferred) {
        dc.addPlane(pre,PrimitiveRenderEvent.FILL);
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
  }
}","/** 
 * @param ipr
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 * @throws ChartException
 */
private final void plotPlane(IPrimitiveRenderer ipr,double x1,double y1,double x2,double y2,double z1,double z2,boolean drawSide,boolean leftSide) throws ChartException {
  if (bRendering3D) {
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,Polygon3DRenderEvent.class);
    pre.setOutline(null);
    pre.setDoubleSided(true);
    pre.setBackground(tapeColor);
    if (!leftSide) {
      loa3d[0].set(x1 + kError,y1 + kError,z1);
      loa3d[1].set(x2 + kError,y2 + kError,z2);
      loa3d[2].set(x2 + kError,y2 + kError,z2 - dTapeWidth);
      loa3d[3].set(x1 + kError,y1 + kError,z1 - dTapeWidth);
      pre.setPoints3D(loa3d);
      dc.addPlane(pre,PrimitiveRenderEvent.FILL);
    }
    if (drawSide) {
      pre.setBackground(sideColor);
      if (leftSide) {
        if (y1 + kError > zeroLocation) {
          loa3d[0].set(x1 + kError,y1 + kError,z1);
          loa3d[1].set(x1 + kError,y1 + kError,z1 - dTapeWidth);
          loa3d[2].set(x1 + kError,zeroLocation,z1 - dTapeWidth);
          loa3d[3].set(x1 + kError,zeroLocation,z1);
        }
 else {
          loa3d[0].set(x1 + kError,y1 + kError,z1);
          loa3d[1].set(x1 + kError,zeroLocation,z1);
          loa3d[2].set(x1 + kError,zeroLocation,z1 - dTapeWidth);
          loa3d[3].set(x1 + kError,y1 + kError,z1 - dTapeWidth);
        }
      }
 else {
        if (y2 + kError > zeroLocation) {
          loa3d[0].set(x2 + kError,y2 + kError,z2);
          loa3d[1].set(x2 + kError,zeroLocation,z2);
          loa3d[2].set(x2 + kError,zeroLocation,z2 - dTapeWidth);
          loa3d[3].set(x2 + kError,y2 + kError,z2 - dTapeWidth);
        }
 else {
          loa3d[0].set(x2 + kError,y2 + kError,z2);
          loa3d[1].set(x2 + kError,y2 + kError,z2 - dTapeWidth);
          loa3d[2].set(x2 + kError,zeroLocation,z2 - dTapeWidth);
          loa3d[3].set(x2 + kError,zeroLocation,z2);
        }
      }
      pre.setPoints3D(loa3d);
      dc.addPlane(pre,PrimitiveRenderEvent.FILL);
    }
  }
 else {
    final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setOutline(null);
    pre.setBackground(tapeColor);
    loa[0].set(x1 + kError,y1 + kError);
    loa[1].set(x2 + kError,y2 + kError);
    loa[2].set(x2 + kError + dTapeWidth,y2 + kError - dTapeWidth);
    loa[3].set(x1 + kError + dTapeWidth,y1 + kError - dTapeWidth);
    pre.setPoints(loa);
    if (bDeferred) {
      dc.addPlane(pre,PrimitiveRenderEvent.FILL);
    }
 else {
      ipr.fillPolygon(pre);
    }
    if (drawSide) {
      pre.setBackground(sideColor);
      if (leftSide) {
        loa[0].set(x1 + kError,y1 + kError);
        loa[1].set(x1 + kError + dTapeWidth,y1 + kError - dTapeWidth);
        if (cwa.isTransposed()) {
          loa[2].set(zeroLocation + dTapeWidth,y1 + kError - dTapeWidth);
          loa[3].set(zeroLocation,y1 + kError);
        }
 else {
          loa[2].set(x1 + kError + dTapeWidth,zeroLocation - dTapeWidth);
          loa[3].set(x1 + kError,zeroLocation);
        }
      }
 else {
        Object obj=iRender.getRunTimeContext().getState(BaseRenderer.STACKED_SERIES_LOCATION_KEY);
        double[] last=new double[]{zeroLocation,zeroLocation};
        if (obj instanceof List) {
          List lst=(List)obj;
          int index=lst.size() - 1;
          if (index > 0) {
            obj=lst.get(index);
          }
          if (obj instanceof double[]) {
            last=(double[])obj;
          }
        }
        loa[0].set(x2 + kError,y2 + kError);
        loa[1].set(x2 + kError + dTapeWidth,y2 + kError - dTapeWidth);
        if (cwa.isTransposed()) {
          loa[2].set(last[0] + dTapeWidth,y2 + kError - dTapeWidth);
          loa[3].set(last[0],y2 + kError);
        }
 else {
          loa[2].set(x2 + kError + dTapeWidth,last[1] - dTapeWidth);
          loa[3].set(x2 + kError,last[1]);
        }
      }
      pre.setPoints(loa);
      if (bDeferred) {
        dc.addPlane(pre,PrimitiveRenderEvent.FILL);
      }
 else {
        ipr.fillPolygon(pre);
      }
    }
  }
}",0.9360192575699988
66798,"/** 
 * The constructor.
 * @param _cwa
 * @param _render
 * @param _lia
 * @param _faX
 * @param _faY
 * @param _bShowAsTape
 */
public CurveRenderer(ChartWithAxes _cwa,BaseRenderer _render,LineAttributes _lia,Location[] _lo,double _zeroLocation,boolean _bShowAsTape,double _tapeWidth,boolean _bFillArea,boolean _bTranslucent,boolean _bUseLastState,boolean _bDeferred,boolean _bKeepState,Fill paletteEntry,boolean usePaletteLineColor,boolean connectMissingValue){
  cwa=_cwa;
  bRendering3D=_lo instanceof Location3D[];
  loPoints=_lo;
  tempPoints=_lo;
  bConnectMissingValue=connectMissingValue;
  bFillArea=_bFillArea;
  bShowAsTape=_bShowAsTape;
  bDeferred=_bDeferred;
  loa=(bShowAsTape || bFillArea) ? new Location[4] : null;
  loa3d=(bRendering3D) ? new Location3D[4] : null;
  if (_tapeWidth == -1) {
    dTapeWidth=_cwa.getSeriesThickness() * _render.getDeviceScale();
  }
 else {
    dTapeWidth=_tapeWidth;
  }
  if (loa != null) {
    for (int i=0; i < 4; i++) {
      loa[i]=goFactory.createLocation(0,0);
    }
  }
  if (loa3d != null) {
    for (int i=0; i < 4; i++) {
      loa3d[i]=goFactory.createLocation3D(0,0,0);
    }
  }
  lia=_lia;
  zeroLocation=_zeroLocation;
  bTranslucent=_bTranslucent;
  oSource=StructureSource.createSeries(_render.getSeries());
  dc=_render.getDeferredCache();
  this.iRender=_render;
  loStart=goFactory.createLocation(0,0);
  loEnd=goFactory.createLocation(0,0);
  bUseLastState=_bUseLastState;
  bKeepState=_bKeepState;
  if (usePaletteLineColor) {
    lia=goFactory.copyOf(lia);
    lia.setColor(FillUtil.getColor(paletteEntry));
  }
  if (bFillArea) {
    fillColor=FillUtil.getColor(paletteEntry);
    tapeColor=fillColor.brighter();
    sideColor=fillColor.darker();
  }
 else {
    fillColor=lia.getColor();
    tapeColor=lia.getColor().brighter();
    sideColor=lia.getColor().darker();
  }
  if (bTranslucent) {
    fillColor=fillColor.translucent();
    tapeColor=tapeColor.translucent();
    sideColor=sideColor.translucent();
  }
}","/** 
 * The constructor.
 * @param _cwa
 * @param _render
 * @param _lia
 * @param _faX
 * @param _faY
 * @param _bShowAsTape
 */
public CurveRenderer(ChartWithAxes _cwa,BaseRenderer _render,LineAttributes _lia,Location[] _lo,double _zeroLocation,boolean _bShowAsTape,double _tapeWidth,boolean _bFillArea,boolean _bTranslucent,boolean _bUseLastState,boolean _bDeferred,boolean _bKeepState,Fill paletteEntry,boolean usePaletteLineColor,boolean connectMissingValue){
  cwa=_cwa;
  bRendering3D=_lo instanceof Location3D[];
  loPoints=_lo;
  tempPoints=_lo;
  bConnectMissingValue=connectMissingValue;
  bFillArea=_bFillArea;
  bShowAsTape=_bShowAsTape;
  bDeferred=_bDeferred;
  loa=(bShowAsTape || bFillArea) ? new Location[4] : null;
  loa3d=(bRendering3D) ? new Location3D[4] : null;
  if (_tapeWidth == -1) {
    dTapeWidth=_cwa.getSeriesThickness() * _render.getDeviceScale();
  }
 else {
    dTapeWidth=_tapeWidth;
  }
  if (loa != null) {
    for (int i=0; i < 4; i++) {
      loa[i]=goFactory.createLocation(0,0);
    }
  }
  if (loa3d != null) {
    for (int i=0; i < 4; i++) {
      loa3d[i]=goFactory.createLocation3D(0,0,0);
    }
  }
  lia=_lia;
  zeroLocation=_zeroLocation;
  bTranslucent=_bTranslucent;
  oSource=StructureSource.createSeries(_render.getSeries());
  dc=_render.getDeferredCache();
  dc.setPlaneShadowsComparator(WrappedInstruction.getDefaultComarator());
  dc.setPlanesComparator(WrappedInstruction.getDefaultComarator());
  this.iRender=_render;
  loStart=goFactory.createLocation(0,0);
  loEnd=goFactory.createLocation(0,0);
  bUseLastState=_bUseLastState;
  bKeepState=_bKeepState;
  if (usePaletteLineColor) {
    lia=goFactory.copyOf(lia);
    lia.setColor(FillUtil.getColor(paletteEntry));
  }
  if (bFillArea) {
    fillColor=FillUtil.getColor(paletteEntry);
    tapeColor=fillColor.brighter();
    sideColor=fillColor.darker();
  }
 else {
    fillColor=lia.getColor();
    tapeColor=lia.getColor().brighter();
    sideColor=lia.getColor().darker();
  }
  if (bTranslucent) {
    fillColor=fillColor.translucent();
    tapeColor=tapeColor.translucent();
    sideColor=sideColor.translucent();
  }
}",0.9656174334140436
66799,"public DataInteractiveEngine(DataEngineFactory factory,ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(factory,context);
  this.writer=writer;
  this.reader=reader;
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,null,context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  dteSessionContext.setAppContext(context.getAppContext());
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  initialize();
}","public DataInteractiveEngine(DataEngineFactory factory,ExecutionContext context,IDocArchiveReader reader,IDocArchiveWriter writer) throws Exception {
  super(factory,context);
  this.writer=writer;
  this.reader=reader;
  DataSessionContext dteSessionContext=new DataSessionContext(DataSessionContext.MODE_UPDATE,context.getDesign(),context.getScriptContext(),context.getApplicationClassLoader());
  dteSessionContext.setDocumentReader(reader);
  dteSessionContext.setDocumentWriter(writer);
  dteSessionContext.setAppContext(context.getAppContext());
  DataEngineContext dteEngineContext=dteSessionContext.getDataEngineContext();
  dteEngineContext.setLocale(context.getLocale());
  dteEngineContext.setTimeZone(context.getTimeZone());
  String tempDir=getTempDir(context);
  if (tempDir != null) {
    dteEngineContext.setTmpdir(tempDir);
  }
  dteSession=DataRequestSession.newSession(dteSessionContext);
  initialize();
}",0.4861035422343324
66800,"/** 
 * Return pre-defined query text pattern with every element in a cell.
 * @return pre-defined query text
 */
public static String getQueryPresetTextString(String extensionId){
  String[] lines=getQueryPresetTextArray(extensionId);
  String result=""String_Node_Str"";
  if (lines != null && lines.length > 0) {
    for (int i=0; i < lines.length; i++) {
      result=result + lines[i] + (i == lines.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
  return result;
}","/** 
 * Return pre-defined query text pattern with every element in a cell.
 * @return pre-defined query text
 */
public static String getQueryPresetTextString(String extensionId){
  String[] lines=getQueryPresetTextArray(extensionId);
  StringBuffer result=new StringBuffer();
  if (lines != null && lines.length > 0) {
    for (int i=0; i < lines.length; i++) {
      result.append(lines[i]).append(i == lines.length - 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    }
  }
  return result.toString();
}",0.5916919959473151
66801,"public ResultSet getAlltables(String schemaPattern,String namePattern,String[] types){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
  try {
    return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
}","public ResultSet getAlltables(String schemaPattern,String namePattern,String[] types){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
  try {
    return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getTables(connection.getCatalog(),schemaPattern,namePattern,types);
    }
 catch (    SQLException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      return null;
    }
catch (    OdaException ex) {
      logger.log(Level.WARNING,ex.getMessage(),ex);
      return null;
    }
  }
}",0.9034334763948498
66802,"public ResultSet getTableColumns(String schemaPattern,String tableNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
  try {
    return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
}","public ResultSet getTableColumns(String schemaPattern,String tableNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
  try {
    return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getColumns(connection.getCatalog(),schemaPattern,tableNamePattern,columnNamePattern);
    }
 catch (    SQLException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
catch (    OdaException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
  }
}",0.9442231075697212
66803,"public ResultSet getProcedureColumns(String schemaPattern,String procedureNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
  try {
    return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    Exception e1) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
}","public ResultSet getProcedureColumns(String schemaPattern,String procedureNamePattern,String columnNamePattern){
  if (connection == null) {
    try {
      reconnect();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
    try {
      return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
      return null;
    }
  }
  try {
    return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
  }
 catch (  SQLException e) {
    try {
      reconnect();
      return connection.getMetaData().getProcedureColumns(connection.getCatalog(),schemaPattern,procedureNamePattern,columnNamePattern);
    }
 catch (    SQLException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
catch (    OdaException e1) {
      logger.log(Level.WARNING,e1.getMessage(),e1);
      return null;
    }
  }
}",0.9467174119885824
66804,"/** 
 * Return the String which stands for the type specified by input argument
 * @param typeName the int value of a Type
 * @return the String which stands for the type specified by input typeName
 * @throws OdaException Once the input arguement is not a valid type name
 */
public static String getTypeString(int type) throws OdaException {
  Integer typeInteger=new Integer(type);
  if (typeIntStringPair.containsKey(typeInteger))   return typeIntStringPair.get(typeInteger).toString();
  throw new OdaException();
}","/** 
 * Return the String which stands for the type specified by input argument
 * @param typeName the int value of a Type
 * @return the String which stands for the type specified by input typeName
 * @throws OdaException Once the input arguement is not a valid type name
 */
public static String getTypeString(int type) throws OdaException {
  Integer typeInteger=Integer.valueOf(type);
  if (typeIntStringPair.containsKey(typeInteger))   return typeIntStringPair.get(typeInteger).toString();
  throw new OdaException();
}",0.975095785440613
66805,"public static IArchiveLockManager getInstance(){
  if (instance != null) {
    return instance;
  }
synchronized (ArchiveLockManager.class) {
    if (instance == null) {
      instance=new DocArchiveLockManager();
    }
  }
  return instance;
}","public static IArchiveLockManager getInstance(){
  return ManagerHolder.instance;
}",0.4831804281345566
66806,"private void ensureFileOpened() throws IOException {
  if (rf != null) {
    return;
  }
synchronized (this) {
    if (rf == null) {
      ensureParentFolderCreated(fileName);
      rf=new RandomAccessFile(fileName,""String_Node_Str"");
      rf.setLength(0);
    }
  }
}","private void ensureFileOpened() throws IOException {
  if (rf == null) {
synchronized (this) {
      if (rf == null) {
        ensureParentFolderCreated(fileName);
        rf=new RandomAccessFile(fileName,""String_Node_Str"");
        rf.setLength(0);
      }
    }
  }
}",0.5650557620817844
66807,"/** 
 * get the trace logger handle. Trace logger handle output all the logging information to System.out
 * @return
 */
static StreamHandler getTracingHandler(){
  if (tracingHandler == null) {
    tracingHandler=new StreamHandler(System.out,new SimpleFormatter());
    tracingHandler.setLevel(Level.ALL);
  }
  return tracingHandler;
}","/** 
 * get the trace logger handle. Trace logger handle output all the logging information to System.out
 * @return
 */
static StreamHandler getTracingHandler(){
  return TracingHandlerHolder.tracingHandler;
}",0.6179159049360147
66808,"void preDefineCube(DataEngineImpl dataEngine,Map appContext,CubeHandle handle) throws BirtException ;","void preDefineCube(Map appContext,CubeHandle handle) throws BirtException ;",0.8522727272727273
66809,"public static boolean defineCube(DataEngineImpl dataEngine,CubeHandle handle,Map appContext) throws BirtException {
  return false;
}","public static void defineCube(DataEngineImpl dataEngine,CubeHandle handle,Map appContext) throws BirtException {
}",0.8987854251012146
66810,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  if (CubeHandleUtil.defineCube(this.dataEngine,cubeHandle,this.sessionContext.getAppContext()))   return;
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
      DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
    }
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
  prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  CubeHandleUtil.defineCube(dataEngine,cubeHandle,this.sessionContext.getAppContext());
  ICubeInterceptor interceptor=CubeInterceptorFinder.find(cubeHandle);
  if (interceptor != null) {
    interceptor.preDefineCube(this.sessionContext.getAppContext(),cubeHandle);
  }
  if (interceptor == null || interceptor.needDefineCube()) {
    Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
    Iterator itr=involvedDataSets.iterator();
    while (itr.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)itr.next();
      BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
      BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
      if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)       this.defineDataSource(baseDataSource);
      if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
        DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
      }
    }
    if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
      this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
    }
    prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
  }
}",0.8391432171356573
66811,"public void shutdown(){
  if (cubeMaterializer != null) {
    try {
      cubeMaterializer.close();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
    }
  }
  DataSessionFinalizeUtil.finalize(this);
  try {
    AppContextResourceReleaser.release(this.getDataSessionContext().getAppContext());
  }
 catch (  BirtException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage(),e);
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
}","public void shutdown(){
  if (cubeMaterializer != null) {
    try {
      cubeMaterializer.close();
    }
 catch (    IOException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
    }
  }
  DataSessionFinalizeUtil.finalize(this);
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
}",0.7767220902612827
66812,"public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  if (design.getDataSourceName() != null) {
    TransientDataMartUtil.prepareDataSet(sessionContext.getAppContext(),sessionContext.getDataEngineContext(),dataEngine.getDataSourceDesign(design.getDataSourceName()),design,this);
  }
  dataEngine.defineDataSet(design);
}","public void defineDataSet(IBaseDataSetDesign design) throws BirtException {
  IDataSetInterceptor interceptor=DataSetInterceptorFinder.find(design);
  if (interceptor != null) {
    interceptor.preDefineDataSet(sessionContext.getAppContext(),dataEngine.getDataSourceDesign(design.getDataSourceName()),design,getDataSessionContext().getModuleHandle());
  }
  dataEngine.defineDataSet(design);
}",0.2930800542740841
66813,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  if (handle.getDataSourceName() != null) {
    TransientDataMartUtil.prepareDataSet(sessionContext.getAppContext(),sessionContext.getDataEngineContext(),((DataEngineImpl)dataEngine).getDataSourceDesign(baseDS.getDataSourceName()),baseDS,session);
  }
  dataEngine.defineDataSet(baseDS);
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  session.defineDataSet(baseDS);
}",0.9152921442549624
66814,"/** 
 */
private void initCache(){
  needCache=true;
  TempPathManager.setTempPath(this.session.getTempDir());
  cache=new BufferedStructureArray(SimpleCachedObject.getCreator(),0);
}","/** 
 */
private void initCache(){
  needCache=true;
  DataEngineThreadLocal.getInstance().getPathManager().setTempPath(this.session.getTempDir());
  cache=new BufferedStructureArray(SimpleCachedObject.getCreator(),0);
}",0.8933002481389578
66815,"public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}","public void shutdown(){
  logger.entering(""String_Node_Str"",""String_Node_Str"");
  if (dataSources == null) {
    logger.fine(""String_Node_Str"");
    return;
  }
  Collection col=dataSources.values();
  Iterator it=col.iterator();
  while (it.hasNext()) {
    DataSourceRuntime ds=(DataSourceRuntime)it.next();
    try {
      closeDataSource(ds);
    }
 catch (    DataException e) {
      if (logger.isLoggable(Level.FINE))       logger.log(Level.FINE,""String_Node_Str"" + ds + ""String_Node_Str"",e);
    }
  }
  this.dataSourceManager.close();
  releaseValidationContexts();
  if (shutdownListenerList != null) {
    for (int i=0; i < shutdownListenerList.size(); i++) {
      ((IShutdownListener)shutdownListenerList.get(i)).dataEngineShutdown();
    }
    shutdownListenerList.clear();
  }
  logger.logp(Level.FINE,DataEngineImpl.class.getName(),""String_Node_Str"",""String_Node_Str"");
  dataSetDesigns=null;
  dataSources=null;
  try {
    DataEngineThreadLocal.getInstance().getCloseListener().dataEngineShutDown();
    DataEngineThreadLocal.getInstance().removeTempPathManger();
    if (DataEngineThreadLocal.getInstance().getCloseListener().getActivateDteCount() == 0) {
      DataEngineThreadLocal.getInstance().getCloseListener().closeAll();
      DataEngineThreadLocal.getInstance().removeCloseListener();
    }
    clearTempFile();
  }
 catch (  IOException e) {
  }
  if (this.getContext().getDocWriter() != null) {
    RAOutputStream outputStream;
    try {
      if (this.getContext().getDocWriter().exists(DataEngineContext.QUERY_STARTING_ID)) {
        outputStream=this.getContext().getDocWriter().getOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
 else {
        outputStream=this.getContext().getDocWriter().createOutputStream(DataEngineContext.QUERY_STARTING_ID);
      }
      outputStream.writeInt(this.getSession().getQueryResultIDUtil().getCurrentQueryId());
      outputStream.close();
    }
 catch (    IOException e) {
    }
  }
  logger.exiting(DataEngineImpl.class.getName(),""String_Node_Str"");
}",0.984015984015984
66816,"/** 
 * Create a file for caching objects.
 * @param cacheIndex
 * @return
 * @throws IOException
 */
private void createCacheFile() throws IOException {
  String tempFileStr=TempPathManager.getTempFileName(fileNamePrefix,this.hashCode(),""String_Node_Str"");
  if (diskFile == null) {
    diskFile=new File(tempFileStr);
    FileSecurity.createNewFile(diskFile);
  }
}","/** 
 * Create a file for caching objects.
 * @param cacheIndex
 * @return
 * @throws IOException
 */
private void createCacheFile() throws IOException {
  String tempFileStr=DataEngineThreadLocal.getInstance().getPathManager().getTempFileName(fileNamePrefix,this.hashCode(),""String_Node_Str"");
  if (diskFile == null) {
    diskFile=new File(tempFileStr);
    FileSecurity.createNewFile(diskFile);
  }
}",0.9442282749675746
66817,"/** 
 * @param outResults
 * @param defn
 * @param session
 * @param scope
 * @param context
 * @throws DataException 
 */
public CubeQueryExecutor(IBaseQueryResults outResults,ICubeQueryDefinition defn,DataEngineSession session,Scriptable scope,DataEngineContext context) throws DataException {
  this.defn=defn;
  this.scope=scope;
  this.context=context;
  this.session=session;
  TempPathManager.setTempPath(session.getTempDir());
  this.outResults=outResults;
  this.dimensionFilterEvalHelpers=new ArrayList<IJSFilterHelper>();
  this.dimensionSimpleFilter=new ArrayList<SimpleLevelFilter>();
  this.aggrMeasureFilterEvalHelpers=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.advancedFacttableBasedFilterEvalHelper=new ArrayList<IJSFacttableFilterEvalHelper>();
  if (!(context.getMode() == DataEngineContext.MODE_PRESENTATION && defn.getQueryResultsID() != null)) {
    populateFilterHelpers();
  }
}","/** 
 * @param outResults
 * @param defn
 * @param session
 * @param scope
 * @param context
 * @throws DataException 
 */
public CubeQueryExecutor(IBaseQueryResults outResults,ICubeQueryDefinition defn,DataEngineSession session,Scriptable scope,DataEngineContext context) throws DataException {
  this.defn=defn;
  this.scope=scope;
  this.context=context;
  this.session=session;
  DataEngineThreadLocal.getInstance().getPathManager().setTempPath(session.getTempDir());
  this.outResults=outResults;
  this.dimensionFilterEvalHelpers=new ArrayList<IJSFilterHelper>();
  this.dimensionSimpleFilter=new ArrayList<SimpleLevelFilter>();
  this.aggrMeasureFilterEvalHelpers=new ArrayList<IAggrMeasureFilterEvalHelper>();
  this.advancedFacttableBasedFilterEvalHelper=new ArrayList<IJSFacttableFilterEvalHelper>();
  if (!(context.getMode() == DataEngineContext.MODE_PRESENTATION && defn.getQueryResultsID() != null)) {
    populateFilterHelpers();
  }
}",0.9769189479334408
66818,"public void setApplicationClassLoader(ClassLoader appLoader){
  if (appLoader == null) {
    return;
  }
  ClassLoader loader=appLoader;
  try {
    appLoader.loadClass(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    loader=new RhinoClassLoaderDecoration(appLoader,getClass().getClassLoader());
  }
  context.setApplicationClassLoader(loader);
}","public void setApplicationClassLoader(final ClassLoader appLoader){
  if (appLoader == null) {
    return;
  }
  ClassLoader loader=appLoader;
  try {
    appLoader.loadClass(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    loader=AccessController.doPrivileged(new PrivilegedAction<ClassLoader>(){
      public ClassLoader run(){
        return new RhinoClassLoaderDecoration(appLoader,JavascriptEngine.class.getClassLoader());
      }
    }
);
  }
  context.setApplicationClassLoader(loader);
}",0.8091428571428572
66819,"public Script run(){
  return context.compileString(script,id,lineNumber,null);
}","public ClassLoader run(){
  return new RhinoClassLoaderDecoration(appLoader,JavascriptEngine.class.getClassLoader());
}",0.45
66820,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(100);
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}",0.9988969028425964
66821,"/** 
 * Sets postscript level.
 * @param level
 */
public void setPostscriptLevel(int level){
  options.put(PS_LEVEL,new Integer(level));
}","/** 
 * Sets postscript level.
 * @param level
 */
public void setPostscriptLevel(int level){
  options.put(PS_LEVEL,level);
}",0.9509433962264152
66822,"private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath,fontName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      String displayName=trueTypeWriter.getDisplayName();
      setFont(displayName,fontSize);
      return trueTypeWriter.toHexString(text);
    }
 catch (    Exception e) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}","private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath,fontName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      String displayName=trueTypeWriter.getDisplayName();
      setFont(displayName,fontSize);
      return trueTypeWriter.toHexString(text);
    }
 catch (    IOException ioe) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
catch (    DocumentException de) {
      log.log(Level.WARNING,""String_Node_Str"" + fontName);
    }
    return null;
  }
}",0.9138576779026216
66823,"private String getFontPath(String fontName){
  try {
    FontFactoryImp fontImpl=FontFactory.getFontImp();
    Properties trueTypeFonts=(Properties)getField(FontFactoryImp.class,""String_Node_Str"",fontImpl);
    String fontPath=trueTypeFonts.getProperty(fontName.toLowerCase());
    return fontPath;
  }
 catch (  Exception e) {
    log.log(Level.WARNING,""String_Node_Str"" + fontName);
  }
  return null;
}","private String getFontPath(String fontName){
  try {
    FontFactoryImp fontImpl=FontFactory.getFontImp();
    Properties trueTypeFonts=(Properties)getField(FontFactoryImp.class,""String_Node_Str"",fontImpl);
    String fontPath=trueTypeFonts.getProperty(fontName.toLowerCase());
    return fontPath;
  }
 catch (  IllegalAccessException e) {
    log.log(Level.WARNING,""String_Node_Str"" + fontName);
  }
catch (  NoSuchFieldException e) {
    log.log(Level.WARNING,""String_Node_Str"" + fontName);
  }
  return null;
}",0.8618063112078346
66824,"protected List<TrueTypeGlyph> getCharactersToOutput(int glyph) throws IOException {
  ArrayList<TrueTypeGlyph> characters=new ArrayList<TrueTypeGlyph>();
  int[] glyphDataPosition=getGlyphDataPosition(glyph);
  int glyphDataOffset=glyphDataPosition[0];
  int glyphDataLength=glyphDataPosition[1];
  if (glyphDataLength == 0)   return characters;
  int tableGlyphOffset=((int[])positionTables.get(""String_Node_Str""))[0];
  rf.seek(tableGlyphOffset + glyphDataOffset);
  int numContours=rf.readShort();
  if (numContours >= 0)   return characters;
  rf.skipBytes(8);
  for (; ; ) {
    int flags=rf.readUnsignedShort();
    Integer cGlyph=new Integer(rf.readUnsignedShort());
    TrueTypeGlyph trueTypeGlyph=new TrueTypeGlyph(cGlyph.intValue());
    if (!glyphDefined.contains(trueTypeGlyph)) {
      characters.add(trueTypeGlyph);
    }
    if ((flags & MORE_COMPONENTS) == 0)     return characters;
    int skip;
    if ((flags & ARG_1_AND_2_ARE_WORDS) != 0)     skip=4;
 else     skip=2;
    if ((flags & WE_HAVE_A_SCALE) != 0)     skip+=2;
 else     if ((flags & WE_HAVE_AN_X_AND_Y_SCALE) != 0)     skip+=4;
    if ((flags & WE_HAVE_A_TWO_BY_TWO) != 0)     skip+=8;
    rf.skipBytes(skip);
  }
}","protected List<TrueTypeGlyph> getCharactersToOutput(int glyph) throws IOException {
  ArrayList<TrueTypeGlyph> characters=new ArrayList<TrueTypeGlyph>();
  int[] glyphDataPosition=getGlyphDataPosition(glyph);
  int glyphDataOffset=glyphDataPosition[0];
  int glyphDataLength=glyphDataPosition[1];
  if (glyphDataLength == 0)   return characters;
  int tableGlyphOffset=((int[])positionTables.get(""String_Node_Str""))[0];
  rf.seek(tableGlyphOffset + glyphDataOffset);
  int numContours=rf.readShort();
  if (numContours >= 0)   return characters;
  rf.skipBytes(8);
  for (; ; ) {
    int flags=rf.readUnsignedShort();
    Integer cGlyph=rf.readUnsignedShort();
    TrueTypeGlyph trueTypeGlyph=new TrueTypeGlyph(cGlyph.intValue());
    if (!glyphDefined.contains(trueTypeGlyph)) {
      characters.add(trueTypeGlyph);
    }
    if ((flags & MORE_COMPONENTS) == 0)     return characters;
    int skip;
    if ((flags & ARG_1_AND_2_ARE_WORDS) != 0)     skip=4;
 else     skip=2;
    if ((flags & WE_HAVE_A_SCALE) != 0)     skip+=2;
 else     if ((flags & WE_HAVE_AN_X_AND_Y_SCALE) != 0)     skip+=4;
    if ((flags & WE_HAVE_A_TWO_BY_TWO) != 0)     skip+=8;
    rf.skipBytes(skip);
  }
}",0.994540109197816
66825,"private void outputSfnts(PrintStream out){
  String[] tablesDesired={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List<String> tablesToAdd=new ArrayList<String>();
  addTables(tablesToAdd,tablesDesired);
  Collections.sort(tablesToAdd);
  int tableNumber=tablesToAdd.size() + 1;
  int searchRange=getSearchRange(tableNumber);
  Util.putInt16(directoryRawData,4,tableNumber);
  Util.putInt16(directoryRawData,6,searchRange);
  Util.putInt16(directoryRawData,8,getExponent(searchRange));
  Util.putInt16(directoryRawData,10,(tableNumber << 4) - searchRange);
  ArrayList<byte[]> metadata=new ArrayList<byte[]>();
  ArrayList<byte[]> data=new ArrayList<byte[]>();
  metadata.add(directoryRawData);
  addGdirTable(metadata,0);
  int offset=12 + tableNumber * 16;
  byte[] headData=null;
  for (int i=0; i < tablesToAdd.size(); i++) {
    String name=(String)tablesToAdd.get(i);
    int newOffset=offset;
    try {
      int[] tableLocation=getTableLocation(name);
      if (tableLocation != null) {
        byte[] tableMetadata=metadataTables.get(name);
        setOffset(tableMetadata,offset);
        metadata.add(tableMetadata);
        newOffset=offset + getEvenLength(tableLocation[1]);
        List<byte[]> datas=readTable(name);
        if (""String_Node_Str"".equals(name)) {
          headData=datas.get(0);
        }
        data.addAll(datas);
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + name);
    }
    offset=newOffset;
  }
  long adjustment=calculateChecksumAdjustment(metadata,data);
  Util.putInt32(headData,8,adjustment);
  out.println(""String_Node_Str"");
  byte[] metadataArray=concatMetadata(metadata);
  out.println(toHexString(metadataArray));
  for (  byte[] bytes : data) {
    out.println(toHexString(bytes));
  }
  out.println(""String_Node_Str"");
}","private void outputSfnts(PrintStream out){
  String[] tablesDesired={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  List<String> tablesToAdd=new ArrayList<String>();
  addTables(tablesToAdd,tablesDesired);
  Collections.sort(tablesToAdd);
  int tableNumber=tablesToAdd.size() + 1;
  int searchRange=getSearchRange(tableNumber);
  Util.putInt16(directoryRawData,4,tableNumber);
  Util.putInt16(directoryRawData,6,searchRange);
  Util.putInt16(directoryRawData,8,getExponent(searchRange));
  Util.putInt16(directoryRawData,10,(tableNumber << 4) - searchRange);
  ArrayList<byte[]> metadata=new ArrayList<byte[]>();
  ArrayList<byte[]> data=new ArrayList<byte[]>();
  metadata.add(directoryRawData);
  addGdirTable(metadata,0);
  int offset=12 + tableNumber * 16;
  byte[] headData=null;
  for (int i=0; i < tablesToAdd.size(); i++) {
    String name=(String)tablesToAdd.get(i);
    int newOffset=offset;
    try {
      int[] tableLocation=getTableLocation(name);
      if (tableLocation != null) {
        byte[] tableMetadata=metadataTables.get(name);
        setOffset(tableMetadata,offset);
        metadata.add(tableMetadata);
        newOffset=offset + getEvenLength(tableLocation[1]);
        List<byte[]> datas=readTable(name);
        if (""String_Node_Str"".equals(name)) {
          headData=datas.get(0);
        }
        data.addAll(datas);
      }
    }
 catch (    IOException ioe) {
      logger.log(Level.WARNING,""String_Node_Str"" + name);
    }
catch (    DocumentException de) {
      logger.log(Level.WARNING,""String_Node_Str"" + name);
    }
    offset=newOffset;
  }
  long adjustment=calculateChecksumAdjustment(metadata,data);
  Util.putInt32(headData,8,adjustment);
  out.println(""String_Node_Str"");
  byte[] metadataArray=concatMetadata(metadata);
  out.println(toHexString(metadataArray));
  for (  byte[] bytes : data) {
    out.println(toHexString(bytes));
  }
  out.println(""String_Node_Str"");
}",0.9736235595390526
66826,"/** 
 * The information in the maps of the table 'cmap' is coded in several formats. Format 6 is a trimmed table mapping. It is similar to format 0 but can have less than 256 entries.
 * @return a <CODE>HashMap</CODE> representing this map
 * @throws IOException the font file could not be read
 */
HashMap<Integer,int[]> readFormat6() throws IOException {
  HashMap<Integer,int[]> h=new HashMap<Integer,int[]>();
  rf.skipBytes(4);
  int start_code=rf.readUnsignedShort();
  int code_count=rf.readUnsignedShort();
  for (int k=0; k < code_count; ++k) {
    int r[]=new int[2];
    r[0]=rf.readUnsignedShort();
    r[1]=getGlyphWidth(r[0]);
    h.put(new Integer(k + start_code),r);
  }
  return h;
}","/** 
 * The information in the maps of the table 'cmap' is coded in several formats. Format 6 is a trimmed table mapping. It is similar to format 0 but can have less than 256 entries.
 * @return a <CODE>HashMap</CODE> representing this map
 * @throws IOException the font file could not be read
 */
HashMap<Integer,int[]> readFormat6() throws IOException {
  HashMap<Integer,int[]> h=new HashMap<Integer,int[]>();
  rf.skipBytes(4);
  int start_code=rf.readUnsignedShort();
  int code_count=rf.readUnsignedShort();
  for (int k=0; k < code_count; ++k) {
    int r[]=new int[2];
    r[0]=rf.readUnsignedShort();
    r[1]=getGlyphWidth(r[0]);
    h.put(k + start_code,r);
  }
  return h;
}",0.9906272530641672
66827,"/** 
 * The information in the maps of the table 'cmap' is coded in several formats. Format 4 is the Microsoft standard character to glyph index mapping table.
 * @return a <CODE>HashMap</CODE> representing this map
 * @throws IOException the font file could not be read
 */
HashMap<Integer,int[]> readFormat4() throws IOException {
  HashMap<Integer,int[]> h=new HashMap<Integer,int[]>();
  int table_lenght=rf.readUnsignedShort();
  rf.skipBytes(2);
  int segCount=rf.readUnsignedShort() / 2;
  rf.skipBytes(6);
  int endCount[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    endCount[k]=rf.readUnsignedShort();
  }
  rf.skipBytes(2);
  int startCount[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    startCount[k]=rf.readUnsignedShort();
  }
  int idDelta[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    idDelta[k]=rf.readUnsignedShort();
  }
  int idRO[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    idRO[k]=rf.readUnsignedShort();
  }
  int glyphId[]=new int[table_lenght / 2 - 8 - segCount * 4];
  for (int k=0; k < glyphId.length; ++k) {
    glyphId[k]=rf.readUnsignedShort();
  }
  for (int k=0; k < segCount; ++k) {
    int glyph;
    for (int j=startCount[k]; j <= endCount[k] && j != 0xFFFF; ++j) {
      if (idRO[k] == 0) {
        glyph=(j + idDelta[k]) & 0xFFFF;
      }
 else {
        int idx=k + idRO[k] / 2 - segCount + j - startCount[k];
        if (idx >= glyphId.length)         continue;
        glyph=(glyphId[idx] + idDelta[k]) & 0xFFFF;
      }
      int r[]=new int[2];
      r[0]=glyph;
      r[1]=getGlyphWidth(r[0]);
      h.put(new Integer(fontSpecific ? ((j & 0xff00) == 0xf000 ? j & 0xff : j) : j),r);
    }
  }
  return h;
}","/** 
 * The information in the maps of the table 'cmap' is coded in several formats. Format 4 is the Microsoft standard character to glyph index mapping table.
 * @return a <CODE>HashMap</CODE> representing this map
 * @throws IOException the font file could not be read
 */
HashMap<Integer,int[]> readFormat4() throws IOException {
  HashMap<Integer,int[]> h=new HashMap<Integer,int[]>();
  int table_lenght=rf.readUnsignedShort();
  rf.skipBytes(2);
  int segCount=rf.readUnsignedShort() / 2;
  rf.skipBytes(6);
  int endCount[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    endCount[k]=rf.readUnsignedShort();
  }
  rf.skipBytes(2);
  int startCount[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    startCount[k]=rf.readUnsignedShort();
  }
  int idDelta[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    idDelta[k]=rf.readUnsignedShort();
  }
  int idRO[]=new int[segCount];
  for (int k=0; k < segCount; ++k) {
    idRO[k]=rf.readUnsignedShort();
  }
  int glyphId[]=new int[table_lenght / 2 - 8 - segCount * 4];
  for (int k=0; k < glyphId.length; ++k) {
    glyphId[k]=rf.readUnsignedShort();
  }
  for (int k=0; k < segCount; ++k) {
    int glyph;
    for (int j=startCount[k]; j <= endCount[k] && j != 0xFFFF; ++j) {
      if (idRO[k] == 0) {
        glyph=(j + idDelta[k]) & 0xFFFF;
      }
 else {
        int idx=k + idRO[k] / 2 - segCount + j - startCount[k];
        if (idx >= glyphId.length)         continue;
        glyph=(glyphId[idx] + idDelta[k]) & 0xFFFF;
      }
      int r[]=new int[2];
      r[0]=glyph;
      r[1]=getGlyphWidth(r[0]);
      h.put((fontSpecific ? ((j & 0xff00) == 0xf000 ? j & 0xff : j) : j),r);
    }
  }
  return h;
}",0.9967770290067388
66828,"/** 
 * Gets the glyph index and metrics for a character.
 * @param c the character
 * @return an <CODE>int</CODE> array with {glyph index, width}
 */
public int[] getMetricsTT(int c){
  if (!fontSpecific && cmap31 != null)   return (int[])cmap31.get(new Integer(c));
  if (fontSpecific && cmap10 != null)   return (int[])cmap10.get(new Integer(c));
  if (cmap31 != null)   return (int[])cmap31.get(new Integer(c));
  if (cmap10 != null)   return (int[])cmap10.get(new Integer(c));
  return null;
}","/** 
 * Gets the glyph index and metrics for a character.
 * @param c the character
 * @return an <CODE>int</CODE> array with {glyph index, width}
 */
public int[] getMetricsTT(int c){
  if (!fontSpecific && cmap31 != null)   return (int[])cmap31.get(c);
  if (fontSpecific && cmap10 != null)   return (int[])cmap10.get(c);
  if (cmap31 != null)   return (int[])cmap31.get(c);
  if (cmap10 != null)   return (int[])cmap10.get(c);
  return null;
}",0.9364406779661016
66829,"public int getGlyphIndex(char c){
  int[] glyphIndexs=(int[])getCMap().get(new Integer(c));
  return glyphIndexs[0];
}","public int getGlyphIndex(char c){
  int[] glyphIndexs=(int[])getCMap().get(c);
  return glyphIndexs[0];
}",0.9417040358744396
66830,"protected String getEscapedStr(String s){
  StringBuffer result=null;
  int spacePos=1;
  char[] s2char=s.toCharArray();
  for (int i=0, max=s2char.length, delta=0; i < max; i++) {
    char c=s2char[i];
    String replacement=null;
    if (c == ' ') {
      if (spacePos % 2 == 1 || i == max - 1) {
        replacement=""String_Node_Str"";
      }
      spacePos++;
    }
 else {
      spacePos=0;
    }
    if (!(c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFD))) {
      replacement=""String_Node_Str"";
    }
 else     if (c == '&') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '<') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '>') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '\t') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '=') {
      replacement=""String_Node_Str"";
    }
 else     if (c >= 0x80) {
      replacement=""String_Node_Str"" + Integer.toHexString(c) + ';';
    }
    if (replacement != null) {
      if (result == null) {
        result=new StringBuffer(s);
      }
      result.replace(i + delta,i + delta + 1,replacement);
      delta+=(replacement.length() - 1);
    }
  }
  if (result == null) {
    return s;
  }
  return result.toString();
}","protected String getEscapedStr(String s){
  StringBuffer result=null;
  int spacePos=1;
  char[] s2char=s.toCharArray();
  for (int i=0, max=s2char.length, delta=0; i < max; i++) {
    char c=s2char[i];
    String replacement=null;
    if (c == ' ') {
      if (spacePos % 2 != 0 || i == max - 1) {
        replacement=""String_Node_Str"";
      }
      spacePos++;
    }
 else {
      spacePos=0;
    }
    if (!(c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFD))) {
      replacement=""String_Node_Str"";
    }
 else     if (c == '&') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '<') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '>') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '\t') {
      replacement=""String_Node_Str"";
    }
 else     if (c == '=') {
      replacement=""String_Node_Str"";
    }
 else     if (c >= 0x80) {
      replacement=""String_Node_Str"" + Integer.toHexString(c) + ';';
    }
    if (replacement != null) {
      if (result == null) {
        result=new StringBuffer(s);
      }
      result.replace(i + delta,i + delta + 1,replacement);
      delta+=(replacement.length() - 1);
    }
  }
  if (result == null) {
    return s;
  }
  return result.toString();
}",0.996887159533074
66831,"/** 
 * Closes the document.
 */
public void end(){
  int slidesizex=(int)(Math.ceil(pageWidth * 8));
  int slidesizey=(int)(Math.ceil(pageHeight * 8));
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println((""String_Node_Str"" + slidesizex + ""String_Node_Str""+ slidesizey+ ""String_Node_Str""));
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""));
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""));
    if (fileNamesLists.containsKey(new Integer(i + 1))) {
      List<String> fileNames=fileNamesLists.get(new Integer(i + 1));
      for (      String fileName : fileNames) {
        println((""String_Node_Str"" + fileName + ""String_Node_Str""));
      }
    }
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  writer.close();
  writer=null;
}","/** 
 * Closes the document.
 */
public void end(){
  int slidesizex=(int)(Math.ceil(pageWidth * 8));
  int slidesizey=(int)(Math.ceil(pageHeight * 8));
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println((""String_Node_Str"" + slidesizex + ""String_Node_Str""+ slidesizey+ ""String_Node_Str""));
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ (i + 1)+ ""String_Node_Str""));
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  for (int i=0; i < currentPageNum; i++) {
    println((""String_Node_Str"" + (i + 1) + ""String_Node_Str""));
    if (fileNamesLists.containsKey(i + 1)) {
      List<String> fileNames=fileNamesLists.get(i + 1);
      for (      String fileName : fileNames) {
        println((""String_Node_Str"" + fileName + ""String_Node_Str""));
      }
    }
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  writer.close();
  writer=null;
}",0.9914921465968588
66832,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
      if (tooltip != null) {
        tooltip=codeLink(tooltip);
        print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
      }
      println(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
    }
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  if (fontInfo == null) {
    return;
  }
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
      if (tooltip != null) {
        tooltip=codeLink(tooltip);
        print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
      }
      println(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
    }
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9902325581395348
66833,"public static String formatDateTime(String format,ULocale locale){
  String language=locale.getLanguage();
  String code=locale2Code.get(locale);
  if (code == null) {
    code=locale2Code.get(new Locale(language));
  }
  if (code == null) {
    return format;
  }
  return code + format;
}","public static String formatDateTime(String format,ULocale locale){
  String code=locale2Code.get(locale);
  if (code == null) {
    String language=locale.getLanguage();
    code=locale2Code.get(new ULocale(language,""String_Node_Str""));
  }
  if (code == null) {
    return format;
  }
  return code + format;
}",0.831946755407654
66834,"private float getContentHeight(IContent content){
  return ExcelUtil.convertDimensionType(content.getHeight(),0,context.getDpi()) / 1000;
}","private float getContentHeight(IContent content){
  return ExcelUtil.convertDimensionType(content.getHeight(),0,context.getDpi()) / 1000f;
}",0.996415770609319
66835,"public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  float rowHeight=ExcelUtil.convertDimensionType(height,0,context.getDpi()) / 1000;
  engine.endRow(rowHeight);
}","public void endRow(IRowContent row){
  DimensionType height=row.getHeight();
  float rowHeight=ExcelUtil.convertDimensionType(height,0,context.getDpi()) / 1000f;
  engine.endRow(rowHeight);
}",0.9973753280839897
66836,"/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope,int rawIdStartingValue) throws DataException {
  super(rService,odiResult,scope,rawIdStartingValue);
  Object[] params={rService,odiResult,scope};
  logger.entering(ResultIterator2.class.getName(),""String_Node_Str"",params);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedRowId=0;
  this.isSummary=(rService.getQueryDefn() instanceof IQueryDefinition) ? ((IQueryDefinition)rService.getQueryDefn()).isSummaryQuery() : false;
  if (this.isSummary) {
    if (lowestGroupLevel == 0)     this.groupLevelCalculator=new SummaryGroupLevelCalculator(null);
 else {
      int[][] groupIndex=new int[lowestGroupLevel + 1][];
      for (int i=0; i <= lowestGroupLevel; i++) {
        groupIndex[i]=this.odiResult.getGroupStartAndEndIndex(i);
      }
      this.groupLevelCalculator=new SummaryGroupLevelCalculator(groupIndex);
    }
    if (rService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
      this.saveToDoc=true;
      streamManager=new StreamManager(rService.getSession().getEngineContext(),new QueryResultInfo(rService.getQueryResults().getID(),null,0));
      try {
        bindings=findSavedBinding(rService.getQueryDefn().getBindings().values().iterator());
        this.doSaveResultClass(streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),bindings);
        raDataSet=(RAOutputStream)streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        rowCountOffset=raDataSet.getOffset();
        dataSetStream=new DataOutputStream(raDataSet);
        IOUtil.writeInt(dataSetStream,-1);
        dataSetLenStream=new DataOutputStream(streamManager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
      }
 catch (      Exception e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
  }
  logger.exiting(ResultIterator2.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope,int rawIdStartingValue) throws DataException {
  super(rService,odiResult,scope,rawIdStartingValue);
  Object[] params={rService,odiResult,scope};
  logger.entering(ResultIterator2.class.getName(),""String_Node_Str"",params);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedRowId=0;
  this.isSummary=(rService.getQueryDefn() instanceof IQueryDefinition) ? ((IQueryDefinition)rService.getQueryDefn()).isSummaryQuery() : false;
  if (this.isSummary) {
    if (lowestGroupLevel == 0)     this.groupLevelCalculator=new SummaryGroupLevelCalculator(null);
 else {
      int[][] groupIndex=new int[lowestGroupLevel + 1][];
      for (int i=0; i <= lowestGroupLevel; i++) {
        groupIndex[i]=this.odiResult.getGroupStartAndEndIndex(i);
      }
      this.groupLevelCalculator=new SummaryGroupLevelCalculator(groupIndex);
    }
    if (rService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
      this.saveToDoc=true;
      streamManager=new StreamManager(rService.getSession().getEngineContext(),new QueryResultInfo(rService.getQueryResults().getID(),null,0));
      try {
        bindings=findSavedBinding(rService.getQueryDefn().getBindings());
        this.doSaveResultClass(streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),bindings);
        raDataSet=(RAOutputStream)streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        rowCountOffset=raDataSet.getOffset();
        dataSetStream=new DataOutputStream(raDataSet);
        IOUtil.writeInt(dataSetStream,-1);
        dataSetLenStream=new DataOutputStream(streamManager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
      }
 catch (      Exception e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
  }
  logger.exiting(ResultIterator2.class.getName(),""String_Node_Str"");
}",0.9956896551724138
66837,"private List<IBinding> findSavedBinding(Iterator<IBinding> bindingIt){
  List<IBinding> bindingList=new ArrayList<IBinding>();
  while (bindingIt.hasNext()) {
    IBinding binding=bindingIt.next();
    List<String> referencedBindings=new ArrayList<String>();
    try {
      IBaseExpression expr=binding.getExpression();
      if (expr != null) {
        referencedBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.DATASET_ROW_INDICATOR);
      }
      if (referencedBindings.isEmpty() && binding.getAggrFunction() != null) {
        for (        IBaseExpression argExpr : (List<IBaseExpression>)binding.getArguments()) {
          referencedBindings=ExpressionCompilerUtil.extractColumnExpression(argExpr,ExpressionUtil.DATASET_ROW_INDICATOR);
          if (!referencedBindings.isEmpty())           break;
        }
      }
      if (!referencedBindings.isEmpty()) {
        bindingList.add(binding);
      }
    }
 catch (    DataException e) {
    }
  }
  return bindingList;
}","private List<IBinding> findSavedBinding(Map bindingMap){
  Iterator bindingIt=bindingMap.values().iterator();
  List<IBinding> bindingList=new ArrayList<IBinding>();
  while (bindingIt.hasNext()) {
    IBinding binding=(IBinding)bindingIt.next();
    List<String> referencedBindings=new ArrayList<String>();
    try {
      if (binding.getAggrFunction() != null) {
        IBaseExpression expr=binding.getExpression();
        if (expr != null) {
          referencedBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.DATASET_ROW_INDICATOR);
        }
        if (!referencedBindings.isEmpty()) {
          bindingList.add(binding);
          continue;
        }
        for (        IBaseExpression argExpr : (List<IBaseExpression>)binding.getArguments()) {
          referencedBindings=ExpressionCompilerUtil.extractColumnExpression(argExpr,ExpressionUtil.DATASET_ROW_INDICATOR);
          if (!referencedBindings.isEmpty())           break;
        }
        if (!referencedBindings.isEmpty()) {
          bindingList.add(binding);
          continue;
        }
        boolean needRecalcualte=false;
        if (expr != null) {
          referencedBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.ROW_INDICATOR);
          for (int i=0; i < referencedBindings.size(); i++) {
            IBinding b=(IBinding)bindingMap.get(referencedBindings.get(i));
            if (b != null && b.getAggrFunction() != null) {
              needRecalcualte=true;
              break;
            }
          }
        }
        if (needRecalcualte) {
          continue;
        }
        for (        IBaseExpression argExpr : (List<IBaseExpression>)binding.getArguments()) {
          referencedBindings=ExpressionCompilerUtil.extractColumnExpression(argExpr,ExpressionUtil.ROW_INDICATOR);
          for (int i=0; i < referencedBindings.size(); i++) {
            IBinding b=(IBinding)bindingMap.get(referencedBindings.get(i));
            if (b != null && b.getAggrFunction() != null) {
              needRecalcualte=true;
              break;
            }
          }
          if (needRecalcualte)           break;
        }
        if (!needRecalcualte) {
          bindingList.add(binding);
        }
      }
 else {
        bindingList.add(binding);
      }
    }
 catch (    DataException e) {
      bindingList.add(binding);
    }
  }
  return bindingList;
}",0.4861751152073733
66838,"public int getOutputType(){
  if (outputType == -1) {
    if ((""String_Node_Str"".equals(sExtension) && !""String_Node_Str"".equalsIgnoreCase(outputFormat)) || ""String_Node_Str"".equals(sExtension)) {
      outputType=OUTPUT_AS_IMAGE;
    }
 else {
      outputType=OUTPUT_AS_IMAGE_WITH_MAP;
    }
  }
  return outputType;
}","public int getOutputType(){
  if (outputType == -1) {
    if (""String_Node_Str"".equals(sExtension) || ""String_Node_Str"".equals(sExtension)) {
      outputType=OUTPUT_AS_IMAGE;
    }
 else {
      outputType=OUTPUT_AS_IMAGE_WITH_MAP;
    }
  }
  return outputType;
}",0.905982905982906
66839,"public IResultObject fetch() throws IOException, DataException {
  if (rowBuffer == null) {
    prepareFirstFetch();
  }
  if (rowBufferSize == 0) {
    return null;
  }
  ValueIndex reObj=rowBuffer[0];
  IResultObject value=reObj.value;
  IResultObject readValue=subRowIterators[reObj.index].fetch();
  if (readValue == null) {
    rowBufferSize--;
    if (rowBufferSize > 0) {
      System.arraycopy(rowBuffer,1,rowBuffer,0,rowBufferSize);
    }
  }
 else {
    int pos=0;
    mValueIndex.value=readValue;
    mValueIndex.index=reObj.index;
    if (rowBufferSize > 1) {
      pos=Arrays.binarySearch(rowBuffer,mValueIndex);
      if (pos < 0)       pos=(pos + 1) * -1;
      pos--;
      if (pos == -1)       pos=0;
      if (pos > 0) {
        System.arraycopy(rowBuffer,1,rowBuffer,0,pos);
      }
    }
    rowBuffer[pos]=mValueIndex;
    mValueIndex=reObj;
  }
  return value;
}","public IResultObject fetch() throws IOException, DataException {
  if (rowBuffer == null) {
    prepareFirstFetch();
  }
  if (rowBufferSize == 0) {
    return null;
  }
  ValueIndex reObj=rowBuffer[0];
  IResultObject value=reObj.value;
  IResultObject readValue=subRowIterators[reObj.index].fetch();
  if (readValue == null) {
    rowBufferSize--;
    if (rowBufferSize > 0) {
      ValueIndex[] tBuffer=new ValueIndex[rowBufferSize];
      System.arraycopy(rowBuffer,1,tBuffer,0,rowBufferSize);
      rowBuffer=tBuffer;
    }
  }
 else {
    int pos=0;
    mValueIndex.value=readValue;
    mValueIndex.index=reObj.index;
    if (rowBufferSize > 1) {
      pos=Arrays.binarySearch(rowBuffer,mValueIndex);
      if (pos < 0)       pos=(pos + 1) * -1;
      pos--;
      if (pos == -1)       pos=0;
      if (pos > 0) {
        System.arraycopy(rowBuffer,1,rowBuffer,0,pos);
      }
    }
    rowBuffer[pos]=mValueIndex;
    mValueIndex=reObj;
  }
  return value;
}",0.952947539210384
66840,"/** 
 * @return
 * @throws IOException
 */
public Object pop() throws IOException {
  if (popBuffer == null) {
    initPop();
  }
  if (popBufferSize == 0) {
    return null;
  }
  ValueIndex reObj=popBuffer[0];
  Object reValue=reObj.value;
  Object readValue=readNext(reObj.index);
  if (readValue == null) {
    popBufferSize--;
    if (popBufferSize > 0) {
      System.arraycopy(popBuffer,1,popBuffer,0,popBufferSize);
    }
  }
 else {
    int pos=0;
    mValueIndex.value=readValue;
    mValueIndex.index=reObj.index;
    if (popBufferSize > 1) {
      pos=Arrays.binarySearch(popBuffer,mValueIndex);
      if (pos < 0)       pos=(pos + 1) * -1;
      pos--;
      if (pos == -1)       pos=0;
      if (pos > 0) {
        System.arraycopy(popBuffer,1,popBuffer,0,pos);
      }
    }
    popBuffer[pos]=mValueIndex;
    mValueIndex=reObj;
  }
  if (forceDistinct) {
    if (lastPopObject == null) {
      lastPopObject=reValue;
    }
 else {
      if (((Comparable)lastPopObject).compareTo(reValue) == 0) {
        return pop();
      }
    }
  }
  lastPopObject=reValue;
  return reValue;
}","/** 
 * @return
 * @throws IOException
 */
public Object pop() throws IOException {
  if (popBuffer == null) {
    initPop();
  }
  if (popBufferSize == 0) {
    return null;
  }
  ValueIndex reObj=popBuffer[0];
  Object reValue=reObj.value;
  Object readValue=readNext(reObj.index);
  if (readValue == null) {
    popBufferSize--;
    if (popBufferSize > 0) {
      ValueIndex[] tBuffer=new ValueIndex[popBufferSize];
      System.arraycopy(popBuffer,1,tBuffer,0,popBufferSize);
      popBuffer=tBuffer;
    }
  }
 else {
    int pos=0;
    mValueIndex.value=readValue;
    mValueIndex.index=reObj.index;
    if (popBufferSize > 1) {
      pos=Arrays.binarySearch(popBuffer,mValueIndex);
      if (pos < 0)       pos=(pos + 1) * -1;
      pos--;
      if (pos == -1)       pos=0;
      if (pos > 0) {
        System.arraycopy(popBuffer,1,popBuffer,0,pos);
      }
    }
    popBuffer[pos]=mValueIndex;
    mValueIndex=reObj;
  }
  if (forceDistinct) {
    if (lastPopObject == null) {
      lastPopObject=reValue;
    }
 else {
      if (((Comparable)lastPopObject).compareTo(reValue) == 0) {
        return pop();
      }
    }
  }
  lastPopObject=reValue;
  return reValue;
}",0.9617582417582418
66841,"/** 
 * @param target
 * @since 2.5.1
 */
protected void copySeriesDefinition(Object target){
  Chart targetCM=context.getModel();
  if (target != null && target instanceof Chart) {
    targetCM=(Chart)target;
  }
  ExtendedItemHandle refHandle=getChartReferenceItemHandle();
  if (refHandle != null) {
    ChartReportItemUtil.copyChartSeriesDefinition(ChartReportItemUtil.getChartFromHandle(refHandle),targetCM);
  }
}","/** 
 * @param target
 * @since 2.5.1
 */
protected void copySeriesDefinition(Object target){
  Chart targetCM=context.getModel();
  if (target != null && target instanceof Chart) {
    targetCM=(Chart)target;
  }
  ExtendedItemHandle refHandle=getChartReferenceItemHandle();
  if (refHandle != null) {
    Chart srcChart=ChartReportItemUtil.getChartFromHandle(refHandle);
    ChartReportItemUtil.copyChartSeriesDefinition(srcChart,targetCM);
    ChartReportItemUtil.copyChartSampleData(srcChart,targetCM);
  }
}",0.8378088077336198
66842,"public void setTotalPage(ITextArea totalPage){
  super.setTotalPage(totalPage);
  isTotalPage=true;
  HashMap<Float,PdfTemplate> map=((PDFPageDevice)pageDevice).getTemplateMap();
  if (!map.isEmpty()) {
    float scaleCache=this.scale;
    Iterator<Float> iter=map.keySet().iterator();
    while (iter.hasNext()) {
      Float s=iter.next();
      PdfTemplate template=map.get(s);
      if (template != null) {
        this.scale=s.floatValue();
        drawText(totalPage);
      }
    }
    this.scale=scaleCache;
  }
  isTotalPage=false;
}","public void setTotalPage(ITextArea totalPage){
  super.setTotalPage(totalPage);
  isTotalPage=true;
  HashMap<Float,PdfTemplate> map=((PDFPageDevice)pageDevice).getTemplateMap();
  if (!map.isEmpty()) {
    float scaleCache=this.scale;
    for (    Entry<Float,PdfTemplate> e : map.entrySet()) {
      Float s=e.getKey();
      PdfTemplate template=e.getValue();
      if (template != null) {
        this.scale=s.floatValue();
        drawText(totalPage);
      }
    }
    this.scale=scaleCache;
  }
  isTotalPage=false;
}",0.8761726078799249
66843,"/** 
 * checks if the name is duplicate
 * @return Returns true if the name is duplicate,and false if it isduplicate
 */
private boolean isDuplicateName(){
  String name=nameEditor.getText().trim();
  return !name.equals(originalName) && Utility.checkDataSetName(name);
}","/** 
 * checks if the name is duplicate
 * @return Returns true if the name is duplicate,and false if it isduplicate
 */
private boolean isDuplicateName(){
  String name=nameEditor.getText().trim();
  return Utility.checkDataSetName(name);
}",0.94140625
66844,"/** 
 */
private void populateDataTypeComboItems(){
  Map<String,String> indexMap=new HashMap<String,String>();
  String[] dataTypeDisplayNames=new String[dataTypes.length];
  for (int i=0; i < dataTypes.length; i++) {
    dataTypeDisplayNames[i]=dataTypes[i].getDisplayName();
    indexMap.put(dataTypeDisplayNames[i],dataTypes[i].getName());
  }
  Arrays.sort(dataTypeDisplayNames);
  cmbDataType.setItems(dataTypeDisplayNames);
  for (int i=0; i < dataTypeDisplayNames.length; i++) {
    String name=(String)indexMap.get(dataTypeDisplayNames[i]);
    cmbDataType.setData(name,new Integer(i));
  }
}","/** 
 */
private void populateDataTypeComboItems(){
  Map<String,String> indexMap=new HashMap<String,String>();
  String[] dataTypeDisplayNames=new String[dataTypes.length];
  for (int i=0; i < dataTypes.length; i++) {
    dataTypeDisplayNames[i]=dataTypes[i].getDisplayName();
    indexMap.put(dataTypeDisplayNames[i],dataTypes[i].getName());
  }
  Arrays.sort(dataTypeDisplayNames);
  cmbDataType.setItems(dataTypeDisplayNames);
  for (int i=0; i < dataTypeDisplayNames.length; i++) {
    String name=(String)indexMap.get(dataTypeDisplayNames[i]);
    cmbDataType.setData(name,Integer.valueOf(i));
  }
}",0.9900497512437813
66845,"/** 
 * Update the computed columns after removing an established one and cache the updated DataSetViewData[]
 */
private void updateColumnsOfDataSetHandle(){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
  int inexistence=0;
  for (int i=0; i < items.length; i++) {
    boolean exist=false;
    if (items[i].isComputedColumn()) {
      Iterator iter=computedColumns.iterator();
      while (iter.hasNext()) {
        ComputedColumn computedColumn=null;
        Object obj=iter.next();
        if (obj instanceof ComputedColumnHandle) {
          computedColumn=(ComputedColumn)((ComputedColumnHandle)obj).getStructure();
        }
        if (items[i].getName().equals(computedColumn.getName())) {
          exist=true;
        }
      }
      if (!exist) {
        items[i]=null;
        inexistence++;
      }
    }
  }
  if (inexistence == 0)   return;
  DataSetViewData[] existItems=new DataSetViewData[items.length - inexistence];
  int index=0;
  for (int i=0; i < items.length; i++) {
    if (items[i] != null) {
      existItems[index]=items[i];
      index++;
    }
  }
  DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,existItems);
}","/** 
 * Update the computed columns after removing an established one and cache the updated DataSetViewData[]
 */
private void updateColumnsOfDataSetHandle(){
  DataSetHandle dataSet=((DataSetEditor)getContainer()).getHandle();
  DataSetViewData[] items=DataSetProvider.getCurrentInstance().getColumns(dataSet,false,true,true);
  int inexistence=0;
  for (int i=0; i < items.length; i++) {
    boolean exist=false;
    if (items[i].isComputedColumn()) {
      Iterator iter=computedColumns.iterator();
      while (iter.hasNext()) {
        ComputedColumn computedColumn=null;
        Object obj=iter.next();
        if (obj instanceof ComputedColumnHandle) {
          computedColumn=(ComputedColumn)((ComputedColumnHandle)obj).getStructure();
        }
        if (computedColumn != null && items[i].getName().equals(computedColumn.getName())) {
          exist=true;
        }
      }
      if (!exist) {
        items[i]=null;
        inexistence++;
      }
    }
  }
  if (inexistence == 0)   return;
  DataSetViewData[] existItems=new DataSetViewData[items.length - inexistence];
  int index=0;
  for (int i=0; i < items.length; i++) {
    if (items[i] != null) {
      existItems[index]=items[i];
      index++;
    }
  }
  DataSetProvider.getCurrentInstance().updateColumnsOfDataSetHandle(dataSet,existItems);
}",0.9900459418070444
66846,"/** 
 * @param parent
 * @param index
 */
private void createAggrListCell(final Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbAggregation=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbAggregation.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbAggregation.setVisibleItemCount(30);
  cmbAggregation.add(BLANK);
  cmbAggregation.setData(BLANK,new Integer(0));
  for (int i=0; i < functions.length; i++) {
    cmbAggregation.add(functions[i].getDisplayName());
    cmbAggregation.setData(functions[i].getName(),new Integer(i + 1));
  }
  String aggrFuncName=(String)getProperty(getStructureOrHandle(),cellProperties[index]);
  int selectionIndex=getAggrFuncIndex(aggrFuncName);
  cmbAggregation.select(selectionIndex);
  cmbAggregation.setToolTipText(selectionIndex > 0 ? functions[selectionIndex - 1].getDescription() : BLANK);
  cmbAggregation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAggrSelectEvent(true);
      validateSyntax();
      updateFilterUIStatus();
    }
  }
);
}","/** 
 * @param parent
 * @param index
 */
private void createAggrListCell(final Composite parent,final int index){
  Label label=ControlProvider.createLabel(parent,dialogLabels[index]);
  this.maxWidth=computeMaxWidth(label);
  cmbAggregation=ControlProvider.createCombo(parent,SWT.READ_ONLY);
  cmbAggregation.setLayoutData(ControlProvider.getGridDataWithHSpan(2));
  cmbAggregation.setVisibleItemCount(30);
  cmbAggregation.add(BLANK);
  cmbAggregation.setData(BLANK,Integer.valueOf(0));
  for (int i=0; i < functions.length; i++) {
    cmbAggregation.add(functions[i].getDisplayName());
    cmbAggregation.setData(functions[i].getName(),Integer.valueOf(i + 1));
  }
  String aggrFuncName=(String)getProperty(getStructureOrHandle(),cellProperties[index]);
  int selectionIndex=getAggrFuncIndex(aggrFuncName);
  cmbAggregation.select(selectionIndex);
  cmbAggregation.setToolTipText(selectionIndex > 0 ? functions[selectionIndex - 1].getDescription() : BLANK);
  cmbAggregation.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      handleAggrSelectEvent(true);
      validateSyntax();
      updateFilterUIStatus();
    }
  }
);
}",0.989804587935429
66847,"protected void okPressed(){
  super.okPressed();
  try {
    DataSetUIUtil.updateColumnCache(this.getHandle(),false);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (super.rootNode.hasSubNodes()) {
    PropertyNode[] nodes=rootNode.getSubNodes();
    for (int n=0; n < nodes.length; n++) {
      if (nodes[n].getPage() instanceof DataSetParametersPage) {
        if (viewer == null && viewer.getTree() == null)         return;
        DataSetParametersPage page=(DataSetParametersPage)nodes[n].getPage();
        if (!page.canFinish() && !viewer.getTree().isDisposed()) {
          TreeItem firstNode=viewer.getTree().getItems()[n];
          StructuredSelection select=new StructuredSelection(firstNode.getData());
          viewer.setSelection(select);
          String name=((DataSetParametersPage)nodes[n].getPage()).getNoneValuedParameterName();
          this.setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{name}),IMessageProvider.ERROR);
          return;
        }
      }
    }
  }
}","protected void okPressed(){
  super.okPressed();
  try {
    DataSetUIUtil.updateColumnCache(this.getHandle(),false);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (super.rootNode.hasSubNodes()) {
    PropertyNode[] nodes=rootNode.getSubNodes();
    for (int n=0; n < nodes.length; n++) {
      if (nodes[n].getPage() instanceof DataSetParametersPage) {
        if (viewer == null || viewer.getTree() == null)         return;
        DataSetParametersPage page=(DataSetParametersPage)nodes[n].getPage();
        if (!page.canFinish() && !viewer.getTree().isDisposed()) {
          TreeItem firstNode=viewer.getTree().getItems()[n];
          StructuredSelection select=new StructuredSelection(firstNode.getData());
          viewer.setSelection(select);
          String name=((DataSetParametersPage)nodes[n].getPage()).getNoneValuedParameterName();
          this.setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{name}),IMessageProvider.ERROR);
          return;
        }
      }
    }
  }
}",0.998095238095238
66848,"private void parsePageSize(IReportContent report){
  SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  this.pageWidth=ExcelUtil.convertDimensionType(masterPage.getPageWidth(),0,dpi);
  this.pageHeight=ExcelUtil.convertDimensionType(masterPage.getPageHeight(),0,dpi);
  leftMargin=ExcelUtil.convertDimensionType(masterPage.getLeftMargin(),pageWidth,dpi);
  rightMargin=ExcelUtil.convertDimensionType(masterPage.getRightMargin(),pageWidth,dpi);
  topMargin=ExcelUtil.convertDimensionType(masterPage.getTopMargin(),pageHeight,dpi);
  bottomMargin=ExcelUtil.convertDimensionType(masterPage.getBottomMargin(),pageHeight,dpi);
  this.contentWidth=pageWidth - leftMargin - rightMargin;
}","public void parsePageSize(IPageContent page){
  this.pageWidth=ExcelUtil.convertDimensionType(page.getPageWidth(),0,dpi);
  this.pageHeight=ExcelUtil.convertDimensionType(page.getPageHeight(),0,dpi);
  leftMargin=ExcelUtil.convertDimensionType(page.getMarginLeft(),pageWidth,dpi);
  rightMargin=ExcelUtil.convertDimensionType(page.getMarginRight(),pageWidth,dpi);
  topMargin=ExcelUtil.convertDimensionType(page.getMarginTop(),pageHeight,dpi);
  bottomMargin=ExcelUtil.convertDimensionType(page.getMarginBottom(),pageHeight,dpi);
  this.contentWidth=pageWidth - leftMargin - rightMargin;
}",0.7738542449286251
66849,"public void setReport(IReportContent report){
  this.report=report;
  IRenderOption renderOptions=report.getReportContext().getRenderOption();
  Object dpi=renderOptions.getOption(IRenderOption.RENDER_DPI);
  int renderDpi=0;
  if (dpi != null && dpi instanceof Integer) {
    renderDpi=((Integer)dpi).intValue();
  }
  this.dpi=PropertyUtil.getRenderDpi(report,renderDpi);
  Object textWrapping=renderOptions.getOption(IExcelRenderOption.WRAPPING_TEXT);
  if (textWrapping instanceof Boolean) {
    this.wrappingText=((Boolean)textWrapping);
  }
  Object officeVersion=renderOptions.getOption(IExcelRenderOption.OFFICE_VERSION);
  if (""String_Node_Str"".equals(officeVersion)) {
    this.officeVersion=""String_Node_Str"";
  }
  Object hideGridlines=renderOptions.getOption(IExcelRenderOption.HIDE_GRIDLINES);
  if (hideGridlines instanceof Boolean) {
    this.hideGridlines=(Boolean)hideGridlines;
  }
  Object ignoreImage=renderOptions.getOption(IExcelRenderOption.IGNORE_IMAGE);
  if (ignoreImage instanceof Boolean) {
    this.ignoreImage=(Boolean)ignoreImage;
  }
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  parseReportOrientation(designHandle);
  parseReportLayout(designHandle);
  parseSheetName(designHandle);
  parsePageSize(report);
}","public void setReport(IReportContent report){
  this.report=report;
  IRenderOption renderOptions=report.getReportContext().getRenderOption();
  Object dpi=renderOptions.getOption(IRenderOption.RENDER_DPI);
  int renderDpi=0;
  if (dpi != null && dpi instanceof Integer) {
    renderDpi=((Integer)dpi).intValue();
  }
  this.dpi=PropertyUtil.getRenderDpi(report,renderDpi);
  Object textWrapping=renderOptions.getOption(IExcelRenderOption.WRAPPING_TEXT);
  if (textWrapping instanceof Boolean) {
    this.wrappingText=((Boolean)textWrapping);
  }
  Object officeVersion=renderOptions.getOption(IExcelRenderOption.OFFICE_VERSION);
  if (""String_Node_Str"".equals(officeVersion)) {
    this.officeVersion=""String_Node_Str"";
  }
  Object hideGridlines=renderOptions.getOption(IExcelRenderOption.HIDE_GRIDLINES);
  if (hideGridlines instanceof Boolean) {
    this.hideGridlines=(Boolean)hideGridlines;
  }
  Object ignoreImage=renderOptions.getOption(IExcelRenderOption.IGNORE_IMAGE);
  if (ignoreImage instanceof Boolean) {
    this.ignoreImage=(Boolean)ignoreImage;
  }
  ReportDesignHandle designHandle=report.getDesign().getReportDesign();
  parseReportOrientation(designHandle);
  parseReportLayout(designHandle);
  parseSheetName(designHandle);
}",0.9900754267566496
66850,"public void startPage(IPageContent pageContent) throws BirtException {
  this.pageContent=pageContent;
  if (page == null || context.isEnableMultipleSheet()) {
    newPage();
  }
  page.startPage(pageContent);
  XlsContainer topContainer=containers.peek();
  topContainer.setStyle(StyleBuilder.createStyleEntry(pageContent.getComputedStyle()));
  if (!page.isOutputInMasterPage() && pageContent.getPageHeader() != null) {
    contentVisitor.visitChildren(pageContent.getPageHeader(),null);
  }
}","public void startPage(IPageContent pageContent) throws BirtException {
  if (page == null || context.isEnableMultipleSheet()) {
    initializePage(pageContent);
    newPage();
  }
  page.startPage(pageContent);
  XlsContainer topContainer=containers.peek();
  topContainer.setStyle(StyleBuilder.createStyleEntry(pageContent.getComputedStyle()));
  if (!page.isOutputInMasterPage() && pageContent.getPageHeader() != null) {
    contentVisitor.visitChildren(pageContent.getPageHeader(),null);
  }
}",0.934409687184662
66851,"public void initalize(IStyle style){
  setCacheSize();
  ContainerSizeInfo rule=new ContainerSizeInfo(0,context.getContentWidth());
  engine=new StyleEngine(this);
  containers.push(createContainer(rule,style,null));
  createWriter();
}","public void initalize(IStyle style){
  setCacheSize();
  engine=new StyleEngine(this);
  createWriter();
}",0.6198830409356725
66852,"private void outputDataIfBufferIsFull(){
  if (getCurrentContainer().getRowIndex() >= maxRow) {
    outputSheet(page);
    newPage();
    page.startPage(pageContent);
    page.setHeader(null);
  }
}","private void outputDataIfBufferIsFull(){
  if (getCurrentContainer().getRowIndex() >= maxRow) {
    Page lastPage=page;
    outputSheet(page);
    newPage();
    page.startPage(lastPage);
    page.setHeader(null);
  }
}",0.8968824940047961
66853,"public static ColumnsInfo createTable(ITableContent table,int width,int dpi){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth != 0 && unassignedCount == 0 && table.getWidth() != null) {
    int totalResized=0;
    for (int i=0; i < columnCount - 1; i++) {
      columns[i]=resize(columns[i],totalAssigned,leftWidth);
      totalResized+=columns[i];
    }
    columns[columnCount - 1]=tableWidth - totalResized;
  }
 else   if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}","public static ColumnsInfo createTable(ITableContent table,int width,int dpi){
  int tableWidth=getElementWidth(table,width,dpi);
  int columnCount=table.getColumnCount();
  if (columnCount == 0) {
    return null;
  }
  int[] columns=new int[columnCount];
  int unassignedCount=0;
  int totalAssigned=0;
  for (int i=0; i < columnCount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      columns[i]=-1;
      unassignedCount++;
    }
 else {
      columns[i]=ExcelUtil.convertDimensionType(value,tableWidth,dpi);
      totalAssigned+=columns[i];
    }
  }
  int leftWidth=tableWidth - totalAssigned;
  if (leftWidth < 0 && unassignedCount > 0) {
    int totalResized=0;
    int lastAssignedIndex=0;
    for (int i=0; i < columnCount; i++) {
      if (columns[i] == -1) {
        columns[i]=0;
      }
 else {
        columns[i]=resize(columns[i],totalAssigned,leftWidth);
        lastAssignedIndex=i;
      }
      totalResized+=columns[i];
    }
    columns[lastAssignedIndex]+=tableWidth - totalResized;
  }
 else   if (leftWidth >= 0 && unassignedCount > 0) {
    int per=(int)leftWidth / unassignedCount;
    int index=0;
    for (int i=0; i < columns.length; i++) {
      if (columns[i] == -1) {
        columns[i]=per;
        index=i;
      }
    }
    columns[index]=leftWidth - per * (unassignedCount - 1);
  }
  return new ColumnsInfo(columns);
}",0.8999034438364982
66854,"public void startPage(IPageContent pageContent){
  orientation=capitalize(pageContent.getOrientation());
  if (needOutputInMasterPage(pageContent.getPageHeader()) && needOutputInMasterPage(pageContent.getPageFooter())) {
    outputInMasterPage=true;
    header=formatHeaderFooter(pageContent.getPageHeader());
    footer=formatHeaderFooter(pageContent.getPageFooter());
  }
}","public void startPage(Page page){
  orientation=page.orientation;
  outputInMasterPage=page.outputInMasterPage;
  header=page.header;
  footer=page.footer;
}",0.4736842105263157
66855,"public static int convertBorderWeight(int width){
  int w=-1;
  if (width >= 749 && width < 1499) {
    w=1;
  }
 else   if (width >= 1499 && width < 2249) {
    w=2;
  }
 else   if (width >= 2249) {
    w=3;
  }
 else {
    w=2;
  }
  return w;
}","public static int convertBorderWeight(int width){
  int w=-1;
  if (width <= 750) {
    w=1;
  }
 else   if (width >= 750 && width <= 2250) {
    w=2;
  }
 else   if (width > 2250) {
    w=3;
  }
 else {
    w=2;
  }
  return w;
}",0.6918238993710691
66856,"/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    boolean selectionChanged=true;
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    Iterator iter=handle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP).iterator();
    while (iter.hasNext()) {
      JoinConditionHandle condition=(JoinConditionHandle)iter.next();
      if ((condition.getLeftDataSet() != null && condition.getLeftDataSet().equals(this.leftDataSetName)) && (condition.getLeftDataSet() != null && condition.getRightDataSet().equals(this.rightDataSetName))) {
        selectionChanged=false;
      }
    }
    if (selectionChanged) {
      List datasetName=handle.getDataSetNames();
      for (int i=0; i < datasetName.size(); i++) {
        try {
          handle.removeDataSet((String)datasetName.get(i));
        }
 catch (        SemanticException e) {
        }
      }
      if (leftDataSetName.equals(rightDataSetName))       handle.addDataSet(leftDataSetName);
 else {
        handle.addDataSet(leftDataSetName);
        handle.addDataSet(rightDataSetName);
      }
      setParameters(handle);
      addColumnHints(handle);
      if (propertyHandle != null) {
        JoinCondition condition=createJoinCondition();
        propertyHandle.removeItem(0);
        propertyHandle.addItem(condition);
        return true;
      }
 else       return false;
    }
  }
  return true;
}","/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    boolean selectionChanged=true;
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    Iterator iter=handle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP).iterator();
    JoinConditionHandle conditionHandle;
    while (iter.hasNext()) {
      conditionHandle=(JoinConditionHandle)iter.next();
      if ((conditionHandle.getLeftDataSet() != null && conditionHandle.getLeftDataSet().equals(this.leftDataSetName)) && (conditionHandle.getLeftDataSet() != null && conditionHandle.getRightDataSet().equals(this.rightDataSetName))) {
        selectionChanged=false;
        conditionHandle.setJoinType(joinType);
      }
    }
    if (selectionChanged) {
      List datasetName=handle.getDataSetNames();
      for (int i=0; i < datasetName.size(); i++) {
        try {
          handle.removeDataSet((String)datasetName.get(i));
        }
 catch (        SemanticException e) {
        }
      }
      if (leftDataSetName.equals(rightDataSetName))       handle.addDataSet(leftDataSetName);
 else {
        handle.addDataSet(leftDataSetName);
        handle.addDataSet(rightDataSetName);
      }
      setParameters(handle);
      addColumnHints(handle);
      if (propertyHandle != null) {
        JoinCondition condition=createJoinCondition();
        propertyHandle.removeItem(0);
        propertyHandle.addItem(condition);
        return true;
      }
 else       return false;
    }
  }
  return true;
}",0.940119760479042
66857,"/** 
 * Test setRenderOption(IRenderOption) method Test getRenderOption() method
 */
public void testGetRenderOption(){
  RenderOptionBase rendop=new RenderOptionBase();
  rendop.setOutputFormat(""String_Node_Str"");
  rendop.setOutputFileName(""String_Node_Str"");
  HTMLRenderContext context=new HTMLRenderContext();
  context.SetRenderOption(rendop);
  RenderOptionBase ropb=(RenderOptionBase)(context.getRenderOption());
  assertEquals(""String_Node_Str"",ropb.getOutputFormat());
  Map outsetting=new HashMap();
  outsetting=ropb.getOutputSetting();
  assertFalse(outsetting.isEmpty());
  assertEquals(2,outsetting.size());
  ropb.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,""String_Node_Str"");
  assertEquals(3,outsetting.size());
}","/** 
 * Test setRenderOption(IRenderOption) method Test getRenderOption() method
 */
public void testGetRenderOption(){
  RenderOptionBase rendop=new RenderOptionBase();
  rendop.setOutputFormat(""String_Node_Str"");
  rendop.setOutputFileName(""String_Node_Str"");
  HTMLRenderContext context=new HTMLRenderContext();
  context.setRenderOption(rendop);
  RenderOptionBase ropb=(RenderOptionBase)(context.getRenderOption());
  assertEquals(""String_Node_Str"",ropb.getOutputFormat());
  Map outsetting=new HashMap();
  outsetting=ropb.getOutputSetting();
  assertFalse(outsetting.isEmpty());
  assertEquals(2,outsetting.size());
  ropb.getOutputSetting().put(HTMLRenderOption.URL_ENCODING,""String_Node_Str"");
  assertEquals(3,outsetting.size());
}",0.9986504723346828
66858,"public IRenderOption getPreferredRenderOption(){
  EXCELRenderOption renderOption=new EXCELRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  if (values != null && values.length > 0) {
    for (    IOptionValue optionValue : values) {
      if (optionValue != null) {
        renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
      }
    }
  }
  return renderOption;
}","public IRenderOption getPreferredRenderOption(){
  EXCELRenderOption renderOption=new EXCELRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  if (values != null && values.length > 0) {
    for (    IOptionValue optionValue : values) {
      if (optionValue != null) {
        renderOption.setOption(optionValue.getName(),optionValue.getValue());
      }
    }
  }
  return renderOption;
}",0.943894389438944
66859,"protected ConfigurableOption initializeWrappingText(){
  ConfigurableOption wrappingText=new ConfigurableOption(TEXT_WRAPPING);
  wrappingText.setDisplayName(getMessage(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(getMessage(""String_Node_Str""));
  return wrappingText;
}","protected ConfigurableOption initializeWrappingText(){
  ConfigurableOption wrappingText=new ConfigurableOption(WRAPPING_TEXT);
  wrappingText.setDisplayName(getMessage(""String_Node_Str""));
  wrappingText.setDataType(IConfigurableOption.DataType.BOOLEAN);
  wrappingText.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  wrappingText.setDefaultValue(Boolean.TRUE);
  wrappingText.setToolTip(null);
  wrappingText.setDescription(getMessage(""String_Node_Str""));
  return wrappingText;
}",0.9898785425101214
66860,"/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    List datasetName=handle.getDataSetNames();
    for (int i=0; i < datasetName.size(); i++) {
      try {
        handle.removeDataSet((String)datasetName.get(i));
      }
 catch (      SemanticException e) {
      }
    }
    if (leftDataSetName.equals(rightDataSetName))     handle.addDataSet(leftDataSetName);
 else {
      handle.addDataSet(leftDataSetName);
      handle.addDataSet(rightDataSetName);
    }
    setParameters(handle);
  }
  addColumnHints(handle);
  if (propertyHandle != null) {
    JoinCondition condition=createJoinCondition();
    propertyHandle.removeItem(0);
    propertyHandle.addItem(condition);
    return true;
  }
 else   return false;
}","/** 
 * @return
 * @throws SemanticException
 */
private boolean modifyJointCondition() throws SemanticException {
  JointDataSetHandle handle=null;
  if (leftDataSetName == null || rightDataSetName == null)   return false;
  if (propertyPageContainer instanceof DataSetEditor) {
    boolean selectionChanged=true;
    handle=(JointDataSetHandle)((DataSetEditor)propertyPageContainer).getModel();
    Iterator iter=handle.getPropertyHandle(JointDataSet.JOIN_CONDITONS_PROP).iterator();
    while (iter.hasNext()) {
      JoinConditionHandle condition=(JoinConditionHandle)iter.next();
      if ((condition.getLeftDataSet() != null && condition.getLeftDataSet().equals(this.leftDataSetName)) && (condition.getLeftDataSet() != null && condition.getRightDataSet().equals(this.rightDataSetName))) {
        selectionChanged=false;
      }
    }
    if (selectionChanged) {
      List datasetName=handle.getDataSetNames();
      for (int i=0; i < datasetName.size(); i++) {
        try {
          handle.removeDataSet((String)datasetName.get(i));
        }
 catch (        SemanticException e) {
        }
      }
      if (leftDataSetName.equals(rightDataSetName))       handle.addDataSet(leftDataSetName);
 else {
        handle.addDataSet(leftDataSetName);
        handle.addDataSet(rightDataSetName);
      }
      setParameters(handle);
      addColumnHints(handle);
      if (propertyHandle != null) {
        JoinCondition condition=createJoinCondition();
        propertyHandle.removeItem(0);
        propertyHandle.addItem(condition);
        return true;
      }
 else       return false;
    }
  }
  return true;
}",0.7392614920874152
66861,"public boolean needOutputInMasterPage(IContent headerFooter){
  if (headerFooter != null) {
    Collection list=headerFooter.getChildren();
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      Object child=iter.next();
      if (child instanceof ITableContent) {
        int columncount=((ITableContent)child).getColumnCount();
        int rowcount=((ITableContent)child).getChildren().size();
        if (columncount > 3 || rowcount > 1) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
        if (isEmbededTable((ITableContent)child)) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
      }
      if (isHtmlText(child)) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}","public boolean needOutputInMasterPage(IContent headerFooter){
  if (headerFooter != null) {
    Collection list=headerFooter.getChildren();
    Iterator iter=list.iterator();
    while (iter.hasNext()) {
      Object child=iter.next();
      if (child instanceof ITableContent) {
        int columncount=((ITableContent)child).getColumnCount();
        int rowcount=((ITableContent)child).getChildren().size();
        if (columncount > 3 || rowcount > 1) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
        if (isEmbededTable((ITableContent)child)) {
          logger.log(Level.WARNING,""String_Node_Str"");
          return false;
        }
      }
      if (isHtmlText(child)) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return false;
      }
      if (child instanceof IImageContent) {
        logger.log(Level.WARNING,""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}",0.914952751528627
66862,"/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drew
 */
protected void drawContainer(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if (null == style || style == BoxStyle.DEFAULT) {
    return;
  }
  Color bc=style.getBackgroundColor();
  BackgroundImageInfo bi=style.getBackgroundImage();
  if (bc != null || bi != null || container.getHelpText() != null) {
    int startX=currentX + getX(container);
    int startY=currentY + getY(container);
    int width=getWidth(container);
    int height=getHeight(container);
    if (bc != null) {
      pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
    }
    if (bi != null) {
      drawBackgroundImage(bi,startX,startY,width,height);
    }
    if (container.getHelpText() != null) {
      pageGraphic.showHelpText(container.getHelpText(),startX,startY,width,height);
    }
  }
}","/** 
 * Draws a container's border, and its background color/image if there is any.
 * @param container the containerArea whose border and background need to be drew
 */
protected void drawContainer(IContainerArea container){
  BoxStyle style=container.getBoxStyle();
  if ((null == style || style == BoxStyle.DEFAULT) && container.getHelpText() == null) {
    return;
  }
  Color bc=style.getBackgroundColor();
  BackgroundImageInfo bi=style.getBackgroundImage();
  int startX=currentX + getX(container);
  int startY=currentY + getY(container);
  int width=getWidth(container);
  int height=getHeight(container);
  if (bc != null) {
    pageGraphic.drawBackgroundColor(bc,startX,startY,width,height);
  }
  if (bi != null) {
    drawBackgroundImage(bi,startX,startY,width,height);
  }
  if (container.getHelpText() != null) {
    pageGraphic.showHelpText(container.getHelpText(),startX,startY,width,height);
  }
}",0.5919661733615222
66863,"/** 
 * @param paramBindingIt
 * @return
 */
private List convertParamterBindings(Iterator paramBindingIt){
  if (paramBindingIt == null)   return null;
  List parameterBindings=new ArrayList();
  while (paramBindingIt.hasNext()) {
    Object paramObj=paramBindingIt.next();
    if (paramObj instanceof ParamBindingHandle) {
      ParamBindingHandle paramBinding=(ParamBindingHandle)paramObj;
      if (paramBinding.getExpression() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getExpression());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getParamName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
 else     if (paramObj instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle paramBinding=(OdaDataSetParameterHandle)paramObj;
      ExpressionHandle handle=paramBinding.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
      InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getName(),this.session.getModelAdaptor().adaptExpression((Expression)handle.getValue()));
      parameterBindings.add(inputParamBinding);
    }
  }
  return parameterBindings;
}","/** 
 * @param paramBindingIt
 * @return
 */
private List convertParamterBindings(Iterator paramBindingIt){
  if (paramBindingIt == null)   return null;
  List parameterBindings=new ArrayList();
  while (paramBindingIt.hasNext()) {
    Object paramObj=paramBindingIt.next();
    if (paramObj instanceof ParamBindingHandle) {
      ParamBindingHandle paramBinding=(ParamBindingHandle)paramObj;
      if (paramBinding.getExpression() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getExpression());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getParamName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
 else     if (paramObj instanceof OdaDataSetParameterHandle) {
      if (((OdaDataSetParameterHandle)paramObj).getParamName() != null) {
        String defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)paramObj).getParamName()));
        InputParameterBinding inputParamBinding=new InputParameterBinding((String)((OdaDataSetParameterHandle)paramObj).getName(),modelAdaptor.adaptExpression(defaultValueExpr,((OdaDataSetParameterHandle)paramObj).getDataType()));
        parameterBindings.add(inputParamBinding);
      }
 else {
        OdaDataSetParameterHandle paramBinding=(OdaDataSetParameterHandle)paramObj;
        ExpressionHandle handle=paramBinding.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getName(),this.session.getModelAdaptor().adaptExpression((Expression)handle.getValue()));
        parameterBindings.add(inputParamBinding);
      }
    }
  }
  return parameterBindings;
}",0.8257804632426989
66864,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  sbHelper.reset(predefinedQuery);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || (provider.checkState(IDataServiceProvider.INHERIT_CUBE) && !provider.checkState(IDataServiceProvider.PART_CHART))|| provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  IAssistField assistField=null;
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      assistField=new CComboAssistField(cmbDefinition,null,null);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=btnBuilder.getExpression();
        if (!isTableSharedBinding() && !(isInXTabNonAggrCellAndInheritCube()) && text.equals(oldQuery)) {
          return;
        }
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text);
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
          btnBuilder.setEnabled(false);
        }
      }
    }
);
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (hasContentAssist) {
      assistField=new TextAssistField(txtDefinition,null,null);
    }
  }
  try {
    btnBuilder=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTop,getInputControl(),context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        onModifyExpression();
      }
    }
);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  if (needComboField) {
    if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
      cmbDefinition.setEnabled(false);
      btnBuilder.setEnabled(false);
    }
  }
  btnBuilder.setPredefinedQuery(predefinedQuery);
  btnBuilder.setAssitField(assistField);
  if (query != null) {
    btnBuilder.setExpression(query.getDefinition());
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl,btnBuilder));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
        btnBuilder.setEnabled(false);
      }
    }
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && (isCubeNoMultiDimensions || !ChartUIUtil.isGroupingSupported(context))) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  sbHelper.reset(predefinedQuery);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || (provider.checkState(IDataServiceProvider.INHERIT_CUBE) && !provider.checkState(IDataServiceProvider.PART_CHART))|| provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  IAssistField assistField=null;
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      assistField=new CComboAssistField(cmbDefinition,null,null);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=btnBuilder.getExpression();
        if (!isTableSharedBinding() && !(isInXTabNonAggrCellAndInheritCube()) && text.equals(oldQuery)) {
          return;
        }
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text);
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
          btnBuilder.setEnabled(false);
        }
      }
    }
);
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (hasContentAssist) {
      assistField=new TextAssistField(txtDefinition,null,null);
    }
  }
  try {
    btnBuilder=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTop,getInputControl(),context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        onModifyExpression();
      }
    }
);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  if (needComboField) {
    if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
      cmbDefinition.setEnabled(false);
      btnBuilder.setEnabled(false);
    }
  }
  btnBuilder.setPredefinedQuery(predefinedQuery);
  btnBuilder.setAssitField(assistField);
  if (query != null) {
    btnBuilder.setExpression(query.getDefinition());
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl,btnBuilder));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
        btnBuilder.setEnabled(false);
      }
    }
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  boolean inheritGroups=context.getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS);
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && (isCubeNoMultiDimensions || inheritGroups)) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}",0.9893848666303756
66865,"public static List<ComputedColumn> generateComputedColumns(ExtendedItemHandle itemHandle,CubeHandle cubeHandle){
  if (cubeHandle != null) {
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    String exprType=UIUtil.getDefaultScriptType();
    IExpressionConverter exprConverter=ExpressionUtility.getExpressionConverter(exprType);
    for (    LevelHandle levelHandle : ChartCubeUtil.getAllLevels(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelBindingName(levelHandle));
      column.setDataType(levelHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),null),exprType));
      columnList.add(column);
      Iterator itLevelAttr=levelHandle.attributesIterator();
      while (itLevelAttr.hasNext()) {
        LevelAttributeHandle laHandle=(LevelAttributeHandle)itLevelAttr.next();
        ComputedColumn columnLA=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelAttrBindingName(levelHandle,laHandle));
        columnLA.setDataType(laHandle.getDataType());
        columnLA.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),laHandle.getName()),exprType));
        columnList.add(columnLA);
      }
    }
    for (    MeasureHandle measureHandle : ChartCubeUtil.getAllMeasures(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createMeasureBindingName(measureHandle));
      column.setDataType(measureHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getMeasureExpression(measureHandle.getName()),exprType));
      column.setAggregateFunction(measureHandle.getFunction());
      columnList.add(column);
    }
    return columnList;
  }
  return Collections.emptyList();
}","public static List<ComputedColumn> generateComputedColumns(ExtendedItemHandle itemHandle,CubeHandle cubeHandle){
  if (cubeHandle != null) {
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    String exprType=UIUtil.getDefaultScriptType();
    IExpressionConverter exprConverter=ExpressionUtility.getExpressionConverter(exprType);
    for (    LevelHandle levelHandle : ChartCubeUtil.getAllLevels(cubeHandle)) {
      String displayNameAttr=null;
      if (levelHandle instanceof TabularLevelHandle && ((TabularLevelHandle)levelHandle).getDisplayColumnName() != null && ((TabularLevelHandle)levelHandle).getDisplayColumnName().trim().length() > 0) {
        displayNameAttr=ICubeQueryUtil.DISPLAY_NAME_ATTR;
      }
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelBindingName(levelHandle));
      column.setDataType(levelHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),displayNameAttr),exprType));
      columnList.add(column);
      Iterator itLevelAttr=levelHandle.attributesIterator();
      while (itLevelAttr.hasNext()) {
        LevelAttributeHandle laHandle=(LevelAttributeHandle)itLevelAttr.next();
        ComputedColumn columnLA=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelAttrBindingName(levelHandle,laHandle));
        columnLA.setDataType(laHandle.getDataType());
        columnLA.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),laHandle.getName()),exprType));
        columnList.add(columnLA);
      }
    }
    for (    MeasureHandle measureHandle : ChartCubeUtil.getAllMeasures(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createMeasureBindingName(measureHandle));
      column.setDataType(measureHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getMeasureExpression(measureHandle.getName()),exprType));
      column.setAggregateFunction(measureHandle.getFunction());
      columnList.add(column);
    }
    return columnList;
  }
  return Collections.emptyList();
}",0.9283654912397428
66866,"@Override public void fillArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    Area ar=null;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      ar=fArea;
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      ar=ar2;
    }
    if (flBackground instanceof PatternImage) {
      fillWithPatternImage(new Area(ar),flBackground);
      return;
    }
    _g2d.setClip(ar);
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}","@Override public void fillArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Shape outerArc, innerArc;
      if (are.getOuterRadius() > 0) {
        outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
 else {
        outerArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
      innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Shape outerArc, innerArc;
      if (are.getOuterRadius() > 0) {
        outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
 else {
        outerArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
      innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    Area ar=null;
    if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
      Shape outerArc, innerArc;
      if (are.getOuterRadius() > 0) {
        outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
 else {
        outerArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      }
      innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      ar=fArea;
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      ar=ar2;
    }
    if (flBackground instanceof PatternImage) {
      fillWithPatternImage(new Area(ar),flBackground);
      return;
    }
    _g2d.setClip(ar);
    java.awt.Image img=createImageFromModel(flBackground);
    if (img != null) {
      final Size szImage=_ids.getSize(img);
      int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
      int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
      ImageObserver io=(ImageObserver)_ids.getObserver();
      for (int i=0; i < iXRepeat; i++) {
        for (int j=0; j < iYRepeat; j++) {
          _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
        }
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}",0.7537741446370888
66867,"@Override public void drawArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
    Bounds rctOuter=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius());
    Bounds rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius());
    Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.OPEN);
    Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle() + are.getAngleExtent(),-are.getAngleExtent(),Arc2D.OPEN);
    double startAngle=Math.toRadians(-are.getStartAngle());
    double stopAngle=Math.toRadians(-are.getStartAngle() - are.getAngleExtent());
    double xsOuter=(rctOuter.getLeft() + (Math.cos(startAngle) * 0.5 + 0.5) * rctOuter.getWidth());
    double ysOuter=(rctOuter.getTop() + (Math.sin(startAngle) * 0.5 + 0.5) * rctOuter.getHeight());
    double xeInner=(rctInner.getLeft() + (Math.cos(stopAngle) * 0.5 + 0.5) * rctInner.getWidth());
    double yeInner=(rctInner.getTop() + (Math.sin(stopAngle) * 0.5 + 0.5) * rctInner.getHeight());
    GeneralPath gp=new GeneralPath();
    gp.append(outerArc,false);
    gp.lineTo((float)xeInner,(float)yeInner);
    gp.append(innerArc,false);
    gp.lineTo((float)xsOuter,(float)ysOuter);
    Area area=new Area(gp);
    Shape prevClip=_g2d.getClip();
    Area ar2=new Area(area);
    if (prevClip != null) {
      Area ar1=new Area(prevClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    _g2d.draw(area);
    _g2d.setClip(prevClip);
  }
 else {
    _g2d.draw(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
  }
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","@Override public void drawArc(ArcRenderEvent are) throws ChartException {
  if (iv != null) {
    iv.modifyEvent(are);
  }
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  if ((are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
    Bounds rctOuter, rctInner;
    if (are.getOuterRadius() > 0) {
      rctOuter=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius());
    }
 else {
      rctOuter=BoundsImpl.create(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight());
    }
    rctInner=BoundsImpl.create(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius());
    Shape outerArc=new Arc2D.Double(rctOuter.getLeft(),rctOuter.getTop(),rctOuter.getWidth(),rctOuter.getHeight(),are.getStartAngle(),are.getAngleExtent(),Arc2D.OPEN);
    Shape innerArc=new Arc2D.Double(rctInner.getLeft(),rctInner.getTop(),rctInner.getWidth(),rctInner.getHeight(),are.getStartAngle() + are.getAngleExtent(),-are.getAngleExtent(),Arc2D.OPEN);
    double startAngle=Math.toRadians(-are.getStartAngle());
    double stopAngle=Math.toRadians(-are.getStartAngle() - are.getAngleExtent());
    double xsOuter=(rctOuter.getLeft() + (Math.cos(startAngle) * 0.5 + 0.5) * rctOuter.getWidth());
    double ysOuter=(rctOuter.getTop() + (Math.sin(startAngle) * 0.5 + 0.5) * rctOuter.getHeight());
    double xeInner=(rctInner.getLeft() + (Math.cos(stopAngle) * 0.5 + 0.5) * rctInner.getWidth());
    double yeInner=(rctInner.getTop() + (Math.sin(stopAngle) * 0.5 + 0.5) * rctInner.getHeight());
    GeneralPath gp=new GeneralPath();
    gp.append(outerArc,false);
    gp.lineTo((float)xeInner,(float)yeInner);
    gp.append(innerArc,false);
    gp.lineTo((float)xsOuter,(float)ysOuter);
    Area area=new Area(gp);
    Shape prevClip=_g2d.getClip();
    Area ar2=new Area(area);
    if (prevClip != null) {
      Area ar1=new Area(prevClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    _g2d.draw(area);
    _g2d.setClip(prevClip);
  }
 else {
    _g2d.draw(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toG2dArcType(are.getStyle())));
  }
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.9567174515235456
66868,"public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  sbHelper.reset(predefinedQuery);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || (provider.checkState(IDataServiceProvider.INHERIT_CUBE) && !provider.checkState(IDataServiceProvider.PART_CHART))|| provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  IAssistField assistField=null;
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      assistField=new CComboAssistField(cmbDefinition,null,null);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=btnBuilder.getExpression();
        if (!isTableSharedBinding() && !(isInXTabNonAggrCellAndInheritCube()) && text.equals(oldQuery)) {
          return;
        }
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text);
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
          btnBuilder.setEnabled(false);
        }
      }
    }
);
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (hasContentAssist) {
      assistField=new TextAssistField(txtDefinition,null,null);
    }
  }
  try {
    btnBuilder=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTop,getInputControl(),context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        onModifyExpression();
      }
    }
);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  if (needComboField) {
    if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
      cmbDefinition.setEnabled(false);
      btnBuilder.setEnabled(false);
    }
  }
  btnBuilder.setPredefinedQuery(predefinedQuery);
  btnBuilder.setAssitField(assistField);
  if (query != null) {
    btnBuilder.setExpression(query.getDefinition());
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl,btnBuilder));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
        btnBuilder.setEnabled(false);
      }
    }
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && isCubeNoMultiDimensions) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}","public Composite createArea(Composite parent){
  int numColumns=2;
  if (description != null && description.length() > 0) {
    numColumns++;
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    numColumns++;
  }
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    numColumns++;
  }
  cmpTop=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=numColumns;
    glContent.marginHeight=0;
    glContent.marginWidth=0;
    glContent.horizontalSpacing=2;
    cmpTop.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpTop.setLayoutData(gd);
  }
  Label lblDesc=null;
  if (description != null && description.length() > 0) {
    lblDesc=new Label(cmpTop,SWT.NONE);
    lblDesc.setText(description);
    lblDesc.setToolTipText(tooltipWhenBlank);
  }
  if ((style & BUTTON_AGGREGATION) == BUTTON_AGGREGATION) {
    createAggregationItem(cmpTop);
  }
  boolean isSharingChart=context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY);
  final Object[] predefinedQuery=context.getPredefinedQuery(queryType);
  sbHelper.reset(predefinedQuery);
  IDataServiceProvider provider=context.getDataServiceProvider();
  boolean needComboField=predefinedQuery != null && predefinedQuery.length > 0 && (provider.checkState(IDataServiceProvider.SHARE_QUERY) || provider.checkState(IDataServiceProvider.HAS_CUBE) || (provider.checkState(IDataServiceProvider.INHERIT_CUBE) && !provider.checkState(IDataServiceProvider.PART_CHART))|| provider.checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS));
  needComboField&=!isSharingChart;
  boolean hasContentAssist=(!isSharingChart && predefinedQuery != null && predefinedQuery.length > 0);
  IAssistField assistField=null;
  if (needComboField) {
    Composite control=new Composite(cmpTop,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.widthHint=80;
    control.setLayoutData(gd);
    GridLayout gl=new GridLayout();
    FieldAssistHelper.getInstance().initDecorationMargin(gl);
    control.setLayout(gl);
    cmbDefinition=new CCombo(control,context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) ? SWT.READ_ONLY | SWT.BORDER : SWT.BORDER);
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.grabExcessHorizontalSpace=true;
    cmbDefinition.setLayoutData(gd);
    if (hasContentAssist) {
      assistField=new CComboAssistField(cmbDefinition,null,null);
    }
    cmbDefinition.addListener(SWT.Selection,new Listener(){
      public void handleEvent(      Event event){
        String oldQuery=query.getDefinition() == null ? ""String_Node_Str"" : query.getDefinition();
        String text=btnBuilder.getExpression();
        if (!isTableSharedBinding() && !(isInXTabNonAggrCellAndInheritCube()) && text.equals(oldQuery)) {
          return;
        }
        if (!oldQuery.equals(text) && queryType == ChartUIConstants.QUERY_VALUE) {
          context.getDataServiceProvider().update(ChartUIConstants.QUERY_VALUE,text);
        }
        if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) && ChartUIConstants.QUERY_CATEGORY.equals(queryType) && context.getModel() instanceof ChartWithAxes) {
          ((ChartWithAxes)context.getModel()).setTransposed(cmbDefinition.getSelectionIndex() > 0);
        }
        if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
          cmbDefinition.setEnabled(false);
          btnBuilder.setEnabled(false);
        }
      }
    }
);
  }
 else {
    Composite control=cmpTop;
    if (hasContentAssist) {
      control=new Composite(cmpTop,SWT.NONE);
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.widthHint=80;
      control.setLayoutData(gd);
      GridLayout gl=new GridLayout();
      FieldAssistHelper.getInstance().initDecorationMargin(gl);
      control.setLayout(gl);
    }
    txtDefinition=new Text(control,SWT.BORDER | SWT.SINGLE);
    GridData gdTXTDefinition=new GridData(GridData.FILL_HORIZONTAL);
    gdTXTDefinition.widthHint=80;
    gdTXTDefinition.grabExcessHorizontalSpace=true;
    txtDefinition.setLayoutData(gdTXTDefinition);
    if (hasContentAssist) {
      assistField=new TextAssistField(txtDefinition,null,null);
    }
  }
  try {
    btnBuilder=(IExpressionButton)context.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpTop,getInputControl(),context.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        onModifyExpression();
      }
    }
);
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  if (needComboField) {
    if (predefinedQuery.length == 0 && (getQuery().getDefinition() == null || getQuery().getDefinition().equals(""String_Node_Str""))) {
      cmbDefinition.setEnabled(false);
      btnBuilder.setEnabled(false);
    }
  }
  btnBuilder.setPredefinedQuery(predefinedQuery);
  btnBuilder.setAssitField(assistField);
  if (query != null) {
    btnBuilder.setExpression(query.getDefinition());
  }
  Control dropControl=getInputControl();
  DropTarget target=new DropTarget(dropControl,DND.DROP_COPY);
  Transfer[] types=new Transfer[]{SimpleTextTransfer.getInstance()};
  target.setTransfer(types);
  target.addDropListener(new DataTextDropListener(dropControl,btnBuilder));
  DataDefinitionTextManager.getInstance().addDataDefinitionText(dropControl,this);
  if ((style & BUTTON_GROUP) == BUTTON_GROUP) {
    btnGroup=new Button(cmpTop,SWT.PUSH);
    GridData gdBTNGroup=new GridData();
    ChartUIUtil.setChartImageButtonSizeByPlatform(gdBTNGroup);
    btnGroup.setLayoutData(gdBTNGroup);
    btnGroup.setImage(UIHelper.getImage(""String_Node_Str""));
    btnGroup.addSelectionListener(this);
    btnGroup.setToolTipText(Messages.getString(""String_Node_Str""));
  }
  boolean isCubeNoMultiDimensions=(provider.checkState(IDataServiceProvider.HAS_CUBE) || provider.checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) && !provider.checkState(IDataServiceProvider.MULTI_CUBE_DIMENSIONS);
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART) || context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY)) {
    if (txtDefinition != null && (!context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY) || isSharingChart)) {
      if (!ChartUIConstants.QUERY_OPTIONAL.equals(queryType) || !provider.checkState(IDataServiceProvider.SHARE_TABLE_QUERY) || getQuery().getDefinition() == null || getQuery().getDefinition().trim().length() == 0) {
        txtDefinition.setEnabled(false);
        btnBuilder.setEnabled(false);
      }
    }
    if (btnGroup != null) {
      btnGroup.setEnabled(false);
    }
  }
  if (cmbDefinition != null && ChartUIConstants.QUERY_OPTIONAL.equals(queryType) && (isCubeNoMultiDimensions || !ChartUIUtil.isGroupingSupported(context))) {
    cmbDefinition.setEnabled(false);
    btnBuilder.setEnabled(false);
  }
  setTooltipForInputControl();
  boolean isRequiredField=(ChartUIConstants.QUERY_CATEGORY.equals(queryType));
  if (lblDesc != null && isRequiredField) {
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(lblDesc);
  }
  return cmpTop;
}",0.996772642999382
66869,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveFileSaveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocArchiveLockManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocumentArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FileArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FolderArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.InputStreamRefreshTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveEntryInputStreamTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveFileTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchivePerformanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.UpgradeArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.AllocTableLoaderTest.class);
  suite.addTestSuite(org.eclipse.birt.core.config.FileConfigVarManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DataTypeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilThreadTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionParserUtilityTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.exception.BirtExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.DateFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.NumberFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.StringFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtDateTimeTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtCompTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtMathTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtStrTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptContextTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeNamedListTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeDateTimeSpanTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeFinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeJavaMapTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptableParametersTest.class);
  suite.addTestSuite(TemplateParserTest.class);
  suite.addTestSuite(org.eclipse.birt.core.util.IOUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.BTreeTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.BTreeCursorTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.NodeInputStreamTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.NodeOutputStreamTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveFileSaveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.ArchiveUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocArchiveLockManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.DocumentArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FileArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.FolderArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.InputStreamRefreshTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveEntryInputStreamTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchiveFileTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.ArchivePerformanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.archive.compound.UpgradeArchiveTest.class);
  suite.addTestSuite(org.eclipse.birt.core.config.FileConfigVarManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DataTypeUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.DateUtilThreadTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionParserUtilityTest.class);
  suite.addTestSuite(org.eclipse.birt.core.data.ExpressionUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.exception.BirtExceptionTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.DateFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.NumberFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.format.StringFormatterTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtDateTimeTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtCompTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtMathTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.bre.BirtStrTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptContextTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeNamedListTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeDateTimeSpanTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeFinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.NativeJavaMapTest.class);
  suite.addTestSuite(org.eclipse.birt.core.script.ScriptableParametersTest.class);
  suite.addTestSuite(TemplateParserTest.class);
  suite.addTestSuite(org.eclipse.birt.core.util.IOUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.BTreeTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.BTreeCursorTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.NodeInputStreamTest.class);
  suite.addTestSuite(org.eclipse.birt.core.btree.NodeOutputStreamTest.class);
  return suite;
}",0.9851888833416542
66870,"public void tearDown(){
  ArchiveUtil.DeleteAllFiles(new File(TEMP_FOLDER_NAME));
  ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
}","public void tearDown(){
  ArchiveUtil.deleteAllFiles(new File(TEMP_FOLDER_NAME));
  ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
}",0.9854014598540146
66871,"public void setUp(){
  ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
  ArchiveUtil.DeleteAllFiles(new File(TEMP_FOLDER_NAME));
}","public void setUp(){
  ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
  ArchiveUtil.deleteAllFiles(new File(TEMP_FOLDER_NAME));
}",0.9850746268656716
66872,"public void tearDown(){
  ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
}","public void tearDown(){
  ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
}",0.9873417721518988
66873,"/** 
 * open an none exits folder. it should be failed and no folder is created.
 */
public void testOpenNoneExistFolder(){
  try {
    ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
    FolderArchiveReader reader=new FolderArchiveReader(ARCHIVE_NAME);
    reader.open();
    reader.close();
  }
 catch (  IOException ex) {
    assertTrue(!new File(ARCHIVE_NAME).exists());
    assertTrue(true);
    return;
  }
  assertTrue(false);
}","/** 
 * open an none exits folder. it should be failed and no folder is created.
 */
public void testOpenNoneExistFolder(){
  try {
    ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
    FolderArchiveReader reader=new FolderArchiveReader(ARCHIVE_NAME);
    reader.open();
    reader.close();
  }
 catch (  IOException ex) {
    assertTrue(!new File(ARCHIVE_NAME).exists());
    assertTrue(true);
    return;
  }
  assertTrue(false);
}",0.9977220956719818
66874,"public void setUp(){
  ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
}","public void setUp(){
  ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
}",0.986842105263158
66875,"public void setUp(){
  ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
}","public void setUp(){
  ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
}",0.986842105263158
66876,"public void tearDown(){
  ArchiveUtil.DeleteAllFiles(new File(ARCHIVE_NAME));
}","public void tearDown(){
  ArchiveUtil.deleteAllFiles(new File(ARCHIVE_NAME));
}",0.9873417721518988
66877,"/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionListForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_GROUP_ISNOT_FOUND_BY_GROUPNAME_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  SlotHandle slotHandle=parameterGroup.getParameters();
  if (groupKeyValues.length >= slotHandle.getCount()) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_INVALID_GROUP_LEVEL_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  if (requestedParam == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_IN_GROUP_ISNOT_SCALAR_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  Collection res=null;
  ValuePopper popper=new ValuePopper(groupKeyValues);
  while (popper.hasNext()) {
    Object[] paramValues=popper.next();
    for (int i=0; i < paramValues.length; i++) {
      String paramName=((ScalarParameterHandle)slotHandle.get(i)).getName();
      setParameterValue(paramName,paramValues[i]);
    }
    Collection tmp=this.getSelectionList(requestedParam.getName());
    if (res == null) {
      res=tmp;
    }
 else {
      res.addAll(tmp);
    }
  }
  return res;
}","/** 
 * The second step to work with the cascading parameters. Get the selection choices for a parameter in the cascading group. The parameter to work on is the parameter on the next level in the parameter cascading hierarchy. For the ""parameter to work on"", please see the following example. Assume we have a cascading parameter group as Country - State - City. If user specified an empty array in groupKeyValues (meaning user doesn't have any parameter value), the parameter to work on will be the first level which is Country in this case. If user specified groupKeyValues as Object[]{""USA""} (meaning user has set the value of the top level), the parameter to work on will be the second level which is State in ""USA"" in this case. If user specified groupKeyValues as Object[]{""USA"", ""CA""} (meaning user has set the values of the top and the second level), the parameter to work on will be the third level which is City in ""USA, CA"" in this case.
 * @param parameterGroupName -the cascading parameter group name
 * @param groupKeyValues -the array of known parameter values (see the example above)
 * @return the selection list of the parameter to work on
 */
public Collection getSelectionListForCascadingGroup(String parameterGroupName,Object[] groupKeyValues){
  loadDesign();
  CascadingParameterGroupHandle parameterGroup=getCascadingParameterGroup(parameterGroupName);
  if (parameterGroup == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_GROUP_ISNOT_FOUND_BY_GROUPNAME_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  SlotHandle slotHandle=parameterGroup.getParameters();
  if (groupKeyValues.length >= slotHandle.getCount()) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_INVALID_GROUP_LEVEL_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  ScalarParameterHandle requestedParam=(ScalarParameterHandle)slotHandle.get(groupKeyValues.length);
  if (requestedParam == null) {
    executionContext.addException(new EngineException(MessageConstants.PARAMETER_IN_GROUP_ISNOT_SCALAR_EXCEPTION,parameterGroupName));
    return Collections.EMPTY_LIST;
  }
  Collection res=null;
  ValuePopper popper=new ValuePopper(groupKeyValues);
  while (popper.hasNext()) {
    Object[] paramValues=popper.next();
    for (int i=0; i < paramValues.length; i++) {
      String paramName=((ScalarParameterHandle)slotHandle.get(i)).getName();
      setParameterValue(paramName,paramValues[i]);
    }
    Collection tmp=this.getSelectionList(requestedParam.getName());
    if (res == null) {
      res=tmp;
    }
 else {
      res.addAll(tmp);
    }
  }
  return res;
}",0.997005988023952
66878,"public Object getDefaultValue(String name){
  ModuleHandle report=executionContext.getDesign();
  AbstractScalarParameterHandle parameter=(AbstractScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  usingParameterValues();
  return evaluateDefaultValue(parameter);
}","public Object getDefaultValue(String name){
  ModuleHandle report=executionContext.getDesign();
  AbstractScalarParameterHandle parameter=(AbstractScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return null;
  }
  loadDesign();
  usingParameterValues();
  return evaluateDefaultValue(parameter);
}",0.9751552795031057
66879,"public Collection getSelectionTreeForCascadingGroup(String parameterGroupName){
  try {
    switchToOsgiClassLoader();
    return doGetSelectionTreeForCascadingGroup(parameterGroupName);
  }
  finally {
    switchClassLoaderBack();
  }
}","public Collection getSelectionTreeForCascadingGroup(String parameterGroupName){
  try {
    switchToOsgiClassLoader();
    loadDesign();
    return doGetSelectionTreeForCascadingGroup(parameterGroupName);
  }
  finally {
    switchClassLoaderBack();
  }
}",0.9634146341463414
66880,"public Collection getSelectionList(String name){
  try {
    switchToOsgiClassLoader();
    return doGetSelectionList(name);
  }
  finally {
    switchClassLoaderBack();
  }
}","public Collection getSelectionList(String name){
  try {
    switchToOsgiClassLoader();
    loadDesign();
    return doGetSelectionList(name);
  }
  finally {
    switchClassLoaderBack();
  }
}",0.9510869565217392
66881,"public HashMap getDefaultValues(){
  usingParameterValues();
  final HashMap values=new HashMap();
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      Object value=getDefaultValue(name);
      values.put(name,value);
      return true;
    }
    boolean visitDynamicFilterParameter(    DynamicFilterParameterHandle param,    Object userData){
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object userData){
      return visitParametersInGroup(group,userData);
    }
  }
.visit(executionContext.getDesign());
  return values;
}","public HashMap getDefaultValues(){
  loadDesign();
  usingParameterValues();
  final HashMap values=new HashMap();
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      Object value=getDefaultValue(name);
      values.put(name,value);
      return true;
    }
    boolean visitDynamicFilterParameter(    DynamicFilterParameterHandle param,    Object userData){
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object userData){
      return visitParametersInGroup(group,userData);
    }
  }
.visit(executionContext.getDesign());
  return values;
}",0.9882697947214076
66882,"/** 
 * Creates the context menu for the given object. Gets the action from the actionRegistry for the given object and adds them to the menu
 * @param menu the menu
 * @param object the object
 */
public void createContextMenu(TreeViewer sourceViewer,Object object,IMenuManager menu){
  menu.add(new InsertAction(object,Messages.getString(""String_Node_Str""),ReportDesignConstants.SCALAR_PARAMETER_ELEMENT));
  menu.add(new InsertAction(object,Messages.getString(""String_Node_Str""),ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT));
  menu.add(new InsertAction(object,Messages.getString(""String_Node_Str""),ReportDesignConstants.PARAMETER_GROUP_ELEMENT));
  super.createContextMenu(sourceViewer,object,menu);
}","/** 
 * Creates the context menu for the given object. Gets the action from the actionRegistry for the given object and adds them to the menu
 * @param menu the menu
 * @param object the object
 */
public void createContextMenu(TreeViewer sourceViewer,Object object,IMenuManager menu){
  menu.add(new InsertAction(object,Messages.getString(""String_Node_Str""),ReportDesignConstants.SCALAR_PARAMETER_ELEMENT));
  menu.add(new InsertAction(object,Messages.getString(""String_Node_Str""),ReportDesignConstants.CASCADING_PARAMETER_GROUP_ELEMENT));
  menu.add(new InsertAction(object,Messages.getString(""String_Node_Str""),ReportDesignConstants.PARAMETER_GROUP_ELEMENT));
  menu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS + ""String_Node_Str""));
  super.createContextMenu(sourceViewer,object,menu);
}",0.9401709401709402
66883,"/** 
 * @param ri
 * @param scope
 * @param saveUtil
 * @param serviceForResultSet
 * @throws DataException 
 */
BindingColumnsEvalUtil(IResultIterator ri,Scriptable scope,ScriptContext cx,RDSaveHelper saveUtil,List manualBindingExprs,Map autoBindingExprs) throws DataException {
  Object[] params={ri,scope,saveUtil,manualBindingExprs,autoBindingExprs};
  logger.entering(BindingColumnsEvalUtil.class.getName(),""String_Node_Str"",params);
  this.odiResult=ri;
  this.scope=scope;
  this.saveHelper=saveUtil;
  this.cx=cx;
  try {
    this.isBasedOnRD=ExprMetaUtil.isBasedOnRD(ri.getResultClass());
    if (this.isBasedOnRD == true)     this.evalHelper=new EvalHelper(ri);
  }
 catch (  DataException e) {
  }
  this.initBindingColumns(manualBindingExprs,autoBindingExprs);
  logger.exiting(BindingColumnsEvalUtil.class.getName(),""String_Node_Str"");
}","/** 
 * @param ri
 * @param scope
 * @param saveUtil
 * @param serviceForResultSet
 * @throws DataException 
 */
BindingColumnsEvalUtil(IResultIterator ri,Scriptable scope,ScriptContext cx,RDSaveHelper saveUtil,List manualBindingExprs,Map autoBindingExprs) throws DataException {
  Object[] params={ri,scope,saveUtil,manualBindingExprs,autoBindingExprs};
  logger.entering(BindingColumnsEvalUtil.class.getName(),""String_Node_Str"",params);
  this.odiResult=ri;
  this.scope=scope;
  this.saveHelper=saveUtil;
  this.cx=cx;
  this.initBindingColumns(manualBindingExprs,autoBindingExprs);
  logger.exiting(BindingColumnsEvalUtil.class.getName(),""String_Node_Str"");
}",0.7389292795769994
66884,"/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 * @throws AdapterException 
 */
public static void registerDataObject(ScriptContext context,ILinkedResult source) throws AdapterException {
  try {
    Scriptable targetScope=((IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(context);
    int type=((ILinkedResult)source).getCurrentResultType();
    if (type == ILinkedResult.TYPE_TABLE) {
      targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source,targetScope));
    }
 else     if (type == ILinkedResult.TYPE_CUBE) {
      Scriptable scope=((ICubeCursor)source.getCurrentResult()).getScope();
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      if (scope.get(""String_Node_Str"",scope) != null && scope.get(""String_Node_Str"",scope) instanceof Scriptable)       targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    }
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}","/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 * @throws AdapterException 
 */
public static void registerDataObject(ScriptContext context,ILinkedResult source) throws AdapterException {
  try {
    Scriptable targetScope=((IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(context);
    int type=((ILinkedResult)source).getCurrentResultType();
    if (type == ILinkedResult.TYPE_TABLE) {
      targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResult)source,targetScope));
    }
 else     if (type == ILinkedResult.TYPE_CUBE && source.getCurrentResult() != null) {
      Scriptable scope=((ICubeCursor)source.getCurrentResult()).getScope();
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      if (scope.get(""String_Node_Str"",scope) != null && scope.get(""String_Node_Str"",scope) instanceof Scriptable)       targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
      targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    }
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getErrorCode(),e);
  }
}",0.9893891597361628
66885,"public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    if (this.session.getEngineContext().getMode() == DataEngineContext.MODE_PRESENTATION) {
      this.cubeCursor=createCursor(null);
      return this.cubeCursor;
    }
    stopSign.start();
    Set<String> involvedDerivedMeasure=new HashSet<String>();
    Set<String> derivedMeasureNames=OlapExpressionUtil.getDerivedMeasureNames(this.cubeQueryDefinition.getBindings());
    List<IBinding> bindingSet=new ArrayList<IBinding>();
    bindingSet.addAll(this.cubeQueryDefinition.getBindings());
    if (this.cubeQueryDefinition instanceof PreparedCubeQueryDefinition) {
      Set<IBinding> binding4NestedAggr=((PreparedCubeQueryDefinition)this.cubeQueryDefinition).getBindingsForNestAggregation();
      for (      IBinding binding : binding4NestedAggr) {
        derivedMeasureNames.add(binding.getBindingName());
      }
      bindingSet.addAll(binding4NestedAggr);
    }
    List<IFilterDefinition> derivedMeasureFilters=new ArrayList<IFilterDefinition>();
    if (!this.cubeQueryDefinition.getFilters().isEmpty()) {
      for (      IFilterDefinition filter : (List<IFilterDefinition>)this.cubeQueryDefinition.getFilters()) {
        IBaseExpression expr=filter.getExpression();
        Set<String> temp=this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings());
        if (temp.size() > 0)         derivedMeasureFilters.add(filter);
        involvedDerivedMeasure.addAll(temp);
      }
    }
    if (!this.cubeQueryDefinition.getSorts().isEmpty()) {
      for (      ISortDefinition sort : (List<ISortDefinition>)this.cubeQueryDefinition.getSorts()) {
        IBaseExpression expr=sort.getExpression();
        involvedDerivedMeasure.addAll(this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings()));
      }
    }
    if (involvedDerivedMeasure.isEmpty()) {
      this.cubeCursor=createCursor(null);
    }
 else {
      List<String> candidateBindingOfInteresting=new ArrayList<String>();
      candidateBindingOfInteresting.addAll(involvedDerivedMeasure);
      List<Set<String>> bindingDimLevels=new ArrayList<Set<String>>();
      Set<IDimLevel> mostDetailedMeasureDimLevel=new HashSet<IDimLevel>();
      for (      String bindingName : candidateBindingOfInteresting) {
        Set<IDimLevel> dimLevels=OlapExpressionUtil.getAggregateOnLevel(bindingName,bindingSet,getMeasureDimLevel());
        Set<String> temp=new HashSet<String>();
        for (        IDimLevel dl : dimLevels) {
          temp.add(OlapExpressionUtil.getAttrReference(dl.getDimensionName(),dl.getLevelName(),dl.getLevelName()));
        }
        bindingDimLevels.add(temp);
      }
      List<IFilterDefinition> filterTemp=new ArrayList<IFilterDefinition>();
      List<ISortDefinition> sortTemp=new ArrayList<ISortDefinition>();
      filterTemp.addAll(this.cubeQueryDefinition.getFilters());
      sortTemp.addAll(this.cubeQueryDefinition.getSorts());
      this.cubeQueryDefinition.getFilters().removeAll(derivedMeasureFilters);
      this.cubeQueryDefinition.getSorts().clear();
      this.cubeCursor=createCursor(null);
      this.cubeQueryDefinition.getFilters().clear();
      this.cubeQueryDefinition.getFilters().addAll(filterTemp);
      this.cubeQueryDefinition.getSorts().addAll(sortTemp);
      BindingValueFetcher fetcher=new BindingValueFetcher(this.cubeCursor,this.cubeQueryDefinition,candidateBindingOfInteresting,bindingDimLevels);
      this.cubeCursor=createCursor(fetcher);
    }
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    if (this.session.getEngineContext().getMode() == DataEngineContext.MODE_PRESENTATION) {
      this.cubeCursor=createCursor(null);
      return this.cubeCursor;
    }
    stopSign.start();
    Set<String> involvedDerivedMeasure=new HashSet<String>();
    Set<String> derivedMeasureNames=OlapExpressionUtil.getDerivedMeasureNames(this.cubeQueryDefinition.getBindings());
    List<IBinding> bindingSet=new ArrayList<IBinding>();
    bindingSet.addAll(this.cubeQueryDefinition.getBindings());
    if (this.cubeQueryDefinition instanceof PreparedCubeQueryDefinition) {
      Set<IBinding> binding4NestedAggr=((PreparedCubeQueryDefinition)this.cubeQueryDefinition).getBindingsForNestAggregation();
      for (      IBinding binding : binding4NestedAggr) {
        derivedMeasureNames.add(binding.getBindingName());
      }
      bindingSet.addAll(binding4NestedAggr);
    }
    List<IFilterDefinition> derivedMeasureFilters=new ArrayList<IFilterDefinition>();
    if (!this.cubeQueryDefinition.getFilters().isEmpty()) {
      for (      IFilterDefinition filter : (List<IFilterDefinition>)this.cubeQueryDefinition.getFilters()) {
        IBaseExpression expr=filter.getExpression();
        Set<String> temp=this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings());
        if (temp.size() > 0)         derivedMeasureFilters.add(filter);
        involvedDerivedMeasure.addAll(temp);
      }
    }
    if (!this.cubeQueryDefinition.getSorts().isEmpty()) {
      for (      ISortDefinition sort : (List<ISortDefinition>)this.cubeQueryDefinition.getSorts()) {
        IBaseExpression expr=sort.getExpression();
        involvedDerivedMeasure.addAll(this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings()));
      }
    }
    if (involvedDerivedMeasure.isEmpty()) {
      this.cubeCursor=createCursor(null);
    }
 else {
      List<String> candidateBindingOfInteresting=new ArrayList<String>();
      candidateBindingOfInteresting.addAll(involvedDerivedMeasure);
      List<Set<String>> bindingDimLevels=new ArrayList<Set<String>>();
      Set<IDimLevel> mostDetailedMeasureDimLevel=new HashSet<IDimLevel>();
      for (      String bindingName : candidateBindingOfInteresting) {
        Set<IDimLevel> dimLevels=OlapExpressionUtil.getAggregateOnLevel(bindingName,bindingSet,getMeasureDimLevel());
        Set<String> temp=new HashSet<String>();
        for (        IDimLevel dl : dimLevels) {
          temp.add(OlapExpressionUtil.getAttrReference(dl.getDimensionName(),dl.getLevelName(),dl.getLevelName()));
        }
        bindingDimLevels.add(temp);
      }
      List<IFilterDefinition> filterTemp=new ArrayList<IFilterDefinition>();
      List<ISortDefinition> sortTemp=new ArrayList<ISortDefinition>();
      filterTemp.addAll(this.cubeQueryDefinition.getFilters());
      sortTemp.addAll(this.cubeQueryDefinition.getSorts());
      this.cubeQueryDefinition.getFilters().removeAll(derivedMeasureFilters);
      this.cubeQueryDefinition.getSorts().clear();
      this.cubeCursor=createCursor(null);
      this.cubeQueryDefinition.getFilters().clear();
      this.cubeQueryDefinition.getFilters().addAll(filterTemp);
      this.cubeQueryDefinition.getSorts().addAll(sortTemp);
      BindingValueFetcher fetcher=new BindingValueFetcher(this.cubeCursor,this.cubeQueryDefinition,candidateBindingOfInteresting,bindingDimLevels);
      this.cubeCursor=createCursor(fetcher);
    }
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  DataException e) {
    if (e.getErrorCode() == ResourceConstants.FAIL_LOAD_CUBE) {
      logger.log(Level.SEVERE,e.getMessage());
      return null;
    }
    throw e;
  }
}",0.9766722515788115
66886,"private ICubeCursor createCursor(IBindingValueFetcher fetcher) throws DataException, IOException, OLAPException {
  ICubeCursor cursor;
  CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
  executor.getFacttableBasedFilterHelpers().addAll(this.preparedQuery.getInternalFilters());
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=loadCube(documentManager,executor);
  BirtCubeView bcv=new BirtCubeView(executor,cube,appContext,fetcher);
  CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube);
  cube.close();
  String newResultSetId=executor.getQueryResultsId();
  if (newResultSetId != null) {
    this.queryResultsId=newResultSetId;
  }
  this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
  this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.cubeQueryDefinition,bcv));
  cursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
  return cursor;
}","private ICubeCursor createCursor(IBindingValueFetcher fetcher) throws DataException, IOException, OLAPException {
  ICubeCursor cursor;
  CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
  executor.getFacttableBasedFilterHelpers().addAll(this.preparedQuery.getInternalFilters());
  IDocumentManager documentManager=getDocumentManager(executor);
  ICube cube=null;
  try {
    cube=loadCube(documentManager,executor);
  }
 catch (  Exception ex) {
    throw new DataException(ResourceConstants.FAIL_LOAD_CUBE,ex);
  }
  BirtCubeView bcv=new BirtCubeView(executor,cube,appContext,fetcher);
  CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube);
  cube.close();
  String newResultSetId=executor.getQueryResultsId();
  if (newResultSetId != null) {
    this.queryResultsId=newResultSetId;
  }
  this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
  this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(this.cubeQueryDefinition,bcv));
  cursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
  return cursor;
}",0.9486000835771
66887,"private void init(Object value,Object size){
  if (NumberUtil.isBigNumber(value)) {
    bIsBigNumber=true;
    divisor=((BigNumber)value).getDivisor();
    bnSize=(BigNumber)size;
  }
 else   if (NumberUtil.isBigDecimal(value)) {
    bIsBigDecimal=true;
    bdSize=(Number)size;
  }
  this.oValue=value;
  if (value instanceof Double && ((Double)value).isNaN()) {
    this.oValue=null;
  }
  this.dSize=(size instanceof Number) ? ((Number)size).doubleValue() : 0;
}","private void init(Object value,Object size){
  if (NumberUtil.isBigNumber(value)) {
    bIsBigNumber=true;
    divisor=((BigNumber)value).getDivisor();
    bnSize=(BigNumber)size;
  }
 else   if (NumberUtil.isBigDecimal(value)) {
    bIsBigDecimal=true;
    if (NumberUtil.isJavaMathBigDecimal(value)) {
      bdSize=NumberUtil.asJavaMathBigDecimal((Number)size);
    }
 else {
      bdSize=NumberUtil.asBigDecimal((Number)size);
    }
  }
  this.oValue=value;
  if (value instanceof Double && ((Double)value).isNaN()) {
    this.oValue=null;
  }
  this.dSize=(size instanceof Number) ? ((Number)size).doubleValue() : 0;
}",0.8316467341306347
66888,"protected void init(Number bdPositiveValue,Number bdNegativeValue){
  if (isBigDecimal) {
    bdPosValue=bdPositiveValue;
    bdNegValue=bdNegativeValue;
    dPosValue=bdPosValue.doubleValue();
    dNegValue=bdNegValue.doubleValue();
  }
}","protected void init(Number bdPositiveValue,Number bdNegativeValue){
  if (isBigDecimal) {
    if (NumberUtil.isJavaMathBigDecimal(bdPositiveValue)) {
      bdPosValue=NumberUtil.asJavaMathBigDecimal(bdPositiveValue);
      bdNegValue=NumberUtil.asJavaMathBigDecimal(bdNegativeValue);
    }
 else {
      bdPosValue=NumberUtil.asBigDecimal(bdPositiveValue);
      bdNegValue=NumberUtil.asBigDecimal(bdNegativeValue);
    }
    dPosValue=bdPosValue.doubleValue();
    dNegValue=bdNegValue.doubleValue();
  }
}",0.4369973190348525
66889,"/** 
 * Returns the formatted string representation of given object.
 * @param oValue
 * @param fs
 * @param lcl
 * @return formatted string
 */
public static final String format(Object oValue,FormatSpecifier fs,ULocale lcl,Object oCachedJavaFormatter) throws ChartException {
  String sValue;
  if (oValue == null) {
    return null;
  }
 else   if ((oValue instanceof String) && !(fs instanceof StringFormatSpecifier)) {
    return (String)oValue;
  }
  if (fs instanceof DateFormatSpecifier || fs instanceof JavaDateFormatSpecifier) {
    if (!(oValue instanceof Calendar || oValue instanceof DateTimeDataElement)) {
      fs=null;
    }
  }
 else   if (fs instanceof NumberFormatSpecifier || fs instanceof JavaNumberFormatSpecifier || fs instanceof FractionNumberFormatSpecifier) {
    if (!(oValue instanceof Number || oValue instanceof NumberDataElement || oValue instanceof BigNumberDataElement|| NumberUtil.isBigNumber(oValue)|| NumberUtil.isBigDecimal(oValue))) {
      fs=null;
    }
  }
 else   if (fs instanceof StringFormatSpecifier) {
    if (!(oValue instanceof String)) {
      fs=null;
    }
  }
  if (fs == null) {
    if (oCachedJavaFormatter != null) {
      if (NumberUtil.isBigNumber(oValue)) {
        return ((DecimalFormat)oCachedJavaFormatter).format(((BigNumber)oValue).getValue());
      }
 else       if (NumberUtil.isBigDecimal(oValue)) {
        return ((DecimalFormat)oCachedJavaFormatter).format(oValue);
      }
 else       if (oValue instanceof Double || oValue instanceof NumberDataElement) {
        if (oCachedJavaFormatter instanceof DecimalFormat) {
          final double dValue=oValue instanceof Double ? ((Double)oValue).doubleValue() : ((NumberDataElement)oValue).getValue();
          sValue=((DecimalFormat)oCachedJavaFormatter).format(dValue);
          return correctNumber(sValue);
        }
      }
 else       if (oValue instanceof Calendar || oValue instanceof DateTimeDataElement) {
        Calendar calendar=oValue instanceof Calendar ? (Calendar)oValue : ((DateTimeDataElement)oValue).getValueAsCalendar();
        if (oCachedJavaFormatter instanceof IDateFormatWrapper) {
          return ((IDateFormatWrapper)oCachedJavaFormatter).format(calendar.getTime());
        }
 else         if (oCachedJavaFormatter instanceof DateFormat) {
          return ((DateFormat)oCachedJavaFormatter).format(calendar);
        }
 else         if (oCachedJavaFormatter instanceof DateFormatSpecifier) {
          return ((DateFormatSpecifier)oCachedJavaFormatter).format(calendar,lcl);
        }
      }
 else       if (oValue instanceof IDataPointEntry) {
        if (oCachedJavaFormatter instanceof FormatSpecifier) {
          return ((IDataPointEntry)oValue).getFormattedString((FormatSpecifier)oCachedJavaFormatter,lcl);
        }
      }
    }
 else {
      if (NumberUtil.isBigNumber(oValue)) {
        return NumberUtil.getDefaultBigDecimalFormat(lcl).format(((BigNumber)oValue).getValue());
      }
 else       if (NumberUtil.isBigDecimal(oValue)) {
        return NumberUtil.getDefaultBigDecimalFormat(lcl).format(oValue);
      }
 else       if (oValue instanceof Number) {
        return NumberFormat.getInstance(lcl).format(((Number)oValue).doubleValue());
      }
 else       if (oValue instanceof NumberDataElement) {
        return NumberFormat.getInstance(lcl).format(((NumberDataElement)oValue).getValue());
      }
 else       if (oValue instanceof BigNumberDataElement) {
        return NumberFormat.getInstance(lcl).format(((BigNumberDataElement)oValue).getValue());
      }
 else       if (oValue instanceof Calendar) {
        return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(oValue);
      }
 else       if (oValue instanceof DateTimeDataElement) {
        return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(((DateTimeDataElement)oValue).getValueAsCalendar());
      }
 else       if (oValue instanceof IDataPointEntry) {
        return ((IDataPointEntry)oValue).getFormattedString(null,lcl);
      }
    }
  }
 else   if (oValue instanceof IDataPointEntry) {
    return ((IDataPointEntry)oValue).getFormattedString(fs,lcl);
  }
 else   if (NumberFormatSpecifier.class.isInstance(fs)) {
    final NumberFormatSpecifier nfs=(NumberFormatSpecifier)fs;
    if (NumberUtil.isBigNumber(oValue)) {
      return correctNumber(nfs.format(((BigNumber)oValue).getValue(),lcl));
    }
 else     if (NumberUtil.isBigDecimal(oValue)) {
      return correctNumber(nfs.format((BigDecimal)oValue,lcl));
    }
 else {
      final double dValue=asPrimitiveDouble(oValue,lcl);
      return correctNumber(nfs.format(dValue,lcl));
    }
  }
 else   if (JavaNumberFormatSpecifier.class.isInstance(fs)) {
    final JavaNumberFormatSpecifier nfs=(JavaNumberFormatSpecifier)fs;
    if (NumberUtil.isBigNumber(oValue)) {
      return correctNumber(nfs.format(((BigNumber)oValue).getValue(),lcl));
    }
 else     if (NumberUtil.isBigDecimal(oValue)) {
      return correctNumber(nfs.format((BigDecimal)oValue,lcl));
    }
 else {
      final double dValue=asPrimitiveDouble(oValue,lcl);
      return correctNumber(nfs.format(dValue,lcl));
    }
  }
 else   if (FractionNumberFormatSpecifier.class.isInstance(fs)) {
    final FractionNumberFormatSpecifier fnfs=(FractionNumberFormatSpecifier)fs;
    final double dValue=asPrimitiveDouble(oValue,lcl);
    return correctNumber(fnfs.format(dValue,lcl));
  }
 else   if (DateFormatSpecifier.class.isInstance(fs)) {
    final DateFormatSpecifier dfs=(DateFormatSpecifier)fs;
    return dfs.format(asCalendar(oValue,lcl),lcl);
  }
 else   if (JavaDateFormatSpecifier.class.isInstance(fs)) {
    final JavaDateFormatSpecifier jdfs=(JavaDateFormatSpecifier)fs;
    return jdfs.format(asCalendar(oValue,lcl),lcl);
  }
 else   if (StringFormatSpecifier.class.isInstance(fs)) {
    final StringFormatSpecifier jdfs=(StringFormatSpecifier)fs;
    return jdfs.format(oValue.toString(),lcl);
  }
 else {
    if (NumberUtil.isBigNumber(oValue)) {
      return NumberUtil.getDefaultBigDecimalFormat(lcl).format(((BigNumber)oValue).getValue());
    }
 else     if (NumberUtil.isBigDecimal(oValue)) {
      return NumberUtil.getDefaultBigDecimalFormat(lcl).format(oValue);
    }
 else     if (oValue instanceof Number) {
      return NumberFormat.getInstance(lcl).format(((Number)oValue).doubleValue());
    }
 else     if (oValue instanceof NumberDataElement) {
      return NumberFormat.getInstance(lcl).format(((NumberDataElement)oValue).getValue());
    }
 else     if (oValue instanceof Calendar) {
      return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(oValue);
    }
 else     if (oValue instanceof DateTimeDataElement) {
      return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(((DateTimeDataElement)oValue).getValueAsCalendar());
    }
  }
  return oValue.toString();
}","/** 
 * Returns the formatted string representation of given object.
 * @param oValue
 * @param fs
 * @param lcl
 * @return formatted string
 */
public static final String format(Object oValue,FormatSpecifier fs,ULocale lcl,Object oCachedJavaFormatter) throws ChartException {
  String sValue;
  if (oValue == null) {
    return null;
  }
 else   if ((oValue instanceof String) && !(fs instanceof StringFormatSpecifier)) {
    return (String)oValue;
  }
  if (fs instanceof DateFormatSpecifier || fs instanceof JavaDateFormatSpecifier) {
    if (!(oValue instanceof Calendar || oValue instanceof DateTimeDataElement)) {
      fs=null;
    }
  }
 else   if (fs instanceof NumberFormatSpecifier || fs instanceof JavaNumberFormatSpecifier || fs instanceof FractionNumberFormatSpecifier) {
    if (!(oValue instanceof Number || oValue instanceof NumberDataElement || oValue instanceof BigNumberDataElement|| NumberUtil.isBigNumber(oValue)|| NumberUtil.isBigDecimal(oValue))) {
      fs=null;
    }
  }
 else   if (fs instanceof StringFormatSpecifier) {
    if (!(oValue instanceof String)) {
      fs=null;
    }
  }
  if (fs == null) {
    if (oCachedJavaFormatter != null) {
      if (NumberUtil.isBigNumber(oValue)) {
        return ((DecimalFormat)oCachedJavaFormatter).format(((BigNumber)oValue).getValue());
      }
 else       if (NumberUtil.isBigDecimal(oValue)) {
        return ((DecimalFormat)oCachedJavaFormatter).format(oValue);
      }
 else       if (oValue instanceof Double || oValue instanceof NumberDataElement) {
        if (oCachedJavaFormatter instanceof DecimalFormat) {
          final double dValue=oValue instanceof Double ? ((Double)oValue).doubleValue() : ((NumberDataElement)oValue).getValue();
          sValue=((DecimalFormat)oCachedJavaFormatter).format(dValue);
          return correctNumber(sValue);
        }
      }
 else       if (oValue instanceof Calendar || oValue instanceof DateTimeDataElement) {
        Calendar calendar=oValue instanceof Calendar ? (Calendar)oValue : ((DateTimeDataElement)oValue).getValueAsCalendar();
        if (oCachedJavaFormatter instanceof IDateFormatWrapper) {
          return ((IDateFormatWrapper)oCachedJavaFormatter).format(calendar.getTime());
        }
 else         if (oCachedJavaFormatter instanceof DateFormat) {
          return ((DateFormat)oCachedJavaFormatter).format(calendar);
        }
 else         if (oCachedJavaFormatter instanceof DateFormatSpecifier) {
          return ((DateFormatSpecifier)oCachedJavaFormatter).format(calendar,lcl);
        }
      }
 else       if (oValue instanceof IDataPointEntry) {
        if (oCachedJavaFormatter instanceof FormatSpecifier) {
          return ((IDataPointEntry)oValue).getFormattedString((FormatSpecifier)oCachedJavaFormatter,lcl);
        }
      }
    }
 else {
      if (NumberUtil.isBigNumber(oValue)) {
        return NumberUtil.getDefaultBigDecimalFormat(lcl).format(((BigNumber)oValue).getValue());
      }
 else       if (NumberUtil.isBigDecimal(oValue)) {
        return NumberUtil.getDefaultBigDecimalFormat(lcl).format(oValue);
      }
 else       if (oValue instanceof Number) {
        return NumberFormat.getInstance(lcl).format(((Number)oValue).doubleValue());
      }
 else       if (oValue instanceof NumberDataElement) {
        return NumberFormat.getInstance(lcl).format(((NumberDataElement)oValue).getValue());
      }
 else       if (oValue instanceof BigNumberDataElement) {
        return NumberFormat.getInstance(lcl).format(((BigNumberDataElement)oValue).getValue());
      }
 else       if (oValue instanceof Calendar) {
        return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(oValue);
      }
 else       if (oValue instanceof DateTimeDataElement) {
        return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(((DateTimeDataElement)oValue).getValueAsCalendar());
      }
 else       if (oValue instanceof IDataPointEntry) {
        return ((IDataPointEntry)oValue).getFormattedString(null,lcl);
      }
    }
  }
 else   if (oValue instanceof IDataPointEntry) {
    return ((IDataPointEntry)oValue).getFormattedString(fs,lcl);
  }
 else   if (NumberFormatSpecifier.class.isInstance(fs)) {
    final NumberFormatSpecifier nfs=(NumberFormatSpecifier)fs;
    if (NumberUtil.isBigNumber(oValue)) {
      return correctNumber(nfs.format(((BigNumber)oValue).getValue(),lcl));
    }
 else     if (NumberUtil.isBigDecimal(oValue)) {
      return correctNumber(nfs.format((Number)oValue,lcl));
    }
 else {
      final double dValue=asPrimitiveDouble(oValue,lcl);
      return correctNumber(nfs.format(dValue,lcl));
    }
  }
 else   if (JavaNumberFormatSpecifier.class.isInstance(fs)) {
    final JavaNumberFormatSpecifier nfs=(JavaNumberFormatSpecifier)fs;
    if (NumberUtil.isBigNumber(oValue)) {
      return correctNumber(nfs.format(((BigNumber)oValue).getValue(),lcl));
    }
 else     if (NumberUtil.isBigDecimal(oValue)) {
      return correctNumber(nfs.format((Number)oValue,lcl));
    }
 else {
      final double dValue=asPrimitiveDouble(oValue,lcl);
      return correctNumber(nfs.format(dValue,lcl));
    }
  }
 else   if (FractionNumberFormatSpecifier.class.isInstance(fs)) {
    final FractionNumberFormatSpecifier fnfs=(FractionNumberFormatSpecifier)fs;
    final double dValue=asPrimitiveDouble(oValue,lcl);
    return correctNumber(fnfs.format(dValue,lcl));
  }
 else   if (DateFormatSpecifier.class.isInstance(fs)) {
    final DateFormatSpecifier dfs=(DateFormatSpecifier)fs;
    return dfs.format(asCalendar(oValue,lcl),lcl);
  }
 else   if (JavaDateFormatSpecifier.class.isInstance(fs)) {
    final JavaDateFormatSpecifier jdfs=(JavaDateFormatSpecifier)fs;
    return jdfs.format(asCalendar(oValue,lcl),lcl);
  }
 else   if (StringFormatSpecifier.class.isInstance(fs)) {
    final StringFormatSpecifier jdfs=(StringFormatSpecifier)fs;
    return jdfs.format(oValue.toString(),lcl);
  }
 else {
    if (NumberUtil.isBigNumber(oValue)) {
      return NumberUtil.getDefaultBigDecimalFormat(lcl).format(((BigNumber)oValue).getValue());
    }
 else     if (NumberUtil.isBigDecimal(oValue)) {
      return NumberUtil.getDefaultBigDecimalFormat(lcl).format(oValue);
    }
 else     if (oValue instanceof Number) {
      return NumberFormat.getInstance(lcl).format(((Number)oValue).doubleValue());
    }
 else     if (oValue instanceof NumberDataElement) {
      return NumberFormat.getInstance(lcl).format(((NumberDataElement)oValue).getValue());
    }
 else     if (oValue instanceof Calendar) {
      return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(oValue);
    }
 else     if (oValue instanceof DateTimeDataElement) {
      return DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT,lcl).format(((DateTimeDataElement)oValue).getValueAsCalendar());
    }
  }
  return oValue.toString();
}",0.9976744186046512
66890,"/** 
 * This method wraps number as big decimal.
 * @param n
 * @return
 */
public static BigDecimal asBigDecimal(Number n){
  if (n == null) {
    return null;
  }
 else   if (n instanceof BigNumber) {
    return ((BigNumber)n).getValue();
  }
 else   if (n instanceof BigDecimal) {
    return (BigDecimal)n;
  }
 else   if (n instanceof java.math.BigDecimal) {
    return new BigDecimal(((java.math.BigDecimal)n).toString());
  }
  return BigDecimal.valueOf(n.doubleValue());
}","/** 
 * This method wraps number as big decimal.
 * @param n
 * @return
 */
public static BigDecimal asBigDecimal(Number n){
  if (n == null) {
    return null;
  }
 else   if (n instanceof BigNumber) {
    return ((BigNumber)n).getValue();
  }
 else   if (n instanceof BigDecimal) {
    return (BigDecimal)n;
  }
 else   if (n instanceof java.math.BigDecimal) {
    return new BigDecimal(((java.math.BigDecimal)n).toString());
  }
 else   if (n instanceof BigInteger) {
    return new BigDecimal(n.toString());
  }
  return BigDecimal.valueOf(n.doubleValue());
}",0.9193857965451055
66891,"private void populateSeriesTypesList(){
  if (cbSeriesType == null) {
    return;
  }
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (getCurrentChartType().canCombine()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel instanceof ChartWithAxes) {
    Axis xAxis=(((ChartWithAxes)chartModel).getAxes().get(0));
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastType=ChartCacheManager.getInstance().findSeriesType();
      Axis overlayAxis=xAxis.getAssociatedAxes().get(1);
      if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
        Series oseries=(overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries();
        String sDisplayName=oseries.getDisplayName();
        if (lastType != null) {
          cbSeriesType.setText(lastType);
        }
 else {
          cbSeriesType.setText(sDisplayName);
        }
        String seriesName=oseries.getSeriesIdentifier().toString();
        if (seriesName.trim().length() != 0) {
          Iterator<Entry<String,Series>> itr=htSeriesNames.entrySet().iterator();
          while (itr.hasNext()) {
            Entry<String,Series> entry=itr.next();
            entry.getValue().setSeriesIdentifier(seriesName);
          }
        }
      }
      changeOverlaySeriesType();
    }
  }
}","private void populateSeriesTypesList(){
  if (cbSeriesType == null) {
    return;
  }
  if (htSeriesNames == null) {
    htSeriesNames=new Hashtable<String,Series>(20);
  }
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (getCurrentChartType().canCombine()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(getContext().getClass().getSimpleName()),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel instanceof ChartWithAxes) {
    Axis xAxis=(((ChartWithAxes)chartModel).getAxes().get(0));
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastType=ChartCacheManager.getInstance().findSeriesType();
      Axis overlayAxis=xAxis.getAssociatedAxes().get(1);
      if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
        Series oseries=(overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries();
        String sDisplayName=oseries.getDisplayName();
        if (lastType != null) {
          cbSeriesType.setText(lastType);
        }
 else {
          cbSeriesType.setText(sDisplayName);
        }
        String seriesName=oseries.getSeriesIdentifier().toString();
        if (seriesName.trim().length() != 0) {
          Iterator<Entry<String,Series>> itr=htSeriesNames.entrySet().iterator();
          while (itr.hasNext()) {
            Entry<String,Series> entry=itr.next();
            entry.getValue().setSeriesIdentifier(seriesName);
          }
        }
      }
      changeOverlaySeriesType();
    }
  }
}",0.972956170345042
66892,"private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (htSeriesNames == null) {
      htSeriesNames=new Hashtable<String,Series>(20);
    }
    if (type.canCombine()) {
      if (IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE.equals(sDimension) && newSeries instanceof AreaSeries) {
        continue;
      }
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cbSeriesType.add(sDisplayName);
      }
      if (type.getName().equals(chartModel.getType())) {
        cbSeriesType.select(cbSeriesType.getItemCount() - 1);
      }
    }
  }
}","private void populateSeriesTypes(Collection<IChartType> allChartType,Series series,Orientation orientation){
  Iterator<IChartType> iterTypes=allChartType.iterator();
  while (iterTypes.hasNext()) {
    IChartType type=iterTypes.next();
    Series newSeries=type.getSeries();
    if (type.canCombine()) {
      if (IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE.equals(sDimension) && newSeries instanceof AreaSeries) {
        continue;
      }
      if (!(newSeries instanceof StockSeries) || (orientation.getValue() == Orientation.VERTICAL)) {
        String sDisplayName=newSeries.getDisplayName();
        htSeriesNames.put(sDisplayName,newSeries);
        cbSeriesType.add(sDisplayName);
      }
      if (type.getName().equals(chartModel.getType())) {
        cbSeriesType.select(cbSeriesType.getItemCount() - 1);
      }
    }
  }
}",0.94712905059693
66893,"/** 
 * Next all associated datasetiterators and update the datapointhints object.
 * @param dph
 */
public final void next(DataPointHints dph){
  for (int i=0; i < keys.length; i++) {
    Object val=dsis[i].next();
    if (dph != null) {
      dph.setUserValue(keys[i],val);
    }
  }
}","/** 
 * Next all associated datasetiterators and update the datapointhints object.
 * @param dph
 */
public final void next(DataPointHints dph){
  for (int i=0; i < keys.length; i++) {
    if (dsis[i].hasNext()) {
      Object val=dsis[i].next();
      if (dph != null) {
        dph.setUserValue(keys[i],val);
      }
    }
  }
}",0.9303079416531604
66894,"/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setAnalysisColumn(hint.getAnalysisColumn());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
      columns[n].setFormatValue(hint.getValueFormat());
      columns[n].setIndexColumn(hint.isIndexColumn());
      columns[n].setRemoveDuplicateValues(hint.isCompressed());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}","/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setDisplayName(hint.getDisplayName());
      columns[n].setDisplayNameKey(hint.getDisplayNameKey());
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setAnalysisColumn(hint.getAnalysisColumn());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
      columns[n].setFormatValue(hint.getValueFormat());
      columns[n].setIndexColumn(hint.isIndexColumn());
      columns[n].setRemoveDuplicateValues(hint.isCompressed());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}",0.9745470232959448
66895,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setDisplayName(hint.getDisplayName());
      items[i].setDisplayNameKey(hint.getDisplayNameKey());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.9791055718475072
66896,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setDisplayName(hint.getDisplayName());
      items[i].setDisplayNameKey(hint.getDisplayNameKey());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}",0.9767536704730831
66897,"/** 
 * This method initializes cmpTypeButtons
 */
private void createGroups(Vector<IChartSubType> vSubTypes){
  vSubTypeNames=new Vector<String>();
  if (cmpTypeButtons != null && !cmpTypeButtons.isDisposed()) {
    cmpTypeButtons.dispose();
  }
  cmpTypeButtons=new Composite(cmpSubTypes,SWT.NONE);
  cmpTypeButtons.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout rowLayout=new GridLayout(vSubTypes.size(),false);
  rowLayout.marginTop=0;
  rowLayout.marginLeft=0;
  rowLayout.marginBottom=12;
  rowLayout.marginRight=12;
  rowLayout.horizontalSpacing=4;
  cmpTypeButtons.setLayout(rowLayout);
  for (int iC=0; iC < vSubTypes.size(); iC++) {
    IChartSubType subType=vSubTypes.get(iC);
    vSubTypeNames.add(subType.getName());
    Button btnType=new Button(cmpTypeButtons,SWT.TOGGLE | SWT.FLAT);
    btnType.setData(subType.getName());
    btnType.setImage(subType.getImage());
    GridData gd=new GridData();
    gd.widthHint=80;
    gd.heightHint=80;
    btnType.setLayoutData(gd);
    btnType.addSelectionListener(this);
    btnType.setToolTipText(subType.getDescription());
    btnType.getImage().setBackground(btnType.getBackground());
    btnType.setVisible(true);
    if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
      break;
    }
  }
}","/** 
 * This method initializes cmpTypeButtons
 */
private void createGroups(Vector<IChartSubType> vSubTypes){
  vSubTypeNames=new Vector<String>();
  if (cmpTypeButtons != null && !cmpTypeButtons.isDisposed()) {
    cmpTypeButtons.dispose();
  }
  cmpTypeButtons=new Composite(cmpSubTypes,SWT.NONE);
  cmpTypeButtons.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout rowLayout=new GridLayout(vSubTypes.size(),false);
  rowLayout.marginTop=0;
  rowLayout.marginLeft=0;
  rowLayout.marginBottom=12;
  rowLayout.marginRight=12;
  rowLayout.horizontalSpacing=4;
  cmpTypeButtons.setLayout(rowLayout);
  for (int iC=0; iC < vSubTypes.size(); iC++) {
    IChartSubType subType=vSubTypes.get(iC);
    vSubTypeNames.add(subType.getName());
    Button btnType=new Button(cmpTypeButtons,SWT.TOGGLE | SWT.FLAT);
    btnType.setData(subType.getName());
    btnType.setImage(subType.getImage());
    GridData gd=new GridData();
    gd.widthHint=80;
    gd.heightHint=80;
    btnType.setLayoutData(gd);
    btnType.addSelectionListener(this);
    btnType.setToolTipText(subType.getDescription());
    btnType.getImage().setBackground(btnType.getBackground());
    btnType.setVisible(true);
    cmpTypeButtons.layout(true);
    if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
      break;
    }
  }
  cmpSubTypes.layout(true);
}",0.9769550434454098
66898,"/** 
 * This method initializes cmpSubTypes
 */
private void createComposite(Vector<IChartSubType> vSubTypes){
  Label lblSubtypes=new Label(cmpRight,SWT.NO_FOCUS);
{
    lblSubtypes.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=5;
    lblSubtypes.setLayoutData(gd);
  }
  GridData gdTypes=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL);
  cmpSubTypes=new Composite(cmpRight,SWT.NONE);
  createGroups(vSubTypes);
  cmpSubTypes.setLayoutData(gdTypes);
  cmpSubTypes.setToolTipText(Messages.getString(""String_Node_Str""));
  cmpSubTypes.setLayout(new GridLayout());
  cmpSubTypes.setVisible(true);
  cmpSubTypes.layout(true);
}","/** 
 * This method initializes cmpSubTypes
 */
private void createComposite(Vector<IChartSubType> vSubTypes){
  Label lblSubtypes=new Label(cmpRight,SWT.NO_FOCUS);
{
    lblSubtypes.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=5;
    lblSubtypes.setLayoutData(gd);
  }
  GridData gdTypes=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL);
  cmpSubTypes=new Composite(cmpRight,SWT.NONE);
  createGroups(vSubTypes);
  cmpSubTypes.setLayoutData(gdTypes);
  cmpSubTypes.setToolTipText(Messages.getString(""String_Node_Str""));
  cmpSubTypes.setLayout(new GridLayout());
  cmpSubTypes.setVisible(true);
}",0.9804195804195804
66899,"/** 
 * Populate the aggregation references, return whether the aggregation should  be calculated on OVERALL level, which is indicated by reference to ""dataSetRow"" java script object.
 * @param aggrReferences
 * @param expr
 * @param aggrMap
 * @return
 * @throws DataException
 */
private boolean popAggrRefFromScriptExpr(Set aggrReferences,IScriptExpression expr,Map aggrMap) throws DataException {
  try {
    List usedRowReferences=ExpressionUtil.extractColumnExpressions(expr.getText());
    boolean result=this.hasDataSetRowReference(expr);
    for (int i=0; i < usedRowReferences.size(); i++) {
      Object o=aggrMap.get(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName());
      if (o != null) {
        aggrReferences.add(o);
      }
 else {
        if (this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()) == null) {
          return false;
        }
        result=result || popAggrRefFromBaseExpr(aggrReferences,this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()).getExpression(),aggrMap);
      }
    }
    return result;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Populate the aggregation references, return whether the aggregation should  be calculated on OVERALL level, which is indicated by reference to ""dataSetRow"" java script object.
 * @param aggrReferences
 * @param expr
 * @param aggrMap
 * @return
 * @throws DataException
 */
private boolean popAggrRefFromScriptExpr(Set aggrReferences,IScriptExpression expr,Map aggrMap) throws DataException {
  try {
    List usedRowReferences=ExpressionUtil.extractColumnExpressions(expr.getText());
    boolean result=this.hasDataSetRowReference(expr);
    for (int i=0; i < usedRowReferences.size(); i++) {
      Object o=aggrMap.get(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName());
      if (o != null) {
        aggrReferences.add(o);
      }
 else {
        if (this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()) == null) {
          return false;
        }
        result=popAggrRefFromBaseExpr(aggrReferences,this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()).getExpression(),aggrMap) || result;
      }
    }
    return result;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.7917716204869857
66900,"/** 
 * Calculate the number of tabs that will fit in the tab list composite.
 */
protected void computeTabsThatFitInComposite(){
  tabsThatFitInComposite=Math.round((getSize().y - 22) / getTabHeight());
  if (tabsThatFitInComposite <= 0) {
    tabsThatFitInComposite=1;
  }
}","/** 
 * Calculate the number of tabs that will fit in the tab list composite.
 */
protected void computeTabsThatFitInComposite(){
  tabsThatFitInComposite=Math.round(((float)(getSize().y - 22)) / getTabHeight());
  if (tabsThatFitInComposite <= 0) {
    tabsThatFitInComposite=1;
  }
}",0.983957219251337
66901,"public void execute(Command command){
  if (command == null) {
    return;
  }
  ar.startTrans(command.getLabel());
  command.execute();
  ar.commit();
}","public void execute(Command command){
  if (command == null) {
    return;
  }
  if (command.getLabel() == null) {
    command.setLabel(""String_Node_Str"");
  }
  ar.startTrans(command.getLabel());
  command.execute();
  ar.commit();
}",0.7803617571059431
66902,"public void launch(String filePath){
  Display.getDefault();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  ChartEngine.instance(config);
  final SampleStandardDataSheet ssd=new SampleStandardDataSheet();
  if (!UIHelper.isEclipseMode()) {
    try {
      TasksManager.instance().registerTask(TaskSelectType.class.getName(),new TaskSelectType());
      TasksManager.instance().registerTask(TaskSelectData.class.getName(),new TaskSelectData(){
        @Override public void doPreview(){
          super.doPreview();
          ssd.refreshSampleDataPreiview();
        }
      }
);
      TasksManager.instance().registerTask(TaskFormatChart.class.getName(),new TaskFormatChart());
      String sChartTasks=TaskSelectType.class.getName() + ""String_Node_Str"" + TaskSelectData.class.getName()+ ""String_Node_Str""+ TaskFormatChart.class.getName();
      TasksManager.instance().registerWizard(ChartWizard.class.getName(),sChartTasks,""String_Node_Str"");
    }
 catch (    Exception e) {
      WizardBase.displayException(e);
    }
  }
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,ssd);
  ssd.setContext(context);
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public void launch(String filePath){
  try {
    Class<?> claexten=Class.forName(""String_Node_Str"");
    Field saTypes=claexten.getDeclaredField(""String_Node_Str"");
    saTypes.setAccessible(true);
    saTypes.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeriesUI=claexten.getDeclaredField(""String_Node_Str"");
    saSeriesUI.setAccessible(true);
    saSeriesUI.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Class<?> claps=Class.forName(""String_Node_Str"");
    Field saDataSetProcessors=claps.getDeclaredField(""String_Node_Str"");
    saDataSetProcessors.setAccessible(true);
    saDataSetProcessors.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saRenderers=claps.getDeclaredField(""String_Node_Str"");
    saRenderers.setAccessible(true);
    saRenderers.set(null,new String[]{null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
    Field saSeries=claps.getDeclaredField(""String_Node_Str"");
    saSeries.setAccessible(true);
    saSeries.set(null,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  Display.getDefault();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(""String_Node_Str"",""String_Node_Str"");
  ChartEngine.instance(config);
  final SampleStandardDataSheet ssd=new SampleStandardDataSheet();
  if (!UIHelper.isEclipseMode()) {
    try {
      TasksManager.instance().registerTask(TaskSelectType.class.getName(),new TaskSelectType());
      TasksManager.instance().registerTask(TaskSelectData.class.getName(),new TaskSelectData(){
        @Override public void doPreview(){
          super.doPreview();
          ssd.refreshSampleDataPreiview();
        }
      }
);
      TasksManager.instance().registerTask(TaskFormatChart.class.getName(),new TaskFormatChart());
      String sChartTasks=TaskSelectType.class.getName() + ""String_Node_Str"" + TaskSelectData.class.getName()+ ""String_Node_Str""+ TaskFormatChart.class.getName();
      TasksManager.instance().registerWizard(ChartWizard.class.getName(),sChartTasks,""String_Node_Str"");
    }
 catch (    Exception e) {
      WizardBase.displayException(e);
    }
  }
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,ssd);
  ssd.setContext(context);
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.7376689384313273
66903,"private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
    }
  }
  return null;
}","private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    String[] splits=columnName.split(DERIVED_SEPERATOR);
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
      if (splits.length > 1) {
        if (splits[0].equals(inputDataSets.get(i).getName())) {
          columnName=columnName.substring(columnName.indexOf(DERIVED_SEPERATOR) + DERIVED_SEPERATOR.length());
          return findColumnHint(inputDataSets.get(i),columnName);
        }
      }
    }
  }
  return null;
}",0.7978319783197833
66904,"/** 
 * @param request
 */
protected void handleCreateElement(final ReportRequest request){
  final GraphicalViewer viewer=getGraphicalViewer();
  if (!viewer.getControl().isVisible()) {
    return;
  }
  final List list=request.getSelectionModelList();
  if (list.size() != 1) {
    return;
  }
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      Object part=viewer.getEditPartRegistry().get(list.get(0));
      if (part instanceof EditPart) {
        Request directEditRequest=new Request(ReportRequest.CREATE_ELEMENT);
        directEditRequest.getExtendedData().putAll(request.getExtendedData());
        if (((EditPart)part).understandsRequest(directEditRequest)) {
          ((EditPart)part).performRequest(directEditRequest);
        }
      }
    }
  }
);
}","/** 
 * @param request
 */
protected void handleCreateElement(final ReportRequest request){
  final GraphicalViewer viewer=getGraphicalViewer();
  if (!viewer.getControl().isVisible()) {
    return;
  }
  final List list=request.getSelectionModelList();
  if (list.size() != 1) {
    return;
  }
  if (request.getSource() instanceof ParameterHandle && list.get(0) instanceof DataItemHandle) {
    return;
  }
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      Object part=viewer.getEditPartRegistry().get(list.get(0));
      if (part instanceof EditPart) {
        Request directEditRequest=new Request(ReportRequest.CREATE_ELEMENT);
        directEditRequest.getExtendedData().putAll(request.getExtendedData());
        if (((EditPart)part).understandsRequest(directEditRequest)) {
          ((EditPart)part).performRequest(directEditRequest);
        }
      }
    }
  }
);
}",0.9333333333333332
66905,"private void fireCreateRequest(Object newElement){
  List list=new ArrayList();
  list.add(newElement);
  ReportRequest r=new ReportRequest();
  r.setType(ReportRequest.CREATE_ELEMENT);
  r.setSelectionObject(list);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
}","private void fireCreateRequest(Object newElement,Object source){
  List list=new ArrayList();
  list.add(newElement);
  ReportRequest r=new ReportRequest(source);
  r.setType(ReportRequest.CREATE_ELEMENT);
  r.setSelectionObject(list);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
}",0.4459459459459459
66906,"public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(DISPLAY_TEXT);
  try {
    if (Policy.TRACING_ACTIONS) {
      System.out.println(""String_Node_Str"");
    }
    Object newElement=InsertInLayoutUtil.performInsert(getSelection(),getTargetEditPart());
    if (newElement != null)     runCreate(newElement,targetPart.getModel());
    stack.commit();
    fireCreateRequest(newElement);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    stack.rollback();
  }
}","public void run(){
  CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
  stack.startTrans(DISPLAY_TEXT);
  try {
    if (Policy.TRACING_ACTIONS) {
      System.out.println(""String_Node_Str"");
    }
    Object newElement=InsertInLayoutUtil.performInsert(getSelection(),getTargetEditPart());
    if (newElement != null)     runCreate(newElement,targetPart.getModel());
    stack.commit();
    fireCreateRequest(newElement,getSelection());
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
    stack.rollback();
  }
}",0.9863263445761168
66907,"public boolean onBroughtToTop(IReportEditorPage page){
  String prompt=ReportPlugin.getDefault().getPreferenceStore().getString(ReportPlugin.LIBRARY_WARNING_PREFERENCE);
  if (prompt == null || (!ReportPlugin.getDefault().getPreferenceStore().getString(ReportPlugin.LIBRARY_WARNING_PREFERENCE).equals(MessageDialogWithToggle.NEVER))) {
    MessageDialogWithToggle dialog=MessageDialogWithToggle.openInformation(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,ReportPlugin.getDefault().getPreferenceStore(),ReportPlugin.LIBRARY_WARNING_PREFERENCE);
    if (dialog.getToggleState()) {
      ReportPlugin.getDefault().getPreferenceStore().setValue(ReportPlugin.LIBRARY_WARNING_PREFERENCE,MessageDialogWithToggle.NEVER);
    }
  }
  ModuleHandle newModel=getProvider().queryReportModuleHandle();
  boolean reload=false;
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    setModel(null);
    doSave(null);
    reload=true;
  }
  if ((newModel != null && getModel() != newModel) || reload) {
    Object oldModel=getModel();
    setModel(newModel);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}","public boolean onBroughtToTop(IReportEditorPage page){
  String prompt=ReportPlugin.getDefault().getPreferenceStore().getString(ReportPlugin.LIBRARY_WARNING_PREFERENCE);
  if (!alreadyShow && (prompt == null || (!ReportPlugin.getDefault().getPreferenceStore().getString(ReportPlugin.LIBRARY_WARNING_PREFERENCE).equals(MessageDialogWithToggle.NEVER)))) {
    alreadyShow=true;
    MessageDialogWithToggle dialog=MessageDialogWithToggle.openInformation(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,ReportPlugin.getDefault().getPreferenceStore(),ReportPlugin.LIBRARY_WARNING_PREFERENCE);
    if (dialog.getToggleState()) {
      ReportPlugin.getDefault().getPreferenceStore().setValue(ReportPlugin.LIBRARY_WARNING_PREFERENCE,MessageDialogWithToggle.NEVER);
    }
  }
  ModuleHandle newModel=getProvider().queryReportModuleHandle();
  boolean reload=false;
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    setModel(null);
    doSave(null);
    reload=true;
  }
  if ((newModel != null && getModel() != newModel) || reload) {
    Object oldModel=getModel();
    setModel(newModel);
    rebuildReportDesign(oldModel);
    if (getModel() != null) {
      this.getGraphicalViewer().setContents(getModel());
      hookModelEventManager(getModel());
      markPageStale(IPageStaleType.NONE);
    }
    updateStackActions();
  }
  GraphicalViewer view=getGraphicalViewer();
  if (view != null) {
    UIUtil.resetViewSelection(view,true);
  }
  return true;
}",0.9869876382563436
66908,"public Object start(IApplicationContext context) throws Exception {
  String[] appArgs=null;
  if (context.getArguments() != null) {
    Object args=context.getArguments().get(IApplicationContext.APPLICATION_ARGS);
    if (args instanceof String[]) {
      appArgs=(String[])args;
    }
  }
  ReportLauncher.main(appArgs);
  return null;
}","public Object start(IApplicationContext context) throws Exception {
  String[] appArgs=new String[0];
  if (context.getArguments() != null) {
    Object args=context.getArguments().get(IApplicationContext.APPLICATION_ARGS);
    if (args instanceof String[]) {
      appArgs=(String[])args;
    }
  }
  ReportLauncher.main(appArgs);
  return null;
}",0.9781659388646288
66909,"public void evaluateExpression(String expression,IDebugElement context,IWatchExpressionListener listener){
  fListener=listener;
  IStackFrame frame=null;
  if (context instanceof IStackFrame) {
    frame=(IStackFrame)context;
  }
 else   if (context instanceof IThread) {
    try {
      frame=((IThread)context).getTopStackFrame();
    }
 catch (    DebugException e) {
    }
  }
  final IStackFrame tempFrame=frame;
  final String tempStr=expression;
  IWatchExpressionResult watchResult=new IWatchExpressionResult(){
    public IValue getValue(){
      if (tempFrame != null) {
        return ((ScriptDebugTarget)tempFrame.getDebugTarget()).evaluate((ScriptStackFrame)tempFrame,tempStr);
      }
      return null;
    }
    public boolean hasErrors(){
      return getValue() == null;
    }
    public String[] getErrorMessages(){
      return new String[]{""String_Node_Str""};
    }
    public String getExpressionText(){
      return tempStr;
    }
    public DebugException getException(){
      return null;
    }
  }
;
  if (frame == null) {
    fListener.watchEvaluationFinished(watchResult);
  }
 else {
    fListener.watchEvaluationFinished(watchResult);
  }
}","public void evaluateExpression(String expression,IDebugElement context,IWatchExpressionListener listener){
  fListener=listener;
  IStackFrame frame=null;
  if (context instanceof IStackFrame) {
    frame=(IStackFrame)context;
  }
 else   if (context instanceof IThread) {
    try {
      frame=((IThread)context).getTopStackFrame();
    }
 catch (    DebugException e) {
    }
  }
  final IStackFrame tempFrame=frame;
  final String tempStr=expression;
  IWatchExpressionResult watchResult=new IWatchExpressionResult(){
    public IValue getValue(){
      if (tempFrame != null) {
        return ((ScriptDebugTarget)tempFrame.getDebugTarget()).evaluate((ScriptStackFrame)tempFrame,tempStr);
      }
      return null;
    }
    public boolean hasErrors(){
      return getValue() == null;
    }
    public String[] getErrorMessages(){
      return new String[]{""String_Node_Str""};
    }
    public String getExpressionText(){
      return tempStr;
    }
    public DebugException getException(){
      return null;
    }
  }
;
  fListener.watchEvaluationFinished(watchResult);
}",0.9577965348733896
66910,"/** 
 * @param showFeatures
 */
public ReportAdvancedLauncherTab(boolean showFeatures){
  fNumExternalChecked=0;
  fNumWorkspaceChecked=0;
  fShowFeatures=true;
  fShowFeatures=showFeatures;
  PDEPlugin.getDefault().getLabelProvider().connect(this);
  fImage=PDEPluginImages.DESC_REQ_PLUGINS_OBJ.createImage();
  fWorkspaceBIRTModels=getInterestProject(REPORTPROJECTKID);
  fWorkspaceJavaModels=getInterestProject(JavaCore.NATURE_ID);
}","/** 
 * @param showFeatures
 */
public ReportAdvancedLauncherTab(boolean showFeatures){
  fNumExternalChecked=0;
  fNumWorkspaceChecked=0;
  fShowFeatures=showFeatures;
  PDEPlugin.getDefault().getLabelProvider().connect(this);
  fImage=PDEPluginImages.DESC_REQ_PLUGINS_OBJ.createImage();
  fWorkspaceBIRTModels=getInterestProject(REPORTPROJECTKID);
  fWorkspaceJavaModels=getInterestProject(JavaCore.NATURE_ID);
}",0.9741176470588236
66911,"private void createInfomation(Composite parent){
  Font font=parent.getFont();
  Composite continer=createComposite(parent,font,2,2,GridData.FILL_BOTH,0,0);
  continer.setBackground(fBackgroundColor);
  IReportDocument document=null;
  try {
    document=engine.openReportDocument(getFileName());
    Label nameScript=createScriptgLabel(continer,Messages.getString(""String_Node_Str""));
    Label name=createScriptgLabel(continer,document.getName());
    Label versionScript=createScriptgLabel(continer,Messages.getString(""String_Node_Str""));
    Label version=createScriptgLabel(continer,document.getVersion());
    Label pageCountScript=createScriptgLabel(continer,Messages.getString(""String_Node_Str""));
    Label pageCount=createScriptgLabel(continer,""String_Node_Str"" + document.getPageCount());
  }
 catch (  EngineException e) {
    this.e=e;
    createErrorControl(continer);
  }
 finally {
    if (document != null) {
      document.close();
    }
  }
}","private void createInfomation(Composite parent){
  Font font=parent.getFont();
  Composite continer=createComposite(parent,font,2,2,GridData.FILL_BOTH,0,0);
  continer.setBackground(fBackgroundColor);
  IReportDocument document=null;
  try {
    document=engine.openReportDocument(getFileName());
    createScriptgLabel(continer,Messages.getString(""String_Node_Str""));
    createScriptgLabel(continer,document.getName());
    createScriptgLabel(continer,Messages.getString(""String_Node_Str""));
    createScriptgLabel(continer,document.getVersion());
    createScriptgLabel(continer,Messages.getString(""String_Node_Str""));
    createScriptgLabel(continer,""String_Node_Str"" + document.getPageCount());
  }
 catch (  EngineException e) {
    this.e=e;
    createErrorControl(continer);
  }
 finally {
    if (document != null) {
      document.close();
    }
  }
}",0.9165751920965972
66912,"protected Dimension calculatePreferredSize(IFigure container,int wHint,int hHint){
  Rectangle rect=container.getParent().getClientArea().getCopy();
  List list=container.getChildren();
  if (list.size() == 0) {
    return Dimension.SINGLETON;
  }
  Figure child=(Figure)list.get(0);
  Dimension dim=new Dimension();
  wHint=Math.max(-1,wHint - container.getInsets().getWidth());
  hHint=Math.max(-1,hHint - container.getInsets().getHeight());
  wHint=Math.max(wHint,rect.width - container.getInsets().getWidth());
  hHint=Math.max(hHint,rect.height - container.getInsets().getHeight());
  if (child instanceof TableFigure && needlayout) {
    IFigure tablePane=((LayeredPane)((LayeredPane)((TableFigure)child).getContents()).getLayer(LayerConstants.PRINTABLE_LAYERS)).getLayer(LayerConstants.PRIMARY_LAYER);
    LayoutManager layoutManager=tablePane.getLayoutManager();
    ((TableLayout)layoutManager).markDirty();
    container.getBounds().width=wHint;
    container.getBounds().height=hHint;
    child.validate();
    needlayout=false;
  }
  dim=child.getPreferredSize(wHint,hHint).expand(container.getInsets().getWidth(),container.getInsets().getHeight());
  return dim;
}","protected Dimension calculatePreferredSize(IFigure container,int wHint,int hHint){
  Rectangle rect=container.getParent().getClientArea().getCopy();
  List list=container.getChildren();
  if (list.size() == 0) {
    return Dimension.SINGLETON;
  }
  Figure child=(Figure)list.get(0);
  wHint=Math.max(-1,wHint - container.getInsets().getWidth());
  hHint=Math.max(-1,hHint - container.getInsets().getHeight());
  wHint=Math.max(wHint,rect.width - container.getInsets().getWidth());
  hHint=Math.max(hHint,rect.height - container.getInsets().getHeight());
  if (child instanceof TableFigure && needlayout) {
    IFigure tablePane=((LayeredPane)((LayeredPane)((TableFigure)child).getContents()).getLayer(LayerConstants.PRINTABLE_LAYERS)).getLayer(LayerConstants.PRIMARY_LAYER);
    LayoutManager layoutManager=tablePane.getLayoutManager();
    ((TableLayout)layoutManager).markDirty();
    container.getBounds().width=wHint;
    container.getBounds().height=hHint;
    child.validate();
    needlayout=false;
  }
  Dimension dim=child.getPreferredSize(wHint,hHint).expand(container.getInsets().getWidth(),container.getInsets().getHeight());
  return dim;
}",0.9815529815529817
66913,"public void widgetSelected(SelectionEvent e){
  String eText=e.text;
  ValueCombo combo=(ValueCombo)e.widget;
  String comboText=combo.getText();
  if (!selected) {
    return;
  }
  selected=false;
  int index=combo.indexOf(comboText);
  if (index >= 0) {
    if (oldValueList.size() > 0) {
      oldValue=oldValueList.get(0);
      oldValueList.clear();
    }
    ISelection action=actionMap.get(index);
    if (action == null) {
      oldValue=comboText;
      oldValueList.add(oldValue);
      return;
    }
    String text=null;
    if (action instanceof ISelection2) {
      text=((ISelection2)action).doSelection(oldValue,index,comboText);
    }
 else     if (action instanceof ISelection) {
      text=action.doSelection(oldValue);
    }
    if (text != null) {
      oldValue=text;
    }
    oldValueList.add(oldValue);
    combo.select(-1);
    combo.setText(oldValue);
  }
}","public void widgetSelected(SelectionEvent e){
  String eText=e.text;
  ValueCombo combo=(ValueCombo)e.widget;
  String comboText=combo.getText();
  if (!selected) {
    return;
  }
  selected=false;
  int index=combo.indexOf(comboText);
  if (index >= 0) {
    if (oldValueList.size() > 0) {
      oldValue=oldValueList.get(0);
      oldValueList.clear();
    }
    ISelection action=actionMap.get(index);
    if (action == null) {
      oldValue=comboText;
      oldValueList.add(oldValue);
      return;
    }
    String text=null;
    if (action instanceof ISelection2) {
      text=((ISelection2)action).doSelection(oldValue,index,comboText);
    }
 else {
      text=action.doSelection(oldValue);
    }
    if (text != null) {
      oldValue=text;
    }
    oldValueList.add(oldValue);
    combo.select(-1);
    combo.setText(oldValue);
  }
}",0.9780600461893764
66914,"/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBEROWLEVEL,DEFAULT_MAX_CUBEROWLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL,DEFAULT_MAX_CUBECOLUMNLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXINMEMORYCUBESIZE,DEFAULT_MAX_IN_MEMORY_CUBE_SIZE);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  plugin.getPluginPreferences().setDefault(WebViewer.USER_TIME_ZONE,TimeZone.getDefault().getID());
  plugin.getPluginPreferences().setDefault(WebViewer.BIDI_ORIENTATION,WebViewer.BIDI_ORIENTATION_AUTO);
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
  String rootPath=getFilePath(""String_Node_Str"");
  if (rootPath != null)   System.setProperty(BIRT_VIEWER_ROOT_PATH,rootPath);
  System.setProperty(BIRT_IS_DESIGNER,""String_Node_Str"");
  IWebAppInfo dummy=WebViewer.getCurrentWebApp();
}","/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBEROWLEVEL,DEFAULT_MAX_CUBEROWLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL,DEFAULT_MAX_CUBECOLUMNLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXINMEMORYCUBESIZE,DEFAULT_MAX_IN_MEMORY_CUBE_SIZE);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  plugin.getPluginPreferences().setDefault(WebViewer.USER_TIME_ZONE,TimeZone.getDefault().getID());
  plugin.getPluginPreferences().setDefault(WebViewer.BIDI_ORIENTATION,WebViewer.BIDI_ORIENTATION_AUTO);
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
  String rootPath=getFilePath(""String_Node_Str"");
  if (rootPath != null)   System.setProperty(BIRT_VIEWER_ROOT_PATH,rootPath);
  System.setProperty(BIRT_IS_DESIGNER,""String_Node_Str"");
  WebViewer.getCurrentWebApp();
}",0.9812680115273776
66915,"private List getSelectedValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
      }
      crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)designHandle).getReportItem();
      cube=crosstab.getCube();
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || (!(cube instanceof CubeHandle)) || expressionCCombo.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    String expression=null;
    if (ExpressionType.JAVASCRIPT.equals(ExpressionButtonUtil.getExpression(expressionCCombo).getType())) {
      expression=expressionCCombo.getText();
    }
 else {
      expression=ExpressionButtonUtil.getCurrentExpressionConverter(expressionCCombo).convertExpression(expressionCCombo.getText(),ExpressionType.JAVASCRIPT,IExpressionConverter.EXPRESSION_CLASS_CUBE);
    }
    ReportDesignHandle copy=(ReportDesignHandle)(designHandle.getModuleHandle().copy().getHandle(null));
    EngineConfig config=new EngineConfig();
    config.setProperty(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,DataSetProvider.getCustomScriptClassLoader(Thread.currentThread().getContextClassLoader(),copy));
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(config);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
    session=engineTask.getDataSession();
    engineTask.run();
    DataService.getInstance().registerSession(cube,session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    Map context=session.getDataSessionContext().getAppContext();
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expression,cubeQueryDefn,context);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  needRefreshList=false;
  if (session != null) {
    session.shutdown();
  }
  return selValueList;
}","private List getSelectedValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  CrosstabReportItemHandle crosstab=null;
  if (designHandle instanceof ExtendedItemHandle) {
    try {
      Object obj=((ExtendedItemHandle)designHandle).getReportItem();
      if (obj instanceof CrosstabReportItemHandle) {
        crosstab=(CrosstabReportItemHandle)obj;
      }
      crosstab=(CrosstabReportItemHandle)((ExtendedItemHandle)designHandle).getReportItem();
      cube=crosstab.getCube();
    }
 catch (    ExtendedElementException e) {
      logger.log(Level.SEVERE,e.getMessage(),e);
    }
  }
  if (cube == null || expressionCCombo.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  ICubeQueryDefinition cubeQueryDefn=null;
  DataRequestSession session=null;
  try {
    String expression=null;
    if (ExpressionType.JAVASCRIPT.equals(ExpressionButtonUtil.getExpression(expressionCCombo).getType())) {
      expression=expressionCCombo.getText();
    }
 else {
      expression=ExpressionButtonUtil.getCurrentExpressionConverter(expressionCCombo).convertExpression(expressionCCombo.getText(),ExpressionType.JAVASCRIPT,IExpressionConverter.EXPRESSION_CLASS_CUBE);
    }
    ReportDesignHandle copy=(ReportDesignHandle)(designHandle.getModuleHandle().copy().getHandle(null));
    EngineConfig config=new EngineConfig();
    config.setProperty(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,DataSetProvider.getCustomScriptClassLoader(Thread.currentThread().getContextClassLoader(),copy));
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(config);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)copy),copy);
    session=engineTask.getDataSession();
    engineTask.run();
    DataService.getInstance().registerSession(cube,session);
    cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
    Map context=session.getDataSessionContext().getAppContext();
    iter=CubeValueSelector.getMemberValueIterator(session,cube,expression,cubeQueryDefn,context);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  int count=0;
  int MAX_COUNT=PreferenceFactory.getInstance().getPreferences(CrosstabPlugin.getDefault(),UIUtil.getCurrentProject()).getInt(CrosstabPlugin.PREFERENCE_FILTER_LIMIT);
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
        if (++count >= MAX_COUNT) {
          break;
        }
      }
    }
  }
  needRefreshList=false;
  if (session != null) {
    session.shutdown();
  }
  return selValueList;
}",0.993760028525584
66916,"/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  boolean bMaxIsNotIntegralMultipleOfStep=false;
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(info.iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : info.iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (!info.bLabelWithinAxes && bConsiderStartLabel) {
      double dNewStart=dStart + dStartShift * iDirection;
      if (dEnd > dStart && dNewStart > dEnd - 1) {
        dNewStart=dEnd - 1;
      }
 else       if (dEnd < dStart && dNewStart < dEnd + 1) {
        dNewStart=dEnd + 1;
      }
      dStartShift=(dNewStart - dStart) / iDirection;
      dStart=dNewStart;
    }
    if (bConsiderEndLabel) {
      double dNewEnd=dEnd + dEndShift * -iDirection;
      if (dEnd > dStart && dNewEnd < dStart + 1) {
        dNewEnd=dStart + 1;
      }
 else       if (dEnd < dStart && dNewEnd > dStart - 1) {
        dNewEnd=dStart - 1;
      }
      dEndShift=(dNewEnd - dEnd) / -iDirection;
      dEnd=dNewEnd;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  if (isSetFactor()) {
    double step=Methods.asDouble(getStep()).doubleValue();
    dTickGap=step / getFactor();
    int stepNum=(int)(Math.abs(dStart - dEnd) / dTickGap);
    AxisTickCoordinates atc=new AxisTickCoordinates(stepNum + 1,dStart,dStart < dEnd ? dStart + dTickGap * stepNum : dStart - dTickGap * stepNum,dTickGap * iDirection,true);
    setTickCordinates(atc);
    checkTickLabelsVisibility(xs,la,iLabelLocation);
    return stepNum + 1;
  }
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!info.bCategoryScale && (info.type & NUMERICAL) == NUMERICAL && (info.type & LINEAR) == LINEAR) {
    double dMax=asDouble(context.getMax()).doubleValue();
    double dMin=asDouble(context.getMin()).doubleValue();
    double dStep=asDouble(context.getStep()).doubleValue();
    bMaxIsNotIntegralMultipleOfStep=!ChartUtil.mathEqual(dMax / dStep,(int)(dMax / dStep),isBigNumber());
    if (info.bStepFixed && context.getStepNumber() != null) {
      dTickGap=dLength / (context.getStepNumber().intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(context.getStep()).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && info.bStepFixed && !info.bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(info.rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!info.bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  if (info.bStepFixed && context.getStepNumber() == null && (nTicks > 2) && bMaxIsNotIntegralMultipleOfStep) {
    if (!checkFit(xs,la,iLabelLocation)) {
      nTicks--;
      AxisTickCoordinates atc1=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!info.bCategoryScale || isTickBetweenCategories());
      setTickCordinates(null);
      setTickCordinates(atc1);
    }
  }
  checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}","/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  boolean bMaxIsNotIntegralMultipleOfStep=false;
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(info.iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : info.iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (!info.bLabelWithinAxes && bConsiderStartLabel) {
      double dNewStart=dStart + dStartShift * iDirection;
      if (dEnd > dStart && dNewStart > dEnd - 1) {
        dNewStart=dEnd - 1;
      }
 else       if (dEnd < dStart && dNewStart < dEnd + 1) {
        dNewStart=dEnd + 1;
      }
      dStartShift=(dNewStart - dStart) / iDirection;
      dStart=dNewStart;
    }
    if (bConsiderEndLabel) {
      double dNewEnd=dEnd + dEndShift * -iDirection;
      if (dEnd > dStart && dNewEnd < dStart + 1) {
        dNewEnd=dStart + 1;
      }
 else       if (dEnd < dStart && dNewEnd > dStart - 1) {
        dNewEnd=dStart - 1;
      }
      dEndShift=(dNewEnd - dEnd) / -iDirection;
      dEnd=dNewEnd;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  if (isSetFactor()) {
    double step=Methods.asDouble(getStep()).doubleValue();
    dTickGap=step / getFactor();
    int stepNum=(int)(Math.abs(dStart - dEnd) / dTickGap);
    AxisTickCoordinates atc=new AxisTickCoordinates(stepNum + 1,dStart,dStart < dEnd ? dStart + dTickGap * stepNum : dStart - dTickGap * stepNum,dTickGap * iDirection,true);
    setTickCordinates(atc);
    checkTickLabelsVisibility(xs,la,iLabelLocation);
    double length=Math.abs(this.dEnd - this.dStart);
    double valueLength=length * getFactor();
    double dMaxValue=((Number)this.getMinimum()).doubleValue() + valueLength;
    this.setMaximum(Double.valueOf(dMaxValue));
    return stepNum + 1;
  }
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!info.bCategoryScale && (info.type & NUMERICAL) == NUMERICAL && (info.type & LINEAR) == LINEAR) {
    double dMax=asDouble(context.getMax()).doubleValue();
    double dMin=asDouble(context.getMin()).doubleValue();
    double dStep=asDouble(context.getStep()).doubleValue();
    bMaxIsNotIntegralMultipleOfStep=!ChartUtil.mathEqual(dMax / dStep,(int)(dMax / dStep),isBigNumber());
    if (info.bStepFixed && context.getStepNumber() != null) {
      dTickGap=dLength / (context.getStepNumber().intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(context.getStep()).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && info.bStepFixed && !info.bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(info.rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!info.bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  if (info.bStepFixed && context.getStepNumber() == null && (nTicks > 2) && bMaxIsNotIntegralMultipleOfStep) {
    if (!checkFit(xs,la,iLabelLocation)) {
      nTicks--;
      AxisTickCoordinates atc1=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!info.bCategoryScale || isTickBetweenCategories());
      setTickCordinates(null);
      setTickCordinates(atc1);
    }
  }
  checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}",0.9709694142042508
66917,"protected IPageContent createPageContent(IPageContent pageContent,long pageNumber,long totalPageNumber){
  return (IPageContent)cloneContent((IContent)pageContent.getParent(),pageContent,pageNumber,totalPageNumber);
}","protected IPageContent createPageContent(IPageContent htmlPageContent){
  if (context.getPageNumber() == htmlPageContent.getPageNumber()) {
    return htmlPageContent;
  }
 else {
    IPageContent pageContent=htmlPageContent;
    try {
      pageContent=ReportExecutorUtil.executeMasterPage(context.getHtmlLayoutContext().getReportExecutor(),context.getPageNumber(),(MasterPageDesign)pageContent.getGenerateBy());
    }
 catch (    BirtException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
    return pageContent;
  }
}",0.1938911022576361
66918,"private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      if (existAggregationBinding(bindingName,this.defn.getBindings()))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}","private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      if (existAggregationBinding(bindingName,this.defn.getBindings()))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      Set targetDimLevel=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
      if (!targetDimLevel.isEmpty() && targetDimLevel.size() == 1) {
        return CubeQueryExecutor.DIMENSION_FILTER;
      }
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}",0.8134930334881447
66919,"public void setRowSpan(int rowSpan){
  if (data != null) {
    data.setRowSpan(rowSpan);
  }
}","public void setRowSpan(int rowSpan){
  data.setRowSpan(rowSpan);
}",0.825
66920,"public float getHeight(){
  if (data != null) {
    return data.getHeight();
  }
  return super.getHeight();
}","public float getHeight(){
  return data.getHeight();
}",0.6585365853658537
66921,"public BlankData(){
}","public BlankData(SheetData data){
  super(data);
  this.data=data;
}",0.4719101123595505
66922,"public void decreasRowSpanInDesign(){
  if (data != null) {
    data.decreasRowSpanInDesign();
  }
}","public void decreasRowSpanInDesign(){
  data.decreasRowSpanInDesign();
}",0.8372093023255814
66923,"public int getRowSpanInDesign(){
  if (data != null) {
    return data.getRowSpanInDesign();
  }
  return 0;
}","public int getRowSpanInDesign(){
  return data.getRowSpanInDesign();
}",0.7777777777777778
66924,"public void setHeight(float height){
  if (data != null) {
    data.setHeight(height);
  }
}","public void setHeight(float height){
  data.setHeight(height);
}",0.8205128205128205
66925,"public int getRowSpan(){
  if (data != null) {
    return data.getRowSpan();
  }
  return 0;
}","public int getRowSpan(){
  return data.getRowSpan();
}",0.7297297297297297
66926,"protected void filterTargetChanged(){
  needRefreshList=true;
  String targetString=null;
  if (groupBtn.getSelection()) {
    if (groupLevelList != null && groupLevelList.size() > 0 && groupGroupLevel.indexOf(groupGroupLevel.getText()) > 0 && groupGroupLevel.indexOf(groupGroupLevel.getText()) <= groupLevelList.size()) {
      expressionCCombo.setEnabled(true);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(true);
      LevelViewHandle level=(LevelViewHandle)groupLevelList.get(groupGroupLevel.indexOf(groupGroupLevel.getText()) - 1);
      DimensionHandle dimensionHandle=CrosstabAdaptUtil.getDimensionHandle(level.getCubeLevel());
      targetString=ExpressionUtil.createJSDimensionExpression(dimensionHandle.getName(),level.getCubeLevel().getName());
    }
 else {
      expressionCCombo.setEnabled(false);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(false);
      updateMemberValues();
      updateButtons();
      return;
    }
  }
 else   if (measureBtn.getSelection()) {
    if (measureList != null && measureList.size() > 0 && measureGroupLevel.indexOf(measureGroupLevel.getText()) > 0 && measureGroupLevel.indexOf(measureGroupLevel.getText()) <= measureList.size()) {
      expressionCCombo.setEnabled(true);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(true);
      MeasureViewHandle measure=(MeasureViewHandle)measureList.get(measureGroupLevel.indexOf(measureGroupLevel.getText()) - 1);
      targetString=measure.getCubeMeasure().getName();
    }
 else {
      expressionCCombo.setEnabled(false);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(false);
      updateMemberValues();
      updateButtons();
      return;
    }
  }
 else   if (detailBtn.getSelection()) {
    if (cubeLevelNameList != null && cubeLevelNameList.size() > 0) {
      expressionCCombo.setEnabled(true);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(true);
    }
 else {
      expressionCCombo.setEnabled(false);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(false);
    }
    updateMemberValues();
    updateButtons();
    return;
  }
  if (targetString != null) {
    ExtendedItemHandle element=(ExtendedItemHandle)designHandle;
    CrosstabReportItemHandle crosstab=null;
    try {
      crosstab=(CrosstabReportItemHandle)element.getReportItem();
    }
 catch (    ExtendedElementException ex) {
      ExceptionUtil.handle(ex);
    }
    ICubeQueryDefinition cubeQueryDefn=null;
    DataRequestSession session=null;
    try {
      session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
      cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
      List retList=null;
      if (groupBtn.getSelection()) {
        retList=session.getCubeQueryUtil().getReferableBindings(targetString,cubeQueryDefn,false);
      }
 else       if (measureBtn.getSelection()) {
        retList=session.getCubeQueryUtil().getReferableMeasureBindings(targetString,cubeQueryDefn);
      }
      if (retList.size() > 0) {
        IBindingMetaInfo meta=(IBindingMetaInfo)retList.get(0);
        IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(expressionCCombo);
        expressionCCombo.setText(converter.getCubeBindingExpression(meta.getBindingName()));
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
    }
 finally {
      if (session != null) {
        session.shutdown();
      }
    }
  }
  updateMemberValues();
  updateButtons();
}","protected void filterTargetChanged(){
  needRefreshList=true;
  String targetString=null;
  if (groupBtn.getSelection()) {
    if (groupLevelList != null && groupLevelList.size() > 0 && groupGroupLevel.indexOf(groupGroupLevel.getText()) > 0 && groupGroupLevel.indexOf(groupGroupLevel.getText()) <= groupLevelList.size()) {
      expressionCCombo.setEnabled(true);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(true);
      LevelViewHandle level=(LevelViewHandle)groupLevelList.get(groupGroupLevel.indexOf(groupGroupLevel.getText()) - 1);
      DimensionHandle dimensionHandle=CrosstabAdaptUtil.getDimensionHandle(level.getCubeLevel());
      targetString=ExpressionUtil.createJSDimensionExpression(dimensionHandle.getName(),level.getCubeLevel().getName());
    }
 else {
      expressionCCombo.setEnabled(false);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(false);
      updateMemberValues();
      updateButtons();
      return;
    }
  }
 else   if (measureBtn.getSelection()) {
    if (measureList != null && measureList.size() > 0 && measureGroupLevel.indexOf(measureGroupLevel.getText()) > 0 && measureGroupLevel.indexOf(measureGroupLevel.getText()) <= measureList.size()) {
      expressionCCombo.setEnabled(true);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(true);
      MeasureViewHandle measure=(MeasureViewHandle)measureList.get(measureGroupLevel.indexOf(measureGroupLevel.getText()) - 1);
      targetString=measure.getCubeMeasure().getName();
    }
 else {
      expressionCCombo.setEnabled(false);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(false);
      updateMemberValues();
      updateButtons();
      return;
    }
  }
 else   if (detailBtn.getSelection()) {
    if (cubeLevelNameList != null && cubeLevelNameList.size() > 0) {
      expressionCCombo.setEnabled(true);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(true);
    }
 else {
      expressionCCombo.setEnabled(false);
      ExpressionButtonUtil.getExpressionButton(expressionCCombo).setEnabled(false);
    }
    updateMemberValues();
    updateButtons();
    return;
  }
  if (targetString != null) {
    ExtendedItemHandle element=(ExtendedItemHandle)designHandle;
    CrosstabReportItemHandle crosstab=null;
    try {
      crosstab=(CrosstabReportItemHandle)element.getReportItem();
    }
 catch (    ExtendedElementException ex) {
      ExceptionUtil.handle(ex);
    }
    ICubeQueryDefinition cubeQueryDefn=null;
    DataRequestSession session=null;
    try {
      session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
      cubeQueryDefn=CrosstabUIHelper.createBindingQuery(crosstab);
      List retList=null;
      if (groupBtn.getSelection()) {
        retList=session.getCubeQueryUtil().getReferableBindings(targetString,cubeQueryDefn,false);
      }
 else       if (measureBtn.getSelection()) {
        retList=session.getCubeQueryUtil().getReferableMeasureBindings(targetString,cubeQueryDefn);
      }
      if (retList != null && retList.size() > 0) {
        IBindingMetaInfo meta=(IBindingMetaInfo)retList.get(0);
        IExpressionConverter converter=ExpressionButtonUtil.getCurrentExpressionConverter(expressionCCombo);
        expressionCCombo.setText(converter.getCubeBindingExpression(meta.getBindingName()));
      }
    }
 catch (    Exception ex) {
      logger.log(Level.SEVERE,ex.getMessage(),ex);
    }
 finally {
      if (session != null) {
        session.shutdown();
      }
    }
  }
  updateMemberValues();
  updateButtons();
}",0.9973897513394696
66927,"public void read(DataInputStream in) throws IOException {
  int validCount=IOUtil.readInt(in);
  for (int i=0; i < validCount; i++) {
    String propertyName=IOUtil.readString(in);
    int index=getPropertyIndex(propertyName);
    if (index == -1) {
      String propertyCssText=IOUtil.readString(in);
      if (IStyle.BIRT_DATE_TIME_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setStringFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_NUMBER_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setNumberFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_DATE_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setDateFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_TIME_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setTimeFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_DATE_TIME_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setDateTimeFormat(propertyCssText);
      }
 else {
        throw new IOException(propertyName + ""String_Node_Str"");
      }
    }
 else {
      if (index == StyleConstants.STYLE_DATA_FORMAT) {
        CSSValue value=DataFormatValue.read(in);
        setProperty(index,value);
      }
 else {
        String propertyCssText=IOUtil.readString(in);
        setCssText(index,propertyCssText);
      }
    }
  }
}","public void read(DataInputStream in) throws IOException {
  int validCount=IOUtil.readInt(in);
  for (int i=0; i < validCount; i++) {
    String propertyName=IOUtil.readString(in);
    int index=getPropertyIndex(propertyName);
    if (index == -1) {
      String propertyCssText=IOUtil.readString(in);
      if (IStyle.BIRT_STRING_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setStringFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_NUMBER_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setNumberFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_DATE_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setDateFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_TIME_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setTimeFormat(propertyCssText);
      }
 else       if (IStyle.BIRT_DATE_TIME_FORMAT_PROPERTY.equalsIgnoreCase(propertyName)) {
        this.setDateTimeFormat(propertyCssText);
      }
 else {
        throw new IOException(propertyName + ""String_Node_Str"");
      }
    }
 else {
      if (index == StyleConstants.STYLE_DATA_FORMAT) {
        CSSValue value=DataFormatValue.read(in);
        setProperty(index,value);
      }
 else {
        String propertyCssText=IOUtil.readString(in);
        setCssText(index,propertyCssText);
      }
    }
  }
}",0.9944832659065832
66928,"/** 
 * This method initializes cmpTypeButtons
 */
private void createGroups(Vector<IChartSubType> vSubTypes){
  vSubTypeNames=new Vector<String>();
  if (cmpTypeButtons != null && !cmpTypeButtons.isDisposed()) {
    cmpTypeButtons.dispose();
  }
  cmpTypeButtons=new Composite(cmpSubTypes,SWT.NONE);
  RowLayout rowLayout=new RowLayout();
  rowLayout.marginTop=0;
  rowLayout.marginLeft=0;
  rowLayout.marginBottom=12;
  rowLayout.marginRight=12;
  rowLayout.spacing=4;
  cmpTypeButtons.setLayout(rowLayout);
  for (int iC=0; iC < vSubTypes.size(); iC++) {
    IChartSubType subType=vSubTypes.get(iC);
    vSubTypeNames.add(subType.getName());
    Button btnType=new Button(cmpTypeButtons,SWT.TOGGLE);
    btnType.setData(subType.getName());
    btnType.setImage(subType.getImage());
    btnType.setLayoutData(rowData);
    btnType.addSelectionListener(this);
    btnType.setToolTipText(subType.getDescription());
    btnType.getImage().setBackground(btnType.getBackground());
    btnType.setVisible(true);
    cmpTypeButtons.layout(true);
    if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
      break;
    }
  }
  cmpTypeButtons.setLayoutData(new GridData(GridData.FILL_BOTH));
  cmpSubTypes.layout(true);
}","/** 
 * This method initializes cmpTypeButtons
 */
private void createGroups(Vector<IChartSubType> vSubTypes){
  vSubTypeNames=new Vector<String>();
  if (cmpTypeButtons != null && !cmpTypeButtons.isDisposed()) {
    cmpTypeButtons.dispose();
  }
  cmpTypeButtons=new Composite(cmpSubTypes,SWT.NONE);
  cmpTypeButtons.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout rowLayout=new GridLayout(vSubTypes.size(),false);
  rowLayout.marginTop=0;
  rowLayout.marginLeft=0;
  rowLayout.marginBottom=12;
  rowLayout.marginRight=12;
  rowLayout.horizontalSpacing=4;
  cmpTypeButtons.setLayout(rowLayout);
  for (int iC=0; iC < vSubTypes.size(); iC++) {
    IChartSubType subType=vSubTypes.get(iC);
    vSubTypeNames.add(subType.getName());
    Button btnType=new Button(cmpTypeButtons,SWT.TOGGLE | SWT.FLAT);
    btnType.setData(subType.getName());
    btnType.setImage(subType.getImage());
    GridData gd=new GridData();
    gd.widthHint=80;
    gd.heightHint=80;
    btnType.setLayoutData(gd);
    btnType.addSelectionListener(this);
    btnType.setToolTipText(subType.getDescription());
    btnType.getImage().setBackground(btnType.getBackground());
    btnType.setVisible(true);
    if (getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
      break;
    }
  }
}",0.8341232227488151
66929,"/** 
 * This method initializes cmpSubTypes
 */
private void createComposite(Vector<IChartSubType> vSubTypes){
  Label lblSubtypes=new Label(cmpRight,SWT.NO_FOCUS);
{
    lblSubtypes.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=5;
    lblSubtypes.setLayoutData(gd);
  }
  GridData gdTypes=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL);
  cmpSubTypes=new Composite(cmpRight,SWT.NONE);
  createGroups(vSubTypes);
  cmpSubTypes.setLayoutData(gdTypes);
  cmpSubTypes.setToolTipText(Messages.getString(""String_Node_Str""));
  cmpSubTypes.setLayout(new GridLayout());
  cmpSubTypes.setVisible(true);
}","/** 
 * This method initializes cmpSubTypes
 */
private void createComposite(Vector<IChartSubType> vSubTypes){
  Label lblSubtypes=new Label(cmpRight,SWT.NO_FOCUS);
{
    lblSubtypes.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=5;
    lblSubtypes.setLayoutData(gd);
  }
  GridData gdTypes=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL);
  cmpSubTypes=new Composite(cmpRight,SWT.NONE);
  createGroups(vSubTypes);
  cmpSubTypes.setLayoutData(gdTypes);
  cmpSubTypes.setToolTipText(Messages.getString(""String_Node_Str""));
  cmpSubTypes.setLayout(new GridLayout());
  cmpSubTypes.setVisible(true);
  cmpSubTypes.layout(true);
}",0.9804195804195804
66930,"/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  String scriptlibClassPath=""String_Node_Str"";
  for (int i=0; i < jarFileList.size(); i++)   scriptlibClassPath+=EngineConstants.PROPERTYSEPARATOR + ((File)jarFileList.get(i)).getAbsolutePath();
  if (scriptlibClassPath.startsWith(EngineConstants.PROPERTYSEPARATOR))   scriptlibClassPath=scriptlibClassPath.substring(EngineConstants.PROPERTYSEPARATOR.length());
  Map appContext=new HashMap();
  appContext.put(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath);
  ClassLoader appClassLoader=BirtUtility.getAppClassLoader();
  if (appClassLoader == null)   appClassLoader=ReportEngineService.class.getClassLoader();
  appContext.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,appClassLoader);
  appContext=BirtUtility.getAppContext(appContext);
  config.getAppContext().putAll(appContext);
  config.setEngineHome(""String_Node_Str"");
  config.setMaxRowsPerQuery(ParameterAccessor.maxRows);
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}","/** 
 * Constructor.
 * @param servletContext
 * @param config
 */
private ReportEngineService(ServletContext servletContext){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  if (servletContext == null) {
    return;
  }
  ParameterAccessor.initParameters(servletContext);
  config=new EngineConfig();
  HTMLRenderOption emitterConfig=new HTMLRenderOption();
  emitterConfig.setActionHandler(new HTMLActionHandler());
  imageHandler=new HTMLServerImageHandler();
  emitterConfig.setImageHandler(imageHandler);
  config.getEmitterConfigs().put(""String_Node_Str"",emitterConfig);
  String logLevel=ParameterAccessor.logLevel;
  Level level=logLevel != null && logLevel.length() > 0 ? Level.parse(logLevel) : Level.OFF;
  config.setLogConfig(ParameterAccessor.logFolder,level);
  String scriptLibDir=ParameterAccessor.scriptLibDir;
  ArrayList jarFileList=new ArrayList();
  if (scriptLibDir != null) {
    File dir=new File(scriptLibDir);
    getAllJarFiles(dir,jarFileList);
  }
  StringBuffer scriptlibClassPath=new StringBuffer();
  for (int i=0; i < jarFileList.size(); i++) {
    String p=((File)jarFileList.get(i)).getAbsolutePath();
    if (p != null && p.length() > 0) {
      if (scriptlibClassPath.length() > 0) {
        scriptlibClassPath.append(EngineConstants.PROPERTYSEPARATOR);
      }
      scriptlibClassPath.append(p);
    }
  }
  Map appContext=new HashMap();
  appContext.put(EngineConstants.WEBAPP_CLASSPATH_KEY,scriptlibClassPath.toString());
  ClassLoader appClassLoader=BirtUtility.getAppClassLoader();
  if (appClassLoader == null)   appClassLoader=ReportEngineService.class.getClassLoader();
  appContext.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,appClassLoader);
  appContext=BirtUtility.getAppContext(appContext);
  config.getAppContext().putAll(appContext);
  config.setEngineHome(""String_Node_Str"");
  config.setMaxRowsPerQuery(ParameterAccessor.maxRows);
  LoggingUtil.configureLoggers(ParameterAccessor.loggers,level,ParameterAccessor.logFolder);
}",0.8732394366197183
66931,"/** 
 * Convert parameter to Object with locale setting
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @return
 * @throws ValidationValueException
 */
public static Object validateWithLocale(String dataType,String format,String value,Locale locale,TimeZone timeZone) throws ValidationValueException {
  Object obj=null;
  if (value == null || IBirtConstants.NULL_VALUE.equals(value)) {
    return null;
  }
  try {
    if (format == null) {
      if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
        format=ParameterValidationUtil.DISPLAY_DATE_FORMAT;
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
        format=ParameterValidationUtil.DISPLAY_TIME_FORMAT;
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
        format=DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED;
      }
    }
    obj=ParameterValidationUtil.validate(dataType,format,value,locale,BirtUtility.toICUTimeZone(timeZone));
  }
 catch (  Exception e) {
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
      try {
        if (timeZone != null && value instanceof String) {
          obj=DataTypeUtil.toDate(value,BirtUtility.toICUTimeZone(timeZone));
        }
 else {
          obj=DataTypeUtil.toDate(value);
        }
      }
 catch (      BirtException el) {
        throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
      }
    }
 else {
      obj=ParameterValidationUtil.validate(dataType,getDefaultDateFormat(dataType),value,BirtUtility.toICUTimeZone(timeZone));
    }
  }
  return obj;
}","/** 
 * Convert parameter to Object with locale setting
 * @param dataType
 * @param format
 * @param value
 * @param locale
 * @return
 * @throws ValidationValueException
 */
public static Object validateWithLocale(String dataType,String format,String value,Locale locale,TimeZone timeZone) throws ValidationValueException {
  Object obj=null;
  if (value == null || IBirtConstants.NULL_VALUE.equals(value)) {
    return null;
  }
  try {
    if (format == null) {
      if (DesignChoiceConstants.PARAM_TYPE_DATE.equalsIgnoreCase(dataType)) {
        format=ParameterValidationUtil.DISPLAY_DATE_FORMAT;
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_TIME.equalsIgnoreCase(dataType)) {
        format=ParameterValidationUtil.DISPLAY_TIME_FORMAT;
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
        format=DesignChoiceConstants.DATETIEM_FORMAT_TYPE_UNFORMATTED;
      }
    }
    obj=ParameterValidationUtil.validate(dataType,format,value,locale,BirtUtility.toICUTimeZone(timeZone));
  }
 catch (  Exception e) {
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equalsIgnoreCase(dataType)) {
      try {
        if (timeZone != null) {
          obj=DataTypeUtil.toDate(value,BirtUtility.toICUTimeZone(timeZone));
        }
 else {
          obj=DataTypeUtil.toDate(value);
        }
      }
 catch (      BirtException el) {
        throw new ValidationValueException(value,PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,DesignChoiceConstants.PARAM_TYPE_DATETIME);
      }
    }
 else {
      obj=ParameterValidationUtil.validate(dataType,getDefaultDateFormat(dataType),value,BirtUtility.toICUTimeZone(timeZone));
    }
  }
  return obj;
}",0.9921625544267054
66932,"/** 
 * Obtains singleton
 */
private static BrowserLog getInstance(){
  if (instance == null) {
    instance=new BrowserLog();
  }
  return instance;
}","/** 
 * Obtains singleton
 */
private static synchronized BrowserLog getInstance(){
  if (instance == null) {
    instance=new BrowserLog();
  }
  return instance;
}",0.9589905362776026
66933,"private IChoice[] getLevelTypesByDateType(){
  if (hierarchy == null || dataField == null)   return null;
  DataSetHandle dataset=hierarchy.getDataSet();
  if (dataset == null) {
    dataset=((TabularCubeHandle)hierarchy.getContainer().getContainer()).getDataSet();
  }
  String dataType=dataField.getDataType();
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return OlapUtil.getDateTimeLevelTypeChoices();
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE))   return OlapUtil.getDateLevelTypeChoices();
 else   return OlapUtil.getTimeLevelTypeChoices();
}","private IChoice[] getLevelTypesByDateType(){
  if (hierarchy == null || dataField == null)   return null;
  String dataType=dataField.getDataType();
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME))   return OlapUtil.getDateTimeLevelTypeChoices();
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE))   return OlapUtil.getDateLevelTypeChoices();
 else   return OlapUtil.getTimeLevelTypeChoices();
}",0.8432122370936902
66934,"protected void handleExpressionButtonSelectEvent(){
  ExpressionBuilder expression=new ExpressionBuilder(expressionText.getText());
  expression.setExpressionProvider(new CubeExpressionProvider(input));
  if (expression.open() == OK) {
    if (expression.getResult() != null && expressionText != null)     expressionText.setText(expression.getResult());
  }
}","protected void handleExpressionButtonSelectEvent(){
  ExpressionBuilder expression=new ExpressionBuilder(expressionText.getText());
  expression.setExpressionProvider(new CubeExpressionProvider(input));
  if (expression.open() == OK) {
    if (expression.getResult() != null)     expressionText.setText(expression.getResult());
  }
}",0.9364161849710982
66935,"protected void showSelection(){
  JoinConditionEditPart part=(JoinConditionEditPart)this.getHost();
  ((ColumnConnection)this.getHostFigure()).setLineWidth(2);
  if (part.getTarget() instanceof ColumnEditPart) {
    if (part.getSource() instanceof EditPart)     part.getSource().setSelected(EditPart.SELECTED);
    part.getTarget().setSelected(EditPart.SELECTED);
  }
}","protected void showSelection(){
  JoinConditionEditPart part=(JoinConditionEditPart)this.getHost();
  ((ColumnConnection)this.getHostFigure()).setLineWidth(2);
  if (part.getTarget() instanceof ColumnEditPart) {
    part.getSource().setSelected(EditPart.SELECTED);
    part.getTarget().setSelected(EditPart.SELECTED);
  }
}",0.9335260115606936
66936,"protected void hideSelection(){
  JoinConditionEditPart part=(JoinConditionEditPart)this.getHost();
  ((ColumnConnection)this.getHostFigure()).setLineWidth(1);
  if (part.getTarget() instanceof ColumnEditPart) {
    if (part.getSource() instanceof EditPart)     part.getSource().setSelected(EditPart.SELECTED_NONE);
    part.getTarget().setSelected(EditPart.SELECTED_NONE);
  }
}","protected void hideSelection(){
  JoinConditionEditPart part=(JoinConditionEditPart)this.getHost();
  ((ColumnConnection)this.getHostFigure()).setLineWidth(1);
  if (part.getTarget() instanceof ColumnEditPart) {
    part.getSource().setSelected(EditPart.SELECTED_NONE);
    part.getTarget().setSelected(EditPart.SELECTED_NONE);
  }
}",0.9353932584269664
66937,"public void handleEvent(Event e){
  TreeItem item=(TreeItem)e.item;
  Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
  if (item != null && item.getData() != null) {
    if (checkSharedDimension(item.getData()) && item.getData() instanceof LevelHandle)     item.setForeground(gray);
 else     item.setForeground(item.getParent().getForeground());
  }
 else   item.setForeground(item.getParent().getForeground());
}","public void handleEvent(Event e){
  TreeItem item=(TreeItem)e.item;
  Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
  if (item != null) {
    if (item.getData() != null) {
      if (checkSharedDimension(item.getData()) && item.getData() instanceof LevelHandle)       item.setForeground(gray);
 else       item.setForeground(item.getParent().getForeground());
    }
 else     item.setForeground(item.getParent().getForeground());
  }
}",0.9663677130044844
66938,"private void createGroupField(){
  Composite groupField=new Composite(this,SWT.NONE);
  groupField.setLayoutData(new GridData(GridData.FILL_BOTH));
  groupField.setLayout(new GridLayout());
  Label groupLabel=new Label(groupField,SWT.NONE);
  groupLabel.setText(Messages.getString(""String_Node_Str""));
  groupViewer=new TreeViewer(groupField,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  groupViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)groupViewer.getTree().getLayoutData()).heightHint=250;
  ((GridData)groupViewer.getTree().getLayoutData()).widthHint=200;
  groupViewer.setLabelProvider(getCubeLabelProvider());
  groupViewer.setContentProvider(new CubeContentProvider());
  groupViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  groupViewer.getTree().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        try {
          if (delBtn.isEnabled())           handleDelEvent();
        }
 catch (        Exception e1) {
          ExceptionUtil.handle(e1);
        }
      }
    }
  }
);
  groupViewer.getTree().addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (editBtn.isEnabled())       handleEditEvent();
    }
  }
);
  groupViewer.getTree().addListener(SWT.PaintItem,new org.eclipse.swt.widgets.Listener(){
    public void handleEvent(    Event e){
      TreeItem item=(TreeItem)e.item;
      Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      if (item != null && item.getData() != null) {
        if (checkSharedDimension(item.getData()) && item.getData() instanceof LevelHandle)         item.setForeground(gray);
 else         item.setForeground(item.getParent().getForeground());
      }
 else       item.setForeground(item.getParent().getForeground());
    }
  }
);
  final DragSource fieldsSource=new DragSource(groupViewer.getTree(),operations);
  fieldsSource.setTransfer(types);
  fieldsSource.addDragListener(new CustomDragListener(groupViewer));
  DropTarget target=new DropTarget(groupViewer.getTree(),operations);
  target.setTransfer(types);
  target.addDropListener(new DropTargetAdapter(){
    public void dragOver(    DropTargetEvent event){
      event.feedback=DND.FEEDBACK_EXPAND | DND.FEEDBACK_SCROLL;
      if (OlapUtil.isFromLibrary(input)) {
        event.detail=DND.DROP_NONE;
        return;
      }
      if (event.item != null) {
        TreeItem item=(TreeItem)event.item;
        Object element=item.getData();
        event.detail=DND.DROP_MOVE;
        Object obj=dragSourceItems[0].getData();
        ResultSetColumnHandle dataField=null;
        DataSetHandle dataset=null;
        if (obj == null || obj instanceof DataSetHandle || (obj instanceof VirtualField && ((VirtualField)obj).getType().equals(VirtualField.TYPE_OTHER_DATASETS)) || (obj instanceof VirtualField && ((VirtualField)obj).getType().equals(VirtualField.TYPE_SHARED_DIMENSIONS))) {
          event.detail=DND.DROP_NONE;
          return;
        }
        if (checkSharedDimension(element)) {
          event.detail=DND.DROP_NONE;
          return;
        }
        if (obj instanceof ResultSetColumnHandle) {
          dataField=(ResultSetColumnHandle)obj;
          dataset=(DataSetHandle)dataField.getElementHandle();
          if (element instanceof LevelHandle) {
            DataSetHandle temp=OlapUtil.getHierarchyDataset(((TabularHierarchyHandle)((LevelHandle)element).getContainer()));
            if (temp != null && dataset != null && dataset != temp) {
              event.detail=DND.DROP_NONE;
              return;
            }
            DesignElementHandle hierarchy=((TabularLevelHandle)element).getContainer();
            DimensionHandle dimension=(DimensionHandle)hierarchy.getContainer();
            if (dimension.isTimeType()) {
              event.detail=DND.DROP_NONE;
              return;
            }
          }
 else           if (element instanceof DimensionHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_LEVEL))) {
            DimensionHandle dimension=null;
            if (element instanceof DimensionHandle)             dimension=(DimensionHandle)element;
 else             dimension=(DimensionHandle)((VirtualField)element).getModel();
            if (dimension.isTimeType()) {
              if (dimension.getDefaultHierarchy().getLevelCount() != 0 || !isDateType(dataField.getDataType())) {
                event.detail=DND.DROP_NONE;
                return;
              }
            }
            DataSetHandle temp=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)dimension.getDefaultHierarchy());
            if (temp != null && dataset != null && dataset != temp) {
              event.detail=DND.DROP_NONE;
              return;
            }
          }
 else           if (element instanceof MeasureGroupHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE)) || element instanceof MeasureHandle|| (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE_GROUP))|| (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP))) {
            DataSetHandle primary=input.getDataSet();
            if (primary == null || primary != dataset) {
              event.detail=DND.DROP_NONE;
              return;
            }
          }
        }
        if (obj instanceof DimensionHandle) {
          DimensionHandle dimension=(DimensionHandle)obj;
          if (dimension.getContainer() instanceof TabularCubeHandle) {
            event.detail=DND.DROP_NONE;
            return;
          }
          if (!((element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP)) || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION)))) {
            event.detail=DND.DROP_NONE;
            return;
          }
        }
        if (obj instanceof LevelHandle) {
          if (!(element instanceof LevelHandle) || element == obj || ((LevelHandle)obj).getContainer() != ((LevelHandle)element).getContainer()) {
            event.detail=DND.DROP_NONE;
            return;
          }
        }
        Point pt=Display.getCurrent().map(null,groupViewer.getTree(),event.x,event.y);
        Rectangle bounds=item.getBounds();
        if (pt.y < bounds.y + bounds.height / 3) {
          event.feedback|=DND.FEEDBACK_INSERT_BEFORE;
        }
 else         if (pt.y > bounds.y + 2 * bounds.height / 3) {
          event.feedback|=DND.FEEDBACK_INSERT_AFTER;
        }
 else {
          event.feedback|=DND.FEEDBACK_SELECT;
        }
      }
 else {
        event.detail=DND.DROP_NONE;
      }
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Object obj=dragSourceItems[0].getData();
      ResultSetColumnHandle dataField=null;
      DataSetHandle dataset=null;
      if (obj == null || obj instanceof DataSetHandle) {
        event.detail=DND.DROP_NONE;
        return;
      }
      TreeItem item=(TreeItem)event.item;
      Object element=item.getData();
      if (obj instanceof DimensionHandle) {
        if ((element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION)) || (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP))) {
          CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
          stack.startTrans(""String_Node_Str"");
          try {
            TabularDimensionHandle dimension=DesignElementFactory.getInstance().newTabularDimension(null);
            input.add(CubeHandle.DIMENSIONS_PROP,dimension);
            dimension.setSharedDimension((DimensionHandle)obj);
            stack.commit();
          }
 catch (          SemanticException e) {
            stack.rollback();
            refresh();
            ExceptionUtil.handle(e);
          }
        }
      }
      if (obj instanceof ResultSetColumnHandle) {
        dataField=(ResultSetColumnHandle)obj;
        dataset=(DataSetHandle)dataField.getElementHandle();
        if (event.item == null || dataField == null) {
          event.detail=DND.DROP_NONE;
          return;
        }
 else {
          Point pt=Display.getCurrent().map(null,groupViewer.getTree(),event.x,event.y);
          Rectangle bounds=item.getBounds();
          Boolean isValidName=UIUtil.validateDimensionName(OlapUtil.getDataFieldDisplayName(dataField));
          if (pt.y < bounds.y + bounds.height / 3) {
            if (element instanceof MeasureHandle) {
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                TabularMeasureHandle measure=DesignElementFactory.getInstance().newTabularMeasure(OlapUtil.getDataFieldDisplayName(dataField));
                Expression expression=new Expression(ExpressionUtility.getExpression(dataField,ExpressionUtility.getExpressionConverter(UIUtil.getDefaultScriptType())),UIUtil.getDefaultScriptType());
                measure.setExpressionProperty(MeasureHandle.MEASURE_EXPRESSION_PROP,expression);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  measure.setAlignment(column.getHorizontalAlign());
                }
                initMeasure(dataField,measure);
                ((MeasureHandle)element).getContainer().add(IMeasureGroupModel.MEASURES_PROP,measure);
                if (!isValidName) {
                  MeasureDialog dialog=new MeasureDialog(false);
                  dialog.setInput(measure);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
              }
              return;
            }
 else             if (element instanceof LevelHandle) {
              DesignElementHandle hierarchy=((TabularLevelHandle)element).getContainer();
              DimensionHandle dimension=(DimensionHandle)hierarchy.getContainer();
              if (dimension.isTimeType()) {
                event.detail=DND.DROP_NONE;
                return;
              }
              int index=((LevelHandle)element).getIndex();
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                TabularLevelHandle level=DesignElementFactory.getInstance().newTabularLevel(dimension,OlapUtil.getDataFieldDisplayName(dataField));
                level.setColumnName(dataField.getColumnName());
                level.setDataType(dataField.getDataType());
                ((LevelHandle)element).getContainer().add(IHierarchyModel.LEVELS_PROP,level,index);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  level.setAlignment(column.getHorizontalAlign());
                }
                if (!isValidName) {
                  LevelPropertyDialog dialog=new LevelPropertyDialog(true);
                  dialog.setInput(level);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
              }
              return;
            }
          }
{
            if (element instanceof MeasureHandle) {
              if (!checkColumnDataType(dataField))               return;
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                TabularMeasureHandle measure=DesignElementFactory.getInstance().newTabularMeasure(OlapUtil.getDataFieldDisplayName(dataField));
                Expression expression=new Expression(ExpressionUtility.getExpression(dataField,ExpressionUtility.getExpressionConverter(UIUtil.getDefaultScriptType())),UIUtil.getDefaultScriptType());
                measure.setExpressionProperty(MeasureHandle.MEASURE_EXPRESSION_PROP,expression);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  measure.setAlignment(column.getHorizontalAlign());
                }
                initMeasure(dataField,measure);
                ((MeasureHandle)element).getContainer().add(IMeasureGroupModel.MEASURES_PROP,measure);
                if (!isValidName) {
                  MeasureDialog dialog=new MeasureDialog(false);
                  dialog.setInput(measure);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
 else             if (element instanceof MeasureGroupHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE)) || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE_GROUP))|| (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP))) {
              if (!checkColumnDataType(dataField))               return;
              MeasureGroupHandle measureGroup=null;
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                if ((element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE_GROUP)) || (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP))) {
                  measureGroup=DesignElementFactory.getInstance().newTabularMeasureGroup(null);
                  input.add(CubeHandle.MEASURE_GROUPS_PROP,measureGroup);
                }
 else {
                  if (element instanceof MeasureGroupHandle)                   measureGroup=(MeasureGroupHandle)element;
 else                   measureGroup=(MeasureGroupHandle)((VirtualField)element).getModel();
                }
                TabularMeasureHandle measure=DesignElementFactory.getInstance().newTabularMeasure(OlapUtil.getDataFieldDisplayName(dataField));
                Expression expression=new Expression(ExpressionUtility.getExpression(dataField,ExpressionUtility.getExpressionConverter(UIUtil.getDefaultScriptType())),UIUtil.getDefaultScriptType());
                measure.setExpressionProperty(MeasureHandle.MEASURE_EXPRESSION_PROP,expression);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  measure.setAlignment(column.getHorizontalAlign());
                }
                initMeasure(dataField,measure);
                measureGroup.add(IMeasureGroupModel.MEASURES_PROP,measure);
                if (!isValidName) {
                  MeasureDialog dialog=new MeasureDialog(false);
                  dialog.setInput(measure);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
 else             if (element instanceof LevelHandle) {
              TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)((LevelHandle)element).getContainer();
              DimensionHandle dimension=(DimensionHandle)hierarchy.getContainer();
              if (dimension.isTimeType()) {
                event.detail=DND.DROP_NONE;
                return;
              }
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                int index=((LevelHandle)element).getIndex();
                TabularLevelHandle level=DesignElementFactory.getInstance().newTabularLevel(dimension,OlapUtil.getDataFieldDisplayName(dataField));
                level.setColumnName(dataField.getColumnName());
                level.setDataType(dataField.getDataType());
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  level.setAlignment(column.getHorizontalAlign());
                }
                ((LevelHandle)element).getContainer().add(IHierarchyModel.LEVELS_PROP,level,index + 1);
                if (!isValidName) {
                  LevelPropertyDialog dialog=new LevelPropertyDialog(true);
                  dialog.setInput(level);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
 else             if (element instanceof DimensionHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_LEVEL)) || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION))|| (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP))) {
              DimensionHandle dimension=null;
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                if ((element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION)) || (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP))) {
                  dimension=DesignElementFactory.getInstance().newTabularDimension(null);
                  input.add(CubeHandle.DIMENSIONS_PROP,dimension);
                  if (!isDateType(dataField.getDataType())) {
                    GroupRenameDialog inputDialog=createRenameDialog(dimension,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    if (inputDialog.open() != Window.OK) {
                      stack.rollback();
                      refresh();
                      return;
                    }
                  }
                }
 else {
                  if (element instanceof DimensionHandle)                   dimension=(DimensionHandle)element;
 else                   dimension=(DimensionHandle)((VirtualField)element).getModel();
                }
                if (dimension.isTimeType() && dimension.getDefaultHierarchy().getLevelCount() > 0) {
                  event.detail=DND.DROP_NONE;
                  stack.rollback();
                  return;
                }
                TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)dimension.getDefaultHierarchy();
                if (hierarchy.getDataSet() == null && hierarchy.getLevelCount() == 0 && (dataset != null && dataset != input.getDataSet())) {
                  hierarchy.setDataSet(dataset);
                }
                if (isDateType(dataField.getDataType()) && hierarchy.getLevelCount() == 0) {
                  GroupDialog dialog=new GroupDialog(true);
                  dialog.setInput(hierarchy,dataField);
                  if (dialog.open() != Window.OK) {
                    stack.rollback();
                  }
 else {
                    if (!isValidName) {
                      TabularLevelHandle level=(TabularLevelHandle)hierarchy.getLevel(dataField.getColumnName());
                      LevelPropertyDialog dialog2=new LevelPropertyDialog(false);
                      dialog2.setInput(level);
                      if (dialog2.open() == Window.CANCEL) {
                        SessionHandleAdapter.getInstance().getCommandStack().rollback();
                      }
                    }
 else                     stack.commit();
                  }
                }
 else {
                  TabularLevelHandle level=DesignElementFactory.getInstance().newTabularLevel(dimension,OlapUtil.getDataFieldDisplayName(dataField));
                  level.setColumnName(dataField.getColumnName());
                  level.setDataType(dataField.getDataType());
                  ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                  if (column != null) {
                    level.setAlignment(column.getHorizontalAlign());
                  }
                  hierarchy.add(IHierarchyModel.LEVELS_PROP,level);
                  if (!isValidName) {
                    LevelPropertyDialog dialog=new LevelPropertyDialog(true);
                    dialog.setInput(level);
                    if (dialog.open() == Window.CANCEL) {
                      SessionHandleAdapter.getInstance().getCommandStack().rollback();
                    }
                  }
 else                   stack.commit();
                }
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
          }
        }
      }
      if (obj instanceof LevelHandle) {
        int oldIndex=((LevelHandle)obj).getIndex();
        if (event.item == null) {
          event.detail=DND.DROP_NONE;
          return;
        }
 else {
          Point pt=Display.getCurrent().map(null,groupViewer.getTree(),event.x,event.y);
          Rectangle bounds=item.getBounds();
          if (element instanceof LevelHandle) {
            int newIndex=((LevelHandle)element).getIndex();
            if (newIndex < oldIndex) {
              if (pt.y < bounds.y + bounds.height / 3) {
                newIndex=((LevelHandle)element).getIndex();
              }
 else               newIndex=((LevelHandle)element).getIndex() + 1;
            }
 else             if (newIndex > oldIndex) {
              if (pt.y < bounds.y + bounds.height / 3) {
                newIndex=((LevelHandle)element).getIndex() - 1;
              }
 else               newIndex=((LevelHandle)element).getIndex();
            }
            CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
            stack.startTrans(""String_Node_Str"");
            try {
              ((LevelHandle)obj).moveTo(newIndex);
              stack.commit();
            }
 catch (            SemanticException e) {
              stack.rollback();
              refresh();
              ExceptionUtil.handle(e);
              return;
            }
            groupViewer.expandToLevel((obj),AbstractTreeViewer.ALL_LEVELS);
            groupViewer.setSelection(new StructuredSelection((obj)),true);
          }
        }
      }
      refresh();
    }
  }
);
}","private void createGroupField(){
  Composite groupField=new Composite(this,SWT.NONE);
  groupField.setLayoutData(new GridData(GridData.FILL_BOTH));
  groupField.setLayout(new GridLayout());
  Label groupLabel=new Label(groupField,SWT.NONE);
  groupLabel.setText(Messages.getString(""String_Node_Str""));
  groupViewer=new TreeViewer(groupField,SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  groupViewer.getTree().setLayoutData(new GridData(GridData.FILL_BOTH));
  ((GridData)groupViewer.getTree().getLayoutData()).heightHint=250;
  ((GridData)groupViewer.getTree().getLayoutData()).widthHint=200;
  groupViewer.setLabelProvider(getCubeLabelProvider());
  groupViewer.setContentProvider(new CubeContentProvider());
  groupViewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      updateButtons();
    }
  }
);
  groupViewer.getTree().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        try {
          if (delBtn.isEnabled())           handleDelEvent();
        }
 catch (        Exception e1) {
          ExceptionUtil.handle(e1);
        }
      }
    }
  }
);
  groupViewer.getTree().addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (editBtn.isEnabled())       handleEditEvent();
    }
  }
);
  groupViewer.getTree().addListener(SWT.PaintItem,new org.eclipse.swt.widgets.Listener(){
    public void handleEvent(    Event e){
      TreeItem item=(TreeItem)e.item;
      Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      if (item != null) {
        if (item.getData() != null) {
          if (checkSharedDimension(item.getData()) && item.getData() instanceof LevelHandle)           item.setForeground(gray);
 else           item.setForeground(item.getParent().getForeground());
        }
 else         item.setForeground(item.getParent().getForeground());
      }
    }
  }
);
  final DragSource fieldsSource=new DragSource(groupViewer.getTree(),operations);
  fieldsSource.setTransfer(types);
  fieldsSource.addDragListener(new CustomDragListener(groupViewer));
  DropTarget target=new DropTarget(groupViewer.getTree(),operations);
  target.setTransfer(types);
  target.addDropListener(new DropTargetAdapter(){
    public void dragOver(    DropTargetEvent event){
      event.feedback=DND.FEEDBACK_EXPAND | DND.FEEDBACK_SCROLL;
      if (OlapUtil.isFromLibrary(input)) {
        event.detail=DND.DROP_NONE;
        return;
      }
      if (event.item != null) {
        TreeItem item=(TreeItem)event.item;
        Object element=item.getData();
        event.detail=DND.DROP_MOVE;
        Object obj=dragSourceItems[0].getData();
        ResultSetColumnHandle dataField=null;
        DataSetHandle dataset=null;
        if (obj == null || obj instanceof DataSetHandle || (obj instanceof VirtualField && ((VirtualField)obj).getType().equals(VirtualField.TYPE_OTHER_DATASETS)) || (obj instanceof VirtualField && ((VirtualField)obj).getType().equals(VirtualField.TYPE_SHARED_DIMENSIONS))) {
          event.detail=DND.DROP_NONE;
          return;
        }
        if (checkSharedDimension(element)) {
          event.detail=DND.DROP_NONE;
          return;
        }
        if (obj instanceof ResultSetColumnHandle) {
          dataField=(ResultSetColumnHandle)obj;
          dataset=(DataSetHandle)dataField.getElementHandle();
          if (element instanceof LevelHandle) {
            DataSetHandle temp=OlapUtil.getHierarchyDataset(((TabularHierarchyHandle)((LevelHandle)element).getContainer()));
            if (temp != null && dataset != null && dataset != temp) {
              event.detail=DND.DROP_NONE;
              return;
            }
            DesignElementHandle hierarchy=((TabularLevelHandle)element).getContainer();
            DimensionHandle dimension=(DimensionHandle)hierarchy.getContainer();
            if (dimension.isTimeType()) {
              event.detail=DND.DROP_NONE;
              return;
            }
          }
 else           if (element instanceof DimensionHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_LEVEL))) {
            DimensionHandle dimension=null;
            if (element instanceof DimensionHandle)             dimension=(DimensionHandle)element;
 else             dimension=(DimensionHandle)((VirtualField)element).getModel();
            if (dimension.isTimeType()) {
              if (dimension.getDefaultHierarchy().getLevelCount() != 0 || !isDateType(dataField.getDataType())) {
                event.detail=DND.DROP_NONE;
                return;
              }
            }
            DataSetHandle temp=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)dimension.getDefaultHierarchy());
            if (temp != null && dataset != null && dataset != temp) {
              event.detail=DND.DROP_NONE;
              return;
            }
          }
 else           if (element instanceof MeasureGroupHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE)) || element instanceof MeasureHandle|| (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE_GROUP))|| (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP))) {
            DataSetHandle primary=input.getDataSet();
            if (primary == null || primary != dataset) {
              event.detail=DND.DROP_NONE;
              return;
            }
          }
        }
        if (obj instanceof DimensionHandle) {
          DimensionHandle dimension=(DimensionHandle)obj;
          if (dimension.getContainer() instanceof TabularCubeHandle) {
            event.detail=DND.DROP_NONE;
            return;
          }
          if (!((element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP)) || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION)))) {
            event.detail=DND.DROP_NONE;
            return;
          }
        }
        if (obj instanceof LevelHandle) {
          if (!(element instanceof LevelHandle) || element == obj || ((LevelHandle)obj).getContainer() != ((LevelHandle)element).getContainer()) {
            event.detail=DND.DROP_NONE;
            return;
          }
        }
        Point pt=Display.getCurrent().map(null,groupViewer.getTree(),event.x,event.y);
        Rectangle bounds=item.getBounds();
        if (pt.y < bounds.y + bounds.height / 3) {
          event.feedback|=DND.FEEDBACK_INSERT_BEFORE;
        }
 else         if (pt.y > bounds.y + 2 * bounds.height / 3) {
          event.feedback|=DND.FEEDBACK_INSERT_AFTER;
        }
 else {
          event.feedback|=DND.FEEDBACK_SELECT;
        }
      }
 else {
        event.detail=DND.DROP_NONE;
      }
    }
    public void drop(    DropTargetEvent event){
      if (event.data == null) {
        event.detail=DND.DROP_NONE;
        return;
      }
      Object obj=dragSourceItems[0].getData();
      ResultSetColumnHandle dataField=null;
      DataSetHandle dataset=null;
      if (obj == null || obj instanceof DataSetHandle) {
        event.detail=DND.DROP_NONE;
        return;
      }
      TreeItem item=(TreeItem)event.item;
      Object element=item.getData();
      if (obj instanceof DimensionHandle) {
        if ((element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION)) || (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP))) {
          CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
          stack.startTrans(""String_Node_Str"");
          try {
            TabularDimensionHandle dimension=DesignElementFactory.getInstance().newTabularDimension(null);
            input.add(CubeHandle.DIMENSIONS_PROP,dimension);
            dimension.setSharedDimension((DimensionHandle)obj);
            stack.commit();
          }
 catch (          SemanticException e) {
            stack.rollback();
            refresh();
            ExceptionUtil.handle(e);
          }
        }
      }
      if (obj instanceof ResultSetColumnHandle) {
        dataField=(ResultSetColumnHandle)obj;
        dataset=(DataSetHandle)dataField.getElementHandle();
        if (event.item == null || dataField == null) {
          event.detail=DND.DROP_NONE;
          return;
        }
 else {
          Point pt=Display.getCurrent().map(null,groupViewer.getTree(),event.x,event.y);
          Rectangle bounds=item.getBounds();
          Boolean isValidName=UIUtil.validateDimensionName(OlapUtil.getDataFieldDisplayName(dataField));
          if (pt.y < bounds.y + bounds.height / 3) {
            if (element instanceof MeasureHandle) {
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                TabularMeasureHandle measure=DesignElementFactory.getInstance().newTabularMeasure(OlapUtil.getDataFieldDisplayName(dataField));
                Expression expression=new Expression(ExpressionUtility.getExpression(dataField,ExpressionUtility.getExpressionConverter(UIUtil.getDefaultScriptType())),UIUtil.getDefaultScriptType());
                measure.setExpressionProperty(MeasureHandle.MEASURE_EXPRESSION_PROP,expression);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  measure.setAlignment(column.getHorizontalAlign());
                }
                initMeasure(dataField,measure);
                ((MeasureHandle)element).getContainer().add(IMeasureGroupModel.MEASURES_PROP,measure);
                if (!isValidName) {
                  MeasureDialog dialog=new MeasureDialog(false);
                  dialog.setInput(measure);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
              }
              return;
            }
 else             if (element instanceof LevelHandle) {
              DesignElementHandle hierarchy=((TabularLevelHandle)element).getContainer();
              DimensionHandle dimension=(DimensionHandle)hierarchy.getContainer();
              if (dimension.isTimeType()) {
                event.detail=DND.DROP_NONE;
                return;
              }
              int index=((LevelHandle)element).getIndex();
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                TabularLevelHandle level=DesignElementFactory.getInstance().newTabularLevel(dimension,OlapUtil.getDataFieldDisplayName(dataField));
                level.setColumnName(dataField.getColumnName());
                level.setDataType(dataField.getDataType());
                ((LevelHandle)element).getContainer().add(IHierarchyModel.LEVELS_PROP,level,index);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  level.setAlignment(column.getHorizontalAlign());
                }
                if (!isValidName) {
                  LevelPropertyDialog dialog=new LevelPropertyDialog(true);
                  dialog.setInput(level);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
              }
              return;
            }
          }
{
            if (element instanceof MeasureHandle) {
              if (!checkColumnDataType(dataField))               return;
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                TabularMeasureHandle measure=DesignElementFactory.getInstance().newTabularMeasure(OlapUtil.getDataFieldDisplayName(dataField));
                Expression expression=new Expression(ExpressionUtility.getExpression(dataField,ExpressionUtility.getExpressionConverter(UIUtil.getDefaultScriptType())),UIUtil.getDefaultScriptType());
                measure.setExpressionProperty(MeasureHandle.MEASURE_EXPRESSION_PROP,expression);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  measure.setAlignment(column.getHorizontalAlign());
                }
                initMeasure(dataField,measure);
                ((MeasureHandle)element).getContainer().add(IMeasureGroupModel.MEASURES_PROP,measure);
                if (!isValidName) {
                  MeasureDialog dialog=new MeasureDialog(false);
                  dialog.setInput(measure);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
 else             if (element instanceof MeasureGroupHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE)) || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE_GROUP))|| (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP))) {
              if (!checkColumnDataType(dataField))               return;
              MeasureGroupHandle measureGroup=null;
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                if ((element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_MEASURE_GROUP)) || (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.MEASURE_GROUPS_PROP))) {
                  measureGroup=DesignElementFactory.getInstance().newTabularMeasureGroup(null);
                  input.add(CubeHandle.MEASURE_GROUPS_PROP,measureGroup);
                }
 else {
                  if (element instanceof MeasureGroupHandle)                   measureGroup=(MeasureGroupHandle)element;
 else                   measureGroup=(MeasureGroupHandle)((VirtualField)element).getModel();
                }
                TabularMeasureHandle measure=DesignElementFactory.getInstance().newTabularMeasure(OlapUtil.getDataFieldDisplayName(dataField));
                Expression expression=new Expression(ExpressionUtility.getExpression(dataField,ExpressionUtility.getExpressionConverter(UIUtil.getDefaultScriptType())),UIUtil.getDefaultScriptType());
                measure.setExpressionProperty(MeasureHandle.MEASURE_EXPRESSION_PROP,expression);
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  measure.setAlignment(column.getHorizontalAlign());
                }
                initMeasure(dataField,measure);
                measureGroup.add(IMeasureGroupModel.MEASURES_PROP,measure);
                if (!isValidName) {
                  MeasureDialog dialog=new MeasureDialog(false);
                  dialog.setInput(measure);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
 else             if (element instanceof LevelHandle) {
              TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)((LevelHandle)element).getContainer();
              DimensionHandle dimension=(DimensionHandle)hierarchy.getContainer();
              if (dimension.isTimeType()) {
                event.detail=DND.DROP_NONE;
                return;
              }
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                int index=((LevelHandle)element).getIndex();
                TabularLevelHandle level=DesignElementFactory.getInstance().newTabularLevel(dimension,OlapUtil.getDataFieldDisplayName(dataField));
                level.setColumnName(dataField.getColumnName());
                level.setDataType(dataField.getDataType());
                ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                if (column != null) {
                  level.setAlignment(column.getHorizontalAlign());
                }
                ((LevelHandle)element).getContainer().add(IHierarchyModel.LEVELS_PROP,level,index + 1);
                if (!isValidName) {
                  LevelPropertyDialog dialog=new LevelPropertyDialog(true);
                  dialog.setInput(level);
                  if (dialog.open() == Window.CANCEL) {
                    SessionHandleAdapter.getInstance().getCommandStack().rollback();
                  }
                }
 else                 stack.commit();
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
 else             if (element instanceof DimensionHandle || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_LEVEL)) || (element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION))|| (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP))) {
              DimensionHandle dimension=null;
              CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
              stack.startTrans(""String_Node_Str"");
              try {
                if ((element instanceof VirtualField && ((VirtualField)element).getType().equals(VirtualField.TYPE_DIMENSION)) || (element instanceof PropertyHandle && ((PropertyHandle)element).getPropertyDefn().getName().equals(ICubeModel.DIMENSIONS_PROP))) {
                  dimension=DesignElementFactory.getInstance().newTabularDimension(null);
                  input.add(CubeHandle.DIMENSIONS_PROP,dimension);
                  if (!isDateType(dataField.getDataType())) {
                    GroupRenameDialog inputDialog=createRenameDialog(dimension,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                    if (inputDialog.open() != Window.OK) {
                      stack.rollback();
                      refresh();
                      return;
                    }
                  }
                }
 else {
                  if (element instanceof DimensionHandle)                   dimension=(DimensionHandle)element;
 else                   dimension=(DimensionHandle)((VirtualField)element).getModel();
                }
                if (dimension.isTimeType() && dimension.getDefaultHierarchy().getLevelCount() > 0) {
                  event.detail=DND.DROP_NONE;
                  stack.rollback();
                  return;
                }
                TabularHierarchyHandle hierarchy=(TabularHierarchyHandle)dimension.getDefaultHierarchy();
                if (hierarchy.getDataSet() == null && hierarchy.getLevelCount() == 0 && (dataset != null && dataset != input.getDataSet())) {
                  hierarchy.setDataSet(dataset);
                }
                if (isDateType(dataField.getDataType()) && hierarchy.getLevelCount() == 0) {
                  GroupDialog dialog=new GroupDialog(true);
                  dialog.setInput(hierarchy,dataField);
                  if (dialog.open() != Window.OK) {
                    stack.rollback();
                  }
 else {
                    if (!isValidName) {
                      TabularLevelHandle level=(TabularLevelHandle)hierarchy.getLevel(dataField.getColumnName());
                      LevelPropertyDialog dialog2=new LevelPropertyDialog(false);
                      dialog2.setInput(level);
                      if (dialog2.open() == Window.CANCEL) {
                        SessionHandleAdapter.getInstance().getCommandStack().rollback();
                      }
                    }
 else                     stack.commit();
                  }
                }
 else {
                  TabularLevelHandle level=DesignElementFactory.getInstance().newTabularLevel(dimension,OlapUtil.getDataFieldDisplayName(dataField));
                  level.setColumnName(dataField.getColumnName());
                  level.setDataType(dataField.getDataType());
                  ColumnHintHandle column=OlapUtil.getColumnHintHandle(dataField);
                  if (column != null) {
                    level.setAlignment(column.getHorizontalAlign());
                  }
                  hierarchy.add(IHierarchyModel.LEVELS_PROP,level);
                  if (!isValidName) {
                    LevelPropertyDialog dialog=new LevelPropertyDialog(true);
                    dialog.setInput(level);
                    if (dialog.open() == Window.CANCEL) {
                      SessionHandleAdapter.getInstance().getCommandStack().rollback();
                    }
                  }
 else                   stack.commit();
                }
              }
 catch (              SemanticException e) {
                stack.rollback();
                refresh();
                ExceptionUtil.handle(e);
                return;
              }
            }
          }
        }
      }
      if (obj instanceof LevelHandle) {
        int oldIndex=((LevelHandle)obj).getIndex();
        if (event.item == null) {
          event.detail=DND.DROP_NONE;
          return;
        }
 else {
          Point pt=Display.getCurrent().map(null,groupViewer.getTree(),event.x,event.y);
          Rectangle bounds=item.getBounds();
          if (element instanceof LevelHandle) {
            int newIndex=((LevelHandle)element).getIndex();
            if (newIndex < oldIndex) {
              if (pt.y < bounds.y + bounds.height / 3) {
                newIndex=((LevelHandle)element).getIndex();
              }
 else               newIndex=((LevelHandle)element).getIndex() + 1;
            }
 else             if (newIndex > oldIndex) {
              if (pt.y < bounds.y + bounds.height / 3) {
                newIndex=((LevelHandle)element).getIndex() - 1;
              }
 else               newIndex=((LevelHandle)element).getIndex();
            }
            CommandStack stack=SessionHandleAdapter.getInstance().getCommandStack();
            stack.startTrans(""String_Node_Str"");
            try {
              ((LevelHandle)obj).moveTo(newIndex);
              stack.commit();
            }
 catch (            SemanticException e) {
              stack.rollback();
              refresh();
              ExceptionUtil.handle(e);
              return;
            }
            groupViewer.expandToLevel((obj),AbstractTreeViewer.ALL_LEVELS);
            groupViewer.setSelection(new StructuredSelection((obj)),true);
          }
        }
      }
      refresh();
    }
  }
);
}",0.9992227131402388
66939,"public CubeExpressionProvider(DesignElementHandle handle){
  super(handle);
  if (handle instanceof TabularCubeHandle)   dataSetHandle=((TabularCubeHandle)handle).getDataSet();
  if (handle instanceof DimensionHandle) {
    if (((DimensionHandle)handle).getDefaultHierarchy() instanceof TabularHierarchyHandle)     dataSetHandle=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)((DimensionHandle)handle).getDefaultHierarchy());
  }
 else   if (handle instanceof TabularHierarchyHandle) {
    dataSetHandle=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)handle);
  }
 else   if (handle instanceof TabularMeasureHandle) {
    Object parent=((MeasureHandle)handle).getContainer().getContainer();
    if (parent instanceof TabularCubeHandle) {
      dataSetHandle=((TabularCubeHandle)parent).getDataSet();
    }
  }
 else   if (handle instanceof MeasureGroupHandle) {
    Object parent=(TabularCubeHandle)((MeasureGroupHandle)handle).getContainer().getContainer();
    if (parent instanceof TabularCubeHandle) {
      dataSetHandle=((TabularCubeHandle)parent).getDataSet();
    }
  }
 else   if (handle instanceof TabularLevelHandle) {
    dataSetHandle=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)handle.getContainer());
  }
  addFilterToProvider();
}","public CubeExpressionProvider(DesignElementHandle handle){
  super(handle);
  if (handle instanceof TabularCubeHandle)   dataSetHandle=((TabularCubeHandle)handle).getDataSet();
  if (handle instanceof DimensionHandle) {
    if (((DimensionHandle)handle).getDefaultHierarchy() instanceof TabularHierarchyHandle)     dataSetHandle=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)((DimensionHandle)handle).getDefaultHierarchy());
  }
 else   if (handle instanceof TabularHierarchyHandle) {
    dataSetHandle=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)handle);
  }
 else   if (handle instanceof TabularMeasureHandle) {
    Object parent=((MeasureHandle)handle).getContainer().getContainer();
    if (parent instanceof TabularCubeHandle) {
      dataSetHandle=((TabularCubeHandle)parent).getDataSet();
    }
  }
 else   if (handle instanceof MeasureGroupHandle) {
    Object parent=((MeasureGroupHandle)handle).getContainer().getContainer();
    if (parent instanceof TabularCubeHandle) {
      dataSetHandle=((TabularCubeHandle)parent).getDataSet();
    }
  }
 else   if (handle instanceof TabularLevelHandle) {
    dataSetHandle=OlapUtil.getHierarchyDataset((TabularHierarchyHandle)handle.getContainer());
  }
  addFilterToProvider();
}",0.9924453280318092
66940,"private boolean updateHideRule(DesignElementHandle element,String format,boolean checked,Expression expression) throws Exception {
  if (checked) {
    HideRuleHandle hideHandle=getHideRuleHandle(element,format);
    if (hideHandle == null) {
      try {
        createHideRuleHandle(element,format,expression);
      }
 catch (      SemanticException e) {
        ExceptionUtil.handle(e);
      }
    }
 else {
      if (!expression.equals(hideHandle.getExpression()) && (!expression.equals(""String_Node_Str"") || hideHandle.getExpression() != null)) {
        hideHandle.setExpressionProperty(HideRule.VALUE_EXPR_MEMBER,expression);
      }
    }
  }
 else {
    Iterator visibilities=visibilityRulesIterator(element);
    if (visibilities == null) {
      return true;
    }
    while (visibilities.hasNext()) {
      HideRuleHandle handle=(HideRuleHandle)visibilities.next();
      if (format.equalsIgnoreCase(handle.getFormat())) {
        try {
          getVisibilityPropertyHandle(element).removeItem(handle.getStructure());
        }
 catch (        PropertyValueException e) {
          ExceptionUtil.handle(e);
        }
        return true;
      }
    }
  }
  return true;
}","private boolean updateHideRule(DesignElementHandle element,String format,boolean checked,Expression expression) throws Exception {
  if (checked) {
    HideRuleHandle hideHandle=getHideRuleHandle(element,format);
    if (hideHandle == null) {
      try {
        createHideRuleHandle(element,format,expression);
      }
 catch (      SemanticException e) {
        ExceptionUtil.handle(e);
      }
    }
 else {
      hideHandle.setExpressionProperty(HideRule.VALUE_EXPR_MEMBER,expression);
    }
  }
 else {
    Iterator visibilities=visibilityRulesIterator(element);
    if (visibilities == null) {
      return true;
    }
    while (visibilities.hasNext()) {
      HideRuleHandle handle=(HideRuleHandle)visibilities.next();
      if (format.equalsIgnoreCase(handle.getFormat())) {
        try {
          getVisibilityPropertyHandle(element).removeItem(handle.getStructure());
        }
 catch (        PropertyValueException e) {
          ExceptionUtil.handle(e);
        }
        return true;
      }
    }
  }
  return true;
}",0.9320126069338136
66941,"public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  INodeProvider provider=null;
  if (item != null && item.getData() != null) {
    provider=ProviderFactory.createProvider(item.getData());
  }
  if (provider != null && item != null && provider.isReadOnly(item.getData())) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    Color black=ReportColorConstants.ReportForeground;
    if (item != null && !black.equals(item.getForeground())) {
      item.setForeground(black);
    }
  }
}","public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (item == null)   return;
  INodeProvider provider=null;
  if (item != null && item.getData() != null) {
    provider=ProviderFactory.createProvider(item.getData());
  }
  if (provider != null && item != null && provider.isReadOnly(item.getData())) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    Color black=ReportColorConstants.ReportForeground;
    if (item != null && !black.equals(item.getForeground())) {
      item.setForeground(black);
    }
  }
}",0.9768160741885626
66942,"/** 
 * Creates the SWT control for this page under the given parent control.
 * @param parent the parent control
 */
public void createControl(Composite parent){
  treeViewer=createTreeViewer(parent);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      treeSelect(event);
    }
  }
);
  treeViewer.getTree().addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      INodeProvider provider=null;
      if (item != null && item.getData() != null) {
        provider=ProviderFactory.createProvider(item.getData());
      }
      if (provider != null && item != null && provider.isReadOnly(item.getData())) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        Color black=ReportColorConstants.ReportForeground;
        if (item != null && !black.equals(item.getForeground())) {
          item.setForeground(black);
        }
      }
    }
  }
);
  configTreeViewer();
  hookTreeViewer();
  initPage();
  if (reportHandle != null)   SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(this);
}","/** 
 * Creates the SWT control for this page under the given parent control.
 * @param parent the parent control
 */
public void createControl(Composite parent){
  treeViewer=createTreeViewer(parent);
  getTreeViewer().addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      treeSelect(event);
    }
  }
);
  treeViewer.getTree().addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (item == null)       return;
      INodeProvider provider=null;
      if (item != null && item.getData() != null) {
        provider=ProviderFactory.createProvider(item.getData());
      }
      if (provider != null && item != null && provider.isReadOnly(item.getData())) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        Color black=ReportColorConstants.ReportForeground;
        if (item != null && !black.equals(item.getForeground())) {
          item.setForeground(black);
        }
      }
    }
  }
);
  configTreeViewer();
  hookTreeViewer();
  initPage();
  if (reportHandle != null)   SessionHandleAdapter.getInstance().getMediator(reportHandle).addColleague(this);
}",0.9859675036927622
66943,"protected void synchronize(float height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex <= startRowIndex) {
    maxRowIndex=startRowIndex + 1;
  }
  rowContainer.setRowIndex(maxRowIndex);
  float resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
            if (!isInContainer(blankData,rowContainer)) {
              upstair.decreasRowSpanInDesign();
            }
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          if (!isInContainer(upstair,rowContainer)) {
            upstair.decreasRowSpanInDesign();
          }
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair != null && upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}","protected void synchronize(float height){
  XlsContainer rowContainer=getCurrentContainer();
  ContainerSizeInfo rowSizeInfo=rowContainer.getSizeInfo();
  int startCoordinate=rowSizeInfo.getStartCoordinate();
  int endCoordinate=rowSizeInfo.getEndCoordinate();
  int startColumnIndex=axis.getColumnIndexByCoordinate(startCoordinate);
  int endColumnIndex=axis.getColumnIndexByCoordinate(endCoordinate);
  int maxRowIndex=0;
  int rowIndexes[]=new int[endColumnIndex - startColumnIndex];
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowIndex=cache.getMaxRowIndex(currentColumnIndex);
    SheetData lastData=cache.getColumnLastData(currentColumnIndex);
    rowIndexes[currentColumnIndex - startColumnIndex]=rowIndex;
    int span=lastData != null ? lastData.getRowSpanInDesign() : 0;
    if (span == 0 || (span == 1 && !isInContainer(lastData,rowContainer))) {
      maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    }
  }
  int startRowIndex=rowContainer.getRowIndex();
  if (maxRowIndex <= startRowIndex) {
    maxRowIndex=startRowIndex + 1;
  }
  rowContainer.setRowIndex(maxRowIndex);
  float resize=height / (maxRowIndex - startRowIndex);
  for (int i=startRowIndex; i < maxRowIndex; i++) {
    cache.setRowHeight(i,resize);
  }
  for (int currentColumnIndex=startColumnIndex; currentColumnIndex < endColumnIndex; currentColumnIndex++) {
    int rowspan=maxRowIndex - rowIndexes[currentColumnIndex - startColumnIndex];
    SheetData upstair=cache.getColumnLastData(currentColumnIndex);
    if (rowspan > 0) {
      if (upstair != null && canSpan(upstair,rowContainer,currentColumnIndex,endColumnIndex)) {
        Type blankType=Type.VERTICAL;
        if (upstair.isBlank()) {
          BlankData blankData=(BlankData)upstair;
          if (blankData.getType() == Type.VERTICAL) {
            upstair.setRowSpan(upstair.getRowSpan() + rowspan);
            if (!isInContainer(blankData,rowContainer)) {
              upstair.decreasRowSpanInDesign();
            }
          }
          blankType=blankData.getType();
        }
 else {
          upstair.setRowSpan(upstair.getRowSpan() + rowspan);
          if (!isInContainer(upstair,rowContainer)) {
            upstair.decreasRowSpanInDesign();
          }
        }
        int rowIndex=upstair.getRowIndex();
        for (int p=1; p <= rowspan; p++) {
          BlankData blank=new BlankData(upstair);
          blank.setRowIndex(rowIndex + p);
          blank.setType(blankType);
          cache.addData(currentColumnIndex,blank);
        }
      }
    }
 else     if (upstair != null && upstair.getRowSpanInDesign() > 0 && !isInContainer(upstair,rowContainer)) {
      upstair.decreasRowSpanInDesign();
    }
  }
}",0.993802406124681
66944,"private boolean canSpan(SheetData data,XlsContainer rowContainer){
  SheetData realData=getRealData(data);
  if (realData == null)   return false;
  if (isInContainer(realData,rowContainer)) {
    return true;
  }
  return realData.getRowSpanInDesign() > 0;
}","private boolean canSpan(SheetData data,XlsContainer rowContainer,int currentColumn,int lastColumn){
  SheetData realData=getRealData(data);
  if (realData == null)   return false;
  if (!isInContainer(realData,rowContainer)) {
    return false;
  }
  for (int i=currentColumn + 1; i < lastColumn; i++) {
    SheetData lastData=getColumnLastData(i);
    SheetData lastRealData=getRealData(lastData);
    if (lastRealData == null || lastRealData.getRowIndex() <= realData.getRowIndex()) {
      continue;
    }
    if (realData.getStartX() > lastRealData.getStartX()) {
      return false;
    }
  }
  return realData.getRowSpanInDesign() > 0;
}",0.549889135254989
66945,"/** 
 * @param cx
 * @param expr1
 * @throws DataException 
 */
private static void prepareScriptExpression(ScriptContext cx,IBaseExpression expr1) throws DataException {
  try {
    if (expr1 == null)     return;
    if (expr1 instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr1).getText();
      if (expr1.getHandle() == null)       expr1.setHandle(new OLAPExpressionHandler(cx.compile(expr1.getScriptId(),null,0,exprText)));
    }
 else     if (expr1 instanceof IExpressionCollection) {
      Object[] exprs=((IExpressionCollection)expr1).getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareScriptExpression(cx,(IBaseExpression)exprs[i]);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param cx
 * @param expr1
 * @throws DataException 
 */
private static void prepareScriptExpression(ScriptContext cx,IBaseExpression expr1) throws DataException {
  try {
    if (expr1 == null)     return;
    if (expr1 instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr1).getText();
      if (expr1.getHandle() == null && !((IScriptExpression)expr1).isConstant())       expr1.setHandle(new OLAPExpressionHandler(cx.compile(expr1.getScriptId(),null,0,exprText)));
    }
 else     if (expr1 instanceof IExpressionCollection) {
      Object[] exprs=((IExpressionCollection)expr1).getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareScriptExpression(cx,(IBaseExpression)exprs[i]);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.972939729397294
66946,"/** 
 * @param ise
 * @return
 */
private static IScriptExpression constructValidScriptExpression(IScriptExpression ise){
  return ise != null && ise.getText().trim().length() > 0 ? ise : new ScriptExpression(""String_Node_Str"");
}","/** 
 * @param ise
 * @return
 */
private static IScriptExpression constructValidScriptExpression(IScriptExpression ise){
  return ise != null && ise.getText() != null && ise.getText().trim().length() > 0 ? ise : new ScriptExpression(""String_Node_Str"");
}",0.9484536082474226
66947,"/** 
 * @return
 * @throws DataException save error
 */
void getColumnsValue(Map valueMap) throws DataException {
  Iterator itr=this.allAutoBindingExprs.iterator();
  while (itr.hasNext()) {
    BindingColumn bindingColumn=(BindingColumn)itr.next();
    if (valueMap.containsKey(bindingColumn.columnName))     continue;
    Object exprValue=evaluateValue(bindingColumn,AUTO_BINDING);
    if (valueMap.get(bindingColumn.columnName) == null)     valueMap.put(bindingColumn.columnName,exprValue);
  }
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      BindingColumn bindingColumn=(BindingColumn)it.next();
      if (valueMap.containsKey(bindingColumn.columnName))       continue;
      Object exprValue=evaluateValue(bindingColumn,MANUAL_BINDING);
      valueMap.put(bindingColumn.columnName,exprValue);
    }
  }
  if (ExprMetaUtil.isBasedOnRD(this.odiResult.getResultClass()) && !saveHelper.isSummaryQuery()) {
    if (this.odiResult.getCurrentResult() != null) {
      valueMap.put(ExprMetaUtil.POS_NAME,this.odiResult.getCurrentResult().getFieldValue(ExprMetaUtil.POS_NAME));
    }
 else {
      valueMap.put(ExprMetaUtil.POS_NAME,-1);
    }
  }
  saveHelper.doSaveExpr(valueMap);
}","/** 
 * @return
 * @throws DataException save error
 */
void getColumnsValue(Map valueMap) throws DataException {
  Iterator itr=this.allAutoBindingExprs.iterator();
  while (itr.hasNext()) {
    BindingColumn bindingColumn=(BindingColumn)itr.next();
    if (valueMap.containsKey(bindingColumn.columnName))     continue;
    Object exprValue=evaluateValue(bindingColumn,AUTO_BINDING);
    if (valueMap.get(bindingColumn.columnName) == null)     valueMap.put(bindingColumn.columnName,exprValue);
  }
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      BindingColumn bindingColumn=(BindingColumn)it.next();
      if (valueMap.containsKey(bindingColumn.columnName))       continue;
      Object exprValue=evaluateValue(bindingColumn,MANUAL_BINDING);
      valueMap.put(bindingColumn.columnName,exprValue);
    }
  }
  if (ExprMetaUtil.isBasedOnRD(this.odiResult.getResultClass()) && !saveHelper.isSummaryQuery()) {
    if (this.odiResult.getCurrentResult() != null) {
      valueMap.put(ExprMetaUtil.POS_NAME,this.odiResult.getCurrentResult().getFieldValue(ExprMetaUtil.POS_NAME));
    }
 else {
      valueMap.put(ExprMetaUtil.POS_NAME,0);
    }
  }
  saveHelper.doSaveExpr(valueMap);
}",0.9988510149368058
66948,"public void setErrors(List<EngineException> errors){
  if (errors != null) {
    this.errors=errors;
  }
 else {
    this.errors=new ArrayList<EngineException>();
  }
}","public void setErrors(List<ElementExceptionInfo> errors){
  if (errors != null) {
    this.errors=errors;
  }
 else {
    this.errors=new ArrayList<ElementExceptionInfo>();
  }
}",0.9248554913294798
66949,"public List<EngineException> getErrors(){
  return errors;
}","public List<ElementExceptionInfo> getErrors(){
  return errors;
}",0.896
66950,"public void setReportContent(ReportContent content){
  this.reportContent=content;
  content.setReportContext(reportContext);
  content.setErrors(errors);
}","public void setReportContent(ReportContent content){
  this.reportContent=content;
  content.setReportContext(reportContext);
}",0.8975265017667845
66951,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=getBaseUrl(context);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i],timeZone);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(IBirtConstants.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (timeZone != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_TIMEZONE,timeZone.getID()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    if (pageOverflow != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,pageOverflow));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            options.setOption(InputOptions.OPT_TIMEZONE,timeZone);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          if (bookmark != null) {
            link.append(""String_Node_Str"");
            link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
          }
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=getBaseUrl(context);
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            if (valueObj instanceof List) {
              if (((List)valueObj).size() == 1) {
                valueObj=((List)valueObj).get(0);
              }
 else {
                valueObj=((List)valueObj).toArray();
              }
            }
            Object[] values;
            if (valueObj instanceof Object[]) {
              values=(Object[])valueObj;
            }
 else {
              values=new Object[1];
              values[0]=valueObj;
            }
            for (int i=0; i < values.length; i++) {
              String value=DataUtil.getDisplayValue(values[i],timeZone);
              if (value != null) {
                link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
              }
 else {
                link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISNULL,URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE)));
              }
            }
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(IBirtConstants.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (timeZone != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_TIMEZONE,timeZone.getID()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    if (svg != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_SVG,String.valueOf(svg.booleanValue())));
    }
    if (isDesigner != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_DESIGNER,String.valueOf(isDesigner)));
    }
    if (pageOverflow != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_PAGE_OVERFLOW,pageOverflow));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            options.setOption(InputOptions.OPT_TIMEZONE,timeZone);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          if (bookmark != null) {
            link.append(""String_Node_Str"");
            link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
          }
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9762513009745482
66952,"/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression,ScriptContext context) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    if (text.trim().length() == 0)     return true;
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    ExpressionCompiler expressionCompiler=new ExpressionCompiler();
    CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
    return flattenFilterExpression(expr);
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr,context) && isValidExpressionInQueryFilter(oprand1,context) && isValidExpressionInQueryFilter(oprand2,context);
  }
  return true;
}","/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression,ScriptContext context) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    if (text == null || text.trim().length() == 0)     return true;
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    ExpressionCompiler expressionCompiler=new ExpressionCompiler();
    CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
    return flattenFilterExpression(expr);
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr,context) && isValidExpressionInQueryFilter(oprand1,context) && isValidExpressionInQueryFilter(oprand2,context);
  }
  return true;
}",0.993916349809886
66953,"public Control createPageControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  FillLayout layout=new FillLayout();
  content.setLayout(layout);
  Label txt=new Label(content,SWT.LEFT);
  txt.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  return content;
}","public Control createPageControl(Composite parent){
  Composite content=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  content.setLayout(layout);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label txt=new Label(content,SWT.LEFT);
  txt.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  Label nextLineLabel=new Label(content,SWT.LEFT);
  nextLineLabel.setText(Messages.formatMessage(""String_Node_Str"",new Object[]{dataSourceDesign.getName()}));
  Label thirdLineLabel=new Label(content,SWT.LEFT);
  thirdLineLabel.setText(Messages.getMessage(""String_Node_Str""));
  return content;
}",0.5075225677031093
66954,"private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (hint == null && (handle instanceof DerivedDataSetHandle)) {
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
    }
  }
  return null;
}","private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
    }
  }
  return null;
}",0.9881266490765171
66955,"private boolean valueEqual(Object o) throws DataException {
  if (o == DUMMYOBJ)   return true;
  return ScriptEvalUtil.compare(this.value,o) == 0;
}","private boolean valueEqual(Object o) throws DataException {
  if (o == DUMMYOBJ)   return true;
  if (this.value == null)   return true;
  return ScriptEvalUtil.compare(this.value,o) == 0;
}",0.8790560471976401
66956,"/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  if (extendedItemManager != null) {
    extendedItemManager.close();
    extendedItemManager=null;
  }
  if (engineExtensionManager != null) {
    engineExtensionManager.close();
    engineExtensionManager=null;
  }
  if (scriptContext != null) {
    scriptContext.close();
    scriptContext=null;
  }
  if (dataSource != null) {
    try {
      dataSource.close();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    dataSource=null;
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (closeClassLoader && applicationClassLoader instanceof ApplicationClassLoader) {
    ((ApplicationClassLoader)applicationClassLoader).close();
  }
  IStatusHandler handler=task.getStatusHandler();
  if (handler != null) {
    handler.finish();
  }
  applicationClassLoader=null;
  engine=null;
  executor=null;
  tocBuilder=null;
  configs=null;
  params=null;
  persistentBeans=null;
  transientBeans=null;
  pageVariables=null;
  docWriter=null;
  reportIR=null;
  appContext=null;
  reportContext=null;
  renderOption=null;
  reportDoc=null;
  reportContent=null;
  design=null;
  content=null;
  rsets=null;
  reportHandles=null;
  errors=null;
  stringFormatters=null;
  numberFormatters=null;
  dateFormatters=null;
  pageBreakListeners=null;
  eventHandlerManager=null;
  progressMonitor=null;
  element=null;
}","/** 
 * Clean up the execution context before finishing using it
 */
public void close(){
  if (extendedItemManager != null) {
    extendedItemManager.close();
    extendedItemManager=null;
  }
  if (engineExtensionManager != null) {
    engineExtensionManager.close();
    engineExtensionManager=null;
  }
  if (scriptContext != null) {
    scriptContext.close();
    scriptContext=null;
  }
  if (dataSource != null) {
    try {
      dataSource.close();
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,""String_Node_Str"",e);
    }
    dataSource=null;
  }
  if (dataEngine != null) {
    dataEngine.shutdown();
    dataEngine=null;
  }
  if (closeClassLoader && applicationClassLoader instanceof ApplicationClassLoader) {
    ((ApplicationClassLoader)applicationClassLoader).close();
  }
  IStatusHandler handler=task.getStatusHandler();
  if (handler != null) {
    handler.finish();
  }
  applicationClassLoader=null;
  engine=null;
  executor=null;
  tocBuilder=null;
  configs=null;
  params=null;
  persistentBeans=null;
  transientBeans=null;
  pageVariables=null;
  docWriter=null;
  reportIR=null;
  appContext=null;
  reportContext=null;
  renderOption=null;
  reportDoc=null;
  reportContent=null;
  design=null;
  content=null;
  rsets=null;
  reportHandles=null;
  errors.clear();
  stringFormatters=null;
  numberFormatters=null;
  dateFormatters=null;
  pageBreakListeners=null;
  eventHandlerManager=null;
  progressMonitor=null;
  element=null;
}",0.9955976972570268
66957,"/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope,int rawIdStartingValue) throws DataException {
  super(rService,odiResult,scope,rawIdStartingValue);
  Object[] params={rService,odiResult,scope};
  logger.entering(ResultIterator2.class.getName(),""String_Node_Str"",params);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedRowId=0;
  this.isSummary=(rService.getQueryDefn() instanceof IQueryDefinition) ? ((IQueryDefinition)rService.getQueryDefn()).isSummaryQuery() : false;
  if (this.isSummary) {
    if (lowestGroupLevel == 0)     this.groupLevelCalculator=new SummaryGroupLevelCalculator(null);
 else {
      int[][] groupIndex=new int[lowestGroupLevel + 1][];
      for (int i=0; i <= lowestGroupLevel; i++) {
        groupIndex[i]=this.odiResult.getGroupStartAndEndIndex(i);
      }
      this.groupLevelCalculator=new SummaryGroupLevelCalculator(groupIndex);
    }
    if (rService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
      this.saveToDoc=true;
      streamManager=new StreamManager(rService.getSession().getEngineContext(),new QueryResultInfo(rService.getQueryResults().getID(),null,0));
      try {
        bindings=new ArrayList(rService.getQueryDefn().getBindings().values());
        this.doSaveResultClass(streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),bindings,this.getResultMetaData());
        raDataSet=(RAOutputStream)streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        rowCountOffset=raDataSet.getOffset();
        dataSetStream=new DataOutputStream(raDataSet);
        IOUtil.writeInt(dataSetStream,-1);
        dataSetLenStream=new DataOutputStream(streamManager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
      }
 catch (      Exception e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
  }
  logger.exiting(ResultIterator2.class.getName(),""String_Node_Str"");
}","/** 
 * @param context
 * @param queryResults
 * @param queryResultID
 * @param useDetails
 * @param lowestGroupLevel
 * @throws DataException
 */
ResultIterator2(IServiceForResultSet rService,org.eclipse.birt.data.engine.odi.IResultIterator odiResult,Scriptable scope,int rawIdStartingValue) throws DataException {
  super(rService,odiResult,scope,rawIdStartingValue);
  Object[] params={rService,odiResult,scope};
  logger.entering(ResultIterator2.class.getName(),""String_Node_Str"",params);
  this.lowestGroupLevel=rService.getQueryDefn().getGroups().size();
  this.currRowIndex=-1;
  this.cachedRowId=0;
  this.isSummary=(rService.getQueryDefn() instanceof IQueryDefinition) ? ((IQueryDefinition)rService.getQueryDefn()).isSummaryQuery() : false;
  if (this.isSummary) {
    if (lowestGroupLevel == 0)     this.groupLevelCalculator=new SummaryGroupLevelCalculator(null);
 else {
      int[][] groupIndex=new int[lowestGroupLevel + 1][];
      for (int i=0; i <= lowestGroupLevel; i++) {
        groupIndex[i]=this.odiResult.getGroupStartAndEndIndex(i);
      }
      this.groupLevelCalculator=new SummaryGroupLevelCalculator(groupIndex);
    }
    if (rService.getSession().getEngineContext().getMode() == DataEngineContext.MODE_GENERATION) {
      this.saveToDoc=true;
      streamManager=new StreamManager(rService.getSession().getEngineContext(),new QueryResultInfo(rService.getQueryResults().getID(),null,0));
      try {
        bindings=findSavedBinding(rService.getQueryDefn().getBindings().values().iterator());
        this.doSaveResultClass(streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),bindings);
        raDataSet=(RAOutputStream)streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
        rowCountOffset=raDataSet.getOffset();
        dataSetStream=new DataOutputStream(raDataSet);
        IOUtil.writeInt(dataSetStream,-1);
        dataSetLenStream=new DataOutputStream(streamManager.getOutStream(DataEngineContext.DATASET_DATA_LEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE));
      }
 catch (      Exception e) {
        throw new DataException(e.getLocalizedMessage());
      }
    }
  }
  logger.exiting(ResultIterator2.class.getName(),""String_Node_Str"");
}",0.967672875187326
66958,"private void doSaveResultClass(OutputStream outputStream,List<IBinding> requestColumnMap,IResultMetaData rClass) throws BirtException {
}","private void doSaveResultClass(OutputStream outputStream,List<IBinding> requestColumnMap) throws BirtException {
}",0.9083665338645418
66959,"/** 
 * aggregation values to disk arrays for the specified AggrSortDefinitions who share the same target aggregation result set.
 * @param base
 * @param targetResultSet
 * @param sortIndex
 * @param targetSorts
 * @param keyDiskArrays
 * @throws IOException
 */
private static void populateAggrKeysForTargetResultSet(IAggregationResultSet base,IAggregationResultSet targetResultSet,int[] sortIndex,ITargetSort[] targetSorts,IDiskArray[] keyDiskArrays) throws IOException {
  AggrSortDefinition sortDefinition=(AggrSortDefinition)targetSorts[sortIndex[0]];
  DimLevel targetLevel=sortDefinition.getTargetLevel();
  final AggregationDefinition aggrDefinition=targetResultSet.getAggregationDefinition();
  if (aggrDefinition == null || aggrDefinition.getAggregationFunctions() == null) {
    int levelIndex=targetResultSet.getLevelIndex(targetLevel);
    for (int i=0; i < base.length(); i++) {
      base.seek(i);
      Object key=base.getLevelKeyValue(levelIndex)[0];
      for (int j=0; j < sortIndex.length; j++) {
        keyDiskArrays[sortIndex[j]].add(key);
      }
    }
    return;
  }
  DimLevel[] axisQualifierLevel=sortDefinition.getAxisQualifierLevel();
  int[] levelIndex=new int[axisQualifierLevel.length];
  for (int i=0; i < levelIndex.length; i++) {
    levelIndex[i]=targetResultSet.getLevelIndex(axisQualifierLevel[i]);
  }
  Object[] axisQualifierValue=sortDefinition.getAxisQualifierValue();
  int[] aggrIndex=new int[sortIndex.length];
  for (int i=0; i < sortIndex.length; i++) {
    AggrSortDefinition sortDefn=(AggrSortDefinition)targetSorts[sortIndex[i]];
    aggrIndex[i]=targetResultSet.getAggregationIndex(sortDefn.getAggrName());
  }
  int indexInBase=base.getLevelIndex(targetLevel);
  CompareIndex compareIndex=getCompareIndex(base,targetResultSet,indexInBase);
  int baseRowIndex=0;
  for (int i=0; i < targetResultSet.length(); i++) {
    targetResultSet.seek(i);
    Object[] values=new Object[levelIndex.length];
    for (int j=0; j < levelIndex.length; j++) {
      values[j]=targetResultSet.getLevelKeyValue(levelIndex[j])[0];
    }
    if (CompareUtil.compare(values,axisQualifierValue) == 0) {
      IAggregationResultRow targetRow=targetResultSet.getCurrentRow();
      boolean found=false;
      while (baseRowIndex < base.length()) {
        base.seek(baseRowIndex);
        IAggregationResultRow baseRow=base.getCurrentRow();
        if (shareLevelKey(baseRow,targetRow,compareIndex)) {
          for (int j=0; j < sortIndex.length; j++) {
            keyDiskArrays[sortIndex[j]].add(targetRow.getAggregationValues()[aggrIndex[j]]);
          }
          baseRowIndex++;
          found=true;
        }
 else         if (!found) {
          fillNullValues(sortIndex,keyDiskArrays);
          baseRowIndex++;
        }
 else {
          break;
        }
      }
    }
  }
  for (; baseRowIndex < base.length(); baseRowIndex++) {
    fillNullValues(sortIndex,keyDiskArrays);
  }
}","/** 
 * aggregation values to disk arrays for the specified AggrSortDefinitions who share the same target aggregation result set.
 * @param base
 * @param targetResultSet
 * @param sortIndex
 * @param targetSorts
 * @param keyDiskArrays
 * @throws IOException
 */
private static void populateAggrKeysForTargetResultSet(IAggregationResultSet base,IAggregationResultSet targetResultSet,int[] sortIndex,ITargetSort[] targetSorts,IDiskArray[] keyDiskArrays) throws IOException {
  AggrSortDefinition sortDefinition=(AggrSortDefinition)targetSorts[sortIndex[0]];
  DimLevel targetLevel=sortDefinition.getTargetLevel();
  final AggregationDefinition aggrDefinition=targetResultSet.getAggregationDefinition();
  if (aggrDefinition == null || aggrDefinition.getAggregationFunctions() == null) {
    int levelIndex=targetResultSet.getLevelIndex(targetLevel);
    for (int i=0; i < base.length(); i++) {
      base.seek(i);
      Object key=base.getLevelKeyValue(levelIndex)[0];
      for (int j=0; j < sortIndex.length; j++) {
        keyDiskArrays[sortIndex[j]].add(key);
      }
    }
    return;
  }
  DimLevel[] axisQualifierLevel=sortDefinition.getAxisQualifierLevel();
  int[] levelIndex=new int[axisQualifierLevel.length];
  for (int i=0; i < levelIndex.length; i++) {
    levelIndex[i]=targetResultSet.getLevelIndex(axisQualifierLevel[i]);
  }
  Object[] axisQualifierValue=sortDefinition.getAxisQualifierValue();
  int[] aggrIndex=new int[sortIndex.length];
  for (int i=0; i < sortIndex.length; i++) {
    AggrSortDefinition sortDefn=(AggrSortDefinition)targetSorts[sortIndex[i]];
    aggrIndex[i]=targetResultSet.getAggregationIndex(sortDefn.getAggrName());
  }
  int indexInBase=base.getLevelIndex(targetLevel);
  CompareIndex compareIndex=getCompareIndex(base,targetResultSet,indexInBase);
  int baseRowIndex=0;
  for (int i=0; i < targetResultSet.length(); i++) {
    targetResultSet.seek(i);
    Object[] values=new Object[levelIndex.length];
    for (int j=0; j < levelIndex.length; j++) {
      if (levelIndex[j] == -1)       values[j]=axisQualifierValue[j];
 else       values[j]=targetResultSet.getLevelKeyValue(levelIndex[j])[0];
    }
    if (CompareUtil.compare(values,axisQualifierValue) == 0) {
      IAggregationResultRow targetRow=targetResultSet.getCurrentRow();
      boolean found=false;
      while (baseRowIndex < base.length()) {
        base.seek(baseRowIndex);
        IAggregationResultRow baseRow=base.getCurrentRow();
        if (shareLevelKey(baseRow,targetRow,compareIndex)) {
          for (int j=0; j < sortIndex.length; j++) {
            keyDiskArrays[sortIndex[j]].add(targetRow.getAggregationValues()[aggrIndex[j]]);
          }
          baseRowIndex++;
          found=true;
        }
 else         if (!found) {
          fillNullValues(sortIndex,keyDiskArrays);
          baseRowIndex++;
        }
 else {
          break;
        }
      }
    }
  }
  for (; baseRowIndex < base.length(); baseRowIndex++) {
    fillNullValues(sortIndex,keyDiskArrays);
  }
}",0.987162162162162
66960,"/** 
 * @param cubeQueryDefinition
 * @param cubeQueryExcutorHelper
 * @throws DataException
 */
private void populateAggregationSort(CubeQueryExecutor executor,CubeQueryExecutorHelper cubeQueryExcutorHelper,int type) throws DataException {
  List columnSort;
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
    columnSort=executor.getColumnEdgeSort();
  break;
case ICubeQueryDefinition.ROW_EDGE:
columnSort=executor.getRowEdgeSort();
break;
case ICubeQueryDefinition.PAGE_EDGE:
columnSort=executor.getPageEdgeSort();
default :
return;
}
for (int i=0; i < columnSort.size(); i++) {
ICubeSortDefinition cubeSort=(ICubeSortDefinition)columnSort.get(i);
ICubeQueryDefinition queryDefn=executor.getCubeQueryDefinition();
String expr=cubeSort.getExpression().getText();
ITargetSort targetSort=null;
if ((cubeSort.getAxisQualifierLevels().length == 0 && (OlapExpressionUtil.isComplexDimensionExpr(expr) || OlapExpressionUtil.isReferenceToAttribute(cubeSort.getExpression(),queryDefn.getBindings()))) || (!OlapExpressionUtil.isDirectRerenrence(cubeSort.getExpression(),executor.getCubeQueryDefinition().getBindings()))) {
Scriptable scope=executor.getSession().getSharedScope();
targetSort=new DimensionSortEvalHelper(executor.getOuterResults(),scope,queryDefn,cubeSort,executor.getSession().getEngineContext().getScriptContext());
}
 else {
String bindingName=OlapExpressionUtil.getBindingName(expr);
if (bindingName == null) continue;
List bindings=queryDefn.getBindings();
List aggrOns=null;
IBinding binding=null;
for (int j=0; j < bindings.size(); j++) {
binding=(IBinding)bindings.get(j);
if (binding.getBindingName().equals(bindingName)) {
aggrOns=binding.getAggregatOns();
break;
}
}
DimLevel[] aggrOnLevels=null;
if (aggrOns == null || aggrOns.size() == 0) {
if (binding == null) continue;
String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
if (measureName == null) {
IBinding referBinding=OlapExpressionUtil.getDirectMeasureBinding(binding,bindings);
if (referBinding != null) {
measureName=OlapExpressionUtil.getMeasure(referBinding.getExpression());
bindingName=referBinding.getBindingName();
}
}
if (measureName != null) {
List measureAggrOns=CubeQueryDefinitionUtil.populateMeasureAggrOns(queryDefn);
aggrOnLevels=new DimLevel[measureAggrOns.size()];
for (int k=0; k < measureAggrOns.size(); k++) {
aggrOnLevels[k]=(DimLevel)measureAggrOns.get(k);
}
}
}
 else {
aggrOnLevels=new DimLevel[aggrOns.size()];
for (int j=0; j < aggrOnLevels.length; j++) {
aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
}
}
DimLevel[] axisLevels=new DimLevel[cubeSort.getAxisQualifierLevels().length];
for (int k=0; k < axisLevels.length; k++) {
axisLevels[k]=new DimLevel(cubeSort.getAxisQualifierLevels()[k]);
}
targetSort=new AggrSortDefinition(aggrOnLevels,bindingName,axisLevels,cubeSort.getAxisQualifierValues(),new DimLevel(cubeSort.getTargetLevel()),cubeSort.getSortDirection());
}
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
cubeQueryExcutorHelper.addColumnSort(targetSort);
break;
case ICubeQueryDefinition.ROW_EDGE:
cubeQueryExcutorHelper.addRowSort(targetSort);
break;
case ICubeQueryDefinition.PAGE_EDGE:
cubeQueryExcutorHelper.addPageSort(targetSort);
}
}
}","/** 
 * @param cubeQueryDefinition
 * @param cubeQueryExcutorHelper
 * @throws DataException
 */
private void populateAggregationSort(CubeQueryExecutor executor,CubeQueryExecutorHelper cubeQueryExcutorHelper,int type) throws DataException {
  List columnSort;
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
    columnSort=executor.getColumnEdgeSort();
  break;
case ICubeQueryDefinition.ROW_EDGE:
columnSort=executor.getRowEdgeSort();
break;
case ICubeQueryDefinition.PAGE_EDGE:
columnSort=executor.getPageEdgeSort();
default :
return;
}
for (int i=0; i < columnSort.size(); i++) {
ICubeSortDefinition cubeSort=(ICubeSortDefinition)columnSort.get(i);
ICubeQueryDefinition queryDefn=executor.getCubeQueryDefinition();
String expr=cubeSort.getExpression().getText();
ITargetSort targetSort=null;
if ((cubeSort.getAxisQualifierLevels().length == 0 && (OlapExpressionUtil.isComplexDimensionExpr(expr) || OlapExpressionUtil.isReferenceToAttribute(cubeSort.getExpression(),queryDefn.getBindings()))) || (!OlapExpressionUtil.isDirectRerenrence(cubeSort.getExpression(),executor.getCubeQueryDefinition().getBindings()))) {
Scriptable scope=executor.getSession().getSharedScope();
targetSort=new DimensionSortEvalHelper(executor.getOuterResults(),scope,queryDefn,cubeSort,executor.getSession().getEngineContext().getScriptContext());
}
 else {
String bindingName=OlapExpressionUtil.getBindingName(expr);
if (bindingName == null) continue;
List bindings=queryDefn.getBindings();
List aggrOns=null;
IBinding binding=null;
for (int j=0; j < bindings.size(); j++) {
binding=(IBinding)bindings.get(j);
if (binding.getBindingName().equals(bindingName)) {
aggrOns=binding.getAggregatOns();
break;
}
}
DimLevel[] aggrOnLevels=null;
if (aggrOns == null || aggrOns.size() == 0) {
if (binding == null) continue;
String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
if (measureName == null) {
IBinding referBinding=OlapExpressionUtil.getDirectMeasureBinding(binding,bindings);
if (referBinding != null) {
measureName=OlapExpressionUtil.getMeasure(referBinding.getExpression());
bindingName=referBinding.getBindingName();
aggrOns=referBinding.getAggregatOns();
}
}
if (aggrOns != null && aggrOns.size() > 0) {
aggrOnLevels=new DimLevel[aggrOns.size()];
for (int j=0; j < aggrOnLevels.length; j++) {
aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
}
}
 else if (measureName != null) {
List measureAggrOns=CubeQueryDefinitionUtil.populateMeasureAggrOns(queryDefn);
aggrOnLevels=new DimLevel[measureAggrOns.size()];
for (int k=0; k < measureAggrOns.size(); k++) {
aggrOnLevels[k]=(DimLevel)measureAggrOns.get(k);
}
}
}
 else {
aggrOnLevels=new DimLevel[aggrOns.size()];
for (int j=0; j < aggrOnLevels.length; j++) {
aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
}
}
DimLevel[] axisLevels=new DimLevel[cubeSort.getAxisQualifierLevels().length];
for (int k=0; k < axisLevels.length; k++) {
axisLevels[k]=new DimLevel(cubeSort.getAxisQualifierLevels()[k]);
}
targetSort=new AggrSortDefinition(aggrOnLevels,bindingName,axisLevels,cubeSort.getAxisQualifierValues(),new DimLevel(cubeSort.getTargetLevel()),cubeSort.getSortDirection());
}
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
cubeQueryExcutorHelper.addColumnSort(targetSort);
break;
case ICubeQueryDefinition.ROW_EDGE:
cubeQueryExcutorHelper.addRowSort(targetSort);
break;
case ICubeQueryDefinition.PAGE_EDGE:
cubeQueryExcutorHelper.addPageSort(targetSort);
}
}
}",0.961392219947353
66961,"/** 
 */
private void refreshDataPreviewPane(){
  if (getContext().isShowingDataPreview()) {
    refreshTablePreview();
  }
 else {
    refreshDataPreview();
  }
}","/** 
 */
private void refreshDataPreviewPane(){
  if (isDriectCubeReference()) {
    return;
  }
  if (getContext().isShowingDataPreview()) {
    refreshTablePreview();
  }
 else {
    refreshDataPreview();
  }
}",0.8693333333333333
66962,"/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger.
 * @param logger - the user defined logger.
 * @param directoryName - the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name. For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel - the log level to be set. If logLevel is null, it will be ignored.
 * @param rollingSize
 * @param maxBackupIndex
 */
public static void startEngineLogging(Logger logger,String directoryName,String fileName,Level logLevel,int rollingSize,int maxBackupIndex){
  if (logger != null) {
    if (!isValidLogger(logger)) {
      logger.log(Level.WARNING,""String_Node_Str"");
    }
 else {
      AdapterHandler adapter=getAdapterHandler();
      adapter.setUserLogger(logger);
    }
  }
  if (directoryName != null || fileName != null) {
    logFileName=generateUniqueLogFileName(directoryName,fileName);
    logRollingSize=rollingSize;
    logMaxBackupIndex=maxBackupIndex;
    if (logLevel != Level.OFF) {
      Handler fileHandler=createFileLogger(logFileName,logRollingSize,logMaxBackupIndex);
      if (fileHandler != null) {
        AdapterHandler adapter=getAdapterHandler();
        adapter.setUserLogger(logger);
      }
    }
  }
  ROOT_LOGGER.setLevel(logLevel);
}","/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger.
 * @param logger - the user defined logger.
 * @param directoryName - the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name. For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel - the log level to be set. If logLevel is null, it will be ignored.
 * @param rollingSize
 * @param maxBackupIndex
 */
public static void startEngineLogging(Logger logger,String directoryName,String fileName,Level logLevel,int rollingSize,int maxBackupIndex){
  if (logger != null) {
    if (!isValidLogger(logger)) {
      logger.log(Level.WARNING,""String_Node_Str"");
    }
 else {
      AdapterHandler adapter=getAdapterHandler();
      adapter.setUserLogger(logger);
    }
  }
  if (directoryName != null || fileName != null) {
    logFileName=generateUniqueLogFileName(directoryName,fileName);
    logRollingSize=rollingSize;
    logMaxBackupIndex=maxBackupIndex;
    if (logLevel != Level.OFF) {
      FileHandler fileHandler=createFileLogger(logFileName,logRollingSize,logMaxBackupIndex);
      if (fileHandler != null) {
        AdapterHandler adapter=getAdapterHandler();
        adapter.setFileHandler(fileHandler);
      }
    }
  }
  ROOT_LOGGER.setLevel(logLevel);
}",0.9862637362637364
66963,"public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null || expr.getStringExpression() == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setConstant(true);
    jsExpr.setConstantValue(expr.getExpression());
    return jsExpr;
  }
 else   jsExpr=new ExpressionAdapter(expr,el);
  return jsExpr;
}","public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setConstant(true);
    jsExpr.setConstantValue(expr.getExpression());
    return jsExpr;
  }
 else {
    if (expr.getStringExpression() == null)     return null;
    jsExpr=new ExpressionAdapter(expr,el);
  }
  return jsExpr;
}",0.8708765315739868
66964,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    context.endInline();
    HTML2Content.html2Content(foreign);
    context.startCell();
    if (context.isLastTable()) {
      wordWriter.insertHiddenParagraph();
    }
    int width=WordUtil.convertTo(foreign.getWidth(),context.getCurrentWidth(),reportDpi);
    width=Math.min(width,context.getCurrentWidth());
    wordWriter.startTable(foreign.getComputedStyle(),width);
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(width,foreign.getComputedStyle(),null);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setLastIsTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    if (!""String_Node_Str"".equalsIgnoreCase(foreign.getComputedStyle().getDisplay())) {
      adjustInline();
      inlineBrother=false;
    }
 else {
      context.endInline();
    }
    HTML2Content.html2Content(foreign);
    context.startCell();
    if (context.isLastTable()) {
      wordWriter.insertHiddenParagraph();
    }
    int width=WordUtil.convertTo(foreign.getWidth(),context.getCurrentWidth(),reportDpi);
    width=Math.min(width,context.getCurrentWidth());
    wordWriter.startTable(foreign.getComputedStyle(),width);
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(width,foreign.getComputedStyle(),null);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setLastIsTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}",0.9414795730585204
66965,"private String removeQuotes(String fontName){
  if (ptnWrappingQuotes.matcher(fontName).matches()) {
    return fontName.substring(1,fontName.length());
  }
  return fontName;
}","private String removeQuotes(String fontName){
  if (ptnWrappingQuotes.matcher(fontName).matches()) {
    return fontName.substring(1,fontName.length() - 1);
  }
  return fontName;
}",0.988826815642458
66966,"public IAggregationResultSet[] execute(IAggregationResultSet[] rs,BirtCubeView view,CubeQueryExecutorHelper cubeQueryExecutorHelper) throws IOException, DataException {
  ICubeQueryDefinition query=view.getCubeQueryDefinition();
  IEdgeDefinition columnEdge=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=query.getEdge(ICubeQueryDefinition.ROW_EDGE);
  IMirroredDefinition columnMirror=null, rowMirror=null;
  if (columnEdge != null)   columnMirror=columnEdge.getMirroredDefinition();
  if (rowEdge != null)   rowMirror=rowEdge.getMirroredDefinition();
  int index=0;
  if (columnEdge != null) {
    if (columnMirror != null) {
      rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(columnMirror,columnEdge,view),cubeQueryExecutorHelper.getColumnSort());
    }
    index++;
  }
  if (rowMirror != null) {
    rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(rowMirror,rowEdge,view),cubeQueryExecutorHelper.getRowSort());
  }
  if (rowMirror != null || columnMirror != null) {
    boolean hasAggregationSort=false;
    List sort=cubeQueryExecutorHelper.getColumnSort();
    for (int i=0; i < sort.size(); i++) {
      if (sort.get(i) instanceof AggrSortDefinition && ((AggrSortDefinition)sort.get(i)).getAxisQualifierLevel().length > 0) {
        hasAggregationSort=true;
        break;
      }
    }
    if (!hasAggregationSort) {
      sort=cubeQueryExecutorHelper.getRowSort();
      for (int i=0; i < sort.size(); i++) {
        if (sort.get(i) instanceof AggrSortDefinition && ((AggrSortDefinition)sort.get(i)).getAxisQualifierLevel().length > 0) {
          hasAggregationSort=true;
          break;
        }
      }
    }
    if (hasAggregationSort) {
      for (int i=0; i < rs.length; i++) {
        if (rs[i].getAggregationCount() == 0) {
          rs[i]=sortAggregationResultSet(rs[i]);
        }
      }
      cubeQueryExecutorHelper.applyAggrSort(rs);
    }
  }
  return rs;
}","public IAggregationResultSet[] execute(IAggregationResultSet[] rs,BirtCubeView view,CubeQueryExecutorHelper cubeQueryExecutorHelper) throws IOException, DataException {
  ICubeQueryDefinition query=view.getCubeQueryDefinition();
  IEdgeDefinition columnEdge=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=query.getEdge(ICubeQueryDefinition.ROW_EDGE);
  IMirroredDefinition columnMirror=null, rowMirror=null;
  if (columnEdge != null)   columnMirror=columnEdge.getMirroredDefinition();
  if (rowEdge != null)   rowMirror=rowEdge.getMirroredDefinition();
  int index=0;
  if (columnEdge != null) {
    if (columnMirror != null) {
      rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(columnMirror,columnEdge,view),cubeQueryExecutorHelper.getColumnSort());
    }
    index++;
  }
  if (rowMirror != null) {
    rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(rowMirror,rowEdge,view),cubeQueryExecutorHelper.getRowSort());
  }
  return rs;
}",0.6807795698924731
66967,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      MirrorOperationExecutor moe=new MirrorOperationExecutor();
      rs=moe.execute(rs,view,cubeQueryExecutorHelper);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9540412044374008
66968,"private IAggregationResultSet[] processOperationOnQuery(BirtCubeView view,StopSign stopSign,IAggregationResultSet[] rs,AggregationDefinition[] aggrDefns) throws DataException, IOException, BirtException {
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
  DrillOperationExecutor drillOp=new DrillOperationExecutor();
  IAggregationResultSet[] baseRs=new IAggregationResultSet[aggrDefns.length];
  System.arraycopy(rs,0,baseRs,0,aggrDefns.length);
  IAggregationResultSet[] drillRs=new IAggregationResultSet[rs.length - aggrDefns.length];
  System.arraycopy(rs,aggrDefns.length,drillRs,0,drillRs.length);
  rs=drillOp.execute(baseRs,drillRs,view.getCubeQueryDefinition());
  CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
  rs=coe.execute(rs,stopSign);
  return rs;
}","private IAggregationResultSet[] processOperationOnQuery(BirtCubeView view,StopSign stopSign,IAggregationResultSet[] rs,AggregationDefinition[] aggrDefns) throws DataException, IOException, BirtException {
  DrillOperationExecutor drillOp=new DrillOperationExecutor();
  IAggregationResultSet[] baseRs=new IAggregationResultSet[aggrDefns.length];
  System.arraycopy(rs,0,baseRs,0,aggrDefns.length);
  IAggregationResultSet[] drillRs=new IAggregationResultSet[rs.length - aggrDefns.length];
  System.arraycopy(rs,aggrDefns.length,drillRs,0,drillRs.length);
  rs=drillOp.execute(baseRs,drillRs,view.getCubeQueryDefinition());
  CubeOperationsExecutor coe=new CubeOperationsExecutor(view.getCubeQueryDefinition(),view.getPreparedCubeOperations(),view.getCubeQueryExecutor().getScope(),view.getCubeQueryExecutor().getSession().getEngineContext().getScriptContext());
  rs=coe.execute(rs,stopSign);
  return rs;
}",0.9418483904465212
66969,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
          items[i].setIndexColumn(hint.isIndexColumn());
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
        items[i].setIndexColumn(hint.isIndexColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
          items[i].setIndexColumn(hint.isIndexColumn());
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
        items[i].setIndexColumn(hint.isIndexColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.9900110987791344
66970,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}",0.988597972972973
66971,"private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=executor.getSession().getQueryResultIDUtil().nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
        FileSecurity.fileMakeDirs(tmpDir);
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=executor.getSession().getQueryResultIDUtil().nextID();
        CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
    initLoadedAggregationResultSets(rs,aggrDefns);
  }
  executor.setQueryResultsId(id);
  return rs;
}","private IAggregationResultSet[] populateRs(BirtCubeView view,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper2,StopSign stopSign,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExecutorHelper.execute(aggrDefns,executor.getSession().getStopSign());
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=executor.getSession().getQueryResultIDUtil().nextID();
      File tmpDir=new File(executor.getSession().getTempDir());
      if (!FileSecurity.fileExist(tmpDir) || !FileSecurity.fileIsDirectory(tmpDir)) {
        FileSecurity.fileMakeDirs(tmpDir);
      }
      ArchiveWriter writer=new ArchiveWriter(new ArchiveFile(executor.getSession().getTempDir() + ""String_Node_Str"",""String_Node_Str""));
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=executor.getSession().getQueryResultIDUtil().nextID();
        CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getSession().getTempDir() + ""String_Node_Str""),VersionManager.getLatestVersion());
    initLoadedAggregationResultSets(rs,aggrDefns);
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.9705134722928316
66972,"/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      MirrorOperationExecutor moe=new MirrorOperationExecutor();
      rs=moe.execute(rs,view,cubeQueryExecutorHelper);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}","/** 
 * @param view
 * @param query
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IResultSet execute(BirtCubeView view,StopSign stopSign,ICube cube,IBindingValueFetcher fetcher) throws IOException, BirtException {
  CubeQueryExecutor executor=view.getCubeQueryExecutor();
  AggregationDefinition[] aggrDefns=prepareCube(executor.getCubeQueryDefinition(),view.getAggregationRegisterTable().getCalculatedMembersFromQuery());
  if (aggrDefns == null || aggrDefns.length == 0)   return null;
  DrilledAggregationDefinition[] drillAggrDefns=preparedDrillAggregation(executor.getCubeQueryDefinition(),aggrDefns);
  int size=aggrDefns.length + drillAggrDefns.length;
  AggregationDefinition[] finalAggregation=new AggregationDefinition[size];
  if (drillAggrDefns.length > 0) {
    System.arraycopy(aggrDefns,0,finalAggregation,0,aggrDefns.length);
    System.arraycopy(drillAggrDefns,0,finalAggregation,aggrDefns.length,drillAggrDefns.length);
  }
 else {
    finalAggregation=aggrDefns;
  }
  String cubeName=executor.getCubeQueryDefinition().getName();
  if (cubeName == null || cubeName.trim().length() == 0) {
    throw new DataException(ResourceConstants.CUBE_QUERY_NO_CUBE_BINDING);
  }
  CubeQueryValidator.validateCubeQueryDefinition(view,cube);
  cubeQueryExecutorHelper=new CubeQueryExecutorHelper(cube,executor.getComputedMeasureHelper(),fetcher);
  cubeQueryExecutorHelper.setMemoryCacheSize(CacheUtil.computeMemoryBufferSize(view.getAppContext()));
  cubeQueryExecutorHelper.setMaxDataObjectRows(CacheUtil.getMaxRows(view.getAppContext()));
  cubeQueryExecutorHelper.addJSFilter(executor.getDimensionFilterEvalHelpers());
  cubeQueryExecutorHelper.addSimpleLevelFilter(executor.getdimensionSimpleFilter());
  cubeQueryExecutorHelper.addAggrMeasureFilter(executor.getMeasureFilterEvalHelpers());
  cubeQueryExecutorHelper.addMeasureFilter(executor.getFacttableBasedFilterHelpers());
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.COLUMN_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.ROW_EDGE);
  populateAggregationSort(executor,cubeQueryExecutorHelper,ICubeQueryDefinition.PAGE_EDGE);
  IAggregationResultSet[] rs=null;
  cubeQueryExecutorHelper.setBreakHierarchy(executor.getCubeQueryDefinition().getFilterOption() == 0);
switch (executor.getContext().getMode()) {
case DataEngineContext.MODE_GENERATION:
{
      rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,true);
      rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
      break;
    }
case DataEngineContext.DIRECT_PRESENTATION:
{
    rs=populateRs(view,finalAggregation,cubeQueryExecutorHelper,stopSign,false);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
case DataEngineContext.MODE_PRESENTATION:
{
  if (executor.getCubeQueryDefinition().getQueryResultsID() != null) {
    rs=AggregationResultSetSaveUtil.load(executor.getCubeQueryDefinition().getQueryResultsID(),executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
    initLoadedAggregationResultSets(rs,finalAggregation);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
 else {
    rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
    MirrorOperationExecutor moe=new MirrorOperationExecutor();
    rs=moe.execute(rs,view,cubeQueryExecutorHelper);
    rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
    break;
  }
}
default :
{
String id=executor.getCubeQueryDefinition().getQueryResultsID();
IncrementExecutionHint ieh=null;
if (CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id)) {
  ICubeQueryDefinition savedQuery=CubeQueryDefinitionIOUtil.load(id,executor.getContext().getDocReader());
  ieh=org.eclipse.birt.data.engine.olap.impl.query.CubeQueryDefinitionUtil.getIncrementExecutionHint(savedQuery,executor.getCubeQueryDefinition());
}
if (!CubeQueryDefinitionIOUtil.existStream(executor.getContext().getDocReader(),id) || ieh == null || (!ieh.isNoIncrement() && executor.getCubeQueryDefinition().getCubeOperations().length > 0)) {
  rs=cubeQueryExecutorHelper.execute(finalAggregation,stopSign);
  MirrorOperationExecutor moe=new MirrorOperationExecutor();
  rs=moe.execute(rs,view,cubeQueryExecutorHelper);
}
 else {
  rs=AggregationResultSetSaveUtil.load(id,executor.getContext().getDocReader(),new VersionManager(executor.getContext()).getVersion());
  initLoadedAggregationResultSets(rs,finalAggregation);
  incrementExecute(rs,ieh);
}
if (executor.getContext().getDocWriter() != null) {
  if (id == null) {
    id=executor.getSession().getQueryResultIDUtil().nextID();
  }
  CubeQueryDefinitionIOUtil.save(id,executor.getContext().getDocWriter(),executor.getCubeQueryDefinition());
  AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
  executor.setQueryResultsId(id);
}
rs=processOperationOnQuery(view,stopSign,rs,aggrDefns);
}
}
return new CubeResultSet(rs,view,cubeQueryExecutorHelper);
}",0.9771406431615652
66973,"private void init() throws DataException {
  try {
    if (this.keys == null || this.indexs == null) {
      List keyList=new ArrayList();
      List<Set<Integer>> indexList=new ArrayList<Set<Integer>>();
      this.raIn.seek(offset);
      DataInputStream din=new DataInputStream(this.raIn);
      int size=IOUtil.readInt(this.raIn);
      for (int i=0; i < size; i++) {
        keyList.add(IOUtil.readObject(din));
        indexList.add(new HashSet(IOUtil.readList(din)));
      }
      this.keys=keyList;
      this.indexs=indexList;
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","private void init() throws DataException {
  try {
    if (!initialized) {
synchronized (this) {
        if (!initialized) {
          List keyList=new ArrayList();
          List<Set<Integer>> indexList=new ArrayList<Set<Integer>>();
          this.raIn.seek(offset);
          DataInputStream din=new DataInputStream(this.raIn);
          int size=IOUtil.readInt(this.raIn);
          for (int i=0; i < size; i++) {
            keyList.add(IOUtil.readObject(din));
            indexList.add(new HashSet(IOUtil.readList(din)));
          }
          this.keys=keyList;
          this.indexs=indexList;
          this.initialized=true;
        }
      }
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.8127259580621836
66974,"public Seg(RAInputStream raIn,long offset){
  this.raIn=raIn;
  this.offset=offset;
}","public Seg(RAInputStream raIn,long offset){
  this.raIn=raIn;
  this.offset=offset;
  this.initialized=false;
}",0.8673469387755102
66975,"private String generateUniqueJSKey(Action ac){
  if (ac == null) {
    return ""String_Node_Str"";
  }
  if (ac instanceof MultipleActions) {
    List<Action> subActions=((MultipleActions)ac).getActions();
    if (subActions.size() <= 1) {
      return generateJSContent(subActions.get(0));
    }
    return MultiActionValuesScriptGenerator.getJSKey((MultipleActions)ac) + this.hashCode();
  }
 else   if (ac.getValue() instanceof MultiURLValues) {
    MultiURLValues values=(MultiURLValues)ac.getValue();
    if (values.getURLValues().size() <= 1) {
      return generateJSContent(ac);
    }
    return MultiActionValuesScriptGenerator.getJSKey(values) + this.hashCode();
  }
  return generateJSContent(ac);
}","private String generateUniqueJSKey(Action ac){
  if (ac == null) {
    return ""String_Node_Str"";
  }
  if (ac instanceof MultipleActions) {
    List<Action> subActions=((MultipleActions)ac).getActions();
    if (subActions.size() <= 1) {
      return generateJSContent(subActions.get(0));
    }
    return MultiActionValuesScriptGenerator.getJSKey((MultipleActions)ac,getULocale()) + this.hashCode();
  }
 else   if (ac.getValue() instanceof MultiURLValues) {
    MultiURLValues values=(MultiURLValues)ac.getValue();
    if (values.getURLValues().size() <= 1) {
      return generateJSContent(ac);
    }
    return MultiActionValuesScriptGenerator.getJSKey(values) + this.hashCode();
  }
  return generateJSContent(ac);
}",0.9909027291812456
66976,"private String generateJSContent(Action ac){
  if (ac != null) {
    if (ac instanceof MultipleActions) {
      List<Action> validActions=MultiActionValuesScriptGenerator.getValidActions((MultipleActions)ac);
      if (validActions.size() == 0) {
        return ""String_Node_Str"";
      }
 else       if (validActions.size() == 1) {
        ActionValue av=validActions.get(0).getValue();
        if (av instanceof URLValue) {
          return getJsURLRedirect((URLValue)av);
        }
 else         if (av instanceof ScriptValue) {
          return ((ScriptValue)av).getScript();
        }
      }
 else {
        hasMultipleMenu=true;
        return MultiActionValuesScriptGenerator.getJSContent((MultipleActions)ac);
      }
    }
 else     if (ac.getType().getValue() == ActionType.INVOKE_SCRIPT) {
      ScriptValue sv=(ScriptValue)ac.getValue();
      return sv.getScript();
    }
    if (ac.getType().getValue() == ActionType.URL_REDIRECT) {
      ActionValue value=ac.getValue();
      if (value instanceof URLValue) {
        URLValue uv=(URLValue)ac.getValue();
        return getJsURLRedirect(uv);
      }
 else       if (value instanceof MultiURLValues) {
        List<URLValue> validURLValues=MultiActionValuesScriptGenerator.getValidURLValues((MultiURLValues)value);
        if (validURLValues.size() == 0) {
          return ""String_Node_Str"";
        }
 else         if (validURLValues.size() == 1) {
          return getJsURLRedirect(validURLValues.get(0));
        }
 else {
          hasMultipleMenu=true;
          return MultiActionValuesScriptGenerator.getJSContent(value);
        }
      }
    }
  }
  return ""String_Node_Str"";
}","private String generateJSContent(Action ac){
  if (ac != null) {
    if (ac instanceof MultipleActions) {
      List<Action> validActions=MultiActionValuesScriptGenerator.getValidActions((MultipleActions)ac);
      if (validActions.size() == 0) {
        return ""String_Node_Str"";
      }
 else       if (validActions.size() == 1) {
        ActionValue av=validActions.get(0).getValue();
        if (av instanceof URLValue) {
          return getJsURLRedirect((URLValue)av);
        }
 else         if (av instanceof ScriptValue) {
          return ((ScriptValue)av).getScript();
        }
      }
 else {
        hasMultipleMenu=true;
        return MultiActionValuesScriptGenerator.getJSContent((MultipleActions)ac,getULocale());
      }
    }
 else     if (ac.getType().getValue() == ActionType.INVOKE_SCRIPT) {
      ScriptValue sv=(ScriptValue)ac.getValue();
      return sv.getScript();
    }
    if (ac.getType().getValue() == ActionType.URL_REDIRECT) {
      ActionValue value=ac.getValue();
      if (value instanceof URLValue) {
        URLValue uv=(URLValue)ac.getValue();
        return getJsURLRedirect(uv);
      }
 else       if (value instanceof MultiURLValues) {
        List<URLValue> validURLValues=MultiActionValuesScriptGenerator.getValidURLValues((MultiURLValues)value);
        if (validURLValues.size() == 0) {
          return ""String_Node_Str"";
        }
 else         if (validURLValues.size() == 1) {
          return getJsURLRedirect(validURLValues.get(0));
        }
 else {
          hasMultipleMenu=true;
          return MultiActionValuesScriptGenerator.getJSContent(value);
        }
      }
    }
  }
  return ""String_Node_Str"";
}",0.9960807958999096
66977,"private static StringBuilder getJSContext(MultipleActions actions){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  EMap<String,String> propMap=actions.getPropertiesMap();
  sb.append(getPropertiesJS(propMap).toString());
  int i=0;
  for (  Action subAction : getValidActions(actions)) {
    ActionValue av=subAction.getValue();
    if (av instanceof URLValue) {
      sb=getURLValueJS(sb,i,(URLValue)av,HTMLEncoderAdapter.getInstance());
    }
 else     if (av instanceof ScriptValue) {
      sb=getScriptValueJS(sb,i,(ScriptValue)av);
    }
    i++;
  }
  appendInteractivityVariables(sb);
  return sb;
}","private static StringBuilder getJSContext(MultipleActions actions,ULocale locale){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  EMap<String,String> propMap=actions.getPropertiesMap();
  sb.append(getPropertiesJS(propMap).toString());
  int i=0;
  for (  Action subAction : getValidActions(actions)) {
    ActionValue av=subAction.getValue();
    if (av instanceof URLValue) {
      sb=getURLValueJS(sb,i,(URLValue)av,HTMLEncoderAdapter.getInstance());
    }
 else     if (av instanceof ScriptValue) {
      sb=getScriptValueJS(sb,i,(ScriptValue)av,locale);
    }
    i++;
  }
  appendInteractivityVariables(sb);
  return sb;
}",0.9829192546583853
66978,"/** 
 * Check if the specified action contains redirection items.
 * @param action
 * @return
 * @since 2.5.2
 */
public static boolean containsRedirection(Action action){
  if (action instanceof MultipleActions) {
    return getValidActions((MultipleActions)action).size() > 0;
  }
 else   if (action.getType().getValue() == ActionType.URL_REDIRECT) {
    ActionValue av=action.getValue();
    if (av instanceof URLValue) {
      return isValidURLValue((URLValue)av);
    }
 else     if (av instanceof MultiURLValues) {
      return getValidURLValues((MultiURLValues)av).size() > 0;
    }
  }
  return false;
}","/** 
 * Check if the specified action contains redirection items.
 * @param action
 * @return boolean
 * @since 2.5.2
 */
public static boolean containsRedirection(Action action){
  if (action instanceof MultipleActions) {
    return getValidActions((MultipleActions)action).size() > 0;
  }
 else   if (action.getType().getValue() == ActionType.URL_REDIRECT) {
    ActionValue av=action.getValue();
    if (av instanceof URLValue) {
      return isValidURLValue((URLValue)av);
    }
 else     if (av instanceof MultiURLValues) {
      return getValidURLValues((MultiURLValues)av).size() > 0;
    }
  }
  return false;
}",0.9934959349593496
66979,"public static String getJSContent(MultipleActions actions){
  StringBuilder sb=getJSContext(actions);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public static String getJSContent(MultipleActions actions,ULocale locale){
  StringBuilder sb=getJSContext(actions,locale);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9666666666666668
66980,"/** 
 * @param multiUrlValue
 * @return
 */
public static List<URLValue> getValidURLValues(MultiURLValues multiUrlValue){
  List<URLValue> validURLValues=new ArrayList<URLValue>();
  if (multiUrlValue == null) {
    return validURLValues;
  }
  for (  URLValue uv : multiUrlValue.getURLValues()) {
    if (!isValidURLValue(uv)) {
      continue;
    }
    validURLValues.add(uv);
  }
  return validURLValues;
}","/** 
 * @param multiUrlValue
 * @return list valid url values
 */
public static List<URLValue> getValidURLValues(MultiURLValues multiUrlValue){
  List<URLValue> validURLValues=new ArrayList<URLValue>();
  if (multiUrlValue == null) {
    return validURLValues;
  }
  for (  URLValue uv : multiUrlValue.getURLValues()) {
    if (!isValidURLValue(uv)) {
      continue;
    }
    validURLValues.add(uv);
  }
  return validURLValues;
}",0.973871733966746
66981,"/** 
 * @param multiActions
 * @return
 */
public static List<Action> getValidActions(MultipleActions multiActions){
  List<Action> validActions=new ArrayList<Action>();
  if (multiActions == null) {
    return validActions;
  }
  for (  Action subAction : multiActions.getActions()) {
    ActionValue av=subAction.getValue();
    if (av instanceof URLValue) {
      URLValue uv=(URLValue)av;
      if (!isValidURLValue(uv)) {
        continue;
      }
    }
 else     if (av instanceof ScriptValue) {
      ScriptValue sv=(ScriptValue)av;
      if (!isValidScripts(sv)) {
        continue;
      }
    }
    validActions.add(subAction);
  }
  return validActions;
}","/** 
 * @param multiActions
 * @return list valid actions
 */
public static List<Action> getValidActions(MultipleActions multiActions){
  List<Action> validActions=new ArrayList<Action>();
  if (multiActions == null) {
    return validActions;
  }
  for (  Action subAction : multiActions.getActions()) {
    ActionValue av=subAction.getValue();
    if (av instanceof URLValue) {
      URLValue uv=(URLValue)av;
      if (!isValidURLValue(uv)) {
        continue;
      }
    }
 else     if (av instanceof ScriptValue) {
      ScriptValue sv=(ScriptValue)av;
      if (!isValidScripts(sv)) {
        continue;
      }
    }
    validActions.add(subAction);
  }
  return validActions;
}",0.9859363434492968
66982,"/** 
 * @param sv
 * @return
 */
public static StringBuilder getVisualJS(StringBuilder sb,int index,ActionValue av,String scriptActionType){
  if (index == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  String text=av.getLabel().getCaption().getValue();
  if (av instanceof TooltipValue) {
    text=((TooltipValue)av).getText();
  }
  sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + scriptActionType + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}","/** 
 * @param sv
 * @return visual js
 */
public static StringBuilder getVisualJS(StringBuilder sb,int index,ActionValue av,String scriptActionType){
  if (index == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  String text=av.getLabel().getCaption().getValue();
  if (av instanceof TooltipValue) {
    text=((TooltipValue)av).getText();
  }
  sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
  sb.append(""String_Node_Str"" + scriptActionType + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb;
}",0.9910394265232976
66983,"public static String getJSKey(MultipleActions actions){
  return getJSContext(actions).toString();
}","public static String getJSKey(MultipleActions actions,ULocale locale){
  return getJSContext(actions,locale).toString();
}",0.9009009009009008
66984,"/** 
 * @param sv
 * @return
 */
public static StringBuilder getScriptValueJS(StringBuilder sb,int index,ScriptValue sv){
  if (index == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(SCRIPT_MENU_HELPER.getScriptValueJS(index,sv));
  return sb;
}","/** 
 * @param sv
 * @return sb script value js
 */
public static StringBuilder getScriptValueJS(StringBuilder sb,int index,ScriptValue sv,ULocale locale){
  if (index == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(SCRIPT_MENU_HELPER.getScriptValueJS(index,sv,locale));
  return sb;
}",0.93603744149766
66985,"/** 
 * @param index
 * @param uv
 * @return
 */
public static StringBuilder getURLValueJS(StringBuilder sb,int index,URLValue uv,ICharacterEncoderAdapter transferAdapter){
  if (index == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  String text=transferAdapter.transformToJsConstants(transferAdapter.escape(uv.getLabel().getCaption().getValue()));
  sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
  String url=uv.getBaseUrl();
  if (!(url.startsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str""))) {
    url=""String_Node_Str"" + url + ""String_Node_Str"";
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + url + ""String_Node_Str"");
  String target=uv.getTarget() == null ? ""String_Node_Str"" : uv.getTarget();
  sb.append(""String_Node_Str"" + target + ""String_Node_Str"");
  if (uv.getTooltip() != null && uv.getTooltip().trim().length() > 0) {
    String tooltip=transferAdapter.transformToJsConstants(uv.getTooltip());
    if (tooltip.startsWith(""String_Node_Str"") || tooltip.startsWith(""String_Node_Str""))     sb.append(""String_Node_Str"" + tooltip + ""String_Node_Str"");
 else     sb.append(""String_Node_Str"" + tooltip + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb;
}","/** 
 * @param index
 * @param uv
 * @return sb url value js
 */
public static StringBuilder getURLValueJS(StringBuilder sb,int index,URLValue uv,ICharacterEncoderAdapter transferAdapter){
  if (index == 0) {
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
  }
  String text=transferAdapter.transformToJsConstants(transferAdapter.escape(uv.getLabel().getCaption().getValue()));
  sb.append(""String_Node_Str"" + text + ""String_Node_Str"");
  String url=uv.getBaseUrl();
  if (!(url.startsWith(""String_Node_Str"") || url.endsWith(""String_Node_Str""))) {
    url=""String_Node_Str"" + url + ""String_Node_Str"";
  }
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"" + url + ""String_Node_Str"");
  String target=uv.getTarget() == null ? ""String_Node_Str"" : uv.getTarget();
  sb.append(""String_Node_Str"" + target + ""String_Node_Str"");
  if (uv.getTooltip() != null && uv.getTooltip().trim().length() > 0) {
    String tooltip=transferAdapter.transformToJsConstants(uv.getTooltip());
    if (tooltip.startsWith(""String_Node_Str"") || tooltip.startsWith(""String_Node_Str""))     sb.append(""String_Node_Str"" + tooltip + ""String_Node_Str"");
 else     sb.append(""String_Node_Str"" + tooltip + ""String_Node_Str"");
  }
  sb.append(""String_Node_Str"");
  return sb;
}",0.9937353171495692
66986,"/** 
 * Returns the callback content of multiple actions.
 * @param actions
 * @return
 */
private String getMultiActionsCallbackContent(MultipleActions actions){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  EMap<String,String> propMap=actions.getPropertiesMap();
  sb.append(getPropertiesJS(propMap).toString());
  int i=0;
  for (  Action subAction : MultiActionValuesScriptGenerator.getValidActions(actions)) {
    int typeValue=subAction.getType().getValue();
switch (typeValue) {
case ActionType.URL_REDIRECT:
      sb=MultiActionValuesScriptGenerator.getURLValueJS(sb,i,(URLValue)subAction.getValue(),SVGEncoderAdapter.getInstance());
    break;
case ActionType.INVOKE_SCRIPT:
  sb=MultiActionValuesScriptGenerator.getScriptValueJS(sb,i,(ScriptValue)subAction.getValue());
break;
case ActionType.TOGGLE_VISIBILITY:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
case ActionType.HIGHLIGHT:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
case ActionType.SHOW_TOOLTIP:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
}
i++;
}
MultiActionValuesScriptGenerator.appendInteractivityVariables(sb);
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
return sb.toString();
}","/** 
 * Returns the callback content of multiple actions.
 * @param actions
 * @return
 */
private String getMultiActionsCallbackContent(MultipleActions actions){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  EMap<String,String> propMap=actions.getPropertiesMap();
  sb.append(getPropertiesJS(propMap).toString());
  int i=0;
  for (  Action subAction : MultiActionValuesScriptGenerator.getValidActions(actions)) {
    int typeValue=subAction.getType().getValue();
switch (typeValue) {
case ActionType.URL_REDIRECT:
      sb=MultiActionValuesScriptGenerator.getURLValueJS(sb,i,(URLValue)subAction.getValue(),SVGEncoderAdapter.getInstance());
    break;
case ActionType.INVOKE_SCRIPT:
  sb=MultiActionValuesScriptGenerator.getScriptValueJS(sb,i,(ScriptValue)subAction.getValue(),getULocale());
break;
case ActionType.TOGGLE_VISIBILITY:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
case ActionType.HIGHLIGHT:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
case ActionType.SHOW_TOOLTIP:
sb=MultiActionValuesScriptGenerator.getVisualJS(sb,i,subAction.getValue(),""String_Node_Str"");
break;
}
i++;
}
MultiActionValuesScriptGenerator.appendInteractivityVariables(sb);
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
sb.append(""String_Node_Str"");
return sb.toString();
}",0.996042617960426
66987,"/** 
 * Returns scripts of 'Invoke Script' action.
 * @param index index of action.
 * @param sv script action.
 * @return
 */
public String getScriptValueJS(int index,ScriptValue sv);","/** 
 * Returns scripts of 'Invoke Script' action.
 * @param index index of action.
 * @param sv script action.
 * @param locale
 * @return string script value js
 */
public String getScriptValueJS(int index,ScriptValue sv,ULocale locale);",0.8416075650118203
66988,"/** 
 * Returns instance of this object.
 * @return
 */
public static IScriptMenuHelper instance(){
  return factory;
}","/** 
 * Returns instance of this object.
 * @return IScriptMenuHelper instance
 */
public static IScriptMenuHelper instance(){
  return factory;
}",0.8981132075471698
66989,"/** 
 * Wraps specified script into a function for the calling by using eval function.
 * @param script
 * @return
 */
public static String wrapScriptsAsFunction(String script){
  String f=""String_Node_Str"" + ScriptHandler.BASE_VALUE + ""String_Node_Str""+ ScriptHandler.ORTHOGONAL_VALUE+ ""String_Node_Str""+ ScriptHandler.SERIES_VALUE+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_TEXT+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_VALUE+ ""String_Node_Str""+ IActionRenderer.AXIS_LABEL+ ""String_Node_Str""+ JavascriptEvalUtil.transformToJsConstants(script)+ ""String_Node_Str""+ ScriptHandler.BASE_VALUE+ ""String_Node_Str""+ ScriptHandler.ORTHOGONAL_VALUE+ ""String_Node_Str""+ ScriptHandler.SERIES_VALUE+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_TEXT+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_VALUE+ ""String_Node_Str""+ IActionRenderer.AXIS_LABEL+ ""String_Node_Str"";
  return f;
}","/** 
 * Wraps specified script into a function for the calling by using eval function.
 * @param script
 * @return string script
 */
public static String wrapScriptsAsFunction(String script){
  String f=""String_Node_Str"" + ScriptHandler.BASE_VALUE + ""String_Node_Str""+ ScriptHandler.ORTHOGONAL_VALUE+ ""String_Node_Str""+ ScriptHandler.SERIES_VALUE+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_TEXT+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_VALUE+ ""String_Node_Str""+ IActionRenderer.AXIS_LABEL+ ""String_Node_Str""+ JavascriptEvalUtil.transformToJsConstants(script)+ ""String_Node_Str""+ ScriptHandler.BASE_VALUE+ ""String_Node_Str""+ ScriptHandler.ORTHOGONAL_VALUE+ ""String_Node_Str""+ ScriptHandler.SERIES_VALUE+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_TEXT+ ""String_Node_Str""+ IActionRenderer.LEGEND_ITEM_VALUE+ ""String_Node_Str""+ IActionRenderer.AXIS_LABEL+ ""String_Node_Str"";
  return f;
}",0.9921700223713646
66990,"public String getScriptValueJS(int index,ScriptValue sv){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + sv.getLabel().getCaption().getValue() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String script=sv.getScript();
  sb.append(""String_Node_Str"" + wrapScriptsAsFunction(script) + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","public String getScriptValueJS(int index,ScriptValue sv,ULocale locale){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"" + sv.getLabel().getCaption().getValue() + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  String script=sv.getScript();
  sb.append(""String_Node_Str"" + wrapScriptsAsFunction(script) + ""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9813664596273292
66991,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
          items[i].setIndexColumn(hint.isIndexColumn());
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
        items[i].setIndexColumn(hint.isIndexColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setFormatValue(hint.getValueFormat());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.9376041473801148
66992,"/** 
 * clear unused column hints
 * @throws BirtException
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getModule(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
      }
      if (!found) {
        try {
          handle.removeItem(hint);
        }
 catch (        PropertyValueException e) {
        }
      }
    }
  }
}","/** 
 * clear unused column hints
 * @throws BirtException
 */
private final void clearUnusedColumnHints(DataSetHandle dataSetHandle,IResultMetaData metaData) throws BirtException {
  PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  if (handle != null && handle.getListValue() != null) {
    ArrayList list=handle.getListValue();
    int count=list.size();
    for (int n=count - 1; n >= 0; n--) {
      ColumnHint hint=(ColumnHint)list.get(n);
      String columnName=(String)hint.getProperty(handle.getModule(),ColumnHint.COLUMN_NAME_MEMBER);
      boolean found=false;
      if (!isEmpty(hint,handle.getModule().getModuleHandle())) {
        for (int m=0; m < metaData.getColumnCount() && !found; m++) {
          found=columnName.equals(metaData.getColumnName(m + 1));
        }
        if (!found) {
          try {
            handle.removeItem(hint);
          }
 catch (          PropertyValueException e) {
          }
        }
      }
    }
  }
}",0.9061553985872856
66993,"public void dispose(){
  super.dispose();
  reportXMLEditor.dispose();
  reportXMLEditor=null;
  unhookModelEventManager(getModel());
  SessionHandleAdapter.getInstance().getMediator(getModel()).removeColleague(this);
}","public void dispose(){
  super.dispose();
  ((MultiPageEditorSite)getSite()).dispose();
  reportXMLEditor.dispose();
  reportXMLEditor=null;
  unhookModelEventManager(getModel());
  SessionHandleAdapter.getInstance().getMediator(getModel()).removeColleague(this);
}",0.9049586776859504
66994,"FormPageDef(IConfigurationElement element){
  this.element=element;
  id=loadStringAttribute(element,ATTRIBUTE_ID);
  displayName=loadStringAttribute(element,ATTRIBUTE_DISPLAY_NAME);
  pageClass=loadStringAttribute(element,ATTRIBUTE_CLASS);
  visible=loadBooleanAttribute(element,ATTRIBUTE_VISIBLE);
  relative=loadStringAttribute(element,ATTRIBUTE_RELATIVE);
  position=loadPosition(element,ATTRIBUTE_POSITION);
  this.priority=loadPriority(element,ATTRIBUTE_PRIORITY);
  if (loadStringAttribute(element,ATTRIBUTE_PAGE_ACTION) != null) {
    pageAction=(IAction)loadClass(element,ATTRIBUTE_PAGE_ACTION);
  }
  if (pageAction == null) {
    pageAction=new PageSetAction(displayName,id);
  }
  actionBarContributor=(IEditorActionBarContributor)loadClass(element,ATTRIBUTE_ACTION_BAR_CONTRIBUTOR);
}","FormPageDef(IConfigurationElement element){
  this.element=element;
  id=loadStringAttribute(element,ATTRIBUTE_ID);
  displayName=loadStringAttribute(element,ATTRIBUTE_DISPLAY_NAME);
  pageClass=loadStringAttribute(element,ATTRIBUTE_CLASS);
  visible=loadBooleanAttribute(element,ATTRIBUTE_VISIBLE);
  relative=loadStringAttribute(element,ATTRIBUTE_RELATIVE);
  position=loadPosition(element,ATTRIBUTE_POSITION);
  this.priority=loadPriority(element,ATTRIBUTE_PRIORITY);
  if (loadStringAttribute(element,ATTRIBUTE_PAGE_ACTION) != null) {
    pageAction=(IAction)loadClass(element,ATTRIBUTE_PAGE_ACTION);
  }
  if (pageAction == null) {
    pageAction=new PageSetAction(displayName,id);
  }
}",0.9294828744123572
66995,"public void setActivePage(IFormPage page){
  if (page == null) {
    return;
  }
  if (subBarMap == null) {
    subBarMap=new HashMap();
  }
  if (currentActionBarDef != null) {
    currentActionBarDef.deactivate();
    currentActionBarDef.dispose();
    currentActionBarDef=null;
  }
  IActionBars rootBar=getActionBars();
  if (page != null) {
    if (currentActionBarDef == null) {
      FormEditor editor=page.getEditor();
      if (editor != null) {
        EditorContributor contributor=EditorContributorManager.getInstance().getEditorContributor(editor.getSite().getId());
        if (contributor != null) {
          FormPageDef pageDef=contributor.getPage(page.getId());
          if (pageDef != null && pageDef.actionBarContributor != null) {
            currentActionBarDef=new SubActionBarDef(rootBar,pageDef.actionBarContributor);
            currentActionBarDef.init(getPage());
          }
        }
      }
    }
  }
  rootBar.clearGlobalActionHandlers();
  if (currentActionBarDef != null) {
    currentActionBarDef.setActiveEditor(page);
    Map handlers=currentActionBarDef.getSubActionBar().getGlobalActionHandlers();
    if (handlers != null) {
      for (Iterator iter=handlers.entrySet().iterator(); iter.hasNext(); ) {
        Map.Entry entry=(Map.Entry)iter.next();
        rootBar.setGlobalActionHandler(entry.getKey().toString(),(IAction)entry.getValue());
      }
    }
    currentActionBarDef.activate();
    currentActionBarDef.updateActionBars();
  }
  rootBar.getToolBarManager().update(true);
  rootBar.updateActionBars();
}","public void setActivePage(IFormPage page){
  if (page == null) {
    return;
  }
  if (subBarMap == null) {
    subBarMap=new HashMap();
  }
  if (currentActionBarDef != null) {
    currentActionBarDef.deactivate();
    currentActionBarDef.dispose();
    currentActionBarDef=null;
  }
  IActionBars rootBar=getActionBars();
  if (page != null) {
    if (currentActionBarDef == null) {
      FormEditor editor=page.getEditor();
      if (editor != null) {
        EditorContributor contributor=EditorContributorManager.getInstance().getEditorContributor(editor.getSite().getId());
        if (contributor != null) {
          FormPageDef pageDef=contributor.getPage(page.getId());
          if (pageDef != null) {
            IEditorActionBarContributor actionBarContributor=pageDef.createActionBarContributor();
            if (actionBarContributor != null) {
              currentActionBarDef=new SubActionBarDef(rootBar,actionBarContributor);
              currentActionBarDef.init(getPage());
            }
          }
        }
      }
    }
  }
  rootBar.clearGlobalActionHandlers();
  if (currentActionBarDef != null) {
    currentActionBarDef.setActiveEditor(page);
    Map handlers=currentActionBarDef.getSubActionBar().getGlobalActionHandlers();
    if (handlers != null) {
      for (Iterator iter=handlers.entrySet().iterator(); iter.hasNext(); ) {
        Map.Entry entry=(Map.Entry)iter.next();
        rootBar.setGlobalActionHandler(entry.getKey().toString(),(IAction)entry.getValue());
      }
    }
    currentActionBarDef.activate();
    currentActionBarDef.updateActionBars();
  }
  rootBar.getToolBarManager().update(true);
  rootBar.updateActionBars();
}",0.9241720829464564
66996,"public void propertyChange(PropertyChangeEvent event){
  if (note == null || note.isDisposed()) {
    ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
    return;
  }
  if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
    note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
    buttonTray.layout();
  }
}","public void propertyChange(PropertyChangeEvent event){
  if (note != null && !note.isDisposed() && WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
    note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
    buttonTray.layout();
  }
}",0.8128342245989305
66997,"/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  final ScrolledComposite sc=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  mainPane=new Composite(sc,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  GridData gData=new GridData(GridData.FILL_BOTH);
  gData.grabExcessHorizontalSpace=true;
  gData.grabExcessVerticalSpace=false;
  buttonTray.setLayoutData(gData);
  layout=new GridLayout(2,false);
  layout.marginWidth=5;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  bParameter=new Button(buttonTray,SWT.PUSH);
  bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
  bParameter.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  bParameter.setLayoutData(gd);
  final FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
  note.setSize(SWT.DEFAULT - 10,SWT.DEFAULT);
  gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  note.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (note == null || note.isDisposed()) {
        ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(this);
        return;
      }
      if (WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
        buttonTray.layout();
      }
    }
  }
);
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(false);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        refresh();
      }
    }
);
  }
  sc.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      sc.setMinSize(buttonTray.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      mainPane.layout();
    }
  }
);
  sc.setContent(mainPane);
}","/** 
 * Create controls in the preview editor.
 * @param parent parent composite
 */
public void createPartControl(Composite parent){
  final ScrolledComposite sc=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sc.setExpandHorizontal(true);
  sc.setExpandVertical(true);
  mainPane=new Composite(sc,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  mainPane.setLayoutData(new GridData(GridData.FILL_BOTH));
  final Composite buttonTray=new Composite(mainPane,SWT.NONE);
  GridData gData=new GridData(GridData.FILL_BOTH);
  gData.grabExcessHorizontalSpace=true;
  gData.grabExcessVerticalSpace=false;
  buttonTray.setLayoutData(gData);
  layout=new GridLayout(2,false);
  layout.marginWidth=5;
  layout.horizontalSpacing=0;
  buttonTray.setLayout(layout);
  bParameter=new Button(buttonTray,SWT.PUSH);
  bParameter.setToolTipText(Messages.getString(""String_Node_Str""));
  bParameter.setText(Messages.getString(""String_Node_Str""));
  GridData gd=new GridData();
  bParameter.setLayoutData(gd);
  final FormText note=new FormText(buttonTray,SWT.NONE);
  note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
  note.setSize(SWT.DEFAULT - 10,SWT.DEFAULT);
  gd=new GridData();
  gd.horizontalIndent=20;
  note.setLayoutData(gd);
  note.addHyperlinkListener(new HyperlinkAdapter(){
    public void linkActivated(    HyperlinkEvent e){
      if (PreferencesUtil.createPreferenceDialogOn(UIUtil.getDefaultShell(),""String_Node_Str"",new String[]{""String_Node_Str""},null).open() == Window.OK) {
        boolean ret=MessageDialog.openQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (ret == true) {
          refresh();
        }
      }
    }
  }
);
  final IPropertyChangeListener prefListener=new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (note != null && !note.isDisposed() && WebViewer.PREVIEW_MAXROW.equals(event.getProperty())) {
        note.setText(getDisplayInfoText(ViewerPlugin.getDefault().getPluginPreferences().getString(WebViewer.PREVIEW_MAXROW)),true,true);
        buttonTray.layout();
      }
    }
  }
;
  note.addDisposeListener(new DisposeListener(){
    public void widgetDisposed(    DisposeEvent e){
      ViewerPlugin.getDefault().getPluginPreferences().removePropertyChangeListener(prefListener);
    }
  }
);
  ViewerPlugin.getDefault().getPluginPreferences().addPropertyChangeListener(prefListener);
  progressBar=new ProgressBar(mainPane,SWT.INDETERMINATE);
  gd=new GridData(GridData.END,GridData.CENTER,false,false);
  gd.heightHint=10;
  gd.widthHint=100;
  progressBar.setLayoutData(gd);
  progressBar.setVisible(false);
  createMainBrowser();
  parameterDialog=new InputParameterHtmlDialog(Display.getCurrent().getActiveShell(),InputParameterHtmlDialog.TITLE,getFileUri(),browser);
  if (bParameter != null) {
    bParameter.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        refresh();
      }
    }
);
  }
  sc.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      sc.setMinSize(buttonTray.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      mainPane.layout();
    }
  }
);
  sc.setContent(mainPane);
}",0.91521869382864
66998,"public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  if (cm == null) {
    return null;
  }
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null || !ChartItemUtil.checkChartBindingComplete(cm)) {
    return new Object[]{new byte[]{0}};
  }
  boolean bEmpty=false;
  if (ChartReportItemUtil.isEmpty(resultSet)) {
    if (isAutoHide()) {
      return null;
    }
    bEmpty=true;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0 && (bo.isSetHeight() || bo.isSetWidth())) {
    return null;
  }
  try {
    if (rtc.getSharedScale() == null && ChartReportItemUtil.canScaleShared(modelHandle,cm)) {
      rtc.setSharedScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (modelHandle.getDataBindingReference() != null || modelHandle.getContainer() instanceof MultiViewsHandle || ChartItemUtil.isChartInheritGroups(modelHandle)) {
      isSharingQuery=true;
      isSharingQuery&=!ChartItemUtil.isChartHandle(ChartItemUtil.getReportItemReference(modelHandle));
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    updateChartModel();
    ChartReportStyleProcessor styleProcessor=new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi);
    styleProcessor.applyDefaultHyperlink(this.cm);
    if (!bindData(rowAdapter,evaluator) && isAutoHide()) {
      return null;
    }
    Object renderObject=generateRenderObject(rowAdapter,externalContext,bEmpty,styleProcessor);
    rowAdapter.close();
    return renderObject;
  }
 catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}","public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  if (cm == null) {
    return null;
  }
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null || !ChartItemUtil.checkChartBindingComplete(cm)) {
    return new Object[]{new byte[]{0}};
  }
  boolean bEmpty=false;
  if (ChartReportItemUtil.isEmpty(resultSet)) {
    if (isAutoHide()) {
      return null;
    }
    bEmpty=true;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0 && (bo.isSetHeight() || bo.isSetWidth())) {
    return null;
  }
  try {
    if (rtc.getSharedScale() == null && ChartReportItemUtil.canScaleShared(modelHandle,cm)) {
      rtc.setSharedScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (modelHandle.getDataBindingReference() != null || modelHandle.getContainer() instanceof MultiViewsHandle || ChartItemUtil.isChartInheritGroups(modelHandle)) {
      isSharingQuery=true;
      isSharingQuery&=!ChartItemUtil.isChartHandle(ChartItemUtil.getReportItemReference(modelHandle));
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    ChartReportStyleProcessor styleProcessor=new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi);
    styleProcessor.applyDefaultHyperlink(this.cm);
    updateChartModel();
    if (!bindData(rowAdapter,evaluator) && isAutoHide()) {
      return null;
    }
    Object renderObject=generateRenderObject(rowAdapter,externalContext,bEmpty,styleProcessor);
    rowAdapter.close();
    return renderObject;
  }
 catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}",0.9891304347826086
66999,"public DrilledAggregateResultSet(IAggregationResultSet aggregationRsFromCube,List<IEdgeDrillFilter[]> drillFilters) throws IOException, DataException {
  bufferedStructureArray=new BufferedStructureArray(AggregationResultRow.getCreator(),2000);
  this.dimLevel=aggregationRsFromCube.getAllLevels();
  this.aggregationRsFromCube=aggregationRsFromCube;
  if (aggregationRsFromCube.getAggregationCount() > 0) {
    AggregationDefinition aggr=aggregationRsFromCube.getAggregationDefinition();
    calculator=new DrilledAggregationCalculator(aggr);
  }
  for (int k=0; k < aggregationRsFromCube.length(); k++) {
    aggregationRsFromCube.seek(k);
    IEdgeDrillFilter targetDrill=getTargetDrillOperation(aggregationRsFromCube.getCurrentRow(),drillFilters);
    if (targetDrill == null) {
      bufferedStructureArray.add(aggregationRsFromCube.getCurrentRow());
      continue;
    }
    List<IAggregationResultRow> tempBufferArray=populateResultSet(aggregationRsFromCube,targetDrill);
    List<IEdgeDrillFilter[]> drills=this.getRemainingDrillOperation(targetDrill,drillFilters);
    if (!drills.isEmpty()) {
      tempBufferArray=populateNextResultSet(tempBufferArray,drills);
    }
    if (this.calculator == null) {
      removeDuplictedRow(tempBufferArray);
    }
 else     recalculateAggregation(tempBufferArray);
    sortAggregationRow(tempBufferArray);
    Iterator<IAggregationResultRow> iter=tempBufferArray.iterator();
    while (iter.hasNext())     bufferedStructureArray.add(iter.next());
    k=aggregationRsFromCube.getPosition();
  }
  this.resultObject=(IAggregationResultRow)bufferedStructureArray.get(0);
}","public DrilledAggregateResultSet(IAggregationResultSet aggregationRsFromCube,List<IEdgeDrillFilter[]> drillFilters) throws IOException, DataException {
  bufferedStructureArray=new BufferedStructureArray(AggregationResultRow.getCreator(),2000);
  this.dimLevel=aggregationRsFromCube.getAllLevels();
  this.aggregationRsFromCube=aggregationRsFromCube;
  if (aggregationRsFromCube.getAggregationCount() > 0) {
    AggregationDefinition aggr=aggregationRsFromCube.getAggregationDefinition();
    calculator=new DrilledAggregationCalculator(aggr);
  }
  drillFilterTargetLevels=new HashMap<IEdgeDrillFilter,List<DimLevel>>();
  for (int i=0; i < drillFilters.size(); i++) {
    IEdgeDrillFilter[] filters=drillFilters.get(i);
    for (int t=0; t < filters.length; t++) {
      drillFilterTargetLevels.put(filters[t],CubeQueryDefinitionUtil.getDrilledTargetLevels(filters[t]));
    }
  }
  for (int k=0; k < aggregationRsFromCube.length(); k++) {
    aggregationRsFromCube.seek(k);
    IEdgeDrillFilter targetDrill=getTargetDrillOperation(aggregationRsFromCube.getCurrentRow(),drillFilters);
    if (targetDrill == null) {
      bufferedStructureArray.add(aggregationRsFromCube.getCurrentRow());
      continue;
    }
    List<IAggregationResultRow> tempBufferArray=populateResultSet(aggregationRsFromCube,targetDrill);
    List<IEdgeDrillFilter[]> drills=this.getRemainingDrillOperation(targetDrill,drillFilters);
    if (!drills.isEmpty()) {
      tempBufferArray=populateNextResultSet(tempBufferArray,drills);
    }
    if (this.calculator == null) {
      removeDuplictedRow(tempBufferArray);
    }
 else     recalculateAggregation(tempBufferArray);
    sortAggregationRow(tempBufferArray);
    Iterator<IAggregationResultRow> iter=tempBufferArray.iterator();
    while (iter.hasNext())     bufferedStructureArray.add(iter.next());
    k=aggregationRsFromCube.getPosition();
  }
  this.resultObject=(IAggregationResultRow)bufferedStructureArray.get(0);
}",0.906188742649118
67000,"private boolean isDrilledElement(IAggregationResultRow row,IEdgeDrillFilter drill){
  List comparableLevels=CubeQueryDefinitionUtil.getDrilledTargetLevels(drill);
  boolean matched=true;
  Object[] tuple=drill.getTuple().toArray();
  for (int j=0; j < tuple.length; j++) {
    if (tuple[j] == null)     continue;
    int levelIndex=-1;
    for (int t=0; t < this.dimLevel.length; t++) {
      if (this.dimLevel[t].equals(comparableLevels.get(j))) {
        levelIndex=t;
        break;
      }
    }
    if (levelIndex == -1)     return false;
    if (!containMember(row.getLevelMembers()[levelIndex].getKeyValues(),(Object[])tuple[j])) {
      matched=false;
      break;
    }
  }
  return matched;
}","private boolean isDrilledElement(IAggregationResultRow row,IEdgeDrillFilter drill){
  List comparableLevels=drillFilterTargetLevels.get(drill);
  boolean matched=true;
  Object[] tuple=drill.getTuple().toArray();
  for (int j=0; j < tuple.length; j++) {
    if (tuple[j] == null)     continue;
    int levelIndex=-1;
    for (int t=0; t < this.dimLevel.length; t++) {
      if (this.dimLevel[t].equals(comparableLevels.get(j))) {
        levelIndex=t;
        break;
      }
    }
    if (levelIndex == -1)     return false;
    if (!containMember(row.getLevelMembers()[levelIndex].getKeyValues(),(Object[])tuple[j])) {
      matched=false;
      break;
    }
  }
  return matched;
}",0.9646209386281588
