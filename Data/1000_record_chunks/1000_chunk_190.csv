record_number,buggy_code,fixed_code,code_similarity
189001,"protected void promptForLane(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    StudyType st : metadata.getStudyTypes()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",4);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    LibraryStrategy st : metadata.getLibraryStrategies()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    LibrarySelection st : metadata.getLibrarySelections()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    LibrarySource st : metadata.getLibrarySource()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptInteger(""String_Node_Str"",1);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptBoolean(""String_Node_Str"",false);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForLane(necessaryFields);
  }
}","protected void promptForLane(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    StudyType st : metadata.getStudyTypes()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",4);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    LibraryStrategy st : metadata.getLibraryStrategies()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    LibrarySelection st : metadata.getLibrarySelections()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    LibrarySource st : metadata.getLibrarySource()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",null);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptInteger(""String_Node_Str"",1);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptBoolean(""String_Node_Str"",false);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForLane(necessaryFields);
  }
}",0.9610486891385768
189002,"protected void promptForSample(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  int checkMe=0;
  if (!fields.containsKey(""String_Node_Str"")) {
    checkMe+=promptInteger(""String_Node_Str"",0);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    checkMe+=promptInteger(""String_Node_Str"",0);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    Organism o : metadata.getOrganisms()) {
      Log.stdout(o.toString());
    }
    promptInteger(""String_Node_Str"",31);
  }
  promptForFields(necessaryFields);
  Log.error(""String_Node_Str"" + checkMe);
  if (!fieldsConfirmed(necessaryFields) || checkMe <= 0) {
    if (checkMe <= 0) {
      Log.stdout(""String_Node_Str"");
    }
    promptForSample(necessaryFields);
  }
}","protected void promptForSample(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  int checkMe=0;
  if (!fields.containsKey(""String_Node_Str"")) {
    promptInteger(""String_Node_Str"",0);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptInteger(""String_Node_Str"",0);
  }
  checkMe=Integer.parseInt(fields.get(""String_Node_Str"")) + Integer.parseInt(fields.get(""String_Node_Str""));
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    Organism o : metadata.getOrganisms()) {
      Log.stdout(o.toString());
    }
    promptInteger(""String_Node_Str"",31);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields) || checkMe <= 0) {
    if (checkMe <= 0) {
      Log.stdout(""String_Node_Str"");
    }
    promptForSample(necessaryFields);
  }
}",0.5574823378291587
189003,"protected void promptForStudy(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    StudyType st : metadata.getStudyTypes()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",4);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForStudy(necessaryFields);
  }
}","protected void promptForStudy(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    StudyType st : metadata.getStudyTypes()) {
      Log.stdout(st.toString());
    }
    promptInteger(""String_Node_Str"",4);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForStudy(necessaryFields);
  }
}",0.9683698296836984
189004,"protected boolean fieldsConfirmed(String[] necessaryFields){
  for (  String s : necessaryFields) {
    Log.stdout(s + ""String_Node_Str"" + fields.get(s));
  }
  String confirm=ConsoleAdapter.getInstance().readLine(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + confirm);
  if (confirm.trim().toLowerCase().equals(""String_Node_Str"") || confirm.trim().toLowerCase().equals(""String_Node_Str"")) {
    return true;
  }
 else {
    fields.clear();
    parseFields();
    return false;
  }
}","protected boolean fieldsConfirmed(String[] necessaryFields){
  for (  String s : necessaryFields) {
    Log.stdout(s + ""String_Node_Str"" + fields.get(s));
  }
  String confirm=ConsoleAdapter.getInstance().readLine(""String_Node_Str"");
  if (confirm.trim().toLowerCase().equals(""String_Node_Str"") || confirm.trim().toLowerCase().equals(""String_Node_Str"") || confirm.trim().isEmpty()) {
    return true;
  }
 else {
    fields.clear();
    parseFields();
    return false;
  }
}",0.918807810894142
189005,"protected void promptForSequencerRun(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    for (    Platform p : metadata.getPlatforms()) {
      Log.stdout(p.toString());
    }
    promptInteger(""String_Node_Str"",20);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptBoolean(""String_Node_Str"",true);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptBoolean(""String_Node_Str"",false);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForSequencerRun(necessaryFields);
  }
}","protected void promptForSequencerRun(String[] necessaryFields){
  Log.stdout(""String_Node_Str"");
  if (!fields.containsKey(""String_Node_Str"")) {
    System.out.println();
    for (    Platform p : metadata.getPlatforms()) {
      Log.stdout(p.toString());
    }
    promptInteger(""String_Node_Str"",20);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptBoolean(""String_Node_Str"",true);
  }
  if (!fields.containsKey(""String_Node_Str"")) {
    promptBoolean(""String_Node_Str"",false);
  }
  promptForFields(necessaryFields);
  if (!fieldsConfirmed(necessaryFields)) {
    promptForSequencerRun(necessaryFields);
  }
}",0.9787928221859706
189006,"protected Integer promptInteger(String string,Integer deflt){
  Integer title=null;
  String prompt=string + (deflt == null ? ""String_Node_Str"" : ""String_Node_Str"" + deflt + ""String_Node_Str"");
  int counter=0;
  while (title == null && counter++ < 10) {
    String line=ConsoleAdapter.getInstance().readLine(prompt);
    if (line.trim().isEmpty()) {
      title=deflt;
    }
 else {
      try {
        title=Integer.parseInt(line);
      }
 catch (      NumberFormatException e) {
        Log.stdout(string + ""String_Node_Str"");
      }
    }
  }
  fields.put(string,title.toString());
  return title;
}","protected Integer promptInteger(String string,Integer deflt){
  Integer title=null;
  String prompt=string + (deflt == null ? ""String_Node_Str"" : ""String_Node_Str"" + deflt + ""String_Node_Str"");
  int counter=0;
  while (title == null && counter++ < 10) {
    System.out.println();
    String line=ConsoleAdapter.getInstance().readLine(prompt);
    if (line.trim().isEmpty()) {
      title=deflt;
    }
 else {
      try {
        title=Integer.parseInt(line);
      }
 catch (      NumberFormatException e) {
        Log.stdout(string + ""String_Node_Str"");
      }
    }
  }
  fields.put(string,title.toString());
  return title;
}",0.9789644012944984
189007,"private Element getJavaElement(){
  Element javaE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  Element jobTracker=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  jobTracker.setText(""String_Node_Str"");
  javaE.addContent(jobTracker);
  Element nameNode=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  nameNode.setText(""String_Node_Str"");
  javaE.addContent(nameNode);
  Element config=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  Element p0=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  config.addContent(p0);
  Element name0=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  name0.setText(""String_Node_Str"");
  p0.addContent(name0);
  Element value0=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  value0.setText(""String_Node_Str"");
  p0.addContent(value0);
  javaE.addContent(config);
  Element mainClass=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  mainClass.setText(""String_Node_Str"");
  javaE.addContent(mainClass);
  this.buildMetadataString(javaE);
  Element arg1=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  arg1.setText(""String_Node_Str"");
  javaE.addContent(arg1);
  Element argModule=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  argModule.setText(""String_Node_Str"");
  javaE.addContent(argModule);
  Element dash=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  dash.setText(""String_Node_Str"");
  javaE.addContent(dash);
  String inputArg=""String_Node_Str"";
  String inputValue=this.file.getSourcePath();
  String output=this.outputDir;
  if (this.file.isOutput()) {
    inputArg=""String_Node_Str"";
    inputValue=this.jobObj.getAlgo() + ""String_Node_Str"" + this.file.getType()+ ""String_Node_Str""+ this.getOozieWorkingDir()+ ""String_Node_Str""+ this.file.getSourcePath();
    output=this.metadataOutputPrefix + ""String_Node_Str"" + this.outputDir;
  }
  Element inputTE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  inputTE.setText(inputArg);
  javaE.addContent(inputTE);
  Element inputVE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  inputVE.setText(inputValue);
  javaE.addContent(inputVE);
  Element outputArg=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  outputArg.setText(""String_Node_Str"");
  javaE.addContent(outputArg);
  Element outputValue=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  outputValue.setText(output);
  javaE.addContent(outputValue);
  if (this.file.isForceCopy()) {
    Element forceE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
    forceE.setText(""String_Node_Str"");
    javaE.addContent(forceE);
  }
  return javaE;
}","protected Element getJavaElement(){
  Element javaE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  Element jobTracker=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  jobTracker.setText(""String_Node_Str"");
  javaE.addContent(jobTracker);
  Element nameNode=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  nameNode.setText(""String_Node_Str"");
  javaE.addContent(nameNode);
  Element config=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  Element p0=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  config.addContent(p0);
  Element name0=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  name0.setText(""String_Node_Str"");
  p0.addContent(name0);
  Element value0=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  value0.setText(""String_Node_Str"");
  p0.addContent(value0);
  javaE.addContent(config);
  Element mainClass=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  mainClass.setText(""String_Node_Str"");
  javaE.addContent(mainClass);
  this.buildMetadataString(javaE);
  Element arg1=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  arg1.setText(""String_Node_Str"");
  javaE.addContent(arg1);
  Element argModule=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  argModule.setText(""String_Node_Str"");
  javaE.addContent(argModule);
  Element dash=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  dash.setText(""String_Node_Str"");
  javaE.addContent(dash);
  String inputArg=""String_Node_Str"";
  String inputValue=this.file.getSourcePath();
  String output=this.outputDir;
  if (this.file.isOutput()) {
    inputArg=""String_Node_Str"";
    inputValue=this.jobObj.getAlgo() + ""String_Node_Str"" + this.file.getType()+ ""String_Node_Str""+ this.getOozieWorkingDir()+ ""String_Node_Str""+ this.file.getSourcePath();
    output=this.metadataOutputPrefix + ""String_Node_Str"" + this.outputDir;
  }
  Element inputTE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  inputTE.setText(inputArg);
  javaE.addContent(inputTE);
  Element inputVE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  inputVE.setText(inputValue);
  javaE.addContent(inputVE);
  Element outputArg=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  outputArg.setText(""String_Node_Str"");
  javaE.addContent(outputArg);
  Element outputValue=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
  outputValue.setText(output);
  javaE.addContent(outputValue);
  if (this.file.isForceCopy()) {
    Element forceE=new Element(""String_Node_Str"",WorkflowApp.NAMESPACE);
    forceE.setText(""String_Node_Str"");
    javaE.addContent(forceE);
  }
  return javaE;
}",0.997697620874904
189008,"@Override public ReturnValue do_run(){
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  AbstractWorkflowEngine engine=this.getWorkflowEngine(dataModel);
  if (options.has(""String_Node_Str"")) {
    Log.stdout(""String_Node_Str"" + engine.getStatus((String)options.valueOf(""String_Node_Str"")));
    return new ReturnValue(ReturnValue.SUCCESS);
  }
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!dataModel.isMetadataWriteBack()) {
    return retPegasus;
  }
  String wra=dataModel.getWorkflow_run_accession();
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunId=Integer.parseInt(wra);
  int workflowrunaccession=this.metadata.get_workflow_run_accession(workflowrunId);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  List<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      for (      String t : tokens) {
        parentsLinkedToWR.add(t);
      }
    }
  }
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}","@Override public ReturnValue do_run(){
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  AbstractWorkflowEngine engine=this.getWorkflowEngine(dataModel);
  if (options.has(""String_Node_Str"")) {
    Log.stdout(""String_Node_Str"" + engine.getStatus((String)options.valueOf(""String_Node_Str"")));
    return new ReturnValue(ReturnValue.SUCCESS);
  }
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!dataModel.isMetadataWriteBack()) {
    return retPegasus;
  }
  String wra=dataModel.getWorkflow_run_accession();
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunId=Integer.parseInt(wra);
  int workflowrunaccession=this.metadata.get_workflow_run_accession(workflowrunId);
  String statusCmd=engine.getStatus();
  List<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      for (      String t : tokens) {
        parentsLinkedToWR.add(t);
      }
    }
  }
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}",0.931945889698231
189009,"/** 
 * find the workflow by input id, and return the status of the workflow
 * @param id
 * @return the workflow status
 */
public abstract String getStatus(String id);",public abstract String getStatus();,0.3431372549019608
189010,"@Override public String getStatus(String id){
  OozieClient oc=this.getOozieClient();
  try {
    WorkflowJob wfJob=oc.getJobInfo(id);
    if (wfJob == null)     return null;
    return wfJob.getStatus().toString();
  }
 catch (  OozieClientException e) {
    e.printStackTrace();
    return null;
  }
}","@Override public String getStatus(){
  return this.getStatus(this.getId());
}",0.331578947368421
189011,"@Override public String getStdOut(String id){
  return null;
}","@Override public String getStdOut(String id){
  if (this.statusRet == null)   return null;
  return this.statusRet.getStdout();
}",0.6492146596858639
189012,"@Override public ReturnValue launchWorkflow(AbstractWorkflowDataModel objectModel){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  File dax=this.parseDataModel(objectModel);
  ret=this.runWorkflow(objectModel,dax);
  return ret;
}","@Override public ReturnValue launchWorkflow(AbstractWorkflowDataModel objectModel){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  File dax=this.parseDataModel(objectModel);
  ret=this.runWorkflow(objectModel,dax);
  this.statusRet=ret;
  return ret;
}",0.9563492063492064
189013,"@Override public String getStatus(String id){
  return null;
}","@Override public String getStatus(){
  return this.getStatus(""String_Node_Str"");
}",0.6944444444444444
189014,"@Override public String getStdErr(String id){
  return null;
}","@Override public String getStdErr(String id){
  if (this.statusRet == null)   return null;
  return this.statusRet.getStderr();
}",0.6492146596858639
189015,"@Override public ReturnValue init(){
  if (!(options.has(""String_Node_Str"") ^ options.has(""String_Node_Str"") ^ options.has(""String_Node_Str"")^ options.has(""String_Node_Str""))) {
    Log.stdout(this.get_syntax());
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  try {
    ResourceBundle rb=PropertyResourceBundle.getBundle(""String_Node_Str"");
    String parents=rb.getString(""String_Node_Str"");
    String checks=rb.getString(""String_Node_Str"");
    String wfa=rb.getString(""String_Node_Str"");
    if (wfa != null && !wfa.trim().isEmpty()) {
      this.setWorkflowAccession(wfa);
    }
    if (parents != null && !parents.trim().isEmpty()) {
      List<String> pas=Arrays.asList(parents.split(""String_Node_Str""));
      this.setParentWorkflowAccessions(new TreeSet(pas));
    }
    if (checks != null && !checks.trim().isEmpty()) {
      List<String> cwa=Arrays.asList(checks.split(""String_Node_Str""));
      this.setWorkflowAccessionsToCheck(new TreeSet(cwa));
    }
  }
 catch (  MissingResourceException e) {
    Log.debug(""String_Node_Str"",e);
  }
  if (options.has(""String_Node_Str"")) {
    String headerString=(String)options.valueOf(""String_Node_Str"");
    try {
      header=Header.valueOf(headerString);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      for (      Header h : Header.values()) {
        sb.append(""String_Node_Str"").append(h.name()).append(""String_Node_Str"");
      }
      Log.stdout(sb.toString());
      ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    }
  }
  if (options.has(""String_Node_Str"")) {
    workflowAccession=(String)options.valueOf(""String_Node_Str"");
  }
 else   if (workflowAccession == null) {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  boolean hasFilter=false;
  if (options.has(""String_Node_Str"")) {
    String pas=(String)options.valueOf(""String_Node_Str"");
    for (    String p : pas.split(""String_Node_Str"")) {
      parentWorkflowAccessions.add(p.trim());
      hasFilter=true;
    }
  }
  if (options.has(""String_Node_Str"")) {
    String mt=(String)options.valueOf(""String_Node_Str"");
    metaTypes=Arrays.asList(mt.split(""String_Node_Str""));
    hasFilter=true;
  }
  if (!hasFilter && parentWorkflowAccessions.isEmpty() && metaTypes == null) {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  if (options.has(""String_Node_Str"")) {
    String pas=(String)options.valueOf(""String_Node_Str"");
    Log.debug(""String_Node_Str"" + pas);
    if (pas.contains(""String_Node_Str"")) {
      for (      String p : pas.split(""String_Node_Str"")) {
        workflowAccessionsToCheck.add(p.trim());
      }
    }
 else {
      workflowAccessionsToCheck.add(pas.trim());
    }
    workflowAccessionsToCheck.add(workflowAccession);
  }
  if (forceRunAll == null) {
    forceRunAll=options.has(""String_Node_Str"");
  }
  if (test == null) {
    test=options.has(""String_Node_Str"");
  }
  if (test) {
    StringWriter writer=new StringWriter();
    try {
      FindAllTheFiles.printHeader(writer,true);
      Log.stdout(writer.toString());
    }
 catch (    IOException ex) {
      Log.error(ex);
    }
  }
  if (skipStuff == null) {
    skipStuff=!options.has(""String_Node_Str"");
  }
  if (metadataWriteback == null) {
    metadataWriteback=!(options.has(""String_Node_Str"") || options.has(""String_Node_Str""));
  }
  if (runNow == null) {
    if (options.has(""String_Node_Str"")) {
      runNow=false;
    }
 else {
      runNow=true;
    }
  }
  if (options.has(""String_Node_Str"")) {
    try {
      launchMax=Integer.parseInt(options.valueOf(""String_Node_Str"").toString());
    }
 catch (    NumberFormatException e) {
      Log.error(""String_Node_Str"" + options.valueOf(""String_Node_Str"").toString());
    }
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  if (metadata instanceof MetadataDB) {
    metaws=new MetadataWS();
    ret=metaws.init(config.get(""String_Node_Str""),config.get(""String_Node_Str""),config.get(""String_Node_Str""));
  }
 else   if (metadata instanceof MetadataWS) {
    metaws=(MetadataWS)metadata;
  }
 else {
    ret.setExitStatus(ReturnValue.DBCOULDNOTINITIALIZE);
  }
  return ret;
}","@Override public ReturnValue init(){
  if (!(options.has(""String_Node_Str"") ^ options.has(""String_Node_Str"") ^ options.has(""String_Node_Str"")^ options.has(""String_Node_Str""))) {
    Log.stdout(this.get_syntax());
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  try {
    ResourceBundle rb=PropertyResourceBundle.getBundle(""String_Node_Str"");
    String parents=rb.getString(""String_Node_Str"");
    String checks=rb.getString(""String_Node_Str"");
    String wfa=rb.getString(""String_Node_Str"");
    if (wfa != null && !wfa.trim().isEmpty()) {
      this.setWorkflowAccession(wfa);
    }
    if (parents != null && !parents.trim().isEmpty()) {
      List<String> pas=Arrays.asList(parents.split(""String_Node_Str""));
      this.setParentWorkflowAccessions(new TreeSet(pas));
    }
    if (checks != null && !checks.trim().isEmpty()) {
      List<String> cwa=Arrays.asList(checks.split(""String_Node_Str""));
      this.setWorkflowAccessionsToCheck(new TreeSet(cwa));
    }
  }
 catch (  MissingResourceException e) {
    Log.debug(""String_Node_Str"",e);
  }
  if (options.has(""String_Node_Str"")) {
    String headerString=(String)options.valueOf(""String_Node_Str"");
    try {
      header=Header.valueOf(headerString);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      for (      Header h : Header.values()) {
        sb.append(""String_Node_Str"").append(h.name()).append(""String_Node_Str"");
      }
      Log.stdout(sb.toString());
      ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    }
  }
  if (options.has(""String_Node_Str"")) {
    workflowAccession=(String)options.valueOf(""String_Node_Str"");
  }
 else   if (workflowAccession == null) {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  boolean hasFilter=false;
  if (options.has(""String_Node_Str"")) {
    String pas=(String)options.valueOf(""String_Node_Str"");
    for (    String p : pas.split(""String_Node_Str"")) {
      parentWorkflowAccessions.add(p.trim());
      hasFilter=true;
    }
  }
  if (options.has(""String_Node_Str"")) {
    String mt=(String)options.valueOf(""String_Node_Str"");
    metaTypes=Arrays.asList(mt.split(""String_Node_Str""));
    hasFilter=true;
  }
  if (!hasFilter && parentWorkflowAccessions.isEmpty() && metaTypes == null) {
    Log.error(""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  if (options.has(""String_Node_Str"")) {
    String pas=(String)options.valueOf(""String_Node_Str"");
    Log.debug(""String_Node_Str"" + pas);
    if (pas.contains(""String_Node_Str"")) {
      for (      String p : pas.split(""String_Node_Str"")) {
        workflowAccessionsToCheck.add(p.trim());
      }
    }
 else {
      workflowAccessionsToCheck.add(pas.trim());
    }
    workflowAccessionsToCheck.add(workflowAccession);
  }
  if (forceRunAll == null) {
    forceRunAll=options.has(""String_Node_Str"");
  }
  if (test == null) {
    test=options.has(""String_Node_Str"");
  }
  if (test) {
    StringWriter writer=new StringWriter();
    try {
      FindAllTheFiles.printHeader(writer,true);
      Log.stdout(writer.toString());
    }
 catch (    IOException ex) {
      Log.error(ex);
    }
  }
  if (skipStuff == null) {
    skipStuff=!options.has(""String_Node_Str"");
  }
  if (metadataWriteback == null) {
    metadataWriteback=!(options.has(""String_Node_Str"") || options.has(""String_Node_Str""));
  }
  if (runNow == null) {
    if (options.has(""String_Node_Str"")) {
      runNow=false;
    }
 else {
      runNow=true;
    }
  }
  if (options.has(""String_Node_Str"")) {
    try {
      launchMax=Integer.parseInt(options.valueOf(""String_Node_Str"").toString());
    }
 catch (    NumberFormatException e) {
      Log.error(""String_Node_Str"" + options.valueOf(""String_Node_Str"").toString());
      ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
    }
  }
  if (metadata instanceof MetadataDB) {
    metaws=new MetadataWS();
    ret=metaws.init(config.get(""String_Node_Str""),config.get(""String_Node_Str""),config.get(""String_Node_Str""));
  }
 else   if (metadata instanceof MetadataWS) {
    metaws=(MetadataWS)metadata;
  }
 else {
    ret.setExitStatus(ReturnValue.DBCOULDNOTINITIALIZE);
  }
  return ret;
}",0.9988399071925754
189016,"/** 
 * <p>testIfNull.</p>
 * @param o a {@link java.lang.Object} object.
 * @return a {@link java.lang.Object} object.
 */
protected Object testIfNull(Object o){
  return o;
}","/** 
 * <p>testIfNull.</p>
 * @param o a {@link java.lang.Object} object.
 * @return a {@link java.lang.Object} object.
 */
protected Object testIfNull(Object o){
  if (o == null) {
    throw new ResourceException(Status.CLIENT_ERROR_NOT_FOUND,""String_Node_Str"");
  }
  return o;
}",0.7308533916849015
189017,"/** 
 * load metadata.xml, if FTL, parse the FTL to XML, and translate it to Java based Object if Java, load the class. 
 * @return
 */
public AbstractWorkflowDataModel getWorkflowDataModel(){
  String bundlePath=""String_Node_Str"";
  if (options.has(""String_Node_Str"")) {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
 else {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
  File bundle=new File(bundlePath);
  Log.info(""String_Node_Str"" + bundlePath);
  if (bundle == null || !bundle.exists()) {
    Log.error(""String_Node_Str"");
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") Iterator<File> it=FileUtils.iterateFiles(bundle,new String[]{""String_Node_Str""},true);
  if (!it.hasNext())   return null;
  File metadataFile=null;
  while (it.hasNext()) {
    File file=it.next();
    if (file.getName().equals(""String_Node_Str"")) {
      metadataFile=file;
      break;
    }
  }
  if (metadataFile == null)   return null;
  Map<String,String> metaInfo=this.parseMetadataInfo(metadataFile,bundlePath);
  boolean workflow_java=true;
  if (metaInfo.get(""String_Node_Str"") != null && !metaInfo.get(""String_Node_Str"").toString().isEmpty())   workflow_java=false;
  AbstractWorkflowDataModel ret=null;
  Class<?> clazz=null;
  if (workflow_java) {
    String clazzPath=metaInfo.get(""String_Node_Str"");
    Log.info(""String_Node_Str"" + clazzPath);
    WorkflowClassFinder finder=new WorkflowClassFinder();
    clazz=finder.findFirstWorkflowClass(clazzPath);
    if (null != clazz) {
      Log.debug(""String_Node_Str"");
      try {
        Object object=clazz.newInstance();
        ret=(AbstractWorkflowDataModel)object;
      }
 catch (      InstantiationException ex) {
        Log.error(ex);
      }
catch (      IllegalAccessException ex) {
        Log.error(ex);
      }
catch (      SecurityException ex) {
        Log.error(ex);
      }
catch (      IllegalArgumentException ex) {
        Log.error(ex);
      }
    }
  }
 else {
    ret=new XmlWorkflowDataModel();
  }
  ret.setTags(metaInfo);
  ret.setName(metaInfo.get(""String_Node_Str""));
  ret.setVersion(metaInfo.get(""String_Node_Str""));
  ret.setWorkflowBundleDir(bundlePath);
  ret.getEnv().setCompute(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setNetwork(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setMemory(metaInfo.get(""String_Node_Str""));
  Map<String,String> configs=this.loadIniConfigs();
  configs.put(""String_Node_Str"",bundlePath);
  configs.put(""String_Node_Str"",ret.getName());
  String basedir=bundlePath + File.separator + ""String_Node_Str""+ ret.getName()+ File.separator+ ret.getVersion();
  configs.put(""String_Node_Str"",basedir);
  this.mergeCmdOptions(ret);
  Date date=new Date();
  ret.setDate(date.toString());
  Random rand=new Random(System.currentTimeMillis());
  int randInt=rand.nextInt(100000000);
  ret.setRandom(""String_Node_Str"" + randInt);
  ret.getEnv().setPegasusConfigDir(config.get(""String_Node_Str""));
  ret.getEnv().setDaxDir(config.get(""String_Node_Str""));
  ret.getEnv().setSwCluster(config.get(""String_Node_Str""));
  if (options.has((""String_Node_Str""))) {
    int workflowAccession=Integer.parseInt((String)options.valueOf(""String_Node_Str""));
    int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession);
    configs.put(""String_Node_Str"",""String_Node_Str"" + workflowrunaccession);
    ret.setWorkflow_run_accession(""String_Node_Str"" + workflowrunaccession);
  }
  ret.setConfigs(configs);
  if (workflow_java) {
    try {
      Method m=null;
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
 else {
    WorkflowXmlParser xmlParser=new WorkflowXmlParser();
    xmlParser.parseXml(ret,metaInfo.get(""String_Node_Str""));
  }
  ret.setWait(this.options.has(""String_Node_Str""));
  return ret;
}","/** 
 * load metadata.xml, if FTL, parse the FTL to XML, and translate it to Java based Object if Java, load the class. 
 * @return
 */
public AbstractWorkflowDataModel getWorkflowDataModel(){
  String bundlePath=""String_Node_Str"";
  if (options.has(""String_Node_Str"")) {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
 else {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
  File bundle=new File(bundlePath);
  Log.info(""String_Node_Str"" + bundlePath);
  if (bundle == null || !bundle.exists()) {
    Log.error(""String_Node_Str"");
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") Iterator<File> it=FileUtils.iterateFiles(bundle,new String[]{""String_Node_Str""},true);
  if (!it.hasNext())   return null;
  File metadataFile=null;
  while (it.hasNext()) {
    File file=it.next();
    if (file.getName().equals(""String_Node_Str"")) {
      metadataFile=file;
      break;
    }
  }
  if (metadataFile == null)   return null;
  Map<String,String> metaInfo=this.parseMetadataInfo(metadataFile,bundlePath);
  boolean workflow_java=true;
  if (metaInfo.get(""String_Node_Str"") != null && !metaInfo.get(""String_Node_Str"").toString().isEmpty())   workflow_java=false;
  AbstractWorkflowDataModel ret=null;
  Class<?> clazz=null;
  if (workflow_java) {
    String clazzPath=metaInfo.get(""String_Node_Str"");
    Log.info(""String_Node_Str"" + clazzPath);
    WorkflowClassFinder finder=new WorkflowClassFinder();
    clazz=finder.findFirstWorkflowClass(clazzPath);
    if (null != clazz) {
      Log.debug(""String_Node_Str"");
      try {
        Object object=clazz.newInstance();
        ret=(AbstractWorkflowDataModel)object;
      }
 catch (      InstantiationException ex) {
        Log.error(ex);
      }
catch (      IllegalAccessException ex) {
        Log.error(ex);
      }
catch (      SecurityException ex) {
        Log.error(ex);
      }
catch (      IllegalArgumentException ex) {
        Log.error(ex);
      }
    }
  }
 else {
    ret=new XmlWorkflowDataModel();
  }
  ret.setTags(metaInfo);
  ret.setName(metaInfo.get(""String_Node_Str""));
  ret.setVersion(metaInfo.get(""String_Node_Str""));
  ret.setWorkflowBundleDir(bundlePath);
  ret.getEnv().setCompute(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setNetwork(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setMemory(metaInfo.get(""String_Node_Str""));
  Map<String,String> configs=this.loadIniConfigs();
  configs.put(""String_Node_Str"",bundlePath);
  configs.put(""String_Node_Str"",ret.getName());
  String basedir=bundlePath + File.separator + ""String_Node_Str""+ ret.getName()+ File.separator+ ret.getVersion();
  configs.put(""String_Node_Str"",basedir);
  this.mergeCmdOptions(ret);
  Date date=new Date();
  ret.setDate(date.toString());
  Random rand=new Random(System.currentTimeMillis());
  int randInt=rand.nextInt(100000000);
  ret.setRandom(""String_Node_Str"" + randInt);
  ret.getEnv().setPegasusConfigDir(config.get(""String_Node_Str""));
  ret.getEnv().setDaxDir(config.get(""String_Node_Str""));
  ret.getEnv().setSwCluster(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_URL(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_APP_ROOT(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_JOBTRACKER(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_NAMENODE(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_QUEUENAME(config.get(""String_Node_Str""));
  ret.getEnv().setHADOOP_CORE_XML(config.get(""String_Node_Str""));
  ret.getEnv().setHADOOP_HDFS_SITE_XML(config.get(""String_Node_Str""));
  ret.getEnv().setHADOOP_MAPRED_SITE_XML(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_WORK_DIR(config.get(""String_Node_Str""));
  ret.getEnv().setOOZIE_APP_PATH(config.get(""String_Node_Str""));
  if (options.has((""String_Node_Str""))) {
    int workflowAccession=Integer.parseInt((String)options.valueOf(""String_Node_Str""));
    int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession);
    configs.put(""String_Node_Str"",""String_Node_Str"" + workflowrunaccession);
    ret.setWorkflow_run_accession(""String_Node_Str"" + workflowrunaccession);
  }
  ret.setConfigs(configs);
  if (workflow_java) {
    try {
      Method m=null;
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
 else {
    WorkflowXmlParser xmlParser=new WorkflowXmlParser();
    xmlParser.parseXml(ret,metaInfo.get(""String_Node_Str""));
  }
  ret.setWait(this.options.has(""String_Node_Str""));
  return ret;
}",0.930055913070999
189018,"private void printWorkflowInfo(WorkflowJob wf){
  System.out.println(""String_Node_Str"" + wf.getAppPath());
  System.out.println(""String_Node_Str"" + wf.getAppName());
  System.out.println(""String_Node_Str"" + wf.getStatus());
  System.out.println(""String_Node_Str"");
  for (  WorkflowAction action : wf.getActions()) {
    System.out.println(MessageFormat.format(""String_Node_Str"",action.getName(),action.getType(),action.getStatus()));
  }
  System.out.println();
}","private void printWorkflowInfo(WorkflowJob wf){
  Log.stdout(""String_Node_Str"" + wf.getAppPath());
  Log.stdout(""String_Node_Str"" + wf.getAppName());
  Log.stdout(""String_Node_Str"" + wf.getStatus());
  Log.stdout(""String_Node_Str"");
  for (  WorkflowAction action : wf.getActions()) {
    Log.stdout(MessageFormat.format(""String_Node_Str"",action.getName(),action.getType(),action.getStatus()));
  }
}",0.412037037037037
189019,"/** 
 * return a workflow.xml for hadoop
 * @param objectModel
 * @return
 */
private File parseDataModel(AbstractWorkflowDataModel objectModel){
  File file=new File(this.dir,""String_Node_Str"");
  objectModel.getConfigs().put(""String_Node_Str"",this.dir.getAbsolutePath());
  OozieWorkflowXmlGenerator daxv2=new OozieWorkflowXmlGenerator();
  daxv2.generateWorkflowXml(objectModel,file.getAbsolutePath());
  return file;
}","/** 
 * return a workflow.xml for hadoop
 * @param objectModel
 * @return
 */
private File parseDataModel(AbstractWorkflowDataModel objectModel){
  File file=new File(this.dir,""String_Node_Str"");
  OozieWorkflowXmlGenerator daxv2=new OozieWorkflowXmlGenerator();
  daxv2.generateWorkflowXml(objectModel,file.getAbsolutePath());
  return file;
}",0.8981723237597912
189020,"@Override public ReturnValue launchWorkflow(AbstractWorkflowDataModel objectModel){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  this.setupEnvironment();
  this.parseDataModel(objectModel);
  this.setupHDFS(objectModel);
  ret=this.runWorkflow(objectModel);
  return ret;
}","@Override public ReturnValue launchWorkflow(AbstractWorkflowDataModel objectModel){
  this.dataModel=objectModel;
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  this.setupEnvironment();
  this.parseDataModel(objectModel);
  this.setupHDFS(objectModel);
  ret=this.runWorkflow(objectModel);
  return ret;
}",0.9501661129568106
189021,"/** 
 * @throws IOException 
 */
private void setupEnvironment(){
  try {
    this.dir=FileTools.createDirectoryWithUniqueName(new File(work_dir),""String_Node_Str"");
    this.dir.setWritable(true,false);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  this.generateJobProperties();
  File lib=new File(this.dir,""String_Node_Str"");
  lib.mkdir();
}","/** 
 * @throws IOException 
 */
private void setupEnvironment(){
  try {
    this.dir=FileTools.createDirectoryWithUniqueName(new File(this.dataModel.getEnv().getOOZIE_WORK_DIR()),""String_Node_Str"");
    this.dir.setWritable(true,false);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  this.generateJobProperties();
  File lib=new File(this.dir,""String_Node_Str"");
  lib.mkdir();
}",0.9326287978863936
189022,"private void generateJobProperties(){
  File file=new File(this.dir,""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(file);
    fw.write(""String_Node_Str"");
    fw.write(""String_Node_Str"");
    fw.write(""String_Node_Str"");
    fw.write(""String_Node_Str"" + this.dir.getName());
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void generateJobProperties(){
  File file=new File(this.dir,""String_Node_Str"");
  try {
    FileWriter fw=new FileWriter(file);
    fw.write(""String_Node_Str"" + this.dataModel.getEnv().getOOZIE_NAMENODE() + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + this.dataModel.getEnv().getOOZIE_JOBTRACKER() + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + this.dataModel.getEnv().getOOZIE_QUEUENAME() + ""String_Node_Str"");
    fw.write(""String_Node_Str"" + this.dir.getName());
    fw.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.6795284030010718
189023,"private ReturnValue runWorkflow(AbstractWorkflowDataModel objectModel){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  OozieClient wc=new OozieClient(""String_Node_Str"");
  try {
    Properties conf=wc.createConfiguration();
    String app_path=""String_Node_Str"" + this.dir.getName();
    conf.setProperty(OozieClient.APP_PATH,app_path);
    conf.setProperty(""String_Node_Str"",""String_Node_Str"");
    conf.setProperty(""String_Node_Str"",""String_Node_Str"");
    conf.setProperty(""String_Node_Str"",""String_Node_Str"");
    String jobId=wc.run(conf);
    System.out.println(""String_Node_Str"");
    while (wc.getJobInfo(jobId).getStatus() == WorkflowJob.Status.RUNNING) {
      System.out.println(""String_Node_Str"");
      printWorkflowInfo(wc.getJobInfo(jobId));
      Thread.sleep(10 * 1000);
    }
    System.out.println(""String_Node_Str"");
    printWorkflowInfo(wc.getJobInfo(jobId));
    System.out.println(wc.getJobInfo(jobId));
  }
 catch (  OozieClientException oozieClientException) {
    oozieClientException.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return ret;
}","private ReturnValue runWorkflow(AbstractWorkflowDataModel objectModel){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  OozieClient wc=new OozieClient(this.dataModel.getEnv().getOOZIE_URL());
  try {
    Properties conf=wc.createConfiguration();
    String app_path=this.dataModel.getEnv().getOOZIE_APP_PATH() + this.dataModel.getEnv().getOOZIE_APP_ROOT() + ""String_Node_Str""+ this.dir.getName();
    conf.setProperty(OozieClient.APP_PATH,app_path);
    conf.setProperty(""String_Node_Str"",this.dataModel.getEnv().getOOZIE_JOBTRACKER());
    conf.setProperty(""String_Node_Str"",this.dataModel.getEnv().getOOZIE_NAMENODE());
    conf.setProperty(""String_Node_Str"",this.dataModel.getEnv().getOOZIE_QUEUENAME());
    jobId=wc.run(conf);
    Log.stdout(""String_Node_Str"");
    while (wc.getJobInfo(jobId).getStatus() == WorkflowJob.Status.RUNNING) {
      Log.stdout(""String_Node_Str"");
      printWorkflowInfo(wc.getJobInfo(jobId));
      Thread.sleep(10 * 1000);
    }
    Log.stdout(""String_Node_Str"");
    printWorkflowInfo(wc.getJobInfo(jobId));
  }
 catch (  OozieClientException oozieClientException) {
    oozieClientException.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return ret;
}",0.7827557058326289
189024,"/** 
 * copy the local dir to HDFS
 */
private void setupHDFS(AbstractWorkflowDataModel objectModel){
  Configuration conf=new Configuration();
  conf.addResource(new Path(""String_Node_Str""));
  conf.addResource(new Path(""String_Node_Str""));
  conf.addResource(new Path(""String_Node_Str""));
  FileSystem fileSystem=null;
  try {
    fileSystem=FileSystem.get(conf);
    Path path=new Path(""String_Node_Str"" + this.dir.getName());
    fileSystem.mkdirs(path);
    Path pathlib=new Path(""String_Node_Str"" + this.dir.getName() + ""String_Node_Str"");
    fileSystem.mkdirs(pathlib);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    this.copyFromLocal(fileSystem,this.work_dir + ""String_Node_Str"" + this.dir.getName()+ ""String_Node_Str"",""String_Node_Str"" + this.dir.getName());
    this.copyFromLocal(fileSystem,this.work_dir + ""String_Node_Str"" + this.dir.getName()+ ""String_Node_Str"",""String_Node_Str"" + this.dir.getName());
    this.copyFromLocal(fileSystem,objectModel.getWorkflowBaseDir() + ""String_Node_Str"" + objectModel.getTags().get(""String_Node_Str"")+ ""String_Node_Str"",""String_Node_Str"" + this.dir.getName() + ""String_Node_Str"");
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  try {
    fileSystem.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * copy the local dir to HDFS
 */
private void setupHDFS(AbstractWorkflowDataModel objectModel){
  Configuration conf=new Configuration();
  conf.addResource(new Path(this.dataModel.getEnv().getHADOOP_CORE_XML()));
  conf.addResource(new Path(this.dataModel.getEnv().getHADOOP_HDFS_SITE_XML()));
  conf.addResource(new Path(this.dataModel.getEnv().getHADOOP_MAPRED_SITE_XML()));
  FileSystem fileSystem=null;
  try {
    fileSystem=FileSystem.get(conf);
    Path path=new Path(this.dataModel.getEnv().getOOZIE_APP_ROOT() + ""String_Node_Str"" + this.dir.getName());
    fileSystem.mkdirs(path);
    Path pathlib=new Path(this.dataModel.getEnv().getOOZIE_APP_ROOT() + ""String_Node_Str"" + this.dir.getName()+ ""String_Node_Str"");
    fileSystem.mkdirs(pathlib);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    this.copyFromLocal(fileSystem,this.dataModel.getEnv().getOOZIE_WORK_DIR() + ""String_Node_Str"" + this.dir.getName()+ ""String_Node_Str"",this.dataModel.getEnv().getOOZIE_APP_ROOT() + ""String_Node_Str"" + this.dir.getName());
    this.copyFromLocal(fileSystem,this.dataModel.getEnv().getOOZIE_WORK_DIR() + ""String_Node_Str"" + this.dir.getName()+ ""String_Node_Str"",this.dataModel.getEnv().getOOZIE_APP_ROOT() + ""String_Node_Str"" + this.dir.getName());
    this.copyFromLocal(fileSystem,objectModel.getWorkflowBaseDir() + ""String_Node_Str"" + objectModel.getTags().get(""String_Node_Str"")+ ""String_Node_Str"",this.dataModel.getEnv().getOOZIE_APP_ROOT() + ""String_Node_Str"" + this.dir.getName()+ ""String_Node_Str"");
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  try {
    fileSystem.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.7768540073162621
189025,"private void parseDataModel(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=wfdm.isMetadataWriteBack();
  List<OozieJob> parents=new ArrayList<OozieJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  OozieJob oJob0=new OozieJob(job0,""String_Node_Str"" + this.jobs.size(),wfdm.getConfigs().get(""String_Node_Str""));
  oJob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getParent_accessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    oJob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    oJob0.setWorkflowRunAccession(workflowRunAccession);
    oJob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(oJob0);
  parents.add(oJob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<OozieJob> newParents=new ArrayList<OozieJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      OozieProvisionFileJob ojob=new OozieProvisionFileJob(job,entry.getValue(),job.getAlgo() + this.jobs.size(),wfdm.getConfigs().get(""String_Node_Str""));
      ojob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        ojob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(ojob);
      this.fileJobMap.put(entry.getValue(),ojob);
      if (entry.getValue().isInput()) {
        newParents.add(ojob);
        for (        OozieJob parent : parents) {
          ojob.addParent(parent);
        }
        String outputDir=wfdm.getConfigs().get(""String_Node_Str"") + ""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        ojob.setOutputDir(outputDir);
      }
 else {
        ojob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        ojob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  Map<OozieJob,OozieJob> hasProvisionOut=new HashMap<OozieJob,OozieJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    OozieJob pjob=this.createOozieJobObject(job,wfdm);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getOozieJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          OozieProvisionFileJob parentPfjob=new OozieProvisionFileJob(pfjob,file,pfjob.getAlgo() + ""String_Node_Str"" + jobs.size(),wfdm.getConfigs().get(""String_Node_Str""));
          parentPfjob.addParent(oJob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + ""String_Node_Str"" + file.getUniqueDir() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          OozieProvisionFileJob parentPfjob=new OozieProvisionFileJob(pfjob,file,pfjob.getAlgo() + ""String_Node_Str"" + jobs.size(),wfdm.getConfigs().get(""String_Node_Str""));
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      OozieJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<OozieJob,OozieJob> entry : hasProvisionOut.entrySet()) {
      Collection<OozieJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      OozieJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<OozieJob> leaves=new ArrayList<OozieJob>();
  for (  OozieJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,OozieJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      OozieJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setEndJob();
  this.setAccessionFileRelations(oJob0);
}","private void parseDataModel(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=wfdm.isMetadataWriteBack();
  List<OozieJob> parents=new ArrayList<OozieJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  OozieJob oJob0=new OozieJob(job0,""String_Node_Str"" + this.jobs.size(),wfdm.getEnv().getOOZIE_WORK_DIR());
  oJob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getParent_accessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    oJob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    oJob0.setWorkflowRunAccession(workflowRunAccession);
    oJob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(oJob0);
  parents.add(oJob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<OozieJob> newParents=new ArrayList<OozieJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      OozieProvisionFileJob ojob=new OozieProvisionFileJob(job,entry.getValue(),job.getAlgo() + this.jobs.size(),wfdm.getEnv().getOOZIE_WORK_DIR());
      ojob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        ojob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(ojob);
      this.fileJobMap.put(entry.getValue(),ojob);
      if (entry.getValue().isInput()) {
        newParents.add(ojob);
        for (        OozieJob parent : parents) {
          ojob.addParent(parent);
        }
        String outputDir=wfdm.getEnv().getOOZIE_WORK_DIR() + ""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        ojob.setOutputDir(outputDir);
      }
 else {
        ojob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        ojob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  Map<OozieJob,OozieJob> hasProvisionOut=new HashMap<OozieJob,OozieJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    OozieJob pjob=this.createOozieJobObject(job,wfdm);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getOozieJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          OozieProvisionFileJob parentPfjob=new OozieProvisionFileJob(pfjob,file,pfjob.getAlgo() + ""String_Node_Str"" + jobs.size(),wfdm.getEnv().getOOZIE_WORK_DIR());
          parentPfjob.addParent(oJob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + ""String_Node_Str"" + file.getUniqueDir() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          OozieProvisionFileJob parentPfjob=new OozieProvisionFileJob(pfjob,file,pfjob.getAlgo() + ""String_Node_Str"" + jobs.size(),wfdm.getEnv().getOOZIE_WORK_DIR());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      OozieJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<OozieJob,OozieJob> entry : hasProvisionOut.entrySet()) {
      Collection<OozieJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      OozieJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<OozieJob> leaves=new ArrayList<OozieJob>();
  for (  OozieJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,OozieJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      OozieJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setEndJob();
  this.setAccessionFileRelations(oJob0);
}",0.636772090564708
189026,"private OozieJob createOozieJobObject(AbstractJob job,AbstractWorkflowDataModel wfdm){
  OozieJob ret=null;
  if (job instanceof JavaJob) {
  }
 else   if (job instanceof PerlJob) {
    ret=new OozieJob(job,job.getAlgo() + ""String_Node_Str"" + this.jobs.size(),wfdm.getConfigs().get(""String_Node_Str""));
  }
 else   if (job instanceof JavaSeqwareModuleJob) {
  }
 else {
    ret=new OozieJob(job,job.getAlgo() + ""String_Node_Str"" + this.jobs.size(),wfdm.getConfigs().get(""String_Node_Str""));
  }
  return ret;
}","private OozieJob createOozieJobObject(AbstractJob job,AbstractWorkflowDataModel wfdm){
  OozieJob ret=null;
  if (job instanceof JavaJob) {
  }
 else   if (job instanceof PerlJob) {
    ret=new OozieJob(job,job.getAlgo() + ""String_Node_Str"" + this.jobs.size(),wfdm.getEnv().getOOZIE_WORK_DIR());
  }
 else   if (job instanceof JavaSeqwareModuleJob) {
  }
 else {
    ret=new OozieJob(job,job.getAlgo() + ""String_Node_Str"" + this.jobs.size(),wfdm.getEnv().getOOZIE_WORK_DIR());
  }
  return ret;
}",0.588469184890656
189027,"/** 
 * load metadata.xml, if FTL, parse the FTL to XML, and translate it to Java based Object if Java, load the class. 
 * @return
 */
public AbstractWorkflowDataModel getWorkflowDataModel(){
  String bundlePath=""String_Node_Str"";
  if (options.has(""String_Node_Str"")) {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
 else {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
  File bundle=new File(bundlePath);
  Log.info(""String_Node_Str"" + bundlePath);
  if (bundle == null || !bundle.exists()) {
    Log.error(""String_Node_Str"");
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") Iterator<File> it=FileUtils.iterateFiles(bundle,new String[]{""String_Node_Str""},true);
  if (!it.hasNext())   return null;
  File metadataFile=null;
  while (it.hasNext()) {
    File file=it.next();
    if (file.getName().equals(""String_Node_Str"")) {
      metadataFile=file;
      break;
    }
  }
  if (metadataFile == null)   return null;
  Map<String,String> metaInfo=this.parseMetadataInfo(metadataFile,bundlePath);
  boolean workflow_java=true;
  if (metaInfo.get(""String_Node_Str"") != null && !metaInfo.get(""String_Node_Str"").toString().isEmpty())   workflow_java=false;
  AbstractWorkflowDataModel ret=null;
  Class<?> clazz=null;
  if (workflow_java) {
    String clazzPath=metaInfo.get(""String_Node_Str"");
    Log.info(""String_Node_Str"" + clazzPath);
    WorkflowClassFinder finder=new WorkflowClassFinder();
    clazz=finder.findFirstWorkflowClass(clazzPath);
    if (null != clazz) {
      Log.debug(""String_Node_Str"");
      try {
        Object object=clazz.newInstance();
        ret=(AbstractWorkflowDataModel)object;
      }
 catch (      InstantiationException ex) {
        Log.error(ex);
      }
catch (      IllegalAccessException ex) {
        Log.error(ex);
      }
catch (      SecurityException ex) {
        Log.error(ex);
      }
catch (      IllegalArgumentException ex) {
        Log.error(ex);
      }
    }
  }
 else {
    ret=new XmlWorkflowDataModel();
  }
  ret.setTags(metaInfo);
  ret.setName(metaInfo.get(""String_Node_Str""));
  ret.setVersion(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setCompute(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setNetwork(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setMemory(metaInfo.get(""String_Node_Str""));
  Map<String,String> configs=this.loadIniConfigs();
  configs.put(""String_Node_Str"",bundlePath);
  configs.put(""String_Node_Str"",ret.getName());
  String basedir=bundlePath + File.separator + ""String_Node_Str""+ ret.getName()+ File.separator+ ret.getVersion();
  configs.put(""String_Node_Str"",basedir);
  Log.error(""String_Node_Str"" + basedir);
  this.mergeCmdOptions(configs);
  Date date=new Date();
  ret.setDate(date.toString());
  Random rand=new Random(System.currentTimeMillis());
  int randInt=rand.nextInt(100000000);
  ret.setRandom(""String_Node_Str"" + randInt);
  ret.getEnv().setPegasusConfigDir(config.get(""String_Node_Str""));
  ret.getEnv().setDaxDir(config.get(""String_Node_Str""));
  ret.getEnv().setSwCluster(config.get(""String_Node_Str""));
  if (options.has((""String_Node_Str""))) {
    int workflowAccession=Integer.parseInt((String)options.valueOf(""String_Node_Str""));
    int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession);
    configs.put(""String_Node_Str"",""String_Node_Str"" + workflowrunaccession);
  }
  ret.setConfigs(configs);
  if (workflow_java) {
    try {
      Method m=null;
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      this.setupProvisionedPath(ret.getFiles());
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
 else {
    WorkflowXmlParser xmlParser=new WorkflowXmlParser();
    xmlParser.parseXml(ret,metaInfo.get(""String_Node_Str""));
  }
  ret.setWait(this.options.has(""String_Node_Str""));
  return ret;
}","/** 
 * load metadata.xml, if FTL, parse the FTL to XML, and translate it to Java based Object if Java, load the class. 
 * @return
 */
public AbstractWorkflowDataModel getWorkflowDataModel(){
  String bundlePath=""String_Node_Str"";
  if (options.has(""String_Node_Str"")) {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
 else {
    bundlePath=(String)options.valueOf(""String_Node_Str"");
  }
  File bundle=new File(bundlePath);
  Log.info(""String_Node_Str"" + bundlePath);
  if (bundle == null || !bundle.exists()) {
    Log.error(""String_Node_Str"");
    return null;
  }
  @SuppressWarnings(""String_Node_Str"") Iterator<File> it=FileUtils.iterateFiles(bundle,new String[]{""String_Node_Str""},true);
  if (!it.hasNext())   return null;
  File metadataFile=null;
  while (it.hasNext()) {
    File file=it.next();
    if (file.getName().equals(""String_Node_Str"")) {
      metadataFile=file;
      break;
    }
  }
  if (metadataFile == null)   return null;
  Map<String,String> metaInfo=this.parseMetadataInfo(metadataFile,bundlePath);
  boolean workflow_java=true;
  if (metaInfo.get(""String_Node_Str"") != null && !metaInfo.get(""String_Node_Str"").toString().isEmpty())   workflow_java=false;
  AbstractWorkflowDataModel ret=null;
  Class<?> clazz=null;
  if (workflow_java) {
    String clazzPath=metaInfo.get(""String_Node_Str"");
    Log.info(""String_Node_Str"" + clazzPath);
    WorkflowClassFinder finder=new WorkflowClassFinder();
    clazz=finder.findFirstWorkflowClass(clazzPath);
    if (null != clazz) {
      Log.debug(""String_Node_Str"");
      try {
        Object object=clazz.newInstance();
        ret=(AbstractWorkflowDataModel)object;
      }
 catch (      InstantiationException ex) {
        Log.error(ex);
      }
catch (      IllegalAccessException ex) {
        Log.error(ex);
      }
catch (      SecurityException ex) {
        Log.error(ex);
      }
catch (      IllegalArgumentException ex) {
        Log.error(ex);
      }
    }
  }
 else {
    ret=new XmlWorkflowDataModel();
  }
  ret.setTags(metaInfo);
  ret.setName(metaInfo.get(""String_Node_Str""));
  ret.setVersion(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setCompute(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setNetwork(metaInfo.get(""String_Node_Str""));
  ret.getEnv().setMemory(metaInfo.get(""String_Node_Str""));
  Map<String,String> configs=this.loadIniConfigs();
  configs.put(""String_Node_Str"",bundlePath);
  configs.put(""String_Node_Str"",ret.getName());
  String basedir=bundlePath + File.separator + ""String_Node_Str""+ ret.getName()+ File.separator+ ret.getVersion();
  configs.put(""String_Node_Str"",basedir);
  Log.error(""String_Node_Str"" + basedir);
  this.mergeCmdOptions(configs);
  Date date=new Date();
  ret.setDate(date.toString());
  Random rand=new Random(System.currentTimeMillis());
  int randInt=rand.nextInt(100000000);
  ret.setRandom(""String_Node_Str"" + randInt);
  ret.getEnv().setPegasusConfigDir(config.get(""String_Node_Str""));
  ret.getEnv().setDaxDir(config.get(""String_Node_Str""));
  ret.getEnv().setSwCluster(config.get(""String_Node_Str""));
  if (options.has((""String_Node_Str""))) {
    int workflowAccession=Integer.parseInt((String)options.valueOf(""String_Node_Str""));
    int workflowrunaccession=this.metadata.add_workflow_run(workflowAccession);
    configs.put(""String_Node_Str"",""String_Node_Str"" + workflowrunaccession);
  }
  ret.setConfigs(configs);
  if (workflow_java) {
    try {
      Method m=null;
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
      m=clazz.getMethod(""String_Node_Str"");
      m.invoke(ret);
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
 else {
    WorkflowXmlParser xmlParser=new WorkflowXmlParser();
    xmlParser.parseXml(ret,metaInfo.get(""String_Node_Str""));
  }
  ret.setWait(this.options.has(""String_Node_Str""));
  return ret;
}",0.994382666513814
189028,"private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=Boolean.parseBoolean(wfdm.getConfigs().get(""String_Node_Str""));
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getConfigs().get(""String_Node_Str""));
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getConfigs().get(""String_Node_Str"");
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getConfigs().get(""String_Node_Str"");
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getConfigs().get(""String_Node_Str""),entry.getValue());
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(entry.getValue(),pjob);
      if (entry.getValue().isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getConfigs().get(""String_Node_Str""));
        pjob.setOutputDir(wfdm.getConfigs().get(""String_Node_Str""));
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getConfigs().get(""String_Node_Str""),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + provisionFileCount);
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + provisionFileCount + ""String_Node_Str"");
          provisionFileCount++;
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getConfigs().get(""String_Node_Str""),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getConfigs().get(""String_Node_Str""));
          parentPfjob.setOutputDir(wfdm.getConfigs().get(""String_Node_Str""));
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}","private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=Boolean.parseBoolean(wfdm.getConfigs().get(""String_Node_Str""));
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getConfigs().get(""String_Node_Str""));
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getConfigs().get(""String_Node_Str"");
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getConfigs().get(""String_Node_Str"");
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getConfigs().get(""String_Node_Str""),entry.getValue());
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(entry.getValue(),pjob);
      if (entry.getValue().isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getConfigs().get(""String_Node_Str""));
        pjob.setOutputDir(wfdm.getConfigs().get(""String_Node_Str""));
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getConfigs().get(""String_Node_Str""),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(file.getProvisionedPath());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + file.getProvisionedPath() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getConfigs().get(""String_Node_Str""),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getConfigs().get(""String_Node_Str""));
          parentPfjob.setOutputDir(wfdm.getConfigs().get(""String_Node_Str""));
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}",0.9746289264756643
189029,"private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=Boolean.parseBoolean(wfdm.getConfigs().get(""String_Node_Str""));
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getWorkflowBaseDir());
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getParent_accessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getWorkflowBaseDir(),entry.getValue());
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(entry.getValue(),pjob);
      if (entry.getValue().isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        pjob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + file.getProvisionedPath() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}","private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=Boolean.parseBoolean(wfdm.getConfigs().get(""String_Node_Str""));
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getWorkflowBaseDir());
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getParent_accessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getWorkflowBaseDir(),entry.getValue());
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(entry.getValue(),pjob);
      if (entry.getValue().isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        pjob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + ""String_Node_Str"" + file.getUniqueDir() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}",0.9947248109723932
189030,"@Override public ReturnValue do_run(){
  AbstractWorkflowEngine engine=new PegasusWorkflowEngine();
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!Boolean.parseBoolean(dataModel.getConfigs().get(""String_Node_Str""))) {
    return retPegasus;
  }
  String wra=dataModel.getConfigs().get(""String_Node_Str"");
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunaccession=Integer.parseInt(wra);
  int workflowrun=this.metadata.get_workflow_run_id(workflowrunaccession);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  List<String> parentsLinkedToWR=new ArrayList<String>();
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrun,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrun,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrun,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}","@Override public ReturnValue do_run(){
  AbstractWorkflowEngine engine=new PegasusWorkflowEngine();
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!Boolean.parseBoolean(dataModel.getConfigs().get(""String_Node_Str""))) {
    return retPegasus;
  }
  String wra=dataModel.getConfigs().get(""String_Node_Str"");
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunId=Integer.parseInt(wra);
  int workflowrunaccession=this.metadata.get_workflow_run_accession(workflowrunId);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  List<String> parentsLinkedToWR=new ArrayList<String>();
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}",0.9677274764679517
189031,"@Override public ReturnValue do_run(){
  AbstractWorkflowEngine engine=new PegasusWorkflowEngine();
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  return ret;
}","@Override public ReturnValue do_run(){
  AbstractWorkflowEngine engine=new PegasusWorkflowEngine();
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!Boolean.parseBoolean(dataModel.getConfigs().get(""String_Node_Str""))) {
    return retPegasus;
  }
  String wra=dataModel.getConfigs().get(""String_Node_Str"");
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunaccession=Integer.parseInt(wra);
  int workflowrun=this.metadata.get_workflow_run_id(workflowrunaccession);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  List<String> parentsLinkedToWR=new ArrayList<String>();
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrun,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrun,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrun,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}",0.4537292817679558
189032,"private ReturnValue addIUS(){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  if (fields.containsKey(""String_Node_Str"") && fields.containsKey(""String_Node_Str"") && fields.containsKey(""String_Node_Str"")&& fields.containsKey(""String_Node_Str"")&& fields.containsKey(""String_Node_Str"")&& fields.containsKey(""String_Node_Str"")) {
    ret=metadata.addIUS(Integer.parseInt(fields.get(""String_Node_Str"")),Integer.parseInt(fields.get(""String_Node_Str"")),fields.get(""String_Node_Str""),fields.get(""String_Node_Str""),fields.get(""String_Node_Str""),""String_Node_Str"".equalsIgnoreCase(fields.get(""String_Node_Str"")));
    print(""String_Node_Str"" + ret.getAttribute(""String_Node_Str""));
  }
 else {
    Logger.getLogger(Metadata.class.getName()).log(Level.SEVERE,""String_Node_Str"",""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return (ret);
}","private ReturnValue addIUS(){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  if (fields.containsKey(""String_Node_Str"") && fields.containsKey(""String_Node_Str"") && fields.containsKey(""String_Node_Str"")&& fields.containsKey(""String_Node_Str"")&& fields.containsKey(""String_Node_Str"")) {
    ret=metadata.addIUS(Integer.parseInt(fields.get(""String_Node_Str"")),Integer.parseInt(fields.get(""String_Node_Str"")),fields.get(""String_Node_Str""),fields.get(""String_Node_Str""),fields.get(""String_Node_Str""),""String_Node_Str"".equalsIgnoreCase(fields.get(""String_Node_Str"")));
    print(""String_Node_Str"" + ret.getAttribute(""String_Node_Str""));
  }
 else {
    Logger.getLogger(Metadata.class.getName()).log(Level.SEVERE,""String_Node_Str"",""String_Node_Str"");
    ret.setExitStatus(ReturnValue.INVALIDPARAMETERS);
  }
  return (ret);
}",0.976470588235294
189033,"private ReturnValue getWorkflowFromXml(AbstractWorkflowDataModel wfdm,Element root){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  Element filesE=root.getChild(""String_Node_Str"");
  if (filesE != null) {
    List<Element> fileES=filesE.getChildren();
    for (    Element fe : fileES) {
      SqwFile file0=new SqwFile();
      file0.setSourcePath(fe.getAttributeValue(""String_Node_Str""));
      file0.setType(fe.getAttributeValue(""String_Node_Str""));
      file0.setIsInput(Boolean.parseBoolean(fe.getAttributeValue(""String_Node_Str"")));
      if (fe.getAttribute(""String_Node_Str"") != null) {
        file0.setForceCopy(Boolean.parseBoolean(fe.getAttributeValue(""String_Node_Str"")));
      }
      wfdm.getFiles().put(fe.getAttributeValue(""String_Node_Str""),file0);
    }
  }
  Element jobsE=root.getChild(""String_Node_Str"");
  Map<String,Job> jobsMap=new HashMap<String,Job>();
  if (jobsE != null) {
    List<Element> jobES=jobsE.getChildren();
    for (    Element je : jobES) {
      Job job=this.createJobFromElement(je,wfdm.getWorkflow());
      jobsMap.put(je.getAttributeValue(""String_Node_Str"").trim(),job);
    }
    for (    Element je : jobES) {
      List<Element> parents=je.getChildren(""String_Node_Str"");
      Job job=jobsMap.get(je.getAttributeValue(""String_Node_Str""));
      if (parents != null) {
        for (        Element parentE : parents) {
          Job parent=jobsMap.get(parentE.getText().trim());
          job.addParent(parent);
        }
      }
    }
  }
  return ret;
}","private ReturnValue getWorkflowFromXml(AbstractWorkflowDataModel wfdm,Element root){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  Element filesE=root.getChild(""String_Node_Str"");
  if (filesE != null) {
    List<Element> fileES=filesE.getChildren();
    for (    Element fe : fileES) {
      SqwFile file0=new SqwFile();
      file0.setSourcePath(fe.getAttributeValue(""String_Node_Str""));
      file0.setType(fe.getAttributeValue(""String_Node_Str""));
      file0.setIsInput(Boolean.parseBoolean(fe.getAttributeValue(""String_Node_Str"")));
      if (fe.getAttribute(""String_Node_Str"") != null) {
        file0.setForceCopy(Boolean.parseBoolean(fe.getAttributeValue(""String_Node_Str"")));
      }
      wfdm.getFiles().put(fe.getAttributeValue(""String_Node_Str""),file0);
    }
  }
  Element dirsE=root.getChild(""String_Node_Str"");
  if (dirsE != null) {
    List<Element> dirs=dirsE.getChildren();
    for (    Element dir : dirs) {
      wfdm.addDirectory(dir.getText());
    }
  }
  Element jobsE=root.getChild(""String_Node_Str"");
  Map<String,Job> jobsMap=new HashMap<String,Job>();
  if (jobsE != null) {
    List<Element> jobES=jobsE.getChildren();
    for (    Element je : jobES) {
      Job job=this.createJobFromElement(je,wfdm.getWorkflow());
      jobsMap.put(je.getAttributeValue(""String_Node_Str"").trim(),job);
    }
    for (    Element je : jobES) {
      List<Element> parents=je.getChildren(""String_Node_Str"");
      Job job=jobsMap.get(je.getAttributeValue(""String_Node_Str""));
      if (parents != null) {
        for (        Element parentE : parents) {
          Job parent=jobsMap.get(parentE.getText().trim());
          job.addParent(parent);
        }
      }
    }
  }
  return ret;
}",0.935762816553428
189034,"private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=Boolean.parseBoolean(wfdm.getConfigs().get(""String_Node_Str""));
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getWorkflowBaseDir());
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getParent_accessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getWorkflowBaseDir(),entry.getValue());
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(entry.getValue(),pjob);
      if (entry.getValue().isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        pjob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(file.getProvisionedPath());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + file.getProvisionedPath() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}","private void parseWorkflow(AbstractWorkflowDataModel wfdm){
  boolean metadatawriteback=Boolean.parseBoolean(wfdm.getConfigs().get(""String_Node_Str""));
  List<PegasusJob> parents=new ArrayList<PegasusJob>();
  AbstractJob job0=new BashJob(""String_Node_Str"");
  job0.getCommand().addArgument(""String_Node_Str"");
  if (!wfdm.getDirectories().isEmpty()) {
    for (    String dir : wfdm.getDirectories()) {
      job0.getCommand().addArgument(""String_Node_Str"" + dir + ""String_Node_Str"");
    }
  }
  PegasusJob pjob0=new PegasusJob(job0,wfdm.getWorkflowBaseDir());
  pjob0.setId(this.jobs.size());
  pjob0.setMetadataWriteback(metadatawriteback);
  String parentAccession=wfdm.getParent_accessions();
  if (parentAccession != null && !parentAccession.isEmpty()) {
    pjob0.setParentAccession(parentAccession);
  }
  String workflowRunAccession=wfdm.getWorkflow_run_accession();
  if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
    pjob0.setWorkflowRunAccession(workflowRunAccession);
    pjob0.setWorkflowRunAncesstor(true);
  }
  this.jobs.add(pjob0);
  parents.add(pjob0);
  if (!wfdm.getFiles().isEmpty()) {
    Collection<PegasusJob> newParents=new ArrayList<PegasusJob>();
    for (    Map.Entry<String,SqwFile> entry : wfdm.getFiles().entrySet()) {
      AbstractJob job=new BashJob(""String_Node_Str"" + entry.getKey());
      job.addFile(entry.getValue());
      ProvisionFilesJob pjob=new ProvisionFilesJob(job,wfdm.getWorkflowBaseDir(),entry.getValue());
      pjob.setId(this.jobs.size());
      pjob.setMetadataWriteback(metadatawriteback);
      if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
        pjob.setWorkflowRunAccession(workflowRunAccession);
      }
      this.jobs.add(pjob);
      this.fileJobMap.put(entry.getValue(),pjob);
      if (entry.getValue().isInput()) {
        newParents.add(pjob);
        for (        PegasusJob parent : parents) {
          pjob.addParent(parent);
        }
        String outputDir=""String_Node_Str"" + entry.getValue().getUniqueDir();
        job0.getCommand().addArgument(""String_Node_Str"" + outputDir + ""String_Node_Str"");
        pjob.setOutputDir(outputDir);
      }
 else {
        pjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
        pjob.setOutputDir(wfdm.getMetadata_output_dir());
      }
    }
    parents.clear();
    parents.addAll(newParents);
  }
  int idCount=this.jobs.size();
  Map<PegasusJob,PegasusJob> hasProvisionOut=new HashMap<PegasusJob,PegasusJob>();
  for (  AbstractJob job : wfdm.getWorkflow().getJobs()) {
    PegasusJob pjob=this.createPegasusJobObject(job,wfdm);
    pjob.setId(idCount);
    pjob.setMetadataWriteback(metadatawriteback);
    if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
      pjob.setWorkflowRunAccession(workflowRunAccession);
    }
    this.jobs.add(pjob);
    idCount++;
    for (    Job parent : job.getParents()) {
      pjob.addParent(this.getPegasusJobObject((AbstractJob)parent));
    }
    if (job.getFiles().isEmpty() == false) {
      for (      SqwFile file : job.getFiles()) {
        if (file.isInput()) {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob0);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          parentPfjob.setOutputDir(""String_Node_Str"" + file.getUniqueDir());
          pjob.addParent(parentPfjob);
          job0.getCommand().addArgument(""String_Node_Str"" + file.getProvisionedPath() + ""String_Node_Str"");
        }
 else {
          AbstractJob pfjob=new BashJob(""String_Node_Str"");
          pfjob.addFile(file);
          ProvisionFilesJob parentPfjob=new ProvisionFilesJob(pfjob,wfdm.getWorkflowBaseDir(),file);
          parentPfjob.setId(this.jobs.size());
          parentPfjob.addParent(pjob);
          parentPfjob.setMetadataWriteback(metadatawriteback);
          parentPfjob.setMetadataOutputPrefix(wfdm.getMetadata_output_file_prefix());
          parentPfjob.setOutputDir(wfdm.getMetadata_output_dir());
          if (workflowRunAccession != null && !workflowRunAccession.isEmpty()) {
            parentPfjob.setWorkflowRunAccession(workflowRunAccession);
          }
          this.jobs.add(parentPfjob);
          hasProvisionOut.put(pjob,parentPfjob);
        }
      }
    }
    if (pjob.getParents().isEmpty()) {
      for (      PegasusJob parent : parents) {
        pjob.addParent(parent);
      }
    }
  }
  if (!hasProvisionOut.isEmpty()) {
    for (    Map.Entry<PegasusJob,PegasusJob> entry : hasProvisionOut.entrySet()) {
      Collection<PegasusJob> children=entry.getKey().getChildren();
      if (children.size() <= 1)       continue;
      for (      PegasusJob child : children) {
        if (child == entry.getValue())         continue;
        child.addParent(entry.getValue());
      }
    }
  }
  List<PegasusJob> leaves=new ArrayList<PegasusJob>();
  for (  PegasusJob _job : this.jobs) {
    if (_job.getChildren().isEmpty()) {
      leaves.add(_job);
    }
  }
  for (  Map.Entry<SqwFile,PegasusJob> entry : fileJobMap.entrySet()) {
    if (entry.getKey().isOutput()) {
      for (      PegasusJob leaf : leaves) {
        if (leaf != entry.getValue())         entry.getValue().addParent(leaf);
      }
    }
  }
  this.setAccessionFileRelations(pjob0);
}",0.994711792702274
189035,"@Override public ReturnValue do_run(){
  AbstractWorkflowEngine engine=new PegasusWorkflowEngine();
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!Boolean.parseBoolean(dataModel.getConfigs().get(""String_Node_Str""))) {
    return retPegasus;
  }
  String wra=dataModel.getConfigs().get(""String_Node_Str"");
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunId=Integer.parseInt(wra);
  int workflowrunaccession=this.metadata.get_workflow_run_accession(workflowrunId);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  List<String> parentsLinkedToWR=new ArrayList<String>();
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),Integer.parseInt(retPegasus.getAttribute(""String_Node_Str"")),retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}","@Override public ReturnValue do_run(){
  AbstractWorkflowEngine engine=new PegasusWorkflowEngine();
  WorkflowDataModelFactory factory=new WorkflowDataModelFactory(options,config,params,metadata);
  AbstractWorkflowDataModel dataModel=factory.getWorkflowDataModel();
  ReturnValue retPegasus=engine.launchWorkflow(dataModel);
  if (!Boolean.parseBoolean(dataModel.getConfigs().get(""String_Node_Str""))) {
    return retPegasus;
  }
  String wra=dataModel.getConfigs().get(""String_Node_Str"");
  if (wra == null || wra.isEmpty()) {
    return retPegasus;
  }
  int workflowrunId=Integer.parseInt(wra);
  int workflowrunaccession=this.metadata.get_workflow_run_accession(workflowrunId);
  String stdOut=retPegasus.getStdout();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(stdOut);
  String statusCmd=null;
  if (m.find()) {
    statusCmd=m.group(1);
  }
  p=Pattern.compile(""String_Node_Str"");
  m=p.matcher(stdOut);
  String statusDir=null;
  if (m.find()) {
    statusDir=m.group(1);
  }
  List<String> parentsLinkedToWR=new ArrayList<String>();
  if (options.has(""String_Node_Str"")) {
    List opts=options.valuesOf(""String_Node_Str"");
    for (    Object opt : opts) {
      String[] tokens=((String)opt).split(""String_Node_Str"");
      for (      String t : tokens) {
        parentsLinkedToWR.add(t);
      }
    }
  }
  WorkflowRun wr=null;
  for (  String parentLinkedToWR : parentsLinkedToWR) {
    try {
      this.metadata.linkWorkflowRunAndParent(workflowrunId,Integer.parseInt(parentLinkedToWR));
    }
 catch (    Exception e) {
      Log.error(e.getMessage());
    }
  }
  wr=metadata.getWorkflowRun(workflowrunaccession);
  if (retPegasus.getProcessExitStatus() != ReturnValue.SUCCESS || statusCmd == null) {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return (retPegasus);
  }
 else {
    metadata.update_workflow_run(workflowrunId,dataModel.getTags().get(""String_Node_Str""),dataModel.getTags().get(""String_Node_Str""),""String_Node_Str"",statusCmd,dataModel.getWorkflowBundleDir(),""String_Node_Str"",""String_Node_Str"",wr.getHost(),0,0,retPegasus.getStderr(),retPegasus.getStdout());
    return ret;
  }
}",0.909051631021819
189036,"@Override public int hashCode(){
  int hash=7;
  hash=31 * hash + (this.firstName != null ? this.firstName.hashCode() : 0);
  hash=31 * hash + (this.lastName != null ? this.lastName.hashCode() : 0);
  hash=31 * hash + (this.emailAddress != null ? this.emailAddress.hashCode() : 0);
  return hash;
}","@Override public int hashCode(){
  return new HashCodeBuilder(17,37).append(super.getSGID().getRowKey()).append(firstName).append(lastName).append(emailAddress).toHashCode();
}",0.3924050632911392
189037,"@Override public int hashCode(){
  int hash=7;
  hash=31 * hash + (this.firstName != null ? this.firstName.hashCode() : 0);
  hash=31 * hash + (this.lastName != null ? this.lastName.hashCode() : 0);
  hash=31 * hash + (this.emailAddress != null ? this.emailAddress.hashCode() : 0);
  return hash;
}","@Override public int hashCode(){
  return new HashCodeBuilder(17,37).append(super.getSGID().getRowKey()).append(firstName).append(lastName).append(emailAddress).toHashCode();
}",0.3924050632911392
189038,"/** 
 * Interface for mock-testing
 * @param args
 * @return
 */
public static Stack<SGID> runMain(String[] args){
  Options options=new Options();
  Option option1=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired().hasArgs(1).create(FEATURE_SET_PARAM);
  options.addOption(option1);
  Option option2=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(KEYVALUE_OUT_PARAM);
  options.addOption(option2);
  Option option3a=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(QUERY_PARAM_FILE);
  options.addOption(option3a);
  Option option3b=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(QUERY_PARAM_STRING);
  options.addOption(option3b);
  OptionGroup optionGroup=new OptionGroup();
  optionGroup.setRequired(true);
  optionGroup.addOption(option3a);
  optionGroup.addOption(option3b);
  options.addOptionGroup(optionGroup);
  Option option4=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(OUTPUTFILE_PARAM);
  options.addOption(option4);
  try {
    CommandLineParser parser=new PosixParser();
    CommandLine cmd=parser.parse(options,args);
    String featureSetID=cmd.getOptionValue(FEATURE_SET_PARAM);
    SGID sgid=Utility.parseSGID(featureSetID);
    FeatureSet fSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(sgid,FeatureSet.class);
    if (fSet == null) {
      System.out.println(""String_Node_Str"");
      System.exit(-2);
    }
    File keyFile=null;
    if (cmd.hasOption(KEYVALUE_OUT_PARAM)) {
      String outputFilename=cmd.getOptionValue(KEYVALUE_OUT_PARAM);
      keyFile=Utility.checkOutput(outputFilename);
    }
    String outputFile=cmd.getOptionValue(OUTPUTFILE_PARAM);
    Stack<FeatureSet> stack=new Stack<FeatureSet>();
    Stack<SGID> sgidStack=new Stack<SGID>();
    stack.add(fSet);
    processQueryClassFile(cmd,stack);
    processPlainTextQuery(cmd,stack);
    FeatureSet finalSet=stack.pop();
    sgidStack.add(finalSet.getSGID());
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",fSet.getSGID().getRowKey());
    keyValues.put(""String_Node_Str"",finalSet.getSGID().getRowKey());
    while (!stack.empty()) {
      FeatureSet set=stack.pop();
      sgidStack.add(set.getSGID());
      keyValues.put(stack.size() + ""String_Node_Str"",set.getSGID().getRowKey());
    }
    Utility.writeKeyValueFile(keyFile,keyValues);
    VCFDumper.dumpVCFFromFeatureSetID(finalSet,outputFile);
    return sgidStack;
  }
 catch (  IOException ex) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,ex);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  MissingOptionException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  ClassNotFoundException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  InstantiationException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  IllegalAccessException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  return null;
}","/** 
 * Interface for mock-testing
 * @param args
 * @return
 */
public static Stack<SGID> runMain(String[] args){
  Options options=new Options();
  Option option1=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired().hasArgs(1).create(FEATURE_SET_PARAM);
  options.addOption(option1);
  Option option2=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(KEYVALUE_OUT_PARAM);
  options.addOption(option2);
  Option option3a=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(QUERY_PARAM_FILE);
  options.addOption(option3a);
  Option option3b=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(QUERY_PARAM_STRING);
  options.addOption(option3b);
  OptionGroup optionGroup=new OptionGroup();
  optionGroup.setRequired(true);
  optionGroup.addOption(option3a);
  optionGroup.addOption(option3b);
  options.addOptionGroup(optionGroup);
  Option option4=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(OUTPUTFILE_PARAM);
  options.addOption(option4);
  try {
    CommandLineParser parser=new HackedPosixParser();
    CommandLine cmd=parser.parse(options,args);
    String featureSetID=cmd.getOptionValue(FEATURE_SET_PARAM);
    SGID sgid=Utility.parseSGID(featureSetID);
    FeatureSet fSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(sgid,FeatureSet.class);
    if (fSet == null) {
      System.out.println(""String_Node_Str"");
      System.exit(-2);
    }
    File keyFile=null;
    if (cmd.hasOption(KEYVALUE_OUT_PARAM)) {
      String outputFilename=cmd.getOptionValue(KEYVALUE_OUT_PARAM);
      keyFile=Utility.checkOutput(outputFilename);
    }
    String outputFile=cmd.getOptionValue(OUTPUTFILE_PARAM);
    Stack<FeatureSet> stack=new Stack<FeatureSet>();
    Stack<SGID> sgidStack=new Stack<SGID>();
    stack.add(fSet);
    processQueryClassFile(cmd,stack);
    processPlainTextQuery(cmd,stack);
    FeatureSet finalSet=stack.pop();
    sgidStack.add(finalSet.getSGID());
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",fSet.getSGID().getRowKey());
    keyValues.put(""String_Node_Str"",finalSet.getSGID().getRowKey());
    while (!stack.empty()) {
      FeatureSet set=stack.pop();
      sgidStack.add(set.getSGID());
      keyValues.put(stack.size() + ""String_Node_Str"",set.getSGID().getRowKey());
    }
    Utility.writeKeyValueFile(keyFile,keyValues);
    VCFDumper.dumpVCFFromFeatureSetID(finalSet,outputFile);
    return sgidStack;
  }
 catch (  IOException ex) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,ex);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  MissingOptionException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  ClassNotFoundException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  InstantiationException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  IllegalAccessException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(QueryVCFDumper.class.getSimpleName(),options);
    Logger.getLogger(QueryVCFDumper.class.getName()).fatal(null,e);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  return null;
}",0.9914212844887548
189039,"/** 
 * Compiles the given query string that adheres to the syntax of SeqWareQueryLanguage.g and returns a RPNStack object representing the query.
 * @param query A query string.
 * @return An RPNStack that represents the query.
 */
public static RPNStack compileQuery(String query) throws RecognitionException {
  Logger.getLogger(RPNStack.class.getName()).info(""String_Node_Str"" + query);
  SeqWareQueryLanguageLexer lexer=new SeqWareQueryLanguageLexer(new ANTLRStringStream(query));
  CommonTokenStream tokenStream=new CommonTokenStream(lexer);
  SeqWareQueryLanguageParser parser=new SeqWareQueryLanguageParser(tokenStream);
  SeqWareQueryLanguageParser.query_return parsedInput=parser.query();
  Tree tree=(CommonTree)parsedInput.getTree();
  List<Object> arguments=new ArrayList<Object>();
  abstractSyntaxTreeTraversal(tree,arguments);
  return new RPNStack(arguments);
}","/** 
 * Compiles the given query string that adheres to the syntax of SeqWareQueryLanguage.g and returns a RPNStack object representing the query.
 * @param query A query string.
 * @return An RPNStack that represents the query.
 */
public static RPNStack compileQuery(String query) throws RecognitionException {
  Logger.getLogger(RPNStack.class.getName()).info(""String_Node_Str"" + query);
  try {
    SeqWareQueryLanguageLexerWrapper lexer=new SeqWareQueryLanguageLexerWrapper(new ANTLRStringStream(query));
    CommonTokenStream tokenStream=new CommonTokenStream(lexer);
    SeqWareQueryLanguageParserWrapper parser=new SeqWareQueryLanguageParserWrapper(tokenStream);
    SeqWareQueryLanguageParser.query_return parsedInput=parser.query();
    Tree tree=(CommonTree)parsedInput.getTree();
    List<Object> arguments=new ArrayList<Object>();
    abstractSyntaxTreeTraversal(tree,arguments);
    return new RPNStack(arguments);
  }
 catch (  IllegalArgumentException e) {
    RecognitionException re=(RecognitionException)e.getCause();
    throw re;
  }
}",0.907962771458118
189040,"/** 
 * Ugly and inefficient, just testing this out to get the tests to compile Carries out a numeric GREATERTHAN.
 */
private boolean lesser(Object a,Object b,boolean allowEq){
  if (a == null || b == null) {
    return false;
  }
  if (a instanceof Long || b instanceof Long) {
    if (allowEq) {
      return (Long.valueOf(a.toString())).longValue() <= (Long.valueOf(b.toString())).longValue();
    }
    return (Long.valueOf(a.toString())).longValue() < (Long.valueOf(b.toString())).longValue();
  }
  if (a instanceof Float || b instanceof Float) {
    if (allowEq) {
      return (Float.valueOf(a.toString())).floatValue() <= (Float.valueOf(b.toString())).floatValue();
    }
    return (Float.valueOf(a.toString())).floatValue() < (Float.valueOf(b.toString())).floatValue();
  }
  if (a instanceof Integer || b instanceof Integer) {
    if (allowEq) {
      return (Integer.valueOf(a.toString())).intValue() <= (Integer.valueOf(b.toString())).intValue();
    }
    return (Integer.valueOf(a.toString())).intValue() < (Integer.valueOf(b.toString())).intValue();
  }
  if (a instanceof Double || b instanceof Double) {
    if (allowEq) {
      return (Double.valueOf(a.toString())).doubleValue() <= (Double.valueOf(b.toString())).doubleValue();
    }
    return (Double.valueOf(a.toString())).doubleValue() < (Double.valueOf(b.toString())).doubleValue();
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Ugly and inefficient, just testing this out to get the tests to compile Carries out a numeric GREATERTHAN.
 */
private boolean lesser(Object a,Object b,boolean allowEq){
  if (a == null || b == null) {
    return false;
  }
  if (a instanceof Long) {
    if (allowEq) {
      return (Long.valueOf(a.toString())).longValue() <= (Long.valueOf(b.toString())).longValue();
    }
    return (Long.valueOf(a.toString())).longValue() < (Long.valueOf(b.toString())).longValue();
  }
  if (a instanceof Float) {
    if (allowEq) {
      return (Float.valueOf(a.toString())).floatValue() <= (Float.valueOf(b.toString())).floatValue();
    }
    return (Float.valueOf(a.toString())).floatValue() < (Float.valueOf(b.toString())).floatValue();
  }
  if (a instanceof Integer) {
    if (allowEq) {
      return (Integer.valueOf(a.toString())).intValue() <= (Integer.valueOf(b.toString())).intValue();
    }
    return (Integer.valueOf(a.toString())).intValue() < (Integer.valueOf(b.toString())).intValue();
  }
  if (a instanceof Double) {
    if (allowEq) {
      return (Double.valueOf(a.toString())).doubleValue() <= (Double.valueOf(b.toString())).doubleValue();
    }
    return (Double.valueOf(a.toString())).doubleValue() < (Double.valueOf(b.toString())).doubleValue();
  }
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.967438494934877
189041,"/** 
 * This method allows you to monitor a running Pegasus workflow using a statusCmd (typically something like ""pegasus-status -l dir"" and, if something goes wrong, it will return a ReturnValue with exit status of ReturnValue.FAILURE, ReturnValue.PROCESSING if still running, and ReturnValue.SUCCESS if finished OK. This method will watch the workflow for at least the numbers of cycles specified (each last for 5 seconds) before returning the ReturnValue.
 * @param statusCmd
 * @param statusDir
 * @return boolean indicating success or failure, use other methods to getdetails of failure
 */
public ReturnValue watchWorkflow(String statusCmd,String statusDir,int cycles){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  Log.stdout(""String_Node_Str"" + statusCmd);
  boolean cont=true;
  int currCycle=0;
  try {
    Thread.sleep(20000);
  }
 catch (  InterruptedException ex) {
    Log.error(""String_Node_Str"" + ex.getMessage());
  }
  int failedCounts=statusCounts;
  int finishedCounts=statusCounts;
  Log.stdout(""String_Node_Str"");
  while (cont) {
    ReturnValue statusReturn=getWorkflowState(statusCmd);
    if (statusReturn.getExitStatus() == ReturnValue.FAILURE) {
      failedCounts--;
      if (failedCounts < 1) {
        ret.setExitStatus(ReturnValue.FAILURE);
        ret.setProcessExitStatus(ReturnValue.FAILURE);
        ReturnValue[] failedJobsInfo=getFailedJobsInfo(statusDir);
        Log.stdout(""String_Node_Str"" + failedJobsInfo.length);
        Log.stdout(""String_Node_Str"");
        if (failedJobsInfo == null || failedJobsInfo.length == 0) {
          Log.stderr(""String_Node_Str"");
          ret.setStderr(""String_Node_Str"" + statusDir + ""String_Node_Str"");
        }
 else {
          for (          ReturnValue failedJob : failedJobsInfo) {
            Log.stdout(""String_Node_Str"");
            Log.stdout(failedJob.getStdout());
            ret.setStdout(filterNull(ret.getStdout()) + filterNull(failedJob.getStdout()));
            Log.stderr(""String_Node_Str"");
            Log.stderr(failedJob.getStderr());
            ret.setStderr(filterNull(ret.getStderr()) + filterNull(failedJob.getStderr()));
          }
        }
        Log.error(""String_Node_Str"");
        cont=false;
      }
    }
 else     if (statusReturn.getExitStatus() == ReturnValue.SUCCESS) {
      finishedCounts--;
      if (finishedCounts < 1) {
        Log.stdout(""String_Node_Str"");
        cont=false;
        ret.setExitStatus(ReturnValue.SUCCESS);
        ret.setProcessExitStatus(ReturnValue.SUCCESS);
      }
    }
 else     if (cycles > 0 && currCycle > cycles && currCycle > statusCounts) {
      cont=false;
      ret.setExitStatus(ReturnValue.PROCESSING);
      ret.setProcessExitStatus(ReturnValue.PROCESSING);
    }
    currCycle++;
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException ex) {
      Log.error(""String_Node_Str"" + ex.getMessage());
    }
  }
  ret.getAttributes().put(""String_Node_Str"",new Integer(this.currStep).toString());
  ret.getAttributes().put(""String_Node_Str"",new Integer(this.totalSteps).toString());
  ret.getAttributes().put(""String_Node_Str"",new Integer(this.percentage).toString());
  return (ret);
}","/** 
 * This method allows you to monitor a running Pegasus workflow using a statusCmd (typically something like ""pegasus-status -l dir"" and, if something goes wrong, it will return a ReturnValue with exit status of ReturnValue.FAILURE, ReturnValue.PROCESSING if still running, and ReturnValue.SUCCESS if finished OK. This method will watch the workflow for at least the numbers of cycles specified (each last for 5 seconds) before returning the ReturnValue.
 * @param statusCmd
 * @param statusDir
 * @return boolean indicating success or failure, use other methods to getdetails of failure
 */
public ReturnValue watchWorkflow(String statusCmd,String statusDir,int cycles){
  ReturnValue ret=new ReturnValue(ReturnValue.SUCCESS);
  boolean cont=true;
  int currCycle=0;
  try {
    Thread.sleep(20000);
  }
 catch (  InterruptedException ex) {
    Log.error(""String_Node_Str"" + ex.getMessage());
  }
  int failedCounts=statusCounts;
  int finishedCounts=statusCounts;
  Log.stdout(""String_Node_Str"");
  while (cont) {
    ReturnValue statusReturn=getWorkflowState(statusCmd);
    if (statusReturn.getExitStatus() == ReturnValue.FAILURE) {
      failedCounts--;
      if (failedCounts < 1) {
        ret.setExitStatus(ReturnValue.FAILURE);
        ret.setProcessExitStatus(ReturnValue.FAILURE);
        ReturnValue[] failedJobsInfo=getFailedJobsInfo(statusDir);
        Log.stdout(""String_Node_Str"" + failedJobsInfo.length);
        Log.stdout(""String_Node_Str"");
        if (failedJobsInfo == null || failedJobsInfo.length == 0) {
          Log.stderr(""String_Node_Str"");
          ret.setStderr(""String_Node_Str"" + statusDir + ""String_Node_Str"");
        }
 else {
          for (          ReturnValue failedJob : failedJobsInfo) {
            Log.stdout(""String_Node_Str"");
            Log.stdout(failedJob.getStdout());
            ret.setStdout(filterNull(ret.getStdout()) + filterNull(failedJob.getStdout()));
            Log.stderr(""String_Node_Str"");
            Log.stderr(failedJob.getStderr());
            ret.setStderr(filterNull(ret.getStderr()) + filterNull(failedJob.getStderr()));
          }
        }
        Log.error(""String_Node_Str"");
        cont=false;
      }
    }
 else     if (statusReturn.getExitStatus() == ReturnValue.SUCCESS) {
      finishedCounts--;
      if (finishedCounts < 1) {
        Log.stdout(""String_Node_Str"");
        cont=false;
        ret.setExitStatus(ReturnValue.SUCCESS);
        ret.setProcessExitStatus(ReturnValue.SUCCESS);
      }
    }
 else     if (cycles > 0 && currCycle > cycles && currCycle > statusCounts) {
      cont=false;
      ret.setExitStatus(ReturnValue.PROCESSING);
      ret.setProcessExitStatus(ReturnValue.PROCESSING);
    }
    currCycle++;
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException ex) {
      Log.error(""String_Node_Str"" + ex.getMessage());
    }
  }
  ret.getAttributes().put(""String_Node_Str"",new Integer(this.currStep).toString());
  ret.getAttributes().put(""String_Node_Str"",new Integer(this.totalSteps).toString());
  ret.getAttributes().put(""String_Node_Str"",new Integer(this.percentage).toString());
  return (ret);
}",0.9928763653633054
189042,"public <T>T getTermValue(Class<T> type){
  if (Constants.SETTINGS_MAP != null && Constants.SETTINGS_MAP.containsKey(term_name)) {
    String value=Constants.SETTINGS_MAP.get(term_name);
    if (type.equals(Boolean.class)) {
      Boolean parseBoolean=Boolean.parseBoolean(value);
      return (T)parseBoolean;
    }
 else     if (type.equals(Map.class)) {
      if (value.equalsIgnoreCase(""String_Node_Str"") || value.equalsIgnoreCase(""String_Node_Str"")) {
        return (T)LOCAL;
      }
      return (T)Maps.newHashMap(ImmutableMap.<String,String>builder().put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).build());
    }
  }
  return (T)term_default;
}","public <T>T getTermValue(Class<T> type){
  if (Constants.SETTINGS_MAP != null && Constants.SETTINGS_MAP.containsKey(term_name)) {
    String value=Constants.SETTINGS_MAP.get(term_name);
    if (type.equals(Boolean.class)) {
      Boolean parseBoolean=Boolean.parseBoolean(value);
      return (T)parseBoolean;
    }
 else     if (type.equals(Map.class)) {
      if (value.equalsIgnoreCase(""String_Node_Str"") || value.equalsIgnoreCase(""String_Node_Str"")) {
        return (T)LOCAL;
      }
      return (T)Maps.newHashMap(ImmutableMap.<String,String>builder().put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).put(""String_Node_Str"",Constants.SETTINGS_MAP.get(""String_Node_Str"" + value + ""String_Node_Str"")).build());
    }
 else {
      return (T)value;
    }
  }
  return (T)term_default;
}",0.985807441503644
189043,"/** 
 * Set the settings map, overriding hard-coded values for our constants.
 * @param SETTINGS_MAP
 */
public static void setSETTINGS_MAP(Map<String,String> SETTINGS_MAP){
  Constants.SETTINGS_MAP=SETTINGS_MAP;
}","/** 
 * Set the settings map, overriding hard-coded values for our constants.
 * @param SETTINGS_MAP
 */
public static void setSETTINGS_MAP(Map<String,String> SETTINGS_MAP){
  Constants.SETTINGS_MAP=SETTINGS_MAP;
  Logger.getLogger(Constants.class.getName()).info(""String_Node_Str"" + Constants.Term.HBASE_PROPERTIES.getTermValue(Map.class).toString() + ""String_Node_Str""+ Constants.Term.NAMESPACE.getTermValue(String.class));
}",0.6677067082683308
189044,"public HBaseStorage(SerializationInterface i){
  if (DEBUG) {
    minMap=new HashMap<String,Integer>();
    maxMap=new HashMap<String,Integer>();
    countMap=new HashMap<String,Long>();
  }
  this.serializer=i;
  this.config=HBaseConfiguration.create();
  configureHBaseConfig(config);
  try {
    Logger.getLogger(HBaseStorage.class.getName()).info(""String_Node_Str"" + HBaseStorage.class.getSimpleName() + ""String_Node_Str""+ serializer.getClass().getSimpleName()+ ""String_Node_Str""+ java.net.InetAddress.getLocalHost().getHostName());
    HBaseAdmin hba=new HBaseAdmin(config);
    if (!PERSIST) {
      Logger.getLogger(HBaseStorage.class.getName()).info(""String_Node_Str"");
      hba.disableTables(TEST_TABLE_PREFIX + ""String_Node_Str"");
      hba.deleteTables(TEST_TABLE_PREFIX + ""String_Node_Str"");
    }
    for (    String s : super.directBIMap.values()) {
      createTable(s,hba);
    }
    HTableDescriptor[] listTables=hba.listTables(TEST_TABLE_PREFIX + ""String_Node_Str"");
    for (    HTableDescriptor des : listTables) {
      String nameAsString=des.getNameAsString();
      if (!tableMap.containsKey(nameAsString)) {
        tableMap.put(nameAsString,new HTable(config,nameAsString));
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(HBaseStorage.class.getName()).fatal(""String_Node_Str"",ex);
  }
}","public HBaseStorage(SerializationInterface i){
  if (DEBUG) {
    minMap=new HashMap<String,Integer>();
    maxMap=new HashMap<String,Integer>();
    countMap=new HashMap<String,Long>();
  }
  this.serializer=i;
  this.config=HBaseConfiguration.create();
  configureHBaseConfig(config);
  Logger.getLogger(HBaseStorage.class.getName()).info(""String_Node_Str"" + Constants.Term.HBASE_PROPERTIES.getTermValue(Map.class).toString() + ""String_Node_Str""+ Constants.Term.NAMESPACE.getTermValue(String.class));
  try {
    Logger.getLogger(HBaseStorage.class.getName()).info(""String_Node_Str"" + HBaseStorage.class.getSimpleName() + ""String_Node_Str""+ serializer.getClass().getSimpleName()+ ""String_Node_Str""+ java.net.InetAddress.getLocalHost().getHostName());
    HBaseAdmin hba=new HBaseAdmin(config);
    if (!PERSIST) {
      Logger.getLogger(HBaseStorage.class.getName()).info(""String_Node_Str"");
      hba.disableTables(TEST_TABLE_PREFIX + ""String_Node_Str"");
      hba.deleteTables(TEST_TABLE_PREFIX + ""String_Node_Str"");
    }
    for (    String s : super.directBIMap.values()) {
      createTable(s,hba);
    }
    HTableDescriptor[] listTables=hba.listTables(TEST_TABLE_PREFIX + ""String_Node_Str"");
    for (    HTableDescriptor des : listTables) {
      String nameAsString=des.getNameAsString();
      if (!tableMap.containsKey(nameAsString)) {
        tableMap.put(nameAsString,new HTable(config,nameAsString));
      }
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(HBaseStorage.class.getName()).fatal(""String_Node_Str"",ex);
  }
}",0.9250520471894518
189045,"private void baseMapperSetup(Context context){
  Logger.getLogger(MRFeatureSetCountPlugin.class.getName()).info(""String_Node_Str"");
  Configuration conf=context.getConfiguration();
  String[] strings=conf.getStrings(AbstractMRHBaseBatchedPlugin.EXT_PARAMETERS);
  final String mapParameter=strings[4];
  if (mapParameter != null && !mapParameter.isEmpty()) {
    Map<String,String> settingsMap=(Map<String,String>)AbstractMRHBaseBatchedPlugin.handleDeserialization(Base64.decodeBase64(mapParameter))[0];
    Logger.getLogger(MRFeatureSetCountPlugin.class.getName()).info(""String_Node_Str"" + settingsMap.size() + ""String_Node_Str"");
    Constants.setSETTINGS_MAP(settingsMap);
  }
  final String externalParameters=strings[0];
  if (externalParameters != null && !externalParameters.isEmpty()) {
    this.ext_parameters=AbstractMRHBaseBatchedPlugin.handleDeserialization(Base64.decodeBase64(externalParameters));
  }
  final String internalParameters=strings[1];
  if (internalParameters != null && !internalParameters.isEmpty()) {
    this.int_parameters=AbstractMRHBaseBatchedPlugin.handleDeserialization(Base64.decodeBase64(internalParameters));
  }
  final String sourceSetParameter=strings[2];
  if (sourceSetParameter != null && !sourceSetParameter.isEmpty()) {
    this.sourceSet=SWQEFactory.getSerialization().deserialize(Base64.decodeBase64(sourceSetParameter),FeatureSet.class);
  }
  final String destSetParameter=strings[3];
  if (destSetParameter != null && !destSetParameter.isEmpty()) {
    this.destSet=SWQEFactory.getSerialization().deserialize(Base64.decodeBase64(destSetParameter),FeatureSet.class);
  }
}","private void baseMapperSetup(Context context){
  Logger.getLogger(MRFeatureSetCountPlugin.class.getName()).info(""String_Node_Str"");
  Configuration conf=context.getConfiguration();
  String[] strings=conf.getStrings(AbstractMRHBaseBatchedPlugin.EXT_PARAMETERS);
  Logger.getLogger(QEMapper.class.getName()).info(""String_Node_Str"" + Constants.Term.HBASE_PROPERTIES.getTermValue(Map.class).toString() + ""String_Node_Str""+ Constants.Term.NAMESPACE.getTermValue(String.class));
  final String mapParameter=strings[4];
  if (mapParameter != null && !mapParameter.isEmpty()) {
    Map<String,String> settingsMap=(Map<String,String>)AbstractMRHBaseBatchedPlugin.handleDeserialization(Base64.decodeBase64(mapParameter))[0];
    if (settingsMap != null) {
      Logger.getLogger(MRFeatureSetCountPlugin.class.getName()).info(""String_Node_Str"" + settingsMap.size() + ""String_Node_Str"");
      Constants.setSETTINGS_MAP(settingsMap);
    }
  }
  Logger.getLogger(QEMapper.class.getName()).info(""String_Node_Str"" + Constants.Term.HBASE_PROPERTIES.getTermValue(Map.class).toString() + ""String_Node_Str""+ Constants.Term.NAMESPACE.getTermValue(String.class));
  final String externalParameters=strings[0];
  if (externalParameters != null && !externalParameters.isEmpty()) {
    this.ext_parameters=AbstractMRHBaseBatchedPlugin.handleDeserialization(Base64.decodeBase64(externalParameters));
  }
  final String internalParameters=strings[1];
  if (internalParameters != null && !internalParameters.isEmpty()) {
    this.int_parameters=AbstractMRHBaseBatchedPlugin.handleDeserialization(Base64.decodeBase64(internalParameters));
  }
  final String sourceSetParameter=strings[2];
  if (sourceSetParameter != null && !sourceSetParameter.isEmpty()) {
    this.sourceSet=SWQEFactory.getSerialization().deserialize(Base64.decodeBase64(sourceSetParameter),FeatureSet.class);
  }
  final String destSetParameter=strings[3];
  if (destSetParameter != null && !destSetParameter.isEmpty()) {
    this.destSet=SWQEFactory.getSerialization().deserialize(Base64.decodeBase64(destSetParameter),FeatureSet.class);
  }
}",0.8746968472109944
189046,"public static void main(String[] args){
  try {
    SGID mainMethod=ReferenceCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    System.exit(FeatureImporter.EXIT_CODE_EXISTING_NAME);
  }
}","public static void main(String[] args){
  try {
    SGID mainMethod=ReferenceCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    Logger.getLogger(ReferenceCreator.class.getName()).fatal(e);
    System.exit(FeatureImporter.EXIT_CODE_EXISTING_NAME);
  }
}",0.9037037037037036
189047,"public static void main(String[] args){
  try {
    SGID mainMethod=TagSetCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    System.exit(FeatureImporter.EXIT_CODE_EXISTING_NAME);
  }
}","public static void main(String[] args){
  try {
    SGID mainMethod=TagSetCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    Logger.getLogger(ReferenceCreator.class.getName()).fatal(e);
    System.exit(FeatureImporter.EXIT_CODE_EXISTING_NAME);
  }
}",0.9028400597907325
189048,"/** 
 * Carries out an exact match.
 */
private boolean equal(Object a,Object b){
  return a.equals(b);
}","/** 
 * Carries out an exact match.
 */
private boolean equal(Object a,Object b){
  if (a == null || b == null) {
    return a == null && b == null;
  }
  return a.equals(b);
}",0.7473309608540926
189049,"@Override public void run(){
  FeatureSet fSet=SWQEFactory.getQueryInterface().getAtomBySGID(FeatureSet.class,this.featureSetID);
  this.modelManager=SWQEFactory.getModelManager();
  modelManager.persist(fSet);
  if (this.getTagSetIDs() != null) {
    for (    SGID tagSetID : this.getTagSetIDs()) {
      this.potentialTagSets.add(SWQEFactory.getQueryInterface().getLatestAtomBySGID(tagSetID,TagSet.class));
    }
  }
  this.adHocSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(this.getAdhoctagset(),TagSet.class);
  modelManager.persist(adHocSet);
  BufferedReader inputStream=null;
  try {
    pmi.getLock();
    if (compressed) {
      inputStream=handleCompressedInput(input);
    }
 else {
      inputStream=new BufferedReader(new FileReader(input));
    }
    String l;
    Feature.Builder fBuilder=modelManager.buildFeature();
    int count=0;
    while ((l=inputStream.readLine()) != null) {
      count++;
      if (count % this.getBatch_size() == 0) {
        modelManager.flush();
        modelManager.clear();
        modelManager.persist(adHocSet);
        modelManager.persist(fSet);
      }
      if (!l.startsWith(""String_Node_Str"")) {
        String[] t=l.split(""String_Node_Str"");
        fBuilder.setSeqid(t[0]);
        Set<Tag> tagSet=new HashSet<Tag>();
        tagSet.add(getTagSpec(t[0]));
        tagSet.add(getTagSpec(ImportConstants.VCF_REFERENCE_BASE).toBuilder().setValue(t[3].toUpperCase()).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_CONSENSUS_BASE).toBuilder().setValue(t[4].toUpperCase()).build());
        Tag calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(t[4].toUpperCase()).build();
        tagSet.add(calledTag);
        if (!""String_Node_Str"".equals(t[5])) {
          fBuilder.setScore(Double.parseDouble(t[5]));
        }
        if (!""String_Node_Str"".equals(t[2])) {
          tagSet.add(getTagSpec(ImportConstants.VCF_SECOND_ID).toBuilder().setValue(t[2]).build());
        }
        String calledBase=t[4].toUpperCase();
        if (t[4].toUpperCase().length() > 1 && t[4].toUpperCase().contains(""String_Node_Str"")) {
          tagSet.remove(calledTag);
          if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else {
          }
          calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(calledBase).build();
          tagSet.add(calledTag);
        }
        fBuilder.setType(ImportConstants.VCF_SNV);
        tagSet.add(getTagSpec(ImportConstants.VCF_SNV).toBuilder().build());
        if (!""String_Node_Str"".equals(t[1])) {
          Integer pos=Integer.parseInt(t[1]);
          fBuilder.setStart(pos - 1);
          fBuilder.setStop(pos);
        }
        tagSet.add(getTagSpec(ImportConstants.VCF_FILTER).toBuilder().setValue(t[6]).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_INFO).toBuilder().setValue(t[7]).build());
        boolean af1LtHalf=false;
        boolean fqLt0=false;
        String[] tags=t[7].split(""String_Node_Str"");
        for (        String tag : tags) {
          if (tag.contains(""String_Node_Str"")) {
            String[] kv=tag.split(""String_Node_Str"");
            tagSet.add(getTagSpec(kv[0]).toBuilder().setValue(kv[1]).build());
            if (""String_Node_Str"".equals(kv[0])) {
              tagSet.add(getTagSpec(ImportConstants.VCF_READ_COUNTS).toBuilder().setValue(kv[1]).build());
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float fq=Float.parseFloat(kv[1]);
              if (fq < 0) {
                tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
                fqLt0=true;
              }
 else {
                tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
              }
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float af1=Float.parseFloat(kv[1]);
              if (af1 < 0.5) {
                af1LtHalf=true;
              }
            }
          }
 else {
          }
        }
        if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
        }
 else         if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
        }
        if (af1LtHalf && fqLt0) {
          System.out.println(""String_Node_Str"");
        }
 else {
          Feature build=fBuilder.build();
          for (          Tag tag : tagSet) {
            build.associateTag(tag);
          }
          fSet.add(build);
          if (count % this.getBatch_size() == 0) {
            System.out.println(new Date().toString() + workerName + ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ build.getStart()+ ""String_Node_Str""+ build.getStop()+ ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ count);
          }
        }
        fBuilder=modelManager.buildFeature();
      }
    }
    inputStream.close();
  }
 catch (  Exception e) {
    Logger.getLogger(VCFVariantImportWorker.class.getName()).fatal(""String_Node_Str"" + input,e);
    throw new RuntimeException(""String_Node_Str"");
  }
 finally {
    modelManager.close();
    pmi.releaseLock();
  }
}","@Override public void run(){
  FeatureSet fSet=SWQEFactory.getQueryInterface().getAtomBySGID(FeatureSet.class,this.featureSetID);
  this.modelManager=SWQEFactory.getModelManager();
  modelManager.persist(fSet);
  if (this.getTagSetIDs() != null) {
    for (    SGID tagSetID : this.getTagSetIDs()) {
      this.potentialTagSets.add(SWQEFactory.getQueryInterface().getLatestAtomBySGID(tagSetID,TagSet.class));
    }
  }
  this.adHocSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(this.getAdhoctagset(),TagSet.class);
  modelManager.persist(adHocSet);
  BufferedReader inputStream=null;
  try {
    pmi.getLock();
    if (compressed) {
      inputStream=handleCompressedInput(input);
    }
 else {
      inputStream=new BufferedReader(new FileReader(input));
    }
    String l;
    Feature.Builder fBuilder=modelManager.buildFeature();
    int count=0;
    while ((l=inputStream.readLine()) != null) {
      count++;
      if (count % this.getBatch_size() == 0) {
        modelManager.flush();
        modelManager.clear();
        modelManager.persist(adHocSet);
        modelManager.persist(fSet);
      }
      if (!l.startsWith(""String_Node_Str"")) {
        String[] t=l.split(""String_Node_Str"");
        fBuilder.setSeqid(t[0]);
        Set<Tag> tagSet=new HashSet<Tag>();
        tagSet.add(getTagSpec(t[0]));
        tagSet.add(getTagSpec(ImportConstants.VCF_REFERENCE_BASE).toBuilder().setValue(t[3].toUpperCase()).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_CONSENSUS_BASE).toBuilder().setValue(t[4].toUpperCase()).build());
        Tag calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(t[4].toUpperCase()).build();
        tagSet.add(calledTag);
        if (!""String_Node_Str"".equals(t[5])) {
          fBuilder.setScore(Double.parseDouble(t[5]));
        }
        if (!""String_Node_Str"".equals(t[2])) {
          tagSet.add(getTagSpec(ImportConstants.VCF_SECOND_ID).toBuilder().setValue(t[2]).build());
        }
        String calledBase=t[4].toUpperCase();
        if (t[4].toUpperCase().length() > 1 && t[4].toUpperCase().contains(""String_Node_Str"")) {
          tagSet.remove(calledTag);
          if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else {
          }
          calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(calledBase).build();
          tagSet.add(calledTag);
        }
        fBuilder.setType(ImportConstants.VCF_SNV);
        tagSet.add(getTagSpec(ImportConstants.VCF_SNV).toBuilder().build());
        if (!""String_Node_Str"".equals(t[1])) {
          Integer pos=Integer.parseInt(t[1]);
          fBuilder.setStart(pos - 1);
          fBuilder.setStop(pos);
        }
        tagSet.add(getTagSpec(ImportConstants.VCF_FILTER).toBuilder().setValue(t[6]).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_INFO).toBuilder().setValue(t[7]).build());
        boolean af1LtHalf=false;
        boolean fqLt0=false;
        String[] tags=t[7].split(""String_Node_Str"");
        for (        String tag : tags) {
          if (tag.contains(""String_Node_Str"")) {
            String[] kv=tag.split(""String_Node_Str"");
            tagSet.add(getTagSpec(kv[0]).toBuilder().setValue(kv[1]).build());
            if (""String_Node_Str"".equals(kv[0])) {
              tagSet.add(getTagSpec(ImportConstants.VCF_READ_COUNTS).toBuilder().setValue(kv[1]).build());
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float fq=Float.parseFloat(kv[1]);
              if (fq < 0) {
                tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
                fqLt0=true;
              }
 else {
                tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
              }
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float af1=Float.parseFloat(kv[1]);
              if (af1 < 0.5) {
                af1LtHalf=true;
              }
            }
          }
 else {
            tagSet.add(getTagSpec(tag).toBuilder().build());
          }
        }
        if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
        }
 else         if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
        }
        if (af1LtHalf && fqLt0) {
          System.out.println(""String_Node_Str"");
        }
 else {
          Feature build=fBuilder.build();
          for (          Tag tag : tagSet) {
            build.associateTag(tag);
          }
          fSet.add(build);
          if (count % this.getBatch_size() == 0) {
            System.out.println(new Date().toString() + workerName + ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ build.getStart()+ ""String_Node_Str""+ build.getStop()+ ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ count);
          }
        }
        fBuilder=modelManager.buildFeature();
      }
    }
    inputStream.close();
  }
 catch (  Exception e) {
    Logger.getLogger(VCFVariantImportWorker.class.getName()).fatal(""String_Node_Str"" + input,e);
    throw new RuntimeException(""String_Node_Str"");
  }
 finally {
    modelManager.close();
    pmi.releaseLock();
  }
}",0.9950889622413654
189050,"public void export(){
  if (args.length < 1 || args.length > 2) {
    System.err.println(args.length + ""String_Node_Str"");
    System.out.println(DenisTest.class.getSimpleName() + ""String_Node_Str"");
    System.exit(-1);
  }
  SGID sgid=Utility.parseSGID(args[0]);
  FeatureSet fSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(sgid,FeatureSet.class);
  if (fSet == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-2);
  }
  QueryFuture<FeatureSet> future=SWQEFactory.getQueryInterface().getFeatures(0,fSet);
  BufferedWriter outputStream=null;
  try {
    if (args.length == 2) {
      outputStream=new BufferedWriter(new FileWriter(args[1]));
    }
 else {
      outputStream=new BufferedWriter(new OutputStreamWriter(System.out));
    }
    outputStream.append(""String_Node_Str"");
    boolean caughtNonVCF=false;
    for (    Feature feature : future.get()) {
      outputStream.append(feature.getSeqid() + ""String_Node_Str"" + (feature.getStart() + 1)+ ""String_Node_Str"");
      if (feature.getTagByKey(ImportConstants.VCF_SECOND_ID) == null) {
        outputStream.append(""String_Node_Str"");
      }
 else {
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_SECOND_ID).getValue().toString() + ""String_Node_Str"");
      }
      try {
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_REFERENCE_BASE).getValue().toString() + ""String_Node_Str"");
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_CALLED_BASE).getValue().toString() + ""String_Node_Str"");
        outputStream.append(feature.getScore() + ""String_Node_Str"");
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_FILTER).getValue().toString() + ""String_Node_Str"");
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_INFO).getValue().toString());
      }
 catch (      NullPointerException npe) {
        if (!caughtNonVCF) {
          Logger.getLogger(DenisTest.class.getName()).log(Level.INFO,""String_Node_Str"");
        }
        caughtNonVCF=true;
      }
      outputStream.newLine();
    }
  }
 catch (  Exception e) {
    Logger.getLogger(DenisTest.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    System.exit(-1);
  }
 finally {
    try {
      outputStream.flush();
      outputStream.close();
      SWQEFactory.getStorage().closeStorage();
    }
 catch (    IOException ex) {
      Logger.getLogger(DenisTest.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}","public void export(){
  SGID sgid=Utility.parseSGID(""String_Node_Str"");
  FeatureSet fSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(sgid,FeatureSet.class);
  if (fSet == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-2);
  }
  QueryFuture<FeatureSet> future=SWQEFactory.getQueryInterface().getFeaturesByAttributes(1,fSet,new RPNStack(new RPNStack.TagOccurrence(""String_Node_Str"")));
  BufferedWriter outputStream=null;
  try {
    if (args.length == 2) {
      outputStream=new BufferedWriter(new FileWriter(args[1]));
    }
 else {
      outputStream=new BufferedWriter(new OutputStreamWriter(System.out));
    }
    outputStream.append(""String_Node_Str"");
    boolean caughtNonVCF=false;
    for (    Feature feature : future.get()) {
      outputStream.append(feature.getSeqid() + ""String_Node_Str"" + (feature.getStart() + 1)+ ""String_Node_Str"");
      if (feature.getTagByKey(ImportConstants.VCF_SECOND_ID) == null) {
        outputStream.append(""String_Node_Str"");
      }
 else {
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_SECOND_ID).getValue().toString() + ""String_Node_Str"");
      }
      try {
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_REFERENCE_BASE).getValue().toString() + ""String_Node_Str"");
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_CALLED_BASE).getValue().toString() + ""String_Node_Str"");
        outputStream.append(feature.getScore() + ""String_Node_Str"");
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_FILTER).getValue().toString() + ""String_Node_Str"");
        outputStream.append(feature.getTagByKey(ImportConstants.VCF_INFO).getValue().toString());
      }
 catch (      NullPointerException npe) {
        if (!caughtNonVCF) {
          Logger.getLogger(DenisTest.class.getName()).log(Level.INFO,""String_Node_Str"");
        }
        caughtNonVCF=true;
      }
      outputStream.newLine();
    }
  }
 catch (  Exception e) {
    Logger.getLogger(DenisTest.class.getName()).log(Level.SEVERE,""String_Node_Str"",e);
    System.exit(-1);
  }
 finally {
    try {
      outputStream.flush();
      outputStream.close();
      SWQEFactory.getStorage().closeStorage();
    }
 catch (    IOException ex) {
      Logger.getLogger(DenisTest.class.getName()).log(Level.SEVERE,""String_Node_Str"",ex);
    }
  }
}",0.9371760315156542
189051,"private long convertToGB(ContentSummary contentSummary){
  long spaceConsumedinGB=contentSummary.getLength() / 1024 / 1024/ 1024/ 1024;
  return spaceConsumedinGB;
}","private long convertToGB(ContentSummary contentSummary){
  long spaceConsumedinGB=contentSummary.getLength() / 1024 / 1024/ 1024;
  return spaceConsumedinGB;
}",0.9814814814814816
189052,"public void benchmark() throws IOException {
  if (args.length != 2) {
    System.err.println(args.length + ""String_Node_Str"");
    System.out.println(Poster.class.getSimpleName() + ""String_Node_Str"");
    System.exit(-1);
  }
  File outputFile=Utility.checkOutput(args[0]);
  Reference reference=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(""String_Node_Str"",Reference.class);
  if (reference == null) {
    SGID refID=ReferenceCreator.mainMethod(new String[]{HG_19});
    reference=SWQEFactory.getQueryInterface().getAtomBySGID(Reference.class,refID);
  }
  keyValues.put(""String_Node_Str"",reference.getSGID().getRowKey());
  recordSpace(""String_Node_Str"");
  Utility.writeKeyValueFile(outputFile,keyValues);
  int count=0;
  File fileDirectory=new File(args[1]);
  File[] listFiles=fileDirectory.listFiles();
  SGID fSet_sgid=null;
  for (  File inputFile : listFiles) {
    Date startDate=new Date();
    keyValues.put(count + ""String_Node_Str"",Long.toString(startDate.getTime()));
    keyValues.put(count + ""String_Node_Str"",startDate.toString());
    if (fSet_sgid == null) {
      fSet_sgid=SOFeatureImporter.runMain(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",inputFile.getAbsolutePath(),""String_Node_Str"",reference.getSGID().getRowKey()});
    }
 else {
      fSet_sgid=SOFeatureImporter.runMain(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",inputFile.getAbsolutePath(),""String_Node_Str"",reference.getSGID().getRowKey(),""String_Node_Str"",fSet_sgid.getRowKey()});
    }
    FeatureSet fSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(fSet_sgid,FeatureSet.class);
    keyValues.put(count + ""String_Node_Str"",fSet.getSGID().getRowKey());
    keyValues.put(count + ""String_Node_Str"",Long.toString(fSet.getSGID().getBackendTimestamp().getTime()));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    long fsetcount=fSet.getCount();
    keyValues.put(count + ""String_Node_Str"",Long.toString(fsetcount));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    Date endDate=new Date();
    keyValues.put(count + ""String_Node_Str"",Long.toString(endDate.getTime()));
    keyValues.put(count + ""String_Node_Str"",endDate.toString());
    recordSpace(String.valueOf(count));
    Utility.writeKeyValueFile(outputFile,keyValues);
  }
}","public void benchmark() throws IOException {
  if (args.length != 2) {
    System.err.println(args.length + ""String_Node_Str"");
    System.out.println(Poster.class.getSimpleName() + ""String_Node_Str"");
    System.exit(-1);
  }
  File outputFile=Utility.checkOutput(args[0]);
  Reference reference=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(""String_Node_Str"",Reference.class);
  if (reference == null) {
    SGID refID=ReferenceCreator.mainMethod(new String[]{HG_19});
    reference=SWQEFactory.getQueryInterface().getAtomBySGID(Reference.class,refID);
  }
  keyValues.put(""String_Node_Str"",reference.getSGID().getRowKey());
  recordSpace(""String_Node_Str"");
  Utility.writeKeyValueFile(outputFile,keyValues);
  int count=0;
  File fileDirectory=new File(args[1]);
  File[] listFiles=fileDirectory.listFiles();
  SGID fSet_sgid=null;
  for (  File inputFile : listFiles) {
    Date startDate=new Date();
    keyValues.put(count + ""String_Node_Str"",Long.toString(startDate.getTime()));
    keyValues.put(count + ""String_Node_Str"",startDate.toString());
    if (fSet_sgid == null) {
      fSet_sgid=SOFeatureImporter.runMain(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",inputFile.getAbsolutePath(),""String_Node_Str"",String.valueOf(BENCHMARKING_BATCH_SIZE),""String_Node_Str"",reference.getSGID().getRowKey()});
    }
 else {
      fSet_sgid=SOFeatureImporter.runMain(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",inputFile.getAbsolutePath(),""String_Node_Str"",String.valueOf(BENCHMARKING_BATCH_SIZE),""String_Node_Str"",reference.getSGID().getRowKey(),""String_Node_Str"",fSet_sgid.getRowKey()});
    }
    FeatureSet fSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(fSet_sgid,FeatureSet.class);
    keyValues.put(count + ""String_Node_Str"",fSet.getSGID().getRowKey());
    keyValues.put(count + ""String_Node_Str"",Long.toString(fSet.getSGID().getBackendTimestamp().getTime()));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    long fsetcount=fSet.getCount();
    keyValues.put(count + ""String_Node_Str"",Long.toString(fsetcount));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    QueryFuture<FeatureSet> queryFuture=SWQEFactory.getQueryInterface().getFeaturesByAttributes(1,fSet,new RPNStack(new RPNStack.FeatureAttribute(""String_Node_Str""),new RPNStack.Constant(100.30d),RPNStack.Operation.EQUAL));
    FeatureSet resultSet=queryFuture.get();
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    fsetcount=(int)resultSet.getCount();
    keyValues.put(count + ""String_Node_Str"",Long.toString(fsetcount));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    queryFuture=SWQEFactory.getQueryInterface().getFeatures(1,fSet);
    resultSet=queryFuture.get();
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    fsetcount=(int)resultSet.getCount();
    keyValues.put(count + ""String_Node_Str"",Long.toString(fsetcount));
    keyValues.put(count + ""String_Node_Str"",Long.toString(System.currentTimeMillis()));
    Date endDate=new Date();
    keyValues.put(count + ""String_Node_Str"",Long.toString(endDate.getTime()));
    keyValues.put(count + ""String_Node_Str"",endDate.toString());
    recordSpace(String.valueOf(count));
    Utility.writeKeyValueFile(outputFile,keyValues);
    count++;
  }
}",0.7909774436090226
189053,"private void recordSpace(String key) throws IOException {
  try {
    Configuration conf=new Configuration();
    HBaseStorage.configureHBaseConfig(conf);
    HBaseConfiguration.addHbaseResources(conf);
    FileSystem fs=FileSystem.get(conf);
    Path homeDirectory=fs.getHomeDirectory();
    Path root=homeDirectory.getParent().getParent();
    Path hbase=new Path(root,""String_Node_Str"");
    ContentSummary contentSummary=fs.getContentSummary(hbase);
    long spaceConsumedinGB=convertToGB(contentSummary);
    keyValues.put(key + ""String_Node_Str"",Long.toString(spaceConsumedinGB));
    if (spaceConsumedinGB > CUT_OFF) {
      return;
    }
    Path featureTable=new Path(hbase,""String_Node_Str"" + Constants.NAMESPACE + ""String_Node_Str""+ HG_19);
    contentSummary=fs.getContentSummary(featureTable);
    spaceConsumedinGB=convertToGB(contentSummary);
    keyValues.put(key + ""String_Node_Str"",Long.toString(spaceConsumedinGB));
  }
 catch (  FileNotFoundException e) {
  }
}","private void recordSpace(String key) throws IOException {
  try {
    Configuration conf=new Configuration();
    HBaseStorage.configureHBaseConfig(conf);
    HBaseConfiguration.addHbaseResources(conf);
    FileSystem fs=FileSystem.get(conf);
    Path homeDirectory=fs.getHomeDirectory();
    Path root=homeDirectory.getParent().getParent();
    Path hbase=new Path(root,""String_Node_Str"");
    ContentSummary contentSummary=fs.getContentSummary(hbase);
    long spaceConsumedinGB=convertToGB(contentSummary);
    keyValues.put(key + ""String_Node_Str"",Long.toString(spaceConsumedinGB));
    Path featureTable=new Path(hbase,Constants.NAMESPACE + ""String_Node_Str"" + HG_19);
    contentSummary=fs.getContentSummary(featureTable);
    spaceConsumedinGB=convertToGB(contentSummary);
    keyValues.put(key + ""String_Node_Str"",Long.toString(spaceConsumedinGB));
  }
 catch (  FileNotFoundException e) {
  }
}",0.9575371549893844
189054,"/** 
 * Interface for mock-testing
 * @param args
 * @return
 */
public static SGID runMain(String[] args){
  Options options=new Options();
  Option option1=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired().hasArgs(1).create(WORKER_CHAR_PARAM);
  options.addOption(option1);
  Option option2=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(NUMBER_THREADS_PARAM);
  options.addOption(option2);
  Option option3=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(COMPRESSED_PARAM);
  options.addOption(option3);
  Option option4=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired().hasArgs(1).create(REFERENCE_ID_PARAM);
  options.addOption(option4);
  Option option5=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withValueSeparator(VALUE_SEPARATOR_PARAM).isRequired().create(INPUT_FILES_PARAM);
  options.addOption(option5);
  Option option6=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(OUTPUT_FILE_PARAM);
  options.addOption(option6);
  Option option7=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").withValueSeparator(VALUE_SEPARATOR_PARAM).hasArgs().create(TAGSETS_PARAM);
  options.addOption(option7);
  Option option8=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().create(ADHOC_TAGSETS_PARAM);
  options.addOption(option8);
  Option option9=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"" + BATCH_SIZE + ""String_Node_Str"").hasArgs(1).create(BATCH_SIZE_PARAM);
  options.addOption(option9);
  try {
    CommandLineParser parser=new PosixParser();
    CommandLine cmd=parser.parse(options,args);
    String worker=cmd.getOptionValue(WORKER_CHAR_PARAM);
    int threads=Integer.valueOf(cmd.getOptionValue(NUMBER_THREADS_PARAM,""String_Node_Str""));
    boolean compressed=Boolean.valueOf(cmd.getOptionValue(COMPRESSED_PARAM,""String_Node_Str""));
    SGID referenceSGID=Utility.parseSGID(cmd.getOptionValue(REFERENCE_ID_PARAM));
    int batch_size=Integer.valueOf(cmd.getOptionValue(BATCH_SIZE_PARAM,String.valueOf(BATCH_SIZE)));
    List<String> inputFiles=new ArrayList<String>();
    inputFiles.addAll(Arrays.asList(cmd.getOptionValues(INPUT_FILES_PARAM)));
    File outputFile=null;
    if (cmd.hasOption(OUTPUT_FILE_PARAM)) {
      String outputFilename=cmd.getOptionValue(OUTPUT_FILE_PARAM);
      outputFile=Utility.checkOutput(outputFilename);
    }
    List<SGID> tagSetSGIDs=new ArrayList<SGID>();
    if (cmd.hasOption(TAGSETS_PARAM)) {
      List<String> tagSetIDs=new ArrayList<String>();
      tagSetIDs.addAll(Arrays.asList(cmd.getOptionValues(TAGSETS_PARAM)));
      for (      String ID : tagSetIDs) {
        tagSetSGIDs.add(Utility.parseSGID(ID));
      }
    }
    SGID adhocSGID=cmd.hasOption(ADHOC_TAGSETS_PARAM) ? Utility.parseSGID(cmd.getOptionValue(ADHOC_TAGSETS_PARAM)) : null;
    SGID mainMethod=FeatureImporter.performImport(referenceSGID,threads,inputFiles,worker,compressed,outputFile,tagSetSGIDs,adhocSGID,batch_size);
    if (mainMethod == null) {
      return null;
    }
    return mainMethod;
  }
 catch (  IOException ex) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SOFeatureImporter.class.getSimpleName(),options);
    Logger.getLogger(SOFeatureImporter.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  MissingOptionException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SOFeatureImporter.class.getSimpleName(),options);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SOFeatureImporter.class.getSimpleName(),options);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  return null;
}","/** 
 * Interface for mock-testing
 * @param args
 * @return
 */
public static SGID runMain(String[] args){
  Options options=new Options();
  Option option1=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired().hasArgs(1).create(WORKER_CHAR_PARAM);
  options.addOption(option1);
  Option option2=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(NUMBER_THREADS_PARAM);
  options.addOption(option2);
  Option option3=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").create(COMPRESSED_PARAM);
  options.addOption(option3);
  Option option4=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired().hasArgs(1).create(REFERENCE_ID_PARAM);
  options.addOption(option4);
  Option option5=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().withValueSeparator(VALUE_SEPARATOR_PARAM).isRequired().create(INPUT_FILES_PARAM);
  options.addOption(option5);
  Option option6=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs(1).create(OUTPUT_FILE_PARAM);
  options.addOption(option6);
  Option option7=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").withValueSeparator(VALUE_SEPARATOR_PARAM).hasArgs().create(TAGSETS_PARAM);
  options.addOption(option7);
  Option option8=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").hasArgs().create(ADHOC_TAGSETS_PARAM);
  options.addOption(option8);
  Option option9=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"" + BATCH_SIZE + ""String_Node_Str"").hasArgs(1).create(BATCH_SIZE_PARAM);
  options.addOption(option9);
  try {
    CommandLineParser parser=new PosixParser();
    CommandLine cmd=parser.parse(options,args);
    String worker=cmd.getOptionValue(WORKER_CHAR_PARAM);
    int threads=Integer.valueOf(cmd.getOptionValue(NUMBER_THREADS_PARAM,""String_Node_Str""));
    boolean compressed=Boolean.valueOf(cmd.hasOption(COMPRESSED_PARAM));
    SGID referenceSGID=Utility.parseSGID(cmd.getOptionValue(REFERENCE_ID_PARAM));
    int batch_size=Integer.valueOf(cmd.getOptionValue(BATCH_SIZE_PARAM,String.valueOf(BATCH_SIZE)));
    List<String> inputFiles=new ArrayList<String>();
    inputFiles.addAll(Arrays.asList(cmd.getOptionValues(INPUT_FILES_PARAM)));
    File outputFile=null;
    if (cmd.hasOption(OUTPUT_FILE_PARAM)) {
      String outputFilename=cmd.getOptionValue(OUTPUT_FILE_PARAM);
      outputFile=Utility.checkOutput(outputFilename);
    }
    List<SGID> tagSetSGIDs=new ArrayList<SGID>();
    if (cmd.hasOption(TAGSETS_PARAM)) {
      List<String> tagSetIDs=new ArrayList<String>();
      tagSetIDs.addAll(Arrays.asList(cmd.getOptionValues(TAGSETS_PARAM)));
      for (      String ID : tagSetIDs) {
        tagSetSGIDs.add(Utility.parseSGID(ID));
      }
    }
    SGID adhocSGID=cmd.hasOption(ADHOC_TAGSETS_PARAM) ? Utility.parseSGID(cmd.getOptionValue(ADHOC_TAGSETS_PARAM)) : null;
    SGID mainMethod=FeatureImporter.performImport(referenceSGID,threads,inputFiles,worker,compressed,outputFile,tagSetSGIDs,adhocSGID,batch_size);
    if (mainMethod == null) {
      return null;
    }
    return mainMethod;
  }
 catch (  IOException ex) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SOFeatureImporter.class.getSimpleName(),options);
    Logger.getLogger(SOFeatureImporter.class.getName()).log(Level.SEVERE,null,ex);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  MissingOptionException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SOFeatureImporter.class.getSimpleName(),options);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
catch (  ParseException e) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(SOFeatureImporter.class.getSimpleName(),options);
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  return null;
}",0.994922600619195
189055,"@Override public void run(){
  FeatureSet fSet=SWQEFactory.getQueryInterface().getAtomBySGID(FeatureSet.class,this.featureSetID);
  this.modelManager=SWQEFactory.getModelManager();
  modelManager.persist(fSet);
  if (this.getTagSetIDs() != null) {
    for (    SGID tagSetID : this.getTagSetIDs()) {
      this.potentialTagSets.add(SWQEFactory.getQueryInterface().getLatestAtomBySGID(tagSetID,TagSet.class));
    }
  }
  this.adHocSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(this.getAdhoctagset(),TagSet.class);
  modelManager.persist(adHocSet);
  BufferedReader inputStream=null;
  try {
    pmi.getLock();
    if (compressed) {
      if (input.endsWith(""String_Node_Str"") || input.endsWith(""String_Node_Str"")) {
        inputStream=new BufferedReader(new InputStreamReader(new CompressorStreamFactory().createCompressorInputStream(""String_Node_Str"",new BufferedInputStream(new FileInputStream(input)))));
      }
 else       if (input.endsWith(""String_Node_Str"") || input.endsWith(""String_Node_Str"")) {
        inputStream=new BufferedReader(new InputStreamReader(new CompressorStreamFactory().createCompressorInputStream(""String_Node_Str"",new BufferedInputStream(new FileInputStream(input)))));
      }
 else {
        throw new Exception(""String_Node_Str"" + input + ""String_Node_Str"");
      }
    }
 else {
      inputStream=new BufferedReader(new FileReader(input));
    }
    String l;
    Feature.Builder fBuilder=modelManager.buildFeature();
    int count=0;
    while ((l=inputStream.readLine()) != null) {
      count++;
      if (count % this.getBatch_size() == 0) {
        modelManager.flush();
        modelManager.clear();
        modelManager.persist(adHocSet);
        modelManager.persist(fSet);
      }
      if (!l.startsWith(""String_Node_Str"")) {
        String[] t=l.split(""String_Node_Str"");
        fBuilder.setSeqid(t[0]);
        Set<Tag> tagSet=new HashSet<Tag>();
        tagSet.add(getTagSpec(t[0]));
        tagSet.add(getTagSpec(ImportConstants.VCF_REFERENCE_BASE).toBuilder().setValue(t[3].toUpperCase()).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_CONSENSUS_BASE).toBuilder().setValue(t[4].toUpperCase()).build());
        Tag calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(t[4].toUpperCase()).build();
        tagSet.add(calledTag);
        if (!""String_Node_Str"".equals(t[5])) {
          fBuilder.setScore(Double.parseDouble(t[5]));
        }
        if (!""String_Node_Str"".equals(t[2])) {
          tagSet.add(getTagSpec(ImportConstants.VCF_SECOND_ID).toBuilder().setValue(t[2]).build());
        }
        String calledBase=t[4].toUpperCase();
        if (t[4].toUpperCase().length() > 1 && t[4].toUpperCase().contains(""String_Node_Str"")) {
          tagSet.remove(calledTag);
          if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else {
          }
          calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(calledBase).build();
          tagSet.add(calledTag);
        }
        fBuilder.setType(ImportConstants.VCF_SNV);
        tagSet.add(getTagSpec(ImportConstants.VCF_SNV).toBuilder().build());
        if (!""String_Node_Str"".equals(t[1])) {
          Integer pos=Integer.parseInt(t[1]);
          fBuilder.setStart(pos - 1);
          fBuilder.setStop(pos);
        }
        tagSet.add(getTagSpec(ImportConstants.VCF_FILTER).toBuilder().setValue(t[6]).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_INFO).toBuilder().setValue(t[7]).build());
        boolean af1LtHalf=false;
        boolean fqLt0=false;
        String[] tags=t[7].split(""String_Node_Str"");
        for (        String tag : tags) {
          if (tag.contains(""String_Node_Str"")) {
            String[] kv=tag.split(""String_Node_Str"");
            tagSet.add(getTagSpec(kv[0]).toBuilder().setValue(kv[1]).build());
            if (""String_Node_Str"".equals(kv[0])) {
              tagSet.add(getTagSpec(ImportConstants.VCF_READ_COUNTS).toBuilder().setValue(kv[1]).build());
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float fq=Float.parseFloat(kv[1]);
              if (fq < 0) {
                tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
                fqLt0=true;
              }
 else {
                tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
              }
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float af1=Float.parseFloat(kv[1]);
              if (af1 < 0.5) {
                af1LtHalf=true;
              }
            }
          }
 else {
            tagSet.add(getTagSpec(tag).toBuilder().build());
          }
        }
        if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
        }
 else         if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
        }
        if (af1LtHalf && fqLt0) {
          System.out.println(""String_Node_Str"");
        }
 else {
          Feature build=fBuilder.build();
          for (          Tag tag : tagSet) {
            build.associateTag(tag);
          }
          fSet.add(build);
          if (count % this.getBatch_size() == 0) {
            System.out.println(new Date().toString() + workerName + ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ build.getStart()+ ""String_Node_Str""+ build.getStop()+ ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ count);
          }
        }
        fBuilder=modelManager.buildFeature();
      }
    }
    inputStream.close();
  }
 catch (  Exception e) {
    Logger.getLogger(VCFVariantImportWorker.class.getName()).fatal(""String_Node_Str"" + input,e);
    throw new RuntimeException(""String_Node_Str"");
  }
 finally {
    modelManager.close();
    pmi.releaseLock();
  }
}","@Override public void run(){
  FeatureSet fSet=SWQEFactory.getQueryInterface().getAtomBySGID(FeatureSet.class,this.featureSetID);
  this.modelManager=SWQEFactory.getModelManager();
  modelManager.persist(fSet);
  if (this.getTagSetIDs() != null) {
    for (    SGID tagSetID : this.getTagSetIDs()) {
      this.potentialTagSets.add(SWQEFactory.getQueryInterface().getLatestAtomBySGID(tagSetID,TagSet.class));
    }
  }
  this.adHocSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(this.getAdhoctagset(),TagSet.class);
  modelManager.persist(adHocSet);
  BufferedReader inputStream=null;
  try {
    pmi.getLock();
    if (compressed) {
      inputStream=handleCompressedInput(input);
    }
 else {
      inputStream=new BufferedReader(new FileReader(input));
    }
    String l;
    Feature.Builder fBuilder=modelManager.buildFeature();
    int count=0;
    while ((l=inputStream.readLine()) != null) {
      count++;
      if (count % this.getBatch_size() == 0) {
        modelManager.flush();
        modelManager.clear();
        modelManager.persist(adHocSet);
        modelManager.persist(fSet);
      }
      if (!l.startsWith(""String_Node_Str"")) {
        String[] t=l.split(""String_Node_Str"");
        fBuilder.setSeqid(t[0]);
        Set<Tag> tagSet=new HashSet<Tag>();
        tagSet.add(getTagSpec(t[0]));
        tagSet.add(getTagSpec(ImportConstants.VCF_REFERENCE_BASE).toBuilder().setValue(t[3].toUpperCase()).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_CONSENSUS_BASE).toBuilder().setValue(t[4].toUpperCase()).build());
        Tag calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(t[4].toUpperCase()).build();
        tagSet.add(calledTag);
        if (!""String_Node_Str"".equals(t[5])) {
          fBuilder.setScore(Double.parseDouble(t[5]));
        }
        if (!""String_Node_Str"".equals(t[2])) {
          tagSet.add(getTagSpec(ImportConstants.VCF_SECOND_ID).toBuilder().setValue(t[2]).build());
        }
        String calledBase=t[4].toUpperCase();
        if (t[4].toUpperCase().length() > 1 && t[4].toUpperCase().contains(""String_Node_Str"")) {
          tagSet.remove(calledTag);
          if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else           if (""String_Node_Str"".equals(calledBase) || ""String_Node_Str"".equals(calledBase)) {
            calledBase=""String_Node_Str"";
          }
 else {
          }
          calledTag=getTagSpec(ImportConstants.VCF_CALLED_BASE).toBuilder().setValue(calledBase).build();
          tagSet.add(calledTag);
        }
        fBuilder.setType(ImportConstants.VCF_SNV);
        tagSet.add(getTagSpec(ImportConstants.VCF_SNV).toBuilder().build());
        if (!""String_Node_Str"".equals(t[1])) {
          Integer pos=Integer.parseInt(t[1]);
          fBuilder.setStart(pos - 1);
          fBuilder.setStop(pos);
        }
        tagSet.add(getTagSpec(ImportConstants.VCF_FILTER).toBuilder().setValue(t[6]).build());
        tagSet.add(getTagSpec(ImportConstants.VCF_INFO).toBuilder().setValue(t[7]).build());
        boolean af1LtHalf=false;
        boolean fqLt0=false;
        String[] tags=t[7].split(""String_Node_Str"");
        for (        String tag : tags) {
          if (tag.contains(""String_Node_Str"")) {
            String[] kv=tag.split(""String_Node_Str"");
            tagSet.add(getTagSpec(kv[0]).toBuilder().setValue(kv[1]).build());
            if (""String_Node_Str"".equals(kv[0])) {
              tagSet.add(getTagSpec(ImportConstants.VCF_READ_COUNTS).toBuilder().setValue(kv[1]).build());
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float fq=Float.parseFloat(kv[1]);
              if (fq < 0) {
                tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
                fqLt0=true;
              }
 else {
                tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
              }
            }
            if (""String_Node_Str"".equals(kv[0])) {
              float af1=Float.parseFloat(kv[1]);
              if (af1 < 0.5) {
                af1LtHalf=true;
              }
            }
          }
 else {
            tagSet.add(getTagSpec(tag).toBuilder().build());
          }
        }
        if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HETEROZYGOUS).toBuilder().build());
        }
 else         if (t.length > 9 && t[8].contains(""String_Node_Str"") && t[9].contains(""String_Node_Str"")) {
          tagSet.add(getTagSpec(ImportConstants.VCF_HOMOZYGOUS).toBuilder().build());
        }
        if (af1LtHalf && fqLt0) {
          System.out.println(""String_Node_Str"");
        }
 else {
          Feature build=fBuilder.build();
          for (          Tag tag : tagSet) {
            build.associateTag(tag);
          }
          fSet.add(build);
          if (count % this.getBatch_size() == 0) {
            System.out.println(new Date().toString() + workerName + ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ build.getStart()+ ""String_Node_Str""+ build.getStop()+ ""String_Node_Str""+ build.getSeqid()+ ""String_Node_Str""+ count);
          }
        }
        fBuilder=modelManager.buildFeature();
      }
    }
    inputStream.close();
  }
 catch (  Exception e) {
    Logger.getLogger(VCFVariantImportWorker.class.getName()).fatal(""String_Node_Str"" + input,e);
    throw new RuntimeException(""String_Node_Str"");
  }
 finally {
    modelManager.close();
    pmi.releaseLock();
  }
}",0.9490154174935124
189056,"@Test public void testNormalVCFImport(){
  testFile(testVCFFile,true);
}","@Test public void testNormalVCFImport(){
  testFile(testVCFFile,true,false);
}",0.96
189057,"private void testFile(File testFile,boolean shouldSucceed){
  BufferedReader in=null;
  BufferedReader controlIn=null;
  try {
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",testFile.exists() && testFile.canRead());
    SGID main=SOFeatureImporter.runMain(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",adHocSet.getSGID().getRowKey(),""String_Node_Str"",testFile.getAbsolutePath(),""String_Node_Str"",createTempFile.getAbsolutePath(),""String_Node_Str"",reference.getSGID().getRowKey(),""String_Node_Str"",sequenceOntology.getSGID().getRowKey()});
    if (!shouldSucceed) {
      Assert.assertTrue(main == null);
      return;
    }
    VCFDumper.main(new String[]{main.getUuid().toString(),createTempFile.getAbsolutePath()});
    in=new BufferedReader(new FileReader(createTempFile));
    List<String> output=new ArrayList<String>();
    while (in.ready()) {
      String inLine=in.readLine();
      output.add(inLine);
    }
    Collections.sort(output);
    controlIn=new BufferedReader(new FileReader(testFile));
    List<String> control=new ArrayList<String>();
    while (controlIn.ready()) {
      control.add(controlIn.readLine());
    }
    Collections.sort(control);
    for (int i=0; i < output.size(); i++) {
      String[] cLine=control.get(i).split(""String_Node_Str"");
      String[] eLine=output.get(i).split(""String_Node_Str"");
      Assert.assertTrue(""String_Node_Str"",cLine[1].equals(eLine[1]));
      Assert.assertTrue(""String_Node_Str"",cLine[2].equals(eLine[2]));
      Assert.assertTrue(""String_Node_Str"",cLine[3].equals(eLine[3]));
      Assert.assertTrue(""String_Node_Str"",cLine[4].equals(eLine[4]));
      Assert.assertTrue(""String_Node_Str"",cLine[6].equals(eLine[6]));
      Assert.assertTrue(""String_Node_Str"",cLine[7].equals(eLine[7]));
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(SOFeatureImporterTest.class.getName()).log(Level.SEVERE,null,ex);
    Assert.assertTrue(""String_Node_Str"",false);
  }
 finally {
    try {
      if (in != null) {
        in.close();
      }
      if (controlIn != null) {
        controlIn.close();
      }
    }
 catch (    IOException ex) {
      return;
    }
  }
}","private void testFile(File testFile,boolean shouldSucceed,boolean compressed){
  BufferedReader in=null;
  BufferedReader controlIn=null;
  try {
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",testFile.exists() && testFile.canRead());
    List<String> argList=new ArrayList<String>();
    argList.addAll(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",adHocSet.getSGID().getRowKey(),""String_Node_Str"",testFile.getAbsolutePath(),""String_Node_Str"",createTempFile.getAbsolutePath(),""String_Node_Str"",reference.getSGID().getRowKey(),""String_Node_Str"",sequenceOntology.getSGID().getRowKey()}));
    if (compressed) {
      argList.add(""String_Node_Str"");
    }
    SGID main=SOFeatureImporter.runMain(argList.toArray(new String[argList.size()]));
    if (!shouldSucceed) {
      Assert.assertTrue(main == null);
      return;
    }
    VCFDumper.main(new String[]{main.getUuid().toString(),createTempFile.getAbsolutePath()});
    in=new BufferedReader(new FileReader(createTempFile));
    List<String> output=new ArrayList<String>();
    while (in.ready()) {
      String inLine=in.readLine();
      output.add(inLine);
    }
    Collections.sort(output);
    if (compressed) {
      try {
        controlIn=VCFVariantImportWorker.handleCompressedInput(testFile.getAbsolutePath());
      }
 catch (      CompressorException ex) {
        Logger.getLogger(SOFeatureImporterTest.class.getName()).fatal(null,ex);
      }
catch (      FileNotFoundException ex) {
        Logger.getLogger(SOFeatureImporterTest.class.getName()).fatal(null,ex);
      }
    }
 else {
      controlIn=new BufferedReader(new FileReader(testFile));
    }
    List<String> control=new ArrayList<String>();
    String l;
    while ((l=controlIn.readLine()) != null) {
      control.add(l);
    }
    Collections.sort(control);
    for (int i=0; i < output.size(); i++) {
      String[] cLine=control.get(i).split(""String_Node_Str"");
      String[] eLine=output.get(i).split(""String_Node_Str"");
      Assert.assertTrue(""String_Node_Str"",cLine[1].equals(eLine[1]));
      Assert.assertTrue(""String_Node_Str"",cLine[2].equals(eLine[2]));
      Assert.assertTrue(""String_Node_Str"",cLine[3].equals(eLine[3]));
      Assert.assertTrue(""String_Node_Str"",cLine[4].equals(eLine[4]));
      Assert.assertTrue(""String_Node_Str"",cLine[6].equals(eLine[6]));
      Assert.assertTrue(""String_Node_Str"",cLine[7].equals(eLine[7]));
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(SOFeatureImporterTest.class.getName()).fatal(null,ex);
    Assert.assertTrue(""String_Node_Str"",false);
  }
 finally {
    try {
      if (in != null) {
        in.close();
      }
      if (controlIn != null) {
        controlIn.close();
      }
    }
 catch (    IOException ex) {
      return;
    }
  }
}",0.7471965374778674
189058,"@Test public void testMissingValueVCFImport(){
  testFile(testVCFFile_missingValues,true);
}","@Test public void testMissingValueVCFImport(){
  testFile(testVCFFile_missingValues,true,false);
}",0.968421052631579
189059,"@BeforeClass public static void setupTests(){
  String curDir=System.getProperty(""String_Node_Str"");
  File file=new File(curDir + ""String_Node_Str"");
  SGID tagSetID=OBOImporter.mainMethod(new String[]{file.getAbsolutePath()});
  sequenceOntology=SWQEFactory.getQueryInterface().getAtomBySGID(TagSet.class,tagSetID);
  try {
    SGID refID=ReferenceCreator.mainMethod(new String[]{""String_Node_Str""});
    reference=SWQEFactory.getQueryInterface().getAtomBySGID(Reference.class,refID);
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    SGID aSetID=TagSetCreator.mainMethod(new String[]{""String_Node_Str""});
    adHocSet=SWQEFactory.getQueryInterface().getAtomBySGID(TagSet.class,aSetID);
  }
 catch (  IllegalArgumentException e) {
  }
  testVCFFile=new File(curDir + ""String_Node_Str"");
  testVCFFile_missingValues=new File(curDir + ""String_Node_Str"");
  testVCFFile_invalid=new File(curDir + ""String_Node_Str"");
}","@BeforeClass public static void setupTests(){
  String curDir=System.getProperty(""String_Node_Str"");
  File file=new File(curDir + ""String_Node_Str"");
  SGID tagSetID=OBOImporter.mainMethod(new String[]{file.getAbsolutePath()});
  sequenceOntology=SWQEFactory.getQueryInterface().getAtomBySGID(TagSet.class,tagSetID);
  try {
    SGID refID=ReferenceCreator.mainMethod(new String[]{""String_Node_Str""});
    reference=SWQEFactory.getQueryInterface().getAtomBySGID(Reference.class,refID);
  }
 catch (  IllegalArgumentException e) {
    reference=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(""String_Node_Str"",Reference.class);
  }
  try {
    SGID aSetID=TagSetCreator.mainMethod(new String[]{""String_Node_Str""});
    adHocSet=SWQEFactory.getQueryInterface().getAtomBySGID(TagSet.class,aSetID);
  }
 catch (  IllegalArgumentException e) {
    adHocSet=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(""String_Node_Str"",TagSet.class);
  }
  testVCFFile_zipped=new File(curDir + ""String_Node_Str"");
  testVCFFile=new File(curDir + ""String_Node_Str"");
  testVCFFile_missingValues=new File(curDir + ""String_Node_Str"");
  testVCFFile_invalid=new File(curDir + ""String_Node_Str"");
}",0.8624113475177305
189060,"@Test public void testInvalidVCFImport(){
  testFile(testVCFFile_invalid,false);
}","@Test public void testInvalidVCFImport(){
  testFile(testVCFFile_invalid,false,false);
}",0.9647058823529412
189061,"private void testFile(File testFile,boolean shouldSucceed){
  BufferedReader in=null;
  BufferedReader controlIn=null;
  try {
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",testFile.exists() && testFile.canRead());
    SGID main=FeatureImporter.naiveRun(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",randomRef,testFile.getAbsolutePath()});
    if (!shouldSucceed) {
      Assert.assertTrue(main == null);
      return;
    }
    VCFDumper.main(new String[]{main.getUuid().toString(),createTempFile.getAbsolutePath()});
    in=new BufferedReader(new FileReader(createTempFile));
    List<String> output=new ArrayList<String>();
    while (in.ready()) {
      String inLine=in.readLine();
      output.add(inLine);
    }
    Collections.sort(output);
    controlIn=new BufferedReader(new FileReader(testFile));
    List<String> control=new ArrayList<String>();
    while (controlIn.ready()) {
      control.add(controlIn.readLine());
    }
    Collections.sort(control);
    for (int i=0; i < output.size(); i++) {
      String[] cLine=control.get(i).split(""String_Node_Str"");
      String[] eLine=output.get(i).split(""String_Node_Str"");
      Assert.assertTrue(""String_Node_Str"",cLine[1].equals(eLine[1]));
      Assert.assertTrue(""String_Node_Str"",cLine[2].equals(eLine[2]));
      Assert.assertTrue(""String_Node_Str"",cLine[3].equals(eLine[3]));
      Assert.assertTrue(""String_Node_Str"",cLine[4].equals(eLine[4]));
      Assert.assertTrue(""String_Node_Str"",cLine[6].equals(eLine[6]));
      Assert.assertTrue(""String_Node_Str"",cLine[7].equals(eLine[7]));
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(VCFImportExportTest.class.getName()).log(Level.SEVERE,null,ex);
    Assert.assertTrue(""String_Node_Str"",false);
  }
 finally {
    try {
      if (in != null) {
        in.close();
      }
      if (controlIn != null) {
        controlIn.close();
      }
    }
 catch (    IOException ex) {
      return;
    }
  }
}","private void testFile(File testFile,boolean shouldSucceed,String... args){
  BufferedReader in=null;
  BufferedReader controlIn=null;
  try {
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",testFile.exists() && testFile.canRead());
    List<String> argList=new ArrayList<String>();
    argList.addAll(Arrays.asList(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",randomRef,testFile.getAbsolutePath()}));
    argList.addAll(Arrays.asList(args));
    SGID main=FeatureImporter.naiveRun(argList.toArray(new String[argList.size()]));
    if (!shouldSucceed) {
      Assert.assertTrue(main == null);
      return;
    }
    VCFDumper.main(new String[]{main.getUuid().toString(),createTempFile.getAbsolutePath()});
    in=new BufferedReader(new FileReader(createTempFile));
    List<String> output=new ArrayList<String>();
    while (in.ready()) {
      String inLine=in.readLine();
      output.add(inLine);
    }
    Collections.sort(output);
    controlIn=new BufferedReader(new FileReader(testFile));
    List<String> control=new ArrayList<String>();
    while (controlIn.ready()) {
      control.add(controlIn.readLine());
    }
    Collections.sort(control);
    for (int i=0; i < output.size(); i++) {
      String[] cLine=control.get(i).split(""String_Node_Str"");
      String[] eLine=output.get(i).split(""String_Node_Str"");
      Assert.assertTrue(""String_Node_Str"",cLine[1].equals(eLine[1]));
      Assert.assertTrue(""String_Node_Str"",cLine[2].equals(eLine[2]));
      Assert.assertTrue(""String_Node_Str"",cLine[3].equals(eLine[3]));
      Assert.assertTrue(""String_Node_Str"",cLine[4].equals(eLine[4]));
      Assert.assertTrue(""String_Node_Str"",cLine[6].equals(eLine[6]));
      Assert.assertTrue(""String_Node_Str"",cLine[7].equals(eLine[7]));
    }
  }
 catch (  IOException ex) {
    Logger.getLogger(VCFImportExportTest.class.getName()).log(Level.SEVERE,null,ex);
    Assert.assertTrue(""String_Node_Str"",false);
  }
 finally {
    try {
      if (in != null) {
        in.close();
      }
      if (controlIn != null) {
        controlIn.close();
      }
    }
 catch (    IOException ex) {
      return;
    }
  }
}",0.9127769919849128
189062,"public static void main(String[] args){
  try {
    SGID mainMethod=ReferenceCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
}","public static void main(String[] args){
  try {
    SGID mainMethod=ReferenceCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    System.exit(FeatureImporter.EXIT_CODE_EXISTING_NAME);
  }
}",0.9688013136289
189063,"/** 
 * Create a reference given just a name for the new reference to be created.
 * @param args
 * @return
 */
public static SGID mainMethod(String[] args) throws IllegalArgumentException {
  if (args.length < 1) {
    System.err.println(""String_Node_Str"" + args.length + ""String_Node_Str"");
    System.out.println(ReferenceCreator.class.getSimpleName() + ""String_Node_Str"");
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  Reference checkAtom=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(args[0],Reference.class);
  if (checkAtom != null) {
    throw new IllegalArgumentException();
  }
  try {
    CreateUpdateManager modelManager=SWQEFactory.getModelManager();
    Reference build=modelManager.buildReference().setFriendlyRowKey(args[0]).setName(args[0]).build();
    File outputFile=null;
    if (args.length == 2) {
      outputFile=Utility.checkOutput(args[1]);
    }
    Logger.getLogger(ReferenceCreator.class.getName()).info(""String_Node_Str"");
    modelManager.close();
    SWQEFactory.getStorage().closeStorage();
    System.out.println(""String_Node_Str"");
    String outputID=build.getSGID().getUuid().toString();
    System.out.println(outputID);
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",outputID);
    Utility.writeKeyValueFile(outputFile,keyValues);
    return build.getSGID();
  }
 catch (  IOException ex) {
    Logger.getLogger(ReferenceCreator.class.getName()).fatal(null,ex);
  }
  return null;
}","/** 
 * Create a reference given just a name for the new reference to be created.
 * @param args
 * @return
 */
public static SGID mainMethod(String[] args) throws IllegalArgumentException {
  if (args.length < 1) {
    System.err.println(""String_Node_Str"" + args.length + ""String_Node_Str"");
    System.out.println(ReferenceCreator.class.getSimpleName() + ""String_Node_Str"");
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  Reference checkAtom=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(args[0],Reference.class);
  if (checkAtom != null) {
    throw new IllegalArgumentException();
  }
  try {
    CreateUpdateManager modelManager=SWQEFactory.getModelManager();
    Reference build=modelManager.buildReference().setFriendlyRowKey(args[0]).setName(args[0]).build();
    File outputFile=null;
    if (args.length == 2) {
      outputFile=Utility.checkOutput(args[1]);
    }
    Logger.getLogger(ReferenceCreator.class.getName()).info(""String_Node_Str"");
    modelManager.close();
    SWQEFactory.getStorage().closeStorage();
    System.out.println(""String_Node_Str"");
    String outputID=build.getSGID().getRowKey();
    System.out.println(outputID);
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",outputID);
    Utility.writeKeyValueFile(outputFile,keyValues);
    return build.getSGID();
  }
 catch (  IOException ex) {
    Logger.getLogger(ReferenceCreator.class.getName()).fatal(null,ex);
  }
  return null;
}",0.9929742388758782
189064,"public static void main(String[] args){
  try {
    SGID mainMethod=TagSetCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
}","public static void main(String[] args){
  try {
    SGID mainMethod=TagSetCreator.mainMethod(args);
    if (mainMethod == null) {
      System.exit(FeatureImporter.EXIT_CODE_INVALID_FILE);
    }
  }
 catch (  IllegalArgumentException e) {
    System.exit(FeatureImporter.EXIT_CODE_EXISTING_NAME);
  }
}",0.9684908789386402
189065,"/** 
 * Create a reference given just a name for the new reference to be created.
 * @param args
 * @return
 */
public static SGID mainMethod(String[] args) throws IllegalArgumentException {
  if (args.length < 1) {
    System.err.println(""String_Node_Str"" + args.length + ""String_Node_Str"");
    System.out.println(TagSetCreator.class.getSimpleName() + ""String_Node_Str"");
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  TagSet checkAtom=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(args[0],TagSet.class);
  if (checkAtom != null) {
    throw new IllegalArgumentException();
  }
  try {
    CreateUpdateManager modelManager=SWQEFactory.getModelManager();
    TagSet build=modelManager.buildTagSet().setFriendlyRowKey(args[0]).setName(args[0]).build();
    File outputFile=null;
    if (args.length == 2) {
      outputFile=Utility.checkOutput(args[1]);
    }
    Logger.getLogger(TagSetCreator.class.getName()).info(""String_Node_Str"");
    modelManager.close();
    SWQEFactory.getStorage().closeStorage();
    System.out.println(""String_Node_Str"");
    String outputID=build.getSGID().getUuid().toString();
    System.out.println(outputID);
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",outputID);
    Utility.writeKeyValueFile(outputFile,keyValues);
    return build.getSGID();
  }
 catch (  IOException ex) {
    Logger.getLogger(TagSetCreator.class.getName()).fatal(null,ex);
  }
  return null;
}","/** 
 * Create a reference given just a name for the new reference to be created.
 * @param args
 * @return
 */
public static SGID mainMethod(String[] args) throws IllegalArgumentException {
  if (args.length < 1) {
    System.err.println(""String_Node_Str"" + args.length + ""String_Node_Str"");
    System.out.println(TagSetCreator.class.getSimpleName() + ""String_Node_Str"");
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  TagSet checkAtom=SWQEFactory.getQueryInterface().getLatestAtomByRowKey(args[0],TagSet.class);
  if (checkAtom != null) {
    throw new IllegalArgumentException();
  }
  try {
    CreateUpdateManager modelManager=SWQEFactory.getModelManager();
    TagSet build=modelManager.buildTagSet().setFriendlyRowKey(args[0]).setName(args[0]).build();
    File outputFile=null;
    if (args.length == 2) {
      outputFile=Utility.checkOutput(args[1]);
    }
    Logger.getLogger(TagSetCreator.class.getName()).info(""String_Node_Str"");
    modelManager.close();
    SWQEFactory.getStorage().closeStorage();
    System.out.println(""String_Node_Str"");
    String outputID=build.getSGID().getRowKey();
    System.out.println(outputID);
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",outputID);
    Utility.writeKeyValueFile(outputFile,keyValues);
    return build.getSGID();
  }
 catch (  IOException ex) {
    Logger.getLogger(TagSetCreator.class.getName()).fatal(null,ex);
  }
  return null;
}",0.992874109263658
189066,"/** 
 * This method does the actual work of importing given properly parsed parameters
 * @param referenceID
 * @param threadCount
 * @param inputFiles
 * @param workerModule
 * @param compressed
 * @param outputFile
 * @param tagSetSGIDs
 * @param adhocTagSet
 * @param batch_size
 * @return SGID if successful, null if not
 */
protected static SGID performImport(SGID referenceID,int threadCount,List<String> inputFiles,String workerModule,boolean compressed,File outputFile,List<SGID> tagSetSGIDs,SGID adhocTagSetID,int batch_size){
  CreateUpdateManager modelManager=SWQEFactory.getModelManager();
  Reference ref=SWQEFactory.getQueryInterface().getLatestAtomBySGID(referenceID,Reference.class);
  FeatureSet featureSet=modelManager.buildFeatureSet().setReference(ref).build();
  TagSet adHocSet;
  if (adhocTagSetID != null) {
    adHocSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(adhocTagSetID,TagSet.class);
  }
 else {
    adHocSet=modelManager.buildTagSet().setName(""String_Node_Str"" + featureSet.getSGID().getRowKey()).build();
  }
  modelManager.close();
  final FeatureImporter pmi=new FeatureImporter(threadCount);
  try {
    if (modelManager != null) {
      Iterator<String> it=inputFiles.iterator();
      ImportWorker[] workerArray=new ImportWorker[inputFiles.size()];
      int index=0;
      while (it.hasNext()) {
        String input=(String)it.next();
        Logger.getLogger(FeatureImporter.class.getName()).info(""String_Node_Str"" + input);
        Class processorClass=Class.forName(""String_Node_Str"" + workerModule);
        workerArray[index]=(ImportWorker)processorClass.newInstance();
        workerArray[index].setWorkerName(""String_Node_Str"" + index);
        workerArray[index].setPmi(pmi);
        workerArray[index].setInput(input);
        workerArray[index].setFeatureSetID(featureSet.getSGID());
        workerArray[index].setAdhoctagset(adHocSet.getSGID());
        workerArray[index].setTagSetIDs(tagSetSGIDs);
        workerArray[index].setBatch_size(batch_size);
        workerArray[index].setCompressed(compressed);
        workerArray[index].setMinCoverage(0);
        workerArray[index].setMaxCoverage(0);
        workerArray[index].setMinSnpQuality(0);
        workerArray[index].setIncludeSNV(false);
        workerArray[index].setFastqConvNum(0);
        workerArray[index].setIncludeIndels(false);
        workerArray[index].setIncludeCoverage(false);
        workerArray[index].setBinSize(0);
        workerArray[index].setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
          @Override public void uncaughtException(          Thread thread,          Throwable thrwbl){
            pmi.failedWorkers.add((ImportWorker)thread);
          }
        }
);
        workerArray[index].start();
        index++;
      }
      Logger.getLogger(FeatureImporter.class.getName()).info(""String_Node_Str"");
      for (int i=0; i < workerArray.length; i++) {
        workerArray[i].join();
      }
      Logger.getLogger(FeatureImporter.class.getName()).info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    Logger.getLogger(FeatureImporter.class.getName()).fatal(""String_Node_Str"",e);
    return null;
  }
  if (pmi.failedWorkers.size() > 0) {
    return null;
  }
  SWQEFactory.getStorage().closeStorage();
  System.out.println(""String_Node_Str"");
  String outputID=featureSet.getSGID().getUuid().toString();
  System.out.println(outputID);
  Map<String,String> keyValues=new HashMap<String,String>();
  keyValues.put(FEATURE_SET_ID,outputID);
  if (adhocTagSetID == null) {
    System.out.println(""String_Node_Str"");
    String aoutputID=adHocSet.getSGID().getUuid().toString();
    System.out.println(aoutputID);
    keyValues.put(""String_Node_Str"",aoutputID);
  }
  Utility.writeKeyValueFile(outputFile,keyValues);
  return featureSet.getSGID();
}","/** 
 * This method does the actual work of importing given properly parsed parameters
 * @param referenceID
 * @param threadCount
 * @param inputFiles
 * @param workerModule
 * @param compressed
 * @param outputFile
 * @param tagSetSGIDs
 * @param adhocTagSet
 * @param batch_size
 * @return SGID if successful, null if not
 */
protected static SGID performImport(SGID referenceID,int threadCount,List<String> inputFiles,String workerModule,boolean compressed,File outputFile,List<SGID> tagSetSGIDs,SGID adhocTagSetID,int batch_size){
  CreateUpdateManager modelManager=SWQEFactory.getModelManager();
  Reference ref=SWQEFactory.getQueryInterface().getLatestAtomBySGID(referenceID,Reference.class);
  FeatureSet featureSet=modelManager.buildFeatureSet().setReference(ref).build();
  TagSet adHocSet;
  if (adhocTagSetID != null) {
    adHocSet=SWQEFactory.getQueryInterface().getLatestAtomBySGID(adhocTagSetID,TagSet.class);
  }
 else {
    adHocSet=modelManager.buildTagSet().setName(""String_Node_Str"" + featureSet.getSGID().getRowKey()).build();
  }
  modelManager.close();
  final FeatureImporter pmi=new FeatureImporter(threadCount);
  try {
    if (modelManager != null) {
      Iterator<String> it=inputFiles.iterator();
      ImportWorker[] workerArray=new ImportWorker[inputFiles.size()];
      int index=0;
      while (it.hasNext()) {
        String input=(String)it.next();
        Logger.getLogger(FeatureImporter.class.getName()).info(""String_Node_Str"" + input);
        Class processorClass=Class.forName(""String_Node_Str"" + workerModule);
        workerArray[index]=(ImportWorker)processorClass.newInstance();
        workerArray[index].setWorkerName(""String_Node_Str"" + index);
        workerArray[index].setPmi(pmi);
        workerArray[index].setInput(input);
        workerArray[index].setFeatureSetID(featureSet.getSGID());
        workerArray[index].setAdhoctagset(adHocSet.getSGID());
        workerArray[index].setTagSetIDs(tagSetSGIDs);
        workerArray[index].setBatch_size(batch_size);
        workerArray[index].setCompressed(compressed);
        workerArray[index].setMinCoverage(0);
        workerArray[index].setMaxCoverage(0);
        workerArray[index].setMinSnpQuality(0);
        workerArray[index].setIncludeSNV(false);
        workerArray[index].setFastqConvNum(0);
        workerArray[index].setIncludeIndels(false);
        workerArray[index].setIncludeCoverage(false);
        workerArray[index].setBinSize(0);
        workerArray[index].setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
          @Override public void uncaughtException(          Thread thread,          Throwable thrwbl){
            pmi.failedWorkers.add((ImportWorker)thread);
          }
        }
);
        workerArray[index].start();
        index++;
      }
      Logger.getLogger(FeatureImporter.class.getName()).info(""String_Node_Str"");
      for (int i=0; i < workerArray.length; i++) {
        workerArray[i].join();
      }
      Logger.getLogger(FeatureImporter.class.getName()).info(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    Logger.getLogger(FeatureImporter.class.getName()).fatal(""String_Node_Str"",e);
    return null;
  }
  if (pmi.failedWorkers.size() > 0) {
    return null;
  }
  SWQEFactory.getStorage().closeStorage();
  System.out.println(""String_Node_Str"");
  String outputID=featureSet.getSGID().getRowKey();
  System.out.println(outputID);
  Map<String,String> keyValues=new HashMap<String,String>();
  keyValues.put(FEATURE_SET_ID,outputID);
  if (adhocTagSetID == null) {
    System.out.println(""String_Node_Str"");
    String aoutputID=adHocSet.getSGID().getUuid().toString();
    System.out.println(aoutputID);
    keyValues.put(""String_Node_Str"",aoutputID);
  }
  Utility.writeKeyValueFile(outputFile,keyValues);
  return featureSet.getSGID();
}",0.9972545430775264
189067,"/** 
 * Import a set of Tag specifications into a new TagSet.
 * @param args
 * @return
 */
public static SGID mainMethod(String[] args){
  if (args.length < 1) {
    System.err.println(""String_Node_Str"" + args.length + ""String_Node_Str"");
    System.out.println(OBOImporter.class.getSimpleName() + ""String_Node_Str"");
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  InputStream inStream=null;
  try {
    File file=new File(args[0]);
    OboParser parser=new OboParser();
    inStream=new FileInputStream(file);
    BufferedReader oboFile=new BufferedReader(new InputStreamReader(inStream));
    File outputFile=null;
    if (args.length == 2) {
      outputFile=Utility.checkOutput(args[1]);
    }
    Ontology ontology=parser.parseOBO(oboFile,""String_Node_Str"",""String_Node_Str"");
    Set keys=ontology.getTerms();
    Iterator iter=keys.iterator();
    Pattern p=Pattern.compile(""String_Node_Str"");
    CreateUpdateManager modelManager=SWQEFactory.getModelManager();
    TagSet tagSet=modelManager.buildTagSet().setName(""String_Node_Str"").build();
    while (iter.hasNext()) {
      Term term=(Term)iter.next();
      if (!p.matcher(term.getName()).matches()) {
        Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + term.getDescription() + ""String_Node_Str""+ term.getName());
        continue;
      }
      if (term.getAnnotation().containsProperty(""String_Node_Str"")) {
        Object property=term.getAnnotation().getProperty(""String_Node_Str"");
        if (property.equals(true)) {
          continue;
        }
      }
      Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + term.getDescription() + ""String_Node_Str""+ term.getName());
      String key1=term.getName() + ""String_Node_Str"" + term.getDescription();
      Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + key1);
      tagSet.add(modelManager.buildTag().setKey(key1).build());
      String key2=term.getName();
      Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + key2);
      tagSet.add(modelManager.buildTag().setKey(key2).build());
      List<Synonym> synonyms=parser.getSynonymMap().get(term);
      if (synonyms == null) {
        continue;
      }
      for (      Synonym syn : synonyms) {
        String key3=term.getName() + ""String_Node_Str"" + syn.getName();
        Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + key3);
        tagSet.add(modelManager.buildTag().setKey(key3).build());
      }
    }
    Logger.getLogger(OBOImporter.class.getName()).info(""String_Node_Str"" + tagSet.getCount() + ""String_Node_Str"");
    modelManager.close();
    SWQEFactory.getStorage().closeStorage();
    System.out.println(tagSet.getCount() + ""String_Node_Str"");
    String outputID=tagSet.getSGID().getUuid().toString();
    System.out.println(outputID);
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",outputID);
    Utility.writeKeyValueFile(outputFile,keyValues);
    return tagSet.getSGID();
  }
 catch (  ParseException ex) {
    Logger.getLogger(OBOImporter.class.getName()).fatal(null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(OBOImporter.class.getName()).fatal(null,ex);
  }
 finally {
    try {
      inStream.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(OBOImporter.class.getName()).fatal(null,ex);
    }
  }
  return null;
}","/** 
 * Import a set of Tag specifications into a new TagSet.
 * @param args
 * @return
 */
public static SGID mainMethod(String[] args){
  if (args.length < 1) {
    System.err.println(""String_Node_Str"" + args.length + ""String_Node_Str"");
    System.out.println(OBOImporter.class.getSimpleName() + ""String_Node_Str"" + TAG_CHAR+ ""String_Node_Str"");
    System.exit(FeatureImporter.EXIT_CODE_INVALID_ARGS);
  }
  Options options=new Options();
  Option option1=OptionBuilder.withArgName(""String_Node_Str"").withDescription(""String_Node_Str"").isRequired(false).hasArgs(1).create(TAG_CHAR);
  options.addOption(option1);
  String friendlyName=null;
  try {
    CommandLineParser clparser=new PosixParser();
    CommandLine cmd=clparser.parse(options,args);
    friendlyName=cmd.getOptionValue(TAG_CHAR);
    args=cmd.getArgs();
  }
 catch (  org.apache.commons.cli.ParseException ex) {
    Logger.getLogger(OBOImporter.class.getName()).info(null,ex);
  }
  InputStream inStream=null;
  try {
    File file=new File(args[0]);
    OboParser parser=new OboParser();
    inStream=new FileInputStream(file);
    BufferedReader oboFile=new BufferedReader(new InputStreamReader(inStream));
    File outputFile=null;
    if (args.length == 2) {
      outputFile=Utility.checkOutput(args[1]);
    }
    Ontology ontology=parser.parseOBO(oboFile,""String_Node_Str"",""String_Node_Str"");
    Set keys=ontology.getTerms();
    Iterator iter=keys.iterator();
    Pattern p=Pattern.compile(""String_Node_Str"");
    CreateUpdateManager modelManager=SWQEFactory.getModelManager();
    TagSet tagSet;
    if (friendlyName == null) {
      tagSet=modelManager.buildTagSet().setName(""String_Node_Str"").build();
    }
 else {
      tagSet=modelManager.buildTagSet().setName(""String_Node_Str"").setFriendlyRowKey(friendlyName).build();
    }
    while (iter.hasNext()) {
      Term term=(Term)iter.next();
      if (!p.matcher(term.getName()).matches()) {
        Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + term.getDescription() + ""String_Node_Str""+ term.getName());
        continue;
      }
      if (term.getAnnotation().containsProperty(""String_Node_Str"")) {
        Object property=term.getAnnotation().getProperty(""String_Node_Str"");
        if (property.equals(true)) {
          continue;
        }
      }
      Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + term.getDescription() + ""String_Node_Str""+ term.getName());
      String key1=term.getName() + ""String_Node_Str"" + term.getDescription();
      Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + key1);
      tagSet.add(modelManager.buildTag().setKey(key1).build());
      String key2=term.getName();
      Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + key2);
      tagSet.add(modelManager.buildTag().setKey(key2).build());
      List<Synonym> synonyms=parser.getSynonymMap().get(term);
      if (synonyms == null) {
        continue;
      }
      for (      Synonym syn : synonyms) {
        String key3=term.getName() + ""String_Node_Str"" + syn.getName();
        Logger.getLogger(OBOImporter.class.getName()).trace(""String_Node_Str"" + key3);
        tagSet.add(modelManager.buildTag().setKey(key3).build());
      }
    }
    Logger.getLogger(OBOImporter.class.getName()).info(""String_Node_Str"" + tagSet.getCount() + ""String_Node_Str"");
    modelManager.close();
    SWQEFactory.getStorage().closeStorage();
    System.out.println(tagSet.getCount() + ""String_Node_Str"");
    String outputID=tagSet.getSGID().getRowKey();
    System.out.println(outputID);
    Map<String,String> keyValues=new HashMap<String,String>();
    keyValues.put(""String_Node_Str"",outputID);
    Utility.writeKeyValueFile(outputFile,keyValues);
    return tagSet.getSGID();
  }
 catch (  ParseException ex) {
    Logger.getLogger(OBOImporter.class.getName()).fatal(null,ex);
  }
catch (  IOException ex) {
    Logger.getLogger(OBOImporter.class.getName()).fatal(null,ex);
  }
 finally {
    try {
      inStream.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(OBOImporter.class.getName()).fatal(null,ex);
    }
  }
  return null;
}",0.8991308928101133
189068,"private void processTimestamp(FSGID fsgid){
  if (this.getPrecedingSGID() == null) {
    if (getManager() != null && getManager().getState(this) != CreateUpdateManager.State.NEW_CREATION) {
      fsgid.setBackendTimestamp(new Date(this.getTimestamp().getTime()));
    }
 else {
      fsgid.setBackendTimestamp(new Date(this.getTimestamp().getTime() - 1));
    }
  }
 else {
    fsgid.setBackendTimestamp(this.getTimestamp());
  }
}","private void processTimestamp(FSGID fsgid){
  if (this.getPrecedingSGID() == null) {
    if (getManager() != null && getManager().getState(this) != null && getManager().getState(this) != CreateUpdateManager.State.NEW_CREATION) {
      fsgid.setBackendTimestamp(new Date(this.getTimestamp().getTime()));
    }
 else {
      fsgid.setBackendTimestamp(new Date(this.getTimestamp().getTime() - 1));
    }
  }
 else {
    fsgid.setBackendTimestamp(this.getTimestamp());
  }
}",0.9567147613762488
189069,"private void upgradeFeatureSGID(Feature feature){
  FSGID fsgid=new FSGID(feature.getSGID(),feature,this);
  processTimestamp(fsgid);
  feature.impersonate(fsgid,feature.getPrecedingSGID());
  if (getManager() != null) {
    getManager().atomStateChange(feature,CreateUpdateManager.State.NEW_CREATION);
  }
}","private void upgradeFeatureSGID(Feature feature){
  FSGID fsgid=new FSGID(feature.getSGID(),feature,this);
  processTimestamp(fsgid);
  feature.impersonate(fsgid,feature.getPrecedingSGID());
  if (feature.getManager() != null) {
    feature.getManager().atomStateChange(feature,CreateUpdateManager.State.NEW_CREATION);
  }
}",0.9746835443037974
189070,"@Override public long getCount(){
  Logger.getLogger(LazyFeatureSet.class.getName()).log(Level.WARNING,""String_Node_Str"");
  Iterator<Feature> features=this.getFeatures();
  long count=0;
  while (features.hasNext()) {
    Feature next=features.next();
    if (((FSGID)next.getSGID()).isTombstone()) {
      continue;
    }
    count++;
  }
  return count;
}","@Override public long getCount(){
  if (!EXPENSIVE_ITERATION_WARNED) {
    Logger.getLogger(LazyFeatureSet.class.getName()).log(Level.WARNING,""String_Node_Str"");
    EXPENSIVE_ITERATION_WARNED=true;
  }
  Iterator<Feature> features=this.getFeatures();
  long count=0;
  while (features.hasNext()) {
    Feature next=features.next();
    if (((FSGID)next.getSGID()).isTombstone()) {
      continue;
    }
    count++;
  }
  return count;
}",0.8994974874371859
189071,"@Test public void testVersioningAndFeatureSets(){
  CreateUpdateManager mManager=SWQEFactory.getModelManager();
  FeatureSet aSet=mManager.buildFeatureSet().setReference(mManager.buildReference().setName(""String_Node_Str"").build()).build();
  mManager.flush();
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000000).setStop(1000100).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000200).setStop(1000300).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000400).setStop(1000500).build());
  mManager.flush();
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000600).setStop(1000610).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000700).setStop(1000710).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000800).setStop(1000810).build());
  mManager.flush();
  List<Feature> killList=new ArrayList<Feature>();
  for (  Feature f : aSet) {
    killList.add(f);
  }
  for (  Feature f : killList) {
    aSet.remove(f);
  }
  mManager.flush();
  FeatureSet testSet=(FeatureSet)SWQEFactory.getQueryInterface().getAtomBySGID(FeatureSet.class,aSet.getSGID());
  Assert.assertTrue(""String_Node_Str"" + testSet.getVersion(),testSet.getVersion() == 4);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getVersion() == 3);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getVersion() == 2);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getVersion() == 1);
  Assert.assertTrue(""String_Node_Str"" + testSet.getCount(),testSet.getCount() == 0);
  Assert.assertTrue(""String_Node_Str"" + testSet.getPrecedingVersion().getCount(),testSet.getPrecedingVersion().getCount() == 6);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getCount() == 3);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getCount() == 0);
  Assert.assertTrue(""String_Node_Str"",aSet.getVersion() == 4);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getVersion() == 3);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getVersion() == 2);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getVersion() == 1);
  Assert.assertTrue(""String_Node_Str"",aSet.getCount() == 0);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getCount() == 6);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getCount() == 3);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getCount() == 0);
}","@Test public void testVersioningAndFeatureSets(){
  CreateUpdateManager mManager=SWQEFactory.getModelManager();
  FeatureSet aSet=mManager.buildFeatureSet().setReference(mManager.buildReference().setName(""String_Node_Str"").build()).build();
  mManager.flush();
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000000).setStop(1000100).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000200).setStop(1000300).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000400).setStop(1000500).build());
  mManager.flush();
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000600).setStop(1000610).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000700).setStop(1000710).build());
  aSet.add(mManager.buildFeature().setSeqid(""String_Node_Str"").setStart(1000800).setStop(1000810).build());
  mManager.flush();
  List<Feature> killList=new ArrayList<Feature>();
  for (  Feature f : aSet) {
    killList.add(f);
  }
  for (  Feature f : killList) {
    aSet.remove(f);
  }
  mManager.flush();
  FeatureSet testSet=SWQEFactory.getQueryInterface().getAtomBySGID(FeatureSet.class,aSet.getSGID());
  Assert.assertTrue(""String_Node_Str"" + testSet.getVersion(),testSet.getVersion() == 4);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getVersion() == 3);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getVersion() == 2);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getVersion() == 1);
  Assert.assertTrue(""String_Node_Str"" + testSet.getCount(),testSet.getCount() == 0);
  Assert.assertTrue(""String_Node_Str"" + testSet.getPrecedingVersion().getCount(),testSet.getPrecedingVersion().getCount() == 6);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getCount() == 3);
  Assert.assertTrue(""String_Node_Str"",testSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getCount() == 0);
  Assert.assertTrue(""String_Node_Str"",aSet.getVersion() == 4);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getVersion() == 3);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getVersion() == 2);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getVersion() == 1);
  Assert.assertTrue(""String_Node_Str"",aSet.getCount() == 0);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getCount() == 6);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getCount() == 3);
  Assert.assertTrue(""String_Node_Str"",aSet.getPrecedingVersion().getPrecedingVersion().getPrecedingVersion().getCount() == 0);
}",0.9979094076655052
189072,"@Override public void persist(Particle p){
  this.dirtySet.put(p.getSGID(),new ParticleStatePair(p,State.MANAGED));
}","@Override public void persist(Particle p){
  if (this.dirtySet.containsKey(p.getSGID())) {
    Logger.getLogger(SimpleModelManager.class.getName()).log(Level.INFO,""String_Node_Str"");
    return;
  }
  p.setManager(this);
  this.dirtySet.put(p.getSGID(),new ParticleStatePair(p,State.MANAGED));
}",0.5679611650485437
189073,"@Override public void close(){
  this.flush();
  this.clear();
}","@Override public void close(){
  for (  ParticleStatePair p : dirtySet.values()) {
    p.p.setManager(null);
  }
  this.flush();
  this.clear();
}",0.6095238095238096
189074,"@BeforeClass public static void setupTests(){
  ModelManager mManager=Factory.getModelManager();
  fSet=mManager.buildFeatureSet().setReference(mManager.buildReference().setName(""String_Node_Str"").build()).build();
  Set<Feature> testFeatures=new HashSet<Feature>();
  f1=mManager.buildFeature().setStart(1000000).setStop(1000100).build();
  testFeatures.add(f1);
  fSet.add(testFeatures);
  tSet1=mManager.buildTagSet().setName(""String_Node_Str"").build();
  rSet=mManager.buildReferenceSet().setName(""String_Node_Str"").setOrganism(""String_Node_Str"").build();
  aSet=mManager.buildAnalysisSet().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  r1=mManager.buildReference().setName(""String_Node_Str"").build();
  rSet.add(r1);
  group=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  viewerGroup=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  marshmallowUser=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  titanicUser=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  group.add(marshmallowUser);
  viewerGroup.add(titanicUser);
  fSet.setPermissions(fSet.getPermissions().toBuilder().setOwner(marshmallowUser).build());
  tSet1.setPermissions(tSet1.getPermissions().toBuilder().setOwner(marshmallowUser).setGroup(group).build());
  rSet.setPermissions(rSet.getPermissions().toBuilder().setGroup(group).build());
  mManager.flush();
  fSet.setPermissions(fSet.getPermissions().toBuilder().setOwner(titanicUser).setRights(new boolean[]{false,false,false,false,false,false}).build());
  mManager.flush();
  fSet.setPermissions(fSet.getPermissions().toBuilder().setOwner(marshmallowUser).setRights(new boolean[]{true,true,true,true,true,true}).build());
  mManager.close();
}","@BeforeClass public static void setupTests(){
  ModelManager mManager=Factory.getModelManager();
  fSet=mManager.buildFeatureSet().setReference(mManager.buildReference().setName(""String_Node_Str"").build()).build();
  Set<Feature> testFeatures=new HashSet<Feature>();
  f1=mManager.buildFeature().setStart(1000000).setStop(1000100).build();
  testFeatures.add(f1);
  fSet.add(testFeatures);
  tSet1=mManager.buildTagSet().setName(""String_Node_Str"").build();
  rSet=mManager.buildReferenceSet().setName(""String_Node_Str"").setOrganism(""String_Node_Str"").build();
  aSet=mManager.buildAnalysisSet().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  r1=mManager.buildReference().setName(""String_Node_Str"").build();
  rSet.add(r1);
  group=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  viewerGroup=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  marshmallowUser=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  titanicUser=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  a1=mManager.buildAnalysis().setParameters(new ArrayList()).setPlugin(new InMemoryFeaturesAllPlugin()).build();
  group.add(marshmallowUser);
  viewerGroup.add(titanicUser);
  fSet.setPermissions(fSet.getPermissions().toBuilder().setOwner(marshmallowUser).build());
  tSet1.setPermissions(tSet1.getPermissions().toBuilder().setOwner(marshmallowUser).setGroup(group).build());
  rSet.setPermissions(rSet.getPermissions().toBuilder().setGroup(group).build());
  mManager.flush();
  fSet.setPermissions(fSet.getPermissions().toBuilder().setOwner(titanicUser).setRights(new boolean[]{false,false,false,false,false,false}).build());
  mManager.flush();
  fSet.setPermissions(fSet.getPermissions().toBuilder().setOwner(marshmallowUser).setRights(new boolean[]{true,true,true,true,true,true}).build());
  mManager.close();
}",0.972645848462842
189075,"@Override public Builder setManager(ModelManager aThis){
  return this;
}","@Override public Builder setManager(ModelManager aThis){
  tag.setManager(aThis);
  return this;
}",0.8538011695906432
189076,"@Override public Tag build(){
  if (tag.key == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return tag;
}","@Override public Tag build(){
  if (tag.key == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  tag.getManager().objectCreated(tag);
  return tag;
}",0.8650519031141869
189077,"/** 
 * Create an ACL builder started with a copy of this
 * @return 
 */
@Override public abstract TagSet.Builder toBuilder();","/** 
 * Create an ACL builder started with a copy of this
 * @return
 */
@Override public abstract TagSet.Builder toBuilder();",0.9960474308300395
189078,"@Test public void testACLWithAllObjects(){
  ModelManager mManager=Factory.getModelManager();
  Group newGroup=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  User newUser=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  ACL acl=fSet.getPermissions().toBuilder().setOwner(newUser).setGroup(newGroup).build();
  Assert.assertTrue(!(f1 instanceof ACLable));
  Molecule[] mols={a1,fSet,tSet1,rSet,r1,r1,group,viewerGroup,marshmallowUser,titanicUser,aSet,newGroup,newUser};
  for (  Molecule mol : mols) {
    mManager.persist(mol);
    mol.setPermissions(acl);
  }
  mManager.flush();
  for (  Molecule mol : mols) {
    Molecule molFromBackEnd=(Molecule)Factory.getFeatureStoreInterface().getParticleBySGID(mol.getSGID());
    Assert.assertTrue(molFromBackEnd.getPermissions().getOwner().equals(newUser));
    Assert.assertTrue(molFromBackEnd.getPermissions().getGroup().equals(newGroup));
  }
  User newUser2=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  acl=acl.toBuilder().setOwner(newUser2).setGroup(newGroup).build();
  for (  Molecule mol : mols) {
    mol.setPermissions(acl);
  }
  mManager.flush();
  for (  Molecule mol : mols) {
    Molecule molFromBackEnd=(Molecule)Factory.getFeatureStoreInterface().getParticleBySGID(mol.getSGID());
    Assert.assertTrue(molFromBackEnd.getPermissions().getOwner().equals(newUser2));
    Assert.assertTrue(((Molecule)molFromBackEnd.getPrecedingVersion()).getPermissions().getOwner().equals(newUser));
    Assert.assertTrue(molFromBackEnd.getPermissions().getGroup().equals(newGroup));
  }
}","@Test public void testACLWithAllObjects(){
  ModelManager mManager=Factory.getModelManager();
  Group newGroup=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  User newUser=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  ACL acl=fSet.getPermissions().toBuilder().setOwner(newUser).setGroup(newGroup).build();
  Assert.assertTrue(!(f1 instanceof ACLable));
  Molecule[] mols={a1,fSet,tSet1,rSet,r1,r1,group,viewerGroup,marshmallowUser,titanicUser,aSet,newGroup,newUser};
  for (  Molecule mol : mols) {
    mManager.persist(mol);
    mol.setPermissions(acl);
  }
  mManager.flush();
  for (  Molecule mol : mols) {
    Molecule molFromBackEnd=(Molecule)Factory.getFeatureStoreInterface().getParticleBySGID(mol.getSGID());
    Assert.assertTrue(molFromBackEnd.getPermissions().getOwner().equals(newUser));
    Assert.assertTrue(molFromBackEnd.getPermissions().getGroup().equals(newGroup));
  }
  User newUser2=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  acl=acl.toBuilder().setOwner(newUser2).setGroup(newGroup).build();
  for (  Molecule mol : mols) {
    mol.setPermissions(acl);
  }
  mManager.flush();
  for (  Molecule mol : mols) {
    Molecule molFromBackEnd=(Molecule)Factory.getFeatureStoreInterface().getParticleBySGID(mol.getSGID());
    Assert.assertTrue(molFromBackEnd.getPermissions().getOwner().equals(newUser2));
    Assert.assertTrue(((Molecule)molFromBackEnd.getPrecedingVersion()).getPermissions().getOwner().equals(newUser));
    Assert.assertTrue(molFromBackEnd.getPermissions().getGroup().equals(newGroup));
  }
  mManager.close();
}",0.9944994499449944
189079,"@BeforeClass public static void setupTests(){
  ModelManager mManager=Factory.getModelManager();
  fSet=mManager.buildFeatureSet().setReference(mManager.buildReference().setName(""String_Node_Str"").build()).build();
  Set<Feature> testFeatures=new HashSet<Feature>();
  f1=mManager.buildFeature().setStart(1000000).setStop(1000100).build();
  f2=mManager.buildFeature().setStart(1000200).setStop(1000300).build();
  f3=mManager.buildFeature().setStart(1000400).setStop(1000500).build();
  testFeatures.add(f1);
  testFeatures.add(f2);
  testFeatures.add(f3);
  fSet.add(testFeatures);
  tSet1=mManager.buildTagSet().setName(""String_Node_Str"").build();
  tSet2=mManager.buildTagSet().setName(""String_Node_Str"").build();
  rSet=mManager.buildReferenceSet().setName(""String_Node_Str"").setOrganism(""String_Node_Str"").build();
  aSet=mManager.buildAnalysisSet().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  a=mManager.buildAnalysis().setParameters(new ArrayList<Object>()).setPlugin(new InMemoryFeaturesAllPlugin()).build();
  r1=mManager.buildReference().setName(""String_Node_Str"").build();
  rSet.add(r1);
  group=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  u1=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  group.add(u1);
  Tag t1a=mManager.buildTag().setKey(""String_Node_Str"").build();
  Tag t1b=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").build();
  Tag t1c=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").setValue(""String_Node_Str"").build();
  Tag t2a=mManager.buildTag().setKey(""String_Node_Str"").build();
  Tag t2b=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").build();
  Tag t2c=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").setValue(""String_Node_Str"").build();
  Tag t3a=mManager.buildTag().setKey(""String_Node_Str"").build();
  fSet.associateTag(t2a);
  fSet.associateTag(t2b);
  fSet.associateTag(t2c);
  a.associateTag(t3a);
  f1.associateTag(t1a);
  f2.associateTag(t1b);
  f3.associateTag(t1c);
  tSet1.associateTag(t3a);
  aSet.associateTag(t2a);
  rSet.associateTag(t2a);
  r1.associateTag(t2a);
  group.associateTag(t2b);
  u1.associateTag(t2b);
  mManager.flush();
}","@BeforeClass public static void setupTests(){
  ModelManager mManager=Factory.getModelManager();
  fSet=mManager.buildFeatureSet().setReference(mManager.buildReference().setName(""String_Node_Str"").build()).build();
  Set<Feature> testFeatures=new HashSet<Feature>();
  f1=mManager.buildFeature().setStart(1000000).setStop(1000100).build();
  f2=mManager.buildFeature().setStart(1000200).setStop(1000300).build();
  f3=mManager.buildFeature().setStart(1000400).setStop(1000500).build();
  testFeatures.add(f1);
  testFeatures.add(f2);
  testFeatures.add(f3);
  fSet.add(testFeatures);
  tSet1=mManager.buildTagSet().setName(""String_Node_Str"").build();
  tSet2=mManager.buildTagSet().setName(""String_Node_Str"").build();
  rSet=mManager.buildReferenceSet().setName(""String_Node_Str"").setOrganism(""String_Node_Str"").build();
  aSet=mManager.buildAnalysisSet().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  a=mManager.buildAnalysis().setParameters(new ArrayList<Object>()).setPlugin(new InMemoryFeaturesAllPlugin()).build();
  r1=mManager.buildReference().setName(""String_Node_Str"").build();
  rSet.add(r1);
  group=mManager.buildGroup().setName(""String_Node_Str"").setDescription(""String_Node_Str"").build();
  u1=mManager.buildUser().setFirstName(""String_Node_Str"").setLastName(""String_Node_Str"").setEmailAddress(""String_Node_Str"").setPassword(""String_Node_Str"").build();
  group.add(u1);
  t1a=mManager.buildTag().setKey(""String_Node_Str"").build();
  t1b=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").build();
  t1c=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").setValue(""String_Node_Str"").build();
  t2a=mManager.buildTag().setKey(""String_Node_Str"").build();
  t2b=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").build();
  t2c=mManager.buildTag().setKey(""String_Node_Str"").setPredicate(""String_Node_Str"").setValue(""String_Node_Str"").build();
  t3a=mManager.buildTag().setKey(""String_Node_Str"").build();
  fSet.associateTag(t2a);
  fSet.associateTag(t2b);
  fSet.associateTag(t2c);
  a.associateTag(t3a);
  f1.associateTag(t1a);
  f2.associateTag(t1b);
  f3.associateTag(t1c);
  tSet1.associateTag(t3a);
  aSet.associateTag(t2a);
  rSet.associateTag(t2a);
  r1.associateTag(t2a);
  group.associateTag(t2b);
  u1.associateTag(t2b);
  mManager.flush();
}",0.8678136802349979
189080,"@Test public void testTaggingOnEverything(){
  SeqWareIterable<TagSet> tagSets=Factory.getFeatureStoreInterface().getTagSets();
  SeqWareIterable<Tag> tags1=fSet.getTags();
  Assert.assertTrue(tags1.getCount() == 3);
  Assert.assertTrue(a.getTags().getCount() == 1);
}","@Test public void testTaggingOnEverything(){
  SeqWareIterable<TagSet> tagSets=Factory.getFeatureStoreInterface().getTagSets();
  boolean t1found=false;
  boolean t2found=false;
  for (  TagSet t : tagSets) {
    if (t.equals(tSet1)) {
      t1found=true;
    }
 else     if (t.equals(tSet2)) {
      t2found=true;
    }
  }
  Assert.assertTrue(t1found == true && t2found == true);
  SeqWareIterable<Tag> tags=Factory.getFeatureStoreInterface().getTags();
  Tag[] tagsCheck={t1a,t1b,t1c,t2a,t2b,t2c,t3a};
  boolean[] tagsCheckFound=new boolean[tagsCheck.length];
  Arrays.fill(tagsCheckFound,false);
  for (  Tag ta : tags) {
    for (int i=0; i < tagsCheckFound.length; i++) {
      if (tagsCheck[i].equals(ta)) {
        tagsCheckFound[i]=true;
      }
    }
  }
  for (  boolean b : tagsCheckFound) {
    Assert.assertTrue(b);
  }
  SeqWareIterable<Tag> tags1=fSet.getTags();
  Assert.assertTrue(tags1.getCount() == 3);
  Assert.assertTrue(a.getTags().getCount() == 1);
}",0.3800322061191626
189081,"LoggingEvent(final Optional<TestLogger> creatingLogger,final Level level,final Map<String,String> mdc,final Optional<Marker> marker,final Optional<Throwable> throwable,final String message,final Object... arguments){
  super();
  this.creatingLogger=creatingLogger;
  this.level=checkNotNull(level);
  this.mdc=ImmutableMap.copyOf(mdc);
  this.marker=checkNotNull(marker);
  this.throwable=checkNotNull(throwable);
  this.message=checkNotNull(message);
  this.arguments=ImmutableList.copyOf(arguments);
}","LoggingEvent(final Optional<TestLogger> creatingLogger,final Level level,final Map<String,String> mdc,final Optional<Marker> marker,final Optional<Throwable> throwable,final String message,final Object... arguments){
  super();
  this.creatingLogger=creatingLogger;
  this.level=checkNotNull(level);
  this.mdc=ImmutableMap.copyOf(mdc);
  this.marker=checkNotNull(marker);
  this.throwable=checkNotNull(throwable);
  this.message=checkNotNull(message);
  this.arguments=from(asList(arguments)).transform(new Function<Object,Object>(){
    @Override public Object apply(    Object input){
      return fromNullable(input).or((Object)absent());
    }
  }
).toList();
}",0.8068376068376069
189082,"private void log(final Level level,final Marker marker,final String msg,final Throwable throwable){
  addLoggingEvent(level,of(marker),of(throwable),msg);
}","private void log(final Level level,final Marker marker,final String msg,final Throwable throwable){
  addLoggingEvent(level,fromNullable(marker),fromNullable(throwable),msg);
}",0.927710843373494
189083,"public void put(final String key,final String val){
  value.get().put(key,val);
}","public void put(final String key,final String val){
  value.get().put(key,fromNullable(val).or(""String_Node_Str""));
}",0.8181818181818182
189084,"LoggingEvent(final Optional<TestLogger> creatingLogger,final Level level,final Map<String,String> mdc,final Optional<Marker> marker,final Optional<Throwable> throwable,final String message,final Object... arguments){
  super();
  this.creatingLogger=creatingLogger;
  this.level=checkNotNull(level);
  this.mdc=ImmutableMap.copyOf(mdc);
  this.marker=checkNotNull(marker);
  this.throwable=checkNotNull(throwable);
  this.message=checkNotNull(message);
  this.arguments=ImmutableList.copyOf(arguments);
}","LoggingEvent(final Optional<TestLogger> creatingLogger,final Level level,final Map<String,String> mdc,final Optional<Marker> marker,final Optional<Throwable> throwable,final String message,final Object... arguments){
  super();
  this.creatingLogger=creatingLogger;
  this.level=checkNotNull(level);
  this.mdc=ImmutableMap.copyOf(mdc);
  this.marker=checkNotNull(marker);
  this.throwable=checkNotNull(throwable);
  this.message=checkNotNull(message);
  this.arguments=from(asList(arguments)).transform(TO_NON_NULL_VALUE).toList();
}",0.9132947976878611
189085,"private void log(final Level level,final Marker marker,final String msg,final Throwable throwable){
  addLoggingEvent(level,of(marker),of(throwable),msg);
}","private void log(final Level level,final Marker marker,final String msg,final Throwable throwable){
  addLoggingEvent(level,fromNullable(marker),fromNullable(throwable),msg);
}",0.927710843373494
189086,"public void put(final String key,final String val){
  value.get().put(key,val);
}","public void put(final String key,final String val){
  value.get().put(key,fromNullable(val).or(""String_Node_Str""));
}",0.8181818181818182
189087,"/** 
 * Returns a service instance for an end point to the cache so that it may be used by other users.
 * @param endPoint The end point that the service instance belongs to.
 * @param service  The service instance to return to the pool.
 * @throws Exception Never.
 */
public void checkIn(ServiceEndPoint endPoint,S service) throws Exception {
  checkNotNull(endPoint);
  checkNotNull(service);
  ServiceEndPointInstancePair pair=new ServiceEndPointInstancePair(endPoint,service);
  if (_isClosed || !pair.isValid()) {
    _pool.invalidateObject(endPoint,service);
  }
 else {
    _pool.returnObject(endPoint,service);
  }
  if (_checkOutCounts.remove(pair,1) == 1) {
    _checkOutRevisions.remove(pair);
  }
}","/** 
 * Returns a service instance for an end point to the cache so that it may be used by other users.
 * @param handle The service handle that is being checked in.
 * @throws Exception Never.
 */
public void checkIn(ServiceHandle<S> handle) throws Exception {
  checkNotNull(handle);
  S service=handle.getService();
  ServiceEndPoint endPoint=handle.getEndPoint();
  Long invalidRevision=_invalidRevisions.get(endPoint);
  Long serviceRevision=_checkedOutRevisions.remove(handle);
  if (_isClosed || (invalidRevision != null && serviceRevision < invalidRevision)) {
    _pool.invalidateObject(endPoint,service);
  }
 else {
    _pool.returnObject(endPoint,service);
  }
}",0.540072202166065
189088,"/** 
 * Retrieves a cached service instance for an end point that is not currently checked out.  If no idle cached instance is available and the cache is not full, a new one will be created, added to the cache, and then checked out.  Once the checked out instance is no longer in use, it should be returned by calling   {@link #checkIn}.
 * @param endPoint The end point to retrieve a cached service instance for.
 * @return A cached service instance for the requested end point.
 * @throws NoCachedInstancesAvailableException If the cache has reached total maximum capacity, or maximum capacityfor the requested end point, and no connections that aren't already checked out are available.
 */
public S checkOut(ServiceEndPoint endPoint) throws Exception {
  checkNotNull(endPoint);
  _requestCount.incrementAndGet();
  long currentRevision=_revisionNumber.get();
  try {
    S service=_pool.borrowObject(endPoint);
    ServiceEndPointInstancePair pair=new ServiceEndPointInstancePair(endPoint,service);
    _checkOutCounts.add(pair);
    _checkOutRevisions.putIfAbsent(pair,currentRevision);
    return service;
  }
 catch (  NoSuchElementException e) {
    _missCount.incrementAndGet();
    throw new NoCachedInstancesAvailableException();
  }
}","/** 
 * Retrieves a cached service instance for an end point that is not currently checked out.  If no idle cached instance is available and the cache is not full, a new one will be created, added to the cache, and then checked out.  Once the checked out instance is no longer in use, it should be returned by calling   {@link #checkIn}.
 * @param endPoint The end point to retrieve a cached service instance for.
 * @return A service handle that contains a cached service instance for the requested end point.
 * @throws NoCachedInstancesAvailableException If the cache has reached total maximum capacity, or maximum capacityfor the requested end point, and no connections that aren't already checked out are available.
 */
public ServiceHandle<S> checkOut(ServiceEndPoint endPoint) throws Exception {
  checkNotNull(endPoint);
  _requestCount.incrementAndGet();
  try {
    long revision=_revisionNumber.incrementAndGet();
    S service=_pool.borrowObject(endPoint);
    ServiceHandle<S> handle=new ServiceHandle<S>(service,endPoint);
    _checkedOutRevisions.put(handle,revision);
    return handle;
  }
 catch (  NoSuchElementException e) {
    _missCount.incrementAndGet();
    throw new NoCachedInstancesAvailableException();
  }
}",0.8695652173913043
189089,"/** 
 * Execute a callback on a specific end point. <p/> NOTE: This method is package private specifically so that   {@link AsyncServicePool} can call it.
 */
<R>R executeOnEndPoint(ServiceEndPoint endPoint,ServiceCallback<S,R> callback) throws Exception {
  S service=null;
  try {
    service=_serviceCache.checkOut(endPoint);
    TimerContext timer=_callbackExecutionTime.time();
    try {
      return callback.call(service);
    }
  finally {
      timer.stop();
    }
  }
 catch (  NoCachedInstancesAvailableException e) {
    LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    throw e;
  }
catch (  Exception e) {
    if (_serviceFactory.isRetriableException(e)) {
      markEndPointAsBad(endPoint);
      LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    }
    throw e;
  }
 finally {
    if (service != null) {
      try {
        _serviceCache.checkIn(endPoint,service);
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",endPoint.getId(),e.toString());
        LOG.debug(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * Execute a callback on a specific end point. <p/> NOTE: This method is package private specifically so that   {@link AsyncServicePool} can call it.
 */
<R>R executeOnEndPoint(ServiceEndPoint endPoint,ServiceCallback<S,R> callback) throws Exception {
  ServiceHandle<S> handle=null;
  try {
    handle=_serviceCache.checkOut(endPoint);
    TimerContext timer=_callbackExecutionTime.time();
    try {
      return callback.call(handle.getService());
    }
  finally {
      timer.stop();
    }
  }
 catch (  NoCachedInstancesAvailableException e) {
    LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    throw e;
  }
catch (  Exception e) {
    if (_serviceFactory.isRetriableException(e)) {
      markEndPointAsBad(endPoint);
      LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    }
    throw e;
  }
 finally {
    if (handle != null) {
      try {
        _serviceCache.checkIn(handle);
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",endPoint.getId(),e.toString());
        LOG.debug(""String_Node_Str"",e);
      }
    }
  }
}",0.9649621212121212
189090,"/** 
 * Returns a service instance for an end point to the cache so that it may be used by other users.
 * @param endPoint The end point that the service instance belongs to.
 * @param service  The service instance to return to the pool.
 * @throws Exception Never.
 */
public void checkIn(ServiceEndPoint endPoint,S service) throws Exception {
  checkNotNull(endPoint);
  checkNotNull(service);
  Long invalidRevision=_invalidRevisions.get(endPoint);
  Long serviceRevision=_checkOutRevisions.remove(service);
  if (_isClosed || (invalidRevision != null && serviceRevision < invalidRevision)) {
    _pool.invalidateObject(endPoint,service);
  }
 else {
    _pool.returnObject(endPoint,service);
  }
}","/** 
 * Returns a service instance for an end point to the cache so that it may be used by other users.
 * @param handle The service handle that is being checked in.
 * @throws Exception Never.
 */
public void checkIn(ServiceHandle<S> handle) throws Exception {
  checkNotNull(handle);
  S service=handle.getService();
  ServiceEndPoint endPoint=handle.getEndPoint();
  Long invalidRevision=_invalidRevisions.get(endPoint);
  Long serviceRevision=_checkedOutRevisions.remove(handle);
  if (_isClosed || (invalidRevision != null && serviceRevision < invalidRevision)) {
    _pool.invalidateObject(endPoint,service);
  }
 else {
    _pool.returnObject(endPoint,service);
  }
}",0.7738181818181818
189091,"/** 
 * Retrieves a cached service instance for an end point that is not currently checked out.  If no idle cached instance is available and the cache is not full, a new one will be created, added to the cache, and then checked out.  Once the checked out instance is no longer in use, it should be returned by calling   {@link #checkIn}.
 * @param endPoint The end point to retrieve a cached service instance for.
 * @return A cached service instance for the requested end point.
 * @throws NoCachedInstancesAvailableException If the cache has reached total maximum capacity, or maximum capacityfor the requested end point, and no connections that aren't already checked out are available.
 */
public S checkOut(ServiceEndPoint endPoint) throws Exception {
  checkNotNull(endPoint);
  _requestCount.incrementAndGet();
  try {
    S service=_pool.borrowObject(endPoint);
    _checkOutRevisions.put(service,_revisionNumber.incrementAndGet());
    return service;
  }
 catch (  NoSuchElementException e) {
    _missCount.incrementAndGet();
    throw new NoCachedInstancesAvailableException();
  }
}","/** 
 * Retrieves a cached service instance for an end point that is not currently checked out.  If no idle cached instance is available and the cache is not full, a new one will be created, added to the cache, and then checked out.  Once the checked out instance is no longer in use, it should be returned by calling   {@link #checkIn}.
 * @param endPoint The end point to retrieve a cached service instance for.
 * @return A service handle that contains a cached service instance for the requested end point.
 * @throws NoCachedInstancesAvailableException If the cache has reached total maximum capacity, or maximum capacityfor the requested end point, and no connections that aren't already checked out are available.
 */
public ServiceHandle<S> checkOut(ServiceEndPoint endPoint) throws Exception {
  checkNotNull(endPoint);
  _requestCount.incrementAndGet();
  try {
    long revision=_revisionNumber.incrementAndGet();
    S service=_pool.borrowObject(endPoint);
    ServiceHandle<S> handle=new ServiceHandle<S>(service,endPoint);
    _checkedOutRevisions.put(handle,revision);
    return handle;
  }
 catch (  NoSuchElementException e) {
    _missCount.incrementAndGet();
    throw new NoCachedInstancesAvailableException();
  }
}",0.8807890222984562
189092,"/** 
 * Execute a callback on a specific end point. <p/> NOTE: This method is package private specifically so that   {@link AsyncServicePool} can call it.
 */
<R>R executeOnEndPoint(ServiceEndPoint endPoint,ServiceCallback<S,R> callback) throws Exception {
  S service=null;
  try {
    service=_serviceCache.checkOut(endPoint);
    TimerContext timer=_callbackExecutionTime.time();
    try {
      return callback.call(service);
    }
  finally {
      timer.stop();
    }
  }
 catch (  NoCachedInstancesAvailableException e) {
    LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    throw e;
  }
catch (  Exception e) {
    if (_serviceFactory.isRetriableException(e)) {
      markEndPointAsBad(endPoint);
      LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    }
    throw e;
  }
 finally {
    if (service != null) {
      try {
        _serviceCache.checkIn(endPoint,service);
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",endPoint.getId(),e.toString());
        LOG.debug(""String_Node_Str"",e);
      }
    }
  }
}","/** 
 * Execute a callback on a specific end point. <p/> NOTE: This method is package private specifically so that   {@link AsyncServicePool} can call it.
 */
<R>R executeOnEndPoint(ServiceEndPoint endPoint,ServiceCallback<S,R> callback) throws Exception {
  ServiceHandle<S> handle=null;
  try {
    handle=_serviceCache.checkOut(endPoint);
    TimerContext timer=_callbackExecutionTime.time();
    try {
      return callback.call(handle.getService());
    }
  finally {
      timer.stop();
    }
  }
 catch (  NoCachedInstancesAvailableException e) {
    LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    throw e;
  }
catch (  Exception e) {
    if (_serviceFactory.isRetriableException(e)) {
      markEndPointAsBad(endPoint);
      LOG.debug(""String_Node_Str"",endPoint.getId(),e);
    }
    throw e;
  }
 finally {
    if (handle != null) {
      try {
        _serviceCache.checkIn(handle);
      }
 catch (      Exception e) {
        LOG.warn(""String_Node_Str"",endPoint.getId(),e.toString());
        LOG.debug(""String_Node_Str"",e);
      }
    }
  }
}",0.9649621212121212
189093,"/** 
 * Adds a   {@link HostDiscovery} instance to the builder.  The service pool will use this {@code HostDiscovery}instance unless a preceding   {@link HostDiscoverySource} provides a non-null instance of {@code HostDiscovery}. <p> Once this method is called, any subsequent calls to host discovery-related methods on this builder instance are ignored. <p> Note that callers of this method are responsible for calling   {@link HostDiscovery#close} on the passed instance.
 * @param hostDiscovery the host discovery instance to use in the built {@link ServicePool}
 * @return this
 */
public ServicePoolBuilder<S> withHostDiscovery(final HostDiscovery hostDiscovery){
  checkNotNull(hostDiscovery);
  return withHostDiscoverySource(new HostDiscoverySource(){
    @Override public HostDiscovery forService(    String serviceName){
      return hostDiscovery;
    }
  }
);
}","/** 
 * Adds a   {@link HostDiscovery} instance to the builder.  The service pool will use this {@code HostDiscovery}instance unless a preceding   {@link HostDiscoverySource} provides a non-null instance of {@code HostDiscovery}. <p> Once this method is called, any subsequent calls to host discovery-related methods on this builder instance are ignored. <p> Note that callers of this method are responsible for calling   {@link HostDiscovery#close} on the passed instance.
 * @param hostDiscovery the host discovery instance to use in the built {@link ServicePool}
 * @return this
 */
public ServicePoolBuilder<S> withHostDiscovery(final HostDiscovery hostDiscovery){
  checkNotNull(hostDiscovery);
  HostDiscoverySource hostDiscoverySource=new HostDiscoverySource(){
    @Override public HostDiscovery forService(    String serviceName){
      return hostDiscovery;
    }
  }
;
  return withHostDiscoverySourceInternal(hostDiscoverySource,false);
}",0.9237520570488206
189094,"/** 
 * Adds a   {@link ZooKeeperConnection} instance to the builder that will be used for host discovery.  The servicepool will use ZooKeeper for host discovery unless a preceding call to {@link #withHostDiscoverySource(HostDiscoverySource)} provides a non-null instance of {@code HostDiscovery}. <p> Once this method is called, any subsequent calls to host discovery-related methods on this builder instance are ignored. <p> Note that using this method will cause the ServicePoolBuilder to construct a   {@code HostDiscovery} when{@link #build()} is called and pass it to the new {@code ServicePool}.  Subsequently calling  {@link ServicePool#close()} will in turn call {@link HostDiscovery#close()} on the passed instance.
 * @param connection the ZooKeeper connection to use for host discovery
 * @return this
 */
public ServicePoolBuilder<S> withZooKeeperHostDiscovery(final ZooKeeperConnection connection){
  checkNotNull(connection);
  return withHostDiscoverySource(new HostDiscoverySource(){
    @Override public HostDiscovery forService(    String serviceName){
      HostDiscovery hostDiscovery=new ZooKeeperHostDiscovery(connection,serviceName);
      _closeHostDiscovery=true;
      return hostDiscovery;
    }
  }
);
}","/** 
 * Adds a   {@link ZooKeeperConnection} instance to the builder that will be used for host discovery.  The servicepool will use ZooKeeper for host discovery unless a preceding call to {@link #withHostDiscoverySource(HostDiscoverySource)} provides a non-null instance of {@code HostDiscovery}. <p> Once this method is called, any subsequent calls to host discovery-related methods on this builder instance are ignored. <p> Note that using this method will cause the ServicePoolBuilder to construct a   {@code HostDiscovery} when{@link #build()} is called and pass it to the new {@code ServicePool}.  Subsequently calling  {@link ServicePool#close()} will in turn call {@link HostDiscovery#close()} on the passed instance.
 * @param connection the ZooKeeper connection to use for host discovery
 * @return this
 */
public ServicePoolBuilder<S> withZooKeeperHostDiscovery(final ZooKeeperConnection connection){
  checkNotNull(connection);
  HostDiscoverySource hostDiscoverySource=new HostDiscoverySource(){
    @Override public HostDiscovery forService(    String serviceName){
      return new ZooKeeperHostDiscovery(connection,serviceName);
    }
  }
;
  return withHostDiscoverySourceInternal(hostDiscoverySource,true);
}",0.936966246441643
189095,"/** 
 * Adds a   {@link HostDiscoverySource} instance to the builder.  Multiple instances of {@code HostDiscoverySource}may be specified.  The service pool will use the first source to return a non-null instance of  {@link HostDiscovery} for the service name provided by the {@link ServiceFactory#getServiceName()} method ofthe factory configured by  {@link #withServiceFactory}. <p> Note that callers of this method are responsible for calling   {@link HostDiscovery#close} on any instancescreated by the  {@code HostDiscoverySource}.
 * @param hostDiscoverySource a host discovery source to use to find the {@link HostDiscovery} when constructingthe  {@link ServicePool}
 * @return this
 */
public ServicePoolBuilder<S> withHostDiscoverySource(HostDiscoverySource hostDiscoverySource){
  _hostDiscoverySources.add(checkNotNull(hostDiscoverySource));
  return this;
}","/** 
 * Adds a   {@link HostDiscoverySource} instance to the builder.  Multiple instances of {@code HostDiscoverySource}may be specified.  The service pool will use the first source to return a non-null instance of  {@link HostDiscovery} for the service name provided by the {@link ServiceFactory#getServiceName()} method ofthe factory configured by  {@link #withServiceFactory}. <p> Note that using this method will cause the ServicePoolBuilder to call  {@link HostDiscoverySource#forService(String serviceName)} when {@link #build()} is called and pass the returned{@link HostDiscovery} to the new {@code ServicePool}.  Subsequently calling   {@link ServicePool#close()} will inturn call  {@link HostDiscovery#close()} on the passed instance.
 * @param hostDiscoverySource a host discovery source to use to find the {@link HostDiscovery} when constructingthe  {@link ServicePool}
 * @return this
 */
public ServicePoolBuilder<S> withHostDiscoverySource(HostDiscoverySource hostDiscoverySource){
  checkNotNull(hostDiscoverySource);
  return withHostDiscoverySourceInternal(hostDiscoverySource,true);
}",0.7498731608320649
189096,"@VisibleForTesting ServicePool<S> buildInternal(){
  checkNotNull(_serviceFactory);
  HostDiscovery hostDiscovery=findHostDiscovery(_serviceName);
  try {
    if (_cachingPolicy == null) {
      _cachingPolicy=ServiceCachingPolicyBuilder.NO_CACHING;
    }
    boolean shutdownHealthCheckExecutorOnClose=(_healthCheckExecutor == null);
    if (_healthCheckExecutor == null) {
      ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(_serviceName + ""String_Node_Str"").setDaemon(true).build();
      _healthCheckExecutor=Executors.newScheduledThreadPool(DEFAULT_NUM_HEALTH_CHECK_THREADS,threadFactory);
    }
    ServicePool<S> servicePool=new ServicePool<S>(Ticker.systemTicker(),hostDiscovery,_closeHostDiscovery,_serviceFactory,_cachingPolicy,_partitionFilter,_loadBalanceAlgorithm,_healthCheckExecutor,shutdownHealthCheckExecutorOnClose);
    _closeHostDiscovery=false;
    return servicePool;
  }
 catch (  Throwable t) {
    try {
      if (_closeHostDiscovery) {
        hostDiscovery.close();
      }
    }
 catch (    IOException e) {
    }
 finally {
      _closeHostDiscovery=false;
    }
    throw Throwables.propagate(t);
  }
}","@VisibleForTesting ServicePool<S> buildInternal(){
  checkNotNull(_serviceFactory);
  HostDiscovery hostDiscovery=findHostDiscovery(_serviceName);
  boolean shutdownHealthCheckExecutorOnClose=(_healthCheckExecutor == null);
  try {
    if (_cachingPolicy == null) {
      _cachingPolicy=ServiceCachingPolicyBuilder.NO_CACHING;
    }
    if (_healthCheckExecutor == null) {
      ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(_serviceName + ""String_Node_Str"").setDaemon(true).build();
      _healthCheckExecutor=Executors.newScheduledThreadPool(DEFAULT_NUM_HEALTH_CHECK_THREADS,threadFactory);
    }
    ServicePool<S> servicePool=new ServicePool<S>(Ticker.systemTicker(),hostDiscovery,_closeHostDiscovery,_serviceFactory,_cachingPolicy,_partitionFilter,_loadBalanceAlgorithm,_healthCheckExecutor,shutdownHealthCheckExecutorOnClose);
    _closeHostDiscovery=false;
    return servicePool;
  }
 catch (  Throwable t) {
    if (shutdownHealthCheckExecutorOnClose) {
      _healthCheckExecutor.shutdownNow();
    }
    try {
      if (_closeHostDiscovery) {
        hostDiscovery.close();
      }
    }
 catch (    IOException e) {
    }
 finally {
      _closeHostDiscovery=false;
    }
    throw Throwables.propagate(t);
  }
}",0.8959200666111574
189097,"@Override public HostDiscovery forService(String serviceName){
  HostDiscovery hostDiscovery=new ZooKeeperHostDiscovery(connection,serviceName);
  _closeHostDiscovery=true;
  return hostDiscovery;
}","@Override public HostDiscovery forService(String serviceName){
  HostDiscovery hostDiscovery=_wrappedSource.forService(serviceName);
  if (hostDiscovery != null) {
    _closeHostDiscovery=true;
  }
  return hostDiscovery;
}",0.7743467933491687
189098,"@Override public void close(){
  _batchHealthChecksFuture.cancel(true);
  _hostDiscovery.removeListener(_hostDiscoveryListener);
  if (_closeHostDiscovery) {
    try {
      _hostDiscovery.close();
    }
 catch (    IOException e) {
    }
  }
  _metrics.close();
  if (_shutdownHealthCheckExecutorOnClose) {
    _healthCheckExecutor.shutdownNow();
  }
}","@Override public void close(){
  _batchHealthChecksFuture.cancel(true);
  _hostDiscovery.removeListener(_hostDiscoveryListener);
  if (_cleanupHostDiscoveryOnClose) {
    try {
      _hostDiscovery.close();
    }
 catch (    IOException e) {
    }
  }
  _metrics.close();
  if (_shutdownHealthCheckExecutorOnClose) {
    _healthCheckExecutor.shutdownNow();
  }
}",0.9790209790209792
189099,"ServicePool(Ticker ticker,HostDiscovery hostDiscovery,boolean closeHostDiscovery,ServiceFactory<S> serviceFactory,ServiceCachingPolicy cachingPolicy,PartitionFilter partitionFilter,LoadBalanceAlgorithm loadBalanceAlgorithm,ScheduledExecutorService healthCheckExecutor,boolean shutdownHealthCheckExecutorOnClose){
  _ticker=checkNotNull(ticker);
  _hostDiscovery=checkNotNull(hostDiscovery);
  _closeHostDiscovery=closeHostDiscovery;
  _serviceFactory=checkNotNull(serviceFactory);
  _healthCheckExecutor=checkNotNull(healthCheckExecutor);
  _shutdownHealthCheckExecutorOnClose=shutdownHealthCheckExecutorOnClose;
  _badEndPoints=Sets.newSetFromMap(Maps.<ServiceEndPoint,Boolean>newConcurrentMap());
  _badEndPointFilter=Predicates.not(Predicates.in(_badEndPoints));
  _recentlyRemovedEndPoints=Sets.newSetFromMap(CacheBuilder.newBuilder().ticker(_ticker).expireAfterWrite(10,TimeUnit.MINUTES).<ServiceEndPoint,Boolean>build().asMap());
  checkNotNull(cachingPolicy);
  _serviceCache=new ServiceCache<S>(cachingPolicy,serviceFactory);
  _partitionFilter=checkNotNull(partitionFilter);
  _loadBalanceAlgorithm=checkNotNull(loadBalanceAlgorithm);
  _servicePoolStatistics=new ServicePoolStatistics(){
    @Override public int getNumIdleCachedInstances(    ServiceEndPoint endPoint){
      return _serviceCache.getNumIdleInstances(endPoint);
    }
    @Override public int getNumActiveInstances(    ServiceEndPoint endPoint){
      return _serviceCache.getNumActiveInstances(endPoint);
    }
  }
;
  _hostDiscoveryListener=new HostDiscovery.EndPointListener(){
    @Override public void onEndPointAdded(    ServiceEndPoint endPoint){
      addEndPoint(endPoint);
    }
    @Override public void onEndPointRemoved(    ServiceEndPoint endPoint){
      removeEndPoint(endPoint);
    }
  }
;
  _hostDiscovery.addListener(_hostDiscoveryListener);
  _batchHealthChecksFuture=_healthCheckExecutor.scheduleAtFixedRate(new BatchHealthChecks(),HEALTH_CHECK_POLL_INTERVAL_IN_SECONDS,HEALTH_CHECK_POLL_INTERVAL_IN_SECONDS,TimeUnit.SECONDS);
  String serviceName=_serviceFactory.getServiceName();
  _metrics=Metrics.forInstance(this,serviceName);
  _callbackExecutionTime=_metrics.newTimer(serviceName,""String_Node_Str"",TimeUnit.MILLISECONDS,TimeUnit.SECONDS);
  _healthCheckTime=_metrics.newTimer(serviceName,""String_Node_Str"",TimeUnit.MILLISECONDS,TimeUnit.SECONDS);
  _numExecuteSuccesses=_metrics.newMeter(serviceName,""String_Node_Str"",""String_Node_Str"",TimeUnit.SECONDS);
  _numExecuteAttemptFailures=_metrics.newMeter(serviceName,""String_Node_Str"",""String_Node_Str"",TimeUnit.SECONDS);
  _metrics.newGauge(serviceName,""String_Node_Str"",new Gauge<Integer>(){
    @Override public Integer value(){
      return getNumValidEndPoints();
    }
  }
);
  _metrics.newGauge(serviceName,""String_Node_Str"",new Gauge<Integer>(){
    @Override public Integer value(){
      return getNumBadEndPoints();
    }
  }
);
}","ServicePool(Ticker ticker,HostDiscovery hostDiscovery,boolean cleanupHostDiscoveryOnClose,ServiceFactory<S> serviceFactory,ServiceCachingPolicy cachingPolicy,PartitionFilter partitionFilter,LoadBalanceAlgorithm loadBalanceAlgorithm,ScheduledExecutorService healthCheckExecutor,boolean shutdownHealthCheckExecutorOnClose){
  _ticker=checkNotNull(ticker);
  _hostDiscovery=checkNotNull(hostDiscovery);
  _cleanupHostDiscoveryOnClose=cleanupHostDiscoveryOnClose;
  _serviceFactory=checkNotNull(serviceFactory);
  _healthCheckExecutor=checkNotNull(healthCheckExecutor);
  _shutdownHealthCheckExecutorOnClose=shutdownHealthCheckExecutorOnClose;
  _badEndPoints=Sets.newSetFromMap(Maps.<ServiceEndPoint,Boolean>newConcurrentMap());
  _badEndPointFilter=Predicates.not(Predicates.in(_badEndPoints));
  _recentlyRemovedEndPoints=Sets.newSetFromMap(CacheBuilder.newBuilder().ticker(_ticker).expireAfterWrite(10,TimeUnit.MINUTES).<ServiceEndPoint,Boolean>build().asMap());
  checkNotNull(cachingPolicy);
  _serviceCache=new ServiceCache<S>(cachingPolicy,serviceFactory);
  _partitionFilter=checkNotNull(partitionFilter);
  _loadBalanceAlgorithm=checkNotNull(loadBalanceAlgorithm);
  _servicePoolStatistics=new ServicePoolStatistics(){
    @Override public int getNumIdleCachedInstances(    ServiceEndPoint endPoint){
      return _serviceCache.getNumIdleInstances(endPoint);
    }
    @Override public int getNumActiveInstances(    ServiceEndPoint endPoint){
      return _serviceCache.getNumActiveInstances(endPoint);
    }
  }
;
  _hostDiscoveryListener=new HostDiscovery.EndPointListener(){
    @Override public void onEndPointAdded(    ServiceEndPoint endPoint){
      addEndPoint(endPoint);
    }
    @Override public void onEndPointRemoved(    ServiceEndPoint endPoint){
      removeEndPoint(endPoint);
    }
  }
;
  _hostDiscovery.addListener(_hostDiscoveryListener);
  _batchHealthChecksFuture=_healthCheckExecutor.scheduleAtFixedRate(new BatchHealthChecks(),HEALTH_CHECK_POLL_INTERVAL_IN_SECONDS,HEALTH_CHECK_POLL_INTERVAL_IN_SECONDS,TimeUnit.SECONDS);
  String serviceName=_serviceFactory.getServiceName();
  _metrics=Metrics.forInstance(this,serviceName);
  _callbackExecutionTime=_metrics.newTimer(serviceName,""String_Node_Str"",TimeUnit.MILLISECONDS,TimeUnit.SECONDS);
  _healthCheckTime=_metrics.newTimer(serviceName,""String_Node_Str"",TimeUnit.MILLISECONDS,TimeUnit.SECONDS);
  _numExecuteSuccesses=_metrics.newMeter(serviceName,""String_Node_Str"",""String_Node_Str"",TimeUnit.SECONDS);
  _numExecuteAttemptFailures=_metrics.newMeter(serviceName,""String_Node_Str"",""String_Node_Str"",TimeUnit.SECONDS);
  _metrics.newGauge(serviceName,""String_Node_Str"",new Gauge<Integer>(){
    @Override public Integer value(){
      return getNumValidEndPoints();
    }
  }
);
  _metrics.newGauge(serviceName,""String_Node_Str"",new Gauge<Integer>(){
    @Override public Integer value(){
      return getNumBadEndPoints();
    }
  }
);
}",0.9922587304317908
189100,"/** 
 * Adds a   {@link ZooKeeperConnection} instance to the builder that will be used for host discovery.  The servicepool will use ZooKeeper for host discovery unless a preceding call to {@link #withHostDiscoverySource(HostDiscoverySource)} provides a non-null instance of {@code HostDiscovery}. <p> Once this method is called, any subsequent calls to host discovery-related methods on this builder instance are ignored. <p> Note that using this method will cause the ServicePoolBuilder to construct a   {@code HostDiscovery} when{@link #build()} is called and pass it to the new {@code ServicePool}.  Subsequently calling  {@link ServicePool#close()} pool will in turn call {@link HostDiscovery#close()} on the passed instance.
 * @param connection the ZooKeeper connection to use for host discovery
 * @return this
 */
public ServicePoolBuilder<S> withZooKeeperHostDiscovery(final ZooKeeperConnection connection){
  checkNotNull(connection);
  return withHostDiscoverySource(new HostDiscoverySource(){
    @Override public HostDiscovery forService(    String serviceName){
      HostDiscovery hostDiscovery=new ZooKeeperHostDiscovery(connection,serviceName);
      _closeHostDiscovery=true;
      return hostDiscovery;
    }
  }
);
}","/** 
 * Adds a   {@link ZooKeeperConnection} instance to the builder that will be used for host discovery.  The servicepool will use ZooKeeper for host discovery unless a preceding call to {@link #withHostDiscoverySource(HostDiscoverySource)} provides a non-null instance of {@code HostDiscovery}. <p> Once this method is called, any subsequent calls to host discovery-related methods on this builder instance are ignored. <p> Note that using this method will cause the ServicePoolBuilder to construct a   {@code HostDiscovery} when{@link #build()} is called and pass it to the new {@code ServicePool}.  Subsequently calling  {@link ServicePool#close()} will in turn call {@link HostDiscovery#close()} on the passed instance.
 * @param connection the ZooKeeper connection to use for host discovery
 * @return this
 */
public ServicePoolBuilder<S> withZooKeeperHostDiscovery(final ZooKeeperConnection connection){
  checkNotNull(connection);
  return withHostDiscoverySource(new HostDiscoverySource(){
    @Override public HostDiscovery forService(    String serviceName){
      HostDiscovery hostDiscovery=new ZooKeeperHostDiscovery(connection,serviceName);
      _closeHostDiscovery=true;
      return hostDiscovery;
    }
  }
);
}",0.997974888618874
189101,"@VisibleForTesting ServicePool<S> buildInternal(){
  checkNotNull(_serviceFactory);
  HostDiscovery hostDiscovery=findHostDiscovery(_serviceName);
  try {
    if (_cachingPolicy == null) {
      _cachingPolicy=ServiceCachingPolicyBuilder.NO_CACHING;
    }
    boolean shutdownHealthCheckExecutorOnClose=(_healthCheckExecutor == null);
    if (_healthCheckExecutor == null) {
      ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(_serviceName + ""String_Node_Str"").setDaemon(true).build();
      _healthCheckExecutor=Executors.newScheduledThreadPool(DEFAULT_NUM_HEALTH_CHECK_THREADS,threadFactory);
    }
    ServicePool<S> servicePool=new ServicePool<S>(Ticker.systemTicker(),hostDiscovery,_closeHostDiscovery,_serviceFactory,_cachingPolicy,_partitionFilter,_loadBalanceAlgorithm,_healthCheckExecutor,shutdownHealthCheckExecutorOnClose);
    _closeHostDiscovery=false;
    return servicePool;
  }
 catch (  Throwable t) {
    try {
      if (_closeHostDiscovery) {
        hostDiscovery.close();
      }
    }
 catch (    IOException e) {
    }
    throw Throwables.propagate(t);
  }
}","@VisibleForTesting ServicePool<S> buildInternal(){
  checkNotNull(_serviceFactory);
  HostDiscovery hostDiscovery=findHostDiscovery(_serviceName);
  try {
    if (_cachingPolicy == null) {
      _cachingPolicy=ServiceCachingPolicyBuilder.NO_CACHING;
    }
    boolean shutdownHealthCheckExecutorOnClose=(_healthCheckExecutor == null);
    if (_healthCheckExecutor == null) {
      ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(_serviceName + ""String_Node_Str"").setDaemon(true).build();
      _healthCheckExecutor=Executors.newScheduledThreadPool(DEFAULT_NUM_HEALTH_CHECK_THREADS,threadFactory);
    }
    ServicePool<S> servicePool=new ServicePool<S>(Ticker.systemTicker(),hostDiscovery,_closeHostDiscovery,_serviceFactory,_cachingPolicy,_partitionFilter,_loadBalanceAlgorithm,_healthCheckExecutor,shutdownHealthCheckExecutorOnClose);
    _closeHostDiscovery=false;
    return servicePool;
  }
 catch (  Throwable t) {
    try {
      if (_closeHostDiscovery) {
        hostDiscovery.close();
      }
    }
 catch (    IOException e) {
    }
 finally {
      _closeHostDiscovery=false;
    }
    throw Throwables.propagate(t);
  }
}",0.9778761061946902
189102,"@After public void teardown(){
  for (  ServicePool<Service> pool : _pools) {
    pool.close();
  }
  try {
    _hostDiscovery.close();
  }
 catch (  IOException e) {
  }
}","@After public void teardown() throws IOException {
  for (  ServicePool<Service> pool : _pools) {
    pool.close();
  }
  _hostDiscovery.close();
}",0.7962382445141066
189103,"@After public void teardown(){
  _pool.close();
  try {
    _hostDiscovery.close();
  }
 catch (  IOException e) {
  }
}","@After public void teardown() throws IOException {
  _pool.close();
  _hostDiscovery.close();
}",0.6976744186046512
189104,"@Test public void testMembershipCheck(){
  _registry.register(FOO);
  assertTrue(waitUntilSize(_discovery.getHosts(),1));
  assertTrue(_discovery.contains(FOO));
  assertFalse(_discovery.contains(BAR));
}","@Test public void testMembershipCheck(){
  _registry.register(FOO);
  _registry.register(BAR);
  assertTrue(waitUntilSize(_discovery.getHosts(),1));
  assertTrue(_discovery.contains(FOO));
  assertFalse(_discovery.contains(BAR));
}",0.3632183908045977
189105,"/** 
 * Convert a <code>ServiceEndPoint</code> into the path in ZooKeeper where it will be registered.
 * @param endPoint The service end point to get the ZooKeeper path for.
 * @return The ZooKeeper path.
 */
private static String makeEndPointPath(ServiceEndPoint endPoint){
  String servicePath=makeServicePath(endPoint.getServiceName());
  String id=endPoint.getId();
  return ZKPaths.makePath(servicePath,id);
}","/** 
 * Convert a <code>ServiceEndPoint</code> into the path in ZooKeeper where it will be registered.
 * @param endPoint The service end point to get the ZooKeeper path for.
 * @return The ZooKeeper path.
 */
@VisibleForTesting static String makeEndPointPath(ServiceEndPoint endPoint){
  String servicePath=makeServicePath(endPoint.getServiceName());
  String id=endPoint.getId();
  return ZKPaths.makePath(servicePath,id);
}",0.9702734839476812
189106,"public ZooKeeperServiceRegistry(ZooKeeperConnection connection){
  checkNotNull(connection);
  _zooKeeperConnection=connection;
}","@VisibleForTesting ZooKeeperServiceRegistry(NodeFactory nodeFactory){
  _nodeFactory=checkNotNull(nodeFactory);
}",0.5537190082644629
189107,"/** 
 * {@inheritDoc} 
 */
@Override public void unregister(ServiceEndPoint endPoint){
  checkState(!_closed);
  checkNotNull(endPoint);
  String path=makeEndPointPath(endPoint);
  ZooKeeperPersistentEphemeralNode node=_nodes.remove(path);
  if (node != null) {
    node.close(10,TimeUnit.SECONDS);
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void unregister(ServiceEndPoint endPoint){
  checkState(!_closed);
  checkNotNull(endPoint);
  String path=makeEndPointPath(endPoint);
  ZooKeeperPersistentEphemeralNode node=_nodes.remove(path);
  if (node != null) {
    closeNode(node);
  }
}",0.9256756756756755
189108,"@Override public synchronized void close() throws IOException {
  if (_closed) {
    return;
  }
  _closed=true;
  for (  ZooKeeperPersistentEphemeralNode node : _nodes.values()) {
    node.close(10,TimeUnit.SECONDS);
  }
  _nodes.clear();
}","@Override public synchronized void close() throws IOException {
  if (_closed) {
    return;
  }
  _closed=true;
  for (  ZooKeeperPersistentEphemeralNode node : _nodes.values()) {
    closeNode(node);
  }
  _nodes.clear();
}",0.8111587982832618
189109,"@VisibleForTesting void register(ServiceEndPoint endPoint,boolean includeRegistrationTime){
  checkState(!_closed);
  checkNotNull(endPoint);
  Map<String,Object> registrationData=Maps.newHashMap();
  if (includeRegistrationTime) {
    DateTime now=DateTime.now().toDateTime(DateTimeZone.UTC);
    registrationData.put(""String_Node_Str"",ISO8601.print(now));
  }
  byte[] data=ServiceEndPointJsonCodec.toJson(endPoint,registrationData).getBytes(Charsets.UTF_8);
  checkState(data.length < MAX_DATA_SIZE,""String_Node_Str"");
  String path=makeEndPointPath(endPoint);
  _nodes.put(path,new ZooKeeperPersistentEphemeralNode(_zooKeeperConnection,path,data,CreateMode.EPHEMERAL));
}","@VisibleForTesting void register(ServiceEndPoint endPoint,boolean includeRegistrationTime){
  checkState(!_closed);
  checkNotNull(endPoint);
  Map<String,Object> registrationData=Maps.newHashMap();
  if (includeRegistrationTime) {
    DateTime now=DateTime.now().toDateTime(DateTimeZone.UTC);
    registrationData.put(""String_Node_Str"",ISO8601.print(now));
  }
  byte[] data=ServiceEndPointJsonCodec.toJson(endPoint,registrationData).getBytes(Charsets.UTF_8);
  checkState(data.length < MAX_DATA_SIZE,""String_Node_Str"");
  String path=makeEndPointPath(endPoint);
  ZooKeeperPersistentEphemeralNode oldNode=_nodes.put(path,_nodeFactory.create(path,data));
  if (oldNode != null) {
    closeNode(oldNode);
  }
}",0.8433212996389892
189110,"@Test public void testDuplicateRegister() throws Exception {
  CuratorFramework curator=newCurator();
  _registry.register(FOO);
  _registry.register(FOO);
  assertRegistered(FOO,curator);
}","@Test public void testDuplicateRegister() throws Exception {
  _registry.register(FOO);
  _registry.register(FOO);
  verify(_factoryMock,times(2)).create(eq(FOO_PATH),Matchers.<byte[]>any());
  verify(_nodeMocks.get(0)).close(anyLong(),any(TimeUnit.class));
}",0.3207126948775056
189111,"@Test public void testEmptyPayload(){
  _registry.register(newEndPoint(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),false);
}","@Test public void testEmptyPayload(){
  _registry.register(newEndPoint(FOO.getServiceName(),FOO.getId(),""String_Node_Str""),false);
}",0.7715355805243446
189112,"@Test public void testRegister() throws Exception {
  CuratorFramework curator=newCurator();
  _registry.register(FOO);
  assertRegistered(FOO,curator);
}","@Test public void testRegister() throws Exception {
  _registry.register(FOO);
  ArgumentCaptor<byte[]> dataCaptor=ArgumentCaptor.forClass(byte[].class);
  verify(_factoryMock).create(eq(FOO_PATH),dataCaptor.capture());
  assertEquals(FOO,ServiceEndPointJsonCodec.fromJson(new String(dataCaptor.getValue())));
  verify(_nodeMocks.get(0),never()).close(anyLong(),any(TimeUnit.class));
}",0.2374768089053803
189113,"@Test public void testUnregister() throws Exception {
  CuratorFramework curator=newCurator();
  _registry.register(FOO);
  String path=_registry.getRegisteredEndPointPath(FOO);
  _registry.unregister(FOO);
  assertNodeDoesNotExist(path,curator);
}","@Test public void testUnregister() throws Exception {
  _registry.register(FOO);
  _registry.unregister(FOO);
  verify(_nodeMocks.get(0)).close(anyLong(),any(TimeUnit.class));
}",0.56
189114,"@Test public void testDuplicateUnregister() throws Exception {
  CuratorFramework curator=newCurator();
  _registry.register(FOO);
  String path=_registry.getRegisteredEndPointPath(FOO);
  _registry.unregister(FOO);
  _registry.unregister(FOO);
  assertNodeDoesNotExist(path,curator);
}","@Test public void testDuplicateUnregister() throws Exception {
  _registry.register(FOO);
  _registry.unregister(FOO);
  _registry.unregister(FOO);
}",0.6850574712643678
189115,"@Test public void testServiceNodeIsDeletedWhenRegistryIsClosed() throws Exception {
  CuratorFramework curator=newCurator();
  _registry.register(FOO);
  String path=_registry.getRegisteredEndPointPath(FOO);
  WatchTrigger deletionTrigger=new WatchTrigger();
  curator.checkExists().usingWatcher(deletionTrigger).forPath(path);
  _registry.close();
  assertTrue(deletionTrigger.firedWithin(10,TimeUnit.SECONDS));
}","@Test public void testServiceNodeIsDeletedWhenRegistryIsClosed() throws Exception {
  _registry.register(FOO);
  _registry.close();
  for (  ZooKeeperPersistentEphemeralNode node : _nodeMocks) {
    verify(node).close(anyLong(),any(TimeUnit.class));
  }
}",0.3617339312406577
189116,"@Before public void setup() throws Exception {
  super.setup();
  _registry=new ZooKeeperServiceRegistry(newMockZooKeeperConnection(newCurator()));
}","@Before public void setup(){
  when(_factoryMock.create(eq(FOO_PATH),Matchers.<byte[]>any())).thenAnswer(new Answer<ZooKeeperPersistentEphemeralNode>(){
    @Override public ZooKeeperPersistentEphemeralNode answer(    InvocationOnMock invocationOnMock){
      ZooKeeperPersistentEphemeralNode mock=mock(ZooKeeperPersistentEphemeralNode.class);
      _nodeMocks.add(mock);
      return mock;
    }
  }
);
}",0.1660649819494584
189117,"@Test public void testUnregisterWithoutFirstRegistering() throws Exception {
  _registry.unregister(FOO);
}","@Test public void testUnregisterWithoutFirstRegistering() throws Exception {
  _registry.unregister(FOO);
  verify(_factoryMock,never()).create(eq(FOO_PATH),Matchers.<byte[]>any());
}",0.7379310344827587
189118,"@After public void teardown() throws Exception {
  _registry.close();
  super.teardown();
}","@After public void teardown() throws Exception {
  _registry.close();
}",0.8765432098765432
189119,"@Override public int hashCode(){
  int result=owner.hashCode();
  result=31 * result + related.hashCode();
  result=31 * result + type;
  return result;
}","@Override public int hashCode(){
  int result=owner != null ? owner.hashCode() : 0;
  result=31 * result + (related != null ? related.hashCode() : 0);
  result=31 * result + type;
  return result;
}",0.875
189120,"public boolean equals(IssueRelationship that){
  if (type != that.type) {
    return false;
  }
  if (!owner.equals(that.owner)) {
    return false;
  }
  if (!related.equals(that.related)) {
    return false;
  }
  return true;
}","public boolean equals(IssueRelationship that){
  if (type != that.type) {
    return false;
  }
  if (owner != null ? !owner.equals(that.owner) : that.owner != null) {
    return false;
  }
  if (related != null ? !related.equals(that.related) : that.related != null) {
    return false;
  }
  return true;
}",0.8475836431226765
189121,"protected Event getUpdateEvent(Comment comment){
  return new CompleteMilestoneEvent(commentable,commentable.getProject(),getSession().getUser(),comment);
}","@Override protected Event getUpdateEvent(Comment comment){
  return new CompleteMilestoneEvent(commentable,commentable.getProject(),getSession().getUser(),comment);
}",0.968944099378882
189122,"protected void layoutChild(Form form){
  setSubmitLabel(""String_Node_Str"");
}","@Override protected void layoutChild(Form form){
  setSubmitLabel(""String_Node_Str"");
}",0.9390243902439024
189123,"protected void submitChild(Comment comment){
  commentable.setCompletedDate(new Date());
  if (commentable.getGroup() != null) {
    checkGroupCompletion(commentable.getGroup());
  }
}","@Override protected void submitChild(Comment comment){
  commentable.setCompletedDate(new Date());
  if (commentable.getGroup() != null) {
    checkGroupCompletion(commentable.getGroup());
  }
}",0.9735449735449736
189124,"protected Event getUpdateEvent(Comment comment){
  return new UpdateMilestoneEvent(commentable,commentable.getProject(),getSession().getUser(),comment,""String_Node_Str"");
}","@Override protected Event getUpdateEvent(Comment comment){
  return new UpdateMilestoneEvent(commentable,commentable.getProject(),getSession().getUser(),comment,""String_Node_Str"");
}",0.9717514124293786
189125,"protected void layoutChild(Form form){
  setSubmitLabel(""String_Node_Str"");
}","@Override protected void layoutChild(Form form){
  setSubmitLabel(""String_Node_Str"");
}",0.9390243902439024
189126,"protected void submitChild(){
  commentable.setCompletedDate(null);
  if (commentable.getGroup() != null) {
    commentable.getGroup().setCompletedDate(null);
  }
}","@Override protected void submitChild(Comment comment){
  commentable.setCompletedDate(null);
  if (commentable.getGroup() != null) {
    commentable.getGroup().setCompletedDate(null);
  }
}",0.9291784702549576
189127,"public IssuesApplication(){
  links=new LinkedList<MenuLink>();
  links.add(menuItemCreate);
  eventTypes=new LinkedList<String>();
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
}","public IssuesApplication(){
  links=new LinkedList<MenuLink>();
  links.add(menuItemCreate);
  eventTypes=new LinkedList<String>();
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
}",0.9450222882615156
189128,"public Class[] getPersistantClasses(){
  return new Class[]{CloseIssueEvent.class,CreateIssueEvent.class,UpdateIssueEvent.class,CommentEvent.class,ProgressEvent.class};
}","public Class[] getPersistantClasses(){
  return new Class[]{CloseIssueEvent.class,CreateIssueEvent.class,UpdateIssueEvent.class,ResolveIssueEvent.class,CommentEvent.class,ProgressEvent.class};
}",0.934065934065934
189129,"protected Event getUpdateEvent(Comment comment){
  return new UpdateIssueEvent(getIssue(),getIssue().getProject(),getSession().getUser(),comment,""String_Node_Str"");
}","protected Event getUpdateEvent(Comment comment){
  return new ResolveIssueEvent(getIssue(),getIssue().getProject(),getSession().getUser(),comment);
}",0.907936507936508
189130,"protected boolean isAndroidProject(Project project){
  if (!(project instanceof EclipseProject)) {
    return false;
  }
  EclipseProject eclipse=((EclipseProject)project);
  log.debug(""String_Node_Str"" + eclipse.getNature());
  String nature=""String_Node_Str"";
  if (eclipse.getNature() != null) {
    nature=eclipse.getNature().substring(eclipse.getNature().lastIndexOf('.') + 1);
  }
  return ""String_Node_Str"".equals(nature);
}","protected boolean isAndroidProject(Project project){
  if (!(project instanceof EclipseProject)) {
    return false;
  }
  EclipseProject eclipse=((EclipseProject)project);
  log.debug(""String_Node_Str"" + eclipse.getNature());
  String nature=""String_Node_Str"";
  if (eclipse.getNature() != null) {
    nature=eclipse.getNature().substring(eclipse.getNature().lastIndexOf('.') + 1);
    nature.trim();
  }
  return ""String_Node_Str"".equals(nature);
}",0.978433598183882
189131,"private String getNatureTypeName(){
  if (nature == null || nature.trim().length() == 0) {
    return null;
  }
  String ret=nature;
  int lastDot=ret.lastIndexOf('.');
  if (lastDot > -1) {
    ret=ret.substring(lastDot + 1);
  }
  if (ret.endsWith(""String_Node_Str"")) {
    ret=ret.substring(0,ret.length() - 6);
  }
  return ret.substring(0,1).toUpperCase() + ret.substring(1);
}","private String getNatureTypeName(){
  if (nature == null || nature.trim().length() == 0) {
    return null;
  }
  String ret=nature.trim();
  int lastDot=ret.lastIndexOf('.');
  if (lastDot > -1) {
    ret=ret.substring(lastDot + 1);
  }
  if (ret.toLowerCase().endsWith(""String_Node_Str"")) {
    ret=ret.substring(0,ret.length() - 6);
  }
  return ret.substring(0,1).toUpperCase() + ret.substring(1);
}",0.973248407643312
189132,"protected boolean isAndroidProject(Project project){
  if (!(project instanceof EclipseProject)) {
    return false;
  }
  EclipseProject eclipse=((EclipseProject)project);
  log.debug(""String_Node_Str"" + eclipse.getNature());
  String nature=""String_Node_Str"";
  if (eclipse.getNature() != null) {
    nature=eclipse.getNature().substring(eclipse.getNature().lastIndexOf('.') + 1);
  }
  return ""String_Node_Str"".equals(nature);
}","protected boolean isAndroidProject(Project project){
  if (!(project instanceof EclipseProject)) {
    return false;
  }
  EclipseProject eclipse=((EclipseProject)project);
  log.debug(""String_Node_Str"" + eclipse.getNature());
  String nature=""String_Node_Str"";
  if (eclipse.getNature() != null) {
    nature=eclipse.getNature().substring(eclipse.getNature().lastIndexOf('.') + 1);
    nature.trim();
  }
  return ""String_Node_Str"".equals(nature);
}",0.978433598183882
189133,"private String getNatureTypeName(){
  if (nature == null || nature.trim().length() == 0) {
    return null;
  }
  String ret=nature;
  int lastDot=ret.lastIndexOf('.');
  if (lastDot > -1) {
    ret=ret.substring(lastDot + 1);
  }
  if (ret.endsWith(""String_Node_Str"")) {
    ret=ret.substring(0,ret.length() - 6);
  }
  return ret.substring(0,1).toUpperCase() + ret.substring(1);
}","private String getNatureTypeName(){
  if (nature == null || nature.trim().length() == 0) {
    return null;
  }
  String ret=nature.trim();
  int lastDot=ret.lastIndexOf('.');
  if (lastDot > -1) {
    ret=ret.substring(lastDot + 1);
  }
  if (ret.toLowerCase().endsWith(""String_Node_Str"")) {
    ret=ret.substring(0,ret.length() - 6);
  }
  return ret.substring(0,1).toUpperCase() + ret.substring(1);
}",0.973248407643312
189134,"public void setPreference(String key,Date value){
  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG,Locale.ENGLISH);
  setPreference(key,dateFormat.format(value));
}","public void setPreference(String key,Date value){
  if (value == null) {
    setPreference(key,(String)null);
    return;
  }
  DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG,Locale.ENGLISH);
  setPreference(key,dateFormat.format(value));
}",0.8416666666666667
189135,"@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
  return length1 - length2;
}","@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
  return length2 - length1;
}",0.959349593495935
189136,"void renderField(String field,String content,List<String> matches,StringBuffer out){
  List<RenderedMatch> renderedMatches=new LinkedList<RenderedMatch>();
  for (  String match : matches) {
    renderedMatches.addAll(renderMatch(field,content,match));
  }
  if (renderedMatches.size() == 0) {
    out.append(""String_Node_Str"");
    return;
  }
  renderedMatches=findNonSubstringMatches(renderedMatches);
  Collections.sort(renderedMatches);
  int renderStart=renderedMatches.get(0).getStart() - BUFFER_CHARS;
  if (renderStart <= 0) {
    renderStart=0;
  }
  int renderEnd=renderedMatches.get(renderedMatches.size() - 1).getEnd() + BUFFER_CHARS;
  if (renderEnd >= content.length()) {
    renderEnd=content.length();
  }
  if (renderStart > 0) {
    out.append(""String_Node_Str"");
  }
  int curr=renderStart;
  for (  RenderedMatch render : renderedMatches) {
    int myStart=render.getStart();
    if (myStart - curr < (BUFFER_CHARS * 2)) {
      out.append(escape(content.substring(curr,myStart)));
    }
 else {
      out.append(escape(content.substring(curr,curr + BUFFER_CHARS)));
      out.append(""String_Node_Str"");
      out.append(escape(content.substring(myStart - BUFFER_CHARS,myStart)));
    }
    out.append(render.getRender());
    curr=render.getEnd();
  }
  out.append(escape(content.substring(curr,renderEnd)));
  if (renderEnd < content.length()) {
    out.append(""String_Node_Str"");
  }
}","void renderField(String field,String content,List<String> matches,StringBuffer out){
  List<RenderedMatch> renderedMatches=new LinkedList<RenderedMatch>();
  for (  String match : matches) {
    renderedMatches.addAll(renderMatch(field,content,match));
  }
  if (renderedMatches.size() == 0) {
    out.append(""String_Node_Str"");
    return;
  }
  renderedMatches=findNonSubstringMatches(renderedMatches);
  Collections.sort(renderedMatches);
  int renderStart=0;
  int renderEnd=content.length();
  if (renderedMatches.size() > 0) {
    renderStart=renderedMatches.get(0).getStart() - BUFFER_CHARS;
    if (renderStart <= 0) {
      renderStart=0;
    }
    renderEnd=renderedMatches.get(renderedMatches.size() - 1).getEnd() + BUFFER_CHARS;
    if (renderEnd >= content.length()) {
      renderEnd=content.length();
    }
  }
  if (renderStart > 0) {
    out.append(""String_Node_Str"");
  }
  int curr=renderStart;
  for (  RenderedMatch render : renderedMatches) {
    int myStart=render.getStart();
    if (myStart - curr < (BUFFER_CHARS * 2)) {
      out.append(escape(content.substring(curr,myStart)));
    }
 else {
      out.append(escape(content.substring(curr,curr + BUFFER_CHARS)));
      out.append(""String_Node_Str"");
      out.append(escape(content.substring(myStart - BUFFER_CHARS,myStart)));
    }
    out.append(render.getRender());
    curr=render.getEnd();
  }
  out.append(escape(content.substring(curr,renderEnd)));
  if (renderEnd < content.length()) {
    out.append(""String_Node_Str"");
  }
}",0.9626840123245464
189137,"private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
      return length1 - length2;
    }
  }
);
  Iterator<RenderedMatch> matchIter=renderedMatches.iterator();
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  while (matchIter.hasNext()) {
    RenderedMatch match=matchIter.next();
    boolean addMatch=true;
    for (    RenderedMatch supermatch : out) {
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}","private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
      return length2 - length1;
    }
  }
);
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  for (  RenderedMatch match : renderedMatches) {
    boolean addMatch=true;
    Iterator<RenderedMatch> superIter=out.iterator();
    while (superIter.hasNext()) {
      RenderedMatch supermatch=superIter.next();
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
 else       if ((match.getStart() > supermatch.getStart() && match.getStart() < supermatch.getEnd()) || (match.getEnd() > supermatch.getStart() && match.getEnd() < supermatch.getEnd())) {
        addMatch=false;
        superIter.remove();
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}",0.7093505297098112
189138,"@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
  return length2 - length1;
}","@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch2.getStart();
  return length2 - length1;
}",0.9656565656565655
189139,"private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
      return length2 - length1;
    }
  }
);
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  for (  RenderedMatch match : renderedMatches) {
    boolean addMatch=true;
    Iterator<RenderedMatch> superIter=out.iterator();
    while (superIter.hasNext()) {
      RenderedMatch supermatch=superIter.next();
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
 else       if ((match.getStart() > supermatch.getStart() && match.getStart() < supermatch.getEnd()) || (match.getEnd() > supermatch.getStart() && match.getEnd() < supermatch.getEnd())) {
        addMatch=false;
        superIter.remove();
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}","private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch2.getStart();
      return length2 - length1;
    }
  }
);
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  for (  RenderedMatch match : renderedMatches) {
    boolean addMatch=true;
    Iterator<RenderedMatch> superIter=out.iterator();
    while (superIter.hasNext()) {
      RenderedMatch supermatch=superIter.next();
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
 else       if ((match.getStart() > supermatch.getStart() && match.getStart() < supermatch.getEnd()) || (match.getEnd() > supermatch.getStart() && match.getEnd() < supermatch.getEnd())) {
        addMatch=false;
        superIter.remove();
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}",0.993029930299303
189140,"@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
  return length2 - length1;
}","@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch2.getStart();
  return length2 - length1;
}",0.9656565656565655
189141,"private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
      return length2 - length1;
    }
  }
);
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  for (  RenderedMatch match : renderedMatches) {
    boolean addMatch=true;
    Iterator<RenderedMatch> superIter=out.iterator();
    while (superIter.hasNext()) {
      RenderedMatch supermatch=superIter.next();
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
 else       if ((match.getStart() > supermatch.getStart() && match.getStart() < supermatch.getEnd()) || (match.getEnd() > supermatch.getStart() && match.getEnd() < supermatch.getEnd())) {
        addMatch=false;
        superIter.remove();
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}","private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch2.getStart();
      return length2 - length1;
    }
  }
);
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  for (  RenderedMatch match : renderedMatches) {
    boolean addMatch=true;
    Iterator<RenderedMatch> superIter=out.iterator();
    while (superIter.hasNext()) {
      RenderedMatch supermatch=superIter.next();
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
 else       if ((match.getStart() > supermatch.getStart() && match.getStart() < supermatch.getEnd()) || (match.getEnd() > supermatch.getStart() && match.getEnd() < supermatch.getEnd())) {
        addMatch=false;
        superIter.remove();
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}",0.993029930299303
189142,"@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
  return length1 - length2;
}","@Override public int compare(RenderedMatch renderedMatch,RenderedMatch renderedMatch2){
  int length1=renderedMatch.getEnd() - renderedMatch.getStart();
  int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
  return length2 - length1;
}",0.959349593495935
189143,"void renderField(String field,String content,List<String> matches,StringBuffer out){
  List<RenderedMatch> renderedMatches=new LinkedList<RenderedMatch>();
  for (  String match : matches) {
    renderedMatches.addAll(renderMatch(field,content,match));
  }
  if (renderedMatches.size() == 0) {
    out.append(""String_Node_Str"");
    return;
  }
  renderedMatches=findNonSubstringMatches(renderedMatches);
  Collections.sort(renderedMatches);
  int renderStart=renderedMatches.get(0).getStart() - BUFFER_CHARS;
  if (renderStart <= 0) {
    renderStart=0;
  }
  int renderEnd=renderedMatches.get(renderedMatches.size() - 1).getEnd() + BUFFER_CHARS;
  if (renderEnd >= content.length()) {
    renderEnd=content.length();
  }
  if (renderStart > 0) {
    out.append(""String_Node_Str"");
  }
  int curr=renderStart;
  for (  RenderedMatch render : renderedMatches) {
    int myStart=render.getStart();
    if (myStart - curr < (BUFFER_CHARS * 2)) {
      out.append(escape(content.substring(curr,myStart)));
    }
 else {
      out.append(escape(content.substring(curr,curr + BUFFER_CHARS)));
      out.append(""String_Node_Str"");
      out.append(escape(content.substring(myStart - BUFFER_CHARS,myStart)));
    }
    out.append(render.getRender());
    curr=render.getEnd();
  }
  out.append(escape(content.substring(curr,renderEnd)));
  if (renderEnd < content.length()) {
    out.append(""String_Node_Str"");
  }
}","void renderField(String field,String content,List<String> matches,StringBuffer out){
  List<RenderedMatch> renderedMatches=new LinkedList<RenderedMatch>();
  for (  String match : matches) {
    renderedMatches.addAll(renderMatch(field,content,match));
  }
  if (renderedMatches.size() == 0) {
    out.append(""String_Node_Str"");
    return;
  }
  renderedMatches=findNonSubstringMatches(renderedMatches);
  Collections.sort(renderedMatches);
  int renderStart=0;
  int renderEnd=content.length();
  if (renderedMatches.size() > 0) {
    renderStart=renderedMatches.get(0).getStart() - BUFFER_CHARS;
    if (renderStart <= 0) {
      renderStart=0;
    }
    renderEnd=renderedMatches.get(renderedMatches.size() - 1).getEnd() + BUFFER_CHARS;
    if (renderEnd >= content.length()) {
      renderEnd=content.length();
    }
  }
  if (renderStart > 0) {
    out.append(""String_Node_Str"");
  }
  int curr=renderStart;
  for (  RenderedMatch render : renderedMatches) {
    int myStart=render.getStart();
    if (myStart - curr < (BUFFER_CHARS * 2)) {
      out.append(escape(content.substring(curr,myStart)));
    }
 else {
      out.append(escape(content.substring(curr,curr + BUFFER_CHARS)));
      out.append(""String_Node_Str"");
      out.append(escape(content.substring(myStart - BUFFER_CHARS,myStart)));
    }
    out.append(render.getRender());
    curr=render.getEnd();
  }
  out.append(escape(content.substring(curr,renderEnd)));
  if (renderEnd < content.length()) {
    out.append(""String_Node_Str"");
  }
}",0.9626840123245464
189144,"private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
      return length1 - length2;
    }
  }
);
  Iterator<RenderedMatch> matchIter=renderedMatches.iterator();
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  while (matchIter.hasNext()) {
    RenderedMatch match=matchIter.next();
    boolean addMatch=true;
    for (    RenderedMatch supermatch : out) {
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}","private List<RenderedMatch> findNonSubstringMatches(List<RenderedMatch> renderedMatches){
  Collections.sort(renderedMatches,new Comparator<RenderedMatch>(){
    @Override public int compare(    RenderedMatch renderedMatch,    RenderedMatch renderedMatch2){
      int length1=renderedMatch.getEnd() - renderedMatch.getStart();
      int length2=renderedMatch2.getEnd() - renderedMatch.getEnd();
      return length2 - length1;
    }
  }
);
  ArrayList<RenderedMatch> out=new ArrayList<RenderedMatch>(renderedMatches.size());
  for (  RenderedMatch match : renderedMatches) {
    boolean addMatch=true;
    Iterator<RenderedMatch> superIter=out.iterator();
    while (superIter.hasNext()) {
      RenderedMatch supermatch=superIter.next();
      if (match.getStart() >= supermatch.getStart() && match.getEnd() <= supermatch.getEnd()) {
        addMatch=false;
        break;
      }
 else       if ((match.getStart() > supermatch.getStart() && match.getStart() < supermatch.getEnd()) || (match.getEnd() > supermatch.getStart() && match.getEnd() < supermatch.getEnd())) {
        addMatch=false;
        superIter.remove();
        break;
      }
    }
    if (addMatch) {
      out.add(match);
    }
  }
  return out;
}",0.7093505297098112
189145,"private Form<Milestone> getInlineForm(){
  quickMilestone=createMilestone();
  CompoundPropertyModel<Milestone> formPropertyModel=new CompoundPropertyModel<Milestone>(quickMilestone);
  Form<Milestone> inlineForm=new Form<Milestone>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      MilestonesDAO dao=new MilestonesDAO();
      boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
      if (alreadyExists) {
        warn(""String_Node_Str"");
        return;
      }
      quickMilestone.setUpdated(new Date());
      saveMilestone(quickMilestone);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      quickMilestone=createMilestone();
    }
  }
;
  Component[] rowAddComponents=new Component[7];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"");
  rowAddComponents[1]=new TextField<NameProjectId>(""String_Node_Str"");
  rowAddComponents[2]=new PercentagePanel(""String_Node_Str"",0);
  rowAddComponents[3]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[4]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[5]=new Label(""String_Node_Str"",page.getProject().toString());
  DateTimeWithTimeZoneField due=new DateTimeWithTimeZoneField(""String_Node_Str"",new Model<Date>(){
    @Override public void setObject(    Date object){
      quickMilestone.setDueDate(object);
    }
    @Override public Date getObject(){
      return quickMilestone.getDueDate();
    }
  }
);
  rowAddComponents[6]=due;
  addAnimatorToForm(rowAddComponents);
  inlineForm.add(rowAdd);
  return inlineForm;
}","private Form<Milestone> getInlineForm(){
  quickMilestone=createMilestone();
  CompoundPropertyModel<Milestone> formPropertyModel=new CompoundPropertyModel<Milestone>(quickMilestone);
  Form<Milestone> inlineForm=new Form<Milestone>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      MilestonesDAO dao=new MilestonesDAO();
      boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
      if (alreadyExists) {
        warn(""String_Node_Str"");
        return;
      }
      quickMilestone.setUpdated(new Date());
      saveMilestone(quickMilestone);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      quickMilestone=createMilestone();
    }
  }
;
  Component[] rowAddComponents=new Component[7];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"");
  rowAddComponents[1]=new TextField<NameProjectId>(""String_Node_Str"");
  rowAddComponents[2]=new PercentagePanel(""String_Node_Str"",0);
  rowAddComponents[3]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[4]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[5]=new Label(""String_Node_Str"",page.getProject().toString());
  rowAddComponents[5].setVisible(!hideProject);
  DateTimeWithTimeZoneField due=new DateTimeWithTimeZoneField(""String_Node_Str"",new Model<Date>(){
    @Override public void setObject(    Date object){
      quickMilestone.setDueDate(object);
    }
    @Override public Date getObject(){
      return quickMilestone.getDueDate();
    }
  }
);
  rowAddComponents[6]=due;
  addAnimatorToForm(rowAddComponents);
  inlineForm.add(rowAdd);
  return inlineForm;
}",0.9853836784409256
189146,"public MilestoneListPanel(String id,final SortableDataProvider<Milestone> provider,final HeadsUpPage page,final boolean hideProject,MilestoneGroup group,int formNo){
  super(id);
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  this.page=page;
  this.group=group;
  if (formNo == -1) {
    this.formNo=""String_Node_Str"";
  }
 else {
    this.formNo=""String_Node_Str"" + formNo;
  }
  rowAdd=new WebMarkupContainer(""String_Node_Str"");
  rowAdd.setMarkupId(""String_Node_Str"" + formNo);
  Form<Milestone> inlineForm=getInlineForm();
  add(inlineForm);
  final DataView dataView;
  inlineForm.add(dataView=new StripedDataView<Milestone>(""String_Node_Str"",provider,ITEMS_PER_PAGE){
    protected void populateItem(    Item<Milestone> listItem){
      super.populateItem(listItem);
      Milestone milestone=listItem.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",milestone.getProject().getId());
      params.add(""String_Node_Str"",milestone.getName());
      WebMarkupContainer cell=new WebMarkupContainer(""String_Node_Str"");
      Link idLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
      idLink.add(new Label(""String_Node_Str"",milestone.getName()));
      cell.add(idLink);
      listItem.add(cell);
      double part=milestone.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      int total=milestone.getIssues().size();
      int open=milestone.getOpenIssues().size();
      Label label=new Label(""String_Node_Str"",String.valueOf(total));
      listItem.add(label);
      label=new Label(""String_Node_Str"",String.valueOf(open));
      listItem.add(label);
      label=new Label(""String_Node_Str"",milestone.getProject().toString());
      listItem.add(label.setVisible(!hideProject));
      label=new Label(""String_Node_Str"",new FormattedDateModel(milestone.getDueDate(),((HeadsUpSession)getSession()).getTimeZone()));
      label.add(new MilestoneStatusModifier(""String_Node_Str"",milestone));
      listItem.add(label);
    }
  }
);
  AttributeModifier colspanModifier=new AttributeModifier(""String_Node_Str"",true,new Model<Integer>(){
    @Override public Integer getObject(){
      int cols=7;
      if (hideProject) {
        cols--;
      }
      return cols;
    }
  }
);
  inlineForm.add(quickAdd);
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider).setVisible(!hideProject));
  pagingFooter=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingFooter.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingFooter.add(colspanModifier));
  pagingHeader=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingHeader.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingHeader.add(colspanModifier));
  final WebMarkupContainer allCell=new WebMarkupContainer(""String_Node_Str"");
  inlineForm.add(allCell.add(colspanModifier).setVisible(provider.size() > ITEMS_PER_PAGE));
  allCell.add(new Link(""String_Node_Str""){
    @Override public void onClick(){
      dataView.setItemsPerPage(Integer.MAX_VALUE);
      setVisible(false);
      allCell.setVisible(false);
      pagingFooter.setVisible(false);
      pagingHeader.setVisible(false);
    }
  }
);
}","public MilestoneListPanel(String id,final SortableDataProvider<Milestone> provider,final HeadsUpPage page,final boolean hideProject,MilestoneGroup group,int formNo){
  super(id);
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  this.page=page;
  this.group=group;
  this.hideProject=hideProject;
  if (formNo == -1) {
    this.formNo=""String_Node_Str"";
  }
 else {
    this.formNo=""String_Node_Str"" + formNo;
  }
  rowAdd=new WebMarkupContainer(""String_Node_Str"");
  rowAdd.setMarkupId(""String_Node_Str"" + formNo);
  Form<Milestone> inlineForm=getInlineForm();
  add(inlineForm);
  final DataView dataView;
  inlineForm.add(dataView=new StripedDataView<Milestone>(""String_Node_Str"",provider,ITEMS_PER_PAGE){
    protected void populateItem(    Item<Milestone> listItem){
      super.populateItem(listItem);
      Milestone milestone=listItem.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",milestone.getProject().getId());
      params.add(""String_Node_Str"",milestone.getName());
      WebMarkupContainer cell=new WebMarkupContainer(""String_Node_Str"");
      Link idLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
      idLink.add(new Label(""String_Node_Str"",milestone.getName()));
      cell.add(idLink);
      listItem.add(cell);
      double part=milestone.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      int total=milestone.getIssues().size();
      int open=milestone.getOpenIssues().size();
      Label label=new Label(""String_Node_Str"",String.valueOf(total));
      listItem.add(label);
      label=new Label(""String_Node_Str"",String.valueOf(open));
      listItem.add(label);
      label=new Label(""String_Node_Str"",milestone.getProject().toString());
      listItem.add(label.setVisible(!hideProject));
      label=new Label(""String_Node_Str"",new FormattedDateModel(milestone.getDueDate(),((HeadsUpSession)getSession()).getTimeZone()));
      label.add(new MilestoneStatusModifier(""String_Node_Str"",milestone));
      listItem.add(label);
    }
  }
);
  AttributeModifier colspanModifier=new AttributeModifier(""String_Node_Str"",true,new Model<Integer>(){
    @Override public Integer getObject(){
      int cols=7;
      if (hideProject) {
        cols--;
      }
      return cols;
    }
  }
);
  inlineForm.add(quickAdd);
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider).setVisible(!hideProject));
  pagingFooter=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingFooter.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingFooter.add(colspanModifier));
  pagingHeader=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingHeader.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingHeader.add(colspanModifier));
  final WebMarkupContainer allCell=new WebMarkupContainer(""String_Node_Str"");
  inlineForm.add(allCell.add(colspanModifier).setVisible(provider.size() > ITEMS_PER_PAGE));
  allCell.add(new Link(""String_Node_Str""){
    @Override public void onClick(){
      dataView.setItemsPerPage(Integer.MAX_VALUE);
      setVisible(false);
      allCell.setVisible(false);
      pagingFooter.setVisible(false);
      pagingHeader.setVisible(false);
    }
  }
);
}",0.9954687057490796
189147,"private void layout(){
  User currentUser=((HeadsUpSession)getSession()).getUser();
  boolean userHasPermission=Manager.getSecurityInstance().userHasPermission(currentUser,new MilestoneEditPermission(),project);
  Object o=getDefaultModel().getObject();
  WebMarkupContainer commentTitle=new WebMarkupContainer(""String_Node_Str"");
  if (o instanceof Comment) {
    comment=(Comment)o;
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    commentTitle.add(new GravatarLinkPanel(""String_Node_Str"",comment.getUser(),ICON_EDGE_LENGTH));
    PageParameters params=new PageParameters();
    params.put(""String_Node_Str"",project);
    params.put(""String_Node_Str"",milestone.getName());
    params.put(""String_Node_Str"",comment.getId());
    Link edit=new BookmarkablePageLink(""String_Node_Str"",EditComment.class,params);
    commentTitle.add(edit.setVisible(userHasPermission));
    params.add(""String_Node_Str"",comment.getUser().getUsername());
    params.add(""String_Node_Str"",""String_Node_Str"");
    BookmarkablePageLink usernameLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
    usernameLink.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
    commentTitle.add(usernameLink);
    commentTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project)).setEscapeModelStrings(false));
    Link remove=new Link(""String_Node_Str""){
      @Override public void onClick(){
        Storage storage=Manager.getStorageInstance();
        Comment comm=(Comment)((HibernateStorage)storage).merge(comment);
        milestone.getComments().remove(comm);
        Milestone mile=(Milestone)((HibernateStorage)storage).merge(milestone);
        commentList.remove(comm);
        mile.setUpdated(new Date());
        ((HibernateStorage)storage).delete(comm);
      }
    }
;
    commentTitle.add(remove.setVisible(userHasPermission));
  }
 else {
    commentTitle.setVisible(false);
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  add(commentTitle);
}","private void layout(){
  User currentUser=((HeadsUpSession)getSession()).getUser();
  boolean userHasPermission=Manager.getSecurityInstance().userHasPermission(currentUser,new MilestoneEditPermission(),project);
  Object o=getDefaultModel().getObject();
  WebMarkupContainer commentTitle=new WebMarkupContainer(""String_Node_Str"");
  if (o instanceof Comment) {
    comment=(Comment)o;
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    commentTitle.add(new GravatarLinkPanel(""String_Node_Str"",comment.getUser(),ICON_EDGE_LENGTH));
    PageParameters params=new PageParameters();
    params.put(""String_Node_Str"",project);
    params.put(""String_Node_Str"",milestone.getName());
    params.put(""String_Node_Str"",comment.getId());
    Link edit=new BookmarkablePageLink(""String_Node_Str"",EditComment.class,params);
    commentTitle.add(edit.setVisible(userHasPermission));
    params.add(""String_Node_Str"",comment.getUser().getUsername());
    params.add(""String_Node_Str"",""String_Node_Str"");
    BookmarkablePageLink usernameLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
    usernameLink.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
    commentTitle.add(usernameLink);
    commentTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project)).setEscapeModelStrings(false));
    Link remove=new Link(""String_Node_Str""){
      @Override public void onClick(){
        Storage storage=Manager.getStorageInstance();
        Comment comm=(Comment)((HibernateStorage)storage).merge(comment);
        milestone.getComments().remove(comm);
        Milestone mile=(Milestone)((HibernateStorage)storage).merge(milestone);
        commentList.remove(comm);
        mile.setUpdated(new Date());
        ((HibernateStorage)storage).delete(comm);
      }
    }
;
    commentTitle.add(remove.setVisible(userHasPermission));
  }
 else {
    commentTitle.setVisible(false);
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  add(commentTitle);
}",0.9968777876895628
189148,"private Form<Milestone> getInlineForm(){
  quickMilestone=createMilestone();
  CompoundPropertyModel<Milestone> formPropertyModel=new CompoundPropertyModel<Milestone>(quickMilestone);
  Form<Milestone> inlineForm=new Form<Milestone>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      MilestonesDAO dao=new MilestonesDAO();
      boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
      if (alreadyExists) {
        warn(""String_Node_Str"");
        return;
      }
      quickMilestone.setUpdated(new Date());
      saveMilestone(quickMilestone);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      quickMilestone=createMilestone();
    }
  }
;
  Component[] rowAddComponents=new Component[7];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"");
  rowAddComponents[1]=new TextField<NameProjectId>(""String_Node_Str"");
  rowAddComponents[2]=new PercentagePanel(""String_Node_Str"",0);
  rowAddComponents[3]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[4]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[5]=new Label(""String_Node_Str"",page.getProject().toString());
  DateTimeWithTimeZoneField due=new DateTimeWithTimeZoneField(""String_Node_Str"",new Model<Date>(){
    @Override public void setObject(    Date object){
      quickMilestone.setDueDate(object);
    }
    @Override public Date getObject(){
      return quickMilestone.getDueDate();
    }
  }
);
  rowAddComponents[6]=due;
  addAnimatorToForm(rowAddComponents);
  inlineForm.add(rowAdd);
  return inlineForm;
}","private Form<Milestone> getInlineForm(){
  quickMilestone=createMilestone();
  CompoundPropertyModel<Milestone> formPropertyModel=new CompoundPropertyModel<Milestone>(quickMilestone);
  Form<Milestone> inlineForm=new Form<Milestone>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      MilestonesDAO dao=new MilestonesDAO();
      boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
      if (alreadyExists) {
        warn(""String_Node_Str"");
        return;
      }
      quickMilestone.setUpdated(new Date());
      saveMilestone(quickMilestone);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      quickMilestone=createMilestone();
    }
  }
;
  Component[] rowAddComponents=new Component[7];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"");
  rowAddComponents[1]=new TextField<NameProjectId>(""String_Node_Str"");
  rowAddComponents[2]=new PercentagePanel(""String_Node_Str"",0);
  rowAddComponents[3]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[4]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[5]=new Label(""String_Node_Str"",page.getProject().toString());
  rowAddComponents[5].setVisible(!hideProject);
  DateTimeWithTimeZoneField due=new DateTimeWithTimeZoneField(""String_Node_Str"",new Model<Date>(){
    @Override public void setObject(    Date object){
      quickMilestone.setDueDate(object);
    }
    @Override public Date getObject(){
      return quickMilestone.getDueDate();
    }
  }
);
  rowAddComponents[6]=due;
  addAnimatorToForm(rowAddComponents);
  inlineForm.add(rowAdd);
  return inlineForm;
}",0.9853836784409256
189149,"public MilestoneListPanel(String id,final SortableDataProvider<Milestone> provider,final HeadsUpPage page,final boolean hideProject,MilestoneGroup group,int formNo){
  super(id);
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  this.page=page;
  this.group=group;
  if (formNo == -1) {
    this.formNo=""String_Node_Str"";
  }
 else {
    this.formNo=""String_Node_Str"" + formNo;
  }
  rowAdd=new WebMarkupContainer(""String_Node_Str"");
  rowAdd.setMarkupId(""String_Node_Str"" + formNo);
  Form<Milestone> inlineForm=getInlineForm();
  add(inlineForm);
  final DataView dataView;
  inlineForm.add(dataView=new StripedDataView<Milestone>(""String_Node_Str"",provider,ITEMS_PER_PAGE){
    protected void populateItem(    Item<Milestone> listItem){
      super.populateItem(listItem);
      Milestone milestone=listItem.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",milestone.getProject().getId());
      params.add(""String_Node_Str"",milestone.getName());
      WebMarkupContainer cell=new WebMarkupContainer(""String_Node_Str"");
      Link idLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
      idLink.add(new Label(""String_Node_Str"",milestone.getName()));
      cell.add(idLink);
      listItem.add(cell);
      double part=milestone.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      int total=milestone.getIssues().size();
      int open=milestone.getOpenIssues().size();
      Label label=new Label(""String_Node_Str"",String.valueOf(total));
      listItem.add(label);
      label=new Label(""String_Node_Str"",String.valueOf(open));
      listItem.add(label);
      label=new Label(""String_Node_Str"",milestone.getProject().toString());
      listItem.add(label.setVisible(!hideProject));
      label=new Label(""String_Node_Str"",new FormattedDateModel(milestone.getDueDate(),((HeadsUpSession)getSession()).getTimeZone()));
      label.add(new MilestoneStatusModifier(""String_Node_Str"",milestone));
      listItem.add(label);
    }
  }
);
  AttributeModifier colspanModifier=new AttributeModifier(""String_Node_Str"",true,new Model<Integer>(){
    @Override public Integer getObject(){
      int cols=7;
      if (hideProject) {
        cols--;
      }
      return cols;
    }
  }
);
  inlineForm.add(quickAdd);
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider).setVisible(!hideProject));
  pagingFooter=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingFooter.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingFooter.add(colspanModifier));
  pagingHeader=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingHeader.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingHeader.add(colspanModifier));
  final WebMarkupContainer allCell=new WebMarkupContainer(""String_Node_Str"");
  inlineForm.add(allCell.add(colspanModifier).setVisible(provider.size() > ITEMS_PER_PAGE));
  allCell.add(new Link(""String_Node_Str""){
    @Override public void onClick(){
      dataView.setItemsPerPage(Integer.MAX_VALUE);
      setVisible(false);
      allCell.setVisible(false);
      pagingFooter.setVisible(false);
      pagingHeader.setVisible(false);
    }
  }
);
}","public MilestoneListPanel(String id,final SortableDataProvider<Milestone> provider,final HeadsUpPage page,final boolean hideProject,MilestoneGroup group,int formNo){
  super(id);
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  this.page=page;
  this.group=group;
  this.hideProject=hideProject;
  if (formNo == -1) {
    this.formNo=""String_Node_Str"";
  }
 else {
    this.formNo=""String_Node_Str"" + formNo;
  }
  rowAdd=new WebMarkupContainer(""String_Node_Str"");
  rowAdd.setMarkupId(""String_Node_Str"" + formNo);
  Form<Milestone> inlineForm=getInlineForm();
  add(inlineForm);
  final DataView dataView;
  inlineForm.add(dataView=new StripedDataView<Milestone>(""String_Node_Str"",provider,ITEMS_PER_PAGE){
    protected void populateItem(    Item<Milestone> listItem){
      super.populateItem(listItem);
      Milestone milestone=listItem.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",milestone.getProject().getId());
      params.add(""String_Node_Str"",milestone.getName());
      WebMarkupContainer cell=new WebMarkupContainer(""String_Node_Str"");
      Link idLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
      idLink.add(new Label(""String_Node_Str"",milestone.getName()));
      cell.add(idLink);
      listItem.add(cell);
      double part=milestone.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      int total=milestone.getIssues().size();
      int open=milestone.getOpenIssues().size();
      Label label=new Label(""String_Node_Str"",String.valueOf(total));
      listItem.add(label);
      label=new Label(""String_Node_Str"",String.valueOf(open));
      listItem.add(label);
      label=new Label(""String_Node_Str"",milestone.getProject().toString());
      listItem.add(label.setVisible(!hideProject));
      label=new Label(""String_Node_Str"",new FormattedDateModel(milestone.getDueDate(),((HeadsUpSession)getSession()).getTimeZone()));
      label.add(new MilestoneStatusModifier(""String_Node_Str"",milestone));
      listItem.add(label);
    }
  }
);
  AttributeModifier colspanModifier=new AttributeModifier(""String_Node_Str"",true,new Model<Integer>(){
    @Override public Integer getObject(){
      int cols=7;
      if (hideProject) {
        cols--;
      }
      return cols;
    }
  }
);
  inlineForm.add(quickAdd);
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider).setVisible(!hideProject));
  pagingFooter=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingFooter.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingFooter.add(colspanModifier));
  pagingHeader=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingHeader.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingHeader.add(colspanModifier));
  final WebMarkupContainer allCell=new WebMarkupContainer(""String_Node_Str"");
  inlineForm.add(allCell.add(colspanModifier).setVisible(provider.size() > ITEMS_PER_PAGE));
  allCell.add(new Link(""String_Node_Str""){
    @Override public void onClick(){
      dataView.setItemsPerPage(Integer.MAX_VALUE);
      setVisible(false);
      allCell.setVisible(false);
      pagingFooter.setVisible(false);
      pagingHeader.setVisible(false);
    }
  }
);
}",0.9954687057490796
189150,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  title=getPageParameters().getString(""String_Node_Str"");
  if (title == null || title.length() == 0) {
    title=Document.DEFAULT_PAGE;
  }
  doc=DocsApplication.getDocument(title,getProject());
  View.layoutMenuItems(this);
  WebMarkupContainer details=new WebMarkupContainer(""String_Node_Str"");
  add(details);
  PageParameters titledParameters=getPageParameters();
  if (!titledParameters.containsKey(""String_Node_Str"")) {
    titledParameters.add(""String_Node_Str"",title);
  }
  if (doc == null) {
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    WebMarkupContainer notfound=new WebMarkupContainer(""String_Node_Str"");
    notfound.add(new Label(""String_Node_Str"",title));
    notfound.add(new Label(""String_Node_Str"",getProject().getAlias()));
    notfound.add(new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),titledParameters));
    add(notfound);
    details.setVisible(false);
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),titledParameters,""String_Node_Str""));
  watching=doc.getWatchers().contains(getSession().getUser());
  addLink(new MenuLink(){
    public String getLabel(){
      if (watching) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
    public void onClick(){
      toggleWatching();
    }
  }
);
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  add(new Label(""String_Node_Str"",getContent(doc)).setEscapeModelStrings(false));
  final List<Attachment> attachmentList=new LinkedList<Attachment>();
  attachmentList.addAll(doc.getAttachments());
  Collections.sort(attachmentList,new Comparator<Attachment>(){
    public int compare(    Attachment attachment1,    Attachment attachment2){
      return attachment1.getCreated().compareTo(attachment2.getCreated());
    }
  }
);
  details.add(new ListView<Attachment>(""String_Node_Str"",attachmentList){
    private Attachment attachment;
    protected void populateItem(    ListItem<Attachment> listItem){
      attachment=listItem.getModelObject();
      PageParameters params=new PageParameters();
      listItem.add(new GravatarLinkPanel(""String_Node_Str"",attachment.getUser(),ICON_EDGE_LENGTH));
      listItem.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      params.add(""String_Node_Str"",attachment.getUser().getUsername());
      params.add(""String_Node_Str"",""String_Node_Str"");
      BookmarkablePageLink usernameLink=new BookmarkablePageLink(""String_Node_Str"",View.this.getPageClass(""String_Node_Str""),params);
      usernameLink.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      listItem.add(usernameLink);
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(attachment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      File file=attachment.getFile(getStorage());
      Mime mime=Mime.get(file.getName());
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(Mime.class,mime.getIconName())));
      Link download=new DownloadLink(""String_Node_Str"",file);
      download.add(new Label(""String_Node_Str"",attachment.getFilename()));
      listItem.add(download);
      listItem.add(new Link(""String_Node_Str""){
        @Override public void onClick(){
          attachment=(Attachment)((HibernateStorage)getStorage()).getHibernateSession().merge(attachment);
          doc=(Document)((HibernateStorage)getStorage()).getHibernateSession().merge(doc);
          attachmentList.remove(attachment);
          doc.getAttachments().remove(attachment);
          ((HibernateStorage)getStorage()).delete(attachment);
          attachment.getFile(getStorage()).delete();
        }
      }
);
      Comment comment=attachment.getComment();
      if (comment != null) {
        Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject()));
        commentLabel.setEscapeModelStrings(false);
        listItem.add(commentLabel);
      }
 else {
        listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
      }
    }
  }
);
  final List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(doc.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  details.add(new ListView<Comment>(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem<Comment> listItem){
      listItem.add(new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,doc));
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  title=getPageParameters().getString(""String_Node_Str"");
  if (title == null || title.length() == 0) {
    title=Document.DEFAULT_PAGE;
  }
  doc=DocsApplication.getDocument(title,getProject());
  View.layoutMenuItems(this);
  WebMarkupContainer details=new WebMarkupContainer(""String_Node_Str"");
  add(details);
  PageParameters titledParameters=getPageParameters();
  if (!titledParameters.containsKey(""String_Node_Str"")) {
    titledParameters.add(""String_Node_Str"",title);
  }
  if (doc == null) {
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    WebMarkupContainer notfound=new WebMarkupContainer(""String_Node_Str"");
    notfound.add(new Label(""String_Node_Str"",title));
    notfound.add(new Label(""String_Node_Str"",getProject().getAlias()));
    notfound.add(new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),titledParameters));
    add(notfound);
    details.setVisible(false);
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),titledParameters,""String_Node_Str""));
  watching=doc.getWatchers().contains(getSession().getUser());
  addLink(new MenuLink(){
    public String getLabel(){
      if (watching) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
    public void onClick(){
      toggleWatching();
    }
  }
);
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  add(new Label(""String_Node_Str"",getContent(doc)).setEscapeModelStrings(false));
  final List<Attachment> attachmentList=new LinkedList<Attachment>();
  attachmentList.addAll(doc.getAttachments());
  Collections.sort(attachmentList,new Comparator<Attachment>(){
    public int compare(    Attachment attachment1,    Attachment attachment2){
      return attachment1.getCreated().compareTo(attachment2.getCreated());
    }
  }
);
  details.add(new ListView<Attachment>(""String_Node_Str"",attachmentList){
    private Attachment attachment;
    protected void populateItem(    ListItem<Attachment> listItem){
      attachment=listItem.getModelObject();
      PageParameters params=new PageParameters();
      listItem.add(new GravatarLinkPanel(""String_Node_Str"",attachment.getUser(),ICON_EDGE_LENGTH));
      params.add(""String_Node_Str"",attachment.getUser().getUsername());
      params.add(""String_Node_Str"",""String_Node_Str"");
      BookmarkablePageLink usernameLink=new BookmarkablePageLink(""String_Node_Str"",View.this.getPageClass(""String_Node_Str""),params);
      usernameLink.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      listItem.add(usernameLink);
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(attachment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      File file=attachment.getFile(getStorage());
      Mime mime=Mime.get(file.getName());
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(Mime.class,mime.getIconName())));
      Link download=new DownloadLink(""String_Node_Str"",file);
      download.add(new Label(""String_Node_Str"",attachment.getFilename()));
      listItem.add(download);
      listItem.add(new Link(""String_Node_Str""){
        @Override public void onClick(){
          attachment=(Attachment)((HibernateStorage)getStorage()).getHibernateSession().merge(attachment);
          doc=(Document)((HibernateStorage)getStorage()).getHibernateSession().merge(doc);
          attachmentList.remove(attachment);
          doc.getAttachments().remove(attachment);
          ((HibernateStorage)getStorage()).delete(attachment);
          attachment.getFile(getStorage()).delete();
        }
      }
);
      Comment comment=attachment.getComment();
      if (comment != null) {
        Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject()));
        commentLabel.setEscapeModelStrings(false);
        listItem.add(commentLabel);
      }
 else {
        listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
      }
    }
  }
);
  final List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(doc.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  details.add(new ListView<Comment>(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem<Comment> listItem){
      listItem.add(new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,doc));
    }
  }
);
}",0.990652366427236
189151,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  add(CSSPackageResource.getHeaderContribution(IssueListPanel.class,""String_Node_Str""));
  try {
    issueId=getPageParameters().getLong(""String_Node_Str"");
  }
 catch (  NumberFormatException e) {
    notFoundError();
    return;
  }
  issue=IssuesApplication.getIssue(issueId,getProject());
  if (issue == null) {
    notFoundError();
    return;
  }
  watching=issue.getWatchers().contains(getSession().getUser());
  List<MenuLink> links=getLinks(issue);
  if (issue.getStatus() < Issue.STATUS_CLOSED) {
    links.add(1,new MenuLink(){
      public String getLabel(){
        if (watching) {
          return ""String_Node_Str"";
        }
        return ""String_Node_Str"";
      }
      public void onClick(){
        toggleWatching();
      }
    }
);
  }
  addLinks(links);
  issuePanel=new IssuePanel(""String_Node_Str"",issue,ViewIssue.this);
  add(issuePanel);
  final List<Attachment> attachmentList=new LinkedList<Attachment>();
  attachmentList.addAll(issue.getAttachments());
  Collections.sort(attachmentList,new Comparator<Attachment>(){
    public int compare(    Attachment attachment1,    Attachment attachment2){
      return attachment1.getCreated().compareTo(attachment2.getCreated());
    }
  }
);
  add(new ListView<Attachment>(""String_Node_Str"",attachmentList){
    private Attachment attachment;
    protected void populateItem(    ListItem<Attachment> listItem){
      attachment=listItem.getModelObject();
      PageParameters params=new PageParameters();
      listItem.add(new GravatarLinkPanel(""String_Node_Str"",attachment.getUser(),ICON_EDGE_LENGTH));
      listItem.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      params.add(""String_Node_Str"",attachment.getUser().getUsername());
      params.add(""String_Node_Str"",""String_Node_Str"");
      BookmarkablePageLink usernameLink=new BookmarkablePageLink(""String_Node_Str"",ViewIssue.this.getPageClass(""String_Node_Str""),params);
      usernameLink.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      listItem.add(usernameLink);
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(attachment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      final File file=attachment.getFile(getStorage());
      Mime mime=Mime.get(file.getName());
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(Mime.class,mime.getIconName())));
      listItem.add(new EmbeddedFilePanel(""String_Node_Str"",attachment.getFile(getStorage()),getProject()));
      Link download=new DownloadLink(""String_Node_Str"",file);
      download.add(new Label(""String_Node_Str"",attachment.getFilename()));
      listItem.add(download);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      listItem.add(new Link(""String_Node_Str""){
        @Override public void onClick(){
          attachment=(Attachment)((HibernateStorage)getStorage()).getHibernateSession().merge(attachment);
          issue=(Issue)((HibernateStorage)getStorage()).getHibernateSession().merge(issue);
          attachmentList.remove(attachment);
          issue.getAttachments().remove(attachment);
          ((HibernateStorage)getStorage()).delete(attachment);
          attachment.getFile(getStorage()).delete();
        }
      }
.setVisible(Manager.getSecurityInstance().userHasPermission(currentUser,new IssueEditPermission(),getProject())));
      Comment comment=attachment.getComment();
      if (comment != null) {
        Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject()));
        commentLabel.setEscapeModelStrings(false);
        listItem.add(commentLabel);
      }
 else {
        listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
      }
    }
  }
);
  final List commentList=new LinkedList();
  commentList.addAll(issue.getComments());
  if (issue.getTimeWorked() != null && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED))) {
    commentList.addAll(issue.getTimeWorked());
  }
  Collections.sort(commentList,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Date date1=null, date2=null;
      if (o1 instanceof Comment) {
        date1=((Comment)o1).getCreated();
      }
 else       if (o1 instanceof DurationWorked) {
        date1=((DurationWorked)o1).getDay();
      }
      if (o2 instanceof Comment) {
        date2=((Comment)o2).getCreated();
      }
 else       if (o2 instanceof DurationWorked) {
        date2=((DurationWorked)o2).getDay();
      }
      if (date1 == null || date2 == null) {
        if (date1 == null) {
          if (date2 == null) {
            return 0;
          }
 else {
            return 1;
          }
        }
 else {
          return -1;
        }
      }
      return date1.compareTo(date2);
    }
  }
);
  add(new ListView(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem listItem){
      CommentPanel panel=new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,issue);
      listItem.add(panel);
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  add(CSSPackageResource.getHeaderContribution(IssueListPanel.class,""String_Node_Str""));
  try {
    issueId=getPageParameters().getLong(""String_Node_Str"");
  }
 catch (  NumberFormatException e) {
    notFoundError();
    return;
  }
  issue=IssuesApplication.getIssue(issueId,getProject());
  if (issue == null) {
    notFoundError();
    return;
  }
  watching=issue.getWatchers().contains(getSession().getUser());
  List<MenuLink> links=getLinks(issue);
  if (issue.getStatus() < Issue.STATUS_CLOSED) {
    links.add(1,new MenuLink(){
      public String getLabel(){
        if (watching) {
          return ""String_Node_Str"";
        }
        return ""String_Node_Str"";
      }
      public void onClick(){
        toggleWatching();
      }
    }
);
  }
  addLinks(links);
  issuePanel=new IssuePanel(""String_Node_Str"",issue,ViewIssue.this);
  add(issuePanel);
  final List<Attachment> attachmentList=new LinkedList<Attachment>();
  attachmentList.addAll(issue.getAttachments());
  Collections.sort(attachmentList,new Comparator<Attachment>(){
    public int compare(    Attachment attachment1,    Attachment attachment2){
      return attachment1.getCreated().compareTo(attachment2.getCreated());
    }
  }
);
  add(new ListView<Attachment>(""String_Node_Str"",attachmentList){
    private Attachment attachment;
    protected void populateItem(    ListItem<Attachment> listItem){
      attachment=listItem.getModelObject();
      PageParameters params=new PageParameters();
      listItem.add(new GravatarLinkPanel(""String_Node_Str"",attachment.getUser(),ICON_EDGE_LENGTH));
      params.add(""String_Node_Str"",attachment.getUser().getUsername());
      params.add(""String_Node_Str"",""String_Node_Str"");
      BookmarkablePageLink usernameLink=new BookmarkablePageLink(""String_Node_Str"",ViewIssue.this.getPageClass(""String_Node_Str""),params);
      usernameLink.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      listItem.add(usernameLink);
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(attachment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      final File file=attachment.getFile(getStorage());
      Mime mime=Mime.get(file.getName());
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(Mime.class,mime.getIconName())));
      listItem.add(new EmbeddedFilePanel(""String_Node_Str"",attachment.getFile(getStorage()),getProject()));
      Link download=new DownloadLink(""String_Node_Str"",file);
      download.add(new Label(""String_Node_Str"",attachment.getFilename()));
      listItem.add(download);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      listItem.add(new Link(""String_Node_Str""){
        @Override public void onClick(){
          attachment=(Attachment)((HibernateStorage)getStorage()).getHibernateSession().merge(attachment);
          issue=(Issue)((HibernateStorage)getStorage()).getHibernateSession().merge(issue);
          attachmentList.remove(attachment);
          issue.getAttachments().remove(attachment);
          ((HibernateStorage)getStorage()).delete(attachment);
          attachment.getFile(getStorage()).delete();
        }
      }
.setVisible(Manager.getSecurityInstance().userHasPermission(currentUser,new IssueEditPermission(),getProject())));
      Comment comment=attachment.getComment();
      if (comment != null) {
        Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject()));
        commentLabel.setEscapeModelStrings(false);
        listItem.add(commentLabel);
      }
 else {
        listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
      }
    }
  }
);
  final List commentList=new LinkedList();
  commentList.addAll(issue.getComments());
  if (issue.getTimeWorked() != null && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED))) {
    commentList.addAll(issue.getTimeWorked());
  }
  Collections.sort(commentList,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Date date1=null, date2=null;
      if (o1 instanceof Comment) {
        date1=((Comment)o1).getCreated();
      }
 else       if (o1 instanceof DurationWorked) {
        date1=((DurationWorked)o1).getDay();
      }
      if (o2 instanceof Comment) {
        date2=((Comment)o2).getCreated();
      }
 else       if (o2 instanceof DurationWorked) {
        date2=((DurationWorked)o2).getDay();
      }
      if (date1 == null || date2 == null) {
        if (date1 == null) {
          if (date2 == null) {
            return 0;
          }
 else {
            return 1;
          }
        }
 else {
          return -1;
        }
      }
      return date1.compareTo(date2);
    }
  }
);
  add(new ListView(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem listItem){
      CommentPanel panel=new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,issue);
      listItem.add(panel);
    }
  }
);
}",0.9908820424224972
189152,"protected Event getUpdateEvent(Comment comment){
  return new UpdateIssueEvent(issue,issue.getProject(),getSession().getUser(),comment,""String_Node_Str"");
}","protected Event getUpdateEvent(Comment comment){
  return new CommentEvent(issue,issue.getProject(),getSession().getUser(),comment,""String_Node_Str"");
}",0.948051948051948
189153,"protected Event getUpdateEvent(Comment comment){
  return new UpdateIssueEvent(issue,issue.getProject(),getSession().getUser(),comment,""String_Node_Str"");
}","protected Event getUpdateEvent(Comment comment){
  return new CommentEvent(issue,issue.getProject(),getSession().getUser(),comment,""String_Node_Str"");
}",0.948051948051948
189154,"protected Event getUpdateEvent(Comment comment){
  return new UpdateIssueEvent(getIssue(),getIssue().getProject(),getSession().getUser(),comment,""String_Node_Str"");
}","protected Event getUpdateEvent(Comment comment){
  return new ProgressEvent(getIssue(),getIssue().getProject(),getSession().getUser(),duration,""String_Node_Str"");
}",0.9272727272727272
189155,"public IssuesApplication(){
  links=new LinkedList<MenuLink>();
  links.add(menuItemCreate);
  eventTypes=new LinkedList<String>();
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
}","public IssuesApplication(){
  links=new LinkedList<MenuLink>();
  links.add(menuItemCreate);
  eventTypes=new LinkedList<String>();
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
}",0.8683274021352313
189156,"public Class[] getPersistantClasses(){
  return new Class[]{CloseIssueEvent.class,CreateIssueEvent.class,UpdateIssueEvent.class};
}","public Class[] getPersistantClasses(){
  return new Class[]{CloseIssueEvent.class,CreateIssueEvent.class,UpdateIssueEvent.class,CommentEvent.class,ProgressEvent.class};
}",0.8704318936877077
189157,"protected Event getUpdateEvent(Comment comment){
  return new UpdateIssueEvent(getIssue(),getIssue().getProject(),getSession().getUser(),comment,""String_Node_Str"");
}","protected Event getUpdateEvent(Comment comment){
  return new ProgressEvent(getIssue(),getIssue().getProject(),getSession().getUser(),duration,""String_Node_Str"");
}",0.9272727272727272
189158,"@Override protected void onSubmit(){
  super.onSubmit();
  quickIssue.setReporter(page.getSession().getUser());
  quickIssue.getWatchers().add(page.getSession().getUser());
  quickIssue.setTimeRequired(quickIssue.getTimeEstimate());
  IssuesDAO dao=new IssuesDAO();
  dao.save(quickIssue);
  quickIssue=createIssue();
}","@Override protected void onSubmit(){
  super.onSubmit();
  quickIssue.setReporter(page.getSession().getUser());
  quickIssue.getWatchers().add(page.getSession().getUser());
  quickIssue.setTimeRequired(quickIssue.getTimeEstimate());
  saveIssue(quickIssue);
  quickIssue=createIssue();
}",0.8316831683168316
189159,"private Form<Issue> getInlineForm(){
  CompoundPropertyModel<Issue> formPropertyModel=new CompoundPropertyModel<Issue>(quickIssue){
    @Override public Issue getObject(){
      return quickIssue;
    }
  }
;
  Form<Issue> inlineForm=new Form<Issue>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      super.onSubmit();
      quickIssue.setReporter(page.getSession().getUser());
      quickIssue.getWatchers().add(page.getSession().getUser());
      quickIssue.setTimeRequired(quickIssue.getTimeEstimate());
      IssuesDAO dao=new IssuesDAO();
      dao.save(quickIssue);
      quickIssue=createIssue();
    }
  }
;
  Component[] rowAddComponents=new Component[9];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"").setMarkupId(""String_Node_Str"");
  rowAddComponents[1]=new TextField<String>(""String_Node_Str"").setRequired(true).setMarkupId(""String_Node_Str"");
  rowAddComponents[2]=new Label(""String_Node_Str"",IssueUtils.getStatusName(Issue.STATUS_NEW)).setMarkupId(""String_Node_Str"");
  rowAddComponents[3]=new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()).setRequired(true).setMarkupId(""String_Node_Str"");
  rowAddComponents[4]=new TextField<Integer>(""String_Node_Str"",new Model<Integer>(){
    @Override public void setObject(    Integer object){
      quickIssue.setOrder(object);
    }
    @Override public Integer getObject(){
      if (quickIssue.getOrder() == null || quickIssue.getOrder().equals(Issue.ORDER_NO_ORDER)) {
        return null;
      }
      return quickIssue.getOrder();
    }
  }
).setType(Integer.class).setMarkupId(""String_Node_Str"");
  rowAddComponents[5]=new UserDropDownChoice(""String_Node_Str"").setMarkupId(""String_Node_Str"");
  rowAddComponents[6]=new Label(""String_Node_Str"",page.getProject().toString()).setVisible(!hideProject).setMarkupId(""String_Node_Str"");
  rowAddComponents[7]=new MilestoneDropDownChoice(""String_Node_Str"",page.getProject()).setNullValid(true).setVisible(!hideMilestone).setMarkupId(""String_Node_Str"");
  rowAddComponents[8]=new DurationTextField(""String_Node_Str"",new Model<Duration>(){
    @Override public void setObject(    Duration duration){
      quickIssue.setTimeEstimate(duration);
    }
    @Override public Duration getObject(){
      if (quickIssue.getTimeEstimate().equals(new Duration(0))) {
        return null;
      }
      return quickIssue.getTimeEstimate();
    }
  }
).setType(Duration.class).setMarkupId(""String_Node_Str"");
  addAnimatorToForm(rowAddComponents);
  inlineForm.add(rowAdd);
  return inlineForm;
}","private Form<Issue> getInlineForm(){
  CompoundPropertyModel<Issue> formPropertyModel=new CompoundPropertyModel<Issue>(quickIssue){
    @Override public Issue getObject(){
      return quickIssue;
    }
  }
;
  Form<Issue> inlineForm=new Form<Issue>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      super.onSubmit();
      quickIssue.setReporter(page.getSession().getUser());
      quickIssue.getWatchers().add(page.getSession().getUser());
      quickIssue.setTimeRequired(quickIssue.getTimeEstimate());
      saveIssue(quickIssue);
      quickIssue=createIssue();
    }
  }
;
  Component[] rowAddComponents=new Component[9];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"").setMarkupId(""String_Node_Str"");
  rowAddComponents[1]=new TextField<String>(""String_Node_Str"").setRequired(true).setMarkupId(""String_Node_Str"");
  rowAddComponents[2]=new Label(""String_Node_Str"",IssueUtils.getStatusName(Issue.STATUS_NEW)).setMarkupId(""String_Node_Str"");
  rowAddComponents[3]=new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()).setRequired(true).setMarkupId(""String_Node_Str"");
  rowAddComponents[4]=new TextField<Integer>(""String_Node_Str"",new Model<Integer>(){
    @Override public void setObject(    Integer object){
      quickIssue.setOrder(object);
    }
    @Override public Integer getObject(){
      if (quickIssue.getOrder() == null || quickIssue.getOrder().equals(Issue.ORDER_NO_ORDER)) {
        return null;
      }
      return quickIssue.getOrder();
    }
  }
).setType(Integer.class).setMarkupId(""String_Node_Str"");
  rowAddComponents[5]=new UserDropDownChoice(""String_Node_Str"").setMarkupId(""String_Node_Str"");
  rowAddComponents[6]=new Label(""String_Node_Str"",page.getProject().toString()).setVisible(!hideProject).setMarkupId(""String_Node_Str"");
  rowAddComponents[7]=new MilestoneDropDownChoice(""String_Node_Str"",page.getProject()).setNullValid(true).setVisible(!hideMilestone).setMarkupId(""String_Node_Str"");
  rowAddComponents[8]=new DurationTextField(""String_Node_Str"",new Model<Duration>(){
    @Override public void setObject(    Duration duration){
      quickIssue.setTimeEstimate(duration);
    }
    @Override public Duration getObject(){
      if (quickIssue.getTimeEstimate().equals(new Duration(0))) {
        return null;
      }
      return quickIssue.getTimeEstimate();
    }
  }
).setType(Duration.class).setMarkupId(""String_Node_Str"");
  addAnimatorToForm(rowAddComponents);
  inlineForm.add(rowAdd);
  return inlineForm;
}",0.9909448818897638
189160,"@Override protected void onSubmit(){
  MilestonesDAO dao=new MilestonesDAO();
  boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
  if (alreadyExists) {
    warn(""String_Node_Str"");
    return;
  }
  quickMilestone.setUpdated(new Date());
  dao.save(quickMilestone);
  User currentUser=((HeadsUpSession)getSession()).getUser();
  quickMilestone=createMilestone(group);
}","@Override protected void onSubmit(){
  MilestonesDAO dao=new MilestonesDAO();
  boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
  if (alreadyExists) {
    warn(""String_Node_Str"");
    return;
  }
  quickMilestone.setUpdated(new Date());
  dao.save(quickMilestone);
  saveMilestone(quickMilestone);
  User currentUser=((HeadsUpSession)getSession()).getUser();
  quickMilestone=createMilestone(group);
}",0.9616724738675958
189161,"private Form<Milestone> getInlineForm(){
  quickMilestone=createMilestone(group);
  CompoundPropertyModel<Milestone> formPropertyModel=new CompoundPropertyModel<Milestone>(quickMilestone);
  Form<Milestone> inlineForm=new Form<Milestone>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      MilestonesDAO dao=new MilestonesDAO();
      boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
      if (alreadyExists) {
        warn(""String_Node_Str"");
        return;
      }
      quickMilestone.setUpdated(new Date());
      dao.save(quickMilestone);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      quickMilestone=createMilestone(group);
    }
  }
;
  Component[] rowAddComponents=new Component[7];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"");
  rowAddComponents[1]=new TextField<NameProjectId>(""String_Node_Str"");
  rowAddComponents[2]=new PercentagePanel(""String_Node_Str"",0);
  rowAddComponents[3]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[4]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[5]=new Label(""String_Node_Str"",page.getProject().toString());
  DateTimeWithTimeZoneField due=new DateTimeWithTimeZoneField(""String_Node_Str"",new Model<Date>(){
    @Override public void setObject(    Date object){
      quickMilestone.setDueDate(object);
    }
    @Override public Date getObject(){
      return quickMilestone.getDueDate();
    }
  }
);
  rowAddComponents[6]=due;
  addAnimatorToForm(rowAddComponents,group);
  inlineForm.add(rowAdd);
  return inlineForm;
}","private Form<Milestone> getInlineForm(){
  quickMilestone=createMilestone(group);
  CompoundPropertyModel<Milestone> formPropertyModel=new CompoundPropertyModel<Milestone>(quickMilestone);
  Form<Milestone> inlineForm=new Form<Milestone>(""String_Node_Str"",formPropertyModel){
    @Override protected void onSubmit(){
      MilestonesDAO dao=new MilestonesDAO();
      boolean alreadyExists=dao.find(quickMilestone.getName(),quickMilestone.getProject()) != null;
      if (alreadyExists) {
        warn(""String_Node_Str"");
        return;
      }
      quickMilestone.setUpdated(new Date());
      dao.save(quickMilestone);
      saveMilestone(quickMilestone);
      User currentUser=((HeadsUpSession)getSession()).getUser();
      quickMilestone=createMilestone(group);
    }
  }
;
  Component[] rowAddComponents=new Component[7];
  rowAddComponents[0]=new WebMarkupContainer(""String_Node_Str"");
  rowAddComponents[1]=new TextField<NameProjectId>(""String_Node_Str"");
  rowAddComponents[2]=new PercentagePanel(""String_Node_Str"",0);
  rowAddComponents[3]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[4]=new Label(""String_Node_Str"",""String_Node_Str"");
  rowAddComponents[5]=new Label(""String_Node_Str"",page.getProject().toString());
  DateTimeWithTimeZoneField due=new DateTimeWithTimeZoneField(""String_Node_Str"",new Model<Date>(){
    @Override public void setObject(    Date object){
      quickMilestone.setDueDate(object);
    }
    @Override public Date getObject(){
      return quickMilestone.getDueDate();
    }
  }
);
  rowAddComponents[6]=due;
  addAnimatorToForm(rowAddComponents,group);
  inlineForm.add(rowAdd);
  return inlineForm;
}",0.9887708649468891
189162,"private void layout(){
  User currentUser=((HeadsUpSession)getSession()).getUser();
  boolean userHasPermission=Manager.getSecurityInstance().userHasPermission(currentUser,new DocEditPermission(),project);
  Object o=getDefaultModel().getObject();
  WebMarkupContainer commentTitle=new WebMarkupContainer(""String_Node_Str"");
  if (o instanceof Comment) {
    comment=(Comment)o;
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    PageParameters params=page.getProjectPageParameters();
    params.put(""String_Node_Str"",doc.getName());
    params.put(""String_Node_Str"",comment.getId());
    Link edit=new BookmarkablePageLink(""String_Node_Str"",EditComment.class,params);
    commentTitle.add(edit.setVisible(userHasPermission));
    remove=new Link(""String_Node_Str""){
      @Override public void onClick(){
        Comment comm=(Comment)((HibernateStorage)storage).merge(comment);
        doc.getComments().remove(comm);
        Document d=(Document)((HibernateStorage)storage).merge(doc);
        commentList.remove(comm);
        d.setUpdated(new Date());
        ((HibernateStorage)storage).delete(comm);
      }
    }
;
    commentTitle.add(remove.setVisible(userHasPermission));
    commentTitle.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
    commentTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project)).setEscapeModelStrings(false));
  }
 else {
    commentTitle.setVisible(false);
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  add(commentTitle);
}","private void layout(){
  User currentUser=((HeadsUpSession)getSession()).getUser();
  boolean userHasPermission=Manager.getSecurityInstance().userHasPermission(currentUser,new DocEditPermission(),project);
  Object o=getDefaultModel().getObject();
  WebMarkupContainer commentTitle=new WebMarkupContainer(""String_Node_Str"");
  if (o instanceof Comment) {
    comment=(Comment)o;
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    PageParameters params=new PageParameters();
    params.put(""String_Node_Str"",project);
    params.put(""String_Node_Str"",doc.getName());
    params.put(""String_Node_Str"",comment.getId());
    Link edit=new BookmarkablePageLink(""String_Node_Str"",EditComment.class,params);
    commentTitle.add(edit.setVisible(userHasPermission));
    remove=new Link(""String_Node_Str""){
      @Override public void onClick(){
        Storage storage=Manager.getStorageInstance();
        Comment comm=(Comment)((HibernateStorage)storage).merge(comment);
        doc.getComments().remove(comm);
        Document d=(Document)((HibernateStorage)storage).merge(doc);
        commentList.remove(comm);
        d.setUpdated(new Date());
        ((HibernateStorage)storage).delete(comm);
      }
    }
;
    commentTitle.add(remove.setVisible(userHasPermission));
    commentTitle.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
    commentTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project)).setEscapeModelStrings(false));
  }
 else {
    commentTitle.setVisible(false);
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  add(commentTitle);
}",0.9628587507034329
189163,"@Override public void onClick(){
  Comment comm=(Comment)((HibernateStorage)storage).merge(comment);
  doc.getComments().remove(comm);
  Document d=(Document)((HibernateStorage)storage).merge(doc);
  commentList.remove(comm);
  d.setUpdated(new Date());
  ((HibernateStorage)storage).delete(comm);
}","@Override public void onClick(){
  Storage storage=Manager.getStorageInstance();
  Comment comm=(Comment)((HibernateStorage)storage).merge(comment);
  doc.getComments().remove(comm);
  Document d=(Document)((HibernateStorage)storage).merge(doc);
  commentList.remove(comm);
  d.setUpdated(new Date());
  ((HibernateStorage)storage).delete(comm);
}",0.9256965944272446
189164,"public CommentPanel(String id,IModel model,Project project,List commentList,Document doc,HeadsUpPage page){
  super(id,model);
  this.project=project;
  this.commentList=commentList;
  this.doc=doc;
  this.page=page;
  this.storage=page.getStorage();
  layout();
}","public CommentPanel(String id,IModel model,Project project,List commentList,Document doc){
  super(id,model);
  this.project=project;
  this.commentList=commentList;
  this.doc=doc;
  layout();
}",0.8496732026143791
189165,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  title=getPageParameters().getString(""String_Node_Str"");
  if (title == null || title.length() == 0) {
    title=Document.DEFAULT_PAGE;
  }
  doc=DocsApplication.getDocument(title,getProject());
  View.layoutMenuItems(this);
  WebMarkupContainer details=new WebMarkupContainer(""String_Node_Str"");
  add(details);
  PageParameters titledParameters=getPageParameters();
  if (!titledParameters.containsKey(""String_Node_Str"")) {
    titledParameters.add(""String_Node_Str"",title);
  }
  if (doc == null) {
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    WebMarkupContainer notfound=new WebMarkupContainer(""String_Node_Str"");
    notfound.add(new Label(""String_Node_Str"",title));
    notfound.add(new Label(""String_Node_Str"",getProject().getAlias()));
    notfound.add(new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),titledParameters));
    add(notfound);
    details.setVisible(false);
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),titledParameters,""String_Node_Str""));
  watching=doc.getWatchers().contains(getSession().getUser());
  addLink(new MenuLink(){
    public String getLabel(){
      if (watching) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
    public void onClick(){
      toggleWatching();
    }
  }
);
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  add(new Label(""String_Node_Str"",getContent(doc)).setEscapeModelStrings(false));
  final List<Attachment> attachmentList=new LinkedList<Attachment>();
  attachmentList.addAll(doc.getAttachments());
  Collections.sort(attachmentList,new Comparator<Attachment>(){
    public int compare(    Attachment attachment1,    Attachment attachment2){
      return attachment1.getCreated().compareTo(attachment2.getCreated());
    }
  }
);
  details.add(new ListView<Attachment>(""String_Node_Str"",attachmentList){
    private Attachment attachment;
    protected void populateItem(    ListItem<Attachment> listItem){
      attachment=listItem.getModelObject();
      listItem.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(attachment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      File file=attachment.getFile(getStorage());
      Mime mime=Mime.get(file.getName());
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(Mime.class,mime.getIconName())));
      Link download=new DownloadLink(""String_Node_Str"",file);
      download.add(new Label(""String_Node_Str"",attachment.getFilename()));
      listItem.add(download);
      listItem.add(new Link(""String_Node_Str""){
        @Override public void onClick(){
          attachment=(Attachment)((HibernateStorage)getStorage()).getHibernateSession().merge(attachment);
          doc=(Document)((HibernateStorage)getStorage()).getHibernateSession().merge(doc);
          attachmentList.remove(attachment);
          doc.getAttachments().remove(attachment);
          ((HibernateStorage)getStorage()).delete(attachment);
          attachment.getFile(getStorage()).delete();
        }
      }
);
      Comment comment=attachment.getComment();
      if (comment != null) {
        Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject()));
        commentLabel.setEscapeModelStrings(false);
        listItem.add(commentLabel);
      }
 else {
        listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
      }
    }
  }
);
  final List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(doc.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  details.add(new ListView<Comment>(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem<Comment> listItem){
      listItem.add(new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,doc,(HeadsUpPage)getPage()));
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  title=getPageParameters().getString(""String_Node_Str"");
  if (title == null || title.length() == 0) {
    title=Document.DEFAULT_PAGE;
  }
  doc=DocsApplication.getDocument(title,getProject());
  View.layoutMenuItems(this);
  WebMarkupContainer details=new WebMarkupContainer(""String_Node_Str"");
  add(details);
  PageParameters titledParameters=getPageParameters();
  if (!titledParameters.containsKey(""String_Node_Str"")) {
    titledParameters.add(""String_Node_Str"",title);
  }
  if (doc == null) {
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    WebMarkupContainer notfound=new WebMarkupContainer(""String_Node_Str"");
    notfound.add(new Label(""String_Node_Str"",title));
    notfound.add(new Label(""String_Node_Str"",getProject().getAlias()));
    notfound.add(new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),titledParameters));
    add(notfound);
    details.setVisible(false);
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),titledParameters,""String_Node_Str""));
  watching=doc.getWatchers().contains(getSession().getUser());
  addLink(new MenuLink(){
    public String getLabel(){
      if (watching) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
    public void onClick(){
      toggleWatching();
    }
  }
);
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  add(new Label(""String_Node_Str"",getContent(doc)).setEscapeModelStrings(false));
  final List<Attachment> attachmentList=new LinkedList<Attachment>();
  attachmentList.addAll(doc.getAttachments());
  Collections.sort(attachmentList,new Comparator<Attachment>(){
    public int compare(    Attachment attachment1,    Attachment attachment2){
      return attachment1.getCreated().compareTo(attachment2.getCreated());
    }
  }
);
  details.add(new ListView<Attachment>(""String_Node_Str"",attachmentList){
    private Attachment attachment;
    protected void populateItem(    ListItem<Attachment> listItem){
      attachment=listItem.getModelObject();
      listItem.add(new Label(""String_Node_Str"",attachment.getUser().getFullnameOrUsername()));
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(attachment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      File file=attachment.getFile(getStorage());
      Mime mime=Mime.get(file.getName());
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(Mime.class,mime.getIconName())));
      Link download=new DownloadLink(""String_Node_Str"",file);
      download.add(new Label(""String_Node_Str"",attachment.getFilename()));
      listItem.add(download);
      listItem.add(new Link(""String_Node_Str""){
        @Override public void onClick(){
          attachment=(Attachment)((HibernateStorage)getStorage()).getHibernateSession().merge(attachment);
          doc=(Document)((HibernateStorage)getStorage()).getHibernateSession().merge(doc);
          attachmentList.remove(attachment);
          doc.getAttachments().remove(attachment);
          ((HibernateStorage)getStorage()).delete(attachment);
          attachment.getFile(getStorage()).delete();
        }
      }
);
      Comment comment=attachment.getComment();
      if (comment != null) {
        Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject()));
        commentLabel.setEscapeModelStrings(false);
        listItem.add(commentLabel);
      }
 else {
        listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
      }
    }
  }
);
  final List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(doc.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  details.add(new ListView<Comment>(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem<Comment> listItem){
      listItem.add(new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,doc));
    }
  }
);
}",0.9974980963776788
189166,"protected void populateItem(ListItem<Comment> listItem){
  listItem.add(new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,doc,(HeadsUpPage)getPage()));
}","protected void populateItem(ListItem<Comment> listItem){
  listItem.add(new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,doc));
}",0.932944606413994
189167,"public void layout(){
  super.layout();
  page=this;
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  String name=getPageParameters().getString(""String_Node_Str"");
  milestone=dao.find(name,getProject());
  if (milestone == null) {
    notFoundError();
    return;
  }
  addLinks(getLinks(milestone));
  addDetails();
  User currentUser=getSession().getUser();
  final boolean userHasPermission=Manager.getSecurityInstance().userHasPermission(currentUser,new MilestoneEditPermission(),getProject());
  final List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(milestone.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  add(new ListView<Comment>(""String_Node_Str"",commentList){
    private Comment comment;
    protected void populateItem(    ListItem<Comment> listItem){
      comment=listItem.getModelObject();
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
      listItem.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      PageParameters params=page.getProjectPageParameters();
      params.put(""String_Node_Str"",milestone.getName());
      params.put(""String_Node_Str"",comment.getId());
      Link edit=new BookmarkablePageLink(""String_Node_Str"",EditComment.class,params);
      listItem.add(edit.setVisible(userHasPermission));
      Link remove=new Link(""String_Node_Str""){
        @Override public void onClick(){
          Comment comm=(Comment)((HibernateStorage)getStorage()).merge(comment);
          milestone.getComments().remove(comm);
          Milestone mile=(Milestone)((HibernateStorage)getStorage()).merge(milestone);
          commentList.remove(comm);
          mile.setUpdated(new Date());
          ((HibernateStorage)getStorage()).delete(comm);
        }
      }
;
      listItem.add(remove.setVisible(userHasPermission));
      listItem.add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject())).setEscapeModelStrings(false));
    }
  }
);
  filter=new IssueFilterPanel(""String_Node_Str"",getSession().getUser());
  if (milestone.isCompleted()) {
    filter.setStatuses(new boolean[]{false,false,false,false,false,true,true});
  }
 else {
    filter.setStatuses(new boolean[]{true,true,true,true,true,false,false});
  }
  add(filter);
  add(new IssueListPanel(""String_Node_Str"",getIssuesProvider(),this,true,true,milestone));
  boolean timeEnabled=Boolean.parseBoolean(milestone.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED)) && milestone.hasValidTimePeriod();
  add(new Image(""String_Node_Str"",new ResourceReference(""String_Node_Str""),getPageParameters()).setVisible(timeEnabled));
  add(new WorkRemainingTable(""String_Node_Str"",milestone).setVisible(timeEnabled));
  ValueMap params=new ValueMap();
  params.put(""String_Node_Str"",getProject().getId());
  params.put(""String_Node_Str"",milestone.getName());
  params.put(""String_Node_Str"",true);
  add(new ResourceLink(""String_Node_Str"",new ResourceReference(""String_Node_Str""),params).setVisible(timeEnabled));
}","public void layout(){
  super.layout();
  page=this;
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  String name=getPageParameters().getString(""String_Node_Str"");
  milestone=dao.find(name,getProject());
  if (milestone == null) {
    notFoundError();
    return;
  }
  addLinks(getLinks(milestone));
  addDetails();
  User currentUser=getSession().getUser();
  final boolean userHasPermission=Manager.getSecurityInstance().userHasPermission(currentUser,new MilestoneEditPermission(),getProject());
  final List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(milestone.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  add(new ListView<Comment>(""String_Node_Str"",commentList){
    private Comment comment;
    protected void populateItem(    ListItem<Comment> listItem){
      CommentPanel panel=new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,milestone);
      listItem.add(panel);
    }
  }
);
  filter=new IssueFilterPanel(""String_Node_Str"",getSession().getUser());
  if (milestone.isCompleted()) {
    filter.setStatuses(new boolean[]{false,false,false,false,false,true,true});
  }
 else {
    filter.setStatuses(new boolean[]{true,true,true,true,true,false,false});
  }
  add(filter);
  add(new IssueListPanel(""String_Node_Str"",getIssuesProvider(),this,true,true,milestone));
  boolean timeEnabled=Boolean.parseBoolean(milestone.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED)) && milestone.hasValidTimePeriod();
  add(new Image(""String_Node_Str"",new ResourceReference(""String_Node_Str""),getPageParameters()).setVisible(timeEnabled));
  add(new WorkRemainingTable(""String_Node_Str"",milestone).setVisible(timeEnabled));
  ValueMap params=new ValueMap();
  params.put(""String_Node_Str"",getProject().getId());
  params.put(""String_Node_Str"",milestone.getName());
  params.put(""String_Node_Str"",true);
  add(new ResourceLink(""String_Node_Str"",new ResourceReference(""String_Node_Str""),params).setVisible(timeEnabled));
}",0.7550984217059762
189168,"protected void populateItem(ListItem<Comment> listItem){
  comment=listItem.getModelObject();
  listItem.add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
  listItem.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
  listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
  PageParameters params=page.getProjectPageParameters();
  params.put(""String_Node_Str"",milestone.getName());
  params.put(""String_Node_Str"",comment.getId());
  Link edit=new BookmarkablePageLink(""String_Node_Str"",EditComment.class,params);
  listItem.add(edit.setVisible(userHasPermission));
  Link remove=new Link(""String_Node_Str""){
    @Override public void onClick(){
      Comment comm=(Comment)((HibernateStorage)getStorage()).merge(comment);
      milestone.getComments().remove(comm);
      Milestone mile=(Milestone)((HibernateStorage)getStorage()).merge(milestone);
      commentList.remove(comm);
      mile.setUpdated(new Date());
      ((HibernateStorage)getStorage()).delete(comm);
    }
  }
;
  listItem.add(remove.setVisible(userHasPermission));
  listItem.add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject())).setEscapeModelStrings(false));
}","protected void populateItem(ListItem<Comment> listItem){
  CommentPanel panel=new CommentPanel(""String_Node_Str"",listItem.getModel(),getProject(),commentList,milestone);
  listItem.add(panel);
}",0.1784534038334435
189169,"public UpdateMilestoneEvent(Milestone milestone,Project project,User user,Comment comment,String type){
  super(type + ""String_Node_Str"" + milestone.getName()+ ""String_Node_Str""+ user.getFullnameOrUsername(),comment.getComment(),milestone.getUpdated());
  setApplicationId(MilestonesApplication.ID);
  setProject(project);
  setUser(user);
  setObjectId(milestone.getName());
}","public UpdateMilestoneEvent(Milestone milestone,Project project,User user,Comment comment,String action){
  super(user.getFullnameOrUsername() + ""String_Node_Str"" + action+ ""String_Node_Str""+ milestone.getName(),comment.getComment(),milestone.getUpdated());
  setApplicationId(MilestonesApplication.ID);
  setProject(project);
  setUser(user);
  setObjectId(milestone.getName());
  setSubObjectId(String.valueOf(comment.getId()));
}",0.8084054388133498
189170,"public String getBody(){
  String name=getObjectId();
  Milestone milestone=dao.find(name,getProject());
  if (milestone == null) {
    return ""String_Node_Str"" + getObjectId() + ""String_Node_Str""+ getProject().getAlias()+ ""String_Node_Str"";
  }
  addLinks(ViewMilestone.getLinks(milestone));
  return CreateMilestoneEvent.renderMilestone(milestone);
}","public String getBody(){
  String name=getObjectId();
  Milestone milestone=dao.find(name,getProject());
  if (milestone == null) {
    return ""String_Node_Str"" + getObjectId() + ""String_Node_Str""+ getProject().getAlias()+ ""String_Node_Str"";
  }
  addLinks(ViewMilestone.getLinks(milestone));
  if (getSubObjectId() == null || ""String_Node_Str"".equals(getSubObjectId())) {
    return CreateMilestoneEvent.renderMilestone(milestone);
  }
 else {
    Comment comment=MilestonesApplication.getComment(Long.parseLong(getSubObjectId()));
    if (comment == null) {
      return ""String_Node_Str"" + getSubObjectId() + ""String_Node_Str"";
    }
    return renderComment(comment,milestone);
  }
}",0.6775745909528392
189171,"private String renderComment(final Comment comment){
  if (comment == null) {
    return ""String_Node_Str"";
  }
  String content=new RenderUtil(){
    public Panel getPanel(){
      return new CommentPanel(RenderUtil.PANEL_ID,comment,getProject());
    }
  }
.getRenderedContent();
  return ""String_Node_Str"" + content + ""String_Node_Str"";
}","private String renderComment(final Comment comment,final Document doc){
  if (comment == null) {
    return ""String_Node_Str"";
  }
  String content=new RenderUtil(){
    public Panel getPanel(){
      return new CommentPanel(RenderUtil.PANEL_ID,new Model(comment),getProject(),null,doc);
    }
  }
.getRenderedContent();
  return ""String_Node_Str"" + content + ""String_Node_Str"";
}",0.926490984743412
189172,"public String getBody(){
  if (getSubObjectId() == null || ""String_Node_Str"".equals(getSubObjectId())) {
    return super.getBody();
  }
 else {
    Comment comment=DocsApplication.getComment(Long.parseLong(getSubObjectId()));
    if (comment == null) {
      return ""String_Node_Str"" + getSubObjectId() + ""String_Node_Str"";
    }
    return renderComment(comment);
  }
}","public String getBody(){
  String name=getObjectId();
  Document doc=DocsApplication.getDocument(name,getProject());
  if (doc == null) {
    return ""String_Node_Str"" + name + ""String_Node_Str""+ getProject().getAlias()+ ""String_Node_Str"";
  }
  if (getSubObjectId() == null || ""String_Node_Str"".equals(getSubObjectId())) {
    return super.getBody();
  }
 else {
    Comment comment=DocsApplication.getComment(Long.parseLong(getSubObjectId()));
    if (comment == null) {
      return ""String_Node_Str"" + getSubObjectId() + ""String_Node_Str"";
    }
    return renderComment(comment,doc);
  }
}",0.7697095435684648
189173,"public Panel getPanel(){
  return new CommentPanel(RenderUtil.PANEL_ID,comment,getProject());
}","public Panel getPanel(){
  return new CommentPanel(RenderUtil.PANEL_ID,new Model(comment),getProject(),null,doc);
}",0.9047619047619048
189174,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  name=getPageParameters().getString(""String_Node_Str"");
  MilestoneGroup group=dao.find(name,getProject());
  if (group == null) {
    notFoundError();
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  final MilestoneGroup finalGroup=group;
  add(new EditMilestoneGroupForm(""String_Node_Str"",finalGroup,false,this){
    public void submitParent(){
      super.submitParent();
      getHeadsUpApplication().addEvent(new UpdateMilestoneGroupEvent(finalGroup,finalGroup.getProject(),EditMilestoneGroup.this.getSession().getUser()));
    }
  }
.add(new OnePressButton(""String_Node_Str"")));
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  name=getPageParameters().getString(""String_Node_Str"");
  MilestoneGroup group=dao.find(name,getProject());
  if (group == null) {
    notFoundError();
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  final MilestoneGroup finalGroup=group;
  add(new EditMilestoneGroupForm(""String_Node_Str"",finalGroup,false,this){
    public void submitParent(){
      super.submitParent();
      getHeadsUpApplication().addEvent(new UpdateMilestoneGroupEvent(finalGroup,finalGroup.getProject(),EditMilestoneGroup.this.getSession().getUser()));
    }
  }
);
}",0.9717662508207484
189175,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  Issue create=new Issue(getProject());
  create.setReporter(getSession().getUser());
  create.getWatchers().add(getSession().getUser());
  create.setStatus(Issue.STATUS_NEW);
  String mName=getPageParameters().getString(""String_Node_Str"");
  Milestone milestone=getMilestone(mName,getProject());
  if (milestone != null) {
    create.setMilestone(milestone);
    if (milestone.getStartDate() != null && milestone.getStartDate().after(new Date())) {
      create.setIncludeInInitialEstimates(true);
    }
  }
  removeLink(((IssuesApplication)getHeadsUpApplication()).getMenuItemCreate());
  add(new EditIssueForm(""String_Node_Str"",create,true,this){
    public void onSubmit(    Issue create){
      boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
      create.setCreated(new Date());
      if (create.getTimeEstimate() != null) {
        if (timeBurndown) {
          create.setTimeRequired(create.getTimeEstimate());
        }
 else {
          create.setTimeRequired(new Duration(0));
        }
      }
      ((IssuesApplication)getHeadsUpApplication()).addIssue(create);
      getHeadsUpApplication().addEvent(new CreateIssueEvent(create,create.getProject()));
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  Issue create=new Issue(getProject());
  create.setReporter(getSession().getUser());
  create.setStatus(Issue.STATUS_NEW);
  String mName=getPageParameters().getString(""String_Node_Str"");
  Milestone milestone=getMilestone(mName,getProject());
  if (milestone != null) {
    create.setMilestone(milestone);
    if (milestone.getStartDate() != null && milestone.getStartDate().after(new Date())) {
      create.setIncludeInInitialEstimates(true);
    }
  }
  removeLink(((IssuesApplication)getHeadsUpApplication()).getMenuItemCreate());
  add(new EditIssueForm(""String_Node_Str"",create,true,this){
    public void onSubmit(    Issue create){
      boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
      create.setCreated(new Date());
      if (create.getTimeEstimate() != null) {
        if (timeBurndown) {
          create.setTimeRequired(create.getTimeEstimate());
        }
 else {
          create.setTimeRequired(new Duration(0));
        }
      }
      ((IssuesApplication)getHeadsUpApplication()).addIssue(create);
      getHeadsUpApplication().addEvent(new CreateIssueEvent(create,create.getProject()));
    }
  }
);
}",0.9807976366322008
189176,"public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  add(new MilestoneDropDownChoice(""String_Node_Str"",issue.getProject(),issue.getMilestone()).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  final DropDownChoice<User> assignees=new UserDropDownChoice(""String_Node_Str"",issue.getAssignee());
  assignees.setNullValid(true);
  add(assignees);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  assignToMe.setVisible(issue.getStatus() < Issue.STATUS_RESOLVED && !((HeadsUpSession)getSession()).getUser().equals(issue.getAssignee()));
  add(assignToMe.setDefaultFormProcessing(false));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}","public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  add(new MilestoneDropDownChoice(""String_Node_Str"",issue.getProject(),issue.getMilestone()).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  final DropDownChoice<User> assignees=new UserDropDownChoice(""String_Node_Str"",issue.getAssignee());
  assignees.setNullValid(true);
  add(assignees);
  toggleWatchers=new CheckBox(""String_Node_Str"",new Model<Boolean>(){
    private boolean toggle;
    @Override public void setObject(    Boolean object){
      toggle=object;
    }
    @Override public Boolean getObject(){
      return toggle;
    }
  }
);
  toggleWatchers.setModelObject(true);
  toggleWatchers.setVisible(creating);
  add(toggleWatchers);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      if (toggleWatchers.getModelObject()) {
        issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      }
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  assignToMe.setVisible(issue.getStatus() < Issue.STATUS_RESOLVED && !((HeadsUpSession)getSession()).getUser().equals(issue.getAssignee()));
  add(assignToMe.setDefaultFormProcessing(false));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",""String_Node_Str"").setVisible(creating));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
).setVisible(!creating));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}",0.9362065286963944
189177,"public void onSubmit(){
  if (attachmentPanel != null) {
    for (    Attachment attachment : attachmentPanel.getAttachments()) {
      if (attachment != null) {
        issue.getAttachments().add(attachment);
      }
    }
  }
  if (!creating) {
    issue=(Issue)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(issue);
    if (issue.getTimeRequired() != null && !issue.getTimeRequired().equals(oldTimeRequired)) {
      DurationWorked simulate=new DurationWorked();
      simulate.setUpdatedRequired(issue.getTimeRequired());
      simulate.setDay(new Date());
      simulate.setIssue(issue);
      simulate.setUser(((HeadsUpSession)getSession()).getUser());
      ((HibernateStorage)owner.getStorage()).save(simulate);
      issue.getTimeWorked().add(simulate);
    }
  }
 else   if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
    issue.setTimeRequired(issue.getTimeEstimate());
  }
  issue.setUpdated(new Date());
  if (issue.getMilestone() != null) {
    Milestone milestone=issue.getMilestone();
    if (creating) {
      milestone=(Milestone)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(milestone);
    }
    if (!milestone.getIssues().contains(issue)) {
      milestone.getIssues().add(issue);
    }
  }
  if (issue.getAssignee() != null && !issue.getWatchers().contains(issue.getAssignee())) {
    if (oldAssignee == null || !issue.getAssignee().equals(oldAssignee)) {
      issue.getWatchers().add(issue.getAssignee());
    }
  }
  parent.onSubmit(issue);
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",issue.getProject().getId());
  params.add(""String_Node_Str"",String.valueOf(issue.getId()));
  setResponsePage(owner.getPageClass(""String_Node_Str""),params);
}","public void onSubmit(){
  if (attachmentPanel != null) {
    for (    Attachment attachment : attachmentPanel.getAttachments()) {
      if (attachment != null) {
        issue.getAttachments().add(attachment);
      }
    }
  }
  if (!creating) {
    issue=(Issue)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(issue);
    if (issue.getTimeRequired() != null && !issue.getTimeRequired().equals(oldTimeRequired)) {
      DurationWorked simulate=new DurationWorked();
      simulate.setUpdatedRequired(issue.getTimeRequired());
      simulate.setDay(new Date());
      simulate.setIssue(issue);
      simulate.setUser(((HeadsUpSession)getSession()).getUser());
      ((HibernateStorage)owner.getStorage()).save(simulate);
      issue.getTimeWorked().add(simulate);
    }
  }
 else   if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
    issue.setTimeRequired(issue.getTimeEstimate());
  }
  if (creating) {
    if (toggleWatchers.getModelObject()) {
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
    }
  }
  issue.setUpdated(new Date());
  if (issue.getMilestone() != null) {
    Milestone milestone=issue.getMilestone();
    if (creating) {
      milestone=(Milestone)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(milestone);
    }
    if (!milestone.getIssues().contains(issue)) {
      milestone.getIssues().add(issue);
    }
  }
  if (issue.getAssignee() != null && !issue.getWatchers().contains(issue.getAssignee())) {
    if (oldAssignee == null || !issue.getAssignee().equals(oldAssignee)) {
      issue.getWatchers().add(issue.getAssignee());
    }
  }
  parent.onSubmit(issue);
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",issue.getProject().getId());
  params.add(""String_Node_Str"",String.valueOf(issue.getId()));
  setResponsePage(owner.getPageClass(""String_Node_Str""),params);
}",0.9576046634870164
189178,"protected void submitChild(Comment comment){
  duration.setUser(getSession().getUser());
  duration.setIssue(getIssue());
  if (willChildConsumeComment()) {
    duration.setComment(comment);
  }
  Iterator<DurationWorked> iterator=getIssue().getTimeWorked().iterator();
  while (iterator.hasNext()) {
    DurationWorked delete=iterator.next();
    if (delete.getId() == duration.getId()) {
      ((HibernateStorage)getStorage()).delete(delete);
      iterator.remove();
    }
  }
  ((HibernateStorage)getStorage()).save(duration);
  getIssue().getTimeWorked().add(duration);
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  if (timeBurndown) {
    duration.setUpdatedRequired(getIssue().getTimeRequired());
  }
 else {
    double hours=0;
    if (getIssue().getTimeRequired() == null) {
      if (getIssue().getTimeEstimate() != null) {
        hours=getIssue().getTimeEstimate().getHours();
      }
    }
 else {
      hours=getIssue().getTimeRequired().getHours();
    }
    hours+=duration.getWorked().getHours();
    Duration required=new Duration(hours);
    duration.setUpdatedRequired(required);
    getIssue().setTimeRequired(required);
  }
  if (getIssue().getAssignee() == null) {
    getIssue().setAssignee(getSession().getUser());
  }
  getIssue().getWatchers().add(getSession().getUser());
  getIssue().setStatus(Issue.STATUS_INPROGRESS);
}","protected void submitChild(Comment comment){
  duration=(DurationWorked)((HibernateStorage)getStorage()).merge(duration);
  duration.setUser(getSession().getUser());
  duration.setIssue(getIssue());
  if (willChildConsumeComment()) {
    duration.setComment(comment);
  }
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  if (timeBurndown) {
    duration.setUpdatedRequired(getIssue().getTimeRequired());
  }
 else {
    double hours=0;
    if (getIssue().getTimeRequired() == null) {
      if (getIssue().getTimeEstimate() != null) {
        hours=getIssue().getTimeEstimate().getHours();
      }
    }
 else {
      hours=getIssue().getTimeRequired().getHours();
    }
    hours+=duration.getWorked().getHours();
    Duration required=new Duration(hours);
    duration.setUpdatedRequired(required);
    getIssue().setTimeRequired(required);
  }
  if (getIssue().getAssignee() == null) {
    getIssue().setAssignee(getSession().getUser());
  }
  getIssue().getWatchers().add(getSession().getUser());
  getIssue().setStatus(Issue.STATUS_INPROGRESS);
}",0.8223863194714341
189179,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  Issue create=new Issue(getProject());
  create.setReporter(getSession().getUser());
  create.getWatchers().add(getSession().getUser());
  create.setStatus(Issue.STATUS_NEW);
  String mName=getPageParameters().getString(""String_Node_Str"");
  Milestone milestone=getMilestone(mName,getProject());
  if (milestone != null) {
    create.setMilestone(milestone);
    if (milestone.getStartDate() != null && milestone.getStartDate().after(new Date())) {
      create.setIncludeInInitialEstimates(true);
    }
  }
  removeLink(((IssuesApplication)getHeadsUpApplication()).getMenuItemCreate());
  add(new EditIssueForm(""String_Node_Str"",create,true,this){
    public void onSubmit(    Issue create){
      boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
      create.setCreated(new Date());
      if (create.getTimeEstimate() != null) {
        if (timeBurndown) {
          create.setTimeRequired(create.getTimeEstimate());
        }
 else {
          create.setTimeRequired(new Duration(0));
        }
      }
      ((IssuesApplication)getHeadsUpApplication()).addIssue(create);
      getHeadsUpApplication().addEvent(new CreateIssueEvent(create,create.getProject()));
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  Issue create=new Issue(getProject());
  create.setReporter(getSession().getUser());
  create.setStatus(Issue.STATUS_NEW);
  String mName=getPageParameters().getString(""String_Node_Str"");
  Milestone milestone=getMilestone(mName,getProject());
  if (milestone != null) {
    create.setMilestone(milestone);
    if (milestone.getStartDate() != null && milestone.getStartDate().after(new Date())) {
      create.setIncludeInInitialEstimates(true);
    }
  }
  removeLink(((IssuesApplication)getHeadsUpApplication()).getMenuItemCreate());
  add(new EditIssueForm(""String_Node_Str"",create,true,this){
    public void onSubmit(    Issue create){
      boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
      create.setCreated(new Date());
      if (create.getTimeEstimate() != null) {
        if (timeBurndown) {
          create.setTimeRequired(create.getTimeEstimate());
        }
 else {
          create.setTimeRequired(new Duration(0));
        }
      }
      ((IssuesApplication)getHeadsUpApplication()).addIssue(create);
      getHeadsUpApplication().addEvent(new CreateIssueEvent(create,create.getProject()));
    }
  }
);
}",0.9807976366322008
189180,"public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  add(new MilestoneDropDownChoice(""String_Node_Str"",issue.getProject(),issue.getMilestone()).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  final DropDownChoice<User> assignees=new UserDropDownChoice(""String_Node_Str"",issue.getAssignee());
  assignees.setNullValid(true);
  add(assignees);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  assignToMe.setVisible(issue.getStatus() < Issue.STATUS_RESOLVED && !((HeadsUpSession)getSession()).getUser().equals(issue.getAssignee()));
  add(assignToMe.setDefaultFormProcessing(false));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}","public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  add(new MilestoneDropDownChoice(""String_Node_Str"",issue.getProject(),issue.getMilestone()).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  final DropDownChoice<User> assignees=new UserDropDownChoice(""String_Node_Str"",issue.getAssignee());
  assignees.setNullValid(true);
  add(assignees);
  toggleWatchers=new CheckBox(""String_Node_Str"",new Model<Boolean>(){
    private boolean toggle;
    @Override public void setObject(    Boolean object){
      toggle=object;
    }
    @Override public Boolean getObject(){
      return toggle;
    }
  }
);
  toggleWatchers.setModelObject(true);
  toggleWatchers.setVisible(creating);
  add(toggleWatchers);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      if (toggleWatchers.getModelObject()) {
        issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      }
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  assignToMe.setVisible(issue.getStatus() < Issue.STATUS_RESOLVED && !((HeadsUpSession)getSession()).getUser().equals(issue.getAssignee()));
  add(assignToMe.setDefaultFormProcessing(false));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",""String_Node_Str"").setVisible(creating));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
).setVisible(!creating));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}",0.9362065286963944
189181,"public void onSubmit(){
  if (attachmentPanel != null) {
    for (    Attachment attachment : attachmentPanel.getAttachments()) {
      if (attachment != null) {
        issue.getAttachments().add(attachment);
      }
    }
  }
  if (!creating) {
    issue=(Issue)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(issue);
    if (issue.getTimeRequired() != null && !issue.getTimeRequired().equals(oldTimeRequired)) {
      DurationWorked simulate=new DurationWorked();
      simulate.setUpdatedRequired(issue.getTimeRequired());
      simulate.setDay(new Date());
      simulate.setIssue(issue);
      simulate.setUser(((HeadsUpSession)getSession()).getUser());
      ((HibernateStorage)owner.getStorage()).save(simulate);
      issue.getTimeWorked().add(simulate);
    }
  }
 else   if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
    issue.setTimeRequired(issue.getTimeEstimate());
  }
  issue.setUpdated(new Date());
  if (issue.getMilestone() != null) {
    Milestone milestone=issue.getMilestone();
    if (creating) {
      milestone=(Milestone)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(milestone);
    }
    if (!milestone.getIssues().contains(issue)) {
      milestone.getIssues().add(issue);
    }
  }
  if (issue.getAssignee() != null && !issue.getWatchers().contains(issue.getAssignee())) {
    if (oldAssignee == null || !issue.getAssignee().equals(oldAssignee)) {
      issue.getWatchers().add(issue.getAssignee());
    }
  }
  parent.onSubmit(issue);
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",issue.getProject().getId());
  params.add(""String_Node_Str"",String.valueOf(issue.getId()));
  setResponsePage(owner.getPageClass(""String_Node_Str""),params);
}","public void onSubmit(){
  if (attachmentPanel != null) {
    for (    Attachment attachment : attachmentPanel.getAttachments()) {
      if (attachment != null) {
        issue.getAttachments().add(attachment);
      }
    }
  }
  if (!creating) {
    issue=(Issue)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(issue);
    if (issue.getTimeRequired() != null && !issue.getTimeRequired().equals(oldTimeRequired)) {
      DurationWorked simulate=new DurationWorked();
      simulate.setUpdatedRequired(issue.getTimeRequired());
      simulate.setDay(new Date());
      simulate.setIssue(issue);
      simulate.setUser(((HeadsUpSession)getSession()).getUser());
      ((HibernateStorage)owner.getStorage()).save(simulate);
      issue.getTimeWorked().add(simulate);
    }
  }
 else   if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
    issue.setTimeRequired(issue.getTimeEstimate());
  }
  if (creating) {
    if (toggleWatchers.getModelObject()) {
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
    }
  }
  issue.setUpdated(new Date());
  if (issue.getMilestone() != null) {
    Milestone milestone=issue.getMilestone();
    if (creating) {
      milestone=(Milestone)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(milestone);
    }
    if (!milestone.getIssues().contains(issue)) {
      milestone.getIssues().add(issue);
    }
  }
  if (issue.getAssignee() != null && !issue.getWatchers().contains(issue.getAssignee())) {
    if (oldAssignee == null || !issue.getAssignee().equals(oldAssignee)) {
      issue.getWatchers().add(issue.getAssignee());
    }
  }
  parent.onSubmit(issue);
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",issue.getProject().getId());
  params.add(""String_Node_Str"",String.valueOf(issue.getId()));
  setResponsePage(owner.getPageClass(""String_Node_Str""),params);
}",0.9576046634870164
189182,"@Override protected void layoutChild(Form form){
  boolean timeRequired=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  for (  DurationWorked dur : getIssue().getTimeWorked()) {
    if (dur.getId() == itemId) {
      duration=dur;
      break;
    }
  }
  form.add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(duration.getWorked())).setRequired(timeRequired));
  WebMarkupContainer update=new WebMarkupContainer(""String_Node_Str"");
  update.setVisible(timeBurndown);
  if (getIssue().getTimeRequired() == null) {
    getIssue().setTimeRequired(new Duration(0,Duration.UNIT_HOURS));
  }
  update.add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(getIssue().getTimeRequired())).setRequired(timeRequired));
  form.add(update);
  form.add(new DateTimeWithSecondField(""String_Node_Str"",new PropertyModel<Date>(duration,""String_Node_Str"")));
  create.setComment(duration.getComment().getComment());
  setSubmitLabel(""String_Node_Str"");
}","@Override protected void layoutChild(Form form){
  boolean timeRequired=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  for (  DurationWorked dur : getIssue().getTimeWorked()) {
    if (dur.getId() == itemId) {
      duration=dur;
      break;
    }
  }
  form.add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(duration.getWorked())).setRequired(timeRequired));
  WebMarkupContainer update=new WebMarkupContainer(""String_Node_Str"");
  update.setVisible(timeBurndown);
  if (getIssue().getTimeRequired() == null) {
    getIssue().setTimeRequired(new Duration(0,Duration.UNIT_HOURS));
  }
  update.add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(getIssue().getTimeRequired())).setRequired(timeRequired));
  form.add(update);
  form.add(new DateTimeWithSecondField(""String_Node_Str"",new PropertyModel<Date>(duration,""String_Node_Str"")));
  if (duration.getComment() != null) {
    create.setComment(duration.getComment().getComment());
  }
  setSubmitLabel(""String_Node_Str"");
}",0.9808917197452228
189183,"public void layout(){
  super.layout();
  if (getProject().equals(StoredProject.getDefault())) {
    requirePermission(new ProjectListPermission());
  }
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final MilestoneFilterPanel filter=new MilestoneFilterPanel(""String_Node_Str"",getSession().getUser());
  add(filter);
  hideProject=!getProject().equals(StoredProject.getDefault());
  SortableEntityProvider<MilestoneGroup> provider=new MilestoneGroupProvider(getProject(),filter);
  List<MilestoneGroup> groups=MilestonesApplication.getMilestoneGroups(getProject(),filter);
  hasGroups=groups.size() > 0;
  add(new StripedDataView<MilestoneGroup>(""String_Node_Str"",provider){
    @Override protected void populateItem(    Item<MilestoneGroup> item){
      MilestoneGroup group=item.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",group.getProject().getId());
      params.add(""String_Node_Str"",group.getName());
      BookmarkablePageLink nameLink=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
      nameLink.add(new Label(""String_Node_Str"",group.getName()));
      item.add(nameLink);
      double part=group.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      item.add(panel);
      SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
      item.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject));
    }
  }
);
  if (getProject().equals(StoredProject.getDefault())) {
    ungroupedProvider=new GroupedMilestoneProvider(null,filter);
  }
 else {
    ungroupedProvider=new GroupedMilestoneProvider(null,getProject(),filter);
  }
  add(ungrouped=new WebMarkupContainer(""String_Node_Str""));
  ungrouped.setOutputMarkupPlaceholderTag(true);
  add(ungroupedMilestones=new MilestoneListPanel(""String_Node_Str"",ungroupedProvider,this,hideProject));
  ungroupedMilestones.setOutputMarkupPlaceholderTag(true);
}","public void layout(){
  super.layout();
  if (getProject().equals(StoredProject.getDefault())) {
    requirePermission(new ProjectListPermission());
  }
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final MilestoneFilterPanel filter=new MilestoneFilterPanel(""String_Node_Str"",getSession().getUser());
  add(filter);
  hideProject=!getProject().equals(StoredProject.getDefault());
  SortableEntityProvider<MilestoneGroup> provider=new MilestoneGroupProvider(getProject(),filter);
  List<MilestoneGroup> groups=MilestonesApplication.getMilestoneGroups(getProject(),filter);
  hasGroups=groups.size() > 0;
  add(new StripedDataView<MilestoneGroup>(""String_Node_Str"",provider){
    @Override protected void populateItem(    Item<MilestoneGroup> item){
      MilestoneGroup group=item.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",group.getProject().getId());
      params.add(""String_Node_Str"",group.getName());
      BookmarkablePageLink nameLink=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
      nameLink.add(new Label(""String_Node_Str"",group.getName()));
      item.add(nameLink);
      double part=group.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      item.add(panel);
      SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
      item.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject,group));
    }
  }
);
  if (getProject().equals(StoredProject.getDefault())) {
    ungroupedProvider=new GroupedMilestoneProvider(null,filter);
  }
 else {
    ungroupedProvider=new GroupedMilestoneProvider(null,getProject(),filter);
  }
  add(ungrouped=new WebMarkupContainer(""String_Node_Str""));
  ungrouped.setOutputMarkupPlaceholderTag(true);
  add(ungroupedMilestones=new MilestoneListPanel(""String_Node_Str"",ungroupedProvider,this,hideProject,null));
  ungroupedMilestones.setOutputMarkupPlaceholderTag(true);
}",0.9973538609574212
189184,"@Override protected void populateItem(Item<MilestoneGroup> item){
  MilestoneGroup group=item.getModelObject();
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",group.getProject().getId());
  params.add(""String_Node_Str"",group.getName());
  BookmarkablePageLink nameLink=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
  nameLink.add(new Label(""String_Node_Str"",group.getName()));
  item.add(nameLink);
  double part=group.getCompleteness();
  int percent=(int)(part * 100);
  Panel panel=new PercentagePanel(""String_Node_Str"",percent);
  item.add(panel);
  SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
  item.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject));
}","@Override protected void populateItem(Item<MilestoneGroup> item){
  MilestoneGroup group=item.getModelObject();
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",group.getProject().getId());
  params.add(""String_Node_Str"",group.getName());
  BookmarkablePageLink nameLink=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
  nameLink.add(new Label(""String_Node_Str"",group.getName()));
  item.add(nameLink);
  double part=group.getCompleteness();
  int percent=(int)(part * 100);
  Panel panel=new PercentagePanel(""String_Node_Str"",percent);
  item.add(panel);
  SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
  item.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject,group));
}",0.996273291925466
189185,"public void layout(){
  super.layout();
  page=this;
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  String name=getPageParameters().getString(""String_Node_Str"");
  group=dao.find(name,getProject());
  if (group == null) {
    notFoundError();
    return;
  }
  addLinks(getLinks(group));
  addDetails();
  List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(group.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  add(new ListView<Comment>(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem<Comment> listItem){
      Comment comment=listItem.getModelObject();
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
      listItem.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      listItem.add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject())).setEscapeModelStrings(false));
    }
  }
);
  filter=new MilestoneFilterPanel(""String_Node_Str"",getSession().getUser()){
    @Override public Criterion getCompletedCriterion(){
      Criterion c=super.getCompletedCriterion();
      if (c == null) {
        c=Restrictions.eq(""String_Node_Str"",group);
      }
 else {
        c=Restrictions.and(c,Restrictions.eq(""String_Node_Str"",group));
      }
      return c;
    }
  }
;
  if (group.isCompleted()) {
    filter.setFilters(0,false,true);
  }
 else {
    filter.setFilters(0,true,false);
  }
  add(filter);
  boolean hideProject=true;
  final SortableEntityProvider<Milestone> provider;
  if (getProject().equals(StoredProject.getDefault())) {
    provider=new MilestoneProvider(filter);
    hideProject=false;
  }
 else {
    provider=new MilestoneProvider(getProject(),filter);
  }
  add(new MilestoneListPanel(""String_Node_Str"",provider,this,hideProject));
  boolean timeEnabled=Boolean.parseBoolean(group.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED)) && group.hasValidTimePeriod();
  add(new Image(""String_Node_Str"",new ResourceReference(""String_Node_Str""),getPageParameters()).setVisible(timeEnabled));
  add(new WorkRemainingTable(""String_Node_Str"",group).setVisible(timeEnabled));
  ValueMap params=new ValueMap();
  params.put(""String_Node_Str"",getProject().getId());
  params.put(""String_Node_Str"",group.getName());
  params.put(""String_Node_Str"",true);
  add(new ResourceLink(""String_Node_Str"",new ResourceReference(""String_Node_Str""),params).setVisible(timeEnabled));
}","public void layout(){
  super.layout();
  page=this;
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  String name=getPageParameters().getString(""String_Node_Str"");
  group=dao.find(name,getProject());
  if (group == null) {
    notFoundError();
    return;
  }
  addLinks(getLinks(group));
  addDetails();
  List<Comment> commentList=new LinkedList<Comment>();
  commentList.addAll(group.getComments());
  Collections.sort(commentList,new Comparator<Comment>(){
    public int compare(    Comment comment1,    Comment comment2){
      return comment1.getCreated().compareTo(comment2.getCreated());
    }
  }
);
  add(new ListView<Comment>(""String_Node_Str"",commentList){
    protected void populateItem(    ListItem<Comment> listItem){
      Comment comment=listItem.getModelObject();
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
      listItem.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
      listItem.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
      listItem.add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),getProject())).setEscapeModelStrings(false));
    }
  }
);
  filter=new MilestoneFilterPanel(""String_Node_Str"",getSession().getUser()){
    @Override public Criterion getCompletedCriterion(){
      Criterion c=super.getCompletedCriterion();
      if (c == null) {
        c=Restrictions.eq(""String_Node_Str"",group);
      }
 else {
        c=Restrictions.and(c,Restrictions.eq(""String_Node_Str"",group));
      }
      return c;
    }
  }
;
  if (group.isCompleted()) {
    filter.setFilters(0,false,true);
  }
 else {
    filter.setFilters(0,true,false);
  }
  add(filter);
  boolean hideProject=true;
  final SortableEntityProvider<Milestone> provider;
  if (getProject().equals(StoredProject.getDefault())) {
    provider=new MilestoneProvider(filter);
    hideProject=false;
  }
 else {
    provider=new MilestoneProvider(getProject(),filter);
  }
  add(new MilestoneListPanel(""String_Node_Str"",provider,this,hideProject,group));
  boolean timeEnabled=Boolean.parseBoolean(group.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED)) && group.hasValidTimePeriod();
  add(new Image(""String_Node_Str"",new ResourceReference(""String_Node_Str""),getPageParameters()).setVisible(timeEnabled));
  add(new WorkRemainingTable(""String_Node_Str"",group).setVisible(timeEnabled));
  ValueMap params=new ValueMap();
  params.put(""String_Node_Str"",getProject().getId());
  params.put(""String_Node_Str"",group.getName());
  params.put(""String_Node_Str"",true);
  add(new ResourceLink(""String_Node_Str"",new ResourceReference(""String_Node_Str""),params).setVisible(timeEnabled));
}",0.9989429175475688
189186,"@Override public Integer getObject(){
  int cols=6;
  if (hideProject) {
    cols--;
  }
  return cols;
}","@Override public Date getObject(){
  return quickMilestone.getDueDate();
}",0.5251396648044693
189187,"public MilestoneListPanel(String id,final SortableDataProvider<Milestone> provider,final HeadsUpPage page,final boolean hideProject){
  super(id);
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final DataView dataView;
  add(dataView=new StripedDataView<Milestone>(""String_Node_Str"",provider,ITEMS_PER_PAGE){
    protected void populateItem(    Item<Milestone> listItem){
      super.populateItem(listItem);
      Milestone milestone=listItem.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",milestone.getProject().getId());
      params.add(""String_Node_Str"",milestone.getName());
      WebMarkupContainer cell=new WebMarkupContainer(""String_Node_Str"");
      Link idLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
      idLink.add(new Label(""String_Node_Str"",milestone.getName()));
      cell.add(idLink);
      listItem.add(cell);
      double part=milestone.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      int total=milestone.getIssues().size();
      int open=milestone.getOpenIssues().size();
      Label label=new Label(""String_Node_Str"",String.valueOf(total));
      listItem.add(label);
      label=new Label(""String_Node_Str"",String.valueOf(open));
      listItem.add(label);
      label=new Label(""String_Node_Str"",milestone.getProject().toString());
      listItem.add(label.setVisible(!hideProject));
      label=new Label(""String_Node_Str"",new FormattedDateModel(milestone.getDueDate(),((HeadsUpSession)getSession()).getTimeZone()));
      label.add(new MilestoneStatusModifier(""String_Node_Str"",milestone));
      listItem.add(label);
    }
  }
);
  AttributeModifier colspanModifier=new AttributeModifier(""String_Node_Str"",true,new Model<Integer>(){
    @Override public Integer getObject(){
      int cols=6;
      if (hideProject) {
        cols--;
      }
      return cols;
    }
  }
);
  add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider).setVisible(!hideProject));
  pagingFooter=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingFooter.setOutputMarkupPlaceholderTag(true);
  add(pagingFooter.add(colspanModifier));
  pagingHeader=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingHeader.setOutputMarkupPlaceholderTag(true);
  add(pagingHeader.add(colspanModifier));
  final WebMarkupContainer allCell=new WebMarkupContainer(""String_Node_Str"");
  add(allCell.add(colspanModifier).setVisible(provider.size() > ITEMS_PER_PAGE));
  allCell.add(new Link(""String_Node_Str""){
    @Override public void onClick(){
      dataView.setItemsPerPage(Integer.MAX_VALUE);
      setVisible(false);
      allCell.setVisible(false);
      pagingFooter.setVisible(false);
      pagingHeader.setVisible(false);
    }
  }
);
}","public MilestoneListPanel(String id,final SortableDataProvider<Milestone> provider,final HeadsUpPage page,final boolean hideProject,final MilestoneGroup group){
  super(id);
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  this.page=page;
  this.group=group;
  Form<Milestone> inlineForm=getInlineForm();
  add(inlineForm);
  final DataView dataView;
  inlineForm.add(dataView=new StripedDataView<Milestone>(""String_Node_Str"",provider,ITEMS_PER_PAGE){
    protected void populateItem(    Item<Milestone> listItem){
      super.populateItem(listItem);
      Milestone milestone=listItem.getModelObject();
      PageParameters params=new PageParameters();
      params.add(""String_Node_Str"",milestone.getProject().getId());
      params.add(""String_Node_Str"",milestone.getName());
      WebMarkupContainer cell=new WebMarkupContainer(""String_Node_Str"");
      Link idLink=new BookmarkablePageLink(""String_Node_Str"",page.getPageClass(""String_Node_Str""),params);
      idLink.add(new Label(""String_Node_Str"",milestone.getName()));
      cell.add(idLink);
      listItem.add(cell);
      double part=milestone.getCompleteness();
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      int total=milestone.getIssues().size();
      int open=milestone.getOpenIssues().size();
      Label label=new Label(""String_Node_Str"",String.valueOf(total));
      listItem.add(label);
      label=new Label(""String_Node_Str"",String.valueOf(open));
      listItem.add(label);
      label=new Label(""String_Node_Str"",milestone.getProject().toString());
      listItem.add(label.setVisible(!hideProject));
      label=new Label(""String_Node_Str"",new FormattedDateModel(milestone.getDueDate(),((HeadsUpSession)getSession()).getTimeZone()));
      label.add(new MilestoneStatusModifier(""String_Node_Str"",milestone));
      listItem.add(label);
    }
  }
);
  AttributeModifier colspanModifier=new AttributeModifier(""String_Node_Str"",true,new Model<Integer>(){
    @Override public Integer getObject(){
      int cols=6;
      if (hideProject) {
        cols--;
      }
      return cols;
    }
  }
);
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider));
  inlineForm.add(new OrderByBorder(""String_Node_Str"",""String_Node_Str"",provider).setVisible(!hideProject));
  pagingFooter=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingFooter.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingFooter.add(colspanModifier));
  pagingHeader=new StyledPagingNavigator(""String_Node_Str"",dataView);
  pagingHeader.setOutputMarkupPlaceholderTag(true);
  inlineForm.add(pagingHeader.add(colspanModifier));
  final WebMarkupContainer allCell=new WebMarkupContainer(""String_Node_Str"");
  inlineForm.add(allCell.add(colspanModifier).setVisible(provider.size() > ITEMS_PER_PAGE));
  allCell.add(new Link(""String_Node_Str""){
    @Override public void onClick(){
      dataView.setItemsPerPage(Integer.MAX_VALUE);
      setVisible(false);
      allCell.setVisible(false);
      pagingFooter.setVisible(false);
      pagingHeader.setVisible(false);
    }
  }
);
}",0.9640765943978478
189188,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  user=getSession().getUser();
  String username=getPageParameters().getString(""String_Node_Str"");
  if (username != null) {
    user=getSecurityManager().getUserByUsername(username);
    if (user == null || user.equals(HeadsUpSession.ANONYMOUS_USER)) {
      notFoundError();
      return;
    }
  }
  final org.headsupdev.agile.api.User finalUser=user;
  boolean showTools=(user.equals(getSession().getUser()) && !user.equals(HeadsUpSession.ANONYMOUS_USER)) || getSecurityManager().userHasPermission(getSession().getUser(),new AdminPermission(),null);
  final boolean timeEnabled=Boolean.parseBoolean(StoredProject.getDefault().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  final boolean showVelocity=timeEnabled && showTools;
  WebMarkupContainer velocityPanel=new WebMarkupContainer(""String_Node_Str"");
  add(velocityPanel.setVisible(showVelocity));
  if (showVelocity) {
    Velocity velocity=getResourceManager().getUserVelocity(user);
    String velocityStr=""String_Node_Str"";
    if (!velocity.equals(Velocity.INVALID)) {
      velocityStr=String.format(""String_Node_Str"",velocity.getVelocity());
    }
    velocityPanel.add(new Label(""String_Node_Str"",velocityStr));
    Velocity currentVelocity=getResourceManager().getCurrentUserVelocity(user);
    String currentVelocityStr=""String_Node_Str"";
    if (!currentVelocity.equals(Velocity.INVALID)) {
      currentVelocityStr=String.format(""String_Node_Str"",currentVelocity.getVelocity());
    }
    velocityPanel.add(new Label(""String_Node_Str"",currentVelocityStr));
    Velocity averageVelocity=getResourceManager().getAverageVelocity();
    String averageVelocityStr=""String_Node_Str"";
    if (!averageVelocity.equals(Velocity.INVALID)) {
      averageVelocityStr=String.format(""String_Node_Str"",averageVelocity.getVelocity());
    }
    velocityPanel.add(new Label(""String_Node_Str"",averageVelocityStr));
  }
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",user.getUsername());
  params.add(""String_Node_Str"",""String_Node_Str"");
  add(new Image(""String_Node_Str"",new ResourceReference(""String_Node_Str""),params));
  add(new UserDetailsPanel(""String_Node_Str"",user,getProject(),shouldShowFullDetails()));
  if (showTools) {
    params=getPageParameters();
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),params,""String_Node_Str""));
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),params,""String_Node_Str""));
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),params,""String_Node_Str""));
  }
  add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
  add(new IssueListPanel(""String_Node_Str"",getIssuesWatchedBy(finalUser),this,false,false));
  Calendar calendar=Calendar.getInstance(user.getTimeZone());
  Date startOfToday=DateUtil.getStartOfToday(calendar);
  Date endOfToday=DateUtil.getEndOfToday(calendar);
  calendar.setTime(startOfToday);
  calendar.add(Calendar.DATE,-7);
  Date startOfWeek=calendar.getTime();
  Duration durationDay=getResourceManager().getLoggedTimeForUser(user,startOfToday,endOfToday);
  add(new Label(""String_Node_Str"",durationDay == null ? ""String_Node_Str"" : durationDay.toString()));
  Duration durationWeek=getResourceManager().getLoggedTimeForUser(user,startOfWeek,endOfToday);
  add(new Label(""String_Node_Str"",durationWeek == null ? ""String_Node_Str"" : durationWeek.toString()));
  add(new ListView<DurationWorked>(""String_Node_Str"",getResourceManager().getDurationWorkedForUser(user,startOfWeek,endOfToday)){
    protected void populateItem(    ListItem<DurationWorked> listItem){
      DurationWorked worked=listItem.getModelObject();
      if (worked.getIssue() == null) {
        listItem.setVisible(false);
        return;
      }
      WebMarkupContainer workedTitle=new WebMarkupContainer(""String_Node_Str"");
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
      String time=""String_Node_Str"";
      if (worked.getWorked() != null) {
        time=worked.getWorked().toString();
      }
      workedTitle.add(new Label(""String_Node_Str"",time));
      Issue related=worked.getIssue();
      PageParameters params=new PageParameters();
      params.put(""String_Node_Str"",related.getProject());
      params.put(""String_Node_Str"",related.getId());
      BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
      String issueId=related.getProject().getId() + ""String_Node_Str"" + related.getId();
      link.add(new Label(""String_Node_Str"",""String_Node_Str"" + issueId));
      workedTitle.add(link.add(new IssueStatusModifier(""String_Node_Str"",related)));
      workedTitle.add(new Label(""String_Node_Str"",related.getSummary()).add(new IssueStatusModifier(""String_Node_Str"",related)));
      workedTitle.add(new Label(""String_Node_Str"",worked.getUser().getFullnameOrUsername()));
      workedTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(worked.getDay(),((HeadsUpSession)getSession()).getTimeZone())));
      listItem.add(workedTitle);
    }
  }
.setVisible(showTools && timeEnabled));
  add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
  add(new HistoryPanel(""String_Node_Str"",getEventsForUser(user),true));
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  user=getSession().getUser();
  String username=getPageParameters().getString(""String_Node_Str"");
  if (username != null) {
    user=getSecurityManager().getUserByUsername(username);
    if (user == null || user.equals(HeadsUpSession.ANONYMOUS_USER)) {
      notFoundError();
      return;
    }
  }
  final org.headsupdev.agile.api.User finalUser=user;
  boolean showTools=(user.equals(getSession().getUser()) && !user.equals(HeadsUpSession.ANONYMOUS_USER)) || getSecurityManager().userHasPermission(getSession().getUser(),new AdminPermission(),null);
  final boolean timeEnabled=Boolean.parseBoolean(StoredProject.getDefault().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  final boolean showVelocity=timeEnabled && showTools;
  WebMarkupContainer velocityPanel=new WebMarkupContainer(""String_Node_Str"");
  add(velocityPanel.setVisible(showVelocity));
  if (showVelocity) {
    Velocity velocity=getResourceManager().getUserVelocity(user);
    String velocityStr=""String_Node_Str"";
    if (!velocity.equals(Velocity.INVALID)) {
      velocityStr=String.format(""String_Node_Str"",velocity.getVelocity());
    }
    velocityPanel.add(new Label(""String_Node_Str"",velocityStr));
    Velocity currentVelocity=getResourceManager().getCurrentUserVelocity(user);
    String currentVelocityStr=""String_Node_Str"";
    if (!currentVelocity.equals(Velocity.INVALID)) {
      currentVelocityStr=String.format(""String_Node_Str"",currentVelocity.getVelocity());
    }
    velocityPanel.add(new Label(""String_Node_Str"",currentVelocityStr));
    Velocity averageVelocity=getResourceManager().getAverageVelocity();
    String averageVelocityStr=""String_Node_Str"";
    if (!averageVelocity.equals(Velocity.INVALID)) {
      averageVelocityStr=String.format(""String_Node_Str"",averageVelocity.getVelocity());
    }
    velocityPanel.add(new Label(""String_Node_Str"",averageVelocityStr));
  }
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",user.getUsername());
  params.add(""String_Node_Str"",""String_Node_Str"");
  add(new Image(""String_Node_Str"",new ResourceReference(""String_Node_Str""),params));
  add(new UserDetailsPanel(""String_Node_Str"",user,getProject(),shouldShowFullDetails()));
  if (showTools) {
    params=getPageParameters();
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),params,""String_Node_Str""));
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),params,""String_Node_Str""));
    addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),params,""String_Node_Str""));
  }
  add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
  add(new IssueListPanel(""String_Node_Str"",getIssuesWatchedBy(finalUser),this,false,false,null));
  Calendar calendar=Calendar.getInstance(user.getTimeZone());
  Date startOfToday=DateUtil.getStartOfToday(calendar);
  Date endOfToday=DateUtil.getEndOfToday(calendar);
  calendar.setTime(startOfToday);
  calendar.add(Calendar.DATE,-7);
  Date startOfWeek=calendar.getTime();
  Duration durationDay=getResourceManager().getLoggedTimeForUser(user,startOfToday,endOfToday);
  add(new Label(""String_Node_Str"",durationDay == null ? ""String_Node_Str"" : durationDay.toString()));
  Duration durationWeek=getResourceManager().getLoggedTimeForUser(user,startOfWeek,endOfToday);
  add(new Label(""String_Node_Str"",durationWeek == null ? ""String_Node_Str"" : durationWeek.toString()));
  add(new ListView<DurationWorked>(""String_Node_Str"",getResourceManager().getDurationWorkedForUser(user,startOfWeek,endOfToday)){
    protected void populateItem(    ListItem<DurationWorked> listItem){
      DurationWorked worked=listItem.getModelObject();
      if (worked.getIssue() == null) {
        listItem.setVisible(false);
        return;
      }
      WebMarkupContainer workedTitle=new WebMarkupContainer(""String_Node_Str"");
      listItem.add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
      String time=""String_Node_Str"";
      if (worked.getWorked() != null) {
        time=worked.getWorked().toString();
      }
      workedTitle.add(new Label(""String_Node_Str"",time));
      Issue related=worked.getIssue();
      PageParameters params=new PageParameters();
      params.put(""String_Node_Str"",related.getProject());
      params.put(""String_Node_Str"",related.getId());
      BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
      String issueId=related.getProject().getId() + ""String_Node_Str"" + related.getId();
      link.add(new Label(""String_Node_Str"",""String_Node_Str"" + issueId));
      workedTitle.add(link.add(new IssueStatusModifier(""String_Node_Str"",related)));
      workedTitle.add(new Label(""String_Node_Str"",related.getSummary()).add(new IssueStatusModifier(""String_Node_Str"",related)));
      workedTitle.add(new Label(""String_Node_Str"",worked.getUser().getFullnameOrUsername()));
      workedTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(worked.getDay(),((HeadsUpSession)getSession()).getTimeZone())));
      listItem.add(workedTitle);
    }
  }
.setVisible(showTools && timeEnabled));
  add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
  add(new HistoryPanel(""String_Node_Str"",getEventsForUser(user),true));
}",0.9995375080936084
189189,"public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getTypes()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getTypeName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  add(new MilestoneDropDownChoice(""String_Node_Str"",issue.getProject(),issue.getMilestone()).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  final DropDownChoice<User> assignees=new UserDropDownChoice(""String_Node_Str"",issue.getAssignee());
  assignees.setNullValid(true);
  add(assignees);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  assignToMe.setVisible(issue.getStatus() < Issue.STATUS_RESOLVED && !((HeadsUpSession)getSession()).getUser().equals(issue.getAssignee()));
  add(assignToMe.setDefaultFormProcessing(false));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}","public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new IssueTypeDropDownChoice(""String_Node_Str"",IssueUtils.getTypes()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  add(new MilestoneDropDownChoice(""String_Node_Str"",issue.getProject(),issue.getMilestone()).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  final DropDownChoice<User> assignees=new UserDropDownChoice(""String_Node_Str"",issue.getAssignee());
  assignees.setNullValid(true);
  add(assignees);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  assignToMe.setVisible(issue.getStatus() < Issue.STATUS_RESOLVED && !((HeadsUpSession)getSession()).getUser().equals(issue.getAssignee()));
  add(assignToMe.setDefaultFormProcessing(false));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}",0.9594240837696336
189190,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  if (getProject().equals(StoredProject.getDefault())) {
    requirePermission(new ProjectListPermission());
  }
  filter=new IssueFilterPanel(""String_Node_Str"",getSession().getUser());
  add(filter);
  SortableEntityProvider<Issue> provider;
  if (getProject().equals(StoredProject.getDefault())) {
    provider=IssuesApplication.getIssueProvider(filter);
  }
 else {
    provider=IssuesApplication.getIssueProviderForProject(getProject(),filter);
  }
  add(new IssueListPanel(""String_Node_Str"",provider,this,!getProject().equals(StoredProject.getDefault()),false));
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  if (getProject().equals(StoredProject.getDefault())) {
    requirePermission(new ProjectListPermission());
  }
  filter=new IssueFilterPanel(""String_Node_Str"",getSession().getUser());
  add(filter);
  SortableEntityProvider<Issue> provider;
  if (getProject().equals(StoredProject.getDefault())) {
    provider=IssuesApplication.getIssueProvider(filter);
  }
 else {
    provider=IssuesApplication.getIssueProviderForProject(getProject(),filter);
  }
  add(new IssueListPanel(""String_Node_Str"",provider,this,!getProject().equals(StoredProject.getDefault()),false,null));
}",0.99637943519189
189191,"public void layout(Form<Milestone> form){
  form.setModel(new CompoundPropertyModel<Milestone>(milestone));
  form.add(new Label(""String_Node_Str"",milestone.getProject().getAlias()));
  if (creating) {
    form.add(new TextField<String>(""String_Node_Str"").add(new IdPatternValidator()).setRequired(true));
    form.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    form.add(new Label(""String_Node_Str"",milestone.getName()));
    form.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  form.add(new DateTimeWithTimeZoneField(""String_Node_Str""));
  form.add(new DateTimeWithTimeZoneField(""String_Node_Str""));
  form.add(new TextArea(""String_Node_Str""));
}","public void layout(final Form<Milestone> form){
  form.setModel(new CompoundPropertyModel<Milestone>(milestone));
  form.add(new Label(""String_Node_Str"",milestone.getProject().getAlias()));
  if (creating) {
    form.add(new TextField<String>(""String_Node_Str"").add(new IdPatternValidator()).setRequired(true));
    form.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    form.add(new Label(""String_Node_Str"",milestone.getName()));
    form.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  form.add(new DateTimeWithTimeZoneField(""String_Node_Str""));
  form.add(new DateTimeWithTimeZoneField(""String_Node_Str"",new PropertyModel<Date>(new PropertyModel<Milestone>(this,""String_Node_Str""),""String_Node_Str""){
    @Override public void setObject(    Date object){
      if (!creating) {
        milestone=(Milestone)((HibernateStorage)Manager.getStorageInstance()).getHibernateSession().merge(milestone);
        form.getModel().setObject(milestone);
      }
      super.setObject(object);
    }
  }
));
  form.add(new TextArea(""String_Node_Str""));
}",0.7807308970099668
189192,"protected void loadFromInfoFile(File infoFile){
  BufferedReader in=null;
  try {
    if (infoFile != null && infoFile.exists()) {
      Manager.getLogger(getClass().getName()).info(""String_Node_Str"" + infoFile.getPath());
      boolean foundShortString=false;
      platform=XCODE_PLATFORM_MACOSX;
      String line;
      in=new BufferedReader(new InputStreamReader(new FileInputStream(infoFile),""String_Node_Str""));
      while ((line=in.readLine()) != null) {
        if (line.contains(""String_Node_Str"")) {
          foundShortString=true;
          String versionString=in.readLine();
          int start=versionString.indexOf('>') + 1;
          int stop=versionString.indexOf('<',start);
          this.version=versionString.substring(start,stop);
        }
 else         if (line.contains(""String_Node_Str"")) {
          if (!foundShortString) {
            String versionString=in.readLine();
            int start=versionString.indexOf('>') + 1;
            int stop=versionString.indexOf('<',start);
            this.version=versionString.substring(start,stop);
          }
        }
 else         if (line.contains(""String_Node_Str"")) {
          String bundleString=in.readLine();
          int start=bundleString.indexOf('>') + 1;
          int stop=bundleString.indexOf('<',start);
          this.bundleId=bundleString.substring(start,stop);
        }
 else         if (line.contains(""String_Node_Str"")) {
          platform=XCODE_PLATFORM_IOS;
        }
      }
    }
  }
 catch (  IOException e) {
    Manager.getLogger(getClass().getName()).error(""String_Node_Str"",e);
  }
 finally {
    if (in != null) {
      IOUtil.close(in);
    }
  }
}","protected void loadFromInfoFile(File infoFile,Map<String,String> variables){
  BufferedReader in=null;
  try {
    if (infoFile != null && infoFile.exists()) {
      Manager.getLogger(getClass().getName()).info(""String_Node_Str"" + infoFile.getPath());
      boolean foundShortString=false;
      platform=XCODE_PLATFORM_MACOSX;
      String line;
      in=new BufferedReader(new InputStreamReader(new FileInputStream(infoFile),""String_Node_Str""));
      while ((line=in.readLine()) != null) {
        if (line.contains(""String_Node_Str"")) {
          foundShortString=true;
          String versionString=in.readLine();
          int start=versionString.indexOf('>') + 1;
          int stop=versionString.indexOf('<',start);
          this.version=replaceVariables(versionString.substring(start,stop),variables);
        }
 else         if (line.contains(""String_Node_Str"")) {
          if (!foundShortString) {
            String versionString=in.readLine();
            int start=versionString.indexOf('>') + 1;
            int stop=versionString.indexOf('<',start);
            this.version=replaceVariables(versionString.substring(start,stop),variables);
          }
        }
 else         if (line.contains(""String_Node_Str"")) {
          String bundleString=in.readLine();
          int start=bundleString.indexOf('>') + 1;
          int stop=bundleString.indexOf('<',start);
          this.bundleId=replaceVariables(bundleString.substring(start,stop),variables);
        }
 else         if (line.contains(""String_Node_Str"")) {
          platform=XCODE_PLATFORM_IOS;
        }
      }
    }
  }
 catch (  IOException e) {
    Manager.getLogger(getClass().getName()).error(""String_Node_Str"",e);
  }
 finally {
    if (in != null) {
      IOUtil.close(in);
    }
  }
}",0.9589280512671132
189193,"protected String getBuildConfigurationListForTarget(File file,String target){
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new FileInputStream(file)));
    String line;
    while ((line=in.readLine()) != null && !line.contains(target)) {
    }
    while ((line=in.readLine()) != null && !line.contains(""String_Node_Str"")) {
    }
    return getProjectFileValue(line);
  }
 catch (  IOException e) {
    Manager.getLogger(getClass().getName()).error(""String_Node_Str"",e);
  }
 finally {
    if (in != null) {
      IOUtil.close(in);
    }
  }
  return null;
}","protected String getBuildConfigurationListForTarget(File file,String target,Map<String,String> variables){
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new FileInputStream(file)));
    String line;
    while ((line=in.readLine()) != null && !line.contains(target)) {
    }
    while ((line=in.readLine()) != null && !line.contains(""String_Node_Str"")) {
    }
    return getProjectFileValue(line,variables);
  }
 catch (  IOException e) {
    Manager.getLogger(getClass().getName()).error(""String_Node_Str"",e);
  }
 finally {
    if (in != null) {
      IOUtil.close(in);
    }
  }
  return null;
}",0.96826688364524
189194,"protected void loadFromProjectFile(File projectFile){
  Manager.getLogger(getClass().getName()).info(""String_Node_Str"" + projectFile.getPath());
  String firstTarget=getFirstTarget(projectFile);
  String buildConfigurationList=getBuildConfigurationListForTarget(projectFile,firstTarget);
  String configuration=getFirstBuildConfigurationInList(projectFile,buildConfigurationList);
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new FileInputStream(projectFile),""String_Node_Str""));
    String line;
    while ((line=in.readLine()) != null && !line.contains(configuration)) {
    }
    String infoFileName=null;
    while ((line=in.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        infoFileName=getProjectFileValue(line);
      }
 else       if (line.contains(""String_Node_Str"")) {
        name=getProjectFileValue(line);
        break;
      }
    }
    IOUtil.close(in);
    in=null;
    File infoFile=null;
    if (infoFileName != null) {
      infoFile=new File(projectFile.getParentFile().getParentFile(),infoFileName);
    }
 else {
      for (      File possible : projectFile.getParentFile().getParentFile().listFiles()) {
        if (possible.getName().endsWith(""String_Node_Str"")) {
          infoFile=possible;
          break;
        }
      }
    }
    loadFromInfoFile(infoFile);
    File podFile=new File(projectFile.getParentFile().getParentFile(),""String_Node_Str"");
    loadFromPodFile(podFile);
  }
 catch (  IOException e) {
    Manager.getLogger(getClass().getName()).error(""String_Node_Str"",e);
  }
 finally {
    if (in != null) {
      IOUtil.close(in);
    }
  }
}","protected void loadFromProjectFile(File projectFile){
  Manager.getLogger(getClass().getName()).info(""String_Node_Str"" + projectFile.getPath());
  Map<String,String> variables=new HashMap<String,String>();
  String firstTarget=getFirstTarget(projectFile);
  String buildConfigurationList=getBuildConfigurationListForTarget(projectFile,firstTarget,variables);
  String configuration=getFirstBuildConfigurationInList(projectFile,buildConfigurationList);
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(new FileInputStream(projectFile),""String_Node_Str""));
    String line;
    while ((line=in.readLine()) != null && !line.contains(configuration)) {
      if (line.contains(""String_Node_Str"")) {
        String next=in.readLine();
        int start=next.indexOf(""String_Node_Str"");
        if (start == -1) {
          continue;
        }
        int end=next.indexOf(""String_Node_Str"",start);
        String targetName=next.substring(start + 2,end).trim();
        variables.put(""String_Node_Str"",targetName);
      }
    }
    String infoFileName=null;
    while ((line=in.readLine()) != null) {
      if (line.contains(""String_Node_Str"")) {
        infoFileName=getProjectFileValue(line,variables);
      }
 else       if (line.contains(""String_Node_Str"")) {
        name=getProjectFileValue(line,variables);
        variables.put(""String_Node_Str"",replaceVariables(name,variables));
        break;
      }
    }
    IOUtil.close(in);
    in=null;
    File infoFile=null;
    if (infoFileName != null) {
      infoFile=new File(projectFile.getParentFile().getParentFile(),infoFileName);
    }
 else {
      for (      File possible : projectFile.getParentFile().getParentFile().listFiles()) {
        if (possible.getName().endsWith(""String_Node_Str"")) {
          infoFile=possible;
          break;
        }
      }
    }
    loadFromInfoFile(infoFile,variables);
    File podFile=new File(projectFile.getParentFile().getParentFile(),""String_Node_Str"");
    loadFromPodFile(podFile);
  }
 catch (  IOException e) {
    Manager.getLogger(getClass().getName()).error(""String_Node_Str"",e);
  }
 finally {
    if (in != null) {
      IOUtil.close(in);
    }
  }
}",0.8583311671432284
189195,"protected String replaceVariables(String in){
  return in.replace(""String_Node_Str"",""String_Node_Str"");
}","protected String replaceVariables(String in,Map<String,String> variables){
  String ret=in.replace(""String_Node_Str"",""String_Node_Str"");
  for (  String key : variables.keySet()) {
    ret=ret.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",variables.get(key));
    ret=ret.replaceAll(""String_Node_Str"" + key + ""String_Node_Str"",getRFC1034(variables.get(key)));
  }
  return ret;
}",0.2352941176470588
189196,"private String getProjectFileValue(String line){
  String ret;
  int start=line.indexOf(""String_Node_Str"") + 1;
  int end=line.indexOf(""String_Node_Str"",start);
  if (end == -1) {
    ret=line.substring(start);
  }
 else {
    ret=line.substring(start,end);
  }
  ret=ret.trim();
  if (ret.length() > 2) {
    if (ret.charAt(0) == '""' && ret.charAt(ret.length() - 1) == '""') {
      ret=ret.substring(1,ret.length() - 1);
    }
  }
  return stripComments(replaceVariables(ret));
}","private String getProjectFileValue(String line,Map<String,String> variables){
  String ret;
  int start=line.indexOf(""String_Node_Str"") + 1;
  int end=line.indexOf(""String_Node_Str"",start);
  if (end == -1) {
    ret=line.substring(start);
  }
 else {
    ret=line.substring(start,end);
  }
  ret=ret.trim();
  if (ret.length() > 2) {
    if (ret.charAt(0) == '""' && ret.charAt(ret.length() - 1) == '""') {
      ret=ret.substring(1,ret.length() - 1);
    }
  }
  return stripComments(replaceVariables(ret,variables));
}",0.960960960960961
189197,"public String getLink(){
  int start=getBody().indexOf(""String_Node_Str"") + 6;
  int end=getBody().indexOf(""String_Node_Str"",start);
  return getBody().substring(start,end);
}","public String getLink(){
  int start=getBody().indexOf(""String_Node_Str"") + 6;
  int end=getBody().indexOf(""String_Node_Str"",start);
  if (start == -1 || end < start) {
    return null;
  }
  return getBody().substring(start,end);
}",0.85995085995086
189198,"public BuildStatus(Build latest){
  if (latest == null) {
    return;
  }
  this.projectId=latest.getProject().getId();
  this.status=latest.getStatus();
  this.icon=getIconForBuild(latest);
  this.latestBuild=latest;
  if (latest.getStatus() != Build.BUILD_SUCCEEDED) {
    this.latestSuccessfulBuild=CIApplication.getLatestPassedBuildForProject(getProject());
  }
  getDownloadDetailsForProject(latest.getProject());
}","public BuildStatus(Build latest){
  if (latest == null) {
    return;
  }
  this.projectId=latest.getProject().getId();
  this.status=latest.getStatus();
  this.icon=getIconForBuild(latest);
  this.latestBuild=latest;
  if (latest.getStatus() != Build.BUILD_SUCCEEDED) {
    this.latestSuccessfulBuild=CIApplication.getLatestPassedBuildForProject(latest.getProject());
  }
  getDownloadDetailsForProject(latest.getProject());
}",0.9917355371900828
189199,"@Override public Project getProject(){
  if (getSession().getProject() != null) {
    return getSession().getProject();
  }
  return super.getProject();
}","@Override public Project getProject(){
  try {
    if (getSession().getProject() != null) {
      return getSession().getProject();
    }
  }
 catch (  java.lang.IllegalStateException e) {
  }
  return super.getProject();
}",0.7480106100795756
189200,"public static String markUp(String in,Project project){
  if (in == null) {
    return null;
  }
  StringBuilder ret=new StringBuilder(in.length());
  StringTokenizer tokenizer=new StringTokenizer(in,""String_Node_Str"",true);
  Map<String,LinkProvider> providers=Manager.getInstance().getLinkProviders();
  while (tokenizer.hasMoreTokens()) {
    String next=tokenizer.nextToken();
    if (next.indexOf(':') != -1) {
      if (next.endsWith(""String_Node_Str"")) {
        next=next.substring(0,next.length() - 1);
      }
      String link=getLink(next,project,providers);
      boolean broken=isLinkBroken(next,project,providers);
      if (link == null) {
        ret.append(encode(next));
      }
 else {
        ret.append(""String_Node_Str"");
        ret.append(link);
        ret.append(""String_Node_Str"");
        if (broken) {
          ret.append(""String_Node_Str"");
          ret.append(BROKEN_LINK_HINT);
          ret.append(""String_Node_Str"");
        }
        ret.append(""String_Node_Str"");
        ret.append(encode(next));
        ret.append(""String_Node_Str"");
      }
      if (broken) {
        ret.append(""String_Node_Str"");
        ret.append(BROKEN_LINK_HINT);
        ret.append(""String_Node_Str"");
      }
    }
 else {
      ret.append(encode(next));
    }
  }
  return ret.toString();
}","public static String markUp(String in,Project project){
  if (in == null) {
    return null;
  }
  StringBuilder ret=new StringBuilder(in.length());
  StringTokenizer tokenizer=new StringTokenizer(in,""String_Node_Str"",true);
  Map<String,LinkProvider> providers=Manager.getInstance().getLinkProviders();
  while (tokenizer.hasMoreTokens()) {
    String next=tokenizer.nextToken();
    if (isValidLink(next)) {
      if (next.endsWith(""String_Node_Str"")) {
        next=next.substring(0,next.length() - 1);
      }
      String link=getLink(next,project,providers);
      boolean broken=isLinkBroken(next,project,providers);
      if (link == null) {
        ret.append(encode(next));
      }
 else {
        ret.append(""String_Node_Str"");
        ret.append(link);
        ret.append(""String_Node_Str"");
        if (broken) {
          ret.append(""String_Node_Str"");
          ret.append(BROKEN_LINK_HINT);
          ret.append(""String_Node_Str"");
        }
        ret.append(""String_Node_Str"");
        ret.append(encode(next));
        ret.append(""String_Node_Str"");
      }
      if (broken) {
        ret.append(""String_Node_Str"");
        ret.append(BROKEN_LINK_HINT);
        ret.append(""String_Node_Str"");
      }
    }
 else {
      ret.append(encode(next));
    }
  }
  return ret.toString();
}",0.9877582249426168
189201,"public void setConfigurationItem(String name,String value){
  Session session=getHibernateSession();
  Transaction tx=session.beginTransaction();
  StoredConfigurationItem item=(StoredConfigurationItem)session.createQuery(""String_Node_Str"" + name + ""String_Node_Str"").uniqueResult();
  boolean requiresReload=false;
  if (item == null) {
    item=new StoredConfigurationItem(name,value);
    requiresReload=true;
  }
 else {
    item.setValue(value);
  }
  session.saveOrUpdate(item);
  tx.commit();
  if (requiresReload) {
    reloadGlobalConfiguration();
  }
}","public void setConfigurationItem(String name,String value){
  Session session=getHibernateSession();
  Transaction tx=session.beginTransaction();
  StoredConfigurationItem item=(StoredConfigurationItem)session.createQuery(""String_Node_Str"" + name + ""String_Node_Str"").uniqueResult();
  boolean requiresReload=false;
  if (item == null) {
    item=new StoredConfigurationItem(name,value);
    requiresReload=true;
  }
 else {
    item.setValue(value);
  }
  session.saveOrUpdate(item);
  tx.commit();
}",0.942615239887112
189202,"protected void submitChild(Comment comment){
  boolean timeEnabled=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  getIssue().setResolution(resolution);
  if (duplicate != 0) {
    Issue dupe=IssuesApplication.getIssue(duplicate,duplicateProject);
    IssueRelationship relationship=new IssueRelationship(getIssue(),dupe,IssueRelationship.TYPE_DUPLICATE);
    ((HibernateStorage)getStorage()).save(relationship);
    getIssue().getRelationships().add(relationship);
  }
  if (timeBurndown) {
    if (timeEnabled) {
      DurationWorked worked=new DurationWorked();
      worked.setWorked(additionalTime);
      worked.setUpdatedRequired(new Duration(0));
      worked.setDay(new Date());
      if (willChildConsumeComment()) {
        worked.setComment(comment);
      }
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
      getIssue().setTimeRequired(new Duration(0));
    }
  }
 else {
    getIssue().setTimeRequired(additionalTime);
    if (timeEnabled && originalTime != null && additionalTime.getHours() > originalTime.getHours()) {
      double hours=additionalTime.getHours() - originalTime.getHours();
      DurationWorked worked=new DurationWorked();
      worked.setWorked(new Duration(hours));
      worked.setDay(new Date());
      if (willChildConsumeComment()) {
        worked.setComment(comment);
      }
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
    }
  }
  getIssue().setStatus(Issue.STATUS_RESOLVED);
}","protected void submitChild(Comment comment){
  boolean timeEnabled=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  getIssue().setResolution(resolution);
  if (duplicate != 0) {
    Issue dupe=IssuesApplication.getIssue(duplicate,duplicateProject);
    IssueRelationship relationship=new IssueRelationship(getIssue(),dupe,IssueRelationship.TYPE_DUPLICATE);
    ((HibernateStorage)getStorage()).save(relationship);
    getIssue().getRelationships().add(relationship);
  }
  if (timeBurndown) {
    if (timeEnabled) {
      DurationWorked worked=new DurationWorked();
      worked.setIssue(getIssue());
      worked.setWorked(additionalTime);
      worked.setUpdatedRequired(new Duration(0));
      worked.setDay(new Date());
      if (willChildConsumeComment()) {
        worked.setComment(comment);
      }
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
      getIssue().setTimeRequired(new Duration(0));
    }
  }
 else {
    getIssue().setTimeRequired(additionalTime);
    if (timeEnabled && originalTime != null && additionalTime.getHours() > originalTime.getHours()) {
      double hours=additionalTime.getHours() - originalTime.getHours();
      DurationWorked worked=new DurationWorked();
      worked.setWorked(new Duration(hours));
      worked.setDay(new Date());
      if (willChildConsumeComment()) {
        worked.setComment(comment);
      }
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
    }
  }
  getIssue().setStatus(Issue.STATUS_RESOLVED);
}",0.990450204638472
189203,"protected void exportMilestone(Milestone milestone,StringBuffer ret){
  final boolean burndown=Boolean.parseBoolean(milestone.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  ret.append(""String_Node_Str"");
  ret.append(milestone.getName());
  ret.append(""String_Node_Str"");
  if (milestone.getDueDate() == null) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(milestone.getDueDate());
  }
  ret.append(""String_Node_Str"");
  List<Date> dates=((HibernateStorage)Manager.getStorageInstance()).getResourceManager().getMilestoneDates(milestone,true);
  if (burndown) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(""String_Node_Str"");
  }
  ret.append(""String_Node_Str"");
  if (burndown) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(""String_Node_Str"");
  }
  boolean first=true;
  for (  Date date : dates) {
    if (first) {
      first=false;
      continue;
    }
    ret.append(""String_Node_Str"");
    ret.append(date);
  }
  ret.append(""String_Node_Str"");
  for (  Issue issue : milestone.getIssues()) {
    ret.append(""String_Node_Str"");
    ret.append(issue.getId());
    ret.append(""String_Node_Str"");
    ret.append(issue.getSummary().replace(""String_Node_Str"",""String_Node_Str""));
    ret.append(""String_Node_Str"");
    ret.append(IssueUtils.getStatusName(issue.getStatus()));
    ret.append(""String_Node_Str"");
    if (issue.getAssignee() != null) {
      ret.append(issue.getAssignee().getUsername());
    }
    Duration estimate=null;
    if (burndown) {
      estimate=issue.getTimeEstimate();
      Date firstDay=dates.get(0);
      for (      DurationWorked worked : issue.getTimeWorked()) {
        if (estimate == null || (worked.getDay().before(firstDay) && worked.getUpdatedRequired() != null && worked.getUpdatedRequired().getHours() < estimate.getHours())) {
          estimate=worked.getUpdatedRequired();
        }
      }
    }
    if (estimate == null) {
      estimate=new Duration(0);
      Date firstDay=dates.get(0);
      for (      DurationWorked worked : issue.getTimeWorked()) {
        if (worked.getDay().before(firstDay) && worked.getUpdatedRequired() != null && worked.getUpdatedRequired().getHours() > estimate.getHours()) {
          estimate=worked.getUpdatedRequired();
        }
      }
    }
    for (    Date date : dates) {
      Duration est=((HibernateStorage)Manager.getStorageInstance()).getResourceManager().lastEstimateForDay(issue,date);
      if (est != null) {
        estimate=est;
      }
      ret.append(""String_Node_Str"");
      ret.append(estimate.getHours());
    }
    ret.append(""String_Node_Str"");
  }
  ret.append(""String_Node_Str"");
  dates.remove(0);
  ret.append(""String_Node_Str"");
  for (  Date date : dates) {
    ret.append(""String_Node_Str"");
    ret.append(date);
  }
  ret.append(""String_Node_Str"");
  for (  Issue issue : milestone.getIssues()) {
    ret.append(issue.getId());
    ret.append(""String_Node_Str"");
    ret.append(""String_Node_Str"");
    ret.append(issue.getSummary());
    ret.append(""String_Node_Str"");
    ret.append(IssueUtils.getStatusName(issue.getStatus()));
    StringBuilder hourLog=new StringBuilder();
    double totalHours=0;
    for (    Date date : dates) {
      hourLog.append(""String_Node_Str"");
      Duration total=((HibernateStorage)Manager.getStorageInstance()).getResourceManager().totalWorkedForDay(issue,date);
      if (total != null) {
        hourLog.append(total.getHours());
        totalHours+=total.getHours();
      }
 else {
        hourLog.append(""String_Node_Str"");
      }
    }
    ret.append(""String_Node_Str"");
    if (issue.getAssignee() != null) {
      ret.append(issue.getAssignee().getUsername());
    }
    ret.append(""String_Node_Str"");
    ret.append(totalHours);
    ret.append(hourLog.toString());
    ret.append(""String_Node_Str"");
  }
  ret.append(""String_Node_Str"");
}","protected void exportMilestone(Milestone milestone,StringBuffer ret){
  final boolean burndown=Boolean.parseBoolean(milestone.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  ret.append(""String_Node_Str"");
  ret.append(milestone.getName());
  ret.append(""String_Node_Str"");
  if (milestone.getDueDate() == null) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(milestone.getDueDate());
  }
  ret.append(""String_Node_Str"");
  List<Date> dates=((HibernateStorage)Manager.getStorageInstance()).getResourceManager().getMilestoneDates(milestone,true);
  if (burndown) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(""String_Node_Str"");
  }
  ret.append(""String_Node_Str"");
  if (burndown) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(""String_Node_Str"");
  }
  boolean first=true;
  for (  Date date : dates) {
    if (first) {
      first=false;
      continue;
    }
    ret.append(""String_Node_Str"");
    ret.append(date);
  }
  ret.append(""String_Node_Str"");
  for (  Issue issue : milestone.getIssues()) {
    ret.append(""String_Node_Str"");
    ret.append(issue.getId());
    ret.append(""String_Node_Str"");
    ret.append(issue.getSummary().replace(""String_Node_Str"",""String_Node_Str""));
    ret.append(""String_Node_Str"");
    ret.append(IssueUtils.getStatusName(issue.getStatus()));
    ret.append(""String_Node_Str"");
    if (issue.getAssignee() != null) {
      ret.append(issue.getAssignee().getUsername());
    }
    Duration estimate=null;
    if (burndown) {
      estimate=issue.getTimeEstimate();
      if (dates.size() > 0) {
        Date firstDay=dates.get(0);
        for (        DurationWorked worked : issue.getTimeWorked()) {
          if (estimate == null || (worked.getDay().before(firstDay) && worked.getUpdatedRequired() != null && worked.getUpdatedRequired().getHours() < estimate.getHours())) {
            estimate=worked.getUpdatedRequired();
          }
        }
      }
    }
    if (estimate == null) {
      estimate=new Duration(0);
      if (dates.size() > 0) {
        Date firstDay=dates.get(0);
        for (        DurationWorked worked : issue.getTimeWorked()) {
          if (worked.getDay().before(firstDay) && worked.getUpdatedRequired() != null && worked.getUpdatedRequired().getHours() > estimate.getHours()) {
            estimate=worked.getUpdatedRequired();
          }
        }
      }
    }
    for (    Date date : dates) {
      Duration est=((HibernateStorage)Manager.getStorageInstance()).getResourceManager().lastEstimateForDay(issue,date);
      if (est != null) {
        estimate=est;
      }
      ret.append(""String_Node_Str"");
      ret.append(estimate.getHours());
    }
    ret.append(""String_Node_Str"");
  }
  ret.append(""String_Node_Str"");
  if (dates.size() > 0) {
    dates.remove(0);
  }
  ret.append(""String_Node_Str"");
  for (  Date date : dates) {
    ret.append(""String_Node_Str"");
    ret.append(date);
  }
  ret.append(""String_Node_Str"");
  for (  Issue issue : milestone.getIssues()) {
    ret.append(issue.getId());
    ret.append(""String_Node_Str"");
    ret.append(""String_Node_Str"");
    ret.append(issue.getSummary());
    ret.append(""String_Node_Str"");
    ret.append(IssueUtils.getStatusName(issue.getStatus()));
    StringBuilder hourLog=new StringBuilder();
    double totalHours=0;
    for (    Date date : dates) {
      hourLog.append(""String_Node_Str"");
      Duration total=((HibernateStorage)Manager.getStorageInstance()).getResourceManager().totalWorkedForDay(issue,date);
      if (total != null) {
        hourLog.append(total.getHours());
        totalHours+=total.getHours();
      }
 else {
        hourLog.append(""String_Node_Str"");
      }
    }
    ret.append(""String_Node_Str"");
    if (issue.getAssignee() != null) {
      ret.append(issue.getAssignee().getUsername());
    }
    ret.append(""String_Node_Str"");
    ret.append(totalHours);
    ret.append(hourLog.toString());
    ret.append(""String_Node_Str"");
  }
  ret.append(""String_Node_Str"");
}",0.9828542612203732
189204,"protected WorkRemainingTable(String id,final Project project,final Set<Issue> issueSet){
  super(id);
  final boolean burndown=Boolean.parseBoolean(project.getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  List<User> users=new LinkedList<User>();
  for (  Issue issue : issueSet) {
    if (issue.getAssignee() != null && !users.contains(issue.getAssignee())) {
      users.add(issue.getAssignee());
    }
    for (    DurationWorked worked : issue.getTimeWorked()) {
      if (worked.getUser() != null && !users.contains(worked.getUser())) {
        users.add(worked.getUser());
      }
    }
  }
  List<Issue> issues=new LinkedList<Issue>(issueSet);
  Collections.sort(issues,new IssueComparator());
  add(new StripedListView<User>(""String_Node_Str"",users){
    @Override protected void populateItem(    ListItem<User> listItem){
      super.populateItem(listItem);
      final User user=listItem.getModelObject();
      if (user.isHiddenInTimeTracking()) {
        listItem.setVisible(false);
        return;
      }
      listItem.add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
      int estimate=0;
      int worked=0;
      int remaining=0;
      for (      Issue issue : issueSet) {
        if (issue.getAssignee() != null && issue.getAssignee().equals(user)) {
          if (issue.getTimeEstimate() != null && issue.getTimeEstimate().getHours() > 0) {
            double e=issue.getTimeEstimate().getHours();
            estimate+=e;
            if (burndown) {
              if (issue.getTimeRequired() != null) {
                remaining+=issue.getTimeRequired().getHours();
              }
            }
 else {
              if (issue.getTimeRequired() != null) {
                double r=issue.getTimeRequired().getHours();
                double delta=e - r;
                if (delta > 0) {
                  remaining+=delta;
                }
              }
            }
          }
        }
        for (        DurationWorked dur : issue.getTimeWorked()) {
          if (user.equals(dur.getUser()) && dur.getWorked() != null) {
            worked+=dur.getWorked().getHours();
          }
        }
      }
      listItem.add(new Label(""String_Node_Str"",new Duration(estimate).toHoursWithFractionString()));
      listItem.add(new Label(""String_Node_Str"",new Duration(worked).toHoursWithFractionString()));
      listItem.add(new Label(""String_Node_Str"",new Duration(remaining).toHoursWithFractionString()));
    }
  }
);
}","protected WorkRemainingTable(String id,final Project project,final Set<Issue> issueSet){
  super(id);
  final boolean burndown=Boolean.parseBoolean(project.getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  List<User> users=new LinkedList<User>();
  for (  Issue issue : issueSet) {
    if (issue.getAssignee() != null && !users.contains(issue.getAssignee())) {
      users.add(issue.getAssignee());
    }
    for (    DurationWorked worked : issue.getTimeWorked()) {
      if (worked.getUser() != null && !users.contains(worked.getUser())) {
        users.add(worked.getUser());
      }
    }
  }
  List<Issue> issues=new LinkedList<Issue>(issueSet);
  Collections.sort(issues,new IssueComparator());
  add(new StripedListView<User>(""String_Node_Str"",users){
    @Override protected void populateItem(    ListItem<User> listItem){
      super.populateItem(listItem);
      final User user=listItem.getModelObject();
      if (user.isHiddenInTimeTracking()) {
        listItem.setVisible(false);
        return;
      }
      listItem.add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
      double estimate=0;
      double worked=0;
      double remaining=0;
      for (      Issue issue : issueSet) {
        if (issue.getAssignee() != null && issue.getAssignee().equals(user)) {
          if (issue.getTimeEstimate() != null && issue.getTimeEstimate().getHours() > 0) {
            double e=issue.getTimeEstimate().getHours();
            estimate+=e;
            if (burndown) {
              if (issue.getTimeRequired() != null) {
                remaining+=issue.getTimeRequired().getHours();
              }
            }
 else {
              if (issue.getTimeRequired() != null) {
                double r=issue.getTimeRequired().getHours();
                double delta=e - r;
                if (delta > 0) {
                  remaining+=delta;
                }
              }
            }
          }
        }
        for (        DurationWorked dur : issue.getTimeWorked()) {
          if (user.equals(dur.getUser()) && dur.getWorked() != null) {
            worked+=dur.getWorked().getHours();
          }
        }
      }
      listItem.add(new Label(""String_Node_Str"",new Duration(estimate).toHoursWithFractionString()));
      listItem.add(new Label(""String_Node_Str"",new Duration(worked).toHoursWithFractionString()));
      listItem.add(new Label(""String_Node_Str"",new Duration(remaining).toHoursWithFractionString()));
    }
  }
);
}",0.9945837512537612
189205,"@Override protected void populateItem(ListItem<User> listItem){
  super.populateItem(listItem);
  final User user=listItem.getModelObject();
  if (user.isHiddenInTimeTracking()) {
    listItem.setVisible(false);
    return;
  }
  listItem.add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
  int estimate=0;
  int worked=0;
  int remaining=0;
  for (  Issue issue : issueSet) {
    if (issue.getAssignee() != null && issue.getAssignee().equals(user)) {
      if (issue.getTimeEstimate() != null && issue.getTimeEstimate().getHours() > 0) {
        double e=issue.getTimeEstimate().getHours();
        estimate+=e;
        if (burndown) {
          if (issue.getTimeRequired() != null) {
            remaining+=issue.getTimeRequired().getHours();
          }
        }
 else {
          if (issue.getTimeRequired() != null) {
            double r=issue.getTimeRequired().getHours();
            double delta=e - r;
            if (delta > 0) {
              remaining+=delta;
            }
          }
        }
      }
    }
    for (    DurationWorked dur : issue.getTimeWorked()) {
      if (user.equals(dur.getUser()) && dur.getWorked() != null) {
        worked+=dur.getWorked().getHours();
      }
    }
  }
  listItem.add(new Label(""String_Node_Str"",new Duration(estimate).toHoursWithFractionString()));
  listItem.add(new Label(""String_Node_Str"",new Duration(worked).toHoursWithFractionString()));
  listItem.add(new Label(""String_Node_Str"",new Duration(remaining).toHoursWithFractionString()));
}","@Override protected void populateItem(ListItem<User> listItem){
  super.populateItem(listItem);
  final User user=listItem.getModelObject();
  if (user.isHiddenInTimeTracking()) {
    listItem.setVisible(false);
    return;
  }
  listItem.add(new Label(""String_Node_Str"",user.getFullnameOrUsername()));
  double estimate=0;
  double worked=0;
  double remaining=0;
  for (  Issue issue : issueSet) {
    if (issue.getAssignee() != null && issue.getAssignee().equals(user)) {
      if (issue.getTimeEstimate() != null && issue.getTimeEstimate().getHours() > 0) {
        double e=issue.getTimeEstimate().getHours();
        estimate+=e;
        if (burndown) {
          if (issue.getTimeRequired() != null) {
            remaining+=issue.getTimeRequired().getHours();
          }
        }
 else {
          if (issue.getTimeRequired() != null) {
            double r=issue.getTimeRequired().getHours();
            double delta=e - r;
            if (delta > 0) {
              remaining+=delta;
            }
          }
        }
      }
    }
    for (    DurationWorked dur : issue.getTimeWorked()) {
      if (user.equals(dur.getUser()) && dur.getWorked() != null) {
        worked+=dur.getWorked().getHours();
      }
    }
  }
  listItem.add(new Label(""String_Node_Str"",new Duration(estimate).toHoursWithFractionString()));
  listItem.add(new Label(""String_Node_Str"",new Duration(worked).toHoursWithFractionString()));
  listItem.add(new Label(""String_Node_Str"",new Duration(remaining).toHoursWithFractionString()));
}",0.9911271771278344
189206,"public BuildPanel(String id,final Build build){
  super(id);
  add(new Label(""String_Node_Str"",String.valueOf(build.getId())));
  if (build.getConfigName() == null) {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",build.getConfigName()));
  }
  add(new Label(""String_Node_Str"",new FormattedDateModel(build.getStartTime(),((HeadsUpSession)getSession()).getTimeZone())));
  add(new Label(""String_Node_Str"",new FormattedDurationModel(build.getStartTime(),build.getEndTime())));
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",build.getProject().getId());
  params.add(""String_Node_Str"",build.getRevision());
  Link revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
  add(revisionLink.add(new Label(""String_Node_Str"",build.getRevision())));
  String icon;
switch (build.getStatus()) {
case Build.BUILD_SUCCEEDED:
    icon=""String_Node_Str"";
  break;
case Build.BUILD_FAILED:
case Build.BUILD_CANCELLED:
icon=""String_Node_Str"";
break;
default :
icon=""String_Node_Str"";
}
add(new Image(""String_Node_Str"",new ResourceReference(View.class,icon)));
add(new Label(""String_Node_Str"",String.valueOf(build.getTests())).add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
add(new Label(""String_Node_Str"",String.valueOf(build.getFailures())).add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
add(new Label(""String_Node_Str"",String.valueOf(build.getErrors())).add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",""String_Node_Str"" + build.getId());
WebMarkupContainer warningCell=new WebMarkupContainer(""String_Node_Str"");
Link warningLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
warningCell.add(warningLink.add(new Label(""String_Node_Str"",String.valueOf(build.getWarnings()))));
add(warningCell.add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
Project root=build.getProject();
while (root.getParent() != null) {
root=root.getParent();
}
Build passed=CIApplication.getPreviousLastChangePassed(build,build.getProject());
List<ChangeSet> changes;
if (passed != null) {
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",String.valueOf(passed.getId()));
revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
add(revisionLink.add(new Label(""String_Node_Str"",String.valueOf(passed.getId()))));
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
changes=Manager.getInstance().getScmService().getChangesBetweenRevisions(passed.getRevision(),build.getRevision(),root);
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",passed.getRevision());
revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
add(revisionLink.add(new Label(""String_Node_Str"",passed.getRevision())));
}
 else {
changes=new ArrayList<ChangeSet>();
add(new Label(""String_Node_Str"",""String_Node_Str""));
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
add(new StripedListView<ChangeSet>(""String_Node_Str"",changes){
@Override protected void populateItem(ListItem<ChangeSet> listItem){
super.populateItem(listItem);
ChangeSet set=listItem.getModelObject();
listItem.setModel(new CompoundPropertyModel<ChangeSet>(set));
String author=set.getAuthor();
User user=Manager.getSecurityInstance().getUserByUsernameEmailOrFullname(author);
if (user != null) {
author=user.getFullnameOrUsername();
}
PageParameters params=new PageParameters();
if (user != null) {
params.add(""String_Node_Str"",user.getUsername());
Link authorLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
authorLink.add(new Label(""String_Node_Str"",author));
listItem.add(authorLink);
listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
 else {
listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
listItem.add(new Label(""String_Node_Str"",author));
}
listItem.add(new Label(""String_Node_Str""));
if (set instanceof TransactionalScmChangeSet) {
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",((TransactionalScmChangeSet)set).getRevision());
Link revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
revisionLink.add(new Label(""String_Node_Str""));
listItem.add(revisionLink);
}
 else {
listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
listItem.add(new Label(""String_Node_Str"",new FormattedDurationModel(set.getDate(),new Date())));
}
}
.setVisible(changes.size() > 0));
WebMarkupContainer noChanges=new WebMarkupContainer(""String_Node_Str"");
if (passed != null) {
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",String.valueOf(passed.getId()));
revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
noChanges.add(revisionLink.add(new Label(""String_Node_Str"",String.valueOf(passed.getId()))));
noChanges.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
 else {
noChanges.add(new Label(""String_Node_Str"",""String_Node_Str""));
noChanges.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
add(noChanges.setVisible(changes.size() == 0));
}","public BuildPanel(String id,final Build build){
  super(id);
  add(new Label(""String_Node_Str"",String.valueOf(build.getId())));
  if (build.getConfigName() == null) {
    add(new Label(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    add(new Label(""String_Node_Str"",build.getConfigName()));
  }
  add(new Label(""String_Node_Str"",new FormattedDateModel(build.getStartTime(),((HeadsUpSession)getSession()).getTimeZone())));
  add(new Label(""String_Node_Str"",new FormattedDurationModel(build.getStartTime(),build.getEndTime())));
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",build.getProject().getId());
  params.add(""String_Node_Str"",build.getRevision());
  Link revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
  add(revisionLink.add(new Label(""String_Node_Str"",build.getRevision())));
  String icon;
switch (build.getStatus()) {
case Build.BUILD_SUCCEEDED:
    icon=""String_Node_Str"";
  break;
case Build.BUILD_FAILED:
case Build.BUILD_CANCELLED:
icon=""String_Node_Str"";
break;
default :
icon=""String_Node_Str"";
}
add(new Image(""String_Node_Str"",new ResourceReference(View.class,icon)));
add(new Label(""String_Node_Str"",String.valueOf(build.getTests())).add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
WebMarkupContainer failError=new WebMarkupContainer(""String_Node_Str"");
failError.add(new Label(""String_Node_Str"",String.valueOf(build.getFailures())));
failError.add(new Label(""String_Node_Str"",String.valueOf(build.getErrors())));
add(failError.add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",""String_Node_Str"" + build.getId());
WebMarkupContainer warningCell=new WebMarkupContainer(""String_Node_Str"");
Link warningLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
warningCell.add(warningLink.add(new Label(""String_Node_Str"",String.valueOf(build.getWarnings()))));
add(warningCell.add(new CITestStatusModifier(""String_Node_Str"",build,""String_Node_Str"")));
Project root=build.getProject();
while (root.getParent() != null) {
root=root.getParent();
}
Build passed=CIApplication.getPreviousLastChangePassed(build,build.getProject());
List<ChangeSet> changes;
if (passed != null) {
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",String.valueOf(passed.getId()));
revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
add(revisionLink.add(new Label(""String_Node_Str"",String.valueOf(passed.getId()))));
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
changes=Manager.getInstance().getScmService().getChangesBetweenRevisions(passed.getRevision(),build.getRevision(),root);
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",passed.getRevision());
revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
add(revisionLink.add(new Label(""String_Node_Str"",passed.getRevision())));
}
 else {
changes=new ArrayList<ChangeSet>();
add(new Label(""String_Node_Str"",""String_Node_Str""));
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
add(new StripedListView<ChangeSet>(""String_Node_Str"",changes){
@Override protected void populateItem(ListItem<ChangeSet> listItem){
super.populateItem(listItem);
ChangeSet set=listItem.getModelObject();
listItem.setModel(new CompoundPropertyModel<ChangeSet>(set));
String author=set.getAuthor();
User user=Manager.getSecurityInstance().getUserByUsernameEmailOrFullname(author);
if (user != null) {
author=user.getFullnameOrUsername();
}
PageParameters params=new PageParameters();
if (user != null) {
params.add(""String_Node_Str"",user.getUsername());
Link authorLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
authorLink.add(new Label(""String_Node_Str"",author));
listItem.add(authorLink);
listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
 else {
listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
listItem.add(new Label(""String_Node_Str"",author));
}
listItem.add(new Label(""String_Node_Str""));
if (set instanceof TransactionalScmChangeSet) {
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",((TransactionalScmChangeSet)set).getRevision());
Link revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
revisionLink.add(new Label(""String_Node_Str""));
listItem.add(revisionLink);
}
 else {
listItem.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
listItem.add(new Label(""String_Node_Str"",new FormattedDurationModel(set.getDate(),new Date())));
}
}
.setVisible(changes.size() > 0));
WebMarkupContainer noChanges=new WebMarkupContainer(""String_Node_Str"");
if (passed != null) {
params=new PageParameters();
params.add(""String_Node_Str"",build.getProject().getId());
params.add(""String_Node_Str"",String.valueOf(passed.getId()));
revisionLink=new BookmarkablePageLink(""String_Node_Str"",RenderUtil.getPageClass(""String_Node_Str""),params);
noChanges.add(revisionLink.add(new Label(""String_Node_Str"",String.valueOf(passed.getId()))));
noChanges.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
 else {
noChanges.add(new Label(""String_Node_Str"",""String_Node_Str""));
noChanges.add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
add(noChanges.setVisible(changes.size() == 0));
}",0.9840668331754372
189207,"public String getObject(){
  if (type.equals(""String_Node_Str"")) {
    if (build.getTests() > 0) {
      return className + ""String_Node_Str"";
    }
    return className + ""String_Node_Str"";
  }
  if (type.equals(""String_Node_Str"")) {
    if (build.getFailures() > 0) {
      return className + ""String_Node_Str"";
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (build.getErrors() > 0) {
      return className + ""String_Node_Str"";
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (build.getWarnings() > 0) {
      return className + ""String_Node_Str"";
    }
  }
  return className + ""String_Node_Str"";
}","public String getObject(){
  if (type.equals(""String_Node_Str"")) {
    if (build.getTests() > 0) {
      return className + ""String_Node_Str"";
    }
    return className + ""String_Node_Str"";
  }
  if (type.equals(""String_Node_Str"")) {
    if (build.getFailures() > 0) {
      return className + ""String_Node_Str"";
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (build.getFailures() > 0 || build.getErrors() > 0) {
      return className + ""String_Node_Str"";
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (build.getErrors() > 0) {
      return className + ""String_Node_Str"";
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    if (build.getWarnings() > 0) {
      return className + ""String_Node_Str"";
    }
  }
  return className + ""String_Node_Str"";
}",0.8877980364656382
189208,"public CITestStatusModifier(final String className,final Build build,final String type){
  super(""String_Node_Str"",true,new Model<String>(){
    public String getObject(){
      if (type.equals(""String_Node_Str"")) {
        if (build.getTests() > 0) {
          return className + ""String_Node_Str"";
        }
        return className + ""String_Node_Str"";
      }
      if (type.equals(""String_Node_Str"")) {
        if (build.getFailures() > 0) {
          return className + ""String_Node_Str"";
        }
      }
 else       if (type.equals(""String_Node_Str"")) {
        if (build.getErrors() > 0) {
          return className + ""String_Node_Str"";
        }
      }
 else       if (type.equals(""String_Node_Str"")) {
        if (build.getWarnings() > 0) {
          return className + ""String_Node_Str"";
        }
      }
      return className + ""String_Node_Str"";
    }
  }
);
}","public CITestStatusModifier(final String className,final Build build,final String type){
  super(""String_Node_Str"",true,new Model<String>(){
    public String getObject(){
      if (type.equals(""String_Node_Str"")) {
        if (build.getTests() > 0) {
          return className + ""String_Node_Str"";
        }
        return className + ""String_Node_Str"";
      }
      if (type.equals(""String_Node_Str"")) {
        if (build.getFailures() > 0) {
          return className + ""String_Node_Str"";
        }
      }
 else       if (type.equals(""String_Node_Str"")) {
        if (build.getFailures() > 0 || build.getErrors() > 0) {
          return className + ""String_Node_Str"";
        }
      }
 else       if (type.equals(""String_Node_Str"")) {
        if (build.getErrors() > 0) {
          return className + ""String_Node_Str"";
        }
      }
 else       if (type.equals(""String_Node_Str"")) {
        if (build.getWarnings() > 0) {
          return className + ""String_Node_Str"";
        }
      }
      return className + ""String_Node_Str"";
    }
  }
);
}",0.9071207430340558
189209,"private void sendSubscriptions(Event event){
  String from=Manager.getStorageInstance().getGlobalConfiguration().getSmtpHost();
  if (StringUtil.isEmpty(from)) {
    from=""String_Node_Str"";
  }
  Session session=HibernateUtil.getCurrentSession();
  for (  User user : Manager.getSecurityInstance().getUsers()) {
    user=(User)session.load(StoredUser.class,user.getUsername());
    if (!user.isDisabled()) {
      continue;
    }
    if ((event.getUsername() == null || !event.getUsername().equals(user.getUsername())) && event.shouldNotify(user) && !user.isDisabled()) {
      if (!StringUtil.isEmpty(user.getEmail())) {
        getLoggerForComponent(getClass().getName()).info(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getEmail());
        try {
          ((EmailNotifier)getNotifierList().get(""String_Node_Str"").newInstance()).sendEventEmail(event,user.getEmail(),from,EmailNotifier.FooterType.Subscription);
        }
 catch (        Exception e) {
          getLoggerForComponent(getClass().getName()).error(""String_Node_Str"",e);
        }
      }
 else {
        getLoggerForComponent(getClass().getName()).warn(""String_Node_Str"" + user.getUsername());
      }
    }
  }
}","private void sendSubscriptions(Event event){
  String from=Manager.getStorageInstance().getGlobalConfiguration().getSmtpHost();
  if (StringUtil.isEmpty(from)) {
    from=""String_Node_Str"";
  }
  Session session=HibernateUtil.getCurrentSession();
  for (  User user : Manager.getSecurityInstance().getUsers()) {
    user=(User)session.load(StoredUser.class,user.getUsername());
    if (user.isDisabled()) {
      continue;
    }
    if ((event.getUsername() == null || !event.getUsername().equals(user.getUsername())) && event.shouldNotify(user)) {
      if (!StringUtil.isEmpty(user.getEmail())) {
        getLoggerForComponent(getClass().getName()).info(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getEmail());
        try {
          ((EmailNotifier)getNotifierList().get(""String_Node_Str"").newInstance()).sendEventEmail(event,user.getEmail(),from,EmailNotifier.FooterType.Subscription);
        }
 catch (        Exception e) {
          getLoggerForComponent(getClass().getName()).error(""String_Node_Str"",e);
        }
      }
 else {
        getLoggerForComponent(getClass().getName()).warn(""String_Node_Str"" + user.getUsername());
      }
    }
  }
}",0.9903320722992854
189210,"protected File getDerivedDataDirectory(Build build,File checkoutDir){
  String checkoutName=checkoutDir.getName();
  String buildHashWithDash=checkoutName.substring(checkoutName.indexOf('-'));
  File derivedData=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  for (  File derivedDataDir : derivedData.listFiles()) {
    if (isDerivedDataDirectoryForBuild(derivedDataDir,buildHashWithDash)) {
      return derivedDataDir;
    }
  }
  return null;
}","protected File getDerivedDataDirectory(Build build,File checkoutDir){
  String checkoutName=checkoutDir.getName();
  String buildHashWithDash=checkoutName.substring(checkoutName.indexOf('-'));
  File derivedData=new File(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  File[] subdirs=derivedData.listFiles();
  if (subdirs == null || subdirs.length == 0) {
    return null;
  }
  for (  File derivedDataDir : subdirs) {
    if (isDerivedDataDirectoryForBuild(derivedDataDir,buildHashWithDash)) {
      return derivedDataDir;
    }
  }
  return null;
}",0.8632395732298739
189211,"private String getProjectFileValue(String line){
  String ret;
  int start=line.indexOf(""String_Node_Str"") + 1;
  int end=line.indexOf(""String_Node_Str"",start);
  if (end == -1) {
    ret=line.substring(start);
  }
 else {
    ret=line.substring(start,end);
  }
  ret=ret.trim();
  if (ret.length() > 2) {
    if (ret.charAt(0) == '""' && ret.charAt(ret.length() - 1) == '""') {
      ret=ret.substring(1,ret.length() - 1);
    }
  }
  return stripComments(ret);
}","private String getProjectFileValue(String line){
  String ret;
  int start=line.indexOf(""String_Node_Str"") + 1;
  int end=line.indexOf(""String_Node_Str"",start);
  if (end == -1) {
    ret=line.substring(start);
  }
 else {
    ret=line.substring(start,end);
  }
  ret=ret.trim();
  if (ret.length() > 2) {
    if (ret.charAt(0) == '""' && ret.charAt(ret.length() - 1) == '""') {
      ret=ret.substring(1,ret.length() - 1);
    }
  }
  return stripComments(replaceVariables(ret));
}",0.978768577494692
189212,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final MilestoneGroup create=new MilestoneGroup(""String_Node_Str"",getProject());
  add(new EditMilestoneGroupForm(""String_Node_Str"",create,true,this){
    public void submitParent(){
      create.setCreated(new Date());
      ((MilestonesApplication)getHeadsUpApplication()).addMilestoneGroup(create);
      getHeadsUpApplication().addEvent(new CreateMilestoneGroupEvent(create,create.getProject(),CreateMilestoneGroup.this.getSession().getUser()));
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final MilestoneGroup create=new MilestoneGroup(""String_Node_Str"",getProject());
  add(new EditMilestoneGroupForm(""String_Node_Str"",create,true,this){
    public void submitParent(){
      super.submitParent();
      create.setCreated(new Date());
      ((MilestonesApplication)getHeadsUpApplication()).addMilestoneGroup(create);
      getHeadsUpApplication().addEvent(new CreateMilestoneGroupEvent(create,create.getProject(),CreateMilestoneGroup.this.getSession().getUser()));
    }
  }
);
}",0.9765886287625418
189213,"public void submitParent(){
  create.setCreated(new Date());
  ((MilestonesApplication)getHeadsUpApplication()).addMilestoneGroup(create);
  getHeadsUpApplication().addEvent(new CreateMilestoneGroupEvent(create,create.getProject(),CreateMilestoneGroup.this.getSession().getUser()));
}","public void submitParent(){
  super.submitParent();
  create.setCreated(new Date());
  ((MilestonesApplication)getHeadsUpApplication()).addMilestoneGroup(create);
  getHeadsUpApplication().addEvent(new CreateMilestoneGroupEvent(create,create.getProject(),CreateMilestoneGroup.this.getSession().getUser()));
}",0.9594594594594594
189214,"public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  name=getPageParameters().getString(""String_Node_Str"");
  MilestoneGroup group=MilestonesApplication.getMilestoneGroup(name,getProject());
  if (group == null) {
    notFoundError();
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  final MilestoneGroup finalGroup=group;
  add(new EditMilestoneGroupForm(""String_Node_Str"",finalGroup,false,this){
    public void submitParent(){
      getHeadsUpApplication().addEvent(new UpdateMilestoneGroupEvent(finalGroup,finalGroup.getProject(),EditMilestoneGroup.this.getSession().getUser()));
    }
  }
);
}","public void layout(){
  super.layout();
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  name=getPageParameters().getString(""String_Node_Str"");
  MilestoneGroup group=MilestonesApplication.getMilestoneGroup(name,getProject());
  if (group == null) {
    notFoundError();
    return;
  }
  addLink(new BookmarkableMenuLink(getPageClass(""String_Node_Str""),getPageParameters(),""String_Node_Str""));
  final MilestoneGroup finalGroup=group;
  add(new EditMilestoneGroupForm(""String_Node_Str"",finalGroup,false,this){
    public void submitParent(){
      super.submitParent();
      getHeadsUpApplication().addEvent(new UpdateMilestoneGroupEvent(finalGroup,finalGroup.getProject(),EditMilestoneGroup.this.getSession().getUser()));
    }
  }
);
}",0.9815059445178336
189215,"public void submitParent(){
  getHeadsUpApplication().addEvent(new UpdateMilestoneGroupEvent(finalGroup,finalGroup.getProject(),EditMilestoneGroup.this.getSession().getUser()));
}","public void submitParent(){
  super.submitParent();
  getHeadsUpApplication().addEvent(new UpdateMilestoneGroupEvent(finalGroup,finalGroup.getProject(),EditMilestoneGroup.this.getSession().getUser()));
}",0.93717277486911
189216,"public void layout(){
  super.layout();
  if (getProject().equals(StoredProject.getDefault())) {
    requirePermission(new ProjectListPermission());
  }
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final MilestoneFilterPanel filter=new MilestoneFilterPanel(""String_Node_Str"",getSession().getUser());
  add(filter);
  final boolean hideProject=!getProject().equals(StoredProject.getDefault());
  List<MilestoneGroup> groups=MilestonesApplication.getMilestoneGroups(getProject());
  boolean hasGroups=groups.size() > 0;
  add(new ListView<MilestoneGroup>(""String_Node_Str"",groups){
    @Override protected void populateItem(    ListItem<MilestoneGroup> listItem){
      MilestoneGroup group=listItem.getModelObject();
      PageParameters params=getProjectPageParameters();
      params.add(""String_Node_Str"",group.getName());
      BookmarkablePageLink nameLink=new BookmarkablePageLink<ViewMilestoneGroup>(""String_Node_Str"",ViewMilestoneGroup.class,params);
      nameLink.add(new Label(""String_Node_Str"",group.getName()));
      listItem.add(nameLink);
      double part=DurationWorkedUtil.getMilestoneGroupCompleteness(group);
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
      listItem.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject));
    }
  }
);
  final SortableEntityProvider<Milestone> provider;
  if (getProject().equals(StoredProject.getDefault())) {
    provider=new GroupedMilestoneProvider(null,filter);
  }
 else {
    provider=new GroupedMilestoneProvider(null,getProject(),filter);
  }
  boolean hasUngrouped=provider.size() > 0;
  add(new WebMarkupContainer(""String_Node_Str"").setVisible(hasUngrouped && hasGroups));
  add(new MilestoneListPanel(""String_Node_Str"",provider,this,hideProject).setVisible(hasUngrouped));
}","public void layout(){
  super.layout();
  if (getProject().equals(StoredProject.getDefault())) {
    requirePermission(new ProjectListPermission());
  }
  add(CSSPackageResource.getHeaderContribution(getClass(),""String_Node_Str""));
  final MilestoneFilterPanel filter=new MilestoneFilterPanel(""String_Node_Str"",getSession().getUser());
  add(filter);
  final boolean hideProject=!getProject().equals(StoredProject.getDefault());
  List<MilestoneGroup> groups=MilestonesApplication.getMilestoneGroups(getProject());
  boolean hasGroups=groups.size() > 0;
  add(new ListView<MilestoneGroup>(""String_Node_Str"",groups){
    @Override protected void populateItem(    ListItem<MilestoneGroup> listItem){
      MilestoneGroup group=listItem.getModelObject();
      PageParameters params=getProjectPageParameters();
      params.add(""String_Node_Str"",group.getName());
      BookmarkablePageLink nameLink=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
      nameLink.add(new Label(""String_Node_Str"",group.getName()));
      listItem.add(nameLink);
      double part=DurationWorkedUtil.getMilestoneGroupCompleteness(group);
      int percent=(int)(part * 100);
      Panel panel=new PercentagePanel(""String_Node_Str"",percent);
      listItem.add(panel);
      SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
      listItem.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject));
    }
  }
);
  final SortableEntityProvider<Milestone> provider;
  if (getProject().equals(StoredProject.getDefault())) {
    provider=new GroupedMilestoneProvider(null,filter);
  }
 else {
    provider=new GroupedMilestoneProvider(null,getProject(),filter);
  }
  boolean hasUngrouped=provider.size() > 0;
  add(new WebMarkupContainer(""String_Node_Str"").setVisible(hasUngrouped && hasGroups));
  add(new MilestoneListPanel(""String_Node_Str"",provider,this,hideProject).setVisible(hasUngrouped));
}",0.9810462471569372
189217,"@Override protected void populateItem(ListItem<MilestoneGroup> listItem){
  MilestoneGroup group=listItem.getModelObject();
  PageParameters params=getProjectPageParameters();
  params.add(""String_Node_Str"",group.getName());
  BookmarkablePageLink nameLink=new BookmarkablePageLink<ViewMilestoneGroup>(""String_Node_Str"",ViewMilestoneGroup.class,params);
  nameLink.add(new Label(""String_Node_Str"",group.getName()));
  listItem.add(nameLink);
  double part=DurationWorkedUtil.getMilestoneGroupCompleteness(group);
  int percent=(int)(part * 100);
  Panel panel=new PercentagePanel(""String_Node_Str"",percent);
  listItem.add(panel);
  SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
  listItem.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject));
}","@Override protected void populateItem(ListItem<MilestoneGroup> listItem){
  MilestoneGroup group=listItem.getModelObject();
  PageParameters params=getProjectPageParameters();
  params.add(""String_Node_Str"",group.getName());
  BookmarkablePageLink nameLink=new BookmarkablePageLink(""String_Node_Str"",getPageClass(""String_Node_Str""),params);
  nameLink.add(new Label(""String_Node_Str"",group.getName()));
  listItem.add(nameLink);
  double part=DurationWorkedUtil.getMilestoneGroupCompleteness(group);
  int percent=(int)(part * 100);
  Panel panel=new PercentagePanel(""String_Node_Str"",percent);
  listItem.add(panel);
  SortableEntityProvider<Milestone> provider=new GroupedMilestoneProvider(group,filter);
  listItem.add(new MilestoneListPanel(""String_Node_Str"",provider,Milestones.this,hideProject));
}",0.9537322640345466
189218,"public void start(BundleContext bc){
  super.start(bc);
  links=new LinkedList<MenuLink>();
  eventTypes=new LinkedList<String>();
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  builder.setApplication(this);
  Manager.getInstance().addProjectListener(builder);
  globalItems.add(CONFIGURATION_MAVEN_HOME);
  globalItems.add(CONFIGURATION_ANT_HOME);
  globalItems.add(CONFIGURATION_ECLIPSE_HOME);
  globalItems.add(CONFIGURATION_NOTIFY_REPEAT_PASS);
  List<ConfigurationItem> items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ANT_HOME_OVERRIDE);
  antProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ANT_HOME_OVERRIDE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  antProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ECLIPSE_HOME_OVERRIDE);
  eclipseProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ECLIPSE_HOME_OVERRIDE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  eclipseProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_COMMAND_LINE);
  cmdProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_COMMAND_LINE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  cmdProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_XCODE_CONFIG);
  items.add(CONFIGURATION_XCODE_TARGET);
  items.add(CONFIGURATION_XCODE_SDK);
  items.add(CONFIGURATION_ANALYZE);
  xcodeProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_XCODE_CONFIG);
  items.add(CONFIGURATION_XCODE_TARGET);
  items.add(CONFIGURATION_XCODE_SDK);
  items.add(CONFIGURATION_ANALYZE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  xcodeProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_CRON_EXPRESSION);
  otherProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  for (  Project project : Manager.getStorageInstance().getProjects()) {
    scheduler.resetProject(project);
  }
  File maven=FileUtil.lookupGrandparentInPath(""String_Node_Str"");
  if (maven == null) {
    maven=FileUtil.lookupGrandparentInPath(""String_Node_Str"");
  }
  if (maven != null) {
    CONFIGURATION_MAVEN_HOME.setDefault(maven.getAbsolutePath());
  }
  File ant=FileUtil.lookupParentInPath(""String_Node_Str"");
  if (ant == null) {
    ant=FileUtil.lookupParentInPath(""String_Node_Str"");
  }
  if (ant != null) {
    CONFIGURATION_ANT_HOME.setDefault(ant.getAbsolutePath());
  }
  File eclipse=FileUtil.lookupParentInPath(""String_Node_Str"");
  if (eclipse == null) {
    eclipse=FileUtil.lookupParentInPath(""String_Node_Str"");
  }
  if (eclipse != null) {
    CONFIGURATION_ECLIPSE_HOME.setDefault(eclipse.getAbsolutePath());
  }
}","public void start(BundleContext bc){
  super.start(bc);
  links=new LinkedList<MenuLink>();
  eventTypes=new LinkedList<String>();
  eventTypes.add(""String_Node_Str"");
  eventTypes.add(""String_Node_Str"");
  builder.setApplication(this);
  Manager.getInstance().addProjectListener(builder);
  globalItems.add(CONFIGURATION_MAVEN_HOME);
  globalItems.add(CONFIGURATION_ANT_HOME);
  globalItems.add(CONFIGURATION_ECLIPSE_HOME);
  globalItems.add(CONFIGURATION_NOTIFY_REPEAT_PASS);
  List<ConfigurationItem> items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ANT_HOME_OVERRIDE);
  antProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ANT_HOME_OVERRIDE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  antProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ECLIPSE_HOME_OVERRIDE);
  eclipseProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_ECLIPSE_HOME_OVERRIDE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  eclipseProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_COMMAND_LINE);
  cmdProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_COMMAND_LINE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  cmdProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_XCODE_BUILD_WORKSPACE);
  items.add(CONFIGURATION_XCODE_WORKSPACE);
  items.add(CONFIGURATION_XCODE_SCHEME);
  items.add(CONFIGURATION_XCODE_TARGET);
  items.add(CONFIGURATION_XCODE_CONFIG);
  items.add(CONFIGURATION_XCODE_SDK);
  items.add(CONFIGURATION_ANALYZE);
  xcodeProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_XCODE_BUILD_WORKSPACE);
  items.add(CONFIGURATION_XCODE_WORKSPACE);
  items.add(CONFIGURATION_XCODE_SCHEME);
  items.add(CONFIGURATION_XCODE_TARGET);
  items.add(CONFIGURATION_XCODE_CONFIG);
  items.add(CONFIGURATION_XCODE_SDK);
  items.add(CONFIGURATION_ANALYZE);
  items.add(CONFIGURATION_CRON_EXPRESSION);
  xcodeProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  items=new LinkedList<ConfigurationItem>();
  items.add(CONFIGURATION_CRON_EXPRESSION);
  otherProjectItems.add(new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",new ConfigurationItem(""String_Node_Str"",""String_Node_Str"",items)));
  for (  Project project : Manager.getStorageInstance().getProjects()) {
    scheduler.resetProject(project);
  }
  File maven=FileUtil.lookupGrandparentInPath(""String_Node_Str"");
  if (maven == null) {
    maven=FileUtil.lookupGrandparentInPath(""String_Node_Str"");
  }
  if (maven != null) {
    CONFIGURATION_MAVEN_HOME.setDefault(maven.getAbsolutePath());
  }
  File ant=FileUtil.lookupParentInPath(""String_Node_Str"");
  if (ant == null) {
    ant=FileUtil.lookupParentInPath(""String_Node_Str"");
  }
  if (ant != null) {
    CONFIGURATION_ANT_HOME.setDefault(ant.getAbsolutePath());
  }
  File eclipse=FileUtil.lookupParentInPath(""String_Node_Str"");
  if (eclipse == null) {
    eclipse=FileUtil.lookupParentInPath(""String_Node_Str"");
  }
  if (eclipse != null) {
    CONFIGURATION_ECLIPSE_HOME.setDefault(eclipse.getAbsolutePath());
  }
}",0.9586842105263158
189219,"protected static void appendXcodeCommands(PropertyTree config,ArrayList<String> commands,String overrideConfig){
  String targetName=config.getProperty(CIApplication.CONFIGURATION_XCODE_TARGET.getKey(),(String)CIApplication.CONFIGURATION_XCODE_TARGET.getDefault());
  String sdkName=config.getProperty(CIApplication.CONFIGURATION_XCODE_SDK.getKey(),(String)CIApplication.CONFIGURATION_XCODE_SDK.getDefault());
  commands.add(""String_Node_Str"");
  if (overrideConfig != null) {
    commands.add(""String_Node_Str"");
    commands.add(overrideConfig);
  }
 else {
    String confName=config.getProperty(CIApplication.CONFIGURATION_XCODE_CONFIG.getKey(),(String)CIApplication.CONFIGURATION_XCODE_CONFIG.getDefault());
    if (!StringUtil.isEmpty(confName)) {
      commands.add(""String_Node_Str"");
      commands.add(confName);
    }
  }
  if (!StringUtil.isEmpty(targetName)) {
    commands.add(""String_Node_Str"");
    commands.add(targetName);
  }
  if (!StringUtil.isEmpty(sdkName)) {
    commands.add(""String_Node_Str"");
    commands.add(sdkName);
  }
}","protected static void appendXcodeCommands(Project project,PropertyTree config,ArrayList<String> commands,File dir,String overrideConfig){
  boolean buildWorkspace=config.getProperty(CIApplication.CONFIGURATION_XCODE_BUILD_WORKSPACE.getKey(),(String)CIApplication.CONFIGURATION_XCODE_SDK.getDefault()).equals(""String_Node_Str"");
  String sdkName=config.getProperty(CIApplication.CONFIGURATION_XCODE_SDK.getKey(),(String)CIApplication.CONFIGURATION_XCODE_SDK.getDefault());
  commands.add(""String_Node_Str"");
  if (buildWorkspace) {
    setupWorkspaceCommand(project,config,commands,dir);
  }
 else {
    setupProjectCommand(config,commands,overrideConfig);
  }
  if (overrideConfig != null) {
    commands.add(""String_Node_Str"");
    commands.add(overrideConfig);
  }
 else {
    String confName=config.getProperty(CIApplication.CONFIGURATION_XCODE_CONFIG.getKey(),(String)CIApplication.CONFIGURATION_XCODE_CONFIG.getDefault());
    if (!StringUtil.isEmpty(confName)) {
      commands.add(""String_Node_Str"");
      commands.add(confName);
    }
  }
  if (!StringUtil.isEmpty(sdkName)) {
    commands.add(""String_Node_Str"");
    commands.add(sdkName);
  }
  commands.add(""String_Node_Str"");
}",0.8412132024977699
189220,"public void onBuildPassed(Project project,PropertyTree config,PropertyTree appConfig,File dir,File output,Build build){
  boolean analyze=Boolean.parseBoolean(config.getProperty(CIApplication.CONFIGURATION_ANALYZE.getKey(),String.valueOf(CIApplication.CONFIGURATION_ANALYZE.getDefault())));
  if (analyze) {
    Writer buildOut=null;
    try {
      buildOut=new FileWriter(output,true);
      if (!canFindScanBuild()) {
        build.setWarnings(build.getWarnings() + 1);
        buildOut.write(""String_Node_Str"");
        return;
      }
 else {
        ArrayList<String> commands=new ArrayList<String>();
        commands.add(""String_Node_Str"");
        commands.add(""String_Node_Str"");
        File siteRepository=new File(new File(new File(new File(Manager.getStorageInstance().getDataDirectory(),""String_Node_Str""),""String_Node_Str""),project.getId()),""String_Node_Str"");
        String outputPath=siteRepository.getPath();
        commands.add(outputPath);
        log.debug(""String_Node_Str"" + dir + ""String_Node_Str""+ outputPath);
        appendXcodeCommands(config,commands,""String_Node_Str"");
        Process process=Runtime.getRuntime().exec(commands.toArray(new String[commands.size()]),null,dir);
        StreamGobbler serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
        StreamGobbler sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
        serr.start();
        sout.start();
        process.waitFor();
        waitStreamGobblersToComplete(serr,sout);
        IOUtil.close(process.getOutputStream());
        IOUtil.close(process.getErrorStream());
        IOUtil.close(process.getInputStream());
        process.destroy();
      }
    }
 catch (    InterruptedException e) {
    }
catch (    IOException e) {
      e.printStackTrace(new PrintWriter(buildOut));
      log.error(""String_Node_Str"",e);
    }
 finally {
      IOUtil.close(buildOut);
    }
    try {
      BufferedReader input=new BufferedReader(new FileReader(output));
      try {
        String line=null;
        while ((line=input.readLine()) != null) {
          Matcher mBugs=BUILD_LOG_BUGS_COUNT_PATTERN.matcher(line);
          if (mBugs.find()) {
            String bugCount=mBugs.group(1);
            int warnings=build.getWarnings() + Integer.parseInt(bugCount);
            build.setWarnings(warnings);
          }
          Matcher mOutDir=BUILD_LOG_OUTPUT_DIR_PATTERN.matcher(line);
          if (mOutDir.find()) {
            File outputDir=new File(mOutDir.group(1));
            File renamePath=new File(new File(new File(new File(new File(Manager.getStorageInstance().getDataDirectory(),""String_Node_Str""),""String_Node_Str""),project.getId()),""String_Node_Str""),""String_Node_Str"" + build.getId());
            log.debug(""String_Node_Str"" + outputDir.getPath() + ""String_Node_Str""+ renamePath.getPath());
            boolean success=outputDir.renameTo(renamePath);
            if (!success) {
              log.error(""String_Node_Str"" + outputDir.getPath() + ""String_Node_Str""+ renamePath.getPath());
            }
            File indexFile=new File(renamePath,""String_Node_Str"");
            File indexTmpFile=new File(renamePath,""String_Node_Str"");
            String outputName=dir.getName();
            try {
              RenameBuildFromFileToFile(outputName + ""String_Node_Str"",""String_Node_Str"" + build.getId() + ""String_Node_Str"",indexFile,indexTmpFile);
            }
 catch (            IOException ex) {
              ex.printStackTrace();
            }
            success=indexTmpFile.renameTo(indexFile);
            if (!success) {
              log.error(""String_Node_Str"" + indexTmpFile.getPath() + ""String_Node_Str""+ indexFile.getPath());
            }
          }
        }
      }
  finally {
        input.close();
      }
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
}","public void onBuildPassed(Project project,PropertyTree config,PropertyTree appConfig,File dir,File output,Build build){
  boolean analyze=Boolean.parseBoolean(config.getProperty(CIApplication.CONFIGURATION_ANALYZE.getKey(),String.valueOf(CIApplication.CONFIGURATION_ANALYZE.getDefault())));
  if (analyze) {
    Writer buildOut=null;
    try {
      buildOut=new FileWriter(output,true);
      if (!canFindScanBuild()) {
        build.setWarnings(build.getWarnings() + 1);
        buildOut.write(""String_Node_Str"");
        return;
      }
 else {
        ArrayList<String> commands=new ArrayList<String>();
        commands.add(""String_Node_Str"");
        commands.add(""String_Node_Str"");
        File siteRepository=new File(new File(new File(new File(Manager.getStorageInstance().getDataDirectory(),""String_Node_Str""),""String_Node_Str""),project.getId()),""String_Node_Str"");
        String outputPath=siteRepository.getPath();
        commands.add(outputPath);
        log.debug(""String_Node_Str"" + dir + ""String_Node_Str""+ outputPath);
        appendXcodeCommands(project,config,commands,dir,""String_Node_Str"");
        Process process=Runtime.getRuntime().exec(commands.toArray(new String[commands.size()]),null,dir);
        StreamGobbler serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
        StreamGobbler sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
        serr.start();
        sout.start();
        process.waitFor();
        waitStreamGobblersToComplete(serr,sout);
        IOUtil.close(process.getOutputStream());
        IOUtil.close(process.getErrorStream());
        IOUtil.close(process.getInputStream());
        process.destroy();
      }
    }
 catch (    InterruptedException e) {
    }
catch (    IOException e) {
      e.printStackTrace(new PrintWriter(buildOut));
      log.error(""String_Node_Str"",e);
    }
 finally {
      IOUtil.close(buildOut);
    }
    try {
      BufferedReader input=new BufferedReader(new FileReader(output));
      try {
        String line=null;
        while ((line=input.readLine()) != null) {
          Matcher mBugs=BUILD_LOG_BUGS_COUNT_PATTERN.matcher(line);
          if (mBugs.find()) {
            String bugCount=mBugs.group(1);
            int warnings=build.getWarnings() + Integer.parseInt(bugCount);
            build.setWarnings(warnings);
          }
          Matcher mOutDir=BUILD_LOG_OUTPUT_DIR_PATTERN.matcher(line);
          if (mOutDir.find()) {
            File outputDir=new File(mOutDir.group(1));
            File renamePath=new File(new File(new File(new File(new File(Manager.getStorageInstance().getDataDirectory(),""String_Node_Str""),""String_Node_Str""),project.getId()),""String_Node_Str""),""String_Node_Str"" + build.getId());
            log.debug(""String_Node_Str"" + outputDir.getPath() + ""String_Node_Str""+ renamePath.getPath());
            boolean success=outputDir.renameTo(renamePath);
            if (!success) {
              log.error(""String_Node_Str"" + outputDir.getPath() + ""String_Node_Str""+ renamePath.getPath());
            }
            File indexFile=new File(renamePath,""String_Node_Str"");
            File indexTmpFile=new File(renamePath,""String_Node_Str"");
            String outputName=dir.getName();
            try {
              RenameBuildFromFileToFile(outputName + ""String_Node_Str"",""String_Node_Str"" + build.getId() + ""String_Node_Str"",indexFile,indexTmpFile);
            }
 catch (            IOException ex) {
              ex.printStackTrace();
            }
            success=indexTmpFile.renameTo(indexFile);
            if (!success) {
              log.error(""String_Node_Str"" + indexTmpFile.getPath() + ""String_Node_Str""+ indexFile.getPath());
            }
          }
        }
      }
  finally {
        input.close();
      }
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
}",0.9984591679506932
189221,"public void runBuild(Project project,PropertyTree config,PropertyTree appConfig,File dir,File output,Build build){
  if (!(project instanceof XCodeProject)) {
    return;
  }
  int result=-1;
  Writer buildOut=null;
  Process process=null;
  StreamGobbler serr=null, sout=null;
  try {
    buildOut=new FileWriter(output);
    ArrayList<String> commands=new ArrayList<String>();
    commands.add(""String_Node_Str"");
    commands.add(""String_Node_Str"");
    process=Runtime.getRuntime().exec(commands.toArray(new String[2]),null,dir);
    serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
    sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
    serr.start();
    sout.start();
    result=process.waitFor();
    if (result == 0) {
      waitStreamGobblersToComplete(serr,sout);
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
      commands.clear();
      appendXcodeCommands(config,commands,null);
      process=Runtime.getRuntime().exec(commands.toArray(new String[commands.size()]),null,dir);
      serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
      sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
      serr.start();
      sout.start();
      result=process.waitFor();
    }
  }
 catch (  InterruptedException e) {
  }
catch (  IOException e) {
    e.printStackTrace(new PrintWriter(buildOut));
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (process != null) {
      if (serr != null && sout != null) {
        waitStreamGobblersToComplete(serr,sout);
      }
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
    }
  }
  IOUtil.close(buildOut);
  parseDatFiles(dir,build);
  build.setEndTime(new Date());
  if (result != 0) {
    build.setStatus(Build.BUILD_FAILED);
    onBuildFailed(project,config,appConfig,dir,output,build);
  }
 else {
    build.setStatus(Build.BUILD_SUCCEEDED);
    onBuildPassed(project,config,appConfig,dir,output,build);
  }
}","public void runBuild(Project project,PropertyTree config,PropertyTree appConfig,File dir,File output,Build build){
  if (!(project instanceof XCodeProject)) {
    return;
  }
  int result=-1;
  Writer buildOut=null;
  Process process=null;
  StreamGobbler serr=null, sout=null;
  try {
    buildOut=new FileWriter(output);
    prepareProject(project,dir,buildOut);
    ArrayList<String> commands=new ArrayList<String>();
    appendXcodeCommands(project,config,commands,dir,null);
    commands.add(""String_Node_Str"");
    process=Runtime.getRuntime().exec(commands.toArray(new String[2]),null,dir);
    serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
    sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
    serr.start();
    sout.start();
    result=process.waitFor();
    if (result == 0) {
      waitStreamGobblersToComplete(serr,sout);
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
      commands.clear();
      appendXcodeCommands(project,config,commands,dir,null);
      process=Runtime.getRuntime().exec(commands.toArray(new String[commands.size()]),null,dir);
      serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
      sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
      serr.start();
      sout.start();
      result=process.waitFor();
    }
  }
 catch (  InterruptedException e) {
  }
catch (  IOException e) {
    e.printStackTrace(new PrintWriter(buildOut));
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (process != null) {
      if (serr != null && sout != null) {
        waitStreamGobblersToComplete(serr,sout);
      }
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
    }
  }
  IOUtil.close(buildOut);
  parseDatFiles(dir,build);
  build.setEndTime(new Date());
  if (result != 0) {
    build.setStatus(Build.BUILD_FAILED);
    onBuildFailed(project,config,appConfig,dir,output,build);
  }
 else {
    build.setStatus(Build.BUILD_SUCCEEDED);
    onBuildPassed(project,config,appConfig,dir,output,build);
  }
}",0.9700704225352113
189222,"protected void submitChild(){
  if (getIssue().getAssignee() != null && !getIssue().getWatchers().contains(getIssue().getAssignee())) {
    getIssue().getWatchers().add(getIssue().getAssignee());
  }
  getIssue().setStatus(Issue.STATUS_ASSIGNED);
}","protected void submitChild(Comment comment){
  if (getIssue().getAssignee() != null && !getIssue().getWatchers().contains(getIssue().getAssignee())) {
    getIssue().getWatchers().add(getIssue().getAssignee());
  }
  getIssue().setStatus(Issue.STATUS_ASSIGNED);
}",0.9706457925636008
189223,"protected void submitChild(){
  getIssue().setStatus(Issue.STATUS_CLOSED);
}","protected void submitChild(Comment comment){
  getIssue().setStatus(Issue.STATUS_CLOSED);
}",0.9101796407185628
189224,"@Override protected void submitChild(){
  getIssue().getAttachments().add(attachmentPanel.getAttachment());
}","@Override protected void submitChild(Comment comment){
  getIssue().getAttachments().add(attachmentPanel.getAttachment());
}",0.9356223175965666
189225,"protected void submitChild(){
}","protected void submitChild(Comment comment){
}",0.8051948051948052
189226,"public void onSubmit(){
  issue=(Issue)((HibernateStorage)getStorage()).getHibernateSession().merge(issue);
  submitChild();
  Date now=new Date();
  if (create.getComment() != null) {
    create.setUser(CreateComment.this.getSession().getUser());
    create.setCreated(now);
    ((HibernateStorage)getStorage()).save(create);
    issue.getComments().add(create);
  }
  if (issue.getStatus() < Issue.STATUS_FEEDBACK) {
    issue.setStatus(Issue.STATUS_FEEDBACK);
  }
  issue.setUpdated(now);
  getHeadsUpApplication().addEvent(getUpdateEvent(create));
  setResponsePage(getPageClass(""String_Node_Str""),getPageParameters());
}","public void onSubmit(){
  issue=(Issue)((HibernateStorage)getStorage()).getHibernateSession().merge(issue);
  Date now=new Date();
  if (create.getComment() != null) {
    create.setUser(CreateComment.this.getSession().getUser());
    create.setCreated(now);
    ((HibernateStorage)getStorage()).save(create);
    if (!childWillConsumeComment()) {
      issue.getComments().add(create);
    }
  }
  submitChild(create);
  if (issue.getStatus() < Issue.STATUS_FEEDBACK) {
    issue.setStatus(Issue.STATUS_FEEDBACK);
  }
  issue.setUpdated(now);
  getHeadsUpApplication().addEvent(getUpdateEvent(create));
  setResponsePage(getPageClass(""String_Node_Str""),getPageParameters());
}",0.8847926267281107
189227,"protected void submitChild(){
  duration.setUser(getSession().getUser());
  duration.setIssue(getIssue());
  ((HibernateStorage)getStorage()).save(duration);
  getIssue().getTimeWorked().add(duration);
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  if (timeBurndown) {
    duration.setUpdatedRequired(getIssue().getTimeRequired());
  }
 else {
    double hours=0;
    if (getIssue().getTimeRequired() == null) {
      if (getIssue().getTimeEstimate() != null) {
        hours=getIssue().getTimeEstimate().getHours();
      }
    }
 else {
      hours=getIssue().getTimeRequired().getHours();
    }
    hours+=duration.getWorked().getHours();
    Duration required=new Duration(hours);
    duration.setUpdatedRequired(required);
    getIssue().setTimeRequired(required);
  }
  if (getIssue().getAssignee() == null) {
    getIssue().setAssignee(getSession().getUser());
    getIssue().getWatchers().add(getSession().getUser());
  }
}","protected void submitChild(Comment comment){
  duration.setUser(getSession().getUser());
  duration.setIssue(getIssue());
  duration.setComment(comment);
  ((HibernateStorage)getStorage()).save(duration);
  getIssue().getTimeWorked().add(duration);
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  if (timeBurndown) {
    duration.setUpdatedRequired(getIssue().getTimeRequired());
  }
 else {
    double hours=0;
    if (getIssue().getTimeRequired() == null) {
      if (getIssue().getTimeEstimate() != null) {
        hours=getIssue().getTimeEstimate().getHours();
      }
    }
 else {
      hours=getIssue().getTimeRequired().getHours();
    }
    hours+=duration.getWorked().getHours();
    Duration required=new Duration(hours);
    duration.setUpdatedRequired(required);
    getIssue().setTimeRequired(required);
  }
  if (getIssue().getAssignee() == null) {
    getIssue().setAssignee(getSession().getUser());
    getIssue().getWatchers().add(getSession().getUser());
  }
}",0.9774363898223716
189228,"protected void submitChild(){
  getIssue().setResolution(0);
  getIssue().setReopened(getIssue().getReopened() + 1);
  getIssue().setStatus(Issue.STATUS_REOPENED);
}","protected void submitChild(Comment comment){
  getIssue().setResolution(0);
  getIssue().setReopened(getIssue().getReopened() + 1);
  getIssue().setStatus(Issue.STATUS_REOPENED);
}",0.9565217391304348
189229,"protected void submitChild(){
  boolean timeEnabled=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  getIssue().setResolution(resolution);
  if (duplicate != 0) {
    Issue dupe=IssuesApplication.getIssue(duplicate,duplicateProject);
    IssueRelationship relationship=new IssueRelationship(getIssue(),dupe,IssueRelationship.TYPE_DUPLICATE);
    ((HibernateStorage)getStorage()).save(relationship);
    getIssue().getRelationships().add(relationship);
  }
  if (timeBurndown) {
    if (timeEnabled) {
      DurationWorked worked=new DurationWorked();
      worked.setWorked(additionalTime);
      worked.setUpdatedRequired(new Duration(0));
      worked.setDay(new Date());
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
      getIssue().setTimeRequired(new Duration(0));
    }
  }
 else {
    getIssue().setTimeRequired(additionalTime);
    if (timeEnabled && originalTime != null && additionalTime.getHours() > originalTime.getHours()) {
      double hours=additionalTime.getHours() - originalTime.getHours();
      DurationWorked worked=new DurationWorked();
      worked.setWorked(new Duration(hours));
      worked.setDay(new Date());
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
    }
  }
  getIssue().setStatus(Issue.STATUS_RESOLVED);
}","protected void submitChild(Comment comment){
  boolean timeEnabled=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean timeBurndown=Boolean.parseBoolean(getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  getIssue().setResolution(resolution);
  if (duplicate != 0) {
    Issue dupe=IssuesApplication.getIssue(duplicate,duplicateProject);
    IssueRelationship relationship=new IssueRelationship(getIssue(),dupe,IssueRelationship.TYPE_DUPLICATE);
    ((HibernateStorage)getStorage()).save(relationship);
    getIssue().getRelationships().add(relationship);
  }
  if (timeBurndown) {
    if (timeEnabled) {
      DurationWorked worked=new DurationWorked();
      worked.setWorked(additionalTime);
      worked.setUpdatedRequired(new Duration(0));
      worked.setDay(new Date());
      worked.setComment(comment);
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
      getIssue().setTimeRequired(new Duration(0));
    }
  }
 else {
    getIssue().setTimeRequired(additionalTime);
    if (timeEnabled && originalTime != null && additionalTime.getHours() > originalTime.getHours()) {
      double hours=additionalTime.getHours() - originalTime.getHours();
      DurationWorked worked=new DurationWorked();
      worked.setWorked(new Duration(hours));
      worked.setDay(new Date());
      worked.setUser(getSession().getUser());
      ((HibernateStorage)getStorage()).save(worked);
      getIssue().getTimeWorked().add(worked);
    }
  }
  getIssue().setStatus(Issue.STATUS_RESOLVED);
}",0.9852276153150435
189230,"private void layout(){
  Object o=getDefaultModel().getObject();
  WebMarkupContainer commentTitle=new WebMarkupContainer(""String_Node_Str"");
  WebMarkupContainer workedTitle=new WebMarkupContainer(""String_Node_Str"");
  if (o instanceof Comment) {
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    Comment comment=(Comment)o;
    commentTitle.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
    commentTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project)).setEscapeModelStrings(false));
    workedTitle.setVisible(false);
  }
 else   if (o instanceof DurationWorked) {
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    DurationWorked worked=(DurationWorked)o;
    if (worked.getWorked() == null || worked.getWorked().getHours() == 0) {
      setVisible(false);
      return;
    }
    String time=""String_Node_Str"";
    if (worked.getWorked() != null) {
      time=worked.getWorked().toString();
    }
    workedTitle.add(new Label(""String_Node_Str"",time));
    workedTitle.add(new Label(""String_Node_Str"",worked.getUser().getFullnameOrUsername()));
    workedTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(worked.getDay(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    commentTitle.setVisible(false);
  }
 else {
    commentTitle.setVisible(false);
    workedTitle.setVisible(false);
  }
  add(commentTitle);
  add(workedTitle);
}","private void layout(){
  Object o=getDefaultModel().getObject();
  WebMarkupContainer commentTitle=new WebMarkupContainer(""String_Node_Str"");
  WebMarkupContainer workedTitle=new WebMarkupContainer(""String_Node_Str"");
  if (o instanceof Comment) {
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    Comment comment=(Comment)o;
    commentTitle.add(new Label(""String_Node_Str"",comment.getUser().getFullnameOrUsername()));
    commentTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(comment.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project)).setEscapeModelStrings(false));
    workedTitle.setVisible(false);
  }
 else   if (o instanceof DurationWorked) {
    add(new Image(""String_Node_Str"",new ResourceReference(HeadsUpPage.class,""String_Node_Str"")));
    DurationWorked worked=(DurationWorked)o;
    if (worked.getWorked() == null || worked.getWorked().getHours() == 0) {
      setVisible(false);
      return;
    }
    String time=""String_Node_Str"";
    if (worked.getWorked() != null) {
      time=worked.getWorked().toString();
    }
    workedTitle.add(new Label(""String_Node_Str"",time));
    workedTitle.add(new Label(""String_Node_Str"",worked.getUser().getFullnameOrUsername()));
    workedTitle.add(new Label(""String_Node_Str"",new FormattedDateModel(worked.getDay(),((HeadsUpSession)getSession()).getTimeZone())));
    commentTitle.setVisible(false);
    Comment comment=worked.getComment();
    if (comment != null) {
      Label commentLabel=new Label(""String_Node_Str"",new MarkedUpTextModel(comment.getComment(),project));
      commentLabel.setEscapeModelStrings(false);
      add(commentLabel);
    }
 else {
      add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    }
  }
 else {
    commentTitle.setVisible(false);
    workedTitle.setVisible(false);
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
  add(commentTitle);
  add(workedTitle);
}",0.8569161597460989
189231,"private boolean isSessionUserAssignedToIssue(Issue issue){
  return issue.getAssignee().equals(getSessionUser());
}","private boolean isSessionUserAssignedToIssue(Issue issue){
  return issue.getAssignee() != null && issue.getAssignee().equals(getSessionUser());
}",0.8812260536398467
189232,"private void addDropIssueButton(final Issue issue){
  final Form form=new Form(""String_Node_Str"");
  Button button=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      super.onSubmit();
      issue.setAssignee(null);
      issue.getWatchers().remove(getSessionUser());
      issue.setStatus(Issue.STATUS_NEW);
      issue.setUpdated(new Date());
      Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
      Transaction tx=session.beginTransaction();
      session.update(issue);
      tx.commit();
      setResponsePage(ViewIssue.class,getPage().getPageParameters());
    }
  }
;
  add(form.add(button.setDefaultFormProcessing(false)));
}","private void addDropIssueButton(final Issue issue){
  final Form form=new Form(""String_Node_Str"");
  Button button=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      super.onSubmit();
      issue.setAssignee(null);
      issue.getWatchers().remove(getSessionUser());
      issue.setStatus(Issue.STATUS_NEW);
      issue.setUpdated(new Date());
      Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
      Transaction tx=session.beginTransaction();
      session.update(issue);
      tx.commit();
      setResponsePage(ViewIssue.class,getPage().getPageParameters());
      ApplicationPageMapper.get().getApplication(""String_Node_Str"").addEvent(new UpdateIssueEvent(issue,issue.getProject(),getSessionUser(),""String_Node_Str""));
    }
  }
;
  add(form.add(button.setDefaultFormProcessing(false)));
}",0.8967286722257858
189233,"public IssuePanel(String id,final Issue issue){
  super(id);
  add(new Label(""String_Node_Str"",String.valueOf(issue.getId())));
  add(new Label(""String_Node_Str"",(issue.getProject() == null) ? ""String_Node_Str"" : issue.getProject().toString()));
  WebMarkupContainer type=new WebMarkupContainer(""String_Node_Str"");
  type.add(new Label(""String_Node_Str"",IssueUtils.getTypeName(issue.getType())));
  String typeIcon=""String_Node_Str"" + IssueUtils.getTypeName(issue.getType()) + ""String_Node_Str"";
  type.add(new Image(""String_Node_Str"",new ResourceReference(IssueListPanel.class,typeIcon)));
  add(type);
  add(new Label(""String_Node_Str"",IssueUtils.getPriorityName(issue.getPriority())));
  add(new Label(""String_Node_Str"",issue.getVersion()));
  final Milestone milestone=issue.getMilestone();
  Class userPage=RenderUtil.getPageClass(""String_Node_Str"");
  Class milestonePage=RenderUtil.getPageClass(""String_Node_Str"");
  PageParameters params=new PageParameters();
  if (milestone == null) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new Form(""String_Node_Str"").setVisible(false));
  }
 else {
    params.add(""String_Node_Str"",milestone.getProject().getId());
    params.add(""String_Node_Str"",milestone.getName());
    Link milestoneLink=new BookmarkablePageLink(""String_Node_Str"",milestonePage,params);
    milestoneLink.add(new Label(""String_Node_Str"",milestone.toString()));
    add(milestoneLink);
    Button addIssue=new Button(""String_Node_Str""){
      @Override public void onSubmit(){
        super.onSubmit();
        PageParameters addIssueParams=new PageParameters();
        addIssueParams.add(""String_Node_Str"",milestone.getProject().getId());
        addIssueParams.add(""String_Node_Str"",milestone.getName());
        setResponsePage(RenderUtil.getPageClass(""String_Node_Str""),addIssueParams);
      }
    }
;
    add(new Form(""String_Node_Str"").add(addIssue.setDefaultFormProcessing(false)));
  }
  String image=null;
switch (issue.getPriority()) {
case Issue.PRIORITY_BLOCKER:
    image=""String_Node_Str"";
  break;
case Issue.PRIORITY_CRITICAL:
image=""String_Node_Str"";
break;
case Issue.PRIORITY_MINOR:
image=""String_Node_Str"";
break;
case Issue.PRIORITY_TRIVIAL:
image=""String_Node_Str"";
break;
}
if (image == null) {
WebMarkupContainer ico=new WebMarkupContainer(""String_Node_Str"");
ico.setVisible(false);
add(ico);
}
 else {
add(new Image(""String_Node_Str"",new ResourceReference(IssueListPanel.class,image)));
}
add(new Label(""String_Node_Str"",issue.getOrder() == null ? ""String_Node_Str"" : String.valueOf(issue.getOrder())).setVisible(issue.getOrder() != null));
add(new Label(""String_Node_Str"",new Model<String>(){
@Override public String getObject(){
return IssueUtils.getWatchersDescription(issue,getSessionUser());
}
}
));
List<IssueRelationship> relationships=new LinkedList<IssueRelationship>();
relationships.addAll(issue.getRelationships());
Collections.sort(relationships,new Comparator<IssueRelationship>(){
public int compare(IssueRelationship relationship1,IssueRelationship relationship2){
if (relationship1.getType() == relationship2.getType()) {
if (relationship1.getRelated().getId() == relationship2.getRelated().getId()) {
if (relationship1.getRelated().getProject().equals(issue.getProject())) {
return Integer.MIN_VALUE;
}
 else if (relationship2.getRelated().getProject().equals(issue.getProject())) {
return Integer.MAX_VALUE;
}
return relationship1.getRelated().getProject().getId().compareToIgnoreCase(relationship2.getRelated().getProject().getId());
}
return (int)(relationship1.getRelated().getId() - relationship2.getRelated().getId());
}
return relationship1.getType() - relationship2.getType();
}
}
);
add(new ListView<IssueRelationship>(""String_Node_Str"",relationships){
protected void populateItem(ListItem<IssueRelationship> listItem){
IssueRelationship relationship=listItem.getModelObject();
listItem.add(new Label(""String_Node_Str"",IssueUtils.getRelationshipName(relationship.getType())));
Issue related=relationship.getRelated();
PageParameters params=new PageParameters();
params.put(""String_Node_Str"",related.getProject());
params.put(""String_Node_Str"",related.getId());
BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",ViewIssue.class,params);
String issueId=String.valueOf(related.getId());
if (!related.getProject().equals(issue.getProject())) {
issueId=related.getProject().getId() + ""String_Node_Str"" + related.getId();
}
link.add(new Label(""String_Node_Str"",""String_Node_Str"" + issueId));
listItem.add(link.add(new IssueStatusModifier(""String_Node_Str"",related)));
listItem.add(new Label(""String_Node_Str"",related.getSummary()).add(new IssueStatusModifier(""String_Node_Str"",related)));
}
}
);
relationships=new LinkedList<IssueRelationship>();
relationships.clear();
relationships.addAll(issue.getReverseRelationships());
Collections.sort(relationships,new Comparator<IssueRelationship>(){
public int compare(IssueRelationship relationship1,IssueRelationship relationship2){
if (relationship1.getType() == relationship2.getType()) {
if (relationship1.getOwner().getId() == relationship2.getOwner().getId()) {
if (relationship1.getOwner().getProject().equals(issue.getProject())) {
return Integer.MIN_VALUE;
}
 else if (relationship2.getOwner().getProject().equals(issue.getProject())) {
return Integer.MAX_VALUE;
}
return relationship1.getOwner().getProject().getId().compareToIgnoreCase(relationship2.getOwner().getProject().getId());
}
return (int)(relationship1.getOwner().getId() - relationship2.getOwner().getId());
}
return relationship1.getType() - relationship2.getType();
}
}
);
add(new ListView<IssueRelationship>(""String_Node_Str"",relationships){
protected void populateItem(ListItem<IssueRelationship> listItem){
IssueRelationship relationship=listItem.getModelObject();
listItem.add(new Label(""String_Node_Str"",IssueUtils.getReverseRelationshipName(relationship.getType())));
Issue related=relationship.getOwner();
PageParameters params=new PageParameters();
params.put(""String_Node_Str"",related.getProject());
params.put(""String_Node_Str"",related.getId());
BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",ViewIssue.class,params);
String issueId=String.valueOf(related.getId());
if (!related.getProject().equals(issue.getProject())) {
issueId=related.getProject().getId() + ""String_Node_Str"" + related.getId();
}
link.add(new Label(""String_Node_Str"",""String_Node_Str"" + issueId));
listItem.add(link.add(new IssueStatusModifier(""String_Node_Str"",related)));
listItem.add(new Label(""String_Node_Str"",related.getSummary()).add(new IssueStatusModifier(""String_Node_Str"",related)));
}
}
);
add(new ListView<ChangeSet>(""String_Node_Str"",new ArrayList<ChangeSet>(issue.getChangeSets())){
protected void populateItem(ListItem<ChangeSet> listItem){
ChangeSet change=listItem.getModelObject();
PageParameters params=new PageParameters();
params.put(""String_Node_Str"",change.getProject());
params.put(""String_Node_Str"",change.getId());
BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",ApplicationPageMapper.get().getPageClass(""String_Node_Str""),params);
String changeId=String.valueOf(change.getId());
if (!change.getProject().equals(issue.getProject())) {
changeId=change.getProject().getId() + ""String_Node_Str"" + change.getId();
}
link.add(new Label(""String_Node_Str"",""String_Node_Str"" + changeId));
listItem.add(link);
listItem.add(new Label(""String_Node_Str"",MarkedUpTextModel.markUp(change.getComment(),change.getProject())).setEscapeModelStrings(false));
}
}
);
add(new Label(""String_Node_Str"",IssueUtils.getStatusDescription(issue)));
params=getProjectPageParameters(issue.getProject());
params.add(""String_Node_Str"",issue.getReporter().getUsername());
Link reporterLink=new BookmarkablePageLink(""String_Node_Str"",userPage,params);
reporterLink.add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
add(reporterLink);
if (issue.getAssignee() != null) {
params=getProjectPageParameters(issue.getProject());
params.add(""String_Node_Str"",issue.getAssignee().getUsername());
Link assignedLink=new BookmarkablePageLink(""String_Node_Str"",userPage,params);
assignedLink.add(new Label(""String_Node_Str"",new PropertyModel(issue,""String_Node_Str"")));
add(assignedLink);
if (isSessionUserAssignedToIssue(issue)) {
addDropIssueButton(issue);
}
}
 else {
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
add(new Form(""String_Node_Str"").setVisible(false));
}
add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
add(new Label(""String_Node_Str"",new IssueHoursEstimateModel(issue){
@Override public String getObject(){
String time=super.getObject();
if (issue.getIncludeInInitialEstimates()) {
time+=""String_Node_Str"";
}
return time;
}
}
).setVisible(useTime));
add(new Label(""String_Node_Str"",new IssueHoursRequiredModel(issue)).setVisible(useTime));
if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
add(new Label(""String_Node_Str"",""String_Node_Str""));
}
 else {
add(new Label(""String_Node_Str"",""String_Node_Str""));
}
add(new Label(""String_Node_Str"",issue.getSummary()));
add(new Label(""String_Node_Str"",issue.getEnvironment()));
add(new Label(""String_Node_Str"",new MarkedUpTextModel(issue.getBody(),issue.getProject())).setEscapeModelStrings(false));
add(new Label(""String_Node_Str"",new MarkedUpTextModel(issue.getTestNotes(),issue.getProject())).setEscapeModelStrings(false).setVisible(issue.getTestNotes() != null));
}","public IssuePanel(String id,final Issue issue){
  super(id);
  add(new Label(""String_Node_Str"",String.valueOf(issue.getId())));
  add(new Label(""String_Node_Str"",(issue.getProject() == null) ? ""String_Node_Str"" : issue.getProject().toString()));
  WebMarkupContainer type=new WebMarkupContainer(""String_Node_Str"");
  type.add(new Label(""String_Node_Str"",IssueUtils.getTypeName(issue.getType())));
  String typeIcon=""String_Node_Str"" + IssueUtils.getTypeName(issue.getType()) + ""String_Node_Str"";
  type.add(new Image(""String_Node_Str"",new ResourceReference(IssueListPanel.class,typeIcon)));
  add(type);
  add(new Label(""String_Node_Str"",IssueUtils.getPriorityName(issue.getPriority())));
  add(new Label(""String_Node_Str"",issue.getVersion()));
  final Milestone milestone=issue.getMilestone();
  Class userPage=RenderUtil.getPageClass(""String_Node_Str"");
  Class milestonePage=RenderUtil.getPageClass(""String_Node_Str"");
  PageParameters params=new PageParameters();
  if (milestone == null) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new Form(""String_Node_Str"").setVisible(false));
  }
 else {
    params.add(""String_Node_Str"",milestone.getProject().getId());
    params.add(""String_Node_Str"",milestone.getName());
    Link milestoneLink=new BookmarkablePageLink(""String_Node_Str"",milestonePage,params);
    milestoneLink.add(new Label(""String_Node_Str"",milestone.toString()));
    add(milestoneLink);
    Button addIssue=new Button(""String_Node_Str""){
      @Override public void onSubmit(){
        super.onSubmit();
        PageParameters addIssueParams=new PageParameters();
        addIssueParams.add(""String_Node_Str"",milestone.getProject().getId());
        addIssueParams.add(""String_Node_Str"",milestone.getName());
        setResponsePage(RenderUtil.getPageClass(""String_Node_Str""),addIssueParams);
      }
    }
;
    add(new Form(""String_Node_Str"").add(addIssue.setDefaultFormProcessing(false)));
  }
  String image=null;
switch (issue.getPriority()) {
case Issue.PRIORITY_BLOCKER:
    image=""String_Node_Str"";
  break;
case Issue.PRIORITY_CRITICAL:
image=""String_Node_Str"";
break;
case Issue.PRIORITY_MINOR:
image=""String_Node_Str"";
break;
case Issue.PRIORITY_TRIVIAL:
image=""String_Node_Str"";
break;
}
if (image == null) {
WebMarkupContainer ico=new WebMarkupContainer(""String_Node_Str"");
ico.setVisible(false);
add(ico);
}
 else {
add(new Image(""String_Node_Str"",new ResourceReference(IssueListPanel.class,image)));
}
add(new Label(""String_Node_Str"",issue.getOrder() == null ? ""String_Node_Str"" : String.valueOf(issue.getOrder())).setVisible(issue.getOrder() != null));
add(new Label(""String_Node_Str"",new Model<String>(){
@Override public String getObject(){
return IssueUtils.getWatchersDescription(issue,getSessionUser());
}
}
));
List<IssueRelationship> relationships=new LinkedList<IssueRelationship>();
relationships.addAll(issue.getRelationships());
Collections.sort(relationships,new Comparator<IssueRelationship>(){
public int compare(IssueRelationship relationship1,IssueRelationship relationship2){
if (relationship1.getType() == relationship2.getType()) {
if (relationship1.getRelated().getId() == relationship2.getRelated().getId()) {
if (relationship1.getRelated().getProject().equals(issue.getProject())) {
return Integer.MIN_VALUE;
}
 else if (relationship2.getRelated().getProject().equals(issue.getProject())) {
return Integer.MAX_VALUE;
}
return relationship1.getRelated().getProject().getId().compareToIgnoreCase(relationship2.getRelated().getProject().getId());
}
return (int)(relationship1.getRelated().getId() - relationship2.getRelated().getId());
}
return relationship1.getType() - relationship2.getType();
}
}
);
add(new ListView<IssueRelationship>(""String_Node_Str"",relationships){
protected void populateItem(ListItem<IssueRelationship> listItem){
IssueRelationship relationship=listItem.getModelObject();
listItem.add(new Label(""String_Node_Str"",IssueUtils.getRelationshipName(relationship.getType())));
Issue related=relationship.getRelated();
PageParameters params=new PageParameters();
params.put(""String_Node_Str"",related.getProject());
params.put(""String_Node_Str"",related.getId());
BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",ViewIssue.class,params);
String issueId=String.valueOf(related.getId());
if (!related.getProject().equals(issue.getProject())) {
issueId=related.getProject().getId() + ""String_Node_Str"" + related.getId();
}
link.add(new Label(""String_Node_Str"",""String_Node_Str"" + issueId));
listItem.add(link.add(new IssueStatusModifier(""String_Node_Str"",related)));
listItem.add(new Label(""String_Node_Str"",related.getSummary()).add(new IssueStatusModifier(""String_Node_Str"",related)));
}
}
);
relationships=new LinkedList<IssueRelationship>();
relationships.clear();
relationships.addAll(issue.getReverseRelationships());
Collections.sort(relationships,new Comparator<IssueRelationship>(){
public int compare(IssueRelationship relationship1,IssueRelationship relationship2){
if (relationship1.getType() == relationship2.getType()) {
if (relationship1.getOwner().getId() == relationship2.getOwner().getId()) {
if (relationship1.getOwner().getProject().equals(issue.getProject())) {
return Integer.MIN_VALUE;
}
 else if (relationship2.getOwner().getProject().equals(issue.getProject())) {
return Integer.MAX_VALUE;
}
return relationship1.getOwner().getProject().getId().compareToIgnoreCase(relationship2.getOwner().getProject().getId());
}
return (int)(relationship1.getOwner().getId() - relationship2.getOwner().getId());
}
return relationship1.getType() - relationship2.getType();
}
}
);
add(new ListView<IssueRelationship>(""String_Node_Str"",relationships){
protected void populateItem(ListItem<IssueRelationship> listItem){
IssueRelationship relationship=listItem.getModelObject();
listItem.add(new Label(""String_Node_Str"",IssueUtils.getReverseRelationshipName(relationship.getType())));
Issue related=relationship.getOwner();
PageParameters params=new PageParameters();
params.put(""String_Node_Str"",related.getProject());
params.put(""String_Node_Str"",related.getId());
BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",ViewIssue.class,params);
String issueId=String.valueOf(related.getId());
if (!related.getProject().equals(issue.getProject())) {
issueId=related.getProject().getId() + ""String_Node_Str"" + related.getId();
}
link.add(new Label(""String_Node_Str"",""String_Node_Str"" + issueId));
listItem.add(link.add(new IssueStatusModifier(""String_Node_Str"",related)));
listItem.add(new Label(""String_Node_Str"",related.getSummary()).add(new IssueStatusModifier(""String_Node_Str"",related)));
}
}
);
add(new ListView<ChangeSet>(""String_Node_Str"",new ArrayList<ChangeSet>(issue.getChangeSets())){
protected void populateItem(ListItem<ChangeSet> listItem){
ChangeSet change=listItem.getModelObject();
PageParameters params=new PageParameters();
params.put(""String_Node_Str"",change.getProject());
params.put(""String_Node_Str"",change.getId());
BookmarkablePageLink link=new BookmarkablePageLink(""String_Node_Str"",ApplicationPageMapper.get().getPageClass(""String_Node_Str""),params);
String changeId=String.valueOf(change.getId());
if (!change.getProject().equals(issue.getProject())) {
changeId=change.getProject().getId() + ""String_Node_Str"" + change.getId();
}
link.add(new Label(""String_Node_Str"",""String_Node_Str"" + changeId));
listItem.add(link);
listItem.add(new Label(""String_Node_Str"",MarkedUpTextModel.markUp(change.getComment(),change.getProject())).setEscapeModelStrings(false));
}
}
);
add(new Label(""String_Node_Str"",IssueUtils.getStatusDescription(issue)));
params=getProjectPageParameters(issue.getProject());
params.add(""String_Node_Str"",issue.getReporter().getUsername());
Link reporterLink=new BookmarkablePageLink(""String_Node_Str"",userPage,params);
reporterLink.add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
add(reporterLink);
if (issue.getAssignee() != null) {
params=getProjectPageParameters(issue.getProject());
params.add(""String_Node_Str"",issue.getAssignee().getUsername());
Link assignedLink=new BookmarkablePageLink(""String_Node_Str"",userPage,params);
assignedLink.add(new Label(""String_Node_Str"",new PropertyModel(issue,""String_Node_Str"")));
add(assignedLink);
}
 else {
add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
}
if (isSessionUserAssignedToIssue(issue)) {
addDropIssueButton(issue);
}
 else {
add(new Form(""String_Node_Str"").setVisible(false));
}
add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
add(new Label(""String_Node_Str"",new IssueHoursEstimateModel(issue){
@Override public String getObject(){
String time=super.getObject();
if (issue.getIncludeInInitialEstimates()) {
time+=""String_Node_Str"";
}
return time;
}
}
).setVisible(useTime));
add(new Label(""String_Node_Str"",new IssueHoursRequiredModel(issue)).setVisible(useTime));
if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
add(new Label(""String_Node_Str"",""String_Node_Str""));
}
 else {
add(new Label(""String_Node_Str"",""String_Node_Str""));
}
add(new Label(""String_Node_Str"",issue.getSummary()));
add(new Label(""String_Node_Str"",issue.getEnvironment()));
add(new Label(""String_Node_Str"",new MarkedUpTextModel(issue.getBody(),issue.getProject())).setEscapeModelStrings(false));
add(new Label(""String_Node_Str"",new MarkedUpTextModel(issue.getTestNotes(),issue.getProject())).setEscapeModelStrings(false).setVisible(issue.getTestNotes() != null));
}",0.9921620521172638
189234,"@Override public void onSubmit(){
  super.onSubmit();
  issue.setAssignee(null);
  issue.getWatchers().remove(getSessionUser());
  issue.setStatus(Issue.STATUS_NEW);
  issue.setUpdated(new Date());
  Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
  Transaction tx=session.beginTransaction();
  session.update(issue);
  tx.commit();
  setResponsePage(ViewIssue.class,getPage().getPageParameters());
}","@Override public void onSubmit(){
  super.onSubmit();
  issue.setAssignee(null);
  issue.getWatchers().remove(getSessionUser());
  issue.setStatus(Issue.STATUS_NEW);
  issue.setUpdated(new Date());
  Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
  Transaction tx=session.beginTransaction();
  session.update(issue);
  tx.commit();
  setResponsePage(ViewIssue.class,getPage().getPageParameters());
  ApplicationPageMapper.get().getApplication(""String_Node_Str"").addEvent(new UpdateIssueEvent(issue,issue.getProject(),getSessionUser(),""String_Node_Str""));
}",0.8486017357762777
189235,"public void runBuild(Project project,PropertyTree config,PropertyTree appConfig,File dir,File output,Build build){
  if (!(project instanceof XCodeProject)) {
    return;
  }
  int result=-1;
  Writer buildOut=null;
  Process process=null;
  StreamGobbler serr=null, sout=null;
  try {
    buildOut=new FileWriter(output);
    prepareProject(project,dir,buildOut);
    ArrayList<String> commands=new ArrayList<String>();
    appendXcodeCommands(project,config,commands,dir,null);
    commands.add(""String_Node_Str"");
    process=Runtime.getRuntime().exec(commands.toArray(new String[2]),null,dir);
    serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
    sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
    serr.start();
    sout.start();
    result=process.waitFor();
    if (result == 0) {
      waitStreamGobblersToComplete(serr,sout);
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
      commands.clear();
      appendXcodeCommands(project,config,commands,dir,null);
      process=Runtime.getRuntime().exec(commands.toArray(new String[commands.size()]),null,dir);
      serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
      sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
      serr.start();
      sout.start();
      result=process.waitFor();
    }
  }
 catch (  InterruptedException e) {
  }
catch (  IOException e) {
    e.printStackTrace(new PrintWriter(buildOut));
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (process != null) {
      if (serr != null && sout != null) {
        waitStreamGobblersToComplete(serr,sout);
      }
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
    }
  }
  IOUtil.close(buildOut);
  parseDatFiles(dir,build);
  build.setEndTime(new Date());
  if (result != 0) {
    build.setStatus(Build.BUILD_FAILED);
    onBuildFailed(project,config,appConfig,dir,output,build);
  }
 else {
    build.setStatus(Build.BUILD_SUCCEEDED);
    onBuildPassed(project,config,appConfig,dir,output,build);
  }
}","public void runBuild(Project project,PropertyTree config,PropertyTree appConfig,File dir,File output,Build build){
  if (!(project instanceof XCodeProject)) {
    return;
  }
  int result=-1;
  Writer buildOut=null;
  Process process=null;
  StreamGobbler serr=null, sout=null;
  try {
    buildOut=new FileWriter(output);
    prepareProject(project,dir,buildOut);
    ArrayList<String> commands=new ArrayList<String>();
    appendXcodeCommands(project,config,commands,dir,null);
    commands.add(""String_Node_Str"");
    process=Runtime.getRuntime().exec(commands.toArray(new String[2]),null,dir);
    serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
    sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
    serr.start();
    sout.start();
    result=process.waitFor();
    if (result == 0) {
      waitStreamGobblersToComplete(serr,sout);
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
      commands.clear();
      appendXcodeCommands(project,config,commands,dir,null);
      process=Runtime.getRuntime().exec(commands.toArray(new String[commands.size()]),null,dir);
      serr=new StreamGobbler(new InputStreamReader(process.getErrorStream()),buildOut);
      sout=new StreamGobbler(new InputStreamReader(process.getInputStream()),buildOut);
      serr.start();
      sout.start();
      result=process.waitFor();
    }
  }
 catch (  InterruptedException e) {
  }
catch (  IOException e) {
    e.printStackTrace(new PrintWriter(buildOut));
    log.error(""String_Node_Str"",e);
  }
 finally {
    if (process != null) {
      if (serr != null && sout != null) {
        waitStreamGobblersToComplete(serr,sout);
      }
      IOUtil.close(process.getOutputStream());
      IOUtil.close(process.getErrorStream());
      IOUtil.close(process.getInputStream());
      process.destroy();
    }
  }
  IOUtil.close(buildOut);
  parseDatFiles(dir,build);
  build.setEndTime(new Date());
  if (result != 0) {
    build.setStatus(Build.BUILD_FAILED);
    onBuildFailed(project,config,appConfig,dir,output,build);
  }
 else {
    build.setStatus(Build.BUILD_SUCCEEDED);
    onBuildPassed(project,config,appConfig,dir,output,build);
  }
  cleanupBuildOutput(build,dir);
}",0.9929078014184396
189236,"private String renderComment(final Comment comment){
  String content=new RenderUtil(){
    public Panel getPanel(){
      return new CommentPanel(RenderUtil.PANEL_ID,comment,getProject());
    }
  }
.getRenderedContent();
  return ""String_Node_Str"" + content + ""String_Node_Str"";
}","private String renderComment(final Comment comment){
  if (comment == null) {
    return ""String_Node_Str"";
  }
  String content=new RenderUtil(){
    public Panel getPanel(){
      return new CommentPanel(RenderUtil.PANEL_ID,comment,getProject());
    }
  }
.getRenderedContent();
  return ""String_Node_Str"" + content + ""String_Node_Str"";
}",0.9052969502407704
189237,"private String renderComment(final Comment comment){
  String content=new RenderUtil(){
    public Panel getPanel(){
      return new CommentPanel(RenderUtil.PANEL_ID,comment,getProject());
    }
  }
.getRenderedContent();
  return ""String_Node_Str"" + content + ""String_Node_Str"";
}","private String renderComment(final Comment comment){
  if (comment == null) {
    return ""String_Node_Str"";
  }
  String content=new RenderUtil(){
    public Panel getPanel(){
      return new CommentPanel(RenderUtil.PANEL_ID,comment,getProject());
    }
  }
.getRenderedContent();
  return ""String_Node_Str"" + content + ""String_Node_Str"";
}",0.9052969502407704
189238,"private void sendSubscriptions(Event event){
  String from=Manager.getStorageInstance().getGlobalConfiguration().getSmtpHost();
  if (StringUtil.isEmpty(from)) {
    from=""String_Node_Str"";
  }
  Session session=HibernateUtil.getCurrentSession();
  for (  User user : Manager.getSecurityInstance().getUsers()) {
    user=(User)session.load(StoredUser.class,user.getUsername());
    if ((event.getUsername() == null || !event.getUsername().equals(user.getUsername())) && event.shouldNotify(user)) {
      if (!StringUtil.isEmpty(user.getEmail())) {
        getLoggerForComponent(getClass().getName()).info(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getEmail());
        try {
          ((EmailNotifier)getNotifierList().get(""String_Node_Str"").newInstance()).sendEventEmail(event,user.getEmail(),from);
        }
 catch (        Exception e) {
          getLoggerForComponent(getClass().getName()).error(""String_Node_Str"",e);
        }
      }
 else {
        getLoggerForComponent(getClass().getName()).warn(""String_Node_Str"" + user.getUsername());
      }
    }
  }
}","private void sendSubscriptions(Event event){
  String from=Manager.getStorageInstance().getGlobalConfiguration().getSmtpHost();
  if (StringUtil.isEmpty(from)) {
    from=""String_Node_Str"";
  }
  Session session=HibernateUtil.getCurrentSession();
  for (  User user : Manager.getSecurityInstance().getUsers()) {
    user=(User)session.load(StoredUser.class,user.getUsername());
    if ((event.getUsername() == null || !event.getUsername().equals(user.getUsername())) && event.shouldNotify(user)) {
      if (!StringUtil.isEmpty(user.getEmail())) {
        getLoggerForComponent(getClass().getName()).info(""String_Node_Str"" + user.getUsername() + ""String_Node_Str""+ user.getEmail());
        try {
          ((EmailNotifier)getNotifierList().get(""String_Node_Str"").newInstance()).sendEventEmail(event,user.getEmail(),from,EmailNotifier.FooterType.Subscription);
        }
 catch (        Exception e) {
          getLoggerForComponent(getClass().getName()).error(""String_Node_Str"",e);
        }
      }
 else {
        getLoggerForComponent(getClass().getName()).warn(""String_Node_Str"" + user.getUsername());
      }
    }
  }
}",0.9828519855595668
189239,"public void sendEventEmail(Event event,String to,String from){
  HeadsUpConfiguration config=Manager.getStorageInstance().getGlobalConfiguration();
  String title=""String_Node_Str"" + event.getTitle();
  if (event.getProject() != null) {
    title+=""String_Node_Str"" + event.getProject().getAlias() + ""String_Node_Str"";
  }
  StringBuilder body=new StringBuilder(""String_Node_Str"");
  body.append(title);
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  body.append(config.getBaseUrl());
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  body.append(event.getBodyHeader());
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  body.append(""String_Node_Str"");
  if (event.getUsername() != null) {
    body.append(""String_Node_Str"");
    body.append(Manager.getSecurityInstance().getUserByUsername(event.getUsername()));
    body.append(""String_Node_Str"");
  }
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + event.getProject() + ""String_Node_Str"");
  body.append(""String_Node_Str"");
  String time=new SimpleDateFormat(""String_Node_Str"").format(event.getTime());
  String link=config.getFullUrl(""String_Node_Str"") + event.getId();
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + time + ""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + link + ""String_Node_Str""+ ""String_Node_Str""+ event.getTitle()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ event.getSummary()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String content=event.getBody();
  if (content != null) {
    body.append(content);
  }
  body.append(""String_Node_Str"");
  sendNotification(to,from,title,body.toString(),config);
}","public void sendEventEmail(Event event,String to,String from,FooterType footerType){
  HeadsUpConfiguration config=Manager.getStorageInstance().getGlobalConfiguration();
  String title=""String_Node_Str"" + event.getTitle();
  if (event.getProject() != null) {
    title+=""String_Node_Str"" + event.getProject().getAlias() + ""String_Node_Str"";
  }
  StringBuilder body=new StringBuilder(""String_Node_Str"");
  body.append(title);
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  body.append(config.getBaseUrl());
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  body.append(event.getBodyHeader());
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  body.append(""String_Node_Str"");
  if (event.getUsername() != null) {
    body.append(""String_Node_Str"");
    body.append(Manager.getSecurityInstance().getUserByUsername(event.getUsername()));
    body.append(""String_Node_Str"");
  }
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + event.getProject() + ""String_Node_Str"");
  body.append(""String_Node_Str"");
  String time=new SimpleDateFormat(""String_Node_Str"").format(event.getTime());
  String link=config.getFullUrl(""String_Node_Str"") + event.getId();
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + time + ""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + link + ""String_Node_Str""+ ""String_Node_Str""+ event.getTitle()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ event.getSummary()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  String content=event.getBody();
  if (content != null) {
    body.append(content);
  }
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  body.append(getFooterText(footerType));
  body.append(""String_Node_Str"");
  sendNotification(to,from,title,body.toString(),config);
}",0.9494605337876206
189240,"public void eventAdded(Event event){
  sendEventEmail(event,getTo(),getFrom());
}","public void eventAdded(Event event){
  sendEventEmail(event,getTo(),getFrom(),FooterType.Notification);
}",0.8709677419354839
189241,"@Override public Iterator<Milestone> iterator(int start,int limit){
  if (getSort() != null && !getSort().getProperty().equals(""String_Node_Str"")) {
    return super.iterator(start,limit);
  }
  Iterator<Milestone> iter=super.iterator(0,size());
  List<Milestone> all=new ArrayList<Milestone>();
  while (iter.hasNext()) {
    all.add(iter.next());
  }
  Collections.sort(all,new MilestoneComparator());
  return all.subList(start,limit).iterator();
}","@Override public Iterator<Milestone> iterator(int start,int limit){
  if (getSort() != null && !getSort().getProperty().equals(""String_Node_Str"")) {
    return super.iterator(start,limit);
  }
  Iterator<Milestone> iter=super.iterator(0,size());
  List<Milestone> all=new ArrayList<Milestone>();
  while (iter.hasNext()) {
    all.add(iter.next());
  }
  Collections.sort(all,new MilestoneComparator());
  return all.subList(start,start + limit).iterator();
}",0.9912087912087912
189242,"public static SortableEntityProvider<Milestone> getMilestoneProviderForProject(final Project project,final MilestoneFilterPanel filter){
  return new SortableEntityProvider<Milestone>(){
    @Override protected Criteria createCriteria(){
      Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
      Criteria c=session.createCriteria(Milestone.class);
      c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
      Criterion completed=filter.getCompletedCriterion();
      if (completed != null) {
        c.add(completed);
      }
      Criterion dueQuery=filter.getDueCriterion();
      if (dueQuery != null) {
        c.add(dueQuery);
      }
      c.add(Restrictions.eq(""String_Node_Str"",project));
      return c;
    }
    @Override protected List<Order> getDefaultOrder(){
      return Arrays.asList(Order.asc(""String_Node_Str""),Order.desc(""String_Node_Str""));
    }
    @Override public String getCountProperty(){
      return ""String_Node_Str"";
    }
    @Override public Iterator<Milestone> iterator(    int start,    int limit){
      if (getSort() != null && !getSort().getProperty().equals(""String_Node_Str"")) {
        return super.iterator(start,limit);
      }
      Iterator<Milestone> iter=super.iterator(0,size());
      List<Milestone> all=new ArrayList<Milestone>();
      while (iter.hasNext()) {
        all.add(iter.next());
      }
      Collections.sort(all,new MilestoneComparator());
      return all.subList(start,limit).iterator();
    }
  }
;
}","public static SortableEntityProvider<Milestone> getMilestoneProviderForProject(final Project project,final MilestoneFilterPanel filter){
  return new SortableEntityProvider<Milestone>(){
    @Override protected Criteria createCriteria(){
      Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
      Criteria c=session.createCriteria(Milestone.class);
      c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
      Criterion completed=filter.getCompletedCriterion();
      if (completed != null) {
        c.add(completed);
      }
      Criterion dueQuery=filter.getDueCriterion();
      if (dueQuery != null) {
        c.add(dueQuery);
      }
      c.add(Restrictions.eq(""String_Node_Str"",project));
      return c;
    }
    @Override protected List<Order> getDefaultOrder(){
      return Arrays.asList(Order.asc(""String_Node_Str""),Order.desc(""String_Node_Str""));
    }
    @Override public String getCountProperty(){
      return ""String_Node_Str"";
    }
    @Override public Iterator<Milestone> iterator(    int start,    int limit){
      if (getSort() != null && !getSort().getProperty().equals(""String_Node_Str"")) {
        return super.iterator(start,limit);
      }
      Iterator<Milestone> iter=super.iterator(0,size());
      List<Milestone> all=new ArrayList<Milestone>();
      while (iter.hasNext()) {
        all.add(iter.next());
      }
      Collections.sort(all,new MilestoneComparator());
      return all.subList(start,start + limit).iterator();
    }
  }
;
}",0.997370151216305
189243,"public static SortableEntityProvider<Milestone> getMilestoneProvider(final MilestoneFilterPanel filter){
  return new SortableEntityProvider<Milestone>(){
    @Override protected Criteria createCriteria(){
      Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
      Criteria c=session.createCriteria(Milestone.class);
      c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
      Criterion completed=filter.getCompletedCriterion();
      if (completed != null) {
        c.add(completed);
      }
      Criterion dueQuery=filter.getDueCriterion();
      if (dueQuery != null) {
        c.add(dueQuery);
      }
      return c;
    }
    @Override protected List<Order> getDefaultOrder(){
      return Arrays.asList(Order.asc(""String_Node_Str""),Order.desc(""String_Node_Str""));
    }
    @Override public String getCountProperty(){
      return ""String_Node_Str"";
    }
    @Override public Iterator<Milestone> iterator(    int start,    int limit){
      if (getSort() != null && !getSort().getProperty().equals(""String_Node_Str"")) {
        return super.iterator(start,limit);
      }
      Iterator<Milestone> iter=super.iterator(0,size());
      List<Milestone> all=new ArrayList<Milestone>();
      while (iter.hasNext()) {
        all.add(iter.next());
      }
      Collections.sort(all,new MilestoneComparator(getSort() == null || getSort().isAscending()));
      return all.subList(start,limit).iterator();
    }
  }
;
}","public static SortableEntityProvider<Milestone> getMilestoneProvider(final MilestoneFilterPanel filter){
  return new SortableEntityProvider<Milestone>(){
    @Override protected Criteria createCriteria(){
      Session session=((HibernateStorage)Manager.getStorageInstance()).getHibernateSession();
      Criteria c=session.createCriteria(Milestone.class);
      c.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
      Criterion completed=filter.getCompletedCriterion();
      if (completed != null) {
        c.add(completed);
      }
      Criterion dueQuery=filter.getDueCriterion();
      if (dueQuery != null) {
        c.add(dueQuery);
      }
      return c;
    }
    @Override protected List<Order> getDefaultOrder(){
      return Arrays.asList(Order.asc(""String_Node_Str""),Order.desc(""String_Node_Str""));
    }
    @Override public String getCountProperty(){
      return ""String_Node_Str"";
    }
    @Override public Iterator<Milestone> iterator(    int start,    int limit){
      if (getSort() != null && !getSort().getProperty().equals(""String_Node_Str"")) {
        return super.iterator(start,limit);
      }
      Iterator<Milestone> iter=super.iterator(0,size());
      List<Milestone> all=new ArrayList<Milestone>();
      while (iter.hasNext()) {
        all.add(iter.next());
      }
      Collections.sort(all,new MilestoneComparator(getSort() == null || getSort().isAscending()));
      return all.subList(start,start + limit).iterator();
    }
  }
;
}",0.997289972899729
189244,"public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.oldAssignee=issue.getAssignee();
  this.oldTimeRequired=new Duration(issue.getTimeRequired());
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getTypes()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getTypeName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  List<Milestone> milestones=((IssuesApplication)owner.getHeadsUpApplication()).getMilestonesForProjectOrParent(issue.getProject());
  if (issue.getMilestone() != null && !milestones.contains(issue.getMilestone())) {
    milestones.add(issue.getMilestone());
  }
  add(new DropDownChoice<Milestone>(""String_Node_Str"",milestones).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  List<User> users;
  if (issue.getAssignee() != null) {
    users=owner.getSecurityManager().getRealUsersIncluding(issue.getAssignee());
  }
 else {
    users=owner.getSecurityManager().getRealUsers();
  }
  final DropDownChoice<User> assignees=new DropDownChoice<User>(""String_Node_Str"",users);
  assignees.setNullValid(true);
  add(assignees);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  add(assignToMe.setDefaultFormProcessing(false).setVisible(issue.getStatus() < Issue.STATUS_RESOLVED));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}","public IssueForm(String id,final Issue issue,boolean creating,final HeadsUpPage owner,EditIssueForm parent){
  super(id);
  this.issue=issue;
  this.owner=owner;
  this.parent=parent;
  this.creating=creating;
  this.oldAssignee=issue.getAssignee();
  if (issue.getTimeRequired() != null) {
    this.oldTimeRequired=new Duration(issue.getTimeRequired());
  }
  setModel(new CompoundPropertyModel<Issue>(issue));
  add(new Label(""String_Node_Str"",issue.getProject().getAlias()));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getTypes()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getTypeName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new DropDownChoice<Integer>(""String_Node_Str"",IssueUtils.getPriorities()){
    public boolean isNullValid(){
      return false;
    }
  }
.setChoiceRenderer(new IChoiceRenderer<Integer>(){
    public Object getDisplayValue(    Integer i){
      return IssueUtils.getPriorityName(i);
    }
    public String getIdValue(    Integer o,    int i){
      return o.toString();
    }
  }
));
  add(new TextField(""String_Node_Str""));
  List<Milestone> milestones=((IssuesApplication)owner.getHeadsUpApplication()).getMilestonesForProjectOrParent(issue.getProject());
  if (issue.getMilestone() != null && !milestones.contains(issue.getMilestone())) {
    milestones.add(issue.getMilestone());
  }
  add(new DropDownChoice<Milestone>(""String_Node_Str"",milestones).setNullValid(true));
  Label status=new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getStatusName(issue.getStatus());
    }
  }
);
  add(status);
  add(new Label(""String_Node_Str"",issue.getReporter().getFullnameOrUsername()));
  List<User> users;
  if (issue.getAssignee() != null) {
    users=owner.getSecurityManager().getRealUsersIncluding(issue.getAssignee());
  }
 else {
    users=owner.getSecurityManager().getRealUsers();
  }
  final DropDownChoice<User> assignees=new DropDownChoice<User>(""String_Node_Str"",users);
  assignees.setNullValid(true);
  add(assignees);
  Button assignToMe=new Button(""String_Node_Str""){
    @Override public void onSubmit(){
      issue.setAssignee(((HeadsUpSession)getSession()).getUser());
      issue.getWatchers().add(((HeadsUpSession)getSession()).getUser());
      assignees.setChoices(new LinkedList<User>(owner.getSecurityManager().getRealUsers()));
      assignees.setModelObject(((HeadsUpSession)getSession()).getUser());
      assignees.modelChanged();
      super.onSubmit();
    }
  }
;
  add(assignToMe.setDefaultFormProcessing(false).setVisible(issue.getStatus() < Issue.STATUS_RESOLVED));
  if (creating) {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
 else {
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getCreated(),((HeadsUpSession)getSession()).getTimeZone())));
    add(new Label(""String_Node_Str"",new FormattedDateModel(issue.getUpdated(),((HeadsUpSession)getSession()).getTimeZone())));
  }
  add(new TextField(""String_Node_Str"").setRequired(false));
  add(new Label(""String_Node_Str"",new Model<String>(){
    @Override public String getObject(){
      return IssueUtils.getWatchersDescription(issue,((HeadsUpSession)getSession()).getUser());
    }
  }
));
  add(new TextField(""String_Node_Str"").setRequired(true));
  add(new TextField(""String_Node_Str""));
  boolean useTime=Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_ENABLED));
  boolean required=useTime && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_REQUIRED));
  Duration timeEstimated=issue.getTimeEstimate();
  if (timeEstimated == null) {
    timeEstimated=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeEstimate(timeEstimated);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(issue.getTimeEstimate())).setRequired(required).setVisible(useTime));
  boolean showRemain=!creating && Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN));
  boolean resolved=issue.getStatus() >= Issue.STATUS_RESOLVED;
  Duration timeRequired=issue.getTimeRequired();
  if (timeRequired == null) {
    timeRequired=new Duration(0,Duration.UNIT_HOURS);
    issue.setTimeRequired(timeRequired);
  }
  add(new DurationEditPanel(""String_Node_Str"",new Model<Duration>(timeRequired)).setRequired(required).setVisible(useTime && (resolved || showRemain)));
  add(new CheckBox(""String_Node_Str"").setVisible(useTime));
  add(new TextArea(""String_Node_Str""));
  if (creating) {
    add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",owner));
  }
 else {
    add(new WebMarkupContainer(""String_Node_Str"").setVisible(false));
  }
}",0.974987543597409
189245,"public void onSubmit(){
  if (attachmentPanel != null) {
    Attachment attachment=attachmentPanel.getAttachment();
    if (attachment != null) {
      issue.getAttachments().add(attachment);
    }
  }
  if (!creating) {
    if (issue.getTimeRequired() != null && !issue.getTimeRequired().equals(oldTimeRequired)) {
      DurationWorked simulate=new DurationWorked();
      simulate.setUpdatedRequired(issue.getTimeRequired());
      simulate.setDay(new Date());
      simulate.setIssue(issue);
      simulate.setUser(((HeadsUpSession)getSession()).getUser());
      ((HibernateStorage)owner.getStorage()).save(simulate);
      issue.getTimeWorked().add(simulate);
    }
    issue=(Issue)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(issue);
  }
 else   if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
    issue.setTimeRequired(issue.getTimeEstimate());
  }
  issue.setUpdated(new Date());
  if (issue.getMilestone() != null) {
    Milestone milestone=issue.getMilestone();
    if (creating) {
      milestone=(Milestone)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(milestone);
    }
    if (!milestone.getIssues().contains(issue)) {
      milestone.getIssues().add(issue);
    }
  }
  parent.onSubmit(issue);
  if (issue.getAssignee() != null && !issue.getWatchers().contains(issue.getAssignee())) {
    if (oldAssignee == null || !issue.getAssignee().equals(oldAssignee)) {
      issue.getWatchers().add(issue.getAssignee());
    }
  }
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",issue.getProject().getId());
  params.add(""String_Node_Str"",String.valueOf(issue.getId()));
  setResponsePage(owner.getPageClass(""String_Node_Str""),params);
}","public void onSubmit(){
  if (attachmentPanel != null) {
    Attachment attachment=attachmentPanel.getAttachment();
    if (attachment != null) {
      issue.getAttachments().add(attachment);
    }
  }
  if (!creating) {
    issue=(Issue)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(issue);
    if (issue.getTimeRequired() != null && !issue.getTimeRequired().equals(oldTimeRequired)) {
      DurationWorked simulate=new DurationWorked();
      simulate.setUpdatedRequired(issue.getTimeRequired());
      simulate.setDay(new Date());
      simulate.setIssue(issue);
      simulate.setUser(((HeadsUpSession)getSession()).getUser());
      ((HibernateStorage)owner.getStorage()).save(simulate);
      issue.getTimeWorked().add(simulate);
    }
  }
 else   if (Boolean.parseBoolean(issue.getProject().getConfigurationValue(StoredProject.CONFIGURATION_TIMETRACKING_BURNDOWN))) {
    issue.setTimeRequired(issue.getTimeEstimate());
  }
  issue.setUpdated(new Date());
  if (issue.getMilestone() != null) {
    Milestone milestone=issue.getMilestone();
    if (creating) {
      milestone=(Milestone)((HibernateStorage)owner.getStorage()).getHibernateSession().merge(milestone);
    }
    if (!milestone.getIssues().contains(issue)) {
      milestone.getIssues().add(issue);
    }
  }
  parent.onSubmit(issue);
  if (issue.getAssignee() != null && !issue.getWatchers().contains(issue.getAssignee())) {
    if (oldAssignee == null || !issue.getAssignee().equals(oldAssignee)) {
      issue.getWatchers().add(issue.getAssignee());
    }
  }
  PageParameters params=new PageParameters();
  params.add(""String_Node_Str"",issue.getProject().getId());
  params.add(""String_Node_Str"",String.valueOf(issue.getId()));
  setResponsePage(owner.getPageClass(""String_Node_Str""),params);
}",0.9485746226942426
189246,"public void onSubmit(AjaxRequestTarget target,Form form){
  target.addComponent(done.setDefaultModel(new Model<String>(){
    public String getObject(){
      return ""String_Node_Str"";
    }
  }
));
  try {
    final UpdateDetails update=((DefaultManager)Manager.getInstance()).getAvailableUpdates().get(0);
    URL download=new URL(update.getFile());
    final long length=update.getLength();
    final URLConnection conn=download.openConnection();
    conn.connect();
    if (length > -1) {
      target.addComponent(this.setVisible(false));
      target.addComponent(run.setVisible(true));
      target.addComponent(bar.setVisible(true));
      bar.start(target);
    }
    final Thread restartThread=new Thread(){
      public void run(){
        try {
          sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        try {
          UpdatingPanel.this.runtime.restart();
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
;
    new Thread(){
      public void run(){
        try {
          byte[] buffer=new byte[4096];
          long downloaded=0;
          InputStream in=conn.getInputStream();
          outFile=new File(org.headsupdev.agile.api.util.FileUtil.getTempDir(),new File(update.getFile()).getName());
          OutputStream out=new FileOutputStream(outFile);
          int chunk;
          while ((chunk=in.read(buffer)) > -1) {
            downloaded+=chunk;
            out.write(buffer,0,chunk);
            if (length > 0) {
              int prog=(int)(((double)downloaded / length) * 100);
              if (prog > 99) {
                prog=99;
              }
              progress=prog;
            }
          }
          in.close();
          out.close();
          outFile=new TarFile(new GZipFile(outFile).expand(true)).expand();
          File tmpDir=new File(outFile.getAbsolutePath() + ""String_Node_Str"");
          outFile.renameTo(tmpDir);
          File[] children=tmpDir.listFiles();
          outFile=new File(outFile.getParentFile(),outFile.getName());
          children[0].renameTo(outFile);
          tmpDir.delete();
          String version=new File(update.getFile()).getName();
          version=version.substring(0,version.indexOf(""String_Node_Str""));
          Event event=new SystemEvent(Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version,Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version+ ""String_Node_Str"",""String_Node_Str"" + Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str""+ version+ ""String_Node_Str""+ update.getDetails());
          Manager.getStorageInstance().addEvent(event);
          Manager.getInstance().fireEventAdded(event);
          Process chmodProcess=null;
          try {
            chmodProcess=Runtime.getRuntime().exec(""String_Node_Str"" + new File(outFile,""String_Node_Str"").getAbsolutePath());
            chmodProcess.waitFor();
          }
 catch (          InterruptedException e) {
          }
 finally {
            if (chmodProcess != null) {
              IOUtil.close(chmodProcess.getOutputStream());
              IOUtil.close(chmodProcess.getErrorStream());
              IOUtil.close(chmodProcess.getInputStream());
              chmodProcess.destroy();
            }
          }
          updateProperties(new File(new File(outFile,""String_Node_Str""),""String_Node_Str""));
          File mainDir=new File(""String_Node_Str"");
          File backupDir=new File(mainDir,""String_Node_Str"");
          if (backupDir.exists()) {
            for (            File child : backupDir.listFiles()) {
              FileUtil.delete(child);
            }
          }
 else {
            backupDir.mkdir();
          }
          for (          File child : mainDir.listFiles()) {
            if (child.equals(outFile)) {
              continue;
            }
            child.renameTo(new File(backupDir,child.getName()));
          }
          for (          File child : outFile.listFiles()) {
            child.renameTo(new File(mainDir,child.getName()));
          }
          outFile.delete();
          progress=100;
          restartThread.start();
        }
 catch (        IOException e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
.start();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","public void onSubmit(AjaxRequestTarget target,Form form){
  target.addComponent(done.setDefaultModel(new Model<String>(){
    public String getObject(){
      return ""String_Node_Str"";
    }
  }
));
  try {
    final UpdateDetails update=((DefaultManager)Manager.getInstance()).getAvailableUpdates().get(0);
    URL download=new URL(update.getFile());
    final long length=update.getLength();
    URLConnection conn=download.openConnection();
    conn.connect();
    if (((HttpURLConnection)conn).getResponseCode() == 301 || ((HttpURLConnection)conn).getResponseCode() == 302) {
      String newLocation=conn.getHeaderField(""String_Node_Str"");
      download=new URL(newLocation);
      conn=download.openConnection();
      conn.connect();
    }
    if (length > -1) {
      target.addComponent(this.setVisible(false));
      target.addComponent(run.setVisible(true));
      target.addComponent(bar.setVisible(true));
      bar.start(target);
    }
    final Thread restartThread=new Thread(){
      public void run(){
        try {
          sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        try {
          UpdatingPanel.this.runtime.restart();
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
;
    final URLConnection connection=conn;
    new Thread(){
      public void run(){
        try {
          byte[] buffer=new byte[4096];
          long downloaded=0;
          InputStream in=connection.getInputStream();
          outFile=new File(org.headsupdev.agile.api.util.FileUtil.getTempDir(),new File(update.getFile()).getName());
          OutputStream out=new FileOutputStream(outFile);
          int chunk;
          while ((chunk=in.read(buffer)) > -1) {
            downloaded+=chunk;
            out.write(buffer,0,chunk);
            if (length > 0) {
              int prog=(int)(((double)downloaded / length) * 100);
              if (prog > 99) {
                prog=99;
              }
              progress=prog;
            }
          }
          in.close();
          out.close();
          outFile=new TarFile(new GZipFile(outFile).expand(true)).expand();
          File tmpDir=new File(outFile.getAbsolutePath() + ""String_Node_Str"");
          outFile.renameTo(tmpDir);
          File[] children=tmpDir.listFiles();
          outFile=new File(outFile.getParentFile(),outFile.getName());
          children[0].renameTo(outFile);
          tmpDir.delete();
          String version=new File(update.getFile()).getName();
          version=version.substring(0,version.indexOf(""String_Node_Str""));
          Event event=new SystemEvent(Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version,Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version+ ""String_Node_Str"",""String_Node_Str"" + Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str""+ version+ ""String_Node_Str""+ update.getDetails());
          Manager.getStorageInstance().addEvent(event);
          Manager.getInstance().fireEventAdded(event);
          Process chmodProcess=null;
          try {
            chmodProcess=Runtime.getRuntime().exec(""String_Node_Str"" + new File(outFile,""String_Node_Str"").getAbsolutePath());
            chmodProcess.waitFor();
          }
 catch (          InterruptedException e) {
          }
 finally {
            if (chmodProcess != null) {
              IOUtil.close(chmodProcess.getOutputStream());
              IOUtil.close(chmodProcess.getErrorStream());
              IOUtil.close(chmodProcess.getInputStream());
              chmodProcess.destroy();
            }
          }
          updateProperties(new File(new File(outFile,""String_Node_Str""),""String_Node_Str""));
          File mainDir=new File(""String_Node_Str"");
          File backupDir=new File(mainDir,""String_Node_Str"");
          if (backupDir.exists()) {
            for (            File child : backupDir.listFiles()) {
              FileUtil.delete(child);
            }
          }
 else {
            backupDir.mkdir();
          }
          for (          File child : mainDir.listFiles()) {
            if (child.equals(outFile)) {
              continue;
            }
            child.renameTo(new File(backupDir,child.getName()));
          }
          for (          File child : outFile.listFiles()) {
            child.renameTo(new File(mainDir,child.getName()));
          }
          outFile.delete();
          progress=100;
          restartThread.start();
        }
 catch (        IOException e) {
          log.error(""String_Node_Str"",e);
        }
      }
    }
.start();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9634609129350536
189247,"public UpdatingPanel(String id,HeadsUpRuntime runtime){
  super(id);
  this.runtime=runtime;
  final Model restartingModel=new Model<String>(){
    public String getObject(){
      return ""String_Node_Str"";
    }
  }
;
  final WebMarkupContainer run=new WebMarkupContainer(""String_Node_Str"");
  run.setOutputMarkupId(true);
  final Label done=new Label(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  done.setOutputMarkupId(true);
  final ProgressBar bar=new ProgressBar(""String_Node_Str"",new ProgressionModel(){
    protected Progression getProgression(){
      return new Progression(progress);
    }
  }
){
    protected void onFinished(    AjaxRequestTarget target){
      target.addComponent(run.setVisible(false));
      target.addComponent(this.setVisible(false));
      target.addComponent(done.setVisible(true));
      done.setDefaultModel(restartingModel);
    }
  }
;
  final Form updateForm=new Form(""String_Node_Str"");
  updateForm.add(new AjaxButton(""String_Node_Str"",updateForm){
    public void onSubmit(    AjaxRequestTarget target,    Form form){
      target.addComponent(done.setDefaultModel(new Model<String>(){
        public String getObject(){
          return ""String_Node_Str"";
        }
      }
));
      try {
        final UpdateDetails update=((DefaultManager)Manager.getInstance()).getAvailableUpdates().get(0);
        URL download=new URL(update.getFile());
        final long length=update.getLength();
        final URLConnection conn=download.openConnection();
        conn.connect();
        if (length > -1) {
          target.addComponent(this.setVisible(false));
          target.addComponent(run.setVisible(true));
          target.addComponent(bar.setVisible(true));
          bar.start(target);
        }
        final Thread restartThread=new Thread(){
          public void run(){
            try {
              sleep(1000);
            }
 catch (            InterruptedException e) {
            }
            try {
              UpdatingPanel.this.runtime.restart();
            }
 catch (            Exception e) {
              log.error(""String_Node_Str"",e);
            }
          }
        }
;
        new Thread(){
          public void run(){
            try {
              byte[] buffer=new byte[4096];
              long downloaded=0;
              InputStream in=conn.getInputStream();
              outFile=new File(org.headsupdev.agile.api.util.FileUtil.getTempDir(),new File(update.getFile()).getName());
              OutputStream out=new FileOutputStream(outFile);
              int chunk;
              while ((chunk=in.read(buffer)) > -1) {
                downloaded+=chunk;
                out.write(buffer,0,chunk);
                if (length > 0) {
                  int prog=(int)(((double)downloaded / length) * 100);
                  if (prog > 99) {
                    prog=99;
                  }
                  progress=prog;
                }
              }
              in.close();
              out.close();
              outFile=new TarFile(new GZipFile(outFile).expand(true)).expand();
              File tmpDir=new File(outFile.getAbsolutePath() + ""String_Node_Str"");
              outFile.renameTo(tmpDir);
              File[] children=tmpDir.listFiles();
              outFile=new File(outFile.getParentFile(),outFile.getName());
              children[0].renameTo(outFile);
              tmpDir.delete();
              String version=new File(update.getFile()).getName();
              version=version.substring(0,version.indexOf(""String_Node_Str""));
              Event event=new SystemEvent(Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version,Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version+ ""String_Node_Str"",""String_Node_Str"" + Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str""+ version+ ""String_Node_Str""+ update.getDetails());
              Manager.getStorageInstance().addEvent(event);
              Manager.getInstance().fireEventAdded(event);
              Process chmodProcess=null;
              try {
                chmodProcess=Runtime.getRuntime().exec(""String_Node_Str"" + new File(outFile,""String_Node_Str"").getAbsolutePath());
                chmodProcess.waitFor();
              }
 catch (              InterruptedException e) {
              }
 finally {
                if (chmodProcess != null) {
                  IOUtil.close(chmodProcess.getOutputStream());
                  IOUtil.close(chmodProcess.getErrorStream());
                  IOUtil.close(chmodProcess.getInputStream());
                  chmodProcess.destroy();
                }
              }
              updateProperties(new File(new File(outFile,""String_Node_Str""),""String_Node_Str""));
              File mainDir=new File(""String_Node_Str"");
              File backupDir=new File(mainDir,""String_Node_Str"");
              if (backupDir.exists()) {
                for (                File child : backupDir.listFiles()) {
                  FileUtil.delete(child);
                }
              }
 else {
                backupDir.mkdir();
              }
              for (              File child : mainDir.listFiles()) {
                if (child.equals(outFile)) {
                  continue;
                }
                child.renameTo(new File(backupDir,child.getName()));
              }
              for (              File child : outFile.listFiles()) {
                child.renameTo(new File(mainDir,child.getName()));
              }
              outFile.delete();
              progress=100;
              restartThread.start();
            }
 catch (            IOException e) {
              log.error(""String_Node_Str"",e);
            }
          }
        }
.start();
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
);
  updateForm.add(bar);
  bar.setVisible(false);
  updateForm.add(run);
  run.setVisible(false);
  updateForm.add(done);
  add(updateForm);
  setVisible(((DefaultManager)Manager.getInstance()).getAvailableUpdates().size() > 0 && Manager.getSecurityInstance().userHasPermission(((HeadsUpSession)Session.get()).getUser(),new AdminPermission(),null));
}","public UpdatingPanel(String id,HeadsUpRuntime runtime){
  super(id);
  this.runtime=runtime;
  final Model restartingModel=new Model<String>(){
    public String getObject(){
      return ""String_Node_Str"";
    }
  }
;
  final WebMarkupContainer run=new WebMarkupContainer(""String_Node_Str"");
  run.setOutputMarkupId(true);
  final Label done=new Label(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
  done.setOutputMarkupId(true);
  final ProgressBar bar=new ProgressBar(""String_Node_Str"",new ProgressionModel(){
    protected Progression getProgression(){
      return new Progression(progress);
    }
  }
){
    protected void onFinished(    AjaxRequestTarget target){
      target.addComponent(run.setVisible(false));
      target.addComponent(this.setVisible(false));
      target.addComponent(done.setVisible(true));
      done.setDefaultModel(restartingModel);
    }
  }
;
  final Form updateForm=new Form(""String_Node_Str"");
  updateForm.add(new AjaxButton(""String_Node_Str"",updateForm){
    public void onSubmit(    AjaxRequestTarget target,    Form form){
      target.addComponent(done.setDefaultModel(new Model<String>(){
        public String getObject(){
          return ""String_Node_Str"";
        }
      }
));
      try {
        final UpdateDetails update=((DefaultManager)Manager.getInstance()).getAvailableUpdates().get(0);
        URL download=new URL(update.getFile());
        final long length=update.getLength();
        URLConnection conn=download.openConnection();
        conn.connect();
        if (((HttpURLConnection)conn).getResponseCode() == 301 || ((HttpURLConnection)conn).getResponseCode() == 302) {
          String newLocation=conn.getHeaderField(""String_Node_Str"");
          download=new URL(newLocation);
          conn=download.openConnection();
          conn.connect();
        }
        if (length > -1) {
          target.addComponent(this.setVisible(false));
          target.addComponent(run.setVisible(true));
          target.addComponent(bar.setVisible(true));
          bar.start(target);
        }
        final Thread restartThread=new Thread(){
          public void run(){
            try {
              sleep(1000);
            }
 catch (            InterruptedException e) {
            }
            try {
              UpdatingPanel.this.runtime.restart();
            }
 catch (            Exception e) {
              log.error(""String_Node_Str"",e);
            }
          }
        }
;
        final URLConnection connection=conn;
        new Thread(){
          public void run(){
            try {
              byte[] buffer=new byte[4096];
              long downloaded=0;
              InputStream in=connection.getInputStream();
              outFile=new File(org.headsupdev.agile.api.util.FileUtil.getTempDir(),new File(update.getFile()).getName());
              OutputStream out=new FileOutputStream(outFile);
              int chunk;
              while ((chunk=in.read(buffer)) > -1) {
                downloaded+=chunk;
                out.write(buffer,0,chunk);
                if (length > 0) {
                  int prog=(int)(((double)downloaded / length) * 100);
                  if (prog > 99) {
                    prog=99;
                  }
                  progress=prog;
                }
              }
              in.close();
              out.close();
              outFile=new TarFile(new GZipFile(outFile).expand(true)).expand();
              File tmpDir=new File(outFile.getAbsolutePath() + ""String_Node_Str"");
              outFile.renameTo(tmpDir);
              File[] children=tmpDir.listFiles();
              outFile=new File(outFile.getParentFile(),outFile.getName());
              children[0].renameTo(outFile);
              tmpDir.delete();
              String version=new File(update.getFile()).getName();
              version=version.substring(0,version.indexOf(""String_Node_Str""));
              Event event=new SystemEvent(Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version,Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version+ ""String_Node_Str"",""String_Node_Str"" + Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str""+ version+ ""String_Node_Str""+ update.getDetails());
              Manager.getStorageInstance().addEvent(event);
              Manager.getInstance().fireEventAdded(event);
              Process chmodProcess=null;
              try {
                chmodProcess=Runtime.getRuntime().exec(""String_Node_Str"" + new File(outFile,""String_Node_Str"").getAbsolutePath());
                chmodProcess.waitFor();
              }
 catch (              InterruptedException e) {
              }
 finally {
                if (chmodProcess != null) {
                  IOUtil.close(chmodProcess.getOutputStream());
                  IOUtil.close(chmodProcess.getErrorStream());
                  IOUtil.close(chmodProcess.getInputStream());
                  chmodProcess.destroy();
                }
              }
              updateProperties(new File(new File(outFile,""String_Node_Str""),""String_Node_Str""));
              File mainDir=new File(""String_Node_Str"");
              File backupDir=new File(mainDir,""String_Node_Str"");
              if (backupDir.exists()) {
                for (                File child : backupDir.listFiles()) {
                  FileUtil.delete(child);
                }
              }
 else {
                backupDir.mkdir();
              }
              for (              File child : mainDir.listFiles()) {
                if (child.equals(outFile)) {
                  continue;
                }
                child.renameTo(new File(backupDir,child.getName()));
              }
              for (              File child : outFile.listFiles()) {
                child.renameTo(new File(mainDir,child.getName()));
              }
              outFile.delete();
              progress=100;
              restartThread.start();
            }
 catch (            IOException e) {
              log.error(""String_Node_Str"",e);
            }
          }
        }
.start();
      }
 catch (      IOException e) {
        log.error(""String_Node_Str"",e);
      }
    }
  }
);
  updateForm.add(bar);
  bar.setVisible(false);
  updateForm.add(run);
  run.setVisible(false);
  updateForm.add(done);
  add(updateForm);
  setVisible(((DefaultManager)Manager.getInstance()).getAvailableUpdates().size() > 0 && Manager.getSecurityInstance().userHasPermission(((HeadsUpSession)Session.get()).getUser(),new AdminPermission(),null));
}",0.9717732580620216
189248,"public void run(){
  try {
    byte[] buffer=new byte[4096];
    long downloaded=0;
    InputStream in=conn.getInputStream();
    outFile=new File(org.headsupdev.agile.api.util.FileUtil.getTempDir(),new File(update.getFile()).getName());
    OutputStream out=new FileOutputStream(outFile);
    int chunk;
    while ((chunk=in.read(buffer)) > -1) {
      downloaded+=chunk;
      out.write(buffer,0,chunk);
      if (length > 0) {
        int prog=(int)(((double)downloaded / length) * 100);
        if (prog > 99) {
          prog=99;
        }
        progress=prog;
      }
    }
    in.close();
    out.close();
    outFile=new TarFile(new GZipFile(outFile).expand(true)).expand();
    File tmpDir=new File(outFile.getAbsolutePath() + ""String_Node_Str"");
    outFile.renameTo(tmpDir);
    File[] children=tmpDir.listFiles();
    outFile=new File(outFile.getParentFile(),outFile.getName());
    children[0].renameTo(outFile);
    tmpDir.delete();
    String version=new File(update.getFile()).getName();
    version=version.substring(0,version.indexOf(""String_Node_Str""));
    Event event=new SystemEvent(Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version,Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version+ ""String_Node_Str"",""String_Node_Str"" + Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str""+ version+ ""String_Node_Str""+ update.getDetails());
    Manager.getStorageInstance().addEvent(event);
    Manager.getInstance().fireEventAdded(event);
    Process chmodProcess=null;
    try {
      chmodProcess=Runtime.getRuntime().exec(""String_Node_Str"" + new File(outFile,""String_Node_Str"").getAbsolutePath());
      chmodProcess.waitFor();
    }
 catch (    InterruptedException e) {
    }
 finally {
      if (chmodProcess != null) {
        IOUtil.close(chmodProcess.getOutputStream());
        IOUtil.close(chmodProcess.getErrorStream());
        IOUtil.close(chmodProcess.getInputStream());
        chmodProcess.destroy();
      }
    }
    updateProperties(new File(new File(outFile,""String_Node_Str""),""String_Node_Str""));
    File mainDir=new File(""String_Node_Str"");
    File backupDir=new File(mainDir,""String_Node_Str"");
    if (backupDir.exists()) {
      for (      File child : backupDir.listFiles()) {
        FileUtil.delete(child);
      }
    }
 else {
      backupDir.mkdir();
    }
    for (    File child : mainDir.listFiles()) {
      if (child.equals(outFile)) {
        continue;
      }
      child.renameTo(new File(backupDir,child.getName()));
    }
    for (    File child : outFile.listFiles()) {
      child.renameTo(new File(mainDir,child.getName()));
    }
    outFile.delete();
    progress=100;
    restartThread.start();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}","public void run(){
  try {
    byte[] buffer=new byte[4096];
    long downloaded=0;
    InputStream in=connection.getInputStream();
    outFile=new File(org.headsupdev.agile.api.util.FileUtil.getTempDir(),new File(update.getFile()).getName());
    OutputStream out=new FileOutputStream(outFile);
    int chunk;
    while ((chunk=in.read(buffer)) > -1) {
      downloaded+=chunk;
      out.write(buffer,0,chunk);
      if (length > 0) {
        int prog=(int)(((double)downloaded / length) * 100);
        if (prog > 99) {
          prog=99;
        }
        progress=prog;
      }
    }
    in.close();
    out.close();
    outFile=new TarFile(new GZipFile(outFile).expand(true)).expand();
    File tmpDir=new File(outFile.getAbsolutePath() + ""String_Node_Str"");
    outFile.renameTo(tmpDir);
    File[] children=tmpDir.listFiles();
    outFile=new File(outFile.getParentFile(),outFile.getName());
    children[0].renameTo(outFile);
    tmpDir.delete();
    String version=new File(update.getFile()).getName();
    version=version.substring(0,version.indexOf(""String_Node_Str""));
    Event event=new SystemEvent(Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version,Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str"" + version+ ""String_Node_Str"",""String_Node_Str"" + Manager.getStorageInstance().getGlobalConfiguration().getProductName() + ""String_Node_Str""+ version+ ""String_Node_Str""+ update.getDetails());
    Manager.getStorageInstance().addEvent(event);
    Manager.getInstance().fireEventAdded(event);
    Process chmodProcess=null;
    try {
      chmodProcess=Runtime.getRuntime().exec(""String_Node_Str"" + new File(outFile,""String_Node_Str"").getAbsolutePath());
      chmodProcess.waitFor();
    }
 catch (    InterruptedException e) {
    }
 finally {
      if (chmodProcess != null) {
        IOUtil.close(chmodProcess.getOutputStream());
        IOUtil.close(chmodProcess.getErrorStream());
        IOUtil.close(chmodProcess.getInputStream());
        chmodProcess.destroy();
      }
    }
    updateProperties(new File(new File(outFile,""String_Node_Str""),""String_Node_Str""));
    File mainDir=new File(""String_Node_Str"");
    File backupDir=new File(mainDir,""String_Node_Str"");
    if (backupDir.exists()) {
      for (      File child : backupDir.listFiles()) {
        FileUtil.delete(child);
      }
    }
 else {
      backupDir.mkdir();
    }
    for (    File child : mainDir.listFiles()) {
      if (child.equals(outFile)) {
        continue;
      }
      child.renameTo(new File(backupDir,child.getName()));
    }
    for (    File child : outFile.listFiles()) {
      child.renameTo(new File(mainDir,child.getName()));
    }
    outFile.delete();
    progress=100;
    restartThread.start();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9989547038327526
189249,"protected void layoutChild(Form form){
  setSubmitLabel(""String_Node_Str"");
  form.add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",this));
}","protected void layoutChild(Form form){
  setSubmitLabel(""String_Node_Str"");
  form.add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",this));
  attachmentPanel.setRequired(true);
}",0.8902077151335311
189250,"protected void layoutChild(Form form){
  form.add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",this));
  setSubmitLabel(""String_Node_Str"");
}","protected void layoutChild(Form form){
  form.add(attachmentPanel=new AttachmentPanel(""String_Node_Str"",this));
  attachmentPanel.setRequired(true);
  setSubmitLabel(""String_Node_Str"");
}",0.8902077151335311
189251,"/** 
 * Cleanup after a debug running - this means removing any bundles from the cache that were loaded from the debug area.
 */
protected static void cleanDebug(){
  File cache=new File(""String_Node_Str"");
  for (  File bundle : cache.listFiles()) {
    if (!bundle.isDirectory()) {
      continue;
    }
    File location=new File(bundle,""String_Node_Str"");
    if (!location.exists()) {
      continue;
    }
    BufferedReader in=null;
    try {
      in=new BufferedReader(new FileReader(location));
      String jarFile=in.readLine();
      if (jarFile.startsWith(""String_Node_Str"")) {
        jarFile=jarFile.substring(5);
      }
      if (new File(jarFile).getParentFile().getName().equals(""String_Node_Str"")) {
        Main.delete(bundle);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","/** 
 * Cleanup after a debug running - this means removing any bundles from the cache that were loaded from the debug area.
 */
protected static void cleanDebug(){
  File cache=new File(""String_Node_Str"");
  for (  File bundle : cache.listFiles()) {
    if (!bundle.isDirectory()) {
      continue;
    }
    File location=new File(bundle,""String_Node_Str"");
    if (!location.exists()) {
      continue;
    }
    BufferedReader in=null;
    boolean delete=false;
    try {
      in=new BufferedReader(new FileReader(location));
      String jarFile=in.readLine();
      if (jarFile.startsWith(""String_Node_Str"")) {
        jarFile=jarFile.substring(5);
      }
      if (new File(jarFile).getParentFile().getName().equals(""String_Node_Str"")) {
        delete=true;
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
        }
      }
    }
    if (delete) {
      try {
        Main.delete(bundle);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}",0.9031950405340964
189252,"public IModel model(Object o){
  return new CompoundPropertyModel(o);
}","public IModel<T> model(Object o){
  return new CompoundPropertyModel<T>(o);
}",0.9594594594594594
189253,"private void sendEmail(User user,Submission submission,Map<String,Object> data){
  String subject=(String)data.get(""String_Node_Str"");
  String templatedMessage=templateUtility.compileString((String)data.get(""String_Node_Str""),submission);
  boolean sendRecipientEmail=data.get(""String_Node_Str"").equals(""String_Node_Str"");
  if (sendRecipientEmail) {
    boolean sendCCRecipientEmail=data.get(""String_Node_Str"").equals(""String_Node_Str"");
    SimpleMailMessage smm=new SimpleMailMessage();
    smm.setTo(((String)data.get(""String_Node_Str"")).split(""String_Node_Str""));
    if (sendCCRecipientEmail) {
      smm.setCc(((String)data.get(""String_Node_Str"")).split(""String_Node_Str""));
    }
    String preferedEmail=user.getSetting(""String_Node_Str"");
    user.getSetting(""String_Node_Str"");
    if (user.getSetting(""String_Node_Str"").equals(""String_Node_Str"")) {
      smm.setBcc(preferedEmail == null ? user.getEmail() : preferedEmail);
    }
    smm.setSubject(subject);
    smm.setText(templatedMessage);
    emailSender.send(smm);
  }
  actionLogRepo.createPublicLog(submission,user,subject + ""String_Node_Str"" + templatedMessage);
}","private void sendEmail(User user,Submission submission,Map<String,Object> data){
  String subject=(String)data.get(""String_Node_Str"");
  String templatedMessage=templateUtility.compileString((String)data.get(""String_Node_Str""),submission);
  boolean sendRecipientEmail=(boolean)data.get(""String_Node_Str"");
  if (sendRecipientEmail) {
    boolean sendCCRecipientEmail=(boolean)data.get(""String_Node_Str"");
    SimpleMailMessage smm=new SimpleMailMessage();
    smm.setTo(((String)data.get(""String_Node_Str"")).split(""String_Node_Str""));
    if (sendCCRecipientEmail) {
      smm.setCc(((String)data.get(""String_Node_Str"")).split(""String_Node_Str""));
    }
    String preferredEmail=user.getSetting(""String_Node_Str"");
    user.getSetting(""String_Node_Str"");
    if (user.getSetting(""String_Node_Str"") != null && user.getSetting(""String_Node_Str"").equals(""String_Node_Str"")) {
      smm.setBcc(preferredEmail == null ? user.getEmail() : preferredEmail);
    }
    smm.setSubject(subject);
    smm.setText(templatedMessage);
    emailSender.send(smm);
  }
  actionLogRepo.createPublicLog(submission,user,subject + ""String_Node_Str"" + templatedMessage);
}",0.9339746392654132
189254,"@Transactional @RequestMapping(value=""String_Node_Str"") @PreAuthorize(""String_Node_Str"") public ApiResponse batchComment(@WeaverUser User user,@RequestBody Map<String,Object> data){
  submissionRepo.batchDynamicSubmissionQuery(user.getActiveFilter(),user.getSubmissionViewColumns()).forEach(sub -> {
    Map<String,Object> subMessage=new HashMap<String,Object>(data);
    if (data.get(""String_Node_Str"").equals(""String_Node_Str"") || data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      subMessage.put(""String_Node_Str"",findEmailValue(sub,subMessage.get(""String_Node_Str"").toString()));
      subMessage.put(""String_Node_Str"",findEmailValue(sub,subMessage.get(""String_Node_Str"").toString()));
    }
    addComment(user,sub.getId(),subMessage);
  }
);
  return new ApiResponse(SUCCESS);
}","@Transactional @RequestMapping(value=""String_Node_Str"") @PreAuthorize(""String_Node_Str"") public ApiResponse batchComment(@WeaverUser User user,@RequestBody Map<String,Object> data){
  submissionRepo.batchDynamicSubmissionQuery(user.getActiveFilter(),user.getSubmissionViewColumns()).forEach(sub -> {
    Map<String,Object> subMessage=new HashMap<String,Object>(data);
    if ((boolean)data.get(""String_Node_Str"") || (boolean)data.get(""String_Node_Str"")) {
      subMessage.put(""String_Node_Str"",findEmailValue(sub,subMessage.get(""String_Node_Str"").toString()));
      subMessage.put(""String_Node_Str"",findEmailValue(sub,subMessage.get(""String_Node_Str"").toString()));
    }
    addComment(user,sub.getId(),subMessage);
  }
);
  return new ApiResponse(SUCCESS);
}",0.9345314505776636
189255,"@ApiMapping(""String_Node_Str"") @ApiValidation(business={@ApiValidation.Business(value=RESET)}) public ApiResponse resetSetting(@ApiValidatedModel Configuration configuration){
  logger.info(""String_Node_Str"" + configuration.getName() + ""String_Node_Str""+ configuration.getValue());
  configuration=configurationRepo.reset(configuration);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,configurationRepo.findAll()));
  return new ApiResponse(SUCCESS,configuration);
}","@ApiMapping(""String_Node_Str"") @ApiValidation(business={@ApiValidation.Business(value=RESET)}) public ApiResponse resetSetting(@ApiValidatedModel Configuration configuration){
  logger.info(""String_Node_Str"" + configuration.getName() + ""String_Node_Str""+ configuration.getValue());
  configuration=configurationRepo.reset(configuration);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,configuration));
  return new ApiResponse(SUCCESS,configuration);
}",0.9858012170385396
189256,"@ApiMapping(""String_Node_Str"") @ApiValidation(business={@ApiValidation.Business(value=UPDATE),@ApiValidation.Business(value=NONEXISTS)}) public ApiResponse updateSetting(@ApiValidatedModel Configuration configuration){
  logger.info(""String_Node_Str"" + configuration.getName() + ""String_Node_Str""+ configuration.getValue());
  configuration=configurationRepo.save(configuration);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,configurationRepo.findAll()));
  return new ApiResponse(SUCCESS,configuration);
}","@ApiMapping(""String_Node_Str"") @ApiValidation(business={@ApiValidation.Business(value=UPDATE),@ApiValidation.Business(value=NONEXISTS)}) public ApiResponse updateSetting(@ApiValidatedModel Configuration configuration){
  logger.info(""String_Node_Str"" + configuration.getName() + ""String_Node_Str""+ configuration.getValue());
  configuration=configurationRepo.save(configuration);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,configuration));
  return new ApiResponse(SUCCESS,configuration);
}",0.9869158878504672
189257,"@Transactional @ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse deleteSubmission(@ApiCredentials Credentials credentials,@ApiVariable Long submissionId){
  Submission submissionToDelete=submissionRepo.findOne(submissionId);
  ApiResponse response=new ApiResponse(SUCCESS);
  if (!submissionToDelete.getSubmitter().getEmail().equals(credentials.getEmail()) || AppRole.valueOf(credentials.getRole()).ordinal() < AppRole.MANAGER.ordinal()) {
    response=new ApiResponse(ERROR,""String_Node_Str"");
  }
 else {
    submissionRepo.delete(submissionId);
  }
  return response;
}","@Transactional @ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse deleteSubmission(@ApiCredentials Credentials credentials,@ApiVariable Long submissionId){
  Submission submissionToDelete=submissionRepo.findOne(submissionId);
  ApiResponse response=new ApiResponse(SUCCESS);
  if (!submissionToDelete.getSubmitter().getEmail().equals(credentials.getEmail())) {
    response=new ApiResponse(ERROR,""String_Node_Str"");
  }
 else {
    submissionRepo.delete(submissionId);
  }
  return response;
}",0.9288256227758008
189258,"@ApiMapping(value=""String_Node_Str"") @Auth(role=""String_Node_Str"") public void submissionFile(HttpServletResponse response,@ApiCredentials Credentials credentials,@ApiData Map<String,String> requestData) throws IOException {
  response.addHeader(""String_Node_Str"",""String_Node_Str"");
  String uri=requestData.get(""String_Node_Str"");
  Path path=fileIOUtility.getAbsolutePath(uri);
  Files.copy(path,response.getOutputStream());
  response.getOutputStream().flush();
}","@ApiMapping(value=""String_Node_Str"") public void submissionFile(HttpServletResponse response,@ApiData Map<String,String> requestData) throws IOException {
  response.addHeader(""String_Node_Str"",""String_Node_Str"");
  String uri=requestData.get(""String_Node_Str"");
  Path path=fileIOUtility.getAbsolutePath(uri);
  Files.copy(path,response.getOutputStream());
  response.getOutputStream().flush();
}",0.9189814814814816
189259,"@ApiMapping(""String_Node_Str"") @Transactional public ApiResponse updateAdvisorApproval(@ApiCredentials Credentials credentials,@ApiVariable Long submissionId,@ApiData JsonNode dataNode){
  Submission submission=submissionRepo.findOne(submissionId);
  JsonNode approveApplicationNode=dataNode.get(""String_Node_Str"");
  JsonNode approveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode messageNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveApplicationNode=dataNode.get(""String_Node_Str"");
  if (approveApplicationNode != null) {
    submission.setApproveApplication(approveApplicationNode.asBoolean());
    String approveApplicationMessage=approveApplicationNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createPublicLog(submission,credentials,approveApplicationMessage);
  }
  if (approveEmbargoNode != null) {
    submission.setApproveEmbargo(approveEmbargoNode.asBoolean());
    String approveEmbargoMessage=approveEmbargoNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createPublicLog(submission,credentials,approveEmbargoMessage);
  }
  if (clearApproveEmbargoNode != null && clearApproveEmbargoNode.asBoolean()) {
    submission.clearApproveEmbargo();
    actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"");
  }
  if (clearApproveApplicationNode != null && clearApproveApplicationNode.asBoolean()) {
    submission.clearApproveApplication();
    actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"");
  }
  if (messageNode != null)   actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"" + messageNode.asText());
  return new ApiResponse(SUCCESS,submission);
}","@ApiMapping(""String_Node_Str"") @Transactional public ApiResponse updateAdvisorApproval(@ApiVariable Long submissionId,@ApiData JsonNode dataNode){
  Submission submission=submissionRepo.findOne(submissionId);
  JsonNode approveApplicationNode=dataNode.get(""String_Node_Str"");
  JsonNode approveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode messageNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveApplicationNode=dataNode.get(""String_Node_Str"");
  if (approveApplicationNode != null) {
    submission.setApproveApplication(approveApplicationNode.asBoolean());
    String approveApplicationMessage=approveApplicationNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createAdvisorPublicLog(submission,approveApplicationMessage);
  }
  if (approveEmbargoNode != null) {
    submission.setApproveEmbargo(approveEmbargoNode.asBoolean());
    String approveEmbargoMessage=approveEmbargoNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createAdvisorPublicLog(submission,approveEmbargoMessage);
  }
  if (clearApproveEmbargoNode != null && clearApproveEmbargoNode.asBoolean()) {
    submission.clearApproveEmbargo();
    actionLogRepo.createAdvisorPublicLog(submission,""String_Node_Str"");
  }
  if (clearApproveApplicationNode != null && clearApproveApplicationNode.asBoolean()) {
    submission.clearApproveApplication();
    actionLogRepo.createAdvisorPublicLog(submission,""String_Node_Str"");
  }
  if (messageNode != null)   actionLogRepo.createAdvisorPublicLog(submission,""String_Node_Str"" + messageNode.asText());
  return new ApiResponse(SUCCESS,submission);
}",0.946031746031746
189260,"@ApiMapping(value=""String_Node_Str"") public ApiResponse submissionFileInfo(@ApiCredentials Credentials credentials,@ApiData Map<String,String> requestData) throws IOException {
  return new ApiResponse(SUCCESS,fileIOUtility.getFileInfo(requestData.get(""String_Node_Str"")));
}","@ApiMapping(value=""String_Node_Str"") public ApiResponse submissionFileInfo(@ApiData Map<String,String> requestData) throws IOException {
  return new ApiResponse(SUCCESS,fileIOUtility.getFileInfo(requestData.get(""String_Node_Str"")));
}",0.9215686274509804
189261,"public ActionLog(SubmissionState submissionState,User user,Calendar actionDate,String entry,boolean privateFlag){
  this();
  this.submissionState=submissionState;
  this.user=user;
  this.actionDate=actionDate;
  this.entry=entry;
  this.privateFlag=privateFlag;
}","public ActionLog(SubmissionState submissionState,Calendar actionDate,String entry,boolean privateFlag){
  this();
  this.submissionState=submissionState;
  this.actionDate=actionDate;
  this.entry=entry;
  this.privateFlag=privateFlag;
}",0.9442231075697212
189262,"public ActionLog create(Submission submission,User user,Calendar actionDate,String entry,boolean privateFlag);","public ActionLog create(Submission submission,Calendar actionDate,String entry,boolean privateFlag);",0.9523809523809524
189263,"@Override public ActionLog create(Submission submission,User user,Calendar actionDate,String entry,boolean privateFlag){
  ActionLog log=actionLogRepo.save(new ActionLog(submission.getSubmissionState(),user,actionDate,entry,privateFlag));
  submission.addActionLog(log);
  submissionRepo.save(submission);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"" + submission.getId() + ""String_Node_Str"",new ApiResponse(SUCCESS,log));
  return log;
}","@Override public ActionLog create(Submission submission,Calendar actionDate,String entry,boolean privateFlag){
  ActionLog log=actionLogRepo.save(new ActionLog(submission.getSubmissionState(),actionDate,entry,privateFlag));
  submission.addActionLog(log);
  submissionRepo.save(submission);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"" + submission.getId() + ""String_Node_Str"",new ApiResponse(SUCCESS,log));
  return log;
}",0.9830508474576272
189264,"@ApiMapping(""String_Node_Str"") @Transactional public ApiResponse updateAdvisorApproval(@ApiCredentials Credentials credentials,@ApiVariable Long submissionId,@ApiData JsonNode dataNode){
  Submission submission=submissionRepo.findOne(submissionId);
  System.out.println(dataNode);
  JsonNode approveApplicationNode=dataNode.get(""String_Node_Str"");
  JsonNode approveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode messageNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveApplicationNode=dataNode.get(""String_Node_Str"");
  if (approveApplicationNode != null) {
    submission.setApproveApplication(approveApplicationNode.asBoolean());
    String approveApplicationMessage=approveApplicationNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createPublicLog(submission,credentials,approveApplicationMessage);
  }
  if (approveEmbargoNode != null) {
    submission.setApproveEmbargo(approveEmbargoNode.asBoolean());
    String approveEmbargoMessage=approveEmbargoNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createPublicLog(submission,credentials,approveEmbargoMessage);
  }
  if (clearApproveEmbargoNode != null && clearApproveEmbargoNode.asBoolean()) {
    submission.clearApproveEmbargo();
    actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"");
  }
  if (clearApproveApplicationNode != null && clearApproveApplicationNode.asBoolean()) {
    submission.clearApproveEmbargo();
    actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"");
  }
  if (messageNode != null)   actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"" + messageNode.asText());
  return new ApiResponse(SUCCESS);
}","@ApiMapping(""String_Node_Str"") @Transactional public ApiResponse updateAdvisorApproval(@ApiCredentials Credentials credentials,@ApiVariable Long submissionId,@ApiData JsonNode dataNode){
  Submission submission=submissionRepo.findOne(submissionId);
  System.out.println(dataNode);
  JsonNode approveApplicationNode=dataNode.get(""String_Node_Str"");
  JsonNode approveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode messageNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveEmbargoNode=dataNode.get(""String_Node_Str"");
  JsonNode clearApproveApplicationNode=dataNode.get(""String_Node_Str"");
  if (approveApplicationNode != null) {
    submission.setApproveApplication(approveApplicationNode.asBoolean());
    String approveApplicationMessage=approveApplicationNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createPublicLog(submission,credentials,approveApplicationMessage);
  }
  if (approveEmbargoNode != null) {
    submission.setApproveEmbargo(approveEmbargoNode.asBoolean());
    String approveEmbargoMessage=approveEmbargoNode.asBoolean() ? ""String_Node_Str"" : ""String_Node_Str"";
    actionLogRepo.createPublicLog(submission,credentials,approveEmbargoMessage);
  }
  if (clearApproveEmbargoNode != null && clearApproveEmbargoNode.asBoolean()) {
    submission.clearApproveEmbargo();
    actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"");
  }
  if (clearApproveApplicationNode != null && clearApproveApplicationNode.asBoolean()) {
    submission.clearApproveApplication();
    actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"");
  }
  if (messageNode != null)   actionLogRepo.createPublicLog(submission,credentials,""String_Node_Str"" + messageNode.asText());
  return new ApiResponse(SUCCESS,submission);
}",0.9918971779826768
189265,"public void clearApproveApplication(){
  this.approveApplicationDate=null;
  this.approveApplication=null;
}","public void clearApproveApplication(){
  this.approveApplicationDate=null;
  this.approveApplication=false;
}",0.967741935483871
189266,"public void clearApproveEmbargo(){
  this.approveEmbargoDate=null;
  this.approveEmbargo=null;
}","public void clearApproveEmbargo(){
  this.approveEmbargoDate=null;
  this.approveEmbargo=false;
}",0.9637305699481864
189267,"@Override @Transactional public SubmissionFieldProfile create(FieldProfile fieldProfile){
  SubmissionFieldProfile submissionfieldProfile=submissionFieldProfileRepo.findByFieldPredicateAndInputTypeAndRepeatableAndOptionalAndUsageAndHelp(fieldProfile.getFieldPredicate(),fieldProfile.getInputType(),fieldProfile.getRepeatable(),fieldProfile.getOptional(),fieldProfile.getUsage(),fieldProfile.getHelp());
  if (submissionfieldProfile == null) {
    submissionfieldProfile=new SubmissionFieldProfile();
    submissionfieldProfile.setFieldPredicate(fieldProfile.getFieldPredicate());
    submissionfieldProfile.setControlledVocabularies(new ArrayList<ControlledVocabulary>(fieldProfile.getControlledVocabularies()));
    submissionfieldProfile.setFieldGlosses(new ArrayList<FieldGloss>(fieldProfile.getFieldGlosses()));
    submissionfieldProfile.setHelp(fieldProfile.getHelp());
    submissionfieldProfile.setInputType(fieldProfile.getInputType());
    submissionfieldProfile.setOptional(fieldProfile.getOptional());
    submissionfieldProfile.setRepeatable(fieldProfile.getRepeatable());
    submissionfieldProfile.setUsage(fieldProfile.getUsage());
    submissionfieldProfile.setMappedShibAttribute(fieldProfile.getMappedShibAttribute());
    submissionfieldProfile=submissionFieldProfileRepo.save(submissionfieldProfile);
  }
  return submissionfieldProfile;
}","@Override @Transactional public SubmissionFieldProfile create(FieldProfile fieldProfile){
  SubmissionFieldProfile submissionfieldProfile=submissionFieldProfileRepo.findByFieldPredicateAndInputTypeAndRepeatableAndOptionalAndUsageAndHelpAndMappedShibAttribute(fieldProfile.getFieldPredicate(),fieldProfile.getInputType(),fieldProfile.getRepeatable(),fieldProfile.getOptional(),fieldProfile.getUsage(),fieldProfile.getHelp(),fieldProfile.getMappedShibAttribute());
  if (submissionfieldProfile == null) {
    submissionfieldProfile=new SubmissionFieldProfile();
    submissionfieldProfile.setFieldPredicate(fieldProfile.getFieldPredicate());
    submissionfieldProfile.setControlledVocabularies(new ArrayList<ControlledVocabulary>(fieldProfile.getControlledVocabularies()));
    submissionfieldProfile.setFieldGlosses(new ArrayList<FieldGloss>(fieldProfile.getFieldGlosses()));
    submissionfieldProfile.setHelp(fieldProfile.getHelp());
    submissionfieldProfile.setInputType(fieldProfile.getInputType());
    submissionfieldProfile.setOptional(fieldProfile.getOptional());
    submissionfieldProfile.setRepeatable(fieldProfile.getRepeatable());
    submissionfieldProfile.setUsage(fieldProfile.getUsage());
    submissionfieldProfile.setMappedShibAttribute(fieldProfile.getMappedShibAttribute());
    submissionfieldProfile=submissionFieldProfileRepo.save(submissionfieldProfile);
  }
  return submissionfieldProfile;
}",0.9784172661870504
189268,"public void writeImage(InputStream stream,String filePath) throws IOException {
  String inputData=IOUtils.toString(stream,""String_Node_Str"");
  String[] imageData=inputData.split(""String_Node_Str"");
  String[] encodedData=imageData[1].split(""String_Node_Str"");
  String[] mimeData=imageData[0].split(""String_Node_Str"");
  String fileExtension=mimeData[1].split(""String_Node_Str"")[1];
  BufferedImage image=ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(encodedData[1])));
  ImageIO.write(image,fileExtension,Files.newOutputStream(Paths.get(Application.BASE_PATH + filePath)));
}","public void writeImage(InputStream stream,String relativePath) throws IOException {
  String inputData=IOUtils.toString(stream,""String_Node_Str"");
  String[] imageData=inputData.split(""String_Node_Str"");
  String[] encodedData=imageData[1].split(""String_Node_Str"");
  String[] mimeData=imageData[0].split(""String_Node_Str"");
  String fileExtension=mimeData[1].split(""String_Node_Str"")[1];
  BufferedImage image=ImageIO.read(new ByteArrayInputStream(Base64.getDecoder().decode(encodedData[1])));
  Path path=Paths.get(getPath(relativePath));
  Path parentDir=path.getParent();
  if (!Files.exists(parentDir)) {
    Files.createDirectories(parentDir);
  }
  ImageIO.write(image,fileExtension,Files.newOutputStream(path));
}",0.8361153262518968
189269,"public void write(InputStream is,String filePath) throws IOException {
  byte[] bytes=IOUtils.toByteArray(is);
  write(bytes,filePath);
}","public void write(InputStream is,String path) throws IOException {
  byte[] bytes=IOUtils.toByteArray(is);
  write(bytes,path);
}",0.9548872180451128
189270,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @ApiValidation(business={@ApiValidation.Business(value=UPDATE),@ApiValidation.Business(value=NONEXISTS)}) public ApiResponse updateRole(@ApiValidatedModel User user){
  User persistedUser=userRepo.findOne(user.getId());
  if (persistedUser != null) {
    user.setPassword(persistedUser.getPassword());
  }
  logger.info(""String_Node_Str"" + user.getEmail());
  user=userRepo.save(user);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,userRepo.findAll()));
  return new ApiResponse(SUCCESS,user);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @ApiValidation(business={@ApiValidation.Business(value=UPDATE),@ApiValidation.Business(value=NONEXISTS)}) public ApiResponse updateRole(@ApiValidatedModel User user){
  User persistedUser=userRepo.findOne(user.getId());
  if (persistedUser != null) {
    user.setPassword(persistedUser.getPassword());
    user.setActiveFilter(persistedUser.getActiveFilter());
  }
  logger.info(""String_Node_Str"" + user.getEmail());
  user=userRepo.save(user);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,userRepo.findAll()));
  return new ApiResponse(SUCCESS,user);
}",0.95245769540693
189271,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse setActiveFilter(@ApiCredentials Credentials credentials,@ApiValidatedModel NamedSearchFilter filter){
  User user=userRepo.findByEmail(credentials.getEmail());
  List<Long> ids=new ArrayList<Long>();
  user.getActiveFilter().getFilterCriteria().forEach(filterCriterion -> {
    ids.add(filterCriterion.getId());
  }
);
  user.getActiveFilter().getFilterCriteria().clear();
  user=userRepo.save(user);
  ids.forEach(id -> {
    filterCriterionRepo.delete(id);
  }
);
  NamedSearchFilter activeFilter=user.getActiveFilter();
  activeFilter=namedSearchFilterRepo.clone(activeFilter,filter);
  user=userRepo.save(user);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"" + user.getActiveFilter().getId(),new ApiResponse(SUCCESS,user.getActiveFilter()));
  return new ApiResponse(SUCCESS);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse setActiveFilter(@ApiCredentials Credentials credentials,@ApiValidatedModel NamedSearchFilter filter){
  User user=userRepo.findByEmail(credentials.getEmail());
  List<Long> ids=new ArrayList<Long>();
  user.getActiveFilter().getFilterCriteria().forEach(filterCriterion -> {
    ids.add(filterCriterion.getId());
  }
);
  user.getActiveFilter().getFilterCriteria().clear();
  user=userRepo.save(user);
  ids.forEach(id -> {
    filterCriterionRepo.delete(id);
  }
);
  NamedSearchFilter activeFilter=user.getActiveFilter();
  activeFilter=namedSearchFilterRepo.clone(activeFilter,filter);
  if (activeFilter.getColumnsFlag()) {
    user.getSubmissionViewColumns().clear();
    user.getSubmissionViewColumns().addAll(user.getActiveFilter().getSavedColumns());
  }
  user=userRepo.save(user);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"" + user.getActiveFilter().getId(),new ApiResponse(SUCCESS,user.getActiveFilter()));
  return new ApiResponse(SUCCESS);
}",0.9092805005213764
189272,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse saveFilterCriteria(@ApiCredentials Credentials credentials,@ApiValidatedModel NamedSearchFilter namedSearchFilter){
  User user=userRepo.findByEmail(credentials.getEmail());
  NamedSearchFilter existingFilter=namedSearchFilterRepo.findByNameAndPublicFlagTrue(namedSearchFilter.getName());
  if (existingFilter != null) {
    existingFilter=namedSearchFilterRepo.clone(existingFilter,namedSearchFilter);
    user=userRepo.findByEmail(credentials.getEmail());
  }
 else {
    boolean foundFilter=false;
    for (    NamedSearchFilter filter : user.getSavedFilters()) {
      if (filter.getName().equals(namedSearchFilter.getName())) {
        filter.getFilterCriteria().clear();
        filter=namedSearchFilterRepo.clone(filter,namedSearchFilter);
        foundFilter=true;
        break;
      }
    }
    if (!foundFilter) {
      System.out.println(""String_Node_Str"");
      user.getSavedFilters().add(namedSearchFilterRepo.createFromFilter(namedSearchFilter));
    }
  }
  userRepo.save(user);
  return new ApiResponse(SUCCESS);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse saveFilterCriteria(@ApiCredentials Credentials credentials,@ApiValidatedModel NamedSearchFilter namedSearchFilter){
  User user=userRepo.findByEmail(credentials.getEmail());
  NamedSearchFilter existingFilter=namedSearchFilterRepo.findByNameAndPublicFlagTrue(namedSearchFilter.getName());
  if (existingFilter != null) {
    existingFilter=namedSearchFilterRepo.clone(existingFilter,namedSearchFilter);
    user=userRepo.findByEmail(credentials.getEmail());
  }
 else {
    boolean foundFilter=false;
    for (    NamedSearchFilter filter : user.getSavedFilters()) {
      if (filter.getName().equals(namedSearchFilter.getName())) {
        filter.getFilterCriteria().clear();
        filter=namedSearchFilterRepo.clone(filter,namedSearchFilter);
        foundFilter=true;
        break;
      }
    }
    if (!foundFilter) {
      user.getSavedFilters().add(namedSearchFilterRepo.createFromFilter(namedSearchFilter));
    }
  }
  userRepo.save(user);
  return new ApiResponse(SUCCESS);
}",0.9793672627235214
189273,"public NamedSearchFilter clone(NamedSearchFilter newNamedSearchFilter,NamedSearchFilter namedSearchFilter){
  newNamedSearchFilter.setPublicFlag(namedSearchFilter.getPublicFlag());
  newNamedSearchFilter.setUmiRelease(namedSearchFilter.getUmiRelease());
  newNamedSearchFilter.setColumnsFlag(namedSearchFilter.getColumnsFlag());
  namedSearchFilter.getFilterCriteria().forEach(filterCriterion -> {
    newNamedSearchFilter.addFilterCriterion(filterCriterionRepo.cloneFilterCriterion(filterCriterion));
  }
);
  namedSearchFilter.getSavedColumns().forEach(column -> {
    newNamedSearchFilter.addSavedColumn(column);
  }
);
  return newNamedSearchFilter;
}","public NamedSearchFilter clone(NamedSearchFilter newNamedSearchFilter,NamedSearchFilter namedSearchFilter){
  newNamedSearchFilter.setPublicFlag(namedSearchFilter.getPublicFlag());
  newNamedSearchFilter.setUmiRelease(namedSearchFilter.getUmiRelease());
  newNamedSearchFilter.setColumnsFlag(namedSearchFilter.getColumnsFlag());
  namedSearchFilter.getFilterCriteria().forEach(filterCriterion -> {
    newNamedSearchFilter.addFilterCriterion(filterCriterionRepo.cloneFilterCriterion(filterCriterion));
  }
);
  if (newNamedSearchFilter.getColumnsFlag()) {
    namedSearchFilter.getSavedColumns().forEach(column -> {
      newNamedSearchFilter.addSavedColumn(column);
    }
);
  }
  return newNamedSearchFilter;
}",0.958302852962692
189274,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse updateSubmission(@ApiVariable(""String_Node_Str"") Long submissionId,@ApiModel FieldValue fieldValue){
  Submission submission=submissionRepo.findOne(submissionId);
  if (fieldValue.getId() == null) {
    submission.addFieldValue(fieldValue);
    submission=submissionRepo.save(submission);
    fieldValue.getPredicate();
    fieldValue=submission.getFieldValueByValueAndPredicate(fieldValue.getValue(),fieldValue.getPredicate());
  }
 else {
    fieldValue=fieldValueRepo.save(fieldValue);
    submission=submissionRepo.findOne(submissionId);
  }
  return new ApiResponse(SUCCESS,fieldValue);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse updateSubmission(@ApiVariable(""String_Node_Str"") Long submissionId,@ApiModel FieldValue fieldValue){
  Submission submission=submissionRepo.findOne(submissionId);
  if (fieldValue.getId() == null) {
    submission.addFieldValue(fieldValue);
    submission=submissionRepo.save(submission);
    System.out.println(""String_Node_Str"" + fieldValue.getValue() + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + fieldValue.getValue().equals(""String_Node_Str"") + ""String_Node_Str"");
    System.out.println(""String_Node_Str"" + fieldValue.getPredicate() + ""String_Node_Str"");
    fieldValue=submission.getFieldValueByValueAndPredicate(fieldValue.getValue().equals(""String_Node_Str"") ? ""String_Node_Str"" : fieldValue.getValue(),fieldValue.getPredicate());
  }
 else {
    fieldValue=fieldValueRepo.save(fieldValue);
    submission=submissionRepo.findOne(submissionId);
  }
  return new ApiResponse(SUCCESS,fieldValue);
}",0.8065650644783119
189275,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse createFieldProfile(@ApiVariable String workflowStepId,@Data String data) throws NumberFormatException, WorkflowStepNonOverrideableException, JsonProcessingException {
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  Long reqOrgId=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  FieldGloss gloss=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldGloss.class);
  ControlledVocabulary controlledVocabulary=dataNode.get(""String_Node_Str"") != null ? objectMapper.treeToValue(dataNode.get(""String_Node_Str""),ControlledVocabulary.class) : null;
  FieldPredicate predicate=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldPredicate.class);
  InputType inputType=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),InputType.class);
  Boolean repeatable=dataNode.get(""String_Node_Str"") != null ? Boolean.parseBoolean(dataNode.get(""String_Node_Str"").toString()) : false;
  String help=dataNode.get(""String_Node_Str"") != null ? dataNode.get(""String_Node_Str"").textValue() : null;
  String usage=""String_Node_Str"";
  WorkflowStep workflowStep=workflowStepRepo.findOne(Long.parseLong(workflowStepId));
  FieldProfile createdProfile=fieldProfileRepo.create(workflowStep,predicate,inputType,usage,help,repeatable,true,true,true);
  createdProfile.addControlledVocabulary(controlledVocabulary);
  createdProfile.addFieldGloss(gloss);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,organizationRepo.findOne(reqOrgId)));
  return new ApiResponse(SUCCESS,fieldProfileRepo.save(createdProfile));
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse createFieldProfile(@ApiVariable String workflowStepId,@Data String data) throws NumberFormatException, WorkflowStepNonOverrideableException, JsonProcessingException {
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  Long reqOrgId=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  FieldGloss gloss=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldGloss.class);
  ControlledVocabulary controlledVocabulary=dataNode.get(""String_Node_Str"") != null ? objectMapper.treeToValue(dataNode.get(""String_Node_Str""),ControlledVocabulary.class) : null;
  FieldPredicate predicate=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldPredicate.class);
  InputType inputType=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),InputType.class);
  Boolean repeatable=dataNode.get(""String_Node_Str"") != null ? Boolean.parseBoolean(dataNode.get(""String_Node_Str"").toString()) : false;
  String help=dataNode.get(""String_Node_Str"") != null ? dataNode.get(""String_Node_Str"").textValue() : null;
  String usage=dataNode.get(""String_Node_Str"") != null ? dataNode.get(""String_Node_Str"").textValue() : ""String_Node_Str"";
  WorkflowStep workflowStep=workflowStepRepo.findOne(Long.parseLong(workflowStepId));
  Organization requestingOrganization=organizationRepo.findOne(reqOrgId);
  if (!requestingOrganization.getId().equals(workflowStep.getOriginatingOrganization().getId())) {
    workflowStep=workflowStepRepo.update(workflowStep,requestingOrganization);
  }
  FieldProfile createdProfile=fieldProfileRepo.create(workflowStep,predicate,inputType,usage,help,repeatable,true,true,true);
  createdProfile.addControlledVocabulary(controlledVocabulary);
  createdProfile.addFieldGloss(gloss);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,organizationRepo.findOne(reqOrgId)));
  return new ApiResponse(SUCCESS,fieldProfileRepo.save(createdProfile));
}",0.9122896481387048
189276,"public SubmissionNote(WorkflowStep originatingWorkflowStep,String name,String text){
  this(name,text);
  setOriginatingWorkflowStep(originatingWorkflowStep);
}","public SubmissionNote(String name,String text){
  setName(name);
  setText(text);
}",0.5925925925925926
189277,"@Override public void testCreate(){
  SubmissionWorkflowStep sws=submissionWorkflowStepRepo.findOrCreate(organization,workflowStep);
  assertEquals(""String_Node_Str"",1,submissionWorkflowStepRepo.count());
  assertFalse(""String_Node_Str"",fieldProfile.equals(sws.getAggregateFieldProfiles().get(0)));
  assertEquals(""String_Node_Str"",fieldProfile.getPredicate(),sws.getAggregateFieldProfiles().get(0).getPredicate());
  assertEquals(""String_Node_Str"",fieldProfile.getInputType(),sws.getAggregateFieldProfiles().get(0).getInputType());
}","@Override public void testCreate(){
}",0.1295971978984238
189278,"@Override public void testDuplication(){
  SubmissionWorkflowStep sws=submissionWorkflowStepRepo.findOrCreate(organization,workflowStep);
  SubmissionWorkflowStep sws2=submissionWorkflowStepRepo.findOrCreate(organization,workflowStep);
  assertEquals(""String_Node_Str"",sws.getId(),sws2.getId());
}","@Override public void testDuplication(){
}",0.247787610619469
189279,"/** 
 * Write a the provided submission and all associated action logs to the index writer. This method expects that the submission and action logs have been removed from the index, either through a specific delete, or a delete all in the case of rebuilding the index. This method is used to share code between the various index job implementations so that submissions are written the same no matter who indexes them first.
 * @param writer The index writer.
 * @param sub The submission to index.
 */
public void indexSubmission(IndexWriter writer,Submission sub) throws CorruptIndexException, IOException {
  StringBuilder searchText=new StringBuilder();
  long subId=sub.getId();
  String state=sub.getState().getDisplayName();
  searchText.append(state).append(""String_Node_Str"");
  long searchAssigned=0;
  String sortAssigned=""String_Node_Str"";
  if (sub.getAssignee() != null) {
    searchAssigned=sub.getAssignee().getId();
    sortAssigned=sub.getAssignee().getFormattedName(NameFormat.LAST_FIRST_MIDDLE_BIRTH);
    searchText.append(sortAssigned).append(""String_Node_Str"");
  }
  Date graduationSemester=null;
  if (sub.getGraduationYear() != null) {
    Calendar cal=Calendar.getInstance();
    cal.clear();
    cal.set(Calendar.YEAR,sub.getGraduationYear());
    if (sub.getGraduationMonth() != null)     cal.set(Calendar.MONTH,sub.getGraduationMonth());
    graduationSemester=cal.getTime();
  }
  Date defenseDate=sub.getDefenseDate();
  String department=sub.getDepartment();
  String program=sub.getProgram();
  String college=sub.getCollege();
  String major=sub.getMajor();
  searchText.append(department).append(""String_Node_Str"").append(program).append(""String_Node_Str"").append(college).append(""String_Node_Str"").append(major).append(""String_Node_Str"");
  String embargos=""String_Node_Str"";
  if (sub.getEmbargoTypes().size() > 0) {
    for (    EmbargoType embargo : sub.getEmbargoTypes())     embargos+=embargo.getName() + ""String_Node_Str"";
  }
  searchText.append(embargos).append(""String_Node_Str"");
  String degree=sub.getDegree();
  String documentType=sub.getDocumentType();
  searchText.append(degree).append(""String_Node_Str"").append(documentType).append(""String_Node_Str"");
  Date submissionDate=sub.getSubmissionDate();
  String studentName=""String_Node_Str"";
  if (sub.getStudentLastName() != null)   studentName+=sub.getStudentLastName() + ""String_Node_Str"";
  if (sub.getStudentFirstName() != null)   studentName+=sub.getStudentFirstName() + ""String_Node_Str"";
  if (sub.getStudentMiddleName() != null)   studentName+=sub.getStudentMiddleName() + ""String_Node_Str"";
  searchText.append(studentName).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.LAST_FIRST_BIRTH)).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.FIRST_LAST_BIRTH)).append(""String_Node_Str"");
  String studentEmail=sub.getSubmitter().getEmail();
  searchText.append(studentEmail).append(""String_Node_Str"");
  String institutionalIdentifier=sub.getSubmitter().getInstitutionalIdentifier();
  searchText.append(institutionalIdentifier).append(""String_Node_Str"");
  String documentTitle=sub.getDocumentTitle();
  String documentAbstract=sub.getDocumentAbstract();
  String documentKeywords=sub.getDocumentKeywords();
  searchText.append(documentTitle).append(""String_Node_Str"").append(documentAbstract).append(""String_Node_Str"").append(documentKeywords).append(""String_Node_Str"");
  String documentSubjects=""String_Node_Str"";
  for (  String subject : sub.getDocumentSubjects()) {
    documentSubjects+=subject + ""String_Node_Str"";
  }
  searchText.append(documentSubjects).append(""String_Node_Str"");
  String documentLanguage=null;
  if (sub.getDocumentLanguageLocale() != null) {
    Locale locale=sub.getDocumentLanguageLocale();
    searchText.append(locale.getDisplayName()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayLanguage()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayCountry()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayVariant()).append(""String_Node_Str"");
    documentLanguage=locale.getDisplayName();
  }
  String publishedMaterial=sub.getPublishedMaterial();
  searchText.append(publishedMaterial).append(""String_Node_Str"");
  String primaryDocument=null;
  if (sub.getPrimaryDocument() != null) {
    primaryDocument=sub.getPrimaryDocument().getName();
    searchText.append(primaryDocument).append(""String_Node_Str"");
  }
  Date licenseAgreementDate=sub.getLicenseAgreementDate();
  Date approvalDate=sub.getApprovalDate();
  Date committeeApprovalDate=sub.getCommitteeApprovalDate();
  Date committeeEmbargoApprovalDate=sub.getCommitteeEmbargoApprovalDate();
  String committeeMembers=""String_Node_Str"";
  for (  CommitteeMember member : sub.getCommitteeMembers()) {
    committeeMembers+=member.getFormattedName(NameFormat.LAST_FIRST) + ""String_Node_Str"" + member.getFormattedRoles();
  }
  searchText.append(committeeMembers).append(""String_Node_Str"");
  String committeeContactEmail=sub.getCommitteeContactEmail();
  searchText.append(committeeContactEmail).append(""String_Node_Str"");
  String umiRelease;
  if (sub.getUMIRelease() == null) {
    umiRelease=""String_Node_Str"";
  }
 else   if (sub.getUMIRelease()) {
    umiRelease=""String_Node_Str"";
  }
 else {
    umiRelease=""String_Node_Str"";
  }
  String customActions=""String_Node_Str"";
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    customActions+=customActionValue.getDefinition().getLabel() + ""String_Node_Str"";
  }
  searchText.append(customActions).append(""String_Node_Str"");
  String degreeLevel=null;
  if (sub.getDegreeLevel() != null)   degreeLevel=sub.getDegreeLevel().name();
  searchText.append(degreeLevel).append(""String_Node_Str"");
  String depositId=sub.getDepositId();
  searchText.append(depositId).append(""String_Node_Str"");
  String reviewerNotes=sub.getReviewerNotes();
  searchText.append(reviewerNotes).append(""String_Node_Str"");
  String lastEventEntry=null;
  Date lastEventTime=null;
  String orcid=sub.getSubmitter().getOrcid();
  List<ActionLog> logs=indexer.subRepo.findActionLog(sub);
  if (logs.size() > 0) {
    lastEventEntry=logs.get(0).getEntry();
    lastEventTime=logs.get(0).getActionDate();
    searchText.append(lastEventEntry);
  }
  Document doc=new Document();
  doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
  doc.add(new Field(""String_Node_Str"",searchText.toString(),Field.Store.NO,Index.ANALYZED_NO_NORMS));
  if (state != null)   doc.add(new Field(""String_Node_Str"",state,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(searchAssigned));
  if (sortAssigned != null)   doc.add(new Field(""String_Node_Str"",sortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
  if (graduationSemester != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
  if (defenseDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
  if (department != null)   doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
  if (program != null)   doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
  if (college != null)   doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
  if (major != null)   doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
  if (embargos != null) {
    for (    EmbargoType embargo : sub.getEmbargoTypes()) {
      doc.add(new Field(""String_Node_Str"",embargo.getName(),Field.Store.NO,Index.NOT_ANALYZED));
    }
  }
  if (degree != null)   doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentType != null)   doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
  if (submissionDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
  if (studentName != null)   doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
  if (studentEmail != null)   doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (institutionalIdentifier != null)   doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentTitle != null)   doc.add(new Field(""String_Node_Str"",documentTitle,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentAbstract != null)   doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentKeywords != null)   doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentSubjects != null)   doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentLanguage != null)   doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
  if (publishedMaterial != null)   doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
  if (primaryDocument != null)   doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
  if (licenseAgreementDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
  if (approvalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
  if (committeeApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
  if (committeeEmbargoApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
  if (committeeMembers != null)   doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
  if (committeeContactEmail != null)   doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (umiRelease != null)   doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
  }
  if (degreeLevel != null)   doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
  if (depositId != null)   doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
  if (reviewerNotes != null)   doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventEntry != null)   doc.add(new Field(""String_Node_Str"",lastEventEntry,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventTime != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(lastEventTime.getTime()));
  if (orcid != null)   doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
  writer.addDocument(doc);
  for (  ActionLog log : logs) {
    Long logId=log.getId();
    String logEntry=log.getEntry();
    String logState=log.getSubmissionState().getDisplayName();
    long logSearchAssigned=0;
    String logSortAssigned=null;
    if (log.getPerson() != null) {
      logSearchAssigned=log.getPerson().getId();
      logSortAssigned=log.getPerson().getFormattedName(NameFormat.FIRST_LAST);
    }
    Date logTime=log.getActionDate();
    doc=new Document();
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(logId));
    doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.ANALYZED_NO_NORMS));
    if (logState != null)     doc.add(new Field(""String_Node_Str"",logState,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logSearchAssigned));
    if (logSortAssigned != null)     doc.add(new Field(""String_Node_Str"",logSortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.NOT_ANALYZED));
    if (logTime != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logTime.getTime()));
    if (graduationSemester != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
    if (defenseDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
    if (department != null)     doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
    if (program != null)     doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
    if (college != null)     doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
    if (major != null)     doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
    if (embargos != null) {
      for (      EmbargoType embargo : sub.getEmbargoTypes()) {
        doc.add(new Field(""String_Node_Str"",embargo.getName(),Field.Store.NO,Index.NOT_ANALYZED));
      }
    }
    if (degree != null)     doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentType != null)     doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
    if (submissionDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
    if (studentName != null)     doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
    if (studentEmail != null)     doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (institutionalIdentifier != null)     doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentAbstract != null)     doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentKeywords != null)     doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentSubjects != null)     doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentLanguage != null)     doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
    if (publishedMaterial != null)     doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
    if (primaryDocument != null)     doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
    if (licenseAgreementDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
    if (approvalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
    if (committeeApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
    if (committeeEmbargoApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
    if (committeeMembers != null)     doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
    if (committeeContactEmail != null)     doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (umiRelease != null)     doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
    for (    CustomActionValue customActionValue : sub.getCustomActions()) {
      doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
    }
    if (degreeLevel != null)     doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
    if (depositId != null)     doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
    if (reviewerNotes != null)     doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
    if (orcid != null)     doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
    writer.addDocument(doc);
    log.detach();
  }
}","/** 
 * Write a the provided submission and all associated action logs to the index writer. This method expects that the submission and action logs have been removed from the index, either through a specific delete, or a delete all in the case of rebuilding the index. This method is used to share code between the various index job implementations so that submissions are written the same no matter who indexes them first.
 * @param writer The index writer.
 * @param sub The submission to index.
 */
public void indexSubmission(IndexWriter writer,Submission sub) throws CorruptIndexException, IOException {
  StringBuilder searchText=new StringBuilder();
  long subId=sub.getId();
  String state=sub.getState().getDisplayName();
  searchText.append(state).append(""String_Node_Str"");
  long searchAssigned=0;
  String sortAssigned=""String_Node_Str"";
  if (sub.getAssignee() != null) {
    searchAssigned=sub.getAssignee().getId();
    sortAssigned=sub.getAssignee().getFormattedName(NameFormat.LAST_FIRST_MIDDLE_BIRTH);
    searchText.append(sortAssigned).append(""String_Node_Str"");
  }
  Date graduationSemester=null;
  if (sub.getGraduationYear() != null) {
    Calendar cal=Calendar.getInstance();
    cal.clear();
    cal.set(Calendar.YEAR,sub.getGraduationYear());
    if (sub.getGraduationMonth() != null)     cal.set(Calendar.MONTH,sub.getGraduationMonth());
    graduationSemester=cal.getTime();
  }
  Date defenseDate=sub.getDefenseDate();
  String department=sub.getDepartment();
  String program=sub.getProgram();
  String college=sub.getCollege();
  String major=sub.getMajor();
  searchText.append(department).append(""String_Node_Str"").append(program).append(""String_Node_Str"").append(college).append(""String_Node_Str"").append(major).append(""String_Node_Str"");
  String embargos=""String_Node_Str"";
  if (sub.getEmbargoTypes().size() > 0) {
    for (    EmbargoType embargo : sub.getEmbargoTypes())     embargos+=embargo.getName() + ""String_Node_Str"" + embargo.getGuarantor().name()+ ""String_Node_Str"";
  }
  searchText.append(embargos).append(""String_Node_Str"");
  String degree=sub.getDegree();
  String documentType=sub.getDocumentType();
  searchText.append(degree).append(""String_Node_Str"").append(documentType).append(""String_Node_Str"");
  Date submissionDate=sub.getSubmissionDate();
  String studentName=""String_Node_Str"";
  if (sub.getStudentLastName() != null)   studentName+=sub.getStudentLastName() + ""String_Node_Str"";
  if (sub.getStudentFirstName() != null)   studentName+=sub.getStudentFirstName() + ""String_Node_Str"";
  if (sub.getStudentMiddleName() != null)   studentName+=sub.getStudentMiddleName() + ""String_Node_Str"";
  searchText.append(studentName).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.LAST_FIRST_BIRTH)).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.FIRST_LAST_BIRTH)).append(""String_Node_Str"");
  String studentEmail=sub.getSubmitter().getEmail();
  searchText.append(studentEmail).append(""String_Node_Str"");
  String institutionalIdentifier=sub.getSubmitter().getInstitutionalIdentifier();
  searchText.append(institutionalIdentifier).append(""String_Node_Str"");
  String documentTitle=sub.getDocumentTitle();
  String documentAbstract=sub.getDocumentAbstract();
  String documentKeywords=sub.getDocumentKeywords();
  searchText.append(documentTitle).append(""String_Node_Str"").append(documentAbstract).append(""String_Node_Str"").append(documentKeywords).append(""String_Node_Str"");
  String documentSubjects=""String_Node_Str"";
  for (  String subject : sub.getDocumentSubjects()) {
    documentSubjects+=subject + ""String_Node_Str"";
  }
  searchText.append(documentSubjects).append(""String_Node_Str"");
  String documentLanguage=null;
  if (sub.getDocumentLanguageLocale() != null) {
    Locale locale=sub.getDocumentLanguageLocale();
    searchText.append(locale.getDisplayName()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayLanguage()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayCountry()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayVariant()).append(""String_Node_Str"");
    documentLanguage=locale.getDisplayName();
  }
  String publishedMaterial=sub.getPublishedMaterial();
  searchText.append(publishedMaterial).append(""String_Node_Str"");
  String primaryDocument=null;
  if (sub.getPrimaryDocument() != null) {
    primaryDocument=sub.getPrimaryDocument().getName();
    searchText.append(primaryDocument).append(""String_Node_Str"");
  }
  Date licenseAgreementDate=sub.getLicenseAgreementDate();
  Date approvalDate=sub.getApprovalDate();
  Date committeeApprovalDate=sub.getCommitteeApprovalDate();
  Date committeeEmbargoApprovalDate=sub.getCommitteeEmbargoApprovalDate();
  String committeeMembers=""String_Node_Str"";
  for (  CommitteeMember member : sub.getCommitteeMembers()) {
    committeeMembers+=member.getFormattedName(NameFormat.LAST_FIRST) + ""String_Node_Str"" + member.getFormattedRoles();
  }
  searchText.append(committeeMembers).append(""String_Node_Str"");
  String committeeContactEmail=sub.getCommitteeContactEmail();
  searchText.append(committeeContactEmail).append(""String_Node_Str"");
  String umiRelease;
  if (sub.getUMIRelease() == null) {
    umiRelease=""String_Node_Str"";
  }
 else   if (sub.getUMIRelease()) {
    umiRelease=""String_Node_Str"";
  }
 else {
    umiRelease=""String_Node_Str"";
  }
  String customActions=""String_Node_Str"";
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    customActions+=customActionValue.getDefinition().getLabel() + ""String_Node_Str"";
  }
  searchText.append(customActions).append(""String_Node_Str"");
  String degreeLevel=null;
  if (sub.getDegreeLevel() != null)   degreeLevel=sub.getDegreeLevel().name();
  searchText.append(degreeLevel).append(""String_Node_Str"");
  String depositId=sub.getDepositId();
  searchText.append(depositId).append(""String_Node_Str"");
  String reviewerNotes=sub.getReviewerNotes();
  searchText.append(reviewerNotes).append(""String_Node_Str"");
  String lastEventEntry=null;
  Date lastEventTime=null;
  String orcid=sub.getSubmitter().getOrcid();
  List<ActionLog> logs=indexer.subRepo.findActionLog(sub);
  if (logs.size() > 0) {
    lastEventEntry=logs.get(0).getEntry();
    lastEventTime=logs.get(0).getActionDate();
    searchText.append(lastEventEntry);
  }
  Document doc=new Document();
  doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
  doc.add(new Field(""String_Node_Str"",searchText.toString(),Field.Store.NO,Index.ANALYZED_NO_NORMS));
  if (state != null)   doc.add(new Field(""String_Node_Str"",state,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(searchAssigned));
  if (sortAssigned != null)   doc.add(new Field(""String_Node_Str"",sortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
  if (graduationSemester != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
  if (defenseDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
  if (department != null)   doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
  if (program != null)   doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
  if (college != null)   doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
  if (major != null)   doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
  if (embargos != null) {
    for (    EmbargoType embargo : sub.getEmbargoTypes()) {
      doc.add(new Field(""String_Node_Str"",embargo.getName() + ""String_Node_Str"" + embargo.getGuarantor().name(),Field.Store.NO,Index.NOT_ANALYZED));
    }
  }
  if (degree != null)   doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentType != null)   doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
  if (submissionDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
  if (studentName != null)   doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
  if (studentEmail != null)   doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (institutionalIdentifier != null)   doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentTitle != null)   doc.add(new Field(""String_Node_Str"",documentTitle,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentAbstract != null)   doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentKeywords != null)   doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentSubjects != null)   doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentLanguage != null)   doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
  if (publishedMaterial != null)   doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
  if (primaryDocument != null)   doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
  if (licenseAgreementDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
  if (approvalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
  if (committeeApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
  if (committeeEmbargoApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
  if (committeeMembers != null)   doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
  if (committeeContactEmail != null)   doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (umiRelease != null)   doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
  }
  if (degreeLevel != null)   doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
  if (depositId != null)   doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
  if (reviewerNotes != null)   doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventEntry != null)   doc.add(new Field(""String_Node_Str"",lastEventEntry,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventTime != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(lastEventTime.getTime()));
  if (orcid != null)   doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
  writer.addDocument(doc);
  for (  ActionLog log : logs) {
    Long logId=log.getId();
    String logEntry=log.getEntry();
    String logState=log.getSubmissionState().getDisplayName();
    long logSearchAssigned=0;
    String logSortAssigned=null;
    if (log.getPerson() != null) {
      logSearchAssigned=log.getPerson().getId();
      logSortAssigned=log.getPerson().getFormattedName(NameFormat.FIRST_LAST);
    }
    Date logTime=log.getActionDate();
    doc=new Document();
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(logId));
    doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.ANALYZED_NO_NORMS));
    if (logState != null)     doc.add(new Field(""String_Node_Str"",logState,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logSearchAssigned));
    if (logSortAssigned != null)     doc.add(new Field(""String_Node_Str"",logSortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.NOT_ANALYZED));
    if (logTime != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logTime.getTime()));
    if (graduationSemester != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
    if (defenseDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
    if (department != null)     doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
    if (program != null)     doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
    if (college != null)     doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
    if (major != null)     doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
    if (embargos != null) {
      for (      EmbargoType embargo : sub.getEmbargoTypes()) {
        doc.add(new Field(""String_Node_Str"",embargo.getName() + ""String_Node_Str"" + embargo.getGuarantor().name(),Field.Store.NO,Index.NOT_ANALYZED));
      }
    }
    if (degree != null)     doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentType != null)     doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
    if (submissionDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
    if (studentName != null)     doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
    if (studentEmail != null)     doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (institutionalIdentifier != null)     doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentAbstract != null)     doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentKeywords != null)     doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentSubjects != null)     doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentLanguage != null)     doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
    if (publishedMaterial != null)     doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
    if (primaryDocument != null)     doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
    if (licenseAgreementDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
    if (approvalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
    if (committeeApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
    if (committeeEmbargoApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
    if (committeeMembers != null)     doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
    if (committeeContactEmail != null)     doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (umiRelease != null)     doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
    for (    CustomActionValue customActionValue : sub.getCustomActions()) {
      doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
    }
    if (degreeLevel != null)     doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
    if (depositId != null)     doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
    if (reviewerNotes != null)     doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
    if (orcid != null)     doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
    writer.addDocument(doc);
    log.detach();
  }
}",0.9954410423835997
189280,"/** 
 * This method produces the common part of the query handle the filter search clauses. 
 * @param andQuery The existing and-based query
 * @param filter The filter search paramaters.
 * @param submissions Whether this is for submissions or action logs
 */
public void buildQuery(BooleanQuery andQuery,SearchFilter filter,boolean submissions){
  QueryParser parser=new QueryParser(indexer.version,""String_Node_Str"",indexer.standardAnalyzer);
  if (filter.getIncludedSubmissions().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    Submission sub : filter.getIncludedSubmissions()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(sub.getId()))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getIncludedActionLogs().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    ActionLog log : filter.getIncludedActionLogs()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(log.getId()))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  for (  Submission sub : filter.getExcludedSubmissions()) {
    andQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(sub.getId()))),Occur.MUST_NOT);
  }
  for (  ActionLog log : filter.getExcludedActionLogs()) {
    andQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(log.getId()))),Occur.MUST_NOT);
  }
  if (filter.getSearchText().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String searchText : filter.getSearchText()) {
      try {
        orQuery.add(parser.parse(searchText),Occur.SHOULD);
      }
 catch (      ParseException e) {
        orQuery.add(new TermQuery(new Term(""String_Node_Str"",searchText)),Occur.SHOULD);
      }
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getStates().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String stateName : filter.getStates()) {
      State state=stateManager.getState(stateName);
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",state.getDisplayName())),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getAssignees().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    Person assignee : filter.getAssignees()) {
      long assigneeId=0;
      if (assignee != null)       assigneeId=assignee.getId();
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(assigneeId))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getEmbargoTypes().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    EmbargoType embargo : filter.getEmbargoTypes()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",embargo.getName())),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getGraduationSemesters().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    Semester semester : filter.getGraduationSemesters()) {
      if (semester.year == null)       continue;
      Calendar cal=Calendar.getInstance();
      cal.clear();
      cal.set(Calendar.YEAR,semester.year);
      if (semester.month != null) {
        cal.set(Calendar.MONTH,semester.month);
      }
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(cal.getTimeInMillis()))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getDegrees().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String degree : filter.getDegrees()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",degree)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getDepartments().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String dept : filter.getDepartments()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",dept)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getPrograms().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String program : filter.getPrograms()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",program)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getColleges().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String college : filter.getColleges()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",college)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getMajors().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String major : filter.getMajors()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",major)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getDocumentTypes().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String docType : filter.getDocumentTypes()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",docType)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getUMIRelease() != null) {
    if (filter.getUMIRelease()) {
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
    }
 else {
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
    }
  }
  if (filter.getDateRangeStart() != null || filter.getDateRangeEnd() != null) {
    long startTime=0;
    if (filter.getDateRangeStart() != null)     startTime=filter.getDateRangeStart().getTime();
    long endTime=Long.MAX_VALUE;
    if (filter.getDateRangeEnd() != null)     endTime=filter.getDateRangeEnd().getTime();
    if (submissions)     andQuery.add(NumericRangeQuery.newLongRange(""String_Node_Str"",startTime,endTime,true,true),Occur.MUST);
 else     andQuery.add(NumericRangeQuery.newLongRange(""String_Node_Str"",startTime,endTime,true,true),Occur.MUST);
  }
  if (filter.getCustomActions().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    CustomActionDefinition customAction : filter.getCustomActions()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",customAction.getLabel())),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
}","/** 
 * This method produces the common part of the query handle the filter search clauses. 
 * @param andQuery The existing and-based query
 * @param filter The filter search paramaters.
 * @param submissions Whether this is for submissions or action logs
 */
public void buildQuery(BooleanQuery andQuery,SearchFilter filter,boolean submissions){
  QueryParser parser=new QueryParser(indexer.version,""String_Node_Str"",indexer.standardAnalyzer);
  if (filter.getIncludedSubmissions().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    Submission sub : filter.getIncludedSubmissions()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(sub.getId()))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getIncludedActionLogs().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    ActionLog log : filter.getIncludedActionLogs()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(log.getId()))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  for (  Submission sub : filter.getExcludedSubmissions()) {
    andQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(sub.getId()))),Occur.MUST_NOT);
  }
  for (  ActionLog log : filter.getExcludedActionLogs()) {
    andQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(log.getId()))),Occur.MUST_NOT);
  }
  if (filter.getSearchText().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String searchText : filter.getSearchText()) {
      try {
        orQuery.add(parser.parse(searchText),Occur.SHOULD);
      }
 catch (      ParseException e) {
        orQuery.add(new TermQuery(new Term(""String_Node_Str"",searchText)),Occur.SHOULD);
      }
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getStates().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String stateName : filter.getStates()) {
      State state=stateManager.getState(stateName);
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",state.getDisplayName())),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getAssignees().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    Person assignee : filter.getAssignees()) {
      long assigneeId=0;
      if (assignee != null)       assigneeId=assignee.getId();
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(assigneeId))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getEmbargoTypes().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    EmbargoType embargo : filter.getEmbargoTypes()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",embargo.getName() + ""String_Node_Str"" + embargo.getGuarantor().name())),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getGraduationSemesters().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    Semester semester : filter.getGraduationSemesters()) {
      if (semester.year == null)       continue;
      Calendar cal=Calendar.getInstance();
      cal.clear();
      cal.set(Calendar.YEAR,semester.year);
      if (semester.month != null) {
        cal.set(Calendar.MONTH,semester.month);
      }
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",NumericUtils.longToPrefixCoded(cal.getTimeInMillis()))),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getDegrees().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String degree : filter.getDegrees()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",degree)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getDepartments().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String dept : filter.getDepartments()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",dept)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getPrograms().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String program : filter.getPrograms()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",program)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getColleges().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String college : filter.getColleges()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",college)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getMajors().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String major : filter.getMajors()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",major)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getDocumentTypes().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    String docType : filter.getDocumentTypes()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",docType)),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
  if (filter.getUMIRelease() != null) {
    if (filter.getUMIRelease()) {
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
    }
 else {
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
    }
  }
  if (filter.getDateRangeStart() != null || filter.getDateRangeEnd() != null) {
    long startTime=0;
    if (filter.getDateRangeStart() != null)     startTime=filter.getDateRangeStart().getTime();
    long endTime=Long.MAX_VALUE;
    if (filter.getDateRangeEnd() != null)     endTime=filter.getDateRangeEnd().getTime();
    if (submissions)     andQuery.add(NumericRangeQuery.newLongRange(""String_Node_Str"",startTime,endTime,true,true),Occur.MUST);
 else     andQuery.add(NumericRangeQuery.newLongRange(""String_Node_Str"",startTime,endTime,true,true),Occur.MUST);
  }
  if (filter.getCustomActions().size() > 0) {
    BooleanQuery orQuery=new BooleanQuery();
    for (    CustomActionDefinition customAction : filter.getCustomActions()) {
      orQuery.add(new TermQuery(new Term(""String_Node_Str"",customAction.getLabel())),Occur.SHOULD);
    }
    andQuery.add(orQuery,Occur.MUST);
  }
}",0.9958906274695748
189281,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse updateFieldProfile(@ApiVariable String workflowStepId,@Data String data) throws NumberFormatException, WorkflowStepNonOverrideableException, JsonProcessingException, FieldProfileNonOverrideableException {
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  Long id=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  Long reqOrgId=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  FieldGloss fieldGloss=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldGloss.class);
  ControlledVocabulary controlledVocabulary=dataNode.get(""String_Node_Str"") != null ? objectMapper.treeToValue(dataNode.get(""String_Node_Str""),ControlledVocabulary.class) : null;
  FieldPredicate predicate=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldPredicate.class);
  InputType inputType=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),InputType.class);
  Boolean repeatable=Boolean.parseBoolean(dataNode.get(""String_Node_Str"").toString());
  String help=dataNode.get(""String_Node_Str"").textValue();
  String usage=dataNode.get(""String_Node_Str"").textValue();
  FieldProfile fieldProfile=fieldProfileRepo.findOne(id);
  fieldProfile.setPredicate(predicate);
  fieldProfile.setInputType(inputType);
  fieldProfile.setRepeatable(repeatable);
  fieldProfile.setHelp(help);
  fieldProfile.setUsage(usage);
  List<FieldGloss> newFieldGlosses=new ArrayList<FieldGloss>();
  newFieldGlosses.add(fieldGloss);
  fieldProfile.setFieldGlosses(newFieldGlosses);
  if (controlledVocabulary != null) {
    List<ControlledVocabulary> newControlledVocabularies=new ArrayList<ControlledVocabulary>();
    newControlledVocabularies.add(controlledVocabulary);
    fieldProfile.setControlledVocabularies(newControlledVocabularies);
  }
 else {
    fieldProfile.clearControlledVocabulary();
  }
  Organization requestingOrganization=organizationRepo.findOne(reqOrgId);
  fieldProfileRepo.update(fieldProfile,requestingOrganization);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,organizationRepo.findOne(reqOrgId)));
  return new ApiResponse(SUCCESS);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse updateFieldProfile(@ApiVariable String workflowStepId,@Data String data) throws NumberFormatException, WorkflowStepNonOverrideableException, JsonProcessingException, FieldProfileNonOverrideableException {
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  Long id=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  Long reqOrgId=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  FieldGloss fieldGloss=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldGloss.class);
  ControlledVocabulary controlledVocabulary=dataNode.get(""String_Node_Str"") != null ? objectMapper.treeToValue(dataNode.get(""String_Node_Str""),ControlledVocabulary.class) : null;
  FieldPredicate predicate=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldPredicate.class);
  InputType inputType=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),InputType.class);
  Boolean repeatable=dataNode.get(""String_Node_Str"") != null ? Boolean.parseBoolean(dataNode.get(""String_Node_Str"").toString()) : false;
  String help=dataNode.get(""String_Node_Str"") != null ? dataNode.get(""String_Node_Str"").textValue() : null;
  String usage=dataNode.get(""String_Node_Str"") != null ? dataNode.get(""String_Node_Str"").textValue() : null;
  FieldProfile fieldProfile=fieldProfileRepo.findOne(id);
  fieldProfile.setPredicate(predicate);
  fieldProfile.setInputType(inputType);
  fieldProfile.setRepeatable(repeatable);
  fieldProfile.setHelp(help);
  fieldProfile.setUsage(usage);
  List<FieldGloss> newFieldGlosses=new ArrayList<FieldGloss>();
  newFieldGlosses.add(fieldGloss);
  fieldProfile.setFieldGlosses(newFieldGlosses);
  if (controlledVocabulary != null) {
    List<ControlledVocabulary> newControlledVocabularies=new ArrayList<ControlledVocabulary>();
    newControlledVocabularies.add(controlledVocabulary);
    fieldProfile.setControlledVocabularies(newControlledVocabularies);
  }
 else {
    fieldProfile.clearControlledVocabulary();
  }
  Organization requestingOrganization=organizationRepo.findOne(reqOrgId);
  fieldProfileRepo.update(fieldProfile,requestingOrganization);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,organizationRepo.findOne(reqOrgId)));
  return new ApiResponse(SUCCESS);
}",0.9691923397169026
189282,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse createFieldProfile(@ApiVariable String workflowStepId,@Data String data) throws NumberFormatException, WorkflowStepNonOverrideableException, JsonProcessingException {
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  Long reqOrgId=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  FieldGloss gloss=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldGloss.class);
  FieldPredicate predicate=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldPredicate.class);
  ControlledVocabulary controlledVocabulary=dataNode.get(""String_Node_Str"") != null ? objectMapper.treeToValue(dataNode.get(""String_Node_Str""),ControlledVocabulary.class) : null;
  InputType inputType=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),InputType.class);
  Boolean repeatable=Boolean.parseBoolean(dataNode.get(""String_Node_Str"").toString());
  String help=dataNode.get(""String_Node_Str"").textValue();
  String usage=""String_Node_Str"";
  WorkflowStep workflowStep=workflowStepRepo.findOne(Long.parseLong(workflowStepId));
  FieldProfile createdProfile=fieldProfileRepo.create(workflowStep,predicate,inputType,usage,help,repeatable,true,true,true);
  createdProfile.addControlledVocabulary(controlledVocabulary);
  createdProfile.addFieldGloss(gloss);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,organizationRepo.findOne(reqOrgId)));
  return new ApiResponse(SUCCESS,fieldProfileRepo.save(createdProfile));
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse createFieldProfile(@ApiVariable String workflowStepId,@Data String data) throws NumberFormatException, WorkflowStepNonOverrideableException, JsonProcessingException {
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  Long reqOrgId=Long.parseLong(dataNode.get(""String_Node_Str"").toString());
  FieldGloss gloss=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldGloss.class);
  ControlledVocabulary controlledVocabulary=dataNode.get(""String_Node_Str"") != null ? objectMapper.treeToValue(dataNode.get(""String_Node_Str""),ControlledVocabulary.class) : null;
  FieldPredicate predicate=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),FieldPredicate.class);
  InputType inputType=objectMapper.treeToValue(dataNode.get(""String_Node_Str""),InputType.class);
  Boolean repeatable=dataNode.get(""String_Node_Str"") != null ? Boolean.parseBoolean(dataNode.get(""String_Node_Str"").toString()) : false;
  String help=dataNode.get(""String_Node_Str"") != null ? dataNode.get(""String_Node_Str"").textValue() : null;
  String usage=""String_Node_Str"";
  WorkflowStep workflowStep=workflowStepRepo.findOne(Long.parseLong(workflowStepId));
  FieldProfile createdProfile=fieldProfileRepo.create(workflowStep,predicate,inputType,usage,help,repeatable,true,true,true);
  createdProfile.addControlledVocabulary(controlledVocabulary);
  createdProfile.addFieldGloss(gloss);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,organizationRepo.findOne(reqOrgId)));
  return new ApiResponse(SUCCESS,fieldProfileRepo.save(createdProfile));
}",0.7519402127048003
189283,"public FieldProfile update(FieldProfile pendingFieldProfile,Organization requestingOrganization) throws FieldProfileNonOverrideableException, WorkflowStepNonOverrideableException {
  FieldProfile resultingFieldProfile=null;
  FieldProfile persistedFieldProfile=fieldProfileRepo.findOne(pendingFieldProfile.getId());
  boolean overridabilityOfPersistedFieldProfile=persistedFieldProfile.getOverrideable();
  boolean overridabilityOfOriginatingWorkflowStep=persistedFieldProfile.getOriginatingWorkflowStep().getOverrideable();
  WorkflowStep workflowStepWithFieldProfileOnRequestingOrganization=null;
  boolean requestingOrganizationOriginatedWorkflowStep=false;
  boolean workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile=false;
  for (  WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
    if (workflowStep.getAggregateFieldProfiles().contains(persistedFieldProfile)) {
      workflowStepWithFieldProfileOnRequestingOrganization=workflowStep;
      requestingOrganizationOriginatedWorkflowStep=workflowStepWithFieldProfileOnRequestingOrganization.getOriginatingOrganization().getId().equals(requestingOrganization.getId());
    }
  }
  if (workflowStepWithFieldProfileOnRequestingOrganization != null) {
    workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile=persistedFieldProfile.getOriginatingWorkflowStep().getId().equals(workflowStepWithFieldProfileOnRequestingOrganization.getId());
  }
  if (!overridabilityOfOriginatingWorkflowStep && !requestingOrganizationOriginatedWorkflowStep) {
    throw new WorkflowStepNonOverrideableException();
  }
  if (!overridabilityOfPersistedFieldProfile && !(workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile && requestingOrganizationOriginatedWorkflowStep)) {
    throw new FieldProfileNonOverrideableException();
  }
  if (requestingOrganizationOriginatedWorkflowStep) {
    resultingFieldProfile=fieldProfileRepo.save(pendingFieldProfile);
  }
 else {
    List<FieldGloss> fieldGlosses=new ArrayList<FieldGloss>();
    List<ControlledVocabulary> controlledVocabularies=new ArrayList<ControlledVocabulary>();
    for (    FieldGloss fg : pendingFieldProfile.getFieldGlosses()) {
      fieldGlosses.add(fg);
    }
    for (    ControlledVocabulary cv : pendingFieldProfile.getControlledVocabularies()) {
      controlledVocabularies.add(cv);
    }
    pendingFieldProfile.setFieldGlosses(new ArrayList<FieldGloss>());
    pendingFieldProfile.setControlledVocabularies(new ArrayList<ControlledVocabulary>());
    em.detach(pendingFieldProfile);
    pendingFieldProfile.setId(null);
    WorkflowStep persistedOriginatingWorkflowStep=persistedFieldProfile.getOriginatingWorkflowStep();
    if (!requestingOrganizationOriginatedWorkflowStep) {
      WorkflowStep existingOriginatingWorkflowStep=workflowStepRepo.findByNameAndOriginatingOrganization(persistedOriginatingWorkflowStep.getName(),requestingOrganization);
      if (existingOriginatingWorkflowStep == null) {
        WorkflowStep newOriginatingWorkflowStep=workflowStepRepo.update(persistedOriginatingWorkflowStep,requestingOrganization);
        pendingFieldProfile.setOriginatingWorkflowStep(newOriginatingWorkflowStep);
      }
 else {
        pendingFieldProfile.setOriginatingWorkflowStep(existingOriginatingWorkflowStep);
      }
    }
    pendingFieldProfile.setOriginatingFieldProfile(null);
    pendingFieldProfile.setFieldGlosses(fieldGlosses);
    pendingFieldProfile.setControlledVocabularies(controlledVocabularies);
    FieldProfile newFieldProfile=fieldProfileRepo.save(pendingFieldProfile);
    for (    WorkflowStep workflowStep : getContainingDescendantWorkflowStep(requestingOrganization,persistedFieldProfile)) {
      workflowStep.replaceAggregateFieldProfile(persistedFieldProfile,newFieldProfile);
      workflowStepRepo.save(workflowStep);
    }
    for (    WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
      if (workflowStep.getAggregateFieldProfiles().contains(persistedFieldProfile)) {
        workflowStep.replaceAggregateFieldProfile(persistedFieldProfile,newFieldProfile);
        workflowStepRepo.save(workflowStep);
      }
    }
    if (workflowStepRepo.findByAggregateFieldProfilesId(persistedFieldProfile.getId()).size() == 0) {
      fieldProfileRepo.delete(persistedFieldProfile);
    }
 else {
      newFieldProfile.setOriginatingFieldProfile(persistedFieldProfile);
      newFieldProfile=fieldProfileRepo.save(newFieldProfile);
    }
    resultingFieldProfile=newFieldProfile;
  }
  return resultingFieldProfile;
}","public FieldProfile update(FieldProfile pendingFieldProfile,Organization requestingOrganization) throws FieldProfileNonOverrideableException, WorkflowStepNonOverrideableException {
  FieldProfile resultingFieldProfile=null;
  FieldProfile persistedFieldProfile=fieldProfileRepo.findOne(pendingFieldProfile.getId());
  boolean overridabilityOfPersistedFieldProfile=persistedFieldProfile.getOverrideable();
  boolean overridabilityOfOriginatingWorkflowStep=persistedFieldProfile.getOriginatingWorkflowStep().getOverrideable();
  WorkflowStep workflowStepWithFieldProfileOnRequestingOrganization=null;
  boolean requestingOrganizationOriginatedWorkflowStep=false;
  boolean workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile=false;
  for (  WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
    if (workflowStep.getAggregateFieldProfiles().contains(persistedFieldProfile)) {
      workflowStepWithFieldProfileOnRequestingOrganization=workflowStep;
      requestingOrganizationOriginatedWorkflowStep=workflowStepWithFieldProfileOnRequestingOrganization.getOriginatingOrganization().getId().equals(requestingOrganization.getId());
    }
  }
  if (workflowStepWithFieldProfileOnRequestingOrganization != null) {
    workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile=persistedFieldProfile.getOriginatingWorkflowStep().getId().equals(workflowStepWithFieldProfileOnRequestingOrganization.getId());
  }
  if (!overridabilityOfOriginatingWorkflowStep && !requestingOrganizationOriginatedWorkflowStep) {
    throw new WorkflowStepNonOverrideableException();
  }
  if (!overridabilityOfPersistedFieldProfile && !(workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile && requestingOrganizationOriginatedWorkflowStep)) {
    throw new FieldProfileNonOverrideableException();
  }
  if (workflowStepWithFieldProfileOnRequestingOrganizationOriginatedFieldProfile && requestingOrganizationOriginatedWorkflowStep) {
    resultingFieldProfile=fieldProfileRepo.save(pendingFieldProfile);
  }
 else {
    List<FieldGloss> fieldGlosses=new ArrayList<FieldGloss>();
    List<ControlledVocabulary> controlledVocabularies=new ArrayList<ControlledVocabulary>();
    for (    FieldGloss fg : pendingFieldProfile.getFieldGlosses()) {
      fieldGlosses.add(fg);
    }
    for (    ControlledVocabulary cv : pendingFieldProfile.getControlledVocabularies()) {
      controlledVocabularies.add(cv);
    }
    pendingFieldProfile.setFieldGlosses(new ArrayList<FieldGloss>());
    pendingFieldProfile.setControlledVocabularies(new ArrayList<ControlledVocabulary>());
    em.detach(pendingFieldProfile);
    pendingFieldProfile.setId(null);
    WorkflowStep persistedOriginatingWorkflowStep=persistedFieldProfile.getOriginatingWorkflowStep();
    if (!requestingOrganizationOriginatedWorkflowStep) {
      WorkflowStep existingOriginatingWorkflowStep=workflowStepRepo.findByNameAndOriginatingOrganization(persistedOriginatingWorkflowStep.getName(),requestingOrganization);
      if (existingOriginatingWorkflowStep == null) {
        WorkflowStep newOriginatingWorkflowStep=workflowStepRepo.update(persistedOriginatingWorkflowStep,requestingOrganization);
        pendingFieldProfile.setOriginatingWorkflowStep(newOriginatingWorkflowStep);
      }
 else {
        pendingFieldProfile.setOriginatingWorkflowStep(existingOriginatingWorkflowStep);
      }
    }
    pendingFieldProfile.setOriginatingFieldProfile(null);
    pendingFieldProfile.setFieldGlosses(fieldGlosses);
    pendingFieldProfile.setControlledVocabularies(controlledVocabularies);
    FieldProfile newFieldProfile=fieldProfileRepo.save(pendingFieldProfile);
    for (    WorkflowStep workflowStep : getContainingDescendantWorkflowStep(requestingOrganization,persistedFieldProfile)) {
      workflowStep.replaceAggregateFieldProfile(persistedFieldProfile,newFieldProfile);
      workflowStepRepo.save(workflowStep);
    }
    for (    WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
      if (workflowStep.getAggregateFieldProfiles().contains(persistedFieldProfile)) {
        workflowStep.replaceAggregateFieldProfile(persistedFieldProfile,newFieldProfile);
        workflowStepRepo.save(workflowStep);
      }
    }
    if (workflowStepRepo.findByAggregateFieldProfilesId(persistedFieldProfile.getId()).size() == 0) {
      fieldProfileRepo.delete(persistedFieldProfile);
    }
 else {
      newFieldProfile.setOriginatingFieldProfile(persistedFieldProfile);
      newFieldProfile=fieldProfileRepo.save(newFieldProfile);
    }
    resultingFieldProfile=newFieldProfile;
  }
  return resultingFieldProfile;
}",0.9915857605177992
189284,"public Note update(Note pendingNote,Organization requestingOrganization) throws NoteNonOverrideableException, WorkflowStepNonOverrideableException {
  Note resultingNote=null;
  Note persistedNote=noteRepo.findOne(pendingNote.getId());
  boolean overridabilityOfPersistedNote=persistedNote.getOverrideable();
  boolean overridabilityOfOriginatingWorkflowStep=persistedNote.getOriginatingWorkflowStep().getOverrideable();
  WorkflowStep workflowStepWithNoteOnRequestingOrganization=null;
  boolean requestingOrganizationOriginatedWorkflowStep=false;
  boolean workflowStepWithNoteOnRequestingOrganizationOriginatedNote=false;
  for (  WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
    if (workflowStep.getAggregateNotes().contains(persistedNote)) {
      workflowStepWithNoteOnRequestingOrganization=workflowStep;
      requestingOrganizationOriginatedWorkflowStep=workflowStepWithNoteOnRequestingOrganization.getOriginatingOrganization().getId().equals(requestingOrganization.getId());
    }
  }
  if (workflowStepWithNoteOnRequestingOrganization != null) {
    workflowStepWithNoteOnRequestingOrganizationOriginatedNote=persistedNote.getOriginatingWorkflowStep().getId().equals(workflowStepWithNoteOnRequestingOrganization.getId());
  }
  if (!overridabilityOfOriginatingWorkflowStep && !requestingOrganizationOriginatedWorkflowStep) {
    throw new WorkflowStepNonOverrideableException();
  }
  if (!overridabilityOfPersistedNote && !(workflowStepWithNoteOnRequestingOrganizationOriginatedNote && requestingOrganizationOriginatedWorkflowStep)) {
    throw new NoteNonOverrideableException();
  }
  if (requestingOrganizationOriginatedWorkflowStep) {
    resultingNote=noteRepo.save(pendingNote);
  }
 else {
    em.detach(pendingNote);
    pendingNote.setId(null);
    WorkflowStep persistedOriginatingWorkflowStep=persistedNote.getOriginatingWorkflowStep();
    if (!requestingOrganizationOriginatedWorkflowStep) {
      WorkflowStep existingOriginatingWorkflowStep=workflowStepRepo.findByNameAndOriginatingOrganization(persistedOriginatingWorkflowStep.getName(),requestingOrganization);
      if (existingOriginatingWorkflowStep == null) {
        WorkflowStep newOriginatingWorkflowStep=workflowStepRepo.update(persistedOriginatingWorkflowStep,requestingOrganization);
        pendingNote.setOriginatingWorkflowStep(newOriginatingWorkflowStep);
      }
 else {
        pendingNote.setOriginatingWorkflowStep(existingOriginatingWorkflowStep);
      }
    }
    pendingNote.setOriginatingNote(null);
    Note newNote=noteRepo.save(pendingNote);
    for (    WorkflowStep workflowStep : getContainingDescendantWorkflowStep(requestingOrganization,persistedNote)) {
      workflowStep.replaceAggregateNote(persistedNote,newNote);
      workflowStepRepo.save(workflowStep);
    }
    for (    WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
      if (workflowStep.getAggregateNotes().contains(persistedNote)) {
        workflowStep.replaceAggregateNote(persistedNote,newNote);
        workflowStepRepo.save(workflowStep);
      }
    }
    if (workflowStepRepo.findByAggregateNotesId(persistedNote.getId()).size() == 0) {
      noteRepo.delete(persistedNote);
    }
 else {
      newNote.setOriginatingNote(persistedNote);
      newNote=noteRepo.save(newNote);
    }
    resultingNote=newNote;
  }
  return resultingNote;
}","public Note update(Note pendingNote,Organization requestingOrganization) throws NoteNonOverrideableException, WorkflowStepNonOverrideableException {
  Note resultingNote=null;
  Note persistedNote=noteRepo.findOne(pendingNote.getId());
  boolean overridabilityOfPersistedNote=persistedNote.getOverrideable();
  boolean overridabilityOfOriginatingWorkflowStep=persistedNote.getOriginatingWorkflowStep().getOverrideable();
  WorkflowStep workflowStepWithNoteOnRequestingOrganization=null;
  boolean requestingOrganizationOriginatedWorkflowStep=false;
  boolean workflowStepWithNoteOnRequestingOrganizationOriginatedNote=false;
  for (  WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
    if (workflowStep.getAggregateNotes().contains(persistedNote)) {
      workflowStepWithNoteOnRequestingOrganization=workflowStep;
      requestingOrganizationOriginatedWorkflowStep=workflowStepWithNoteOnRequestingOrganization.getOriginatingOrganization().getId().equals(requestingOrganization.getId());
    }
  }
  if (workflowStepWithNoteOnRequestingOrganization != null) {
    workflowStepWithNoteOnRequestingOrganizationOriginatedNote=persistedNote.getOriginatingWorkflowStep().getId().equals(workflowStepWithNoteOnRequestingOrganization.getId());
  }
  if (!overridabilityOfOriginatingWorkflowStep && !requestingOrganizationOriginatedWorkflowStep) {
    throw new WorkflowStepNonOverrideableException();
  }
  if (!overridabilityOfPersistedNote && !(workflowStepWithNoteOnRequestingOrganizationOriginatedNote && requestingOrganizationOriginatedWorkflowStep)) {
    throw new NoteNonOverrideableException();
  }
  if (workflowStepWithNoteOnRequestingOrganizationOriginatedNote && requestingOrganizationOriginatedWorkflowStep) {
    resultingNote=noteRepo.save(pendingNote);
  }
 else {
    em.detach(pendingNote);
    pendingNote.setId(null);
    WorkflowStep persistedOriginatingWorkflowStep=persistedNote.getOriginatingWorkflowStep();
    if (!requestingOrganizationOriginatedWorkflowStep) {
      WorkflowStep existingOriginatingWorkflowStep=workflowStepRepo.findByNameAndOriginatingOrganization(persistedOriginatingWorkflowStep.getName(),requestingOrganization);
      if (existingOriginatingWorkflowStep == null) {
        WorkflowStep newOriginatingWorkflowStep=workflowStepRepo.update(persistedOriginatingWorkflowStep,requestingOrganization);
        pendingNote.setOriginatingWorkflowStep(newOriginatingWorkflowStep);
      }
 else {
        pendingNote.setOriginatingWorkflowStep(existingOriginatingWorkflowStep);
      }
    }
    pendingNote.setOriginatingNote(null);
    Note newNote=noteRepo.save(pendingNote);
    for (    WorkflowStep workflowStep : getContainingDescendantWorkflowStep(requestingOrganization,persistedNote)) {
      workflowStep.replaceAggregateNote(persistedNote,newNote);
      workflowStepRepo.save(workflowStep);
    }
    for (    WorkflowStep workflowStep : requestingOrganization.getAggregateWorkflowSteps()) {
      if (workflowStep.getAggregateNotes().contains(persistedNote)) {
        workflowStep.replaceAggregateNote(persistedNote,newNote);
        workflowStepRepo.save(workflowStep);
      }
    }
    if (workflowStepRepo.findByAggregateNotesId(persistedNote.getId()).size() == 0) {
      noteRepo.delete(persistedNote);
    }
 else {
      newNote.setOriginatingNote(persistedNote);
      newNote=noteRepo.save(newNote);
    }
    resultingNote=newNote;
  }
  return resultingNote;
}",0.990943616710488
189285,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse createOrganization(@Data String data){
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  OrganizationCategory newOrganizationCategory=organizationCategoryRepo.findOne(dataNode.get(""String_Node_Str"").get(""String_Node_Str"").asLong());
  Organization newOrganizationParent=organizationRepo.findOne(dataNode.get(""String_Node_Str"").asLong());
  organizationRepo.create(dataNode.get(""String_Node_Str"").asText(),newOrganizationParent,newOrganizationCategory);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,getAll()));
  return new ApiResponse(SUCCESS);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") public ApiResponse createOrganization(@Data String data){
  JsonNode dataNode=null;
  try {
    dataNode=objectMapper.readTree(data);
  }
 catch (  IOException e) {
    return new ApiResponse(ERROR,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
  OrganizationCategory newOrganizationCategory=organizationCategoryRepo.findOne(dataNode.get(""String_Node_Str"").get(""String_Node_Str"").asLong());
  Organization newOrganizationParent=organizationRepo.findOne(dataNode.get(""String_Node_Str"").asLong());
  organizationRepo.create(dataNode.get(""String_Node_Str"").asText(),newOrganizationParent,newOrganizationCategory);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,getAll()));
  return new ApiResponse(SUCCESS);
}",0.9908814589665652
189286,"@Override public WorkflowStep update(WorkflowStep workflowStep,Organization requestingOrganization) throws WorkflowStepNonOverrideableException {
  if (workflowStep.getOriginatingOrganization() != null && requestingOrganization.getId().equals(workflowStep.getOriginatingOrganization().getId())) {
    workflowStep=workflowStepRepo.findOne(workflowStep.getId());
    Organization originatingOrg=workflowStep.getOriginatingOrganization();
    if (workflowStep.getOverrideable() == false) {
      Set<WorkflowStep> derivativeWorkflowStepsToDelete=recursivelyReplaceDescendantStepsYieldingSetToDelete(originatingOrg,workflowStep);
      for (      WorkflowStep ws : derivativeWorkflowStepsToDelete) {
        workflowStepRepo.delete(ws);
      }
    }
    workflowStep=workflowStepRepo.save(workflowStep);
  }
 else   if (workflowStep.getOverrideable()) {
    WorkflowStep newWorkflowStep=workflowStepRepo.create(workflowStep.getName(),requestingOrganization,requestingOrganization.getPositionOfWorkflowStep(workflowStep),workflowStep);
    newWorkflowStep.setOriginatingWorkflowStep(workflowStep.getOriginatingWorkflowStep());
    newWorkflowStep.addContainedByOrganization(requestingOrganization);
    newWorkflowStep.setOriginatingOrganization(requestingOrganization);
    for (    FieldProfile fieldProfile : workflowStep.getFieldProfiles()) {
      fieldProfile.setOriginatingWorkflowStep(workflowStep);
      newWorkflowStep.addFieldProfile(fieldProfile);
    }
    requestingOrganization.removeWorkflowStep(workflowStepRepo.findOne(workflowStep.getId()));
    requestingOrganization.removeWorkflowStepOrder(workflowStep.getId());
    for (    Organization childOrg : requestingOrganization.getChildrenOrganizations()) {
      recursivelyReplaceWSIdsInOrders(childOrg,workflowStep,newWorkflowStep);
    }
    organizationRepo.save(requestingOrganization);
    return newWorkflowStep;
  }
 else {
    throw new WorkflowStepNonOverrideableException();
  }
  return workflowStep;
}","@Override public WorkflowStep update(WorkflowStep workflowStep,Organization requestingOrganization) throws WorkflowStepNonOverrideableException {
  if (workflowStep.getOriginatingOrganization() != null && requestingOrganization.getId().equals(workflowStep.getOriginatingOrganization().getId())) {
    Organization originatingOrg=workflowStep.getOriginatingOrganization();
    if (workflowStep.getOverrideable() == false) {
      Set<WorkflowStep> derivativeWorkflowStepsToDelete=recursivelyReplaceDescendantStepsYieldingSetToDelete(originatingOrg,workflowStep);
      for (      WorkflowStep ws : derivativeWorkflowStepsToDelete) {
        workflowStepRepo.delete(ws);
      }
    }
    workflowStep=workflowStepRepo.save(workflowStep);
  }
 else   if (workflowStep.getOverrideable()) {
    WorkflowStep newWorkflowStep=workflowStepRepo.create(workflowStep.getName(),requestingOrganization,requestingOrganization.getPositionOfWorkflowStep(workflowStep),workflowStep);
    newWorkflowStep.setOriginatingWorkflowStep(workflowStep.getOriginatingWorkflowStep());
    newWorkflowStep.addContainedByOrganization(requestingOrganization);
    newWorkflowStep.setOriginatingOrganization(requestingOrganization);
    for (    FieldProfile fieldProfile : workflowStep.getFieldProfiles()) {
      fieldProfile.setOriginatingWorkflowStep(workflowStep);
      newWorkflowStep.addFieldProfile(fieldProfile);
    }
    requestingOrganization.removeWorkflowStep(workflowStepRepo.findOne(workflowStep.getId()));
    requestingOrganization.removeWorkflowStepOrder(workflowStep.getId());
    for (    Organization childOrg : requestingOrganization.getChildrenOrganizations()) {
      recursivelyReplaceWSIdsInOrders(childOrg,workflowStep,newWorkflowStep);
    }
    organizationRepo.save(requestingOrganization);
    return newWorkflowStep;
  }
 else {
    throw new WorkflowStepNonOverrideableException();
  }
  return workflowStep;
}",0.9833119383825416
189287,"@Override public void delete(WorkflowStep workflowStep){
  if (workflowStep == null)   return;
  Organization originatingOrganization=workflowStep.getOriginatingOrganization();
  if (originatingOrganization != null) {
    originatingOrganization.removeWorkflowStep(workflowStep);
  }
  for (  Organization organization : workflowStep.getContainedByOrganizations()) {
    organization.removeWorkflowStepOrder(workflowStep.getId());
    organization.removeWorkflowStep(workflowStep);
  }
  workflowStep.setContainedByOrganizations(null);
  List<FieldProfile> fieldProfilesToRemove=new ArrayList<FieldProfile>();
  List<FieldProfile> fieldProfilesToDelete=new ArrayList<FieldProfile>();
  for (  FieldProfile fieldProfile : workflowStep.getFieldProfiles()) {
    fieldProfilesToRemove.add(fieldProfile);
    WorkflowStep originatingWorkflowStep=fieldProfile.getOriginatingWorkflowStep();
    if (originatingWorkflowStep.getId().equals(workflowStep.getId())) {
      fieldProfilesToDelete.add(fieldProfile);
    }
  }
  for (  FieldProfile fieldProfile : fieldProfilesToRemove) {
    workflowStep.removeFieldProfile(fieldProfile);
  }
  for (  FieldProfile fieldProfile : fieldProfilesToDelete) {
    recursivelyRemoveFieldProfile(originatingOrganization,fieldProfile);
    fieldProfileRepo.delete(fieldProfile);
  }
  workflowStepRepo.delete(workflowStep.getId());
}","@Override public void delete(WorkflowStep workflowStep){
  if (workflowStep == null)   return;
  Organization originatingOrganization=workflowStep.getOriginatingOrganization();
  if (originatingOrganization != null) {
    originatingOrganization.removeWorkflowStep(workflowStep);
    organizationRepo.save(originatingOrganization);
  }
  for (  Organization organization : workflowStep.getContainedByOrganizations()) {
    organization.removeWorkflowStepOrder(workflowStep.getId());
    organization.removeWorkflowStep(workflowStep);
    organizationRepo.save(organization);
  }
  workflowStep.setContainedByOrganizations(null);
  List<FieldProfile> fieldProfilesToRemove=new ArrayList<FieldProfile>();
  List<FieldProfile> fieldProfilesToDelete=new ArrayList<FieldProfile>();
  for (  FieldProfile fieldProfile : workflowStep.getFieldProfiles()) {
    fieldProfilesToRemove.add(fieldProfile);
    WorkflowStep originatingWorkflowStep=fieldProfile.getOriginatingWorkflowStep();
    if (originatingWorkflowStep.getId().equals(workflowStep.getId())) {
      fieldProfilesToDelete.add(fieldProfile);
    }
  }
  for (  FieldProfile fieldProfile : fieldProfilesToRemove) {
    workflowStep.removeFieldProfile(fieldProfile);
  }
  for (  FieldProfile fieldProfile : fieldProfilesToDelete) {
    recursivelyRemoveFieldProfile(originatingOrganization,fieldProfile);
    fieldProfileRepo.delete(fieldProfile);
  }
  workflowStepRepo.delete(workflowStep.getId());
}",0.9670095778644908
189288,"@Override public Configuration validateUpdate(Configuration configuration){
  if (!configuration.getBindingResult().hasErrors()) {
    Configuration configurationToUpdate=configurationRepo.getByName(configuration.getName());
    if (configuration.getType().equals(""String_Node_Str"") && configuration.getName().contains(""String_Node_Str"")) {
      if (!configuration.getValue().matches(""String_Node_Str"")) {
        configuration.getBindingResult().addError(new ObjectError(""String_Node_Str"",""String_Node_Str""));
      }
    }
 else     if (configurationToUpdate != null && configurationToUpdate.isSystemRequired()) {
      ModelBindingResult bindingResult=configuration.getBindingResult();
      configuration=configurationRepo.create(configuration.getName(),configuration.getValue(),configuration.getType());
      configuration.setBindingResult(bindingResult);
    }
 else     if (configurationToUpdate != null && !configurationToUpdate.isSystemRequired()) {
      configurationToUpdate.setValue(configuration.getValue());
      configurationToUpdate.setBindingResult(configuration.getBindingResult());
      configuration=configurationToUpdate;
    }
 else {
      configuration.getBindingResult().addError(new ObjectError(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return configuration;
}","@Override public Configuration validateUpdate(Configuration configuration){
  if (!configuration.getBindingResult().hasErrors()) {
    Configuration configurationToUpdate=configurationRepo.getByName(configuration.getName());
    if (configuration.getType().equals(""String_Node_Str"") && configuration.getName().contains(""String_Node_Str"")) {
      if (!configuration.getValue().matches(""String_Node_Str"")) {
        configuration.getBindingResult().addError(new ObjectError(""String_Node_Str"",""String_Node_Str""));
      }
    }
    if (configurationToUpdate != null && configurationToUpdate.isSystemRequired()) {
      ModelBindingResult bindingResult=configuration.getBindingResult();
      configuration=configurationRepo.create(configuration.getName(),configuration.getValue(),configuration.getType());
      configuration.setBindingResult(bindingResult);
    }
 else     if (configurationToUpdate != null && !configurationToUpdate.isSystemRequired()) {
      configurationToUpdate.setValue(configuration.getValue());
      configurationToUpdate.setBindingResult(configuration.getBindingResult());
      configuration=configurationToUpdate;
    }
 else {
      configuration.getBindingResult().addError(new ObjectError(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return configuration;
}",0.9976869699306092
189289,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse updateRole(@ApiValidatedModel User user){
  User possiblyExistingUser=userRepo.findByEmail(user.getEmail());
  if (possiblyExistingUser == null) {
    user.getBindingResult().addError(new ObjectError(""String_Node_Str"",""String_Node_Str""));
  }
  if (user.getBindingResult().hasErrors()) {
    return new ApiResponse(ApiResponseType.VALIDATION_ERROR,user.getBindingResult().getAll());
  }
  possiblyExistingUser.setUserRole(user.getUserRole());
  this.simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,allUsersHelper()));
  return new ApiResponse(SUCCESS,user);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse updateRole(@ApiValidatedModel User user){
  User possiblyExistingUser=userRepo.findByEmail(user.getEmail());
  if (possiblyExistingUser == null) {
    user.getBindingResult().addError(new ObjectError(""String_Node_Str"",""String_Node_Str""));
  }
  if (user.getBindingResult().hasErrors()) {
    return new ApiResponse(ApiResponseType.VALIDATION_ERROR,user.getBindingResult().getAll());
  }
  possiblyExistingUser.setUserRole(user.getUserRole());
  userRepo.save(possiblyExistingUser);
  Map<String,Object> retMap=new HashMap<String,Object>();
  retMap.put(""String_Node_Str"",userRepo.findAll());
  retMap.put(""String_Node_Str"",possiblyExistingUser.getEmail());
  this.simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,retMap));
  return new ApiResponse(SUCCESS,user);
}",0.8500635324015248
189290,"@SuppressWarnings(""String_Node_Str"") @Override public void printBanner(Environment environment,Class<?> sourceClass,PrintStream out){
  for (  String line : BANNER) {
    out.println(line);
  }
  String version=this.getClass().getPackage().getImplementationVersion();
  version=environment.getProperty(""String_Node_Str"");
  if (version == null) {
    Manifest manifest=getManifest(this.getClass());
    version=manifest.getMainAttributes().getValue(""String_Node_Str"");
  }
  version=(version == null ? ""String_Node_Str"" : ""String_Node_Str"" + version + ""String_Node_Str"");
  String padding=""String_Node_Str"";
  while (padding.length() < STRAP_LINE_SIZE - (version.length() + VIREO_BOOT.length())) {
    padding+=""String_Node_Str"";
  }
  out.println(AnsiOutput.toString(AnsiElement.GREEN,VIREO_BOOT,AnsiElement.DEFAULT,padding,AnsiElement.FAINT,version));
  out.println();
}","@SuppressWarnings(""String_Node_Str"") @Override public void printBanner(Environment environment,Class<?> sourceClass,PrintStream out){
  for (  String line : BANNER) {
    out.println(line);
  }
  String version=this.getClass().getPackage().getImplementationVersion();
  version=environment.getProperty(""String_Node_Str"");
  if (version == null || version.equals(""String_Node_Str"")) {
    Manifest manifest=getManifest(this.getClass());
    version=manifest.getMainAttributes().getValue(""String_Node_Str"");
  }
  version=(version == null ? ""String_Node_Str"" : ""String_Node_Str"" + version + ""String_Node_Str"");
  String padding=""String_Node_Str"";
  while (padding.length() < STRAP_LINE_SIZE - (version.length() + VIREO_BOOT.length())) {
    padding+=""String_Node_Str"";
  }
  out.println(AnsiOutput.toString(AnsiElement.GREEN,VIREO_BOOT,AnsiElement.DEFAULT,padding,AnsiElement.FAINT,version));
  out.println();
}",0.979225154407636
189291,"/** 
 * @param bindingResult the bindingResult to set
 */
public void setBindingResult(ModelBindingResult bindingResult){
  this.bindingResult=bindingResult;
}","/** 
 * @param bindingResult the bindingResult to set
 */
@JsonIgnore public void setBindingResult(ModelBindingResult bindingResult){
  this.bindingResult=bindingResult;
}",0.9636363636363636
189292,"/** 
 * @return the bindingResult
 */
public ModelBindingResult getBindingResult(){
  return bindingResult;
}","/** 
 * @return the bindingResult
 */
@JsonIgnore public ModelBindingResult getBindingResult(){
  return bindingResult;
}",0.9478260869565216
189293,"/** 
 * @param isSystemRequired the isSystemRequired to set
 */
public void isSystemRequired(Boolean isSystemRequired){
  this.isSystemRequired=isSystemRequired;
}","/** 
 * @param isSystemRequired the isSystemRequired to set
 */
@JsonIgnore public void isSystemRequired(Boolean isSystemRequired){
  this.isSystemRequired=isSystemRequired;
}",0.9644970414201184
189294,"@Override public boolean equals(Object obj){
  if (obj.getClass().equals(this.getClass())) {
    return ((BaseEntity)obj).getId().equals(this.getId());
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj != null && obj.getClass().equals(this.getClass())) {
    Long objId=((BaseEntity)obj).getId();
    if (objId != null) {
      return objId.equals(this.getId());
    }
  }
  return false;
}",0.7980769230769231
189295,"/** 
 * Assumes that the incoming Object embargo is @Valid
 * @param obj
 * @return
 */
@Override public boolean equals(Object obj){
  if (super.equals(obj)) {
    Embargo embargo=(Embargo)obj;
    if (embargo.getBindingResult() != null && !embargo.getBindingResult().hasErrors() && embargo.getName().equals(this.getName()) && embargo.getDescription().equals(this.getDescription()) && embargo.getGuarantor().equals(this.getGuarantor())) {
      Integer tempDuration=embargo.getDuration();
      if (tempDuration != null) {
        return tempDuration.equals(this.getDuration());
      }
 else {
        return tempDuration == this.getDuration();
      }
    }
  }
  return false;
}","/** 
 * Assumes that the incoming Object embargo is @Valid
 * @param obj
 * @return
 */
@Override public boolean equals(Object obj){
  Boolean equalsFromBase=super.equals(obj);
  if (equalsFromBase) {
    Embargo embargo=(Embargo)obj;
    if (embargo.getBindingResult() != null && !embargo.getBindingResult().hasErrors() && embargo.getName().equals(this.getName()) && embargo.getDescription().equals(this.getDescription()) && embargo.getGuarantor().equals(this.getGuarantor())) {
      Integer tempDuration=embargo.getDuration();
      if (tempDuration != null) {
        return tempDuration.equals(this.getDuration());
      }
 else {
        return tempDuration == this.getDuration();
      }
    }
 else {
      return equalsFromBase;
    }
  }
  return false;
}",0.9183955739972336
189296,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse sortEmbargoes(@ApiVariable String column,@ApiVariable String where){
  EmbargoGuarantor guarantor=EmbargoGuarantor.fromString(where);
  if (guarantor != null) {
    embargoRepo.sort(column,guarantor);
    simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,getAll()));
    return new ApiResponse(SUCCESS);
  }
  return new ApiResponse(ERROR);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse sortEmbargoes(@ApiVariable String guarantorString,@ApiVariable String column){
  EmbargoGuarantor guarantor=EmbargoGuarantor.fromString(guarantorString);
  if (guarantor != null) {
    embargoRepo.sort(column,guarantor);
    simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,getAll()));
    return new ApiResponse(SUCCESS);
  }
  return new ApiResponse(ERROR);
}",0.9453781512605042
189297,"@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse reorderEmbargoes(@ApiVariable String src,@ApiVariable String dest){
  Long intSrc=Long.parseLong(src);
  Long intDest=Long.parseLong(dest);
  embargoRepo.reorder(intSrc,intDest);
  simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,getAll()));
  return new ApiResponse(SUCCESS);
}","@ApiMapping(""String_Node_Str"") @Auth(role=""String_Node_Str"") @Transactional public ApiResponse reorderEmbargoes(@ApiVariable String guarantorString,@ApiVariable String src,@ApiVariable String dest){
  EmbargoGuarantor guarantor=EmbargoGuarantor.fromString(guarantorString);
  if (guarantor != null) {
    Long intSrc=Long.parseLong(src);
    Long intDest=Long.parseLong(dest);
    embargoRepo.reorder(intSrc,intDest,guarantor);
    simpMessagingTemplate.convertAndSend(""String_Node_Str"",new ApiResponse(SUCCESS,getAll()));
    return new ApiResponse(SUCCESS);
  }
  return new ApiResponse(ERROR);
}",0.7932067932067932
189298,"public void reorder(Long src,Long dest);","public void reorder(Long src,Long dest,EmbargoGuarantor guarantor);",0.7476635514018691
189299,"@Override public void reorder(Long src,Long dest){
  orderedEntityService.reorder(Embargo.class,src,dest);
}","@Override public void reorder(Long src,Long dest,EmbargoGuarantor guarantor){
  orderedEntityService.reorder(Embargo.class,src,dest,""String_Node_Str"",guarantor);
}",0.7970479704797048
189300,"@SuppressWarnings(""String_Node_Str"") private void swap(Class<?> clazz,Long here,Long there){
  CriteriaBuilder cb=entityManager.getCriteriaBuilder();
  CriteriaUpdate<Object> update=(CriteriaUpdate<Object>)cb.createCriteriaUpdate(clazz);
  Root<?> e=update.from((Class<Object>)clazz);
  Path<Long> path=e.get(POSITION_COLUMN_NAME);
  update.set(path,there);
  update.where(cb.equal(e.get(POSITION_COLUMN_NAME),here));
  entityManager.createQuery(update).executeUpdate();
}","@SuppressWarnings(""String_Node_Str"") private void swap(Class<?> clazz,Long here,Long there,String whereProp,Object whereVal){
  CriteriaBuilder cb=entityManager.getCriteriaBuilder();
  CriteriaUpdate<Object> update=(CriteriaUpdate<Object>)cb.createCriteriaUpdate(clazz);
  Root<?> e=update.from((Class<Object>)clazz);
  Path<Long> path=e.get(POSITION_COLUMN_NAME);
  update.set(path,there);
  List<Predicate> predicates=new ArrayList<Predicate>();
  predicates.add(cb.equal(e.get(POSITION_COLUMN_NAME),here));
  if (whereProp != null && whereVal != null) {
    predicates.add(cb.equal(e.get(whereProp),whereVal));
  }
  update.where(predicates.toArray(new Predicate[]{}));
  entityManager.createQuery(update).executeUpdate();
}",0.7673060884070059
189301,"/** 
 * TODO: THIS NEEDS TO findbyid not findbyposition!
 * @param clazz
 * @param src
 * @param dest
 */
@SuppressWarnings(""String_Node_Str"") public synchronized void reorder(Class<?> clazz,Long src,Long dest){
  swap(clazz,src,Long.MAX_VALUE);
{
    CriteriaBuilder cb=entityManager.getCriteriaBuilder();
    CriteriaUpdate<Object> update=(CriteriaUpdate<Object>)cb.createCriteriaUpdate(clazz);
    Root<?> e=update.from((Class<Object>)clazz);
    Path<Long> path=e.get(POSITION_COLUMN_NAME);
    if (src > dest) {
      update.set(path,cb.sum(path,one));
      List<Predicate> predicates=new ArrayList<Predicate>();
      predicates.add(cb.greaterThanOrEqualTo(path,dest));
      predicates.add(cb.lessThan(path,src));
      update.where(predicates.toArray(new Predicate[]{}));
      entityManager.createQuery(update).executeUpdate();
    }
 else     if (src < dest) {
      update.set(path,cb.sum(path,-one));
      List<Predicate> predicates=new ArrayList<Predicate>();
      predicates.add(cb.greaterThan(path,src));
      predicates.add(cb.lessThanOrEqualTo(path,dest));
      update.where(predicates.toArray(new Predicate[]{}));
      entityManager.createQuery(update).executeUpdate();
    }
 else {
    }
  }
  swap(clazz,Long.MAX_VALUE,dest);
}","/** 
 * @param clazz
 * @param src
 * @param dest
 */
@SuppressWarnings(""String_Node_Str"") public synchronized void reorder(Class<?> clazz,Long src,Long dest,String whereProp,Object whereVal){
  swap(clazz,src,Long.MAX_VALUE,whereProp,whereVal);
{
    CriteriaBuilder cb=entityManager.getCriteriaBuilder();
    CriteriaUpdate<Object> update=(CriteriaUpdate<Object>)cb.createCriteriaUpdate(clazz);
    Root<?> e=update.from((Class<Object>)clazz);
    Path<Long> path=e.get(POSITION_COLUMN_NAME);
    if (src > dest) {
      update.set(path,cb.sum(path,one));
      List<Predicate> predicates=new ArrayList<Predicate>();
      predicates.add(cb.greaterThanOrEqualTo(path,dest));
      predicates.add(cb.lessThan(path,src));
      if (whereProp != null && whereVal != null) {
        predicates.add(cb.equal(e.get(whereProp),whereVal));
      }
      update.where(predicates.toArray(new Predicate[]{}));
      entityManager.createQuery(update).executeUpdate();
    }
 else     if (src < dest) {
      update.set(path,cb.sum(path,-one));
      List<Predicate> predicates=new ArrayList<Predicate>();
      predicates.add(cb.greaterThan(path,src));
      predicates.add(cb.lessThanOrEqualTo(path,dest));
      if (whereProp != null && whereVal != null) {
        predicates.add(cb.equal(e.get(whereProp),whereVal));
      }
      update.where(predicates.toArray(new Predicate[]{}));
      entityManager.createQuery(update).executeUpdate();
    }
 else {
    }
  }
  swap(clazz,Long.MAX_VALUE,dest,whereProp,whereVal);
}",0.8688109866281171
189302,"/** 
 * Turns a List&lt;Configuration&gt; into a Map&lt;Configuration.type(), Map&lt;Configuration.name(), Configuration.value()&gt;&gt; Assumes that the List&lt;Configuration&gt; that is passed in is pre-sorted by configuration.type
 * @param configurations
 * @return
 */
private Map<String,Map<String,String>> toConfigPairsMap(List<Configuration> configurations){
  Map<String,Map<String,String>> typesToConfigPairs=new HashMap<String,Map<String,String>>();
  Map<String,String> items=new HashMap<String,String>();
  String lastType=""String_Node_Str"";
  for (  Configuration configuration : configurations) {
    if (!lastType.equals(configuration.getType())) {
      typesToConfigPairs.put(lastType,items);
      items=new HashMap<String,String>();
      lastType=configuration.getType();
    }
    items.put(configuration.getName(),configuration.getValue());
  }
  return typesToConfigPairs;
}","/** 
 * Turns a List&lt;Configuration&gt; into a Map&lt;Configuration.type(), Map&lt;Configuration.name(), Configuration.value()&gt;&gt; Assumes that the List&lt;Configuration&gt; that is passed in is pre-sorted by configuration.type
 * @param configurations
 * @return
 */
private Map<String,Map<String,String>> toConfigPairsMap(List<Configuration> configurations){
  Map<String,Map<String,String>> typesToConfigPairs=new HashMap<String,Map<String,String>>();
  Map<String,String> items=new HashMap<String,String>();
  String lastType=""String_Node_Str"";
  for (  Configuration configuration : configurations) {
    if (!lastType.equals(configuration.getType())) {
      typesToConfigPairs.put(lastType,items);
      items=new HashMap<String,String>();
      lastType=configuration.getType();
    }
    items.put(configuration.getName(),configuration.getValue());
  }
  if (!items.isEmpty()) {
    typesToConfigPairs.put(lastType,items);
  }
  return typesToConfigPairs;
}",0.9518716577540108
189303,"/** 
 * @param childrenOrganizations the childrenOrganizations to set
 */
public void setChildrenOrganizations(Set<Organization> childrenOrganizations){
  childrenOrganizations.stream().forEach(childOrganization -> {
    childOrganization.addParentOrganization(this);
  }
);
  this.childrenOrganizations=childrenOrganizations;
}","/** 
 * @param childrenOrganizations the childrenOrganizations to set
 */
public void setChildrenOrganizations(Set<Organization> childrenOrganizations){
  if (childrenOrganizations != null) {
    childrenOrganizations.stream().forEach(childOrganization -> {
      childOrganization.addParentOrganization(this);
    }
);
    this.childrenOrganizations=childrenOrganizations;
  }
}",0.9278642149929278
189304,"/** 
 * Handle adding a message from an AJAX request
 * @param subId The submission id.
 */
@Security(RoleType.NONE) public static void reviewJSON(String token){
  Person person=context.getPerson();
  notFoundIfNull(token);
  Submission sub=subRepo.findSubmissionByEmailHash(token);
  notFoundIfNull(sub);
  Logger.info(""String_Node_Str"",person.getFormattedName(NameFormat.FIRST_LAST),person.getId(),person.getEmail(),sub.getId());
  boolean inputRecieved=false;
  String error=""String_Node_Str"";
  try {
    context.turnOffAuthorization();
    Date agreementDate=new Date();
    boolean messageReceived=false;
    if (params.get(""String_Node_Str"") != null && params.get(""String_Node_Str"").trim().length() > 0) {
      sub.logAction(""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"");
      inputRecieved=true;
      messageReceived=true;
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeEmbargoApprovalDate(agreementDate);
      inputRecieved=true;
    }
 else     if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      if (messageReceived) {
        sub.setCommitteeEmbargoApprovalDate(null);
        inputRecieved=true;
      }
 else {
        error+=""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeApprovalDate(agreementDate);
      inputRecieved=true;
    }
 else     if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      if (messageReceived) {
        sub.setCommitteeApprovalDate(null);
        inputRecieved=true;
      }
 else {
        error+=""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
    sub.save();
  }
  finally {
    context.restoreAuthorization();
  }
  if (error == ""String_Node_Str"")   renderJSON(""String_Node_Str"" + inputRecieved + ""String_Node_Str"");
 else   renderJSON(""String_Node_Str"" + error + ""String_Node_Str"");
}","/** 
 * Handle adding a message from an AJAX request
 * @param subId The submission id.
 */
public static void reviewJSON(String token){
  Person person=context.getPerson();
  notFoundIfNull(token);
  Submission sub=subRepo.findSubmissionByEmailHash(token);
  notFoundIfNull(sub);
  if (person != null)   Logger.info(""String_Node_Str"",person.getFormattedName(NameFormat.FIRST_LAST),person.getId(),person.getEmail(),sub.getId());
  boolean inputRecieved=false;
  String error=""String_Node_Str"";
  try {
    context.turnOffAuthorization();
    Date agreementDate=new Date();
    boolean messageReceived=false;
    if (params.get(""String_Node_Str"") != null && params.get(""String_Node_Str"").trim().length() > 0) {
      sub.logAction(""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"");
      inputRecieved=true;
      messageReceived=true;
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeEmbargoApprovalDate(agreementDate);
      inputRecieved=true;
    }
 else     if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      if (messageReceived) {
        sub.setCommitteeEmbargoApprovalDate(null);
        inputRecieved=true;
      }
 else {
        error+=""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeApprovalDate(agreementDate);
      inputRecieved=true;
    }
 else     if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      if (messageReceived) {
        sub.setCommitteeApprovalDate(null);
        inputRecieved=true;
      }
 else {
        error+=""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
    sub.save();
  }
  finally {
    context.restoreAuthorization();
  }
  if (error == ""String_Node_Str"")   renderJSON(""String_Node_Str"" + inputRecieved + ""String_Node_Str"");
 else   renderJSON(""String_Node_Str"" + error + ""String_Node_Str"");
}",0.988907245692707
189305,"/** 
 * Display the faculty advisor's review page where the user can approve or reject a submission. Theoretically we can identify the advisor based upon their use of the security token. If they have that token then they can access the submission. We still require that they authenticate first so we atleast have a user account associated with them.
 * @param token The advisor's sort-of-security token.
 */
@Security(RoleType.NONE) public static void review(String token){
  Person person=context.getPerson();
  if (context.isManager()) {
    String affiliationConfig=Play.configuration.getProperty(AFFILIATION_CONFIG,""String_Node_Str"");
    if (""String_Node_Str"".equals(affiliationConfig)) {
      for (      String affiliation : affiliationConfig.split(""String_Node_Str"")) {
        if (person.getAffiliations().contains(affiliation.trim())) {
          unauthorized(""String_Node_Str"" + affiliationConfig + ""String_Node_Str"");
        }
      }
    }
  }
  notFoundIfNull(token);
  Submission sub=subRepo.findSubmissionByEmailHash(token);
  notFoundIfNull(sub);
  Logger.info(""String_Node_Str"",person.getFormattedName(NameFormat.FIRST_LAST),person.getId(),person.getEmail(),sub.getId());
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<EmbargoType> allEmbargos=settingRepo.findAllEmbargoTypes();
  Person submitter=sub.getSubmitter();
  List<ActionLog> logs=subRepo.findActionLog(sub);
  Attachment primaryDocument=sub.getPrimaryDocument();
  List<Attachment> additionalDocuments=sub.getAttachmentsByType(AttachmentType.SUPPLEMENTAL,AttachmentType.ADMINISTRATIVE,AttachmentType.SOURCE);
  List<Attachment> feedbackDocuments=sub.getAttachmentsByType(AttachmentType.FEEDBACK);
  for (  FieldConfig field : FieldConfig.values()) {
    renderArgs.put(field.name(),field);
  }
  renderTemplate(""String_Node_Str"",token,sub,submitter,logs,primaryDocument,additionalDocuments,feedbackDocuments,grantor,allEmbargos);
}","/** 
 * Display the faculty advisor's review page where the user can approve or reject a submission. Theoretically we can identify the advisor based upon their use of the security token. If they have that token then they can access the submission. We still require that they authenticate first so we atleast have a user account associated with them.
 * @param token The advisor's sort-of-security token.
 */
public static void review(String token){
  Person person=context.getPerson();
  if (context.isManager()) {
    String affiliationConfig=Play.configuration.getProperty(AFFILIATION_CONFIG,""String_Node_Str"");
    if (""String_Node_Str"".equals(affiliationConfig)) {
      for (      String affiliation : affiliationConfig.split(""String_Node_Str"")) {
        if (person.getAffiliations().contains(affiliation.trim())) {
          unauthorized(""String_Node_Str"" + affiliationConfig + ""String_Node_Str"");
        }
      }
    }
  }
  notFoundIfNull(token);
  Submission sub=subRepo.findSubmissionByEmailHash(token);
  notFoundIfNull(sub);
  if (person != null)   Logger.info(""String_Node_Str"",person.getFormattedName(NameFormat.FIRST_LAST),person.getId(),person.getEmail(),sub.getId());
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<EmbargoType> allEmbargos=settingRepo.findAllEmbargoTypes();
  Person submitter=sub.getSubmitter();
  List<ActionLog> logs=subRepo.findActionLog(sub);
  Attachment primaryDocument=sub.getPrimaryDocument();
  List<Attachment> additionalDocuments=sub.getAttachmentsByType(AttachmentType.SUPPLEMENTAL,AttachmentType.ADMINISTRATIVE,AttachmentType.SOURCE);
  List<Attachment> feedbackDocuments=sub.getAttachmentsByType(AttachmentType.FEEDBACK);
  for (  FieldConfig field : FieldConfig.values()) {
    renderArgs.put(field.name(),field);
  }
  renderTemplate(""String_Node_Str"",token,sub,submitter,logs,primaryDocument,additionalDocuments,feedbackDocuments,grantor,allEmbargos);
}",0.9879579810402256
189306,"public void doJob(){
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
          installedEmbargo.setSystemRequired(true);
          installedEmbargo.save();
        }
      }
      if (!found) {
        EmbargoType newembargo=settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor);
        newembargo.setSystemRequired(true);
        newembargo.save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}","public void doJob(){
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name) && installedEmbargo.getGuarantor().toString().equals(embargoDefinition.guarantor.toString())) {
          found=true;
          installedEmbargo.setDescription(embargoDefinition.description);
          installedEmbargo.setDuration(embargoDefinition.duration);
          installedEmbargo.setSystemRequired(embargoDefinition.isSystem);
          installedEmbargo.save();
        }
      }
      if (!found) {
        EmbargoType newembargo=settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor);
        newembargo.setSystemRequired(embargoDefinition.isSystem);
        newembargo.save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}",0.8620850864890136
189307,"EmbargoArray(String name,String description,Integer duration,boolean active,EmbargoGuarantor guarantor){
  this.name=name;
  this.description=description;
  this.duration=duration;
  this.active=active;
  this.guarantor=guarantor;
}","EmbargoArray(String name,String description,Integer duration,boolean active,boolean isSystem,EmbargoGuarantor guarantor){
  this.name=name;
  this.description=description;
  this.duration=duration;
  this.active=active;
  this.isSystem=isSystem;
  this.guarantor=guarantor;
}",0.9151873767258384
189308,"private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
String sEmbargos=""String_Node_Str"";
List<EmbargoType> embargoTypes=sub.getEmbargoTypes();
for (int k=0; k < embargoTypes.size(); k++) {
EmbargoType embargoType=embargoTypes.get(k);
sEmbargos+=embargoType.getName() + (embargoType.getGuarantor() != EmbargoGuarantor.DEFAULT ? ""String_Node_Str"" + embargoType.getGuarantor().name() + ""String_Node_Str"" : ""String_Node_Str"") + ((k + 1) < embargoTypes.size() ? ""String_Node_Str"" : ""String_Node_Str"");
}
row.createCell(j).setCellValue(sEmbargos);
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
String sActions=""String_Node_Str"";
SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
List<CustomActionDefinition> customActions=settingRepo.findAllCustomActionDefinition();
for (int k=0; k < customActions.size(); k++) {
CustomActionDefinition systemAction=customActions.get(k);
boolean found=false;
for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
if (systemAction.equals(subAction.getDefinition())) {
sActions+=""String_Node_Str"" + subAction.getDefinition().getLabel();
found=true;
}
}
if (!found) {
sActions+=""String_Node_Str"" + systemAction.getLabel();
}
if ((k + 1) < customActions.size()) {
sActions+='\n';
}
}
row.createCell(j).setCellValue(sActions);
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
case ORCID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter().getOrcid() != null) row.createCell(j).setCellValue(sub.getSubmitter().getOrcid());
j++;
break;
}
}
}","private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
String sEmbargos=""String_Node_Str"";
List<EmbargoType> embargoTypes=sub.getEmbargoTypes();
for (int k=0; k < embargoTypes.size(); k++) {
EmbargoType embargoType=embargoTypes.get(k);
sEmbargos+=embargoType.getName() + (embargoType.getGuarantor() != EmbargoGuarantor.DEFAULT ? ""String_Node_Str"" + embargoType.getGuarantor().name() + ""String_Node_Str"" : ""String_Node_Str"") + ((k + 1) < embargoTypes.size() ? ""String_Node_Str"" : ""String_Node_Str"");
}
row.createCell(j).setCellValue(sEmbargos);
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
String sActions=""String_Node_Str"";
SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
List<CustomActionDefinition> customActions=settingRepo.findAllCustomActionDefinition();
for (int k=0; k < customActions.size(); k++) {
CustomActionDefinition systemAction=customActions.get(k);
boolean found=false;
for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
if (systemAction.equals(subAction.getDefinition())) {
sActions+=""String_Node_Str"" + subAction.getDefinition().getLabel();
found=true;
}
}
if (!found) {
sActions+=""String_Node_Str"" + systemAction.getLabel();
}
if ((k + 1) < customActions.size()) {
sActions+='\n';
}
}
row.createCell(j).setCellValue(sActions);
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
case ORCID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getOrcid() != null) row.createCell(j).setCellValue(sub.getOrcid());
j++;
break;
}
}
}",0.9983335184979448
189309,"/** 
 * Load all predefined settings. Colleges, departments, majors, degrees, document types, graduation month, and embargo definitions.
 */
public static void loadSettings() throws IOException {
  for (  ConfigurationArray config : CONFIG_DEFINITIONS) {
    settingRepo.createConfiguration(config.name,config.value).save();
  }
  for (  ProgramsArray programDefinition : PROGRAMS_DEFINITIONS) {
    settingRepo.createProgram(programDefinition.name,programDefinition.emails).save();
  }
  for (  CollegesArray collegeDefinition : COLLEGES_DEFINITIONS) {
    settingRepo.createCollege(collegeDefinition.name,collegeDefinition.emails).save();
  }
  for (  DepartmentsArray departmentDefinition : DEPARTMENTS_DEFINITIONS) {
    settingRepo.createDepartment(departmentDefinition.name,departmentDefinition.emails).save();
  }
  for (  String majorDefinition : MAJORS_DEFINITIONS) {
    settingRepo.createMajor(majorDefinition).save();
  }
  for (  DegreeLevelArray degreeDefinition : DEGREES_DEFINITIONS) {
    settingRepo.createDegree(degreeDefinition.name,degreeDefinition.degreeLevel).save();
  }
  for (  DegreeLevelArray docTypeDefinition : DOCTYPES_DEFINITIONS) {
    settingRepo.createDocumentType(docTypeDefinition.name,docTypeDefinition.degreeLevel).save();
  }
  for (  DegreeLevelArray roleTypeDefinition : ROLETYPES_DEFINITIONS) {
    settingRepo.createCommitteeMemberRoleType(roleTypeDefinition.name,roleTypeDefinition.degreeLevel).save();
  }
  for (  int gradMonthDefinition : GRAD_MONTHS_DEFINITIONS) {
    settingRepo.createGraduationMonth(gradMonthDefinition).save();
  }
  for (  EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
    settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor).save();
  }
  for (  String actionDefinition : CUSTOM_ACTIONS_DEFINITIONS) {
    settingRepo.createCustomActionDefinition(actionDefinition,false).save();
  }
  systemEmailService.generateAllSystemEmailTemplates();
  for (  EmailTemplateArray templateDefinition : EMAIL_TEMPLATE_DEFINITIONS) {
    settingRepo.createEmailTemplate(templateDefinition.name,templateDefinition.subject,templateDefinition.message).save();
  }
  for (  AdministrativeGroupsArray adminGroupDefinition : ADMINISTRATIVE_GROUPS) {
    settingRepo.createAdministrativeGroup(adminGroupDefinition.name,adminGroupDefinition.emails).save();
  }
  for (  EmailWorkflowRulesArray ruleDefinition : EMAIL_WORKFLOW_RULES) {
    State ruleState=stateManager.getState(ruleDefinition.associatedState);
    EmailWorkflowRule wferule=settingRepo.createEmailWorkflowRule(ruleState);
    JpaEmailWorkflowRuleConditionImpl condition=(JpaEmailWorkflowRuleConditionImpl)settingRepo.createEmailWorkflowRuleCondition(ruleDefinition.condition.conditionType);
    if (ruleDefinition.condition.conditionId == null) {
switch (condition.conditionType) {
case Always:
        break;
case College:
      ruleDefinition.condition.conditionId=settingRepo.findAllColleges().get(0).getId();
    break;
case Department:
  ruleDefinition.condition.conditionId=settingRepo.findAllDepartments().get(0).getId();
break;
case Program:
ruleDefinition.condition.conditionId=settingRepo.findAllPrograms().get(0).getId();
break;
default :
throw new UnsupportedOperationException();
}
}
condition.setConditionId(ruleDefinition.condition.conditionId);
condition.save();
wferule.setCondition(condition);
JpaEmailTemplateImpl emailTemplate=(JpaEmailTemplateImpl)settingRepo.findEmailTemplateByName(ruleDefinition.emailTemplate.name);
wferule.setEmailTemplate(emailTemplate);
wferule.setRecipientType(ruleDefinition.recipientType);
if (ruleDefinition.adminGroupRecipient == null && ruleDefinition.recipientType == RecipientType.AdminGroup) {
ruleDefinition.adminGroupRecipient=settingRepo.findAllAdministrativeGroups().get(0).getId();
}
if (ruleDefinition.adminGroupRecipient != null) {
JpaAdministrativeGroupImpl adminGroup=(JpaAdministrativeGroupImpl)settingRepo.findAdministrativeGroup(ruleDefinition.adminGroupRecipient);
wferule.setAdminGroupRecipient(adminGroup);
}
 else {
wferule.setAdminGroupRecipient(null);
}
wferule.enable();
wferule.save();
}
for (DepositLocationArray locationDefinition : DEPOSIT_LOCATION_DEFINITIONS) {
Depositor depositor=(Depositor)Spring.getBean(locationDefinition.depositor);
Packager packager=(Packager)Spring.getBean(locationDefinition.packager);
DepositLocation location=settingRepo.createDepositLocation(locationDefinition.name);
location.setRepository(locationDefinition.repository);
location.setCollection(locationDefinition.collection);
location.setUsername(locationDefinition.username);
location.setPassword(locationDefinition.password);
location.setOnBehalfOf(locationDefinition.onBehalfOf);
location.setDepositor(depositor);
location.setPackager(packager);
if (depositor instanceof FileDepositorImpl) {
File baseDir=((FileDepositorImpl)depositor).baseDir;
FileUtils.forceMkdir(baseDir);
location.setCollection(new File(baseDir.getCanonicalPath() + File.separator + locationDefinition.collection).getCanonicalPath());
}
location.save();
}
for (String languageDefinition : LANGUAGES_DEFINITIONS) {
settingRepo.createLanguage(languageDefinition).save();
}
}","/** 
 * Load all predefined settings. Colleges, departments, majors, degrees, document types, graduation month, and embargo definitions.
 */
public static void loadSettings() throws IOException {
  for (  ConfigurationArray config : CONFIG_DEFINITIONS) {
    settingRepo.createConfiguration(config.name,config.value).save();
  }
  for (  ProgramsArray programDefinition : PROGRAMS_DEFINITIONS) {
    settingRepo.createProgram(programDefinition.name,programDefinition.emails).save();
  }
  for (  CollegesArray collegeDefinition : COLLEGES_DEFINITIONS) {
    settingRepo.createCollege(collegeDefinition.name,collegeDefinition.emails).save();
  }
  for (  DepartmentsArray departmentDefinition : DEPARTMENTS_DEFINITIONS) {
    settingRepo.createDepartment(departmentDefinition.name,departmentDefinition.emails).save();
  }
  for (  String majorDefinition : MAJORS_DEFINITIONS) {
    settingRepo.createMajor(majorDefinition).save();
  }
  for (  DegreeLevelArray degreeDefinition : DEGREES_DEFINITIONS) {
    settingRepo.createDegree(degreeDefinition.name,degreeDefinition.degreeLevel).save();
  }
  for (  DegreeLevelArray docTypeDefinition : DOCTYPES_DEFINITIONS) {
    settingRepo.createDocumentType(docTypeDefinition.name,docTypeDefinition.degreeLevel).save();
  }
  for (  DegreeLevelArray roleTypeDefinition : ROLETYPES_DEFINITIONS) {
    settingRepo.createCommitteeMemberRoleType(roleTypeDefinition.name,roleTypeDefinition.degreeLevel).save();
  }
  for (  int gradMonthDefinition : GRAD_MONTHS_DEFINITIONS) {
    settingRepo.createGraduationMonth(gradMonthDefinition).save();
  }
  for (  EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
    EmbargoType embargo=settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor);
    embargo.setSystemRequired(embargoDefinition.isSystem);
    embargo.save();
  }
  for (  String actionDefinition : CUSTOM_ACTIONS_DEFINITIONS) {
    settingRepo.createCustomActionDefinition(actionDefinition,false).save();
  }
  systemEmailService.generateAllSystemEmailTemplates();
  for (  EmailTemplateArray templateDefinition : EMAIL_TEMPLATE_DEFINITIONS) {
    settingRepo.createEmailTemplate(templateDefinition.name,templateDefinition.subject,templateDefinition.message).save();
  }
  for (  AdministrativeGroupsArray adminGroupDefinition : ADMINISTRATIVE_GROUPS) {
    settingRepo.createAdministrativeGroup(adminGroupDefinition.name,adminGroupDefinition.emails).save();
  }
  for (  EmailWorkflowRulesArray ruleDefinition : EMAIL_WORKFLOW_RULES) {
    State ruleState=stateManager.getState(ruleDefinition.associatedState);
    EmailWorkflowRule wferule=settingRepo.createEmailWorkflowRule(ruleState);
    JpaEmailWorkflowRuleConditionImpl condition=(JpaEmailWorkflowRuleConditionImpl)settingRepo.createEmailWorkflowRuleCondition(ruleDefinition.condition.conditionType);
    if (ruleDefinition.condition.conditionId == null) {
switch (condition.conditionType) {
case Always:
        break;
case College:
      ruleDefinition.condition.conditionId=settingRepo.findAllColleges().get(0).getId();
    break;
case Department:
  ruleDefinition.condition.conditionId=settingRepo.findAllDepartments().get(0).getId();
break;
case Program:
ruleDefinition.condition.conditionId=settingRepo.findAllPrograms().get(0).getId();
break;
default :
throw new UnsupportedOperationException();
}
}
condition.setConditionId(ruleDefinition.condition.conditionId);
condition.save();
wferule.setCondition(condition);
JpaEmailTemplateImpl emailTemplate=(JpaEmailTemplateImpl)settingRepo.findEmailTemplateByName(ruleDefinition.emailTemplate.name);
wferule.setEmailTemplate(emailTemplate);
wferule.setRecipientType(ruleDefinition.recipientType);
if (ruleDefinition.adminGroupRecipient == null && ruleDefinition.recipientType == RecipientType.AdminGroup) {
ruleDefinition.adminGroupRecipient=settingRepo.findAllAdministrativeGroups().get(0).getId();
}
if (ruleDefinition.adminGroupRecipient != null) {
JpaAdministrativeGroupImpl adminGroup=(JpaAdministrativeGroupImpl)settingRepo.findAdministrativeGroup(ruleDefinition.adminGroupRecipient);
wferule.setAdminGroupRecipient(adminGroup);
}
 else {
wferule.setAdminGroupRecipient(null);
}
wferule.enable();
wferule.save();
}
for (DepositLocationArray locationDefinition : DEPOSIT_LOCATION_DEFINITIONS) {
Depositor depositor=(Depositor)Spring.getBean(locationDefinition.depositor);
Packager packager=(Packager)Spring.getBean(locationDefinition.packager);
DepositLocation location=settingRepo.createDepositLocation(locationDefinition.name);
location.setRepository(locationDefinition.repository);
location.setCollection(locationDefinition.collection);
location.setUsername(locationDefinition.username);
location.setPassword(locationDefinition.password);
location.setOnBehalfOf(locationDefinition.onBehalfOf);
location.setDepositor(depositor);
location.setPackager(packager);
if (depositor instanceof FileDepositorImpl) {
File baseDir=((FileDepositorImpl)depositor).baseDir;
FileUtils.forceMkdir(baseDir);
location.setCollection(new File(baseDir.getCanonicalPath() + File.separator + locationDefinition.collection).getCanonicalPath());
}
location.save();
}
for (String languageDefinition : LANGUAGES_DEFINITIONS) {
settingRepo.createLanguage(languageDefinition).save();
}
}",0.9877080181543116
189310,"EmbargoArray(String name,String description,Integer duration,boolean active,EmbargoGuarantor guarantor){
  this.name=name;
  this.description=description;
  this.duration=duration;
  this.active=active;
  this.guarantor=guarantor;
}","EmbargoArray(String name,String description,Integer duration,boolean active,boolean isSystem,EmbargoGuarantor guarantor){
  this.name=name;
  this.description=description;
  this.duration=duration;
  this.active=active;
  this.isSystem=isSystem;
  this.guarantor=guarantor;
}",0.9151873767258384
189311,"public void doJob(){
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
          installedEmbargo.setSystemRequired(true);
          installedEmbargo.save();
        }
      }
      if (!found) {
        EmbargoType newembargo=settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor);
        newembargo.setSystemRequired(true);
        newembargo.save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}","public void doJob(){
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
          installedEmbargo.setSystemRequired(true);
          installedEmbargo.save();
        }
      }
      if (!found) {
        EmbargoType newembargo=settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor);
        newembargo.setSystemRequired(true);
        newembargo.save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}",0.9582689335394128
189312,"public static void createUser(){
  if (firstUser == null || firstUser == false)   Application.index();
  if (params.get(""String_Node_Str"") != null) {
    String firstName=params.get(""String_Node_Str"");
    String lastName=params.get(""String_Node_Str"");
    String email=params.get(""String_Node_Str"");
    String password1=params.get(""String_Node_Str"");
    String password2=params.get(""String_Node_Str"");
    String netid=params.get(""String_Node_Str"");
    verify(firstName,lastName,email,password1,password2,netid);
    if (!validation.hasErrors()) {
      context.turnOffAuthorization();
      Person person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.ADMINISTRATOR).save();
      person.setPassword(password1);
      person.save();
      context.turnOffAuthorization();
      context.login(person);
      List<AuthenticationMethod> methods=getEnabledAuthenticationMethods();
      for (      AuthenticationMethod method : methods)       method.personCreated(request,person);
      session.put(""String_Node_Str"",person.getId());
      session.put(""String_Node_Str"",person.getFirstName());
      session.put(""String_Node_Str"",person.getLastName());
      session.put(""String_Node_Str"",person.getDisplayName());
      systemEmailService.generateAllSystemEmailTemplates();
      for (      String roleType : COMMITTEE_MEMBER_ROLE_TYPES_DEFINITIONS) {
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.UNDERGRADUATE).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.MASTERS).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.DOCTORAL).save();
      }
      firstUser=false;
      try {
        SettingsTab.settingsRedirect();
      }
  finally {
        indexer.deleteAndRebuild(false);
      }
    }
 else {
      renderTemplate(""String_Node_Str"",firstName,lastName,email,password1,password2,netid);
    }
  }
  renderTemplate(""String_Node_Str"");
}","public static void createUser(){
  if (firstUser == null || firstUser == false)   Application.index();
  if (params.get(""String_Node_Str"") != null) {
    String firstName=params.get(""String_Node_Str"");
    String lastName=params.get(""String_Node_Str"");
    String email=params.get(""String_Node_Str"");
    String password1=params.get(""String_Node_Str"");
    String password2=params.get(""String_Node_Str"");
    String netid=params.get(""String_Node_Str"");
    verify(firstName,lastName,email,password1,password2,netid);
    if (!validation.hasErrors()) {
      context.turnOffAuthorization();
      Person person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.ADMINISTRATOR).save();
      person.setPassword(password1);
      person.save();
      context.turnOffAuthorization();
      context.login(person);
      List<AuthenticationMethod> methods=getEnabledAuthenticationMethods();
      for (      AuthenticationMethod method : methods)       method.personCreated(request,person);
      session.put(""String_Node_Str"",person.getId());
      session.put(""String_Node_Str"",person.getFirstName());
      session.put(""String_Node_Str"",person.getLastName());
      session.put(""String_Node_Str"",person.getDisplayName());
      systemEmailService.generateAllSystemEmailTemplates();
      if (settingRepo instanceof MockSettingsRepository)       new InitializeEmbargos().doJob(settingRepo);
      for (      String roleType : COMMITTEE_MEMBER_ROLE_TYPES_DEFINITIONS) {
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.UNDERGRADUATE).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.MASTERS).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.DOCTORAL).save();
      }
      firstUser=false;
      try {
        SettingsTab.settingsRedirect();
      }
  finally {
        indexer.deleteAndRebuild(false);
      }
    }
 else {
      renderTemplate(""String_Node_Str"",firstName,lastName,email,password1,password2,netid);
    }
  }
  renderTemplate(""String_Node_Str"");
}",0.9730134932533732
189313,"@Override public void setDuration(Integer duration){
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (duration == null && duration == this.duration)   return;
 else   if (duration.equals(this.duration))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.duration=duration;
}","@Override public void setDuration(Integer duration){
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (duration == null && duration == this.duration)   return;
 else   if (duration == null && duration != this.duration) {
  }
 else   if (duration.equals(this.duration))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.duration=duration;
}",0.9281767955801103
189314,"/** 
 * Test adding and editing an Email Template.
 */
@Test public void testAddingEditingDeletingEmbargoTypes(){
  LOGIN();
  final String EDIT_URL=Router.reverse(""String_Node_Str"").url;
  final String REMOVE_URL=Router.reverse(""String_Node_Str"").url;
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  Response response=POST(EDIT_URL,params);
  assertContentMatch(""String_Node_Str"",response);
  Pattern ID_PATTERN=Pattern.compile(""String_Node_Str"");
  Matcher tokenMatcher=ID_PATTERN.matcher(getContent(response));
  assertTrue(tokenMatcher.find());
  String idString=tokenMatcher.group(1);
  assertNotNull(idString);
  Long id=Long.valueOf(idString);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  assertNotNull(settingRepo.findEmbargoType(id));
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getName());
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getDescription());
  assertEquals(new Integer(4),settingRepo.findEmbargoType(id).getDuration());
  assertEquals(true,settingRepo.findEmbargoType(id).isActive());
  params.clear();
  params.put(""String_Node_Str"",String.valueOf(id));
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  response=POST(EDIT_URL,params);
  assertContentMatch(""String_Node_Str"",response);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getName());
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getDescription());
  assertEquals(null,settingRepo.findEmbargoType(id).getDuration());
  assertEquals(false,settingRepo.findEmbargoType(id).isActive());
  params.clear();
  params.put(""String_Node_Str"",""String_Node_Str"" + id);
  response=POST(REMOVE_URL,params);
  assertContentMatch(""String_Node_Str"",response);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  assertNull(settingRepo.findEmbargoType(id));
}","/** 
 * Test adding and editing an Email Template.
 */
@Test public void testAddingEditingDeletingEmbargoTypes(){
  LOGIN();
  final String EDIT_URL=Router.reverse(""String_Node_Str"").url;
  final String REMOVE_URL=Router.reverse(""String_Node_Str"").url;
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  Response response=POST(EDIT_URL,params);
  assertContentMatch(""String_Node_Str"",response);
  Pattern ID_PATTERN=Pattern.compile(""String_Node_Str"");
  Matcher tokenMatcher=ID_PATTERN.matcher(getContent(response));
  assertTrue(tokenMatcher.find());
  String idString=tokenMatcher.group(1);
  assertNotNull(idString);
  Long id=Long.valueOf(idString);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  assertNotNull(settingRepo.findEmbargoType(id));
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getName());
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getDescription());
  assertEquals(new Integer(4),settingRepo.findEmbargoType(id).getDuration());
  assertEquals(true,settingRepo.findEmbargoType(id).isActive());
  params.clear();
  params.put(""String_Node_Str"",String.valueOf(id));
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  response=POST(EDIT_URL,params);
  assertContentMatch(""String_Node_Str"",response);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getName());
  assertEquals(""String_Node_Str"",settingRepo.findEmbargoType(id).getDescription());
  assertEquals(null,settingRepo.findEmbargoType(id).getDuration());
  assertEquals(false,settingRepo.findEmbargoType(id).isActive());
  params.clear();
  params.put(""String_Node_Str"",String.valueOf(id));
  response=POST(REMOVE_URL,params);
  assertContentMatch(""String_Node_Str"",response);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  assertNull(settingRepo.findEmbargoType(id));
}",0.9915433403805496
189315,"private void createData(){
  adminGroup=(JpaAdministrativeGroupImpl)settingRepo.createAdministrativeGroup(""String_Node_Str"");
  adminGroup.addEmail(""String_Node_Str"");
  adminGroup.addEmail(""String_Node_Str"");
  adminGroup.setDisplayOrder(0);
  adminGroup.save();
  Map<String,State> stateBeanMap=Spring.getBeansOfType(State.class);
  for (  String key : stateBeanMap.keySet()) {
    State state=stateBeanMap.get(key);
    if (state != null) {
      JpaEmailWorkflowRuleImpl rule=(JpaEmailWorkflowRuleImpl)settingRepo.createEmailWorkflowRule(state);
      JpaEmailWorkflowRuleConditionImpl condition=(JpaEmailWorkflowRuleConditionImpl)settingRepo.createEmailWorkflowRuleCondition(ConditionType.Always);
      condition.save();
      rule.setCondition(condition);
      JpaEmailTemplateImpl emailTemplate=(JpaEmailTemplateImpl)settingRepo.findEmailTemplateByName(""String_Node_Str"");
      rule.setEmailTemplate(emailTemplate);
      rule.setRecipientType(RecipientType.AdminGroup);
      rule.setAdminGroupRecipient(adminGroup);
      rule.save();
      rules.add(rule);
    }
  }
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
}","private void createData(){
  adminGroup=(JpaAdministrativeGroupImpl)settingRepo.createAdministrativeGroup(""String_Node_Str"");
  adminGroup.addEmail(""String_Node_Str"");
  adminGroup.addEmail(""String_Node_Str"");
  adminGroup.setDisplayOrder(0);
  adminGroup.save();
  Map<String,State> stateBeanMap=Spring.getBeansOfType(State.class);
  for (  String key : stateBeanMap.keySet()) {
    State state=stateBeanMap.get(key);
    if (state != null && EmailRuleService.doesStateMatchEWFLRuleStates(state)) {
      JpaEmailWorkflowRuleImpl rule=(JpaEmailWorkflowRuleImpl)settingRepo.createEmailWorkflowRule(state);
      JpaEmailWorkflowRuleConditionImpl condition=(JpaEmailWorkflowRuleConditionImpl)settingRepo.createEmailWorkflowRuleCondition(ConditionType.Always);
      condition.save();
      rule.setCondition(condition);
      JpaEmailTemplateImpl emailTemplate=(JpaEmailTemplateImpl)settingRepo.findEmailTemplateByName(""String_Node_Str"");
      rule.setEmailTemplate(emailTemplate);
      rule.setRecipientType(RecipientType.AdminGroup);
      rule.setAdminGroupRecipient(adminGroup);
      rule.enable();
      rule.save();
      rules.add(rule);
    }
  }
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
}",0.968299711815562
189316,"@Test public void testRunEmailRules() throws InterruptedException {
  Iterator<Submission> subIterator=subRepo.findAllSubmissions();
  while (subIterator.hasNext()) {
    Submission submission=subIterator.next();
    play.Logger.info(""String_Node_Str"",submission.getId());
    EmailRuleService.runEmailRules(submission);
    String emailContent=null;
    for (int i=0; i < 50; i++) {
      Thread.yield();
      Thread.sleep(100);
      emailContent=Mail.Mock.getLastMessageReceivedBy(adminGroup.getEmails().get(0));
      if (emailContent != null)       break;
    }
    assertNotNull(emailContent);
  }
}","@Test public void testRunEmailRules() throws InterruptedException {
  Iterator<Submission> subIterator=subRepo.findAllSubmissions();
  while (subIterator.hasNext()) {
    Submission submission=subIterator.next();
    play.Logger.info(""String_Node_Str"",submission.getId());
    EmailRuleService.runEmailRules(submission);
    String emailContent=null;
    for (int i=0; i < 50; i++) {
      Thread.yield();
      Thread.sleep(100);
      emailContent=Mail.Mock.getLastMessageReceivedBy(adminGroup.getEmails().get(0));
      if (emailContent != null)       break;
    }
    if (EmailRuleService.doesSubStateMatchEWFLRuleStates(submission)) {
      assertNotNull(emailContent);
    }
 else {
      assertNull(emailContent);
    }
    Mail.Mock.reset();
  }
}",0.890521675238795
189317,"/** 
 * Convert plain text into passable HTML. Separate text into paragraphs, preserve intending, and try not to mess with any embedded tags.
 * @param value The input text.
 * @return HTML suitable for display.
 */
protected static String text2html(String value){
  String html=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String[] paragraphs=html.split(""String_Node_Str"");
  html=""String_Node_Str"";
  for (  String paragraph : paragraphs) {
    html+=""String_Node_Str"" + paragraph + ""String_Node_Str"";
  }
  html=html.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return html;
}","/** 
 * Convert plain text into passable HTML. Separate text into paragraphs, preserve intending, and try not to mess with any embedded tags.
 * @param value The input text.
 * @return HTML suitable for display.
 */
protected static String text2html(String value){
  if (value == null)   value=""String_Node_Str"";
  String html=value.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String[] paragraphs=html.split(""String_Node_Str"");
  html=""String_Node_Str"";
  for (  String paragraph : paragraphs) {
    html+=""String_Node_Str"" + paragraph + ""String_Node_Str"";
  }
  html=html.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return html;
}",0.961352657004831
189318,"/** 
 * The main view method.
 */
@Security(RoleType.REVIEWER) public static void view(Long subId){
  Long id=subId;
  if (id == null) {
    flash.put(""String_Node_Str"",""String_Node_Str"");
    FilterTab.list();
  }
  Submission submission=subRepo.findSubmission(id);
  if (params.get(""String_Node_Str"") != null)   addActionLogComment(submission);
  if (params.get(""String_Node_Str"") != null)   changeStatus(submission);
  if (params.get(""String_Node_Str"") != null)   addFile(submission);
  if (params.get(""String_Node_Str"") != null)   editFile(submission);
  if (params.get(""String_Node_Str"") != null)   deleteFile(submission);
  JPA.em().detach(submission);
  submission=subRepo.findSubmission(id);
  Boolean isManager=context.isManager();
  if (submission == null) {
    FilterTab.list();
  }
  Person submitter=submission.getSubmitter();
  String advisorUrl=getAdvisorURL(submission);
  List<EmailTemplate> templates=settingRepo.findAllEmailTemplates();
  List<CustomActionDefinition> actions=settingRepo.findAllCustomActionDefinition();
  String gradMonth=null;
  if (submission.getGraduationMonth() != null)   gradMonth=new DateFormatSymbols().getMonths()[submission.getGraduationMonth()];
  List<ActionLog> actionLogs=subRepo.findActionLog(submission);
  List<State> states=stateManager.getAllStates();
  List<State> transitions=submission.getState().getTransitions(submission);
  List<CustomActionValue> actionValues=submission.getCustomActions();
  List<Person> assignees=personRepo.findPersonsByRole(RoleType.REVIEWER);
  List<DepositLocation> depositLocations=settingRepo.findAllDepositLocations();
  List<Attachment> attachments=submission.getAttachments();
  Collections.sort(attachments,new AttachmentSortByDate());
  List<String> attachmentTypes=new ArrayList<String>();
  for (  AttachmentType type : AttachmentType.values()) {
    attachmentTypes.add(type.toString());
  }
  List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
  String nav=""String_Node_Str"";
  render(nav,submission,submitter,isManager,advisorUrl,gradMonth,actionLogs,settingRepo,states,assignees,transitions,templates,actions,actionValues,depositLocations,attachments,attachmentTypes,embargoTypes);
}","/** 
 * The main view method.
 */
@Security(RoleType.REVIEWER) public static void view(Long subId){
  Long id=subId;
  if (id == null) {
    flash.put(""String_Node_Str"",""String_Node_Str"");
    FilterTab.list();
  }
  Submission submission=subRepo.findSubmission(id);
  if (params.get(""String_Node_Str"") != null)   addActionLogComment(submission);
  if (params.get(""String_Node_Str"") != null)   changeStatus(submission);
  if (params.get(""String_Node_Str"") != null)   addFile(submission);
  if (params.get(""String_Node_Str"") != null)   editFile(submission);
  if (params.get(""String_Node_Str"") != null)   deleteFile(submission);
  JPA.em().detach(submission);
  submission=subRepo.findSubmission(id);
  Boolean isManager=context.isManager();
  if (submission == null) {
    FilterTab.list();
  }
  Person submitter=submission.getSubmitter();
  String advisorUrl=getAdvisorURL(submission);
  List<EmailTemplate> templates=settingRepo.findAllEmailTemplates();
  List<CustomActionDefinition> actions=settingRepo.findAllCustomActionDefinition();
  String gradMonth=null;
  if (submission.getGraduationMonth() != null)   gradMonth=new DateFormatSymbols().getMonths()[submission.getGraduationMonth()];
  List<ActionLog> actionLogs=subRepo.findActionLog(submission);
  List<State> states=stateManager.getAllStates();
  List<State> transitions=submission.getState().getTransitions(submission);
  List<CustomActionValue> actionValues=submission.getCustomActions();
  List<Person> assignees=personRepo.findPersonsByRole(RoleType.REVIEWER);
  List<DepositLocation> depositLocations=settingRepo.findAllDepositLocations();
  List<Attachment> attachments=submission.getAttachments();
  Collections.sort(attachments,new AttachmentSortByDate());
  List<String> attachmentTypes=new ArrayList<String>();
  for (  AttachmentType type : AttachmentType.values()) {
    attachmentTypes.add(type.toString());
  }
  List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
  ArrayList<String> roles=new ArrayList<String>();
  for (  CommitteeMemberRoleType role : settingRepo.findAllCommitteeMemberRoleTypes()) {
    String encodedName=URIEncode(role.getName());
    if (!roles.contains(encodedName)) {
      roles.add(encodedName);
    }
  }
  String nav=""String_Node_Str"";
  render(nav,submission,submitter,isManager,advisorUrl,gradMonth,actionLogs,settingRepo,states,assignees,transitions,templates,actions,actionValues,depositLocations,attachments,attachmentTypes,embargoTypes,roles);
}",0.9409246575342466
189319,"private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
String sEmbargos=""String_Node_Str"";
List<EmbargoType> embargoTypes=sub.getEmbargoTypes();
for (int k=0; k < embargoTypes.size(); k++) {
EmbargoType embargoType=embargoTypes.get(k);
sEmbargos+=embargoType.getName() + (embargoType.getGuarantor() != EmbargoGuarantor.DEFAULT ? ""String_Node_Str"" + embargoType.getGuarantor().name() + ""String_Node_Str"" : ""String_Node_Str"") + ((k + 1) < embargoTypes.size() ? '\n' : ""String_Node_Str"");
}
row.createCell(j).setCellValue(sEmbargos);
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
String sActions=""String_Node_Str"";
SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
List<CustomActionDefinition> customActions=settingRepo.findAllCustomActionDefinition();
for (int k=0; k < customActions.size(); k++) {
CustomActionDefinition systemAction=customActions.get(k);
boolean found=false;
for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
if (systemAction.equals(subAction.getDefinition())) {
sActions+=""String_Node_Str"" + subAction.getDefinition().getLabel();
found=true;
}
}
if (!found) {
sActions+=""String_Node_Str"" + systemAction.getLabel();
}
if ((k + 1) < customActions.size()) {
sActions+='\n';
}
}
row.createCell(j).setCellValue(sActions);
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
}
}
}","private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
String sEmbargos=""String_Node_Str"";
List<EmbargoType> embargoTypes=sub.getEmbargoTypes();
for (int k=0; k < embargoTypes.size(); k++) {
EmbargoType embargoType=embargoTypes.get(k);
sEmbargos+=embargoType.getName() + (embargoType.getGuarantor() != EmbargoGuarantor.DEFAULT ? ""String_Node_Str"" + embargoType.getGuarantor().name() + ""String_Node_Str"" : ""String_Node_Str"") + ((k + 1) < embargoTypes.size() ? ""String_Node_Str"" : ""String_Node_Str"");
}
row.createCell(j).setCellValue(sEmbargos);
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
String sActions=""String_Node_Str"";
SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
List<CustomActionDefinition> customActions=settingRepo.findAllCustomActionDefinition();
for (int k=0; k < customActions.size(); k++) {
CustomActionDefinition systemAction=customActions.get(k);
boolean found=false;
for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
if (systemAction.equals(subAction.getDefinition())) {
sActions+=""String_Node_Str"" + subAction.getDefinition().getLabel();
found=true;
}
}
if (!found) {
sActions+=""String_Node_Str"" + systemAction.getLabel();
}
if ((k + 1) < customActions.size()) {
sActions+='\n';
}
}
row.createCell(j).setCellValue(sActions);
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
case ORCID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getOrcid() != null) row.createCell(j).setCellValue(sub.getOrcid());
j++;
break;
}
}
}",0.990171300196574
189320,"/** 
 * The third step of the submission form. We handle committee members a bit differently. Basically we always keep a List of Maps for each committee member while we are working with it. So there are several methods to parse the committee members from the current form data, validate the committee members, then save the committee members, and if this is the first time visiting the form there is a method to load committee members. It's complex, but the problem is Difficult.
 * @param subId The id the submission.
 */
@Security(RoleType.STUDENT) public static void documentInfo(Long subId){
  Submission sub=getSubmission();
  String title=params.get(""String_Node_Str"");
  String degreeMonth=params.get(""String_Node_Str"");
  String degreeYear=params.get(""String_Node_Str"");
  Date defenseDate=null;
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  try {
    if (params.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(params.get(""String_Node_Str"").trim()))     defenseDate=(Date)formatter.parse(params.get(""String_Node_Str""));
  }
 catch (  ParseException e) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  String docType=params.get(""String_Node_Str"");
  String abstractText=params.get(""String_Node_Str"");
  String keywords=params.get(""String_Node_Str"");
  String subjectPrimary=params.get(""String_Node_Str"");
  String subjectSecondary=params.get(""String_Node_Str"");
  String subjectTertiary=params.get(""String_Node_Str"");
  String docLanguage=null;
  if (isFieldRequired(DOCUMENT_LANGUAGE) && settingRepo.findAllLanguages().size() == 1) {
    docLanguage=settingRepo.findAllLanguages().get(0).getName();
  }
 else {
    docLanguage=params.get(""String_Node_Str"");
    if (docLanguage != null && docLanguage.trim().length() == 0)     docLanguage=null;
  }
  Boolean publishedMaterialFlag=params.get(""String_Node_Str"",Boolean.class);
  if (publishedMaterialFlag == null)   publishedMaterialFlag=false;
  String publishedMaterial=params.get(""String_Node_Str"");
  if (!publishedMaterialFlag)   publishedMaterial=null;
  String chairEmail=params.get(""String_Node_Str"");
  List<String> embargos=new ArrayList<String>();
  for (  EmbargoGuarantor gaurantor : EmbargoGuarantor.values()) {
    String embargoString=params.get(""String_Node_Str"" + gaurantor.name());
    if (embargoString != null && embargoString.trim().length() != 0)     embargos.add(embargoString);
  }
  List<TransientMember> committee=parseCommitteeMembers();
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(DOCUMENT_TITLE))     sub.setDocumentTitle(title);
    if (isFieldEnabled(GRADUATION_DATE)) {
      if (!isEmpty(degreeMonth)) {
        try {
          sub.setGraduationMonth(Integer.parseInt(degreeMonth));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationMonth(null);
      }
      if (!isEmpty(degreeYear)) {
        try {
          sub.setGraduationYear(Integer.parseInt(degreeYear));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationYear(null);
      }
    }
    if (isFieldEnabled(DEFENSE_DATE)) {
      sub.setDefenseDate(defenseDate);
    }
    if (isFieldEnabled(DOCUMENT_TYPE))     sub.setDocumentType(docType);
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     sub.setDocumentAbstract(abstractText);
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     sub.setDocumentKeywords(keywords);
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      sub.getDocumentSubjects().clear();
      if (!isEmpty(subjectPrimary))       sub.addDocumentSubject(subjectPrimary);
      if (!isEmpty(subjectSecondary))       sub.addDocumentSubject(subjectSecondary);
      if (!isEmpty(subjectTertiary))       sub.addDocumentSubject(subjectTertiary);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE))     sub.setDocumentLanguage(docLanguage);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     sub.setCommitteeContactEmail(chairEmail);
    if (isFieldEnabled(PUBLISHED_MATERIAL)) {
      if (publishedMaterialFlag)       sub.setPublishedMaterial(publishedMaterial);
 else       sub.setPublishedMaterial(null);
    }
    if (isFieldEnabled(EMBARGO_TYPE)) {
      for (      String embargo : embargos) {
        try {
          sub.addEmbargoType(settingRepo.findEmbargoType(Long.parseLong(embargo)));
        }
 catch (        RuntimeException re) {
          if (isFieldRequired(EMBARGO_TYPE))           validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    if (isFieldEnabled(COMMITTEE)) {
      try {
        saveCommitteeMembers(sub,committee);
      }
 catch (      RuntimeException re) {
      }
    }
    sub.save();
  }
 else {
    if (isFieldEnabled(DOCUMENT_TITLE))     title=sub.getDocumentTitle();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationMonth() != null)     degreeMonth=sub.getGraduationMonth().toString();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationYear() != null)     degreeYear=sub.getGraduationYear().toString();
    if (isFieldEnabled(DEFENSE_DATE) && sub.getDefenseDate() != null)     defenseDate=sub.getDefenseDate();
    if (isFieldEnabled(DOCUMENT_TYPE))     docType=sub.getDocumentType();
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     abstractText=sub.getDocumentAbstract();
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     keywords=sub.getDocumentKeywords();
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      List<String> subjects=sub.getDocumentSubjects();
      if (subjects.size() > 0)       subjectPrimary=subjects.get(0);
      if (subjects.size() > 1)       subjectSecondary=subjects.get(1);
      if (subjects.size() > 2)       subjectTertiary=subjects.get(2);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE)) {
      docLanguage=sub.getDocumentLanguage();
    }
    if (isFieldEnabled(COMMITTEE))     committee=loadCommitteeMembers(sub);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     chairEmail=sub.getCommitteeContactEmail();
    if (isFieldEnabled(PUBLISHED_MATERIAL))     publishedMaterial=sub.getPublishedMaterial();
    for (    EmbargoGuarantor eg : EmbargoGuarantor.values()) {
      String fieldName=eg.name().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + eg.name();
      FieldConfig field=FieldConfig.valueOf(fieldName);
      if (isFieldEnabled(field) && sub.getEmbargoTypeByGuarantor(eg) != null) {
        embargos.add(sub.getEmbargoTypeByGuarantor(eg).getId().toString());
      }
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    FileUpload.fileUpload(subId);
  }
  List<Integer> degreeYears=getDegreeYears();
  renderArgs.put(""String_Node_Str"",degreeYears);
  List<String> docTypes=getValidDocumentTypes(sub);
  renderArgs.put(""String_Node_Str"",docTypes);
  List<EmbargoType> embargoTypes=settingRepo.findAllActiveEmbargoTypes();
  renderArgs.put(""String_Node_Str"",embargoTypes);
  List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
  renderArgs.put(""String_Node_Str"",subjects);
  List<CommitteeMemberRoleType> availableRoles=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  renderArgs.put(""String_Node_Str"",availableRoles);
  List<Language> languages=settingRepo.findAllLanguages();
  renderArgs.put(""String_Node_Str"",languages);
  int committeeSlots=4;
  if (committee.size() > 3)   committeeSlots=committee.size();
  if (params.get(""String_Node_Str"") != null)   committeeSlots+=4;
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_DOCUMENT_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  if (publishedMaterial != null)   publishedMaterialFlag=true;
  renderTemplate(""String_Node_Str"",subId,stickies,title,degreeMonth,degreeYear,defenseDate,docType,abstractText,keywords,subjectPrimary,subjectSecondary,subjectTertiary,docLanguage,committeeSlots,committee,chairEmail,publishedMaterialFlag,publishedMaterial,embargos);
}","/** 
 * The third step of the submission form. We handle committee members a bit differently. Basically we always keep a List of Maps for each committee member while we are working with it. So there are several methods to parse the committee members from the current form data, validate the committee members, then save the committee members, and if this is the first time visiting the form there is a method to load committee members. It's complex, but the problem is Difficult.
 * @param subId The id the submission.
 */
@Security(RoleType.STUDENT) public static void documentInfo(Long subId){
  Submission sub=getSubmission();
  String title=params.get(""String_Node_Str"");
  String degreeMonth=params.get(""String_Node_Str"");
  String degreeYear=params.get(""String_Node_Str"");
  Date defenseDate=null;
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  try {
    if (params.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(params.get(""String_Node_Str"").trim()))     defenseDate=(Date)formatter.parse(params.get(""String_Node_Str""));
  }
 catch (  ParseException e) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  String docType=params.get(""String_Node_Str"");
  String abstractText=params.get(""String_Node_Str"");
  String keywords=params.get(""String_Node_Str"");
  String subjectPrimary=params.get(""String_Node_Str"");
  String subjectSecondary=params.get(""String_Node_Str"");
  String subjectTertiary=params.get(""String_Node_Str"");
  String docLanguage=null;
  if (isFieldRequired(DOCUMENT_LANGUAGE) && settingRepo.findAllLanguages().size() == 1) {
    docLanguage=settingRepo.findAllLanguages().get(0).getName();
  }
 else {
    docLanguage=params.get(""String_Node_Str"");
    if (docLanguage != null && docLanguage.trim().length() == 0)     docLanguage=null;
  }
  Boolean publishedMaterialFlag=params.get(""String_Node_Str"",Boolean.class);
  if (publishedMaterialFlag == null)   publishedMaterialFlag=false;
  String publishedMaterial=params.get(""String_Node_Str"");
  if (!publishedMaterialFlag)   publishedMaterial=null;
  String chairEmail=params.get(""String_Node_Str"");
  List<String> embargos=new ArrayList<String>();
  for (  EmbargoGuarantor gaurantor : EmbargoGuarantor.values()) {
    String embargoString=params.get(""String_Node_Str"" + gaurantor.name());
    if (embargoString != null && embargoString.trim().length() != 0)     embargos.add(embargoString);
  }
  List<TransientMember> committee=parseCommitteeMembers();
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(DOCUMENT_TITLE))     sub.setDocumentTitle(title);
    if (isFieldEnabled(GRADUATION_DATE)) {
      if (!isEmpty(degreeMonth)) {
        try {
          sub.setGraduationMonth(Integer.parseInt(degreeMonth));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationMonth(null);
      }
      if (!isEmpty(degreeYear)) {
        try {
          sub.setGraduationYear(Integer.parseInt(degreeYear));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationYear(null);
      }
    }
    if (isFieldEnabled(DEFENSE_DATE)) {
      sub.setDefenseDate(defenseDate);
    }
    if (isFieldEnabled(DOCUMENT_TYPE))     sub.setDocumentType(docType);
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     sub.setDocumentAbstract(abstractText);
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     sub.setDocumentKeywords(keywords);
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      sub.getDocumentSubjects().clear();
      if (!isEmpty(subjectPrimary))       sub.addDocumentSubject(subjectPrimary);
      if (!isEmpty(subjectSecondary))       sub.addDocumentSubject(subjectSecondary);
      if (!isEmpty(subjectTertiary))       sub.addDocumentSubject(subjectTertiary);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE))     sub.setDocumentLanguage(docLanguage);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     sub.setCommitteeContactEmail(chairEmail);
    if (isFieldEnabled(PUBLISHED_MATERIAL)) {
      if (publishedMaterialFlag)       sub.setPublishedMaterial(publishedMaterial);
 else       sub.setPublishedMaterial(null);
    }
    if (isFieldEnabled(EMBARGO_TYPE)) {
      for (      String embargo : embargos) {
        try {
          sub.addEmbargoType(settingRepo.findEmbargoType(Long.parseLong(embargo)));
        }
 catch (        RuntimeException re) {
          if (isFieldRequired(EMBARGO_TYPE))           validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    if (isFieldEnabled(COMMITTEE)) {
      try {
        saveCommitteeMembers(sub,committee);
      }
 catch (      RuntimeException re) {
      }
    }
    sub.save();
  }
 else {
    if (isFieldEnabled(DOCUMENT_TITLE))     title=sub.getDocumentTitle();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationMonth() != null)     degreeMonth=sub.getGraduationMonth().toString();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationYear() != null)     degreeYear=sub.getGraduationYear().toString();
    if (isFieldEnabled(DEFENSE_DATE) && sub.getDefenseDate() != null)     defenseDate=sub.getDefenseDate();
    if (isFieldEnabled(DOCUMENT_TYPE))     docType=sub.getDocumentType();
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     abstractText=sub.getDocumentAbstract();
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     keywords=sub.getDocumentKeywords();
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      List<String> subjects=sub.getDocumentSubjects();
      if (subjects.size() > 0)       subjectPrimary=subjects.get(0);
      if (subjects.size() > 1)       subjectSecondary=subjects.get(1);
      if (subjects.size() > 2)       subjectTertiary=subjects.get(2);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE)) {
      docLanguage=sub.getDocumentLanguage();
    }
    if (isFieldEnabled(COMMITTEE))     committee=loadCommitteeMembers(sub);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     chairEmail=sub.getCommitteeContactEmail();
    if (isFieldEnabled(PUBLISHED_MATERIAL))     publishedMaterial=sub.getPublishedMaterial();
    for (    EmbargoGuarantor eg : EmbargoGuarantor.values()) {
      String fieldName=eg.name().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + eg.name();
      FieldConfig field=FieldConfig.valueOf(fieldName);
      if (isFieldEnabled(field) && sub.getEmbargoTypeByGuarantor(eg) != null) {
        embargos.add(sub.getEmbargoTypeByGuarantor(eg).getId().toString());
      }
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    FileUpload.fileUpload(subId);
  }
  List<Integer> degreeYears=getDegreeYears();
  renderArgs.put(""String_Node_Str"",degreeYears);
  List<String> docTypes=getValidDocumentTypes(sub);
  renderArgs.put(""String_Node_Str"",docTypes);
  List<EmbargoType> embargoTypes=settingRepo.findAllActiveEmbargoTypes();
  renderArgs.put(""String_Node_Str"",embargoTypes);
  List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
  renderArgs.put(""String_Node_Str"",subjects);
  List<CommitteeMemberRoleType> availableRoles=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  renderArgs.put(""String_Node_Str"",availableRoles);
  List<Language> languages=settingRepo.findAllLanguages();
  renderArgs.put(""String_Node_Str"",languages);
  int committeeSlots=4;
  if (committee.size() > 3)   committeeSlots=committee.size();
  if (params.get(""String_Node_Str"") != null)   committeeSlots+=4;
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_DOCUMENT_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  if (publishedMaterial != null)   publishedMaterialFlag=true;
  renderTemplate(""String_Node_Str"",subId,sub,stickies,title,degreeMonth,degreeYear,defenseDate,docType,abstractText,keywords,subjectPrimary,subjectSecondary,subjectTertiary,docLanguage,committeeSlots,committee,chairEmail,publishedMaterialFlag,publishedMaterial,embargos);
}",0.9997644842204428
189321,"/** 
 * Verify that all the document information is correct. This will be accessed from two places, the document info page as well as the confirmation page.
 * @return True if there are no errors found, otherwise false.
 */
public static boolean verify(Submission sub){
  int numberOfErrorsBefore=validation.errors().size();
  if (isFieldRequired(DOCUMENT_TITLE) && isEmpty(sub.getDocumentTitle()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeMonth(sub.getGraduationMonth()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeYear(sub.getGraduationYear()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  Date now=new Date();
  Date min=new Date(-2208967200000L);
  Date max=new Date(now.getTime() + (365 * 24 * 60* 60* 1000L));
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (isFieldRequired(DEFENSE_DATE) && (sub.getDefenseDate() == null))   validation.addError(""String_Node_Str"",""String_Node_Str"");
 else   if (sub.getDefenseDate() != null && (!sub.getDefenseDate().after(min) || !sub.getDefenseDate().before(max)))   validation.addError(""String_Node_Str"",""String_Node_Str"" + formatter.format(min) + ""String_Node_Str""+ formatter.format(max));
  if (!isValidDocType(sub.getDocumentType()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_ABSTRACT) && isEmpty(sub.getDocumentAbstract()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_KEYWORDS) && isEmpty(sub.getDocumentKeywords()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
    for (    String subject : sub.getDocumentSubjects()) {
      if (proquestRepo.findSubjectByDescription(subject) == null) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (isFieldRequired(DOCUMENT_SUBJECTS) && sub.getDocumentSubjects().size() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (isFieldRequired(DOCUMENT_LANGUAGE) && isEmpty(sub.getDocumentLanguage()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(COMMITTEE) && !validation.hasError(""String_Node_Str"")) {
    List<TransientMember> committee=loadCommitteeMembers(sub);
    validateCommitteeMembers(sub,committee);
  }
  if (isFieldRequired(COMMITTEE_CONTACT_EMAIL) && isEmpty(sub.getCommitteeContactEmail())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL) && !isEmpty(sub.getCommitteeContactEmail())) {
    try {
      new InternetAddress(sub.getCommitteeContactEmail()).validate();
    }
 catch (    AddressException e) {
      validation.addError(""String_Node_Str"",""String_Node_Str"" + sub.getCommitteeContactEmail() + ""String_Node_Str"");
    }
  }
  if (isFieldEnabled(PUBLISHED_MATERIAL)) {
    if (sub.getPublishedMaterial() != null && sub.getPublishedMaterial().trim().length() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  for (  EmbargoGuarantor eg : EmbargoGuarantor.values()) {
    String fieldName=eg.name().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + eg.name();
    FieldConfig field=FieldConfig.valueOf(fieldName);
    if (isFieldRequired(field) && sub.getEmbargoTypeByGuarantor(eg) == null)     validation.addError(""String_Node_Str"" + eg.name(),""String_Node_Str"" + eg.name().toLowerCase() + ""String_Node_Str"");
  }
  if (numberOfErrorsBefore == validation.errors().size())   return true;
 else   return false;
}","/** 
 * Verify that all the document information is correct. This will be accessed from two places, the document info page as well as the confirmation page.
 * @return True if there are no errors found, otherwise false.
 */
public static boolean verify(Submission sub){
  int numberOfErrorsBefore=validation.errors().size();
  if (isFieldRequired(DOCUMENT_TITLE) && isEmpty(sub.getDocumentTitle()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeMonth(sub.getGraduationMonth()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeYear(sub.getGraduationYear()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  Date now=new Date();
  Date min=new Date(-2208967200000L);
  Date max=new Date(now.getTime() + (365 * 24 * 60* 60* 1000L));
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (isFieldRequired(DEFENSE_DATE) && (sub.getDefenseDate() == null))   validation.addError(""String_Node_Str"",""String_Node_Str"");
 else   if (sub.getDefenseDate() != null && (!sub.getDefenseDate().after(min) || !sub.getDefenseDate().before(max)))   validation.addError(""String_Node_Str"",""String_Node_Str"" + formatter.format(min) + ""String_Node_Str""+ formatter.format(max));
  if (!isValidDocType(sub.getDocumentType()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_ABSTRACT) && isEmpty(sub.getDocumentAbstract()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_KEYWORDS) && isEmpty(sub.getDocumentKeywords()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
    for (    String subject : sub.getDocumentSubjects()) {
      if (proquestRepo.findSubjectByDescription(subject) == null) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (isFieldRequired(DOCUMENT_SUBJECTS) && sub.getDocumentSubjects().size() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (isFieldRequired(DOCUMENT_LANGUAGE) && isEmpty(sub.getDocumentLanguage()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(COMMITTEE) && !validation.hasError(""String_Node_Str"")) {
    List<TransientMember> committee=loadCommitteeMembers(sub);
    validateCommitteeMembers(sub,committee);
  }
  if (isFieldRequired(COMMITTEE_CONTACT_EMAIL) && isEmpty(sub.getCommitteeContactEmail())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL) && !isEmpty(sub.getCommitteeContactEmail())) {
    try {
      new InternetAddress(sub.getCommitteeContactEmail()).validate();
    }
 catch (    AddressException e) {
      validation.addError(""String_Node_Str"",""String_Node_Str"" + sub.getCommitteeContactEmail() + ""String_Node_Str"");
    }
  }
  if (isFieldEnabled(PUBLISHED_MATERIAL)) {
    if (sub.getPublishedMaterial() != null && sub.getPublishedMaterial().trim().length() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  for (  EmbargoGuarantor eg : EmbargoGuarantor.values()) {
    String fieldName=eg.name().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + eg.name();
    FieldConfig field=FieldConfig.valueOf(fieldName);
    if (isFieldRequired(field) && sub.getEmbargoTypeByGuarantor(eg) == null) {
      if (eg != EmbargoGuarantor.PROQUEST || sub.getUMIRelease())       validation.addError(""String_Node_Str"" + eg.name(),""String_Node_Str"" + eg.name().toLowerCase() + ""String_Node_Str"");
    }
  }
  if (numberOfErrorsBefore == validation.errors().size())   return true;
 else   return false;
}",0.9896032831737346
189322,"public void doJob(){
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
          installedEmbargo.setSystemRequired(true);
          installedEmbargo.save();
        }
      }
      if (!found) {
        settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor).save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}","public void doJob(){
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
          installedEmbargo.setSystemRequired(true);
          installedEmbargo.save();
        }
      }
      if (!found) {
        EmbargoType newembargo=settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor);
        newembargo.setSystemRequired(true);
        newembargo.save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}",0.9550387596899224
189323,"@Override public void setDuration(Integer duration){
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  this.duration=duration;
}","@Override public void setDuration(Integer duration){
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (duration.equals(this.duration))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.duration=duration;
}",0.716636197440585
189324,"@Override public void setDescription(String description){
  if (description == null || description.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  this.description=description;
}","@Override public void setDescription(String description){
  if (description == null || description.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (description.equals(this.description))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.description=description;
}",0.7215815485996705
189325,"public void setGuarantor(EmbargoGuarantor guarantor){
  this.guarantor=guarantor;
}","public void setGuarantor(EmbargoGuarantor guarantor){
  assertManager();
  if (guarantor.equals(this.guarantor))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.guarantor=guarantor;
}",0.4853801169590643
189326,"/** 
 * A method to update the ""Personal Info"", ""Document Info"" and ""Degree Info"" excluding committee members.
 * @param subId (The submission id)
 * @param field (The name of the form field being updated)
 * @param value (The value being submitted)
 */
@Security(RoleType.REVIEWER) public static void updateJSON(Long subId,String field,String value){
  if (value != null) {
    value=value.trim();
    if (""String_Node_Str"".equals(value.toLowerCase()) || ""String_Node_Str"".equals(value.toLowerCase()))     value=null;
  }
  Submission submission=subRepo.findSubmission(subId);
  Person submitter=submission.getSubmitter();
  Object currentValue=null;
  String message=null;
  DegreeLevel degreeLevel=null;
  try {
    if (""String_Node_Str"".equals(field)) {
      submission.setStudentFirstName(value);
      currentValue=submission.getStudentFirstName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setStudentMiddleName(value);
      currentValue=submission.getStudentMiddleName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setStudentLastName(value);
      currentValue=submission.getStudentLastName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      try {
        new InternetAddress(value).validate();
      }
 catch (      AddressException ae) {
        throw new RuntimeException(""String_Node_Str"");
      }
      submitter.setCurrentEmailAddress(value);
      currentValue=submitter.getCurrentEmailAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value != null && value.length() > 0) {
        Integer birthYearInt=null;
        try {
          birthYearInt=Integer.valueOf(value);
        }
 catch (        NumberFormatException nfe) {
          throw new RuntimeException(""String_Node_Str"");
        }
        if (birthYearInt < 1900 || birthYearInt > Calendar.getInstance().get(Calendar.YEAR))         throw new RuntimeException(""String_Node_Str"" + Calendar.getInstance().get(Calendar.YEAR) + ""String_Node_Str"");
        submission.setStudentBirthYear(Integer.valueOf(value));
      }
 else {
        submission.setStudentBirthYear(null);
      }
      currentValue=submission.getStudentBirthYear();
    }
 else     if (""String_Node_Str"".equals(field)) {
      boolean orcidVerify=true;
      if (settingRepo.getConfigBoolean(AppConfig.ORCID_VALIDATION)) {
        if (settingRepo.getConfigBoolean(AppConfig.ORCID_AUTHENTICATION))         orcidVerify=Utilities.verifyOrcid(value,submission.getStudentFirstName(),submission.getStudentLastName());
 else         orcidVerify=Utilities.verifyOrcid(value);
      }
      if (!orcidVerify)       throw new RuntimeException(""String_Node_Str"");
      submission.setOrcid(value);
      currentValue=submission.getOrcid();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      submitter.setPermanentPhoneNumber(value);
      currentValue=submitter.getPermanentPhoneNumber();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value != null && value.length() > 0) {
        try {
          new InternetAddress(value).validate();
        }
 catch (        AddressException ae) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      submitter.setPermanentEmailAddress(value);
      currentValue=submitter.getPermanentEmailAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      submitter.setPermanentPostalAddress(value);
      currentValue=submitter.getPermanentPostalAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submitter.setCurrentPhoneNumber(value);
      currentValue=submitter.getCurrentPhoneNumber();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submitter.setCurrentPostalAddress(value);
      currentValue=submitter.getCurrentPostalAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      submission.setDocumentTitle(value);
      currentValue=submission.getDocumentTitle();
    }
 else     if (""String_Node_Str"".equals(field)) {
      EmbargoType embargo=settingRepo.findEmbargoType(Long.parseLong(value));
      submission.addEmbargoType(embargo);
      currentValue=submission.getEmbargoTypeByGuarantor(EmbargoGuarantor.DEFAULT).getName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      Boolean umi=null;
      if (""String_Node_Str"".equals(value)) {
        umi=true;
      }
 else {
        umi=false;
      }
      submission.setUMIRelease(umi);
      currentValue=submission.getUMIRelease() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentType(value);
      currentValue=submission.getDocumentType();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentKeywords(value);
      currentValue=submission.getDocumentKeywords();
    }
 else     if (""String_Node_Str"".equals(field)) {
      String primary=params.get(""String_Node_Str"");
      String secondary=params.get(""String_Node_Str"");
      String tertiary=params.get(""String_Node_Str"");
      submission.getDocumentSubjects().clear();
      if (primary != null && primary.trim().length() > 0)       submission.addDocumentSubject(primary);
      if (secondary != null && secondary.trim().length() > 0)       submission.addDocumentSubject(secondary);
      if (tertiary != null && tertiary.trim().length() > 0)       submission.addDocumentSubject(tertiary);
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentLanguage(value);
      currentValue=submission.getDocumentLanguageLocale().getDisplayName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setPublishedMaterial(value);
      currentValue=submission.getPublishedMaterial();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentAbstract(value);
      currentValue=submission.getDocumentAbstract();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setCollege(value);
      currentValue=submission.getCollege();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setProgram(value);
      currentValue=submission.getProgram();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDepartment(value);
      currentValue=submission.getDepartment();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDegree(value);
      currentValue=submission.getDegree();
      degreeLevel=settingRepo.findDegreeByName(submission.getDegree()).getLevel();
      submission.setDegreeLevel(degreeLevel);
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setMajor(value);
      currentValue=submission.getMajor();
    }
 else     if (""String_Node_Str"".equals(field)) {
      List<String> parsedGrad=parseGraduation(value);
      int month=monthNameToInt(parsedGrad.get(0));
      Integer year=null;
      try {
        year=Integer.valueOf(parsedGrad.get(1));
      }
 catch (      NumberFormatException nfe) {
        throw new RuntimeException(""String_Node_Str"");
      }
      submission.setGraduationMonth(month);
      submission.setGraduationYear(year);
      String gradMonth=new DateFormatSymbols().getMonths()[submission.getGraduationMonth()];
      currentValue=gradMonth + ""String_Node_Str"" + submission.getGraduationYear().toString();
    }
 else     if (""String_Node_Str"".equals(field)) {
      Logger.info(""String_Node_Str"" + value);
      Date defenseDate=null;
      DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
      if (value != null) {
        try {
          defenseDate=(Date)formatter.parse(value);
        }
 catch (        ParseException e) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      submission.setDefenseDate(defenseDate);
      if (submission.getDefenseDate() != null)       currentValue=formatter.format(submission.getDefenseDate());
 else       currentValue=null;
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      try {
        new InternetAddress(value).validate();
      }
 catch (      AddressException ae) {
        throw new RuntimeException(""String_Node_Str"");
      }
      submission.setCommitteeContactEmail(value);
      currentValue=submission.getCommitteeContactEmail();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setReviewerNotes(value);
      currentValue=submission.getReviewerNotes();
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + field);
    }
    submitter.save();
    submission.save();
  }
 catch (  RuntimeException re) {
    if (value == null) {
      value=""String_Node_Str"";
    }
    value=escapeJavaScript(value);
    message=re.getMessage();
    Logger.error(""String_Node_Str"" + field + ""String_Node_Str"");
    renderJSON(""String_Node_Str"" + value + ""String_Node_Str""+ message+ ""String_Node_Str"");
  }
  if (currentValue == null) {
    value=escapeJavaScript(""String_Node_Str"");
  }
 else {
    value=escapeJavaScript(currentValue.toString());
  }
  String json;
  if (degreeLevel != null) {
    json=""String_Node_Str"" + value + ""String_Node_Str""+ degreeLevel+ ""String_Node_Str"";
  }
 else {
    json=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  renderJSON(json);
}","/** 
 * A method to update the ""Personal Info"", ""Document Info"" and ""Degree Info"" excluding committee members.
 * @param subId (The submission id)
 * @param field (The name of the form field being updated)
 * @param value (The value being submitted)
 */
@Security(RoleType.REVIEWER) public static void updateJSON(Long subId,String field,String value){
  if (value != null) {
    value=value.trim();
    if (""String_Node_Str"".equals(value.toLowerCase()) || ""String_Node_Str"".equals(value.toLowerCase()))     value=null;
  }
  Submission submission=subRepo.findSubmission(subId);
  Person submitter=submission.getSubmitter();
  Object currentValue=null;
  String message=null;
  DegreeLevel degreeLevel=null;
  try {
    if (""String_Node_Str"".equals(field)) {
      submission.setStudentFirstName(value);
      currentValue=submission.getStudentFirstName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setStudentMiddleName(value);
      currentValue=submission.getStudentMiddleName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setStudentLastName(value);
      currentValue=submission.getStudentLastName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      try {
        new InternetAddress(value).validate();
      }
 catch (      AddressException ae) {
        throw new RuntimeException(""String_Node_Str"");
      }
      submitter.setCurrentEmailAddress(value);
      currentValue=submitter.getCurrentEmailAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value != null && value.length() > 0) {
        Integer birthYearInt=null;
        try {
          birthYearInt=Integer.valueOf(value);
        }
 catch (        NumberFormatException nfe) {
          throw new RuntimeException(""String_Node_Str"");
        }
        if (birthYearInt < 1900 || birthYearInt > Calendar.getInstance().get(Calendar.YEAR))         throw new RuntimeException(""String_Node_Str"" + Calendar.getInstance().get(Calendar.YEAR) + ""String_Node_Str"");
        submission.setStudentBirthYear(Integer.valueOf(value));
      }
 else {
        submission.setStudentBirthYear(null);
      }
      currentValue=submission.getStudentBirthYear();
    }
 else     if (""String_Node_Str"".equals(field)) {
      boolean orcidVerify=true;
      if (settingRepo.getConfigBoolean(AppConfig.ORCID_VALIDATION)) {
        if (settingRepo.getConfigBoolean(AppConfig.ORCID_AUTHENTICATION))         orcidVerify=Utilities.verifyOrcid(value,submission.getStudentFirstName(),submission.getStudentLastName());
 else         orcidVerify=Utilities.verifyOrcid(value);
      }
      if (!orcidVerify)       throw new RuntimeException(""String_Node_Str"");
      submitter.setOrcid(value);
      currentValue=submitter.getOrcid();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      submitter.setPermanentPhoneNumber(value);
      currentValue=submitter.getPermanentPhoneNumber();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value != null && value.length() > 0) {
        try {
          new InternetAddress(value).validate();
        }
 catch (        AddressException ae) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      submitter.setPermanentEmailAddress(value);
      currentValue=submitter.getPermanentEmailAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      submitter.setPermanentPostalAddress(value);
      currentValue=submitter.getPermanentPostalAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submitter.setCurrentPhoneNumber(value);
      currentValue=submitter.getCurrentPhoneNumber();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submitter.setCurrentPostalAddress(value);
      currentValue=submitter.getCurrentPostalAddress();
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      submission.setDocumentTitle(value);
      currentValue=submission.getDocumentTitle();
    }
 else     if (""String_Node_Str"".equals(field)) {
      EmbargoType embargo=settingRepo.findEmbargoType(Long.parseLong(value));
      submission.addEmbargoType(embargo);
      currentValue=submission.getEmbargoTypeByGuarantor(EmbargoGuarantor.DEFAULT).getName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      Boolean umi=null;
      if (""String_Node_Str"".equals(value)) {
        umi=true;
      }
 else {
        umi=false;
      }
      submission.setUMIRelease(umi);
      currentValue=submission.getUMIRelease() ? ""String_Node_Str"" : ""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentType(value);
      currentValue=submission.getDocumentType();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentKeywords(value);
      currentValue=submission.getDocumentKeywords();
    }
 else     if (""String_Node_Str"".equals(field)) {
      String primary=params.get(""String_Node_Str"");
      String secondary=params.get(""String_Node_Str"");
      String tertiary=params.get(""String_Node_Str"");
      submission.getDocumentSubjects().clear();
      if (primary != null && primary.trim().length() > 0)       submission.addDocumentSubject(primary);
      if (secondary != null && secondary.trim().length() > 0)       submission.addDocumentSubject(secondary);
      if (tertiary != null && tertiary.trim().length() > 0)       submission.addDocumentSubject(tertiary);
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentLanguage(value);
      currentValue=submission.getDocumentLanguageLocale().getDisplayName();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setPublishedMaterial(value);
      currentValue=submission.getPublishedMaterial();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDocumentAbstract(value);
      currentValue=submission.getDocumentAbstract();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setCollege(value);
      currentValue=submission.getCollege();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setProgram(value);
      currentValue=submission.getProgram();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDepartment(value);
      currentValue=submission.getDepartment();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setDegree(value);
      currentValue=submission.getDegree();
      degreeLevel=settingRepo.findDegreeByName(submission.getDegree()).getLevel();
      submission.setDegreeLevel(degreeLevel);
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setMajor(value);
      currentValue=submission.getMajor();
    }
 else     if (""String_Node_Str"".equals(field)) {
      List<String> parsedGrad=parseGraduation(value);
      int month=monthNameToInt(parsedGrad.get(0));
      Integer year=null;
      try {
        year=Integer.valueOf(parsedGrad.get(1));
      }
 catch (      NumberFormatException nfe) {
        throw new RuntimeException(""String_Node_Str"");
      }
      submission.setGraduationMonth(month);
      submission.setGraduationYear(year);
      String gradMonth=new DateFormatSymbols().getMonths()[submission.getGraduationMonth()];
      currentValue=gradMonth + ""String_Node_Str"" + submission.getGraduationYear().toString();
    }
 else     if (""String_Node_Str"".equals(field)) {
      Logger.info(""String_Node_Str"" + value);
      Date defenseDate=null;
      DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
      if (value != null) {
        try {
          defenseDate=(Date)formatter.parse(value);
        }
 catch (        ParseException e) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
      submission.setDefenseDate(defenseDate);
      if (submission.getDefenseDate() != null)       currentValue=formatter.format(submission.getDefenseDate());
 else       currentValue=null;
    }
 else     if (""String_Node_Str"".equals(field)) {
      if (value == null || value.length() == 0)       throw new RuntimeException(""String_Node_Str"");
      try {
        new InternetAddress(value).validate();
      }
 catch (      AddressException ae) {
        throw new RuntimeException(""String_Node_Str"");
      }
      submission.setCommitteeContactEmail(value);
      currentValue=submission.getCommitteeContactEmail();
    }
 else     if (""String_Node_Str"".equals(field)) {
      submission.setReviewerNotes(value);
      currentValue=submission.getReviewerNotes();
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + field);
    }
    submitter.save();
    submission.save();
  }
 catch (  RuntimeException re) {
    if (value == null) {
      value=""String_Node_Str"";
    }
    value=escapeJavaScript(value);
    message=re.getMessage();
    Logger.error(""String_Node_Str"" + field + ""String_Node_Str"");
    renderJSON(""String_Node_Str"" + value + ""String_Node_Str""+ message+ ""String_Node_Str"");
  }
  if (currentValue == null) {
    value=escapeJavaScript(""String_Node_Str"");
  }
 else {
    value=escapeJavaScript(currentValue.toString());
  }
  String json;
  if (degreeLevel != null) {
    json=""String_Node_Str"" + value + ""String_Node_Str""+ degreeLevel+ ""String_Node_Str"";
  }
 else {
    json=""String_Node_Str"" + value + ""String_Node_Str"";
  }
  renderJSON(json);
}",0.9990759753593428
189327,"/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void personalInfo(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub;
  if (subId == null) {
    SubmissionStatus subStatus=new SubmissionStatus();
    if (!subStatus.getAllowMultiple() && subStatus.getHasSubmissions()) {
      error(""String_Node_Str"");
    }
    sub=subRepo.createSubmission(submitter);
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(submitter.getFirstName());
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(submitter.getMiddleName());
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(submitter.getLastName());
    if (isFieldEnabled(STUDENT_BIRTH_YEAR))     sub.setStudentBirthYear(submitter.getBirthYear());
    if (isFieldEnabled(PROGRAM))     sub.setProgram(submitter.getCurrentProgram());
    if (isFieldEnabled(COLLEGE))     sub.setCollege(submitter.getCurrentCollege());
    if (isFieldEnabled(DEPARTMENT))     sub.setDepartment(submitter.getCurrentDepartment());
    if (isFieldEnabled(DEGREE))     sub.setDegree(submitter.getCurrentDegree());
    if (isFieldEnabled(MAJOR))     sub.setMajor(submitter.getCurrentMajor());
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(submitter.getOrcid());
    sub.save();
    subId=sub.getId();
    Logger.info(""String_Node_Str"",submitter.getFormattedName(NameFormat.FIRST_LAST),submitter.getId(),submitter.getEmail(),sub.getId());
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getId());
    ActionDefinition newSub=Router.reverse(""String_Node_Str"",routeArgs);
    redirect(newSub.url);
  }
 else {
    sub=getSubmission();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String orcid=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String program=params.get(""String_Node_Str"");
  String college=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (sub.getOrcid() != null || submitter.getOrcid() != null) {
      disabledFields.add(""String_Node_Str"");
      orcid=(sub.getOrcid() != null ? sub.getOrcid() : submitter.getOrcid());
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidProgram(submitter.getCurrentProgram())) {
      disabledFields.add(""String_Node_Str"");
      program=submitter.getCurrentProgram();
    }
    if (isValidCollege(submitter.getCurrentCollege())) {
      disabledFields.add(""String_Node_Str"");
      college=submitter.getCurrentCollege();
    }
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(firstName);
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(middleName);
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(lastName);
    if (isFieldEnabled(STUDENT_ORCID)) {
      boolean orcidVerify=true;
      if (settingRepo.getConfigBoolean(AppConfig.ORCID_VALIDATION)) {
        if (settingRepo.getConfigBoolean(AppConfig.ORCID_AUTHENTICATION))         orcidVerify=Utilities.verifyOrcid(orcid,sub.getStudentFirstName(),sub.getStudentLastName());
 else         orcidVerify=Utilities.verifyOrcid(orcid);
      }
      if (!orcidVerify) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        sub.setOrcid(orcid);
        submitter.setOrcid(orcid);
      }
    }
    if (isFieldEnabled(STUDENT_BIRTH_YEAR)) {
      if (birthYear != null && birthYear.trim().length() > 0) {
        try {
          sub.setStudentBirthYear(Integer.valueOf(birthYear));
        }
 catch (        NumberFormatException ex) {
          sub.setStudentBirthYear(null);
        }
      }
 else {
        sub.setStudentBirthYear(null);
      }
    }
    if (isFieldEnabled(PROGRAM)) {
      if (program != null && program.trim().length() == 0)       sub.setProgram(null);
 else       sub.setProgram(program);
    }
    if (isFieldEnabled(COLLEGE)) {
      if (college != null && college.trim().length() == 0)       sub.setCollege(null);
 else       sub.setCollege(college);
    }
    if (isFieldEnabled(DEPARTMENT)) {
      if (department != null && department.trim().length() == 0)       sub.setDepartment(null);
 else       sub.setDepartment(department);
    }
    if (isFieldEnabled(DEGREE)) {
      if (degree != null && degree.trim().length() == 0)       sub.setDegree(null);
 else       sub.setDegree(degree);
      if (settingRepo.findDegreeByName(degree) != null)       sub.setDegreeLevel(settingRepo.findDegreeByName(degree).getLevel());
    }
    if (isFieldEnabled(MAJOR)) {
      if (major != null && major.trim().length() == 0)       sub.setMajor(null);
 else       sub.setMajor(major);
    }
    if (isFieldEnabled(PERMANENT_PHONE_NUMBER))     submitter.setPermanentPhoneNumber(permPhone);
    if (isFieldEnabled(PERMANENT_POSTAL_ADDRESS))     submitter.setPermanentPostalAddress(permAddress);
    if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS))     submitter.setPermanentEmailAddress(permEmail);
    if (isFieldEnabled(CURRENT_PHONE_NUMBER))     submitter.setCurrentPhoneNumber(currentPhone);
    if (isFieldEnabled(CURRENT_POSTAL_ADDRESS))     submitter.setCurrentPostalAddress(currentAddress);
    try {
      sub.save();
      submitter.save();
    }
 catch (    RuntimeException re) {
      validation.addError(""String_Node_Str"",re.getMessage());
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    License.license(sub.getId());
  }
  if (params.get(""String_Node_Str"") == null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    orcid=sub.getOrcid();
    birthYear=sub.getStudentBirthYear() != null ? String.valueOf(sub.getStudentBirthYear()) : null;
    program=sub.getProgram();
    college=sub.getCollege();
    department=sub.getDepartment();
    degree=sub.getDegree();
    major=sub.getMajor();
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
    orcid=submitter.getOrcid();
  }
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_PERSONAL_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<Submission> submissions=subRepo.findSubmission(submitter);
class DegMaj {
    public String degree;
    public String major;
    @Override public boolean equals(    Object obj){
      if (obj instanceof DegMaj) {
        DegMaj myObj=(DegMaj)obj;
        if (this.degree != null && this.degree.equals(myObj.degree) && this.major != null && this.major.equals(myObj.major)) {
          return true;
        }
 else         if (this.degree == myObj.degree && this.major == myObj.major) {
          return true;
        }
      }
      return false;
    }
  }
  List<DegMaj> disabledDegMaj=new ArrayList<DegMaj>();
  for (  Submission submission : submissions) {
    DegMaj temp=new DegMaj();
    temp.degree=submission.getDegree();
    temp.major=submission.getMajor();
    if (!disabledDegMaj.contains(temp) && (sub.getDegree() != null && sub.getMajor() != null) && !(sub.getDegree().equals(temp.degree) && sub.getMajor().equals(temp.major))) {
      disabledDegMaj.add(temp);
    }
 else     if (!disabledDegMaj.contains(temp) && (sub.getDegree() == null || sub.getMajor() == null)) {
      disabledDegMaj.add(temp);
    }
  }
  renderTemplate(""String_Node_Str"",submitter,subId,disabledFields,stickies,disabledDegMaj,firstName,middleName,lastName,orcid,birthYear,grantor,program,college,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}","/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void personalInfo(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub;
  if (subId == null) {
    SubmissionStatus subStatus=new SubmissionStatus();
    if (!subStatus.getAllowMultiple() && subStatus.getHasSubmissions()) {
      error(""String_Node_Str"");
    }
    sub=subRepo.createSubmission(submitter);
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(submitter.getFirstName());
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(submitter.getMiddleName());
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(submitter.getLastName());
    if (isFieldEnabled(STUDENT_BIRTH_YEAR))     sub.setStudentBirthYear(submitter.getBirthYear());
    if (isFieldEnabled(PROGRAM))     sub.setProgram(submitter.getCurrentProgram());
    if (isFieldEnabled(COLLEGE))     sub.setCollege(submitter.getCurrentCollege());
    if (isFieldEnabled(DEPARTMENT))     sub.setDepartment(submitter.getCurrentDepartment());
    if (isFieldEnabled(DEGREE))     sub.setDegree(submitter.getCurrentDegree());
    if (isFieldEnabled(MAJOR))     sub.setMajor(submitter.getCurrentMajor());
    sub.save();
    subId=sub.getId();
    Logger.info(""String_Node_Str"",submitter.getFormattedName(NameFormat.FIRST_LAST),submitter.getId(),submitter.getEmail(),sub.getId());
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getId());
    ActionDefinition newSub=Router.reverse(""String_Node_Str"",routeArgs);
    redirect(newSub.url);
  }
 else {
    sub=getSubmission();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String orcid=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String program=params.get(""String_Node_Str"");
  String college=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (submitter.getOrcid() != null) {
      disabledFields.add(""String_Node_Str"");
      orcid=submitter.getOrcid();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidProgram(submitter.getCurrentProgram())) {
      disabledFields.add(""String_Node_Str"");
      program=submitter.getCurrentProgram();
    }
    if (isValidCollege(submitter.getCurrentCollege())) {
      disabledFields.add(""String_Node_Str"");
      college=submitter.getCurrentCollege();
    }
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(firstName);
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(middleName);
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(lastName);
    if (isFieldEnabled(STUDENT_ORCID)) {
      boolean orcidVerify=true;
      if (settingRepo.getConfigBoolean(AppConfig.ORCID_VALIDATION)) {
        if (settingRepo.getConfigBoolean(AppConfig.ORCID_AUTHENTICATION))         orcidVerify=Utilities.verifyOrcid(orcid,sub.getStudentFirstName(),sub.getStudentLastName());
 else         orcidVerify=Utilities.verifyOrcid(orcid);
      }
      if (!orcidVerify) {
        if (orcid.length() > 0 || isFieldRequired(STUDENT_ORCID)) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        submitter.setOrcid(orcid);
      }
    }
    if (isFieldEnabled(STUDENT_BIRTH_YEAR)) {
      if (birthYear != null && birthYear.trim().length() > 0) {
        try {
          sub.setStudentBirthYear(Integer.valueOf(birthYear));
        }
 catch (        NumberFormatException ex) {
          sub.setStudentBirthYear(null);
        }
      }
 else {
        sub.setStudentBirthYear(null);
      }
    }
    if (isFieldEnabled(PROGRAM)) {
      if (program != null && program.trim().length() == 0)       sub.setProgram(null);
 else       sub.setProgram(program);
    }
    if (isFieldEnabled(COLLEGE)) {
      if (college != null && college.trim().length() == 0)       sub.setCollege(null);
 else       sub.setCollege(college);
    }
    if (isFieldEnabled(DEPARTMENT)) {
      if (department != null && department.trim().length() == 0)       sub.setDepartment(null);
 else       sub.setDepartment(department);
    }
    if (isFieldEnabled(DEGREE)) {
      if (degree != null && degree.trim().length() == 0)       sub.setDegree(null);
 else       sub.setDegree(degree);
      if (settingRepo.findDegreeByName(degree) != null)       sub.setDegreeLevel(settingRepo.findDegreeByName(degree).getLevel());
    }
    if (isFieldEnabled(MAJOR)) {
      if (major != null && major.trim().length() == 0)       sub.setMajor(null);
 else       sub.setMajor(major);
    }
    if (isFieldEnabled(PERMANENT_PHONE_NUMBER))     submitter.setPermanentPhoneNumber(permPhone);
    if (isFieldEnabled(PERMANENT_POSTAL_ADDRESS))     submitter.setPermanentPostalAddress(permAddress);
    if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS))     submitter.setPermanentEmailAddress(permEmail);
    if (isFieldEnabled(CURRENT_PHONE_NUMBER))     submitter.setCurrentPhoneNumber(currentPhone);
    if (isFieldEnabled(CURRENT_POSTAL_ADDRESS))     submitter.setCurrentPostalAddress(currentAddress);
    try {
      sub.save();
      submitter.save();
    }
 catch (    RuntimeException re) {
      validation.addError(""String_Node_Str"",re.getMessage());
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    License.license(sub.getId());
  }
  if (params.get(""String_Node_Str"") == null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    birthYear=sub.getStudentBirthYear() != null ? String.valueOf(sub.getStudentBirthYear()) : null;
    program=sub.getProgram();
    college=sub.getCollege();
    department=sub.getDepartment();
    degree=sub.getDegree();
    major=sub.getMajor();
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
    orcid=submitter.getOrcid();
  }
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_PERSONAL_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<Submission> submissions=subRepo.findSubmission(submitter);
class DegMaj {
    public String degree;
    public String major;
    @Override public boolean equals(    Object obj){
      if (obj instanceof DegMaj) {
        DegMaj myObj=(DegMaj)obj;
        if (this.degree != null && this.degree.equals(myObj.degree) && this.major != null && this.major.equals(myObj.major)) {
          return true;
        }
 else         if (this.degree == myObj.degree && this.major == myObj.major) {
          return true;
        }
      }
      return false;
    }
  }
  List<DegMaj> disabledDegMaj=new ArrayList<DegMaj>();
  for (  Submission submission : submissions) {
    DegMaj temp=new DegMaj();
    temp.degree=submission.getDegree();
    temp.major=submission.getMajor();
    if (!disabledDegMaj.contains(temp) && (sub.getDegree() != null && sub.getMajor() != null) && !(sub.getDegree().equals(temp.degree) && sub.getMajor().equals(temp.major))) {
      disabledDegMaj.add(temp);
    }
 else     if (!disabledDegMaj.contains(temp) && (sub.getDegree() == null || sub.getMajor() == null)) {
      disabledDegMaj.add(temp);
    }
  }
  renderTemplate(""String_Node_Str"",submitter,subId,disabledFields,stickies,disabledDegMaj,firstName,middleName,lastName,orcid,birthYear,grantor,program,college,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}",0.9817880794701986
189328,"/** 
 * Verify this step has successfully been completed. This may be called from two places, here on the PersonalInfo form and from the confirmation step to ensure that everything has been completed.
 * @return true if there were no errors, otherwise false.
 */
public static boolean verify(Submission sub){
  int numberOfErrorsBefore=validation.errors().size();
  if (isFieldRequired(STUDENT_FIRST_NAME) && isFieldRequired(STUDENT_LAST_NAME)) {
    if (isEmpty(sub.getStudentFirstName()) && isEmpty(sub.getStudentLastName())) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (isFieldRequired(STUDENT_FIRST_NAME) && isEmpty(sub.getStudentFirstName())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (isFieldRequired(STUDENT_LAST_NAME) && isEmpty(sub.getStudentFirstName())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (isFieldRequired(STUDENT_MIDDLE_NAME) && isEmpty(sub.getStudentMiddleName()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(STUDENT_ORCID) && isEmpty(sub.getOrcid()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getStudentBirthYear() != null && sub.getStudentBirthYear() < 1900)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(STUDENT_BIRTH_YEAR) && sub.getStudentBirthYear() == null)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getProgram() != null && !isValidProgram(sub.getProgram()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PROGRAM) && isEmpty(sub.getProgram()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getCollege() != null && !isValidCollege(sub.getCollege()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(COLLEGE) && isEmpty(sub.getCollege()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getDepartment() != null && !isValidDepartment(sub.getDepartment()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DEPARTMENT) && isEmpty(sub.getDepartment()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getDegree() != null && !isValidDegree(sub.getDegree()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DEGREE) && isEmpty(sub.getDegree()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getMajor() != null && !isValidMajor(sub.getMajor()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(MAJOR) && isEmpty(sub.getMajor()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PERMANENT_PHONE_NUMBER) && isEmpty(sub.getSubmitter().getPermanentPhoneNumber()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PERMANENT_POSTAL_ADDRESS) && isEmpty(sub.getSubmitter().getPermanentPostalAddress()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PERMANENT_EMAIL_ADDRESS) && isEmpty(sub.getSubmitter().getPermanentEmailAddress()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
 else   if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS) && sub.getSubmitter().getPermanentEmailAddress() != null) {
    try {
      new InternetAddress(sub.getSubmitter().getPermanentEmailAddress()).validate();
    }
 catch (    AddressException e) {
      validation.addError(""String_Node_Str"",""String_Node_Str"" + sub.getSubmitter().getPermanentEmailAddress() + ""String_Node_Str"");
    }
  }
  if (isFieldRequired(CURRENT_PHONE_NUMBER) && isEmpty(sub.getSubmitter().getCurrentPhoneNumber()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(CURRENT_POSTAL_ADDRESS) && isEmpty(sub.getSubmitter().getCurrentPostalAddress()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (numberOfErrorsBefore == validation.errors().size())   return true;
 else   return false;
}","/** 
 * Verify this step has successfully been completed. This may be called from two places, here on the PersonalInfo form and from the confirmation step to ensure that everything has been completed.
 * @return true if there were no errors, otherwise false.
 */
public static boolean verify(Submission sub){
  int numberOfErrorsBefore=validation.errors().size();
  if (isFieldRequired(STUDENT_FIRST_NAME) && isFieldRequired(STUDENT_LAST_NAME)) {
    if (isEmpty(sub.getStudentFirstName()) && isEmpty(sub.getStudentLastName())) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (isFieldRequired(STUDENT_FIRST_NAME) && isEmpty(sub.getStudentFirstName())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (isFieldRequired(STUDENT_LAST_NAME) && isEmpty(sub.getStudentFirstName())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (isFieldRequired(STUDENT_MIDDLE_NAME) && isEmpty(sub.getStudentMiddleName()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(STUDENT_ORCID) && isEmpty(sub.getSubmitter().getOrcid()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getStudentBirthYear() != null && sub.getStudentBirthYear() < 1900)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(STUDENT_BIRTH_YEAR) && sub.getStudentBirthYear() == null)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getProgram() != null && !isValidProgram(sub.getProgram()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PROGRAM) && isEmpty(sub.getProgram()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getCollege() != null && !isValidCollege(sub.getCollege()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(COLLEGE) && isEmpty(sub.getCollege()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getDepartment() != null && !isValidDepartment(sub.getDepartment()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DEPARTMENT) && isEmpty(sub.getDepartment()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getDegree() != null && !isValidDegree(sub.getDegree()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DEGREE) && isEmpty(sub.getDegree()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (sub.getMajor() != null && !isValidMajor(sub.getMajor()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(MAJOR) && isEmpty(sub.getMajor()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PERMANENT_PHONE_NUMBER) && isEmpty(sub.getSubmitter().getPermanentPhoneNumber()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PERMANENT_POSTAL_ADDRESS) && isEmpty(sub.getSubmitter().getPermanentPostalAddress()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(PERMANENT_EMAIL_ADDRESS) && isEmpty(sub.getSubmitter().getPermanentEmailAddress()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
 else   if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS) && sub.getSubmitter().getPermanentEmailAddress() != null) {
    try {
      new InternetAddress(sub.getSubmitter().getPermanentEmailAddress()).validate();
    }
 catch (    AddressException e) {
      validation.addError(""String_Node_Str"",""String_Node_Str"" + sub.getSubmitter().getPermanentEmailAddress() + ""String_Node_Str"");
    }
  }
  if (isFieldRequired(CURRENT_PHONE_NUMBER) && isEmpty(sub.getSubmitter().getCurrentPhoneNumber()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(CURRENT_POSTAL_ADDRESS) && isEmpty(sub.getSubmitter().getCurrentPostalAddress()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (numberOfErrorsBefore == validation.errors().size())   return true;
 else   return false;
}",0.998164688608834
189329,"/** 
 * Set the from address
 * @param address The address
 */
private void setFrom(InternetAddress address){
  _from=validateAddress(address);
}","/** 
 * Set the from address
 * @param address The address
 */
@Override public void setFrom(InternetAddress address){
  _from=validateAddress(address);
}",0.94314381270903
189330,"@Override public String getSuccessLogMessage(){
  if (logSuccessMessage != null) {
    return logSuccessMessage;
  }
  String TOrecipients=""String_Node_Str"";
  for (  InternetAddress address : to) {
    if (TOrecipients.length() != 0)     TOrecipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     TOrecipients+=address.getPersonal();
 else     TOrecipients+=address.getAddress();
  }
  String CCrecipients=""String_Node_Str"";
  for (  InternetAddress address : cc) {
    if (CCrecipients.length() != 0)     CCrecipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     CCrecipients+=address.getPersonal();
 else     CCrecipients+=address.getAddress();
  }
  return String.format(""String_Node_Str"",TOrecipients,CCrecipients,subject,message);
}","@Override public String getSuccessLogMessage(){
  if (logSuccessMessage != null) {
    return logSuccessMessage;
  }
  String TOrecipients=""String_Node_Str"";
  for (  InternetAddress address : to) {
    if (TOrecipients.length() != 0)     TOrecipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     TOrecipients+=address.getPersonal();
 else     TOrecipients+=address.getAddress();
  }
  String CCrecipients=""String_Node_Str"";
  for (  InternetAddress address : cc) {
    if (CCrecipients.length() != 0)     CCrecipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     CCrecipients+=address.getPersonal();
 else     CCrecipients+=address.getAddress();
  }
  String ccString=""String_Node_Str"";
  if (CCrecipients.length() > 0) {
    ccString=String.format(""String_Node_Str"",CCrecipients);
  }
  return String.format(""String_Node_Str"" + ccString + ""String_Node_Str"",TOrecipients,subject,message);
}",0.8941176470588236
189331,"private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
String sEmbargos=""String_Node_Str"";
List<EmbargoType> embargoTypes=sub.getEmbargoTypes();
for (int k=0; k < embargoTypes.size(); k++) {
EmbargoType embargoType=embargoTypes.get(k);
sEmbargos+=embargoType.getName() + (embargoType.getGuarantor() != EmbargoGuarantor.DEFAULT ? ""String_Node_Str"" + embargoType.getGuarantor().name() + ""String_Node_Str"" : ""String_Node_Str"") + ((k + 1) < embargoTypes.size() ? ""String_Node_Str"" : ""String_Node_Str"");
}
row.createCell(j).setCellValue(sEmbargos);
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
String sActions=""String_Node_Str"";
SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
List<CustomActionDefinition> customActions=settingRepo.findAllCustomActionDefinition();
for (int k=0; k < customActions.size(); k++) {
CustomActionDefinition systemAction=customActions.get(k);
boolean found=false;
for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
if (systemAction.equals(subAction.getDefinition())) {
sActions+=""String_Node_Str"" + subAction.getDefinition().getLabel();
found=true;
}
}
if (!found) {
sActions+=""String_Node_Str"" + systemAction.getLabel();
}
if ((k + 1) < customActions.size()) {
sActions+='\n';
}
}
row.createCell(j).setCellValue(sActions);
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
case ORCID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getOrcid() != null) row.createCell(j).setCellValue(sub.getOrcid());
j++;
break;
}
}
}","private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
String sEmbargos=""String_Node_Str"";
List<EmbargoType> embargoTypes=sub.getEmbargoTypes();
for (int k=0; k < embargoTypes.size(); k++) {
EmbargoType embargoType=embargoTypes.get(k);
sEmbargos+=embargoType.getName() + (embargoType.getGuarantor() != EmbargoGuarantor.DEFAULT ? ""String_Node_Str"" + embargoType.getGuarantor().name() + ""String_Node_Str"" : ""String_Node_Str"") + ((k + 1) < embargoTypes.size() ? ""String_Node_Str"" : ""String_Node_Str"");
}
row.createCell(j).setCellValue(sEmbargos);
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
String sActions=""String_Node_Str"";
SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
List<CustomActionDefinition> customActions=settingRepo.findAllCustomActionDefinition();
for (int k=0; k < customActions.size(); k++) {
CustomActionDefinition systemAction=customActions.get(k);
boolean found=false;
for (org.tdl.vireo.model.CustomActionValue subAction : sub.getCustomActions()) {
if (systemAction.equals(subAction.getDefinition())) {
sActions+=""String_Node_Str"" + subAction.getDefinition().getLabel();
found=true;
}
}
if (!found) {
sActions+=""String_Node_Str"" + systemAction.getLabel();
}
if ((k + 1) < customActions.size()) {
sActions+='\n';
}
}
row.createCell(j).setCellValue(sActions);
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
case ORCID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter().getOrcid() != null) row.createCell(j).setCellValue(sub.getSubmitter().getOrcid());
j++;
break;
}
}
}",0.9983335184979448
189332,"/** 
 * Write a the provided submission and all associated action logs to the index writer. This method expects that the submission and action logs have been removed from the index, either through a specific delete, or a delete all in the case of rebuilding the index. This method is used to share code between the various index job implementations so that submissions are written the same no matter who indexes them first.
 * @param writer The index writer.
 * @param sub The submission to index.
 */
public void indexSubmission(IndexWriter writer,Submission sub) throws CorruptIndexException, IOException {
  StringBuilder searchText=new StringBuilder();
  long subId=sub.getId();
  String state=sub.getState().getDisplayName();
  searchText.append(state).append(""String_Node_Str"");
  long searchAssigned=0;
  String sortAssigned=""String_Node_Str"";
  if (sub.getAssignee() != null) {
    searchAssigned=sub.getAssignee().getId();
    sortAssigned=sub.getAssignee().getFormattedName(NameFormat.LAST_FIRST_MIDDLE_BIRTH);
    searchText.append(sortAssigned).append(""String_Node_Str"");
  }
  Date graduationSemester=null;
  if (sub.getGraduationYear() != null) {
    Calendar cal=Calendar.getInstance();
    cal.clear();
    cal.set(Calendar.YEAR,sub.getGraduationYear());
    if (sub.getGraduationMonth() != null)     cal.set(Calendar.MONTH,sub.getGraduationMonth());
    graduationSemester=cal.getTime();
  }
  Date defenseDate=sub.getDefenseDate();
  String department=sub.getDepartment();
  String program=sub.getProgram();
  String college=sub.getCollege();
  String major=sub.getMajor();
  searchText.append(department).append(""String_Node_Str"").append(program).append(""String_Node_Str"").append(college).append(""String_Node_Str"").append(major).append(""String_Node_Str"");
  String embargos=""String_Node_Str"";
  if (sub.getEmbargoTypes().size() > 0) {
    for (    EmbargoType embargo : sub.getEmbargoTypes())     embargos+=embargo.getName() + ""String_Node_Str"";
  }
  searchText.append(embargos).append(""String_Node_Str"");
  String degree=sub.getDegree();
  String documentType=sub.getDocumentType();
  searchText.append(degree).append(""String_Node_Str"").append(documentType).append(""String_Node_Str"");
  Date submissionDate=sub.getSubmissionDate();
  String studentName=""String_Node_Str"";
  if (sub.getStudentLastName() != null)   studentName+=sub.getStudentLastName() + ""String_Node_Str"";
  if (sub.getStudentFirstName() != null)   studentName+=sub.getStudentFirstName() + ""String_Node_Str"";
  if (sub.getStudentMiddleName() != null)   studentName+=sub.getStudentMiddleName() + ""String_Node_Str"";
  searchText.append(studentName).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.LAST_FIRST_BIRTH)).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.FIRST_LAST_BIRTH)).append(""String_Node_Str"");
  String studentEmail=sub.getSubmitter().getEmail();
  searchText.append(studentEmail).append(""String_Node_Str"");
  String institutionalIdentifier=sub.getSubmitter().getInstitutionalIdentifier();
  searchText.append(institutionalIdentifier).append(""String_Node_Str"");
  String documentTitle=sub.getDocumentTitle();
  String documentAbstract=sub.getDocumentAbstract();
  String documentKeywords=sub.getDocumentKeywords();
  searchText.append(documentTitle).append(""String_Node_Str"").append(documentAbstract).append(""String_Node_Str"").append(documentKeywords).append(""String_Node_Str"");
  String documentSubjects=""String_Node_Str"";
  for (  String subject : sub.getDocumentSubjects()) {
    documentSubjects+=subject + ""String_Node_Str"";
  }
  searchText.append(documentSubjects).append(""String_Node_Str"");
  String documentLanguage=null;
  if (sub.getDocumentLanguageLocale() != null) {
    Locale locale=sub.getDocumentLanguageLocale();
    searchText.append(locale.getDisplayName()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayLanguage()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayCountry()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayVariant()).append(""String_Node_Str"");
    documentLanguage=locale.getDisplayName();
  }
  String publishedMaterial=sub.getPublishedMaterial();
  searchText.append(publishedMaterial).append(""String_Node_Str"");
  String primaryDocument=null;
  if (sub.getPrimaryDocument() != null) {
    primaryDocument=sub.getPrimaryDocument().getName();
    searchText.append(primaryDocument).append(""String_Node_Str"");
  }
  Date licenseAgreementDate=sub.getLicenseAgreementDate();
  Date approvalDate=sub.getApprovalDate();
  Date committeeApprovalDate=sub.getCommitteeApprovalDate();
  Date committeeEmbargoApprovalDate=sub.getCommitteeEmbargoApprovalDate();
  String committeeMembers=""String_Node_Str"";
  for (  CommitteeMember member : sub.getCommitteeMembers()) {
    committeeMembers+=member.getFormattedName(NameFormat.LAST_FIRST) + ""String_Node_Str"" + member.getFormattedRoles();
  }
  searchText.append(committeeMembers).append(""String_Node_Str"");
  String committeeContactEmail=sub.getCommitteeContactEmail();
  searchText.append(committeeContactEmail).append(""String_Node_Str"");
  String umiRelease;
  if (sub.getUMIRelease() == null) {
    umiRelease=""String_Node_Str"";
  }
 else   if (sub.getUMIRelease()) {
    umiRelease=""String_Node_Str"";
  }
 else {
    umiRelease=""String_Node_Str"";
  }
  String customActions=""String_Node_Str"";
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    customActions+=customActionValue.getDefinition().getLabel() + ""String_Node_Str"";
  }
  searchText.append(customActions).append(""String_Node_Str"");
  String degreeLevel=null;
  if (sub.getDegreeLevel() != null)   degreeLevel=sub.getDegreeLevel().name();
  searchText.append(degreeLevel).append(""String_Node_Str"");
  String depositId=sub.getDepositId();
  searchText.append(depositId).append(""String_Node_Str"");
  String reviewerNotes=sub.getReviewerNotes();
  searchText.append(reviewerNotes).append(""String_Node_Str"");
  String lastEventEntry=null;
  Date lastEventTime=null;
  String orcid=sub.getOrcid();
  List<ActionLog> logs=indexer.subRepo.findActionLog(sub);
  if (logs.size() > 0) {
    lastEventEntry=logs.get(0).getEntry();
    lastEventTime=logs.get(0).getActionDate();
    searchText.append(lastEventEntry);
  }
  Document doc=new Document();
  doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
  doc.add(new Field(""String_Node_Str"",searchText.toString(),Field.Store.NO,Index.ANALYZED_NO_NORMS));
  if (state != null)   doc.add(new Field(""String_Node_Str"",state,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(searchAssigned));
  if (sortAssigned != null)   doc.add(new Field(""String_Node_Str"",sortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
  if (graduationSemester != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
  if (defenseDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
  if (department != null)   doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
  if (program != null)   doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
  if (college != null)   doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
  if (major != null)   doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
  if (embargos != null) {
    for (    EmbargoType embargo : sub.getEmbargoTypes()) {
      doc.add(new Field(""String_Node_Str"",embargo.getName(),Field.Store.NO,Index.NOT_ANALYZED));
    }
  }
  if (degree != null)   doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentType != null)   doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
  if (submissionDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
  if (studentName != null)   doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
  if (studentEmail != null)   doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (institutionalIdentifier != null)   doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentTitle != null)   doc.add(new Field(""String_Node_Str"",documentTitle,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentAbstract != null)   doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentKeywords != null)   doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentSubjects != null)   doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentLanguage != null)   doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
  if (publishedMaterial != null)   doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
  if (primaryDocument != null)   doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
  if (licenseAgreementDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
  if (approvalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
  if (committeeApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
  if (committeeEmbargoApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
  if (committeeMembers != null)   doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
  if (committeeContactEmail != null)   doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (umiRelease != null)   doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
  }
  if (degreeLevel != null)   doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
  if (depositId != null)   doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
  if (reviewerNotes != null)   doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventEntry != null)   doc.add(new Field(""String_Node_Str"",lastEventEntry,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventTime != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(lastEventTime.getTime()));
  if (orcid != null)   doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
  writer.addDocument(doc);
  for (  ActionLog log : logs) {
    Long logId=log.getId();
    String logEntry=log.getEntry();
    String logState=log.getSubmissionState().getDisplayName();
    long logSearchAssigned=0;
    String logSortAssigned=null;
    if (log.getPerson() != null) {
      logSearchAssigned=log.getPerson().getId();
      logSortAssigned=log.getPerson().getFormattedName(NameFormat.FIRST_LAST);
    }
    Date logTime=log.getActionDate();
    doc=new Document();
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(logId));
    doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.ANALYZED_NO_NORMS));
    if (logState != null)     doc.add(new Field(""String_Node_Str"",logState,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logSearchAssigned));
    if (logSortAssigned != null)     doc.add(new Field(""String_Node_Str"",logSortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.NOT_ANALYZED));
    if (logTime != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logTime.getTime()));
    if (graduationSemester != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
    if (defenseDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
    if (department != null)     doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
    if (program != null)     doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
    if (college != null)     doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
    if (major != null)     doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
    if (embargos != null) {
      for (      EmbargoType embargo : sub.getEmbargoTypes()) {
        doc.add(new Field(""String_Node_Str"",embargo.getName(),Field.Store.NO,Index.NOT_ANALYZED));
      }
    }
    if (degree != null)     doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentType != null)     doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
    if (submissionDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
    if (studentName != null)     doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
    if (studentEmail != null)     doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (institutionalIdentifier != null)     doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentAbstract != null)     doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentKeywords != null)     doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentSubjects != null)     doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentLanguage != null)     doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
    if (publishedMaterial != null)     doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
    if (primaryDocument != null)     doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
    if (licenseAgreementDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
    if (approvalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
    if (committeeApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
    if (committeeEmbargoApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
    if (committeeMembers != null)     doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
    if (committeeContactEmail != null)     doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (umiRelease != null)     doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
    for (    CustomActionValue customActionValue : sub.getCustomActions()) {
      doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
    }
    if (degreeLevel != null)     doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
    if (depositId != null)     doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
    if (reviewerNotes != null)     doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
    if (orcid != null)     doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
    writer.addDocument(doc);
    log.detach();
  }
}","/** 
 * Write a the provided submission and all associated action logs to the index writer. This method expects that the submission and action logs have been removed from the index, either through a specific delete, or a delete all in the case of rebuilding the index. This method is used to share code between the various index job implementations so that submissions are written the same no matter who indexes them first.
 * @param writer The index writer.
 * @param sub The submission to index.
 */
public void indexSubmission(IndexWriter writer,Submission sub) throws CorruptIndexException, IOException {
  StringBuilder searchText=new StringBuilder();
  long subId=sub.getId();
  String state=sub.getState().getDisplayName();
  searchText.append(state).append(""String_Node_Str"");
  long searchAssigned=0;
  String sortAssigned=""String_Node_Str"";
  if (sub.getAssignee() != null) {
    searchAssigned=sub.getAssignee().getId();
    sortAssigned=sub.getAssignee().getFormattedName(NameFormat.LAST_FIRST_MIDDLE_BIRTH);
    searchText.append(sortAssigned).append(""String_Node_Str"");
  }
  Date graduationSemester=null;
  if (sub.getGraduationYear() != null) {
    Calendar cal=Calendar.getInstance();
    cal.clear();
    cal.set(Calendar.YEAR,sub.getGraduationYear());
    if (sub.getGraduationMonth() != null)     cal.set(Calendar.MONTH,sub.getGraduationMonth());
    graduationSemester=cal.getTime();
  }
  Date defenseDate=sub.getDefenseDate();
  String department=sub.getDepartment();
  String program=sub.getProgram();
  String college=sub.getCollege();
  String major=sub.getMajor();
  searchText.append(department).append(""String_Node_Str"").append(program).append(""String_Node_Str"").append(college).append(""String_Node_Str"").append(major).append(""String_Node_Str"");
  String embargos=""String_Node_Str"";
  if (sub.getEmbargoTypes().size() > 0) {
    for (    EmbargoType embargo : sub.getEmbargoTypes())     embargos+=embargo.getName() + ""String_Node_Str"";
  }
  searchText.append(embargos).append(""String_Node_Str"");
  String degree=sub.getDegree();
  String documentType=sub.getDocumentType();
  searchText.append(degree).append(""String_Node_Str"").append(documentType).append(""String_Node_Str"");
  Date submissionDate=sub.getSubmissionDate();
  String studentName=""String_Node_Str"";
  if (sub.getStudentLastName() != null)   studentName+=sub.getStudentLastName() + ""String_Node_Str"";
  if (sub.getStudentFirstName() != null)   studentName+=sub.getStudentFirstName() + ""String_Node_Str"";
  if (sub.getStudentMiddleName() != null)   studentName+=sub.getStudentMiddleName() + ""String_Node_Str"";
  searchText.append(studentName).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.LAST_FIRST_BIRTH)).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.FIRST_LAST_BIRTH)).append(""String_Node_Str"");
  String studentEmail=sub.getSubmitter().getEmail();
  searchText.append(studentEmail).append(""String_Node_Str"");
  String institutionalIdentifier=sub.getSubmitter().getInstitutionalIdentifier();
  searchText.append(institutionalIdentifier).append(""String_Node_Str"");
  String documentTitle=sub.getDocumentTitle();
  String documentAbstract=sub.getDocumentAbstract();
  String documentKeywords=sub.getDocumentKeywords();
  searchText.append(documentTitle).append(""String_Node_Str"").append(documentAbstract).append(""String_Node_Str"").append(documentKeywords).append(""String_Node_Str"");
  String documentSubjects=""String_Node_Str"";
  for (  String subject : sub.getDocumentSubjects()) {
    documentSubjects+=subject + ""String_Node_Str"";
  }
  searchText.append(documentSubjects).append(""String_Node_Str"");
  String documentLanguage=null;
  if (sub.getDocumentLanguageLocale() != null) {
    Locale locale=sub.getDocumentLanguageLocale();
    searchText.append(locale.getDisplayName()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayLanguage()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayCountry()).append(""String_Node_Str"");
    searchText.append(locale.getDisplayVariant()).append(""String_Node_Str"");
    documentLanguage=locale.getDisplayName();
  }
  String publishedMaterial=sub.getPublishedMaterial();
  searchText.append(publishedMaterial).append(""String_Node_Str"");
  String primaryDocument=null;
  if (sub.getPrimaryDocument() != null) {
    primaryDocument=sub.getPrimaryDocument().getName();
    searchText.append(primaryDocument).append(""String_Node_Str"");
  }
  Date licenseAgreementDate=sub.getLicenseAgreementDate();
  Date approvalDate=sub.getApprovalDate();
  Date committeeApprovalDate=sub.getCommitteeApprovalDate();
  Date committeeEmbargoApprovalDate=sub.getCommitteeEmbargoApprovalDate();
  String committeeMembers=""String_Node_Str"";
  for (  CommitteeMember member : sub.getCommitteeMembers()) {
    committeeMembers+=member.getFormattedName(NameFormat.LAST_FIRST) + ""String_Node_Str"" + member.getFormattedRoles();
  }
  searchText.append(committeeMembers).append(""String_Node_Str"");
  String committeeContactEmail=sub.getCommitteeContactEmail();
  searchText.append(committeeContactEmail).append(""String_Node_Str"");
  String umiRelease;
  if (sub.getUMIRelease() == null) {
    umiRelease=""String_Node_Str"";
  }
 else   if (sub.getUMIRelease()) {
    umiRelease=""String_Node_Str"";
  }
 else {
    umiRelease=""String_Node_Str"";
  }
  String customActions=""String_Node_Str"";
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    customActions+=customActionValue.getDefinition().getLabel() + ""String_Node_Str"";
  }
  searchText.append(customActions).append(""String_Node_Str"");
  String degreeLevel=null;
  if (sub.getDegreeLevel() != null)   degreeLevel=sub.getDegreeLevel().name();
  searchText.append(degreeLevel).append(""String_Node_Str"");
  String depositId=sub.getDepositId();
  searchText.append(depositId).append(""String_Node_Str"");
  String reviewerNotes=sub.getReviewerNotes();
  searchText.append(reviewerNotes).append(""String_Node_Str"");
  String lastEventEntry=null;
  Date lastEventTime=null;
  String orcid=sub.getSubmitter().getOrcid();
  List<ActionLog> logs=indexer.subRepo.findActionLog(sub);
  if (logs.size() > 0) {
    lastEventEntry=logs.get(0).getEntry();
    lastEventTime=logs.get(0).getActionDate();
    searchText.append(lastEventEntry);
  }
  Document doc=new Document();
  doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
  doc.add(new Field(""String_Node_Str"",searchText.toString(),Field.Store.NO,Index.ANALYZED_NO_NORMS));
  if (state != null)   doc.add(new Field(""String_Node_Str"",state,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(searchAssigned));
  if (sortAssigned != null)   doc.add(new Field(""String_Node_Str"",sortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
  if (graduationSemester != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
  if (defenseDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
  if (department != null)   doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
  if (program != null)   doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
  if (college != null)   doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
  if (major != null)   doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
  if (embargos != null) {
    for (    EmbargoType embargo : sub.getEmbargoTypes()) {
      doc.add(new Field(""String_Node_Str"",embargo.getName(),Field.Store.NO,Index.NOT_ANALYZED));
    }
  }
  if (degree != null)   doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentType != null)   doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
  if (submissionDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
  if (studentName != null)   doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
  if (studentEmail != null)   doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (institutionalIdentifier != null)   doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentTitle != null)   doc.add(new Field(""String_Node_Str"",documentTitle,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentAbstract != null)   doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentKeywords != null)   doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentSubjects != null)   doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentLanguage != null)   doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
  if (publishedMaterial != null)   doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
  if (primaryDocument != null)   doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
  if (licenseAgreementDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
  if (approvalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
  if (committeeApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
  if (committeeEmbargoApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
  if (committeeMembers != null)   doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
  if (committeeContactEmail != null)   doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (umiRelease != null)   doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
  for (  CustomActionValue customActionValue : sub.getCustomActions()) {
    doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
  }
  if (degreeLevel != null)   doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
  if (depositId != null)   doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
  if (reviewerNotes != null)   doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventEntry != null)   doc.add(new Field(""String_Node_Str"",lastEventEntry,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventTime != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(lastEventTime.getTime()));
  if (orcid != null)   doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
  writer.addDocument(doc);
  for (  ActionLog log : logs) {
    Long logId=log.getId();
    String logEntry=log.getEntry();
    String logState=log.getSubmissionState().getDisplayName();
    long logSearchAssigned=0;
    String logSortAssigned=null;
    if (log.getPerson() != null) {
      logSearchAssigned=log.getPerson().getId();
      logSortAssigned=log.getPerson().getFormattedName(NameFormat.FIRST_LAST);
    }
    Date logTime=log.getActionDate();
    doc=new Document();
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(logId));
    doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.ANALYZED_NO_NORMS));
    if (logState != null)     doc.add(new Field(""String_Node_Str"",logState,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logSearchAssigned));
    if (logSortAssigned != null)     doc.add(new Field(""String_Node_Str"",logSortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.NOT_ANALYZED));
    if (logTime != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logTime.getTime()));
    if (graduationSemester != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
    if (defenseDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(defenseDate.getTime()));
    if (department != null)     doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
    if (program != null)     doc.add(new Field(""String_Node_Str"",program,Field.Store.NO,Index.NOT_ANALYZED));
    if (college != null)     doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
    if (major != null)     doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
    if (embargos != null) {
      for (      EmbargoType embargo : sub.getEmbargoTypes()) {
        doc.add(new Field(""String_Node_Str"",embargo.getName(),Field.Store.NO,Index.NOT_ANALYZED));
      }
    }
    if (degree != null)     doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentType != null)     doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
    if (submissionDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
    if (studentName != null)     doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
    if (studentEmail != null)     doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (institutionalIdentifier != null)     doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentAbstract != null)     doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentKeywords != null)     doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentSubjects != null)     doc.add(new Field(""String_Node_Str"",documentSubjects,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentLanguage != null)     doc.add(new Field(""String_Node_Str"",documentLanguage,Field.Store.NO,Index.NOT_ANALYZED));
    if (publishedMaterial != null)     doc.add(new Field(""String_Node_Str"",publishedMaterial,Field.Store.NO,Index.NOT_ANALYZED));
    if (primaryDocument != null)     doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
    if (licenseAgreementDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
    if (approvalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
    if (committeeApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
    if (committeeEmbargoApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
    if (committeeMembers != null)     doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
    if (committeeContactEmail != null)     doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (umiRelease != null)     doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
    for (    CustomActionValue customActionValue : sub.getCustomActions()) {
      doc.add(new Field(""String_Node_Str"",customActionValue.getDefinition().getLabel(),Field.Store.NO,Index.NOT_ANALYZED));
    }
    if (degreeLevel != null)     doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
    if (depositId != null)     doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
    if (reviewerNotes != null)     doc.add(new Field(""String_Node_Str"",reviewerNotes,Field.Store.NO,Index.NOT_ANALYZED));
    if (orcid != null)     doc.add(new Field(""String_Node_Str"",orcid,Field.Store.NO,Index.NOT_ANALYZED));
    writer.addDocument(doc);
    log.detach();
  }
}",0.9995565934553194
189333,"/** 
 * Load randomly generated submissions.
 */
public static void loadSubmissions(long seed,int howMany) throws IOException {
  List<EmbargoType> embargos=settingRepo.findAllEmbargoTypes();
  Person reviewer=personRepo.findPersonByEmail(""String_Node_Str"");
  Random random=new Random(seed);
  long start=System.currentTimeMillis();
  for (int i=0; i < howMany; i++) {
    context.turnOffAuthorization();
    Person student=personRepo.findPersonByNetId(""String_Node_Str"" + i);
    if (student == null) {
      String[] studentName=generateRandomName(random,ACTOR_NAMES);
      String studentEmail=generateRandomEmail(random,studentName);
      studentEmail=studentEmail.replaceFirst(""String_Node_Str"",(i + 1) + ""String_Node_Str"");
      student=personRepo.createPerson(""String_Node_Str"" + i,studentEmail,studentName[0],studentName[1],RoleType.STUDENT).save();
      if (i > 0) {
        student.setMiddleName(studentName[2]);
        student.setPassword(""String_Node_Str"");
        student.setCurrentPhoneNumber(""String_Node_Str"");
        student.setCurrentPostalAddress(""String_Node_Str"");
        student.setPermanentPhoneNumber(""String_Node_Str"");
        student.setPermanentPostalAddress(""String_Node_Str"");
        student.setPermanentEmailAddress(""String_Node_Str"");
        student.setInstitutionalIdentifier(""String_Node_Str"" + random.nextInt(9) + random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9));
        if (random.nextInt(100) > 50)         student.setOrcid(""String_Node_Str"" + random.nextInt(9) + random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ ""String_Node_Str""+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ ""String_Node_Str""+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ ""String_Node_Str""+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9));
      }
      student.save();
    }
    String[] studentName=new String[3];
    studentName[0]=student.getFirstName();
    studentName[1]=student.getLastName();
    studentName[2]=student.getMiddleName();
    context.restoreAuthorization();
    context.login(student);
    Submission sub=subRepo.createSubmission(student).save();
    if (i > 0) {
      sub.setStudentFirstName(studentName[0]);
      sub.setStudentLastName(studentName[1]);
      sub.setStudentMiddleName(studentName[2]);
      if (random.nextInt(100) > 30)       sub.setStudentBirthYear(random.nextInt(20) + 1980);
      if (student.getOrcid() != null)       sub.setOrcid(student.getOrcid());
      if (random.nextInt(100) > 5)       sub.addEmbargoType(embargos.get(random.nextInt(embargos.size() - 1)));
      int members=random.nextInt(5);
      String[] firstMemberName=null;
      for (int m=0; m < members; m++) {
        String[] memberName=generateRandomName(random,FAMOUS_NAMES);
        if (firstMemberName == null)         firstMemberName=memberName;
        CommitteeMember member=sub.addCommitteeMember(memberName[0],memberName[1],memberName[2]).save();
        if (random.nextInt(100) > 75) {
          DegreeLevelArray role=ROLETYPES_DEFINITIONS[random.nextInt(ROLETYPES_DEFINITIONS.length - 1)];
          member.addRole(role.name);
          if (random.nextInt(100) > 75) {
            role=ROLETYPES_DEFINITIONS[random.nextInt(ROLETYPES_DEFINITIONS.length - 1)];
            try {
              member.addRole(role.name);
            }
 catch (            IllegalArgumentException iae) {
            }
            ;
          }
        }
        member.save();
      }
      if (random.nextInt(100) > 5 && firstMemberName != null)       sub.setCommitteeContactEmail(generateRandomEmail(random,firstMemberName));
      if (random.nextInt(100) > 5) {
        DegreeLevelArray degree=DEGREES_DEFINITIONS[random.nextInt(DEGREES_DEFINITIONS.length - 1)];
        sub.setDegree(degree.name);
        sub.setDegreeLevel(degree.degreeLevel);
      }
      if (random.nextInt(100) > 5)       sub.setDocumentTitle(generateRandomTitle(random));
      if (random.nextInt(100) > 5)       sub.setDocumentAbstract(generateRandomAbstract(random));
      if (random.nextInt(100) > 5)       sub.setDocumentKeywords(generateRandomKeywords(random));
      if (random.nextInt(100) > 5) {
        List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
        sub.addDocumentSubject(subjects.get(random.nextInt(subjects.size() - 1)).getDescription());
        if (random.nextInt(100) > 5) {
          sub.addDocumentSubject(subjects.get(random.nextInt(subjects.size() - 1)).getDescription());
          if (random.nextInt(100) > 5) {
            sub.addDocumentSubject(subjects.get(random.nextInt(subjects.size() - 1)).getDescription());
          }
        }
      }
      if (random.nextInt(100) > 5) {
        sub.setDocumentLanguage(LANGUAGES_DEFINITIONS[random.nextInt(LANGUAGES_DEFINITIONS.length)]);
      }
      if (random.nextInt(100) > 5)       sub.setDepartment(DEPARTMENTS_DEFINITIONS[random.nextInt(DEPARTMENTS_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5)       sub.setProgram(PROGRAMS_DEFINITIONS[random.nextInt(PROGRAMS_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5)       sub.setCollege(COLLEGES_DEFINITIONS[random.nextInt(COLLEGES_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5)       sub.setMajor(MAJORS_DEFINITIONS[random.nextInt(MAJORS_DEFINITIONS.length - 1)]);
      if (random.nextInt(100) > 5)       sub.setDocumentType(DOCTYPES_DEFINITIONS[random.nextInt(DOCTYPES_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5) {
        sub.setGraduationYear(random.nextInt(10) + 2002);
        sub.setGraduationMonth(GRAD_MONTHS_DEFINITIONS[random.nextInt(GRAD_MONTHS_DEFINITIONS.length - 1)]);
      }
      if (random.nextInt(100) > 50)       sub.setDefenseDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 5)       sub.setUMIRelease(random.nextBoolean());
      if (random.nextInt(100) > 5)       sub.setSubmissionDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 70)       sub.setApprovalDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 50)       sub.setCommitteeEmbargoApprovalDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 50)       sub.setCommitteeApprovalDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 5)       sub.setCommitteeEmailHash(generateCommitteEmailHash());
      if (random.nextInt(100) > 5)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.PRIMARY);
      if (random.nextInt(100) > 20) {
        Date agreementDate=generateRandomDate(random,2,2010);
        String stampedLicense=stampLicense(settingRepo.getConfigValue(SUBMIT_LICENSE_TEXT),agreementDate);
        sub.addAttachment(stampedLicense.getBytes(),""String_Node_Str"",AttachmentType.LICENSE);
        sub.setLicenseAgreementDate(agreementDate);
      }
      if (random.nextInt(100) > 35) {
        Date agreementDate=generateRandomDate(random,2,2010);
        String stampedLicense=stampLicense(settingRepo.getConfigValue(PROQUEST_LICENSE_TEXT),agreementDate);
        sub.addAttachment(stampedLicense.getBytes(),""String_Node_Str"",AttachmentType.LICENSE);
      }
      if (random.nextInt(100) > 75)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.SUPPLEMENTAL);
      if (random.nextInt(100) > 75)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.SUPPLEMENTAL);
      if (random.nextInt(100) > 50)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.FEEDBACK);
      context.turnOffAuthorization();
      if (random.nextInt(100) > 50)       sub.setReviewerNotes(generateRandomTitle(random));
      context.restoreAuthorization();
    }
    sub.save();
    context.logout();
    if (i > 0) {
      context.login(reviewer);
      int actionLogs=random.nextInt(30) + 10;
      for (int l=0; l < actionLogs; l++) {
        if (random.nextInt(100) > 30) {
          sub.logAction(""String_Node_Str"");
        }
 else {
          State state=sub.getState();
          List<State> transitions=state.getTransitions(sub);
          if (transitions.size() == 0)           transitions=stateManager.getAllStates();
          if (transitions.size() == 1) {
            sub.setState(transitions.get(0));
          }
 else {
            sub.setState(transitions.get(random.nextInt(transitions.size() - 1)));
          }
        }
        sub.save();
      }
      context.logout();
    }
    if (i > 0 && i % 100 == 0) {
      JPA.em().getTransaction().commit();
      JPA.em().clear();
      JPA.em().getTransaction().begin();
      embargos=settingRepo.findAllEmbargoTypes();
      reviewer=personRepo.findPersonByEmail(""String_Node_Str"");
      Logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ ((System.currentTimeMillis() - start) / i)+ ""String_Node_Str"");
    }
  }
  Logger.debug(""String_Node_Str"" + howMany + ""String_Node_Str""+ ((System.currentTimeMillis() - start) / howMany)+ ""String_Node_Str"");
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
}","/** 
 * Load randomly generated submissions.
 */
public static void loadSubmissions(long seed,int howMany) throws IOException {
  List<EmbargoType> embargos=settingRepo.findAllEmbargoTypes();
  Person reviewer=personRepo.findPersonByEmail(""String_Node_Str"");
  Random random=new Random(seed);
  long start=System.currentTimeMillis();
  for (int i=0; i < howMany; i++) {
    context.turnOffAuthorization();
    Person student=personRepo.findPersonByNetId(""String_Node_Str"" + i);
    if (student == null) {
      String[] studentName=generateRandomName(random,ACTOR_NAMES);
      String studentEmail=generateRandomEmail(random,studentName);
      studentEmail=studentEmail.replaceFirst(""String_Node_Str"",(i + 1) + ""String_Node_Str"");
      student=personRepo.createPerson(""String_Node_Str"" + i,studentEmail,studentName[0],studentName[1],RoleType.STUDENT).save();
      if (i > 0) {
        student.setMiddleName(studentName[2]);
        student.setPassword(""String_Node_Str"");
        student.setCurrentPhoneNumber(""String_Node_Str"");
        student.setCurrentPostalAddress(""String_Node_Str"");
        student.setPermanentPhoneNumber(""String_Node_Str"");
        student.setPermanentPostalAddress(""String_Node_Str"");
        student.setPermanentEmailAddress(""String_Node_Str"");
        student.setInstitutionalIdentifier(""String_Node_Str"" + random.nextInt(9) + random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9));
        if (random.nextInt(100) > 50)         student.setOrcid(""String_Node_Str"" + random.nextInt(9) + random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ ""String_Node_Str""+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ ""String_Node_Str""+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ ""String_Node_Str""+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9)+ random.nextInt(9));
      }
      student.save();
    }
    String[] studentName=new String[3];
    studentName[0]=student.getFirstName();
    studentName[1]=student.getLastName();
    studentName[2]=student.getMiddleName();
    context.restoreAuthorization();
    context.login(student);
    Submission sub=subRepo.createSubmission(student).save();
    if (i > 0) {
      sub.setStudentFirstName(studentName[0]);
      sub.setStudentLastName(studentName[1]);
      sub.setStudentMiddleName(studentName[2]);
      if (random.nextInt(100) > 30)       sub.setStudentBirthYear(random.nextInt(20) + 1980);
      if (random.nextInt(100) > 5)       sub.addEmbargoType(embargos.get(random.nextInt(embargos.size() - 1)));
      int members=random.nextInt(5);
      String[] firstMemberName=null;
      for (int m=0; m < members; m++) {
        String[] memberName=generateRandomName(random,FAMOUS_NAMES);
        if (firstMemberName == null)         firstMemberName=memberName;
        CommitteeMember member=sub.addCommitteeMember(memberName[0],memberName[1],memberName[2]).save();
        if (random.nextInt(100) > 75) {
          DegreeLevelArray role=ROLETYPES_DEFINITIONS[random.nextInt(ROLETYPES_DEFINITIONS.length - 1)];
          member.addRole(role.name);
          if (random.nextInt(100) > 75) {
            role=ROLETYPES_DEFINITIONS[random.nextInt(ROLETYPES_DEFINITIONS.length - 1)];
            try {
              member.addRole(role.name);
            }
 catch (            IllegalArgumentException iae) {
            }
            ;
          }
        }
        member.save();
      }
      if (random.nextInt(100) > 5 && firstMemberName != null)       sub.setCommitteeContactEmail(generateRandomEmail(random,firstMemberName));
      if (random.nextInt(100) > 5) {
        DegreeLevelArray degree=DEGREES_DEFINITIONS[random.nextInt(DEGREES_DEFINITIONS.length - 1)];
        sub.setDegree(degree.name);
        sub.setDegreeLevel(degree.degreeLevel);
      }
      if (random.nextInt(100) > 5)       sub.setDocumentTitle(generateRandomTitle(random));
      if (random.nextInt(100) > 5)       sub.setDocumentAbstract(generateRandomAbstract(random));
      if (random.nextInt(100) > 5)       sub.setDocumentKeywords(generateRandomKeywords(random));
      if (random.nextInt(100) > 5) {
        List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
        sub.addDocumentSubject(subjects.get(random.nextInt(subjects.size() - 1)).getDescription());
        if (random.nextInt(100) > 5) {
          sub.addDocumentSubject(subjects.get(random.nextInt(subjects.size() - 1)).getDescription());
          if (random.nextInt(100) > 5) {
            sub.addDocumentSubject(subjects.get(random.nextInt(subjects.size() - 1)).getDescription());
          }
        }
      }
      if (random.nextInt(100) > 5) {
        sub.setDocumentLanguage(LANGUAGES_DEFINITIONS[random.nextInt(LANGUAGES_DEFINITIONS.length)]);
      }
      if (random.nextInt(100) > 5)       sub.setDepartment(DEPARTMENTS_DEFINITIONS[random.nextInt(DEPARTMENTS_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5)       sub.setProgram(PROGRAMS_DEFINITIONS[random.nextInt(PROGRAMS_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5)       sub.setCollege(COLLEGES_DEFINITIONS[random.nextInt(COLLEGES_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5)       sub.setMajor(MAJORS_DEFINITIONS[random.nextInt(MAJORS_DEFINITIONS.length - 1)]);
      if (random.nextInt(100) > 5)       sub.setDocumentType(DOCTYPES_DEFINITIONS[random.nextInt(DOCTYPES_DEFINITIONS.length - 1)].name);
      if (random.nextInt(100) > 5) {
        sub.setGraduationYear(random.nextInt(10) + 2002);
        sub.setGraduationMonth(GRAD_MONTHS_DEFINITIONS[random.nextInt(GRAD_MONTHS_DEFINITIONS.length - 1)]);
      }
      if (random.nextInt(100) > 50)       sub.setDefenseDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 5)       sub.setUMIRelease(random.nextBoolean());
      if (random.nextInt(100) > 5)       sub.setSubmissionDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 70)       sub.setApprovalDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 50)       sub.setCommitteeEmbargoApprovalDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 50)       sub.setCommitteeApprovalDate(generateRandomDate(random,2,2010));
      if (random.nextInt(100) > 5)       sub.setCommitteeEmailHash(generateCommitteEmailHash());
      if (random.nextInt(100) > 5)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.PRIMARY);
      if (random.nextInt(100) > 20) {
        Date agreementDate=generateRandomDate(random,2,2010);
        String stampedLicense=stampLicense(settingRepo.getConfigValue(SUBMIT_LICENSE_TEXT),agreementDate);
        sub.addAttachment(stampedLicense.getBytes(),""String_Node_Str"",AttachmentType.LICENSE);
        sub.setLicenseAgreementDate(agreementDate);
      }
      if (random.nextInt(100) > 35) {
        Date agreementDate=generateRandomDate(random,2,2010);
        String stampedLicense=stampLicense(settingRepo.getConfigValue(PROQUEST_LICENSE_TEXT),agreementDate);
        sub.addAttachment(stampedLicense.getBytes(),""String_Node_Str"",AttachmentType.LICENSE);
      }
      if (random.nextInt(100) > 75)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.SUPPLEMENTAL);
      if (random.nextInt(100) > 75)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.SUPPLEMENTAL);
      if (random.nextInt(100) > 50)       sub.addAttachment(new File(Play.applicationPath + File.separator + ""String_Node_Str""),AttachmentType.FEEDBACK);
      context.turnOffAuthorization();
      if (random.nextInt(100) > 50)       sub.setReviewerNotes(generateRandomTitle(random));
      context.restoreAuthorization();
    }
    sub.save();
    context.logout();
    if (i > 0) {
      context.login(reviewer);
      int actionLogs=random.nextInt(30) + 10;
      for (int l=0; l < actionLogs; l++) {
        if (random.nextInt(100) > 30) {
          sub.logAction(""String_Node_Str"");
        }
 else {
          State state=sub.getState();
          List<State> transitions=state.getTransitions(sub);
          if (transitions.size() == 0)           transitions=stateManager.getAllStates();
          if (transitions.size() == 1) {
            sub.setState(transitions.get(0));
          }
 else {
            sub.setState(transitions.get(random.nextInt(transitions.size() - 1)));
          }
        }
        sub.save();
      }
      context.logout();
    }
    if (i > 0 && i % 100 == 0) {
      JPA.em().getTransaction().commit();
      JPA.em().clear();
      JPA.em().getTransaction().begin();
      embargos=settingRepo.findAllEmbargoTypes();
      reviewer=personRepo.findPersonByEmail(""String_Node_Str"");
      Logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ ((System.currentTimeMillis() - start) / i)+ ""String_Node_Str"");
    }
  }
  Logger.debug(""String_Node_Str"" + howMany + ""String_Node_Str""+ ((System.currentTimeMillis() - start) / howMany)+ ""String_Node_Str"");
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
}",0.9958087049973132
189334,"/** 
 * Test that an advisor can approve of the application & embargo
 */
@Test public void testAccepting(){
  LOGIN(""String_Node_Str"");
  Map<String,Object> routeArgs=new HashMap<String,Object>();
  routeArgs.put(""String_Node_Str"",token);
  final String ADVISOR_URL=Router.reverse(""String_Node_Str"",routeArgs).url;
  Response response=GET(ADVISOR_URL);
  assertIsOk(response);
  assertContentMatch(""String_Node_Str"",response);
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  response=POST(ADVISOR_URL,params);
  assertIsOk(response);
  assertContentMatch(""String_Node_Str"",response);
  assertFalse(getContent(response).contains(""String_Node_Str""));
  assertFalse(getContent(response).contains(""String_Node_Str""));
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  sub=subRepo.findSubmission(sub.getId());
  advisor=personRepo.findPerson(advisor.getId());
  assertNotNull(sub.getCommitteeApprovalDate());
  assertNotNull(sub.getCommitteeEmbargoApprovalDate());
  List<ActionLog> logs=subRepo.findActionLog(sub);
  boolean foundLog=false;
  for (  ActionLog log : logs) {
    if (log.getEntry().contains(""String_Node_Str"")) {
      foundLog=true;
      assertEquals(advisor,log.getPerson());
    }
  }
  assertTrue(foundLog);
}","/** 
 * Test that an advisor can approve of the application & embargo
 */
@Test public void testAccepting(){
  LOGIN(""String_Node_Str"");
  Map<String,Object> routeArgs=new HashMap<String,Object>();
  routeArgs.put(""String_Node_Str"",token);
  final String ADVISOR_URL=Router.reverse(""String_Node_Str"",routeArgs).url;
  Response response=GET(ADVISOR_URL);
  assertIsOk(response);
  assertContentMatch(""String_Node_Str"",response);
  Map<String,String> params=new HashMap<String,String>();
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  response=POST(ADVISOR_URL,params);
  assertIsOk(response);
  assertContentMatch(""String_Node_Str"",response);
  assertContentMatch(""String_Node_Str"",response);
  assertContentMatch(""String_Node_Str"",response);
  JPA.em().getTransaction().commit();
  JPA.em().clear();
  JPA.em().getTransaction().begin();
  sub=subRepo.findSubmission(sub.getId());
  advisor=personRepo.findPerson(advisor.getId());
  assertNotNull(sub.getCommitteeApprovalDate());
  assertNotNull(sub.getCommitteeEmbargoApprovalDate());
  List<ActionLog> logs=subRepo.findActionLog(sub);
  boolean foundLog=false;
  for (  ActionLog log : logs) {
    if (log.getEntry().contains(""String_Node_Str"")) {
      foundLog=true;
      assertEquals(advisor,log.getPerson());
    }
  }
  assertTrue(foundLog);
}",0.9396200814111262
189335,"/** 
 * Test all the various sort ordering for filter searches on submissions.
 */
@Test public void testSubmissionFilterSearchOrdering() throws IOException, InterruptedException {
  Person otherPerson=personRepo.createPerson(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",RoleType.REVIEWER).save();
  EmbargoType e1=settingRepo.createEmbargoType(""String_Node_Str"",""String_Node_Str"",null,true);
  e1.setDisplayOrder(100);
  e1.save();
  EmbargoType e2=settingRepo.createEmbargoType(""String_Node_Str"",""String_Node_Str"",null,true);
  e2.setDisplayOrder(10);
  e2.save();
  CustomActionDefinition def=settingRepo.createCustomActionDefinition(""String_Node_Str"",false).save();
  File file1=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  File file2=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileUtils.writeStringToFile(file1,""String_Node_Str"");
  FileUtils.writeStringToFile(file2,""String_Node_Str"");
  Submission sub1=subRepo.createSubmission(person);
  createSubmission(sub1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",2012,5,true);
  sub1.setAssignee(otherPerson);
  sub1.setDocumentLanguage(""String_Node_Str"");
  sub1.addDocumentSubject(""String_Node_Str"");
  sub1.setPublishedMaterial(""String_Node_Str"");
  sub1.addEmbargoType(e1);
  sub1.setDocumentType(""String_Node_Str"");
  sub1.addAttachment(file1,AttachmentType.SUPPLEMENTAL);
  sub1.addCommitteeMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sub1.addCommitteeMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sub1.setDefenseDate(new Date(2012,5,1));
  sub1.setSubmissionDate(new Date(2012,5,1));
  sub1.setApprovalDate(new Date(2012,5,1));
  sub1.setLicenseAgreementDate(new Date(2012,5,1));
  sub1.setCommitteeApprovalDate(new Date(2012,5,1));
  sub1.setCommitteeEmbargoApprovalDate(new Date(2012,5,1));
  sub1.setDepositId(""String_Node_Str"");
  sub1.setReviewerNotes(""String_Node_Str"");
  sub1.addCustomAction(def,true);
  sub1.setOrcid(""String_Node_Str"");
  sub1.save();
  Submission sub2=subRepo.createSubmission(otherPerson);
  createSubmission(sub2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",2005,4,null);
  sub2.setDocumentLanguage(""String_Node_Str"");
  sub2.addDocumentSubject(""String_Node_Str"");
  sub2.setPublishedMaterial(""String_Node_Str"");
  sub2.setAssignee(person);
  sub2.addEmbargoType(e2);
  sub2.setDocumentType(""String_Node_Str"");
  sub2.addAttachment(file2,AttachmentType.PRIMARY);
  sub2.addAttachment(file1,AttachmentType.SUPPLEMENTAL);
  sub2.addCommitteeMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sub2.setDefenseDate(new Date(2005,5,1));
  sub2.setSubmissionDate(new Date(2005,5,1));
  sub2.setApprovalDate(new Date(2005,5,1));
  sub2.setLicenseAgreementDate(new Date(2005,5,1));
  sub2.setCommitteeApprovalDate(new Date(2002,5,1));
  sub2.setCommitteeEmbargoApprovalDate(new Date(2002,5,1));
  sub2.setDepositId(""String_Node_Str"");
  sub2.setReviewerNotes(""String_Node_Str"");
  sub2.setOrcid(""String_Node_Str"");
  sub2.save();
  JPA.em().getTransaction().commit();
  JPA.em().getTransaction().begin();
  Thread.sleep(100);
  indexer.rebuild(true);
  assertFalse(indexer.isJobRunning());
  NamedSearchFilter filter=subRepo.createSearchFilter(person,""String_Node_Str"");
  filter.addSearchText(""String_Node_Str"");
  filter.save();
  List<Submission> submissions;
  try {
    submissions=searcher.submissionSearch(filter,SearchOrder.ID,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.STUDENT_NAME,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_TITLE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_ABSTRACT,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_KEYWORDS,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_SUBJECTS,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_LANGUAGE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.PUBLISHED_MATERIAL,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.EMBARGO_TYPE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.PRIMARY_DOCUMENT,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_MEMBERS,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_CONTACT_EMAIL,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_APPROVAL_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_APPROVAL_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.SUBMISSION_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.APPROVAL_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.LICENSE_AGREEMENT_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEGREE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEPARTMENT,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COLLEGE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COLLEGE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.MAJOR,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_TYPE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.GRADUATION_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEFENSE_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.STATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.GRADUATION_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.UMI_RELEASE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEPOSIT_ID,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.REVIEWER_NOTES,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.LAST_EVENT_ENTRY,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.LAST_EVENT_TIME,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.ORCID,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
  }
  finally {
    filter.delete();
    subRepo.findSubmission(sub1.getId()).delete();
    subRepo.findSubmission(sub2.getId()).delete();
    file1.delete();
    file2.delete();
    settingRepo.findEmbargoType(e1.getId()).delete();
    settingRepo.findEmbargoType(e2.getId()).delete();
    settingRepo.findCustomActionDefinition(def.getId()).delete();
    personRepo.findPerson(otherPerson.getId()).delete();
  }
}","/** 
 * Test all the various sort ordering for filter searches on submissions.
 */
@Test public void testSubmissionFilterSearchOrdering() throws IOException, InterruptedException {
  Person otherPerson=personRepo.createPerson(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",RoleType.REVIEWER);
  otherPerson.setOrcid(""String_Node_Str"");
  otherPerson.save();
  EmbargoType e1=settingRepo.createEmbargoType(""String_Node_Str"",""String_Node_Str"",null,true);
  e1.setDisplayOrder(100);
  e1.save();
  EmbargoType e2=settingRepo.createEmbargoType(""String_Node_Str"",""String_Node_Str"",null,true);
  e2.setDisplayOrder(10);
  e2.save();
  CustomActionDefinition def=settingRepo.createCustomActionDefinition(""String_Node_Str"",false).save();
  File file1=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  File file2=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  FileUtils.writeStringToFile(file1,""String_Node_Str"");
  FileUtils.writeStringToFile(file2,""String_Node_Str"");
  Submission sub1=subRepo.createSubmission(person);
  createSubmission(sub1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",2012,5,true);
  sub1.setAssignee(otherPerson);
  sub1.setDocumentLanguage(""String_Node_Str"");
  sub1.addDocumentSubject(""String_Node_Str"");
  sub1.setPublishedMaterial(""String_Node_Str"");
  sub1.addEmbargoType(e1);
  sub1.setDocumentType(""String_Node_Str"");
  sub1.addAttachment(file1,AttachmentType.SUPPLEMENTAL);
  sub1.addCommitteeMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sub1.addCommitteeMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sub1.setDefenseDate(new Date(2012,5,1));
  sub1.setSubmissionDate(new Date(2012,5,1));
  sub1.setApprovalDate(new Date(2012,5,1));
  sub1.setLicenseAgreementDate(new Date(2012,5,1));
  sub1.setCommitteeApprovalDate(new Date(2012,5,1));
  sub1.setCommitteeEmbargoApprovalDate(new Date(2012,5,1));
  sub1.setDepositId(""String_Node_Str"");
  sub1.setReviewerNotes(""String_Node_Str"");
  sub1.addCustomAction(def,true);
  sub1.save();
  Submission sub2=subRepo.createSubmission(otherPerson);
  createSubmission(sub2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",2005,4,null);
  sub2.setDocumentLanguage(""String_Node_Str"");
  sub2.addDocumentSubject(""String_Node_Str"");
  sub2.setPublishedMaterial(""String_Node_Str"");
  sub2.setAssignee(person);
  sub2.addEmbargoType(e2);
  sub2.setDocumentType(""String_Node_Str"");
  sub2.addAttachment(file2,AttachmentType.PRIMARY);
  sub2.addAttachment(file1,AttachmentType.SUPPLEMENTAL);
  sub2.addCommitteeMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  sub2.setDefenseDate(new Date(2005,5,1));
  sub2.setSubmissionDate(new Date(2005,5,1));
  sub2.setApprovalDate(new Date(2005,5,1));
  sub2.setLicenseAgreementDate(new Date(2005,5,1));
  sub2.setCommitteeApprovalDate(new Date(2002,5,1));
  sub2.setCommitteeEmbargoApprovalDate(new Date(2002,5,1));
  sub2.setDepositId(""String_Node_Str"");
  sub2.setReviewerNotes(""String_Node_Str"");
  sub2.save();
  JPA.em().getTransaction().commit();
  JPA.em().getTransaction().begin();
  Thread.sleep(100);
  indexer.rebuild(true);
  assertFalse(indexer.isJobRunning());
  NamedSearchFilter filter=subRepo.createSearchFilter(person,""String_Node_Str"");
  filter.addSearchText(""String_Node_Str"");
  filter.save();
  List<Submission> submissions;
  try {
    submissions=searcher.submissionSearch(filter,SearchOrder.ID,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.STUDENT_NAME,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_TITLE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_ABSTRACT,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_KEYWORDS,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_SUBJECTS,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_LANGUAGE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.PUBLISHED_MATERIAL,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.EMBARGO_TYPE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.PRIMARY_DOCUMENT,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_MEMBERS,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_CONTACT_EMAIL,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_APPROVAL_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COMMITTEE_APPROVAL_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.SUBMISSION_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.APPROVAL_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.LICENSE_AGREEMENT_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEGREE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEPARTMENT,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COLLEGE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.COLLEGE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.MAJOR,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DOCUMENT_TYPE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.GRADUATION_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEFENSE_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.STATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.GRADUATION_DATE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.UMI_RELEASE,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.DEPOSIT_ID,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.REVIEWER_NOTES,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.LAST_EVENT_ENTRY,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
    submissions=searcher.submissionSearch(filter,SearchOrder.LAST_EVENT_TIME,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub2) < submissions.indexOf(sub1));
    submissions=searcher.submissionSearch(filter,SearchOrder.ORCID,SearchDirection.DESCENDING,0,20).getResults();
    assertTrue(submissions.contains(sub1));
    assertTrue(submissions.contains(sub2));
    assertTrue(submissions.indexOf(sub1) < submissions.indexOf(sub2));
  }
  finally {
    filter.delete();
    subRepo.findSubmission(sub1.getId()).delete();
    subRepo.findSubmission(sub2.getId()).delete();
    file1.delete();
    file2.delete();
    settingRepo.findEmbargoType(e1.getId()).delete();
    settingRepo.findEmbargoType(e2.getId()).delete();
    settingRepo.findCustomActionDefinition(def.getId()).delete();
    personRepo.findPerson(otherPerson.getId()).delete();
  }
}",0.995123049219688
189336,"/** 
 * Setup before running any tests, clear out the job queue, and create a test person.
 */
@Before public void setup() throws InterruptedException {
  indexer.rebuild(true);
  assertFalse(indexer.isJobRunning());
  context.login(MockPerson.getAdministrator());
  person=personRepo.createPerson(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",RoleType.NONE).save();
}","/** 
 * Setup before running any tests, clear out the job queue, and create a test person.
 */
@Before public void setup() throws InterruptedException {
  indexer.rebuild(true);
  assertFalse(indexer.isJobRunning());
  context.login(MockPerson.getAdministrator());
  person=personRepo.createPerson(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",RoleType.NONE);
  person.setOrcid(""String_Node_Str"");
  person.save();
}",0.9425837320574164
189337,"/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void personalInfo(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub;
  if (subId == null) {
    SubmissionStatus subStatus=new SubmissionStatus();
    if (!subStatus.getAllowMultiple() && subStatus.getHasSubmissions()) {
      error(""String_Node_Str"");
    }
    sub=subRepo.createSubmission(submitter);
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(submitter.getFirstName());
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(submitter.getMiddleName());
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(submitter.getLastName());
    if (isFieldEnabled(STUDENT_BIRTH_YEAR))     sub.setStudentBirthYear(submitter.getBirthYear());
    if (isFieldEnabled(PROGRAM))     sub.setProgram(submitter.getCurrentProgram());
    if (isFieldEnabled(COLLEGE))     sub.setCollege(submitter.getCurrentCollege());
    if (isFieldEnabled(DEPARTMENT))     sub.setDepartment(submitter.getCurrentDepartment());
    if (isFieldEnabled(DEGREE))     sub.setDegree(submitter.getCurrentDegree());
    if (isFieldEnabled(MAJOR))     sub.setMajor(submitter.getCurrentMajor());
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(submitter.getOrcid());
    sub.save();
    subId=sub.getId();
    Logger.info(""String_Node_Str"",submitter.getFormattedName(NameFormat.FIRST_LAST),submitter.getId(),submitter.getEmail(),sub.getId());
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getId());
    ActionDefinition newSub=Router.reverse(""String_Node_Str"",routeArgs);
    redirect(newSub.url);
  }
 else {
    sub=getSubmission();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String orcid=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String program=params.get(""String_Node_Str"");
  String college=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (sub.getOrcid() != null) {
      disabledFields.add(""String_Node_Str"");
      orcid=sub.getOrcid();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidProgram(submitter.getCurrentProgram())) {
      disabledFields.add(""String_Node_Str"");
      program=submitter.getCurrentProgram();
    }
    if (isValidCollege(submitter.getCurrentCollege())) {
      disabledFields.add(""String_Node_Str"");
      college=submitter.getCurrentCollege();
    }
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(firstName);
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(middleName);
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(lastName);
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(orcid);
    if (isFieldEnabled(STUDENT_BIRTH_YEAR)) {
      if (birthYear != null && birthYear.trim().length() > 0) {
        try {
          sub.setStudentBirthYear(Integer.valueOf(birthYear));
        }
 catch (        NumberFormatException ex) {
          sub.setStudentBirthYear(null);
        }
      }
 else {
        sub.setStudentBirthYear(null);
      }
    }
    if (isFieldEnabled(PROGRAM)) {
      if (program != null && program.trim().length() == 0)       sub.setProgram(null);
 else       sub.setProgram(program);
    }
    if (isFieldEnabled(COLLEGE)) {
      if (college != null && college.trim().length() == 0)       sub.setCollege(null);
 else       sub.setCollege(college);
    }
    if (isFieldEnabled(DEPARTMENT)) {
      if (department != null && department.trim().length() == 0)       sub.setDepartment(null);
 else       sub.setDepartment(department);
    }
    if (isFieldEnabled(DEGREE)) {
      if (degree != null && degree.trim().length() == 0)       sub.setDegree(null);
 else       sub.setDegree(degree);
      if (settingRepo.findDegreeByName(degree) != null)       sub.setDegreeLevel(settingRepo.findDegreeByName(degree).getLevel());
    }
    if (isFieldEnabled(MAJOR)) {
      if (major != null && major.trim().length() == 0)       sub.setMajor(null);
 else       sub.setMajor(major);
    }
    if (isFieldEnabled(PERMANENT_PHONE_NUMBER))     submitter.setPermanentPhoneNumber(permPhone);
    if (isFieldEnabled(PERMANENT_POSTAL_ADDRESS))     submitter.setPermanentPostalAddress(permAddress);
    if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS))     submitter.setPermanentEmailAddress(permEmail);
    if (isFieldEnabled(CURRENT_PHONE_NUMBER))     submitter.setCurrentPhoneNumber(currentPhone);
    if (isFieldEnabled(CURRENT_POSTAL_ADDRESS))     submitter.setCurrentPostalAddress(currentAddress);
    try {
      sub.save();
      submitter.save();
    }
 catch (    RuntimeException re) {
      validation.addError(""String_Node_Str"",re.getMessage());
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    License.license(sub.getId());
  }
  if (params.get(""String_Node_Str"") == null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    orcid=sub.getOrcid();
    birthYear=sub.getStudentBirthYear() != null ? String.valueOf(sub.getStudentBirthYear()) : null;
    program=sub.getProgram();
    college=sub.getCollege();
    department=sub.getDepartment();
    degree=sub.getDegree();
    major=sub.getMajor();
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
    orcid=submitter.getOrcid();
  }
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_PERSONAL_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<Submission> submissions=subRepo.findSubmission(submitter);
class DegMaj {
    public String degree;
    public String major;
    @Override public boolean equals(    Object obj){
      if (obj instanceof DegMaj) {
        DegMaj myObj=(DegMaj)obj;
        if (this.degree != null && this.degree.equals(myObj.degree) && this.major != null && this.major.equals(myObj.major)) {
          return true;
        }
 else         if (this.degree == myObj.degree && this.major == myObj.major) {
          return true;
        }
      }
      return false;
    }
  }
  List<DegMaj> disabledDegMaj=new ArrayList<DegMaj>();
  for (  Submission submission : submissions) {
    DegMaj temp=new DegMaj();
    temp.degree=submission.getDegree();
    temp.major=submission.getMajor();
    if (!disabledDegMaj.contains(temp) && (sub.getDegree() != null && sub.getMajor() != null) && !(sub.getDegree().equals(temp.degree) && sub.getMajor().equals(temp.major))) {
      disabledDegMaj.add(temp);
    }
 else     if (!disabledDegMaj.contains(temp) && (sub.getDegree() == null || sub.getMajor() == null)) {
      disabledDegMaj.add(temp);
    }
  }
  renderTemplate(""String_Node_Str"",submitter,subId,disabledFields,stickies,disabledDegMaj,firstName,middleName,lastName,orcid,birthYear,grantor,program,college,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}","/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void personalInfo(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub;
  if (subId == null) {
    SubmissionStatus subStatus=new SubmissionStatus();
    if (!subStatus.getAllowMultiple() && subStatus.getHasSubmissions()) {
      error(""String_Node_Str"");
    }
    sub=subRepo.createSubmission(submitter);
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(submitter.getFirstName());
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(submitter.getMiddleName());
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(submitter.getLastName());
    if (isFieldEnabled(STUDENT_BIRTH_YEAR))     sub.setStudentBirthYear(submitter.getBirthYear());
    if (isFieldEnabled(PROGRAM))     sub.setProgram(submitter.getCurrentProgram());
    if (isFieldEnabled(COLLEGE))     sub.setCollege(submitter.getCurrentCollege());
    if (isFieldEnabled(DEPARTMENT))     sub.setDepartment(submitter.getCurrentDepartment());
    if (isFieldEnabled(DEGREE))     sub.setDegree(submitter.getCurrentDegree());
    if (isFieldEnabled(MAJOR))     sub.setMajor(submitter.getCurrentMajor());
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(submitter.getOrcid());
    sub.save();
    subId=sub.getId();
    Logger.info(""String_Node_Str"",submitter.getFormattedName(NameFormat.FIRST_LAST),submitter.getId(),submitter.getEmail(),sub.getId());
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getId());
    ActionDefinition newSub=Router.reverse(""String_Node_Str"",routeArgs);
    redirect(newSub.url);
  }
 else {
    sub=getSubmission();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String orcid=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String program=params.get(""String_Node_Str"");
  String college=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (sub.getOrcid() != null || submitter.getOrcid() != null) {
      disabledFields.add(""String_Node_Str"");
      orcid=(sub.getOrcid() != null ? sub.getOrcid() : submitter.getOrcid());
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidProgram(submitter.getCurrentProgram())) {
      disabledFields.add(""String_Node_Str"");
      program=submitter.getCurrentProgram();
    }
    if (isValidCollege(submitter.getCurrentCollege())) {
      disabledFields.add(""String_Node_Str"");
      college=submitter.getCurrentCollege();
    }
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(firstName);
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(middleName);
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(lastName);
    if (isFieldEnabled(STUDENT_ORCID)) {
      boolean orcidVerify=true;
      if (settingRepo.getConfigBoolean(AppConfig.ORCID_VALIDATION)) {
        if (settingRepo.getConfigBoolean(AppConfig.ORCID_AUTHENTICATION))         orcidVerify=Utilities.verifyOrcid(orcid,sub.getStudentFirstName(),sub.getStudentLastName());
 else         orcidVerify=Utilities.verifyOrcid(orcid);
      }
      if (!orcidVerify) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        sub.setOrcid(orcid);
        submitter.setOrcid(orcid);
      }
    }
    if (isFieldEnabled(STUDENT_BIRTH_YEAR)) {
      if (birthYear != null && birthYear.trim().length() > 0) {
        try {
          sub.setStudentBirthYear(Integer.valueOf(birthYear));
        }
 catch (        NumberFormatException ex) {
          sub.setStudentBirthYear(null);
        }
      }
 else {
        sub.setStudentBirthYear(null);
      }
    }
    if (isFieldEnabled(PROGRAM)) {
      if (program != null && program.trim().length() == 0)       sub.setProgram(null);
 else       sub.setProgram(program);
    }
    if (isFieldEnabled(COLLEGE)) {
      if (college != null && college.trim().length() == 0)       sub.setCollege(null);
 else       sub.setCollege(college);
    }
    if (isFieldEnabled(DEPARTMENT)) {
      if (department != null && department.trim().length() == 0)       sub.setDepartment(null);
 else       sub.setDepartment(department);
    }
    if (isFieldEnabled(DEGREE)) {
      if (degree != null && degree.trim().length() == 0)       sub.setDegree(null);
 else       sub.setDegree(degree);
      if (settingRepo.findDegreeByName(degree) != null)       sub.setDegreeLevel(settingRepo.findDegreeByName(degree).getLevel());
    }
    if (isFieldEnabled(MAJOR)) {
      if (major != null && major.trim().length() == 0)       sub.setMajor(null);
 else       sub.setMajor(major);
    }
    if (isFieldEnabled(PERMANENT_PHONE_NUMBER))     submitter.setPermanentPhoneNumber(permPhone);
    if (isFieldEnabled(PERMANENT_POSTAL_ADDRESS))     submitter.setPermanentPostalAddress(permAddress);
    if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS))     submitter.setPermanentEmailAddress(permEmail);
    if (isFieldEnabled(CURRENT_PHONE_NUMBER))     submitter.setCurrentPhoneNumber(currentPhone);
    if (isFieldEnabled(CURRENT_POSTAL_ADDRESS))     submitter.setCurrentPostalAddress(currentAddress);
    try {
      sub.save();
      submitter.save();
    }
 catch (    RuntimeException re) {
      validation.addError(""String_Node_Str"",re.getMessage());
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    License.license(sub.getId());
  }
  if (params.get(""String_Node_Str"") == null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    orcid=sub.getOrcid();
    birthYear=sub.getStudentBirthYear() != null ? String.valueOf(sub.getStudentBirthYear()) : null;
    program=sub.getProgram();
    college=sub.getCollege();
    department=sub.getDepartment();
    degree=sub.getDegree();
    major=sub.getMajor();
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
    orcid=submitter.getOrcid();
  }
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_PERSONAL_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<Submission> submissions=subRepo.findSubmission(submitter);
class DegMaj {
    public String degree;
    public String major;
    @Override public boolean equals(    Object obj){
      if (obj instanceof DegMaj) {
        DegMaj myObj=(DegMaj)obj;
        if (this.degree != null && this.degree.equals(myObj.degree) && this.major != null && this.major.equals(myObj.major)) {
          return true;
        }
 else         if (this.degree == myObj.degree && this.major == myObj.major) {
          return true;
        }
      }
      return false;
    }
  }
  List<DegMaj> disabledDegMaj=new ArrayList<DegMaj>();
  for (  Submission submission : submissions) {
    DegMaj temp=new DegMaj();
    temp.degree=submission.getDegree();
    temp.major=submission.getMajor();
    if (!disabledDegMaj.contains(temp) && (sub.getDegree() != null && sub.getMajor() != null) && !(sub.getDegree().equals(temp.degree) && sub.getMajor().equals(temp.major))) {
      disabledDegMaj.add(temp);
    }
 else     if (!disabledDegMaj.contains(temp) && (sub.getDegree() == null || sub.getMajor() == null)) {
      disabledDegMaj.add(temp);
    }
  }
  renderTemplate(""String_Node_Str"",submitter,subId,disabledFields,stickies,disabledDegMaj,firstName,middleName,lastName,orcid,birthYear,grantor,program,college,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}",0.972610048910627
189338,"public void doJob(SettingsRepository settingRepo){
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
        }
      }
      if (!found) {
        settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor).save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}","public void doJob(){
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  try {
    context.turnOffAuthorization();
    List<EmbargoType> embargoTypes=settingRepo.findAllEmbargoTypes();
    for (    EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
      boolean found=false;
      for (      EmbargoType installedEmbargo : embargoTypes) {
        if (installedEmbargo.getName().equals(embargoDefinition.name)) {
          found=true;
          installedEmbargo.setSystemRequired(true);
          installedEmbargo.save();
        }
      }
      if (!found) {
        settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active,embargoDefinition.guarantor).save();
      }
    }
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
 finally {
    context.restoreAuthorization();
  }
}",0.9169590643274854
189339,"public static void createUser(){
  if (firstUser == null || firstUser == false)   Application.index();
  if (params.get(""String_Node_Str"") != null) {
    String firstName=params.get(""String_Node_Str"");
    String lastName=params.get(""String_Node_Str"");
    String email=params.get(""String_Node_Str"");
    String password1=params.get(""String_Node_Str"");
    String password2=params.get(""String_Node_Str"");
    String netid=params.get(""String_Node_Str"");
    verify(firstName,lastName,email,password1,password2,netid);
    if (!validation.hasErrors()) {
      context.turnOffAuthorization();
      Person person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.ADMINISTRATOR).save();
      person.setPassword(password1);
      person.save();
      context.turnOffAuthorization();
      context.login(person);
      List<AuthenticationMethod> methods=getEnabledAuthenticationMethods();
      for (      AuthenticationMethod method : methods)       method.personCreated(request,person);
      session.put(""String_Node_Str"",person.getId());
      session.put(""String_Node_Str"",person.getFirstName());
      session.put(""String_Node_Str"",person.getLastName());
      session.put(""String_Node_Str"",person.getDisplayName());
      systemEmailService.generateAllSystemEmailTemplates();
      new InitializeEmbargos().doJob(settingRepo);
      for (      String roleType : COMMITTEE_MEMBER_ROLE_TYPES_DEFINITIONS) {
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.UNDERGRADUATE).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.MASTERS).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.DOCTORAL).save();
      }
      firstUser=false;
      try {
        SettingsTab.settingsRedirect();
      }
  finally {
        indexer.deleteAndRebuild(false);
      }
    }
 else {
      renderTemplate(""String_Node_Str"",firstName,lastName,email,password1,password2,netid);
    }
  }
  renderTemplate(""String_Node_Str"");
}","public static void createUser(){
  if (firstUser == null || firstUser == false)   Application.index();
  if (params.get(""String_Node_Str"") != null) {
    String firstName=params.get(""String_Node_Str"");
    String lastName=params.get(""String_Node_Str"");
    String email=params.get(""String_Node_Str"");
    String password1=params.get(""String_Node_Str"");
    String password2=params.get(""String_Node_Str"");
    String netid=params.get(""String_Node_Str"");
    verify(firstName,lastName,email,password1,password2,netid);
    if (!validation.hasErrors()) {
      context.turnOffAuthorization();
      Person person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.ADMINISTRATOR).save();
      person.setPassword(password1);
      person.save();
      context.turnOffAuthorization();
      context.login(person);
      List<AuthenticationMethod> methods=getEnabledAuthenticationMethods();
      for (      AuthenticationMethod method : methods)       method.personCreated(request,person);
      session.put(""String_Node_Str"",person.getId());
      session.put(""String_Node_Str"",person.getFirstName());
      session.put(""String_Node_Str"",person.getLastName());
      session.put(""String_Node_Str"",person.getDisplayName());
      systemEmailService.generateAllSystemEmailTemplates();
      for (      String roleType : COMMITTEE_MEMBER_ROLE_TYPES_DEFINITIONS) {
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.UNDERGRADUATE).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.MASTERS).save();
        settingRepo.createCommitteeMemberRoleType(roleType,DegreeLevel.DOCTORAL).save();
      }
      firstUser=false;
      try {
        SettingsTab.settingsRedirect();
      }
  finally {
        indexer.deleteAndRebuild(false);
      }
    }
 else {
      renderTemplate(""String_Node_Str"",firstName,lastName,email,password1,password2,netid);
    }
  }
  renderTemplate(""String_Node_Str"");
}",0.9870722433460076
189340,"/** 
 * Remove an existing embargo type.
 * @param embargoId The id of the embargo type to be removed.
 */
@Security(RoleType.MANAGER) public static void removeEmbargoTypeJSON(String embargoTypeId){
  try {
    String[] parts=embargoTypeId.split(""String_Node_Str"");
    Long id=Long.valueOf(parts[1]);
    EmbargoType embargo=settingRepo.findEmbargoType(id);
    embargo.delete();
    Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),embargo.getId(),embargo.getName(),embargo.getDescription(),embargo.getDuration(),embargo.isActive(),embargo.getGuarantor());
    renderJSON(""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}","/** 
 * Remove an existing embargo type.
 * @param embargoId The id of the embargo type to be removed.
 */
@Security(RoleType.MANAGER) public static void removeEmbargoTypeJSON(String embargoTypeId){
  try {
    Long id=Long.valueOf(embargoTypeId);
    EmbargoType embargo=settingRepo.findEmbargoType(id);
    embargo.delete();
    Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),embargo.getId(),embargo.getName(),embargo.getDescription(),embargo.getDuration(),embargo.isActive(),embargo.getGuarantor());
    renderJSON(""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}",0.9539170506912442
189341,"/** 
 * Remove all existing embargo types.
 */
@Security(RoleType.MANAGER) public static void removeAllEmbargoTypes(){
  List<EmbargoType> embargos=settingRepo.findAllEmbargoTypes();
  for (  EmbargoType embargo : embargos) {
    embargo.delete();
    Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),embargo.getId(),embargo.getName(),embargo.getDescription(),embargo.getDuration(),embargo.isActive());
  }
  flash.put(""String_Node_Str"",""String_Node_Str"");
  configurableSettings();
}","/** 
 * Remove all existing embargo types.
 */
@Security(RoleType.MANAGER) public static void removeAllEmbargoTypes(){
  List<EmbargoType> embargos=settingRepo.findAllEmbargoTypes();
  for (  EmbargoType embargo : embargos) {
    if (!embargo.isSystemRequired()) {
      embargo.delete();
      Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),embargo.getId(),embargo.getName(),embargo.getDescription(),embargo.getDuration(),embargo.isActive());
    }
  }
  flash.put(""String_Node_Str"",""String_Node_Str"");
  configurableSettings();
}",0.9597370583401807
189342,"@Override public void setName(String name){
  if (name == null || name.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  this.name=name;
}","@Override public void setName(String name){
  if (name == null || name.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (name.equals(this.name))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + this.name + ""String_Node_Str"");
  this.name=name;
}",0.7042801556420234
189343,"@Override public JpaEmbargoTypeImpl delete(){
  assertManager();
  List<Long> effectedIds=new ArrayList<Long>();
  for (  Submission sub : getSubmissions()) {
    effectedIds.add(sub.getId());
    sub.removeEmbargoType(this);
  }
  Logger.info(""String_Node_Str"" + effectedIds.size());
  Indexer indexer=Spring.getBeanOfType(Indexer.class);
  indexer.updated(effectedIds);
  return super.delete();
}","@Override public JpaEmbargoTypeImpl delete(){
  assertManager();
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  List<Long> effectedIds=new ArrayList<Long>();
  for (  Submission sub : getSubmissions()) {
    effectedIds.add(sub.getId());
    sub.removeEmbargoType(this);
  }
  Logger.info(""String_Node_Str"" + effectedIds.size());
  Indexer indexer=Spring.getBeanOfType(Indexer.class);
  indexer.updated(effectedIds);
  return super.delete();
}",0.8815060908084164
189344,"/** 
 * Create a new JpaEmbargoTypeImpl.
 * @param name The unique name of the embargo
 * @param description The description of the embargo.
 * @param duration The duration of the embargo, or null, may not be negative
 * @param active Weather the embargo is active.
 */
protected JpaEmbargoTypeImpl(String name,String description,Integer duration,boolean active,EmbargoGuarantor guarantor){
  if (name == null || name.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (description == null || description.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  this.displayOrder=0;
  this.name=name;
  this.description=description;
  this.duration=duration;
  this.active=active;
  if (guarantor == null)   this.guarantor=EmbargoGuarantor.DEFAULT;
 else   this.guarantor=guarantor;
}","/** 
 * Create a new JpaEmbargoTypeImpl.
 * @param name The unique name of the embargo
 * @param description The description of the embargo.
 * @param duration The duration of the embargo, or null, may not be negative
 * @param active Weather the embargo is active.
 */
protected JpaEmbargoTypeImpl(String name,String description,Integer duration,boolean active,EmbargoGuarantor guarantor){
  if (name == null || name.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (description == null || description.length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  this.systemRequired=false;
  this.displayOrder=0;
  this.name=name;
  this.description=description;
  this.duration=duration;
  this.active=active;
  if (guarantor == null)   this.guarantor=EmbargoGuarantor.DEFAULT;
 else   this.guarantor=guarantor;
}",0.9848563968668408
189345,"@Override public void setDuration(Integer duration){
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (duration.equals(this.duration))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.duration=duration;
}","@Override public void setDuration(Integer duration){
  if (duration != null && duration < 0)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (duration == null && duration == this.duration)   return;
 else   if (duration.equals(this.duration))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.duration=duration;
}",0.9105058365758756
189346,"public void setGuarantor(EmbargoGuarantor guarantor){
  assertManager();
  if (guarantor.equals(this.guarantor))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.guarantor=guarantor;
}","public void setGuarantor(EmbargoGuarantor guarantor){
  if (guarantor == null)   throw new IllegalArgumentException(""String_Node_Str"");
  assertManager();
  if (guarantor.equals(this.guarantor))   return;
  if (isSystemRequired())   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str"");
  this.guarantor=guarantor;
}",0.5266666666666666
189347,"/** 
 * Display the faculty advisor's review page where the user can approve or reject a submission. Theoretically we can identify the advisor based upon their use of the security token. If they have that token then they can access the submission. We still require that they authenticate first so we atleast have a user account associated with them.
 * @param token The advisor's sort-of-security token.
 */
@Security(RoleType.NONE) public static void review(String token){
  Person person=context.getPerson();
  if (context.isManager()) {
    String affiliationConfig=Play.configuration.getProperty(AFFILIATION_CONFIG,""String_Node_Str"");
    if (""String_Node_Str"".equals(affiliationConfig)) {
      for (      String affiliation : affiliationConfig.split(""String_Node_Str"")) {
        if (person.getAffiliations().contains(affiliation.trim())) {
          unauthorized(""String_Node_Str"" + affiliationConfig + ""String_Node_Str"");
        }
      }
    }
  }
  notFoundIfNull(token);
  Submission sub=subRepo.findSubmissionByEmailHash(token);
  notFoundIfNull(sub);
  Logger.info(""String_Node_Str"",person.getFormattedName(NameFormat.FIRST_LAST),person.getId(),person.getEmail(),sub.getId());
  boolean inputRecieved=false;
  try {
    context.turnOffAuthorization();
    Date agreementDate=new Date();
    if (params.get(""String_Node_Str"") != null && params.get(""String_Node_Str"").trim().length() > 0) {
      sub.logAction(""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"").save();
      inputRecieved=true;
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeEmbargoApprovalDate(agreementDate);
      inputRecieved=true;
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeApprovalDate(agreementDate);
      inputRecieved=true;
    }
    sub.save();
  }
  finally {
    context.restoreAuthorization();
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<EmbargoType> allEmbargos=settingRepo.findAllEmbargoTypes();
  Person submitter=sub.getSubmitter();
  List<ActionLog> logs=subRepo.findActionLog(sub);
  Attachment primaryDocument=sub.getPrimaryDocument();
  List<Attachment> additionalDocuments=sub.getAttachmentsByType(AttachmentType.SUPPLEMENTAL,AttachmentType.ADMINISTRATIVE,AttachmentType.SOURCE);
  List<Attachment> feedbackDocuments=sub.getAttachmentsByType(AttachmentType.FEEDBACK);
  for (  FieldConfig field : FieldConfig.values()) {
    renderArgs.put(field.name(),field);
  }
  renderTemplate(""String_Node_Str"",token,sub,submitter,logs,primaryDocument,additionalDocuments,feedbackDocuments,grantor,allEmbargos,inputRecieved);
}","/** 
 * Display the faculty advisor's review page where the user can approve or reject a submission. Theoretically we can identify the advisor based upon their use of the security token. If they have that token then they can access the submission. We still require that they authenticate first so we atleast have a user account associated with them.
 * @param token The advisor's sort-of-security token.
 */
@Security(RoleType.NONE) public static void review(String token){
  Person person=context.getPerson();
  if (context.isManager()) {
    String affiliationConfig=Play.configuration.getProperty(AFFILIATION_CONFIG,""String_Node_Str"");
    if (""String_Node_Str"".equals(affiliationConfig)) {
      for (      String affiliation : affiliationConfig.split(""String_Node_Str"")) {
        if (person.getAffiliations().contains(affiliation.trim())) {
          unauthorized(""String_Node_Str"" + affiliationConfig + ""String_Node_Str"");
        }
      }
    }
  }
  notFoundIfNull(token);
  Submission sub=subRepo.findSubmissionByEmailHash(token);
  notFoundIfNull(sub);
  Logger.info(""String_Node_Str"",person.getFormattedName(NameFormat.FIRST_LAST),person.getId(),person.getEmail(),sub.getId());
  boolean inputRecieved=false;
  String error=null;
  try {
    context.turnOffAuthorization();
    Date agreementDate=new Date();
    boolean messageReceived=false;
    if (params.get(""String_Node_Str"") != null && params.get(""String_Node_Str"").trim().length() > 0) {
      sub.logAction(""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"").save();
      inputRecieved=true;
      messageReceived=true;
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeEmbargoApprovalDate(agreementDate);
      inputRecieved=true;
    }
 else     if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      if (messageReceived) {
        sub.setCommitteeEmbargoApprovalDate(null);
        inputRecieved=true;
      }
 else {
        error=""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
    if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      sub.setCommitteeApprovalDate(agreementDate);
      inputRecieved=true;
    }
 else     if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      if (messageReceived) {
        sub.setCommitteeApprovalDate(null);
        inputRecieved=true;
      }
 else {
        error=""String_Node_Str"" + params.get(""String_Node_Str"") + ""String_Node_Str"";
      }
    }
    sub.save();
  }
  finally {
    context.restoreAuthorization();
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<EmbargoType> allEmbargos=settingRepo.findAllEmbargoTypes();
  Person submitter=sub.getSubmitter();
  List<ActionLog> logs=subRepo.findActionLog(sub);
  Attachment primaryDocument=sub.getPrimaryDocument();
  List<Attachment> additionalDocuments=sub.getAttachmentsByType(AttachmentType.SUPPLEMENTAL,AttachmentType.ADMINISTRATIVE,AttachmentType.SOURCE);
  List<Attachment> feedbackDocuments=sub.getAttachmentsByType(AttachmentType.FEEDBACK);
  for (  FieldConfig field : FieldConfig.values()) {
    renderArgs.put(field.name(),field);
  }
  renderTemplate(""String_Node_Str"",token,sub,submitter,logs,primaryDocument,additionalDocuments,feedbackDocuments,grantor,allEmbargos,inputRecieved,error);
}",0.8685788364932749
189348,"@Override public List<String> getRecipients(Submission submission){
  return EmailByRecipientType.getRecipients(submission,recipientType);
}","@Override public List<String> getRecipients(Submission submission){
  return EmailByRecipientType.getRecipients(submission,recipientType,this);
}",0.9824561403508772
189349,"public static List<String> getRecipients(Submission submission,RecipientType recipientType){
  List<String> recipients=new ArrayList<String>();
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  if (recipientType == null)   return recipients;
switch (recipientType) {
case Student:
    if (submission.getSubmitter().getCurrentEmailAddress() != null && submission.getSubmitter().getCurrentEmailAddress().length() > 0) {
      recipients.add(submission.getSubmitter().getCurrentEmailAddress());
    }
  break;
case Advisor:
if (submission.getCommitteeContactEmail() != null && submission.getCommitteeContactEmail().length() > 0) {
  recipients.add(submission.getCommitteeContactEmail());
}
break;
case College:
Long collegeId=submission.getCollegeId();
if (collegeId != null) {
recipients.addAll(settingRepo.findCollege(collegeId).getEmails().values());
}
break;
case Department:
Long departmentId=submission.getDepartmentId();
if (departmentId != null) {
recipients.addAll(settingRepo.findDepartment(departmentId).getEmails().values());
}
break;
case Program:
Long programId=submission.getProgramId();
if (programId != null) {
recipients.addAll(settingRepo.findProgram(programId).getEmails().values());
}
break;
case AdminGroup:
if (JpaEmailWorkflowRuleImpl.adminGroupRecipient != null) {
recipients.addAll(JpaEmailWorkflowRuleImpl.adminGroupRecipient.getEmails().values());
}
break;
case Assignee:
if (submission.getAssignee() != null) {
recipients.add(submission.getAssignee().getCurrentEmailAddress());
}
break;
default :
throw new UnsupportedOperationException();
}
return recipients;
}","public static List<String> getRecipients(Submission submission,RecipientType recipientType,EmailWorkflowRule rule){
  List<String> recipients=new ArrayList<String>();
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  if (recipientType == null)   return recipients;
switch (recipientType) {
case Student:
    if (submission.getSubmitter().getCurrentEmailAddress() != null && submission.getSubmitter().getCurrentEmailAddress().length() > 0) {
      recipients.add(submission.getSubmitter().getCurrentEmailAddress());
    }
  break;
case Advisor:
if (submission.getCommitteeContactEmail() != null && submission.getCommitteeContactEmail().length() > 0) {
  recipients.add(submission.getCommitteeContactEmail());
}
break;
case College:
Long collegeId=submission.getCollegeId();
if (collegeId != null) {
recipients.addAll(settingRepo.findCollege(collegeId).getEmails().values());
}
break;
case Department:
Long departmentId=submission.getDepartmentId();
if (departmentId != null) {
recipients.addAll(settingRepo.findDepartment(departmentId).getEmails().values());
}
break;
case Program:
Long programId=submission.getProgramId();
if (programId != null) {
recipients.addAll(settingRepo.findProgram(programId).getEmails().values());
}
break;
case AdminGroup:
if (rule != null && rule.getAdminGroupRecipient() != null) {
recipients.addAll(rule.getAdminGroupRecipient().getEmails().values());
}
break;
case Assignee:
if (submission.getAssignee() != null) {
recipients.add(submission.getAssignee().getCurrentEmailAddress());
}
break;
default :
throw new UnsupportedOperationException();
}
return recipients;
}",0.885266071977853
189350,"/** 
 * Helper function to take an array of strings as (supplied from parameters in a form request with an autocomplete email field)  These strings may be email addresses, RecipientType enum names, or AdminGroup names. Process it into an actual list of strings  that are proper email addresses.
 * @param designee_string_array - the heterogeneous string array of email addresses, RecipientTypes, and AdminGroups
 * @return - a list of strings that are proper email addresses
 */
public static List<String> processEmailDesigneeArray(String[] designees,Submission sub){
  List<String> addresses=new ArrayList<String>();
  for (  String designee : designees) {
    if (designee.trim().length() != 0) {
      RecipientType recipientType=null;
      for (      RecipientType oneRecipientType : RecipientType.values()) {
        if (oneRecipientType.name().equals(designee.trim())) {
          recipientType=RecipientType.valueOf(designee.trim());
          break;
        }
      }
      if (recipientType != null) {
        List<String> recipientEmailAddresses=EmailByRecipientType.getRecipients(sub,recipientType);
        for (        String recipientEmailAddress : recipientEmailAddresses)         addresses.add(recipientEmailAddress);
      }
 else {
        AdministrativeGroup admingroup=null;
        for (        AdministrativeGroup oneAdmingroup : settingRepo.findAllAdministrativeGroups()) {
          if (oneAdmingroup.getName().equals(designee.trim())) {
            admingroup=oneAdmingroup;
            break;
          }
        }
        if (admingroup == null) {
          addresses.add(designee.trim());
        }
 else {
          for (          String emailAddr : admingroup.getEmails().values()) {
            addresses.add(emailAddr);
          }
        }
      }
    }
  }
  return addresses;
}","/** 
 * Helper function to take an array of strings as (supplied from parameters in a form request with an autocomplete email field)  These strings may be email addresses, RecipientType enum names, or AdminGroup names. Process it into an actual list of strings  that are proper email addresses.
 * @param designee_string_array - the heterogeneous string array of email addresses, RecipientTypes, and AdminGroups
 * @return - a list of strings that are proper email addresses
 */
public static List<String> processEmailDesigneeArray(String[] designees,Submission sub){
  List<String> addresses=new ArrayList<String>();
  for (  String designee : designees) {
    if (designee.trim().length() != 0) {
      RecipientType recipientType=null;
      for (      RecipientType oneRecipientType : RecipientType.values()) {
        if (oneRecipientType.name().equals(designee.trim())) {
          recipientType=RecipientType.valueOf(designee.trim());
          break;
        }
      }
      if (recipientType != null) {
        List<String> recipientEmailAddresses=EmailByRecipientType.getRecipients(sub,recipientType,null);
        for (        String recipientEmailAddress : recipientEmailAddresses)         addresses.add(recipientEmailAddress);
      }
 else {
        AdministrativeGroup admingroup=null;
        for (        AdministrativeGroup oneAdmingroup : settingRepo.findAllAdministrativeGroups()) {
          if (oneAdmingroup.getName().equals(designee.trim())) {
            admingroup=oneAdmingroup;
            break;
          }
        }
        if (admingroup == null) {
          addresses.add(designee.trim());
        }
 else {
          for (          String emailAddr : admingroup.getEmails().values()) {
            addresses.add(emailAddr);
          }
        }
      }
    }
  }
  return addresses;
}",0.9986237269474264
189351,"/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
 else {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    List<String> primary_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),sub);
    List<String> cc_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),sub);
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      for (      String email_address : primary_recipients) {
        email.addTo(email_address);
      }
      for (      String email_address : cc_recipients) {
        email.addCc(email_address);
      }
      email.addTo(sub.getSubmitter());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors() && email != null)   emailService.sendEmail(email,true);
}","/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    List<String> primary_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),sub);
    List<String> cc_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),sub);
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      for (      String email_address : primary_recipients) {
        email.addTo(email_address);
      }
      for (      String email_address : cc_recipients) {
        email.addCc(email_address);
      }
      email.addTo(sub.getSubmitter());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors() && email != null)   emailService.sendEmail(email,true);
}",0.9823051171688189
189352,"/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  List<String> primary_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),submission);
  List<String> cc_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),submission);
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (primary_recipients.size() > 0) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    for (    String email_address : primary_recipients) {
      Utilities.validateEmailAddress(email_address,validation);
    }
    for (    String email_address : cc_recipients) {
      Utilities.validateEmailAddress(email_address,validation);
    }
  }
 else {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    for (    String email_address : primary_recipients) {
      email.addTo(email_address);
    }
    for (    String email_address : cc_recipients) {
      email.addCc(email_address);
    }
    email.setReplyTo(context.getPerson());
    if (primary_recipients.size() > 0 && params.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,true);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      log.save();
    }
  }
}","/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  List<String> primary_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),submission);
  List<String> cc_recipients=params.get(""String_Node_Str"") == null ? new ArrayList<String>() : Utilities.processEmailDesigneeArray(params.get(""String_Node_Str"").split(""String_Node_Str""),submission);
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (subject == null || subject.isEmpty())   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (message == null || message.isEmpty())   validation.addError(""String_Node_Str"",""String_Node_Str"");
  for (  String email_address : primary_recipients) {
    Utilities.validateEmailAddress(email_address,validation);
  }
  for (  String email_address : cc_recipients) {
    Utilities.validateEmailAddress(email_address,validation);
  }
  if ((params.get(""String_Node_Str"") != null && primary_recipients.size() == 0) || (params.get(""String_Node_Str"") == null && params.get(""String_Node_Str"") != null)) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (params.get(""String_Node_Str"") != null && cc_recipients.size() == 0) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    for (    String email_address : primary_recipients) {
      email.addTo(email_address);
    }
    for (    String email_address : cc_recipients) {
      email.addCc(email_address);
    }
    email.setReplyTo(context.getPerson());
    if (primary_recipients.size() > 0 && params.get(""String_Node_Str"").equals(""String_Node_Str"")) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,true);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      log.save();
    }
  }
}",0.9258064516129032
189353,"@Override public String getSuccessLogMessage(){
  if (logSuccessMessage != null) {
    return logSuccessMessage;
  }
  String recipients=""String_Node_Str"";
  for (  InternetAddress address : to) {
    if (recipients.length() != 0)     recipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     recipients+=address.getPersonal();
 else     recipients+=address.getAddress();
  }
  return String.format(""String_Node_Str"",recipients,subject,message);
}","@Override public String getSuccessLogMessage(){
  if (logSuccessMessage != null) {
    return logSuccessMessage;
  }
  String TOrecipients=""String_Node_Str"";
  for (  InternetAddress address : to) {
    if (TOrecipients.length() != 0)     TOrecipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     TOrecipients+=address.getPersonal();
 else     TOrecipients+=address.getAddress();
  }
  String CCrecipients=""String_Node_Str"";
  for (  InternetAddress address : cc) {
    if (CCrecipients.length() != 0)     CCrecipients+=""String_Node_Str"";
    if (address.getPersonal() != null)     CCrecipients+=address.getPersonal();
 else     CCrecipients+=address.getAddress();
  }
  return String.format(""String_Node_Str"",TOrecipients,CCrecipients,subject,message);
}",0.7265372168284789
189354,"/** 
 * Construct a new vireo email impl. This should only be called by spring.
 * @param context The security context.
 * @param personRepo The person repository.
 * @param subRepo The submisison repository.
 */
protected VireoEmailImpl(SecurityContext context,PersonRepository personRepo,SubmissionRepository subRepo,SettingsRepository settingRepo){
  this.settingRepo=settingRepo;
  this.personRepo=personRepo;
  this.subRepo=subRepo;
  this.setFrom(Play.configuration.getProperty(""String_Node_Str""));
  this.setReplyTo(Play.configuration.getProperty(""String_Node_Str""));
  Person person=context.getPerson();
  if (person != null && person.getPreference(AppPref.CC_EMAILS) != null) {
    String email=person.getEmail();
    if (person.getCurrentEmailAddress() != null)     email=person.getCurrentEmailAddress();
    this.addCc(email,person.getFormattedName(NameFormat.LAST_FIRST));
  }
}","/** 
 * Construct a new vireo email impl. This should only be called by spring.
 * @param context The security context.
 * @param personRepo The person repository.
 * @param subRepo The submisison repository.
 */
protected VireoEmailImpl(SecurityContext context,PersonRepository personRepo,SubmissionRepository subRepo,SettingsRepository settingRepo){
  this.settingRepo=settingRepo;
  this.personRepo=personRepo;
  this.subRepo=subRepo;
  this.setFrom(settingRepo.getConfigValue(AppConfig.EMAIL_FROM));
  this.setReplyTo(settingRepo.getConfigValue(AppConfig.EMAIL_REPLY_TO));
  Person person=context.getPerson();
  if (person != null && person.getPreference(AppPref.CC_EMAILS) != null) {
    String email=person.getEmail();
    if (person.getCurrentEmailAddress() != null)     email=person.getCurrentEmailAddress();
    this.addCc(email,person.getFormattedName(NameFormat.LAST_FIRST));
  }
}",0.8698092031425365
189355,"/** 
 * Test that we can remove and add each type of parameter (except for the submission date) from the current action filter. To do this the test will run through each parameter type add it to the filter, confirm that it has been added. Then once all the parameters have been added it will verify that they are all still present. Finally in the same order it will remove them one-by-one.
 */
@Test public void testAddRemoveEachTypeOfFilterParameter(){
  LOGIN();
  Person reviewer=personRepo.findPersonsByRole(RoleType.REVIEWER).get(0);
  EmbargoType embargo1=settingRepo.findAllEmbargoTypes().get(0);
  EmbargoType embargo2=settingRepo.findAllEmbargoTypes().get(1);
  String[] possibleNavs={""String_Node_Str"",""String_Node_Str""};
  for (  String nav : possibleNavs) {
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",nav);
    final String LIST_URL=(nav.equals(""String_Node_Str"")) ? Router.reverse(""String_Node_Str"",routeArgs).url : Router.reverse(""String_Node_Str"",routeArgs).url;
    final String FILTER_URL=Router.reverse(""String_Node_Str"",routeArgs).url;
    final String CUSTOMIZE_FILTERS_URL=Router.reverse(""String_Node_Str"",routeArgs).url;
    String facets=""String_Node_Str"";
    for (    SearchFacet facet : SearchFacet.values()) {
      if (facets.length() > 0)       facets+=""String_Node_Str"";
      facets+=""String_Node_Str"" + facet.getId();
    }
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",facets);
    params.put(""String_Node_Str"",""String_Node_Str"");
    POST(CUSTOMIZE_FILTERS_URL,params);
    Response response=GET(LIST_URL);
    assertContentMatch(""String_Node_Str"",response);
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + reviewer.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + embargo1.getId());
    GET(FILTER_URL + ""String_Node_Str"" + embargo2.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    response=GET(LIST_URL);
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str"" + reviewer.getId()));
    assertFalse(getContent(response).contains(""String_Node_Str"" + reviewer.getId()));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str"" + embargo1.getId()));
    assertFalse(getContent(response).contains(""String_Node_Str"" + embargo1.getId()));
    assertTrue(getContent(response).contains(""String_Node_Str"" + embargo2.getId()));
    assertFalse(getContent(response).contains(""String_Node_Str"" + embargo2.getId()));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + reviewer.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + embargo1.getId());
    GET(FILTER_URL + ""String_Node_Str"" + embargo2.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    response=GET(LIST_URL);
    assertContentMatch(""String_Node_Str"",response);
  }
}","/** 
 * Test that we can remove and add each type of parameter (except for the submission date) from the current action filter. To do this the test will run through each parameter type add it to the filter, confirm that it has been added. Then once all the parameters have been added it will verify that they are all still present. Finally in the same order it will remove them one-by-one.
 */
@Test public void testAddRemoveEachTypeOfFilterParameter(){
  LOGIN();
  Person reviewer=personRepo.findPersonsByRole(RoleType.REVIEWER).get(0);
  EmbargoType embargo1=settingRepo.findAllEmbargoTypes().get(0);
  EmbargoType embargo2=settingRepo.findAllEmbargoTypes().get(1);
  String[] possibleNavs={""String_Node_Str"",""String_Node_Str""};
  for (  String nav : possibleNavs) {
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",nav);
    final String LIST_URL=(nav.equals(""String_Node_Str"")) ? Router.reverse(""String_Node_Str"",routeArgs).url : Router.reverse(""String_Node_Str"",routeArgs).url;
    final String FILTER_URL=Router.reverse(""String_Node_Str"",routeArgs).url;
    final String CUSTOMIZE_FILTERS_URL=Router.reverse(""String_Node_Str"",routeArgs).url;
    String facets=""String_Node_Str"";
    for (    SearchFacet facet : SearchFacet.values()) {
      if (facets.length() > 0)       facets+=""String_Node_Str"";
      facets+=""String_Node_Str"" + facet.getId();
    }
    Map<String,String> params=new HashMap<String,String>();
    params.put(""String_Node_Str"",facets);
    params.put(""String_Node_Str"",""String_Node_Str"");
    POST(CUSTOMIZE_FILTERS_URL,params);
    Response response=GET(LIST_URL);
    assertContentMatch(""String_Node_Str"",response);
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + reviewer.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + embargo1.getId());
    GET(FILTER_URL + ""String_Node_Str"" + embargo2.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    response=GET(LIST_URL);
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str"" + reviewer.getId()));
    assertFalse(getContent(response).contains(""String_Node_Str"" + reviewer.getId()));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str"" + embargo1.getId() + ""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str"" + embargo1.getId() + ""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str"" + embargo2.getId()));
    assertFalse(getContent(response).contains(""String_Node_Str"" + embargo2.getId()));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    assertTrue(getContent(response).contains(""String_Node_Str""));
    assertFalse(getContent(response).contains(""String_Node_Str""));
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + reviewer.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"" + embargo1.getId());
    GET(FILTER_URL + ""String_Node_Str"" + embargo2.getId());
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    GET(FILTER_URL + ""String_Node_Str"");
    response=GET(LIST_URL);
    assertContentMatch(""String_Node_Str"",response);
  }
}",0.9970879440885264
189356,"/** 
 * The third step of the submission form. We handle committee members a bit differently. Basically we always keep a List of Maps for each committee member while we are working with it. So there are several methods to parse the committee members from the current form data, validate the committee members, then save the committee members, and if this is the first time visiting the form there is a method to load committee members. It's complex, but the problem is Difficult.
 * @param subId The id the submission.
 */
@Security(RoleType.STUDENT) public static void documentInfo(Long subId){
  Submission sub=getSubmission();
  String title=params.get(""String_Node_Str"");
  String degreeMonth=params.get(""String_Node_Str"");
  String degreeYear=params.get(""String_Node_Str"");
  Date defenseDate=null;
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  try {
    if (params.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(params.get(""String_Node_Str"").trim()))     defenseDate=(Date)formatter.parse(params.get(""String_Node_Str""));
  }
 catch (  ParseException e) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  String docType=params.get(""String_Node_Str"");
  String abstractText=params.get(""String_Node_Str"");
  String keywords=params.get(""String_Node_Str"");
  String subjectPrimary=params.get(""String_Node_Str"");
  String subjectSecondary=params.get(""String_Node_Str"");
  String subjectTertiary=params.get(""String_Node_Str"");
  String docLanguage=null;
  if (isFieldRequired(DOCUMENT_LANGUAGE) && settingRepo.findAllLanguages().size() == 1) {
    docLanguage=settingRepo.findAllLanguages().get(0).getName();
  }
 else {
    docLanguage=params.get(""String_Node_Str"");
    if (docLanguage != null && docLanguage.trim().length() == 0)     docLanguage=null;
  }
  Boolean publishedMaterialFlag=params.get(""String_Node_Str"",Boolean.class);
  if (publishedMaterialFlag == null)   publishedMaterialFlag=false;
  String publishedMaterial=params.get(""String_Node_Str"");
  if (!publishedMaterialFlag)   publishedMaterial=null;
  String chairEmail=params.get(""String_Node_Str"");
  String embargosString=params.get(""String_Node_Str"");
  List<String> embargos=new ArrayList<String>();
  if (embargosString != null)   for (  String embargo : embargosString.split(""String_Node_Str"")) {
    embargos.add(embargo);
  }
  List<TransientMember> committee=parseCommitteeMembers();
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(DOCUMENT_TITLE))     sub.setDocumentTitle(title);
    if (isFieldEnabled(GRADUATION_DATE)) {
      if (!isEmpty(degreeMonth)) {
        try {
          sub.setGraduationMonth(Integer.parseInt(degreeMonth));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationMonth(null);
      }
      if (!isEmpty(degreeYear)) {
        try {
          sub.setGraduationYear(Integer.parseInt(degreeYear));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationYear(null);
      }
    }
    if (isFieldEnabled(DEFENSE_DATE)) {
      sub.setDefenseDate(defenseDate);
    }
    if (isFieldEnabled(DOCUMENT_TYPE))     sub.setDocumentType(docType);
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     sub.setDocumentAbstract(abstractText);
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     sub.setDocumentKeywords(keywords);
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      sub.getDocumentSubjects().clear();
      if (!isEmpty(subjectPrimary))       sub.addDocumentSubject(subjectPrimary);
      if (!isEmpty(subjectSecondary))       sub.addDocumentSubject(subjectSecondary);
      if (!isEmpty(subjectTertiary))       sub.addDocumentSubject(subjectTertiary);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE))     sub.setDocumentLanguage(docLanguage);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     sub.setCommitteeContactEmail(chairEmail);
    if (isFieldEnabled(PUBLISHED_MATERIAL)) {
      if (publishedMaterialFlag)       sub.setPublishedMaterial(publishedMaterial);
 else       sub.setPublishedMaterial(null);
    }
    if (isFieldEnabled(EMBARGO_TYPE)) {
      for (      String embargo : embargos) {
        try {
          sub.addEmbargoType(settingRepo.findEmbargoType(Long.parseLong(embargo)));
        }
 catch (        RuntimeException re) {
          if (isFieldRequired(EMBARGO_TYPE))           validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    if (isFieldEnabled(COMMITTEE)) {
      try {
        saveCommitteeMembers(sub,committee);
      }
 catch (      RuntimeException re) {
      }
    }
    sub.save();
  }
 else {
    if (isFieldEnabled(DOCUMENT_TITLE))     title=sub.getDocumentTitle();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationMonth() != null)     degreeMonth=sub.getGraduationMonth().toString();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationYear() != null)     degreeYear=sub.getGraduationYear().toString();
    if (isFieldEnabled(DEFENSE_DATE) && sub.getDefenseDate() != null)     defenseDate=sub.getDefenseDate();
    if (isFieldEnabled(DOCUMENT_TYPE))     docType=sub.getDocumentType();
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     abstractText=sub.getDocumentAbstract();
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     keywords=sub.getDocumentKeywords();
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      List<String> subjects=sub.getDocumentSubjects();
      if (subjects.size() > 0)       subjectPrimary=subjects.get(0);
      if (subjects.size() > 1)       subjectSecondary=subjects.get(1);
      if (subjects.size() > 2)       subjectTertiary=subjects.get(2);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE)) {
      docLanguage=sub.getDocumentLanguage();
    }
    if (isFieldEnabled(COMMITTEE))     committee=loadCommitteeMembers(sub);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     chairEmail=sub.getCommitteeContactEmail();
    if (isFieldEnabled(PUBLISHED_MATERIAL))     publishedMaterial=sub.getPublishedMaterial();
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    FileUpload.fileUpload(subId);
  }
  List<Integer> degreeYears=getDegreeYears();
  renderArgs.put(""String_Node_Str"",degreeYears);
  List<String> docTypes=getValidDocumentTypes(sub);
  renderArgs.put(""String_Node_Str"",docTypes);
  List<EmbargoType> embargoTypes=settingRepo.findAllActiveEmbargoTypes();
  renderArgs.put(""String_Node_Str"",embargoTypes);
  List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
  renderArgs.put(""String_Node_Str"",subjects);
  List<CommitteeMemberRoleType> availableRoles=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  renderArgs.put(""String_Node_Str"",availableRoles);
  List<Language> languages=settingRepo.findAllLanguages();
  renderArgs.put(""String_Node_Str"",languages);
  int committeeSlots=4;
  if (committee.size() > 3)   committeeSlots=committee.size();
  if (params.get(""String_Node_Str"") != null)   committeeSlots+=4;
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_DOCUMENT_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  if (publishedMaterial != null)   publishedMaterialFlag=true;
  renderTemplate(""String_Node_Str"",subId,stickies,title,degreeMonth,degreeYear,defenseDate,docType,abstractText,keywords,subjectPrimary,subjectSecondary,subjectTertiary,docLanguage,committeeSlots,committee,chairEmail,publishedMaterialFlag,publishedMaterial,embargos);
}","/** 
 * The third step of the submission form. We handle committee members a bit differently. Basically we always keep a List of Maps for each committee member while we are working with it. So there are several methods to parse the committee members from the current form data, validate the committee members, then save the committee members, and if this is the first time visiting the form there is a method to load committee members. It's complex, but the problem is Difficult.
 * @param subId The id the submission.
 */
@Security(RoleType.STUDENT) public static void documentInfo(Long subId){
  Submission sub=getSubmission();
  String title=params.get(""String_Node_Str"");
  String degreeMonth=params.get(""String_Node_Str"");
  String degreeYear=params.get(""String_Node_Str"");
  Date defenseDate=null;
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  try {
    if (params.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(params.get(""String_Node_Str"").trim()))     defenseDate=(Date)formatter.parse(params.get(""String_Node_Str""));
  }
 catch (  ParseException e) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  String docType=params.get(""String_Node_Str"");
  String abstractText=params.get(""String_Node_Str"");
  String keywords=params.get(""String_Node_Str"");
  String subjectPrimary=params.get(""String_Node_Str"");
  String subjectSecondary=params.get(""String_Node_Str"");
  String subjectTertiary=params.get(""String_Node_Str"");
  String docLanguage=null;
  if (isFieldRequired(DOCUMENT_LANGUAGE) && settingRepo.findAllLanguages().size() == 1) {
    docLanguage=settingRepo.findAllLanguages().get(0).getName();
  }
 else {
    docLanguage=params.get(""String_Node_Str"");
    if (docLanguage != null && docLanguage.trim().length() == 0)     docLanguage=null;
  }
  Boolean publishedMaterialFlag=params.get(""String_Node_Str"",Boolean.class);
  if (publishedMaterialFlag == null)   publishedMaterialFlag=false;
  String publishedMaterial=params.get(""String_Node_Str"");
  if (!publishedMaterialFlag)   publishedMaterial=null;
  String chairEmail=params.get(""String_Node_Str"");
  List<String> embargos=new ArrayList<String>();
  for (  EmbargoGuarantor gaurantor : EmbargoGuarantor.values()) {
    String embargoString=params.get(""String_Node_Str"" + gaurantor.name());
    if (embargoString != null && embargoString.trim().length() != 0)     embargos.add(embargoString);
  }
  List<TransientMember> committee=parseCommitteeMembers();
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(DOCUMENT_TITLE))     sub.setDocumentTitle(title);
    if (isFieldEnabled(GRADUATION_DATE)) {
      if (!isEmpty(degreeMonth)) {
        try {
          sub.setGraduationMonth(Integer.parseInt(degreeMonth));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationMonth(null);
      }
      if (!isEmpty(degreeYear)) {
        try {
          sub.setGraduationYear(Integer.parseInt(degreeYear));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationYear(null);
      }
    }
    if (isFieldEnabled(DEFENSE_DATE)) {
      sub.setDefenseDate(defenseDate);
    }
    if (isFieldEnabled(DOCUMENT_TYPE))     sub.setDocumentType(docType);
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     sub.setDocumentAbstract(abstractText);
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     sub.setDocumentKeywords(keywords);
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      sub.getDocumentSubjects().clear();
      if (!isEmpty(subjectPrimary))       sub.addDocumentSubject(subjectPrimary);
      if (!isEmpty(subjectSecondary))       sub.addDocumentSubject(subjectSecondary);
      if (!isEmpty(subjectTertiary))       sub.addDocumentSubject(subjectTertiary);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE))     sub.setDocumentLanguage(docLanguage);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     sub.setCommitteeContactEmail(chairEmail);
    if (isFieldEnabled(PUBLISHED_MATERIAL)) {
      if (publishedMaterialFlag)       sub.setPublishedMaterial(publishedMaterial);
 else       sub.setPublishedMaterial(null);
    }
    if (isFieldEnabled(EMBARGO_TYPE)) {
      for (      String embargo : embargos) {
        try {
          Logger.info(embargo);
          sub.addEmbargoType(settingRepo.findEmbargoType(Long.parseLong(embargo)));
        }
 catch (        RuntimeException re) {
          if (isFieldRequired(EMBARGO_TYPE))           validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
    if (isFieldEnabled(COMMITTEE)) {
      try {
        saveCommitteeMembers(sub,committee);
      }
 catch (      RuntimeException re) {
      }
    }
    sub.save();
  }
 else {
    if (isFieldEnabled(DOCUMENT_TITLE))     title=sub.getDocumentTitle();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationMonth() != null)     degreeMonth=sub.getGraduationMonth().toString();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationYear() != null)     degreeYear=sub.getGraduationYear().toString();
    if (isFieldEnabled(DEFENSE_DATE) && sub.getDefenseDate() != null)     defenseDate=sub.getDefenseDate();
    if (isFieldEnabled(DOCUMENT_TYPE))     docType=sub.getDocumentType();
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     abstractText=sub.getDocumentAbstract();
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     keywords=sub.getDocumentKeywords();
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      List<String> subjects=sub.getDocumentSubjects();
      if (subjects.size() > 0)       subjectPrimary=subjects.get(0);
      if (subjects.size() > 1)       subjectSecondary=subjects.get(1);
      if (subjects.size() > 2)       subjectTertiary=subjects.get(2);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE)) {
      docLanguage=sub.getDocumentLanguage();
    }
    if (isFieldEnabled(COMMITTEE))     committee=loadCommitteeMembers(sub);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     chairEmail=sub.getCommitteeContactEmail();
    if (isFieldEnabled(PUBLISHED_MATERIAL))     publishedMaterial=sub.getPublishedMaterial();
    for (    EmbargoGuarantor eg : EmbargoGuarantor.values()) {
      String fieldName=eg.name().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + eg.name();
      FieldConfig field=FieldConfig.valueOf(fieldName);
      System.out.println(sub.getEmbargoTypeByGuarantor(eg) != null);
      if (isFieldEnabled(field) && sub.getEmbargoTypeByGuarantor(eg) != null) {
        embargos.add(sub.getEmbargoTypeByGuarantor(eg).getId().toString());
      }
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    FileUpload.fileUpload(subId);
  }
  List<Integer> degreeYears=getDegreeYears();
  renderArgs.put(""String_Node_Str"",degreeYears);
  List<String> docTypes=getValidDocumentTypes(sub);
  renderArgs.put(""String_Node_Str"",docTypes);
  List<EmbargoType> embargoTypes=settingRepo.findAllActiveEmbargoTypes();
  renderArgs.put(""String_Node_Str"",embargoTypes);
  List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
  renderArgs.put(""String_Node_Str"",subjects);
  List<CommitteeMemberRoleType> availableRoles=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  renderArgs.put(""String_Node_Str"",availableRoles);
  List<Language> languages=settingRepo.findAllLanguages();
  renderArgs.put(""String_Node_Str"",languages);
  int committeeSlots=4;
  if (committee.size() > 3)   committeeSlots=committee.size();
  if (params.get(""String_Node_Str"") != null)   committeeSlots+=4;
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_DOCUMENT_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  if (publishedMaterial != null)   publishedMaterialFlag=true;
  renderTemplate(""String_Node_Str"",subId,stickies,title,degreeMonth,degreeYear,defenseDate,docType,abstractText,keywords,subjectPrimary,subjectSecondary,subjectTertiary,docLanguage,committeeSlots,committee,chairEmail,publishedMaterialFlag,publishedMaterial,embargos);
}",0.946437168993741
189357,"/** 
 * Verify that all the document information is correct. This will be accessed from two places, the document info page as well as the confirmation page.
 * @return True if there are no errors found, otherwise false.
 */
public static boolean verify(Submission sub){
  int numberOfErrorsBefore=validation.errors().size();
  if (isFieldRequired(DOCUMENT_TITLE) && isEmpty(sub.getDocumentTitle()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeMonth(sub.getGraduationMonth()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeYear(sub.getGraduationYear()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  Date now=new Date();
  Date min=new Date(-2208967200000L);
  Date max=new Date(now.getTime() + (365 * 24 * 60* 60* 1000L));
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (isFieldRequired(DEFENSE_DATE) && (sub.getDefenseDate() == null))   validation.addError(""String_Node_Str"",""String_Node_Str"");
 else   if (sub.getDefenseDate() != null && (!sub.getDefenseDate().after(min) || !sub.getDefenseDate().before(max)))   validation.addError(""String_Node_Str"",""String_Node_Str"" + formatter.format(min) + ""String_Node_Str""+ formatter.format(max));
  if (!isValidDocType(sub.getDocumentType()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_ABSTRACT) && isEmpty(sub.getDocumentAbstract()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_KEYWORDS) && isEmpty(sub.getDocumentKeywords()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
    for (    String subject : sub.getDocumentSubjects()) {
      if (proquestRepo.findSubjectByDescription(subject) == null) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (isFieldRequired(DOCUMENT_SUBJECTS) && sub.getDocumentSubjects().size() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (isFieldRequired(DOCUMENT_LANGUAGE) && isEmpty(sub.getDocumentLanguage()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(COMMITTEE) && !validation.hasError(""String_Node_Str"")) {
    List<TransientMember> committee=loadCommitteeMembers(sub);
    validateCommitteeMembers(sub,committee);
  }
  if (isFieldRequired(COMMITTEE_CONTACT_EMAIL) && isEmpty(sub.getCommitteeContactEmail())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL) && !isEmpty(sub.getCommitteeContactEmail())) {
    try {
      new InternetAddress(sub.getCommitteeContactEmail()).validate();
    }
 catch (    AddressException e) {
      validation.addError(""String_Node_Str"",""String_Node_Str"" + sub.getCommitteeContactEmail() + ""String_Node_Str"");
    }
  }
  if (isFieldEnabled(PUBLISHED_MATERIAL)) {
    if (sub.getPublishedMaterial() != null && sub.getPublishedMaterial().trim().length() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (isFieldRequired(EMBARGO_TYPE) && sub.getEmbargoTypeByGuarantor(EmbargoGuarantor.DEFAULT) == null)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (numberOfErrorsBefore == validation.errors().size())   return true;
 else   return false;
}","/** 
 * Verify that all the document information is correct. This will be accessed from two places, the document info page as well as the confirmation page.
 * @return True if there are no errors found, otherwise false.
 */
public static boolean verify(Submission sub){
  int numberOfErrorsBefore=validation.errors().size();
  if (isFieldRequired(DOCUMENT_TITLE) && isEmpty(sub.getDocumentTitle()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeMonth(sub.getGraduationMonth()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (!isValidDegreeYear(sub.getGraduationYear()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  Date now=new Date();
  Date min=new Date(-2208967200000L);
  Date max=new Date(now.getTime() + (365 * 24 * 60* 60* 1000L));
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  if (isFieldRequired(DEFENSE_DATE) && (sub.getDefenseDate() == null))   validation.addError(""String_Node_Str"",""String_Node_Str"");
 else   if (sub.getDefenseDate() != null && (!sub.getDefenseDate().after(min) || !sub.getDefenseDate().before(max)))   validation.addError(""String_Node_Str"",""String_Node_Str"" + formatter.format(min) + ""String_Node_Str""+ formatter.format(max));
  if (!isValidDocType(sub.getDocumentType()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_ABSTRACT) && isEmpty(sub.getDocumentAbstract()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(DOCUMENT_KEYWORDS) && isEmpty(sub.getDocumentKeywords()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
    for (    String subject : sub.getDocumentSubjects()) {
      if (proquestRepo.findSubjectByDescription(subject) == null) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (isFieldRequired(DOCUMENT_SUBJECTS) && sub.getDocumentSubjects().size() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (isFieldRequired(DOCUMENT_LANGUAGE) && isEmpty(sub.getDocumentLanguage()))   validation.addError(""String_Node_Str"",""String_Node_Str"");
  if (isFieldRequired(COMMITTEE) && !validation.hasError(""String_Node_Str"")) {
    List<TransientMember> committee=loadCommitteeMembers(sub);
    validateCommitteeMembers(sub,committee);
  }
  if (isFieldRequired(COMMITTEE_CONTACT_EMAIL) && isEmpty(sub.getCommitteeContactEmail())) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL) && !isEmpty(sub.getCommitteeContactEmail())) {
    try {
      new InternetAddress(sub.getCommitteeContactEmail()).validate();
    }
 catch (    AddressException e) {
      validation.addError(""String_Node_Str"",""String_Node_Str"" + sub.getCommitteeContactEmail() + ""String_Node_Str"");
    }
  }
  if (isFieldEnabled(PUBLISHED_MATERIAL)) {
    if (sub.getPublishedMaterial() != null && sub.getPublishedMaterial().trim().length() == 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
  }
  for (  EmbargoGuarantor eg : EmbargoGuarantor.values()) {
    String fieldName=eg.name().equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + eg.name();
    FieldConfig field=FieldConfig.valueOf(fieldName);
    System.out.println(sub.getEmbargoTypeByGuarantor(eg) != null);
    if (isFieldRequired(field) && sub.getEmbargoTypeByGuarantor(eg) == null)     validation.addError(""String_Node_Str"",""String_Node_Str"" + eg.name().toLowerCase() + ""String_Node_Str"");
  }
  if (numberOfErrorsBefore == validation.errors().size())   return true;
 else   return false;
}",0.941946499715424
189358,"/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void personalInfo(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub;
  if (subId == null) {
    SubmissionStatus subStatus=new SubmissionStatus();
    if (!subStatus.getAllowMultiple() && subStatus.getHasSubmissions()) {
      error(""String_Node_Str"");
    }
    sub=subRepo.createSubmission(submitter);
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(submitter.getFirstName());
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(submitter.getMiddleName());
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(submitter.getLastName());
    if (isFieldEnabled(STUDENT_BIRTH_YEAR))     sub.setStudentBirthYear(submitter.getBirthYear());
    if (isFieldEnabled(PROGRAM))     sub.setProgram(submitter.getCurrentProgram());
    if (isFieldEnabled(COLLEGE))     sub.setCollege(submitter.getCurrentCollege());
    if (isFieldEnabled(DEPARTMENT))     sub.setDepartment(submitter.getCurrentDepartment());
    if (isFieldEnabled(DEGREE))     sub.setDegree(submitter.getCurrentDegree());
    if (isFieldEnabled(MAJOR))     sub.setMajor(submitter.getCurrentMajor());
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(submitter.getOrcid());
    sub.save();
    subId=sub.getId();
    Logger.info(""String_Node_Str"",submitter.getFormattedName(NameFormat.FIRST_LAST),submitter.getId(),submitter.getEmail(),sub.getId());
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getId());
    ActionDefinition newSub=Router.reverse(""String_Node_Str"",routeArgs);
    redirect(newSub.url);
  }
 else {
    sub=getSubmission();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String orcid=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String program=params.get(""String_Node_Str"");
  String college=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (sub.getOrcid() != null) {
      disabledFields.add(""String_Node_Str"");
      orcid=sub.getOrcid();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidProgram(submitter.getCurrentProgram())) {
      disabledFields.add(""String_Node_Str"");
      program=submitter.getCurrentProgram();
    }
    if (isValidCollege(submitter.getCurrentCollege())) {
      disabledFields.add(""String_Node_Str"");
      college=submitter.getCurrentCollege();
    }
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(firstName);
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(middleName);
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(lastName);
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(orcid);
    if (isFieldEnabled(STUDENT_BIRTH_YEAR)) {
      if (birthYear != null && birthYear.trim().length() > 0) {
        try {
          sub.setStudentBirthYear(Integer.valueOf(birthYear));
        }
 catch (        NumberFormatException ex) {
          sub.setStudentBirthYear(null);
        }
      }
 else {
        sub.setStudentBirthYear(null);
      }
    }
    if (isFieldEnabled(PROGRAM)) {
      if (program != null && program.trim().length() == 0)       sub.setProgram(null);
 else       sub.setProgram(program);
    }
    if (isFieldEnabled(COLLEGE)) {
      if (college != null && college.trim().length() == 0)       sub.setCollege(null);
 else       sub.setCollege(college);
    }
    if (isFieldEnabled(DEPARTMENT)) {
      if (department != null && department.trim().length() == 0)       sub.setDepartment(null);
 else       sub.setDepartment(department);
    }
    if (isFieldEnabled(DEGREE)) {
      if (degree != null && degree.trim().length() == 0)       sub.setDegree(null);
 else       sub.setDegree(degree);
      if (settingRepo.findDegreeByName(degree) != null)       sub.setDegreeLevel(settingRepo.findDegreeByName(degree).getLevel());
    }
    if (isFieldEnabled(MAJOR)) {
      if (major != null && major.trim().length() == 0)       sub.setMajor(null);
 else       sub.setMajor(major);
    }
    if (isFieldEnabled(PERMANENT_PHONE_NUMBER))     submitter.setPermanentPhoneNumber(permPhone);
    if (isFieldEnabled(PERMANENT_POSTAL_ADDRESS))     submitter.setPermanentPostalAddress(permAddress);
    if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS))     submitter.setPermanentEmailAddress(permEmail);
    if (isFieldEnabled(CURRENT_PHONE_NUMBER))     submitter.setCurrentPhoneNumber(currentPhone);
    if (isFieldEnabled(CURRENT_POSTAL_ADDRESS))     submitter.setCurrentPostalAddress(currentAddress);
    try {
      sub.save();
      submitter.save();
    }
 catch (    RuntimeException re) {
      validation.addError(""String_Node_Str"",re.getMessage());
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    License.license(sub.getId());
  }
  if (params.get(""String_Node_Str"") == null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    orcid=sub.getOrcid();
    birthYear=sub.getStudentBirthYear() != null ? String.valueOf(sub.getStudentBirthYear()) : null;
    program=sub.getProgram();
    college=sub.getCollege();
    department=sub.getDepartment();
    degree=sub.getDegree();
    major=sub.getMajor();
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
    orcid=submitter.getOrcid();
  }
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_PERSONAL_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<Submission> submissions=subRepo.findSubmission(submitter);
  HashMap<String,String> disabledDegMaj=new HashMap<String,String>();
  for (  Submission submission : submissions) {
    disabledDegMaj.put(submission.getDegree(),submission.getMajor());
  }
  renderTemplate(""String_Node_Str"",submitter,subId,disabledFields,stickies,disabledDegMaj,firstName,middleName,lastName,orcid,birthYear,grantor,program,college,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}","/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void personalInfo(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub;
  if (subId == null) {
    SubmissionStatus subStatus=new SubmissionStatus();
    if (!subStatus.getAllowMultiple() && subStatus.getHasSubmissions()) {
      error(""String_Node_Str"");
    }
    sub=subRepo.createSubmission(submitter);
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(submitter.getFirstName());
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(submitter.getMiddleName());
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(submitter.getLastName());
    if (isFieldEnabled(STUDENT_BIRTH_YEAR))     sub.setStudentBirthYear(submitter.getBirthYear());
    if (isFieldEnabled(PROGRAM))     sub.setProgram(submitter.getCurrentProgram());
    if (isFieldEnabled(COLLEGE))     sub.setCollege(submitter.getCurrentCollege());
    if (isFieldEnabled(DEPARTMENT))     sub.setDepartment(submitter.getCurrentDepartment());
    if (isFieldEnabled(DEGREE))     sub.setDegree(submitter.getCurrentDegree());
    if (isFieldEnabled(MAJOR))     sub.setMajor(submitter.getCurrentMajor());
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(submitter.getOrcid());
    sub.save();
    subId=sub.getId();
    Logger.info(""String_Node_Str"",submitter.getFormattedName(NameFormat.FIRST_LAST),submitter.getId(),submitter.getEmail(),sub.getId());
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getId());
    ActionDefinition newSub=Router.reverse(""String_Node_Str"",routeArgs);
    redirect(newSub.url);
  }
 else {
    sub=getSubmission();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String orcid=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String program=params.get(""String_Node_Str"");
  String college=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (sub.getOrcid() != null) {
      disabledFields.add(""String_Node_Str"");
      orcid=sub.getOrcid();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidProgram(submitter.getCurrentProgram())) {
      disabledFields.add(""String_Node_Str"");
      program=submitter.getCurrentProgram();
    }
    if (isValidCollege(submitter.getCurrentCollege())) {
      disabledFields.add(""String_Node_Str"");
      college=submitter.getCurrentCollege();
    }
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(STUDENT_FIRST_NAME))     sub.setStudentFirstName(firstName);
    if (isFieldEnabled(STUDENT_MIDDLE_NAME))     sub.setStudentMiddleName(middleName);
    if (isFieldEnabled(STUDENT_LAST_NAME))     sub.setStudentLastName(lastName);
    if (isFieldEnabled(STUDENT_ORCID))     sub.setOrcid(orcid);
    if (isFieldEnabled(STUDENT_BIRTH_YEAR)) {
      if (birthYear != null && birthYear.trim().length() > 0) {
        try {
          sub.setStudentBirthYear(Integer.valueOf(birthYear));
        }
 catch (        NumberFormatException ex) {
          sub.setStudentBirthYear(null);
        }
      }
 else {
        sub.setStudentBirthYear(null);
      }
    }
    if (isFieldEnabled(PROGRAM)) {
      if (program != null && program.trim().length() == 0)       sub.setProgram(null);
 else       sub.setProgram(program);
    }
    if (isFieldEnabled(COLLEGE)) {
      if (college != null && college.trim().length() == 0)       sub.setCollege(null);
 else       sub.setCollege(college);
    }
    if (isFieldEnabled(DEPARTMENT)) {
      if (department != null && department.trim().length() == 0)       sub.setDepartment(null);
 else       sub.setDepartment(department);
    }
    if (isFieldEnabled(DEGREE)) {
      if (degree != null && degree.trim().length() == 0)       sub.setDegree(null);
 else       sub.setDegree(degree);
      if (settingRepo.findDegreeByName(degree) != null)       sub.setDegreeLevel(settingRepo.findDegreeByName(degree).getLevel());
    }
    if (isFieldEnabled(MAJOR)) {
      if (major != null && major.trim().length() == 0)       sub.setMajor(null);
 else       sub.setMajor(major);
    }
    if (isFieldEnabled(PERMANENT_PHONE_NUMBER))     submitter.setPermanentPhoneNumber(permPhone);
    if (isFieldEnabled(PERMANENT_POSTAL_ADDRESS))     submitter.setPermanentPostalAddress(permAddress);
    if (isFieldEnabled(PERMANENT_EMAIL_ADDRESS))     submitter.setPermanentEmailAddress(permEmail);
    if (isFieldEnabled(CURRENT_PHONE_NUMBER))     submitter.setCurrentPhoneNumber(currentPhone);
    if (isFieldEnabled(CURRENT_POSTAL_ADDRESS))     submitter.setCurrentPostalAddress(currentAddress);
    try {
      sub.save();
      submitter.save();
    }
 catch (    RuntimeException re) {
      validation.addError(""String_Node_Str"",re.getMessage());
    }
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    License.license(sub.getId());
  }
  if (params.get(""String_Node_Str"") == null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    orcid=sub.getOrcid();
    birthYear=sub.getStudentBirthYear() != null ? String.valueOf(sub.getStudentBirthYear()) : null;
    program=sub.getProgram();
    college=sub.getCollege();
    department=sub.getDepartment();
    degree=sub.getDegree();
    major=sub.getMajor();
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
    orcid=submitter.getOrcid();
  }
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_PERSONAL_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  String grantor=settingRepo.getConfigValue(AppConfig.GRANTOR,""String_Node_Str"");
  List<Submission> submissions=subRepo.findSubmission(submitter);
class DegMaj {
    public String degree;
    public String major;
    @Override public boolean equals(    Object obj){
      if (obj instanceof DegMaj) {
        DegMaj myObj=(DegMaj)obj;
        if (this.degree.equals(myObj.degree) && this.major.equals(myObj.major)) {
          return true;
        }
      }
      return false;
    }
  }
  List<DegMaj> disabledDegMaj=new ArrayList<DegMaj>();
  for (  Submission submission : submissions) {
    DegMaj temp=new DegMaj();
    temp.degree=submission.getDegree();
    temp.major=submission.getMajor();
    if (!disabledDegMaj.contains(temp) && !(sub.getDegree().equals(temp.degree) && sub.getMajor().equals(temp.major))) {
      disabledDegMaj.add(temp);
    }
  }
  renderTemplate(""String_Node_Str"",submitter,subId,disabledFields,stickies,disabledDegMaj,firstName,middleName,lastName,orcid,birthYear,grantor,program,college,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}",0.9606809498476568
189359,"/** 
 * Display vital statistic information about vireo and allow access to some administrator features.
 */
@Security(RoleType.ADMINISTRATOR) public static void generalPanel(){
  Runtime runtime=Runtime.getRuntime();
  String javaVersion=java.lang.System.getProperty(""String_Node_Str"");
  String osName=java.lang.System.getProperty(""String_Node_Str"");
  String osArch=java.lang.System.getProperty(""String_Node_Str"");
  String osVersion=java.lang.System.getProperty(""String_Node_Str"");
  int availableProcessors=runtime.availableProcessors();
  long maximumMemory=runtime.maxMemory() / 1024 / 1024;
  long allocatedMemory=runtime.totalMemory() / 1024 / 1024;
  long freeMemory=runtime.freeMemory() / 1024 / 1024;
  long usedMemory=allocatedMemory - freeMemory / 1024 / 1024;
  String playMode=Play.mode.name();
  String frameworkId=Play.id;
  Date startedAt=new Date(Play.startedAt);
  String httpAddress=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPort=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String logLevel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String db=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String appPath=Play.applicationPath.getPath();
  String attachmentsPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String indexPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailMode=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailHost=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailUser=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailPass=Play.configuration.getProperty(""String_Node_Str"");
  String mailChannel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailFrom=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailReply=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (mailPass != null) {
    mailPass=mailPass.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mailPass=""String_Node_Str"";
  }
  String vireoVersion=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  long personTotal=personRepo.findPersonsTotal();
  long submissionTotal=subRepo.findSubmissionsTotal();
  long actionLogTotal=subRepo.findActionLogsTotal();
  String indexImpl=indexer.getClass().getSimpleName();
  String indexJob=""String_Node_Str"";
  if (indexer.isJobRunning()) {
    indexJob=indexer.getCurrentJobLabel();
    float complete=0;
    if (indexer.getCurrentJobTotal() > 0)     complete=(((float)indexer.getCurrentJobProgress()) / indexer.getCurrentJobTotal()) * 100;
    indexJob+=String.format(""String_Node_Str"",complete);
  }
  renderTemplate(""String_Node_Str"",javaVersion,osName,osArch,osVersion,availableProcessors,maximumMemory,allocatedMemory,freeMemory,usedMemory,playMode,frameworkId,httpAddress,httpPort,httpPath,startedAt,appPath,logLevel,db,attachmentsPath,indexPath,mailMode,mailHost,mailUser,mailPass,mailChannel,mailFrom,mailReply,vireoVersion,personTotal,submissionTotal,actionLogTotal,indexImpl,indexJob);
}","/** 
 * Display vital statistic information about vireo and allow access to some administrator features.
 */
@Security(RoleType.ADMINISTRATOR) public static void generalPanel(){
  Runtime runtime=Runtime.getRuntime();
  String javaVersion=java.lang.System.getProperty(""String_Node_Str"");
  String osName=java.lang.System.getProperty(""String_Node_Str"");
  String osArch=java.lang.System.getProperty(""String_Node_Str"");
  String osVersion=java.lang.System.getProperty(""String_Node_Str"");
  int availableProcessors=runtime.availableProcessors();
  long maximumMemory=runtime.maxMemory() / 1024 / 1024;
  long allocatedMemory=runtime.totalMemory() / 1024 / 1024;
  long freeMemory=runtime.freeMemory() / 1024 / 1024;
  long usedMemory=allocatedMemory - freeMemory / 1024 / 1024;
  String playMode=Play.mode.name();
  String frameworkId=Play.id;
  Date startedAt=new Date(Play.startedAt);
  String httpAddress=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPort=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String logLevel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String db=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String appPath=Play.applicationPath.getPath();
  String attachmentsPath=appPath + File.separator + Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String indexPath=appPath + File.separator + Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailMode=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailHost=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailUser=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailPass=Play.configuration.getProperty(""String_Node_Str"");
  String mailChannel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailFrom=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailReply=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (mailPass != null) {
    mailPass=mailPass.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mailPass=""String_Node_Str"";
  }
  String vireoVersion=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  long personTotal=personRepo.findPersonsTotal();
  long submissionTotal=subRepo.findSubmissionsTotal();
  long actionLogTotal=subRepo.findActionLogsTotal();
  String indexImpl=indexer.getClass().getSimpleName();
  String indexJob=""String_Node_Str"";
  if (indexer.isJobRunning()) {
    indexJob=indexer.getCurrentJobLabel();
    float complete=0;
    if (indexer.getCurrentJobTotal() > 0)     complete=(((float)indexer.getCurrentJobProgress()) / indexer.getCurrentJobTotal()) * 100;
    indexJob+=String.format(""String_Node_Str"",complete);
  }
  renderTemplate(""String_Node_Str"",javaVersion,osName,osArch,osVersion,availableProcessors,maximumMemory,allocatedMemory,freeMemory,usedMemory,playMode,frameworkId,httpAddress,httpPort,httpPath,startedAt,appPath,logLevel,db,attachmentsPath,indexPath,mailMode,mailHost,mailUser,mailPass,mailChannel,mailFrom,mailReply,vireoVersion,personTotal,submissionTotal,actionLogTotal,indexImpl,indexJob);
}",0.9919258373205742
189360,"public void setBaseDirectory(String path){
  this.baseDir=new File(path);
}","public void setBaseDirectory(String path){
  this.baseDir=new File(Play.applicationPath + File.separator + path);
}",0.7894736842105263
189361,"@Override public ExportPackage generatePackage(Submission submission){
  if (submission == null || submission.getId() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (templateFile == null)   throw new IllegalStateException(""String_Node_Str"");
  if (manifestName == null)   throw new IllegalStateException(""String_Node_Str"");
  if (format == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    Map<String,String> parameters=new HashMap<String,String>();
    parameters=StringVariableReplacement.setParameters(submission);
    String manifestNameTemplate=manifestName;
    manifestName=StringVariableReplacement.applyParameterSubstitution(manifestName,parameters);
    String entryNameTemplate=entryName;
    String customEntryName=StringVariableReplacement.applyParameterSubstitution(entryName,parameters);
    Map<String,Object> templateBinding=new HashMap<String,Object>();
    templateBinding.put(""String_Node_Str"",submission);
    templateBinding.put(""String_Node_Str"",personRepo);
    templateBinding.put(""String_Node_Str"",subRepo);
    templateBinding.put(""String_Node_Str"",settingRepo);
    templateBinding.put(""String_Node_Str"",proquestRepo);
    templateBinding.put(""String_Node_Str"",packageType);
    templateBinding.put(""String_Node_Str"",manifestName);
    templateBinding.put(""String_Node_Str"",entryName);
    templateBinding.put(""String_Node_Str"",format);
    templateBinding.put(""String_Node_Str"",mimeType);
    templateBinding.put(""String_Node_Str"",attachmentTypes);
    if (templateArguments != null)     templateBinding.putAll(templateArguments);
    Template template=TemplateLoader.load(templateFile);
    String manifest=template.render(templateBinding);
    File pkg=null;
    if (packageType.equals(""String_Node_Str"")) {
      pkg=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(pkg);
      ZipOutputStream zos=new ZipOutputStream(fos);
      File manifestFile=new File(manifestName);
      FileUtils.writeStringToFile(manifestFile,manifest);
      ZipEntry ze=new ZipEntry(manifestName);
      zos.putNextEntry(ze);
      FileInputStream in=new FileInputStream(manifestFile);
      byte[] buf=new byte[1024];
      int len;
      while ((len=in.read(buf)) > 0) {
        zos.write(buf,0,len);
      }
      in.close();
      zos.closeEntry();
      manifestFile.delete();
      if (attachmentTypes.size() > 0) {
        for (        Attachment attachment : submission.getAttachments()) {
          if (!attachmentTypes.contains(attachment.getType()))           continue;
          String shortFileName=attachment.getName().replaceAll(""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName()),""String_Node_Str"");
          String fileName=attachment.getName();
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            fileName=attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") + ""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName());
            fileName=fileName.replace(""String_Node_Str"",shortFileName);
            fileName=StringVariableReplacement.applyParameterSubstitution(fileName,parameters);
          }
          File exportFile=null;
          Boolean hasDir=false;
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            String dirName=(String)attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"");
            dirName=dirName.replace(""String_Node_Str"",shortFileName);
            dirName=StringVariableReplacement.applyParameterSubstitution(dirName,parameters);
            exportFile=new File(dirName,fileName);
            fileName=dirName + fileName;
            hasDir=true;
          }
 else {
            exportFile=new File(fileName);
          }
          FileUtils.copyFile(attachment.getFile(),exportFile);
          ze=new ZipEntry(fileName);
          zos.putNextEntry(ze);
          in=new FileInputStream(exportFile);
          while ((len=in.read(buf)) > 0) {
            zos.write(buf,0,len);
          }
          in.close();
          zos.closeEntry();
          if (hasDir) {
            FileUtils.deleteDirectory(exportFile.getParentFile());
          }
 else {
            exportFile.delete();
          }
        }
        zos.close();
        fos.close();
      }
    }
 else {
      if (attachmentTypes.size() > 0) {
        pkg=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        pkg.delete();
        pkg.mkdir();
        File manifestFile=new File(pkg.getPath(),manifestName);
        FileUtils.writeStringToFile(manifestFile,manifest);
        for (        Attachment attachment : submission.getAttachments()) {
          if (!attachmentTypes.contains(attachment.getType()))           continue;
          String shortFileName=attachment.getName().replaceAll(""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName()),""String_Node_Str"");
          String fileName=attachment.getName();
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            fileName=attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") + ""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName());
            fileName=fileName.replace(""String_Node_Str"",shortFileName);
            fileName=StringVariableReplacement.applyParameterSubstitution(fileName,parameters);
          }
          String pkgPath=pkg.getPath();
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            String dirName=(String)attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"");
            dirName=dirName.replace(""String_Node_Str"",shortFileName);
            dirName=StringVariableReplacement.applyParameterSubstitution(dirName,parameters);
            pkgPath=pkgPath + File.separator + dirName;
          }
          File exportFile=new File(pkgPath,fileName);
          FileUtils.copyFile(attachment.getFile(),exportFile);
        }
      }
 else {
        String extension=FilenameUtils.getExtension(manifestName);
        if (extension.length() > 0)         extension=""String_Node_Str"" + extension;
        pkg=File.createTempFile(""String_Node_Str"",extension);
        FileUtils.writeStringToFile(pkg,manifest);
      }
    }
    this.setManifestName(manifestNameTemplate);
    this.setEntryName(entryNameTemplate);
    return new TemplatePackage(submission,mimeType,format,pkg,customEntryName);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(""String_Node_Str"",ioe);
  }
}","@Override public ExportPackage generatePackage(Submission submission){
  if (submission == null || submission.getId() == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (templateFile == null)   throw new IllegalStateException(""String_Node_Str"");
  if (manifestName == null)   throw new IllegalStateException(""String_Node_Str"");
  if (format == null)   throw new IllegalStateException(""String_Node_Str"");
  try {
    Map<String,String> parameters=new HashMap<String,String>();
    parameters=StringVariableReplacement.setParameters(submission);
    String manifestNameTemplate=manifestName;
    manifestName=StringVariableReplacement.applyParameterSubstitution(manifestName,parameters);
    String entryNameTemplate=entryName;
    String customEntryName=StringVariableReplacement.applyParameterSubstitution(entryName,parameters);
    Map<String,Object> templateBinding=new HashMap<String,Object>();
    templateBinding.put(""String_Node_Str"",submission);
    templateBinding.put(""String_Node_Str"",personRepo);
    templateBinding.put(""String_Node_Str"",subRepo);
    templateBinding.put(""String_Node_Str"",settingRepo);
    templateBinding.put(""String_Node_Str"",proquestRepo);
    templateBinding.put(""String_Node_Str"",packageType);
    templateBinding.put(""String_Node_Str"",manifestName);
    templateBinding.put(""String_Node_Str"",entryName);
    templateBinding.put(""String_Node_Str"",format);
    templateBinding.put(""String_Node_Str"",mimeType);
    templateBinding.put(""String_Node_Str"",attachmentTypes);
    if (templateArguments != null)     templateBinding.putAll(templateArguments);
    Template template=TemplateLoader.load(templateFile);
    String manifest=template.render(templateBinding);
    File pkg=null;
    if (packageType.equals(""String_Node_Str"")) {
      pkg=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      FileOutputStream fos=new FileOutputStream(pkg);
      ZipOutputStream zos=new ZipOutputStream(fos);
      File manifestFile=File.createTempFile(manifestName,null);
      FileUtils.writeStringToFile(manifestFile,manifest);
      ZipEntry ze=new ZipEntry(manifestName);
      zos.putNextEntry(ze);
      FileInputStream in=new FileInputStream(manifestFile);
      byte[] buf=new byte[1024];
      int len;
      while ((len=in.read(buf)) > 0) {
        zos.write(buf,0,len);
      }
      in.close();
      zos.closeEntry();
      manifestFile.delete();
      if (attachmentTypes.size() > 0) {
        for (        Attachment attachment : submission.getAttachments()) {
          if (!attachmentTypes.contains(attachment.getType()))           continue;
          String shortFileName=attachment.getName().replaceAll(""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName()),""String_Node_Str"");
          String fileName=attachment.getName();
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            fileName=attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") + ""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName());
            fileName=fileName.replace(""String_Node_Str"",shortFileName);
            fileName=StringVariableReplacement.applyParameterSubstitution(fileName,parameters);
          }
          File exportFile=null;
          Boolean hasDir=false;
          String dirName=null;
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            dirName=(String)attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"");
            dirName=dirName.replace(""String_Node_Str"",shortFileName);
            dirName=StringVariableReplacement.applyParameterSubstitution(dirName,parameters);
            fileName=dirName + fileName;
            hasDir=true;
          }
          exportFile=File.createTempFile(fileName,null);
          FileUtils.copyFile(attachment.getFile(),exportFile);
          ze=new ZipEntry(fileName);
          zos.putNextEntry(ze);
          in=new FileInputStream(exportFile);
          while ((len=in.read(buf)) > 0) {
            zos.write(buf,0,len);
          }
          in.close();
          zos.closeEntry();
          if (hasDir && dirName != null) {
            FileUtils.deleteDirectory(new File(dirName));
          }
 else {
            exportFile.delete();
          }
        }
        zos.close();
        fos.close();
      }
    }
 else {
      if (attachmentTypes.size() > 0) {
        pkg=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
        pkg.delete();
        pkg.mkdir();
        File manifestFile=new File(pkg.getPath(),manifestName);
        FileUtils.writeStringToFile(manifestFile,manifest);
        for (        Attachment attachment : submission.getAttachments()) {
          if (!attachmentTypes.contains(attachment.getType()))           continue;
          String shortFileName=attachment.getName().replaceAll(""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName()),""String_Node_Str"");
          String fileName=attachment.getName();
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            fileName=attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") + ""String_Node_Str"" + FilenameUtils.getExtension(attachment.getName());
            fileName=fileName.replace(""String_Node_Str"",shortFileName);
            fileName=StringVariableReplacement.applyParameterSubstitution(fileName,parameters);
          }
          String pkgPath=pkg.getPath();
          if (attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"") != null) {
            String dirName=(String)attachmentAttributes.get(attachment.getType().name()).get(""String_Node_Str"");
            dirName=dirName.replace(""String_Node_Str"",shortFileName);
            dirName=StringVariableReplacement.applyParameterSubstitution(dirName,parameters);
            pkgPath=pkgPath + File.separator + dirName;
          }
          File exportFile=new File(pkgPath,fileName);
          FileUtils.copyFile(attachment.getFile(),exportFile);
        }
      }
 else {
        String extension=FilenameUtils.getExtension(manifestName);
        if (extension.length() > 0)         extension=""String_Node_Str"" + extension;
        pkg=File.createTempFile(""String_Node_Str"",extension);
        FileUtils.writeStringToFile(pkg,manifest);
      }
    }
    this.setManifestName(manifestNameTemplate);
    this.setEntryName(entryNameTemplate);
    return new TemplatePackage(submission,mimeType,format,pkg,customEntryName);
  }
 catch (  IOException ioe) {
    throw new RuntimeException(""String_Node_Str"",ioe);
  }
}",0.9700052359937168
189362,"public static File getStore(){
  String name=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  File store=null;
  if (new File(name).isAbsolute()) {
    store=new File(name);
  }
 else {
    store=Play.getFile(name);
  }
  if (!store.exists()) {
    store.mkdirs();
  }
  return store;
}","public static File getStore(){
  String name=Play.applicationPath + File.separator + Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  File store=null;
  if (new File(name).isAbsolute()) {
    store=new File(name);
  }
 else {
    store=Play.getFile(name);
  }
  if (!store.exists()) {
    store.mkdirs();
  }
  return store;
}",0.9390243902439024
189363,"/** 
 * Construct a new LuceneIndexer
 */
public LuceneIndexerImpl() throws IOException {
  indexFile=new File(Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str""));
  index=FSDirectory.open(indexFile);
}","/** 
 * Construct a new LuceneIndexer
 */
public LuceneIndexerImpl() throws IOException {
  indexFile=new File(Play.applicationPath + File.separator + Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str""));
  index=FSDirectory.open(indexFile);
}",0.9163179916317992
189364,"/** 
 * This generates a map of the strings to be replaced with a specific submissions meta data.
 * @param sub The Submission object.
 * @return A key value Map of the Source String and the Replacement String.
 */
public static Map<String,String> setParameters(Submission sub){
  Map<String,String> parameters=new HashMap<String,String>();
  if (sub.getStudentFirstName() != null || sub.getStudentLastName() != null)   parameters.put(""String_Node_Str"",sub.getStudentFormattedName(NameFormat.FIRST_LAST));
  if (sub.getStudentFirstName() != null)   parameters.put(""String_Node_Str"",sub.getStudentFirstName());
  if (sub.getStudentLastName() != null)   parameters.put(""String_Node_Str"",sub.getStudentLastName());
  if (sub.getDocumentTitle() != null)   parameters.put(""String_Node_Str"",sub.getDocumentTitle());
  if (sub.getDocumentType() != null)   parameters.put(""String_Node_Str"",sub.getDocumentType());
  if (sub.getState() != null)   parameters.put(""String_Node_Str"",sub.getState().getDisplayName());
  if (sub.getGraduationYear() != null) {
    String gradSemester=String.valueOf(sub.getGraduationYear());
    if (sub.getGraduationMonth() != null) {
      Integer monthInt=sub.getGraduationMonth();
      String monthName=new DateFormatSymbols().getMonths()[monthInt];
      gradSemester=monthName + ""String_Node_Str"" + gradSemester;
    }
    parameters.put(""String_Node_Str"",gradSemester);
  }
  if (sub.getAssignee() != null)   parameters.put(""String_Node_Str"",sub.getAssignee().getFormattedName(NameFormat.FIRST_LAST));
 else   parameters.put(""String_Node_Str"",""String_Node_Str"");
  ActionDefinition studentAction=Router.reverse(""String_Node_Str"");
  studentAction.absolute();
  parameters.put(""String_Node_Str"",studentAction.url);
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",String.valueOf(sub.getId()));
  ActionDefinition submissionAction=Router.reverse(""String_Node_Str"",params);
  submissionAction.absolute();
  parameters.put(""String_Node_Str"",submissionAction.url);
  if (sub.getCommitteeEmailHash() != null) {
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getCommitteeEmailHash());
    ActionDefinition advisorAction=Router.reverse(""String_Node_Str"",routeArgs);
    advisorAction.absolute();
    parameters.put(""String_Node_Str"",advisorAction.url);
  }
  parameters.put(""String_Node_Str"",File.separator);
  return parameters;
}","/** 
 * This generates a map of the strings to be replaced with a specific submissions meta data.
 * @param sub The Submission object.
 * @return A key value Map of the Source String and the Replacement String.
 */
public static Map<String,String> setParameters(Submission sub){
  Map<String,String> parameters=new HashMap<String,String>();
  if (sub.getStudentFirstName() != null || sub.getStudentLastName() != null)   parameters.put(""String_Node_Str"",sub.getStudentFormattedName(NameFormat.FIRST_LAST));
  if (sub.getStudentFirstName() != null)   parameters.put(""String_Node_Str"",sub.getStudentFirstName());
  if (sub.getStudentLastName() != null)   parameters.put(""String_Node_Str"",sub.getStudentLastName());
  if (sub.getDocumentTitle() != null)   parameters.put(""String_Node_Str"",sub.getDocumentTitle());
  if (sub.getDocumentType() != null)   parameters.put(""String_Node_Str"",sub.getDocumentType());
  if (sub.getState() != null)   parameters.put(""String_Node_Str"",sub.getState().getDisplayName());
  if (sub.getGraduationYear() != null) {
    String gradSemester=String.valueOf(sub.getGraduationYear());
    if (sub.getGraduationMonth() != null) {
      Integer monthInt=sub.getGraduationMonth();
      String monthName=new DateFormatSymbols().getMonths()[monthInt];
      gradSemester=monthName + ""String_Node_Str"" + gradSemester;
    }
    parameters.put(""String_Node_Str"",gradSemester);
  }
  if (sub.getAssignee() != null)   parameters.put(""String_Node_Str"",sub.getAssignee().getFormattedName(NameFormat.FIRST_LAST));
 else   parameters.put(""String_Node_Str"",""String_Node_Str"");
  ActionDefinition studentAction=Router.reverse(""String_Node_Str"");
  studentAction.absolute();
  parameters.put(""String_Node_Str"",studentAction.url);
  Map<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",String.valueOf(sub.getId()));
  ActionDefinition submissionAction=Router.reverse(""String_Node_Str"",params);
  submissionAction.absolute();
  parameters.put(""String_Node_Str"",submissionAction.url);
  if (sub.getCommitteeEmailHash() != null) {
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",sub.getCommitteeEmailHash());
    ActionDefinition advisorAction=Router.reverse(""String_Node_Str"",routeArgs);
    advisorAction.absolute();
    parameters.put(""String_Node_Str"",advisorAction.url);
  }
  String depositID=""String_Node_Str"";
  if (sub.getDepositId() != null)   depositID=sub.getDepositId();
  parameters.put(""String_Node_Str"",depositID);
  parameters.put(""String_Node_Str"",File.separator);
  return parameters;
}",0.9700575054531032
189365,"@Override public JpaEmailWorkflowRuleConditionImpl save(){
  assertManager();
  JpaEmailWorkflowRuleConditionImpl ret;
  if (this.getId() == null) {
    ret=super.save();
    ret.setDisplayOrder(Integer.parseInt(String.valueOf(ret.getId())));
  }
 else {
    if (this.getDisplayOrder() != this.getId()) {
      this.setDisplayOrder(Integer.parseInt(String.valueOf(this.getId())));
    }
  }
  ret=super.save();
  return ret;
}","@Override public JpaEmailWorkflowRuleConditionImpl save(){
  assertManager();
  JpaEmailWorkflowRuleConditionImpl ret;
  if (this.getId() == null) {
    ret=super.save();
    ret.setDisplayOrder(Integer.parseInt(String.valueOf(ret.getId())));
  }
  ret=super.save();
  return ret;
}",0.7033898305084746
189366,"@Override public JpaEmailWorkflowRuleImpl save(){
  assertManager();
  JpaEmailWorkflowRuleImpl ret;
  if (this.getId() == null) {
    ret=super.save();
    ret.setDisplayOrder(Integer.parseInt(String.valueOf(ret.getId())));
  }
 else {
    if (this.getDisplayOrder() != this.getId()) {
      this.setDisplayOrder(Integer.parseInt(String.valueOf(this.getId())));
    }
  }
  ret=super.save();
  return ret;
}","@Override public JpaEmailWorkflowRuleImpl save(){
  assertManager();
  JpaEmailWorkflowRuleImpl ret;
  if (this.getId() == null) {
    ret=super.save();
    ret.setDisplayOrder(Integer.parseInt(String.valueOf(ret.getId())));
  }
  ret=super.save();
  return ret;
}",0.6875
189367,"@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    Logger.info(recipientString);
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    String conditionCategoryJSON=""String_Node_Str"";
    String conditionIdJSON=""String_Node_Str"";
    String conditionDisplayJSON=""String_Node_Str"";
    String recipientTypeJSON=""String_Node_Str"";
    String templateJSON=""String_Node_Str"";
    if ((id != null) && (id.trim().length() != 0) && (!id.equals(""String_Node_Str""))) {
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      AbstractWorkflowRuleCondition condition;
      if ((condition=rule.getCondition()) == null) {
        condition=new JpaEmailWorkflowRuleConditionImpl();
        condition.save();
        rule.setCondition(condition);
      }
      if (conditionCategory != null && conditionCategory.trim().length() != 0) {
        condition.setConditionType(ConditionType.valueOf(conditionCategory));
        condition.setConditionId(null);
        conditionIdJSON=null;
        conditionCategoryJSON=rule.getCondition().getConditionType().name();
        condition.save();
      }
      if (conditionIDString != null && conditionIDString.trim().length() != 0) {
        condition.setConditionId(Long.parseLong(conditionIDString));
        if (rule.getCondition().getConditionType() != null)         conditionCategoryJSON=rule.getCondition().getConditionType().name();
        conditionIdJSON=rule.getCondition().getConditionId().toString();
        condition.save();
      }
      EmailTemplate template;
      if (templateString != null && templateString.trim().length() != 0) {
        template=settingRepo.findEmailTemplate(Long.parseLong(templateString));
        rule.setEmailTemplate((JpaEmailTemplateImpl)template);
        templateJSON=rule.getEmailTemplate().name;
      }
      if (recipientString != null && recipientString.trim().length() != 0) {
        rule.setRecipientType(RecipientType.valueOf(recipientString));
        if (rule.getRecipientType() == RecipientType.AdminGroup) {
          String adminGroupString=params.get(""String_Node_Str"");
          if (adminGroupString == null) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          Long adminGroupId=Long.parseLong(adminGroupString);
          AdministrativeGroup adminGroup=settingRepo.findAdministrativeGroup(adminGroupId);
          rule.setAdminGroupRecipient((JpaAdministrativeGroupImpl)adminGroup);
        }
 else {
          rule.setAdminGroupRecipient(null);
        }
        recipientTypeJSON=rule.getRecipientType().toString() + (rule.getAdminGroupRecipient() != null ? ""String_Node_Str"" + rule.getAdminGroupRecipient().getName() + ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"",rule.getId());
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ rule.getAssociatedState().getBeanName()+ ""String_Node_Str""+ conditionCategoryJSON+ ""String_Node_Str""+ conditionIdJSON+ ""String_Node_Str""+ conditionDisplayJSON+ ""String_Node_Str""+ recipientTypeJSON+ ""String_Node_Str""+ templateJSON+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}","@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    Logger.info(recipientString);
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    String conditionCategoryJSON=""String_Node_Str"";
    String conditionIdJSON=""String_Node_Str"";
    String conditionDisplayJSON=""String_Node_Str"";
    String recipientTypeJSON=""String_Node_Str"";
    String templateJSON=""String_Node_Str"";
    if ((id != null) && (id.trim().length() != 0) && (!id.equals(""String_Node_Str""))) {
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      AbstractWorkflowRuleCondition condition;
      if ((condition=rule.getCondition()) == null) {
        condition=new JpaEmailWorkflowRuleConditionImpl();
        condition.save();
        rule.setCondition(condition);
      }
      if (conditionCategory != null && conditionCategory.trim().length() != 0) {
        condition.setConditionType(ConditionType.valueOf(conditionCategory));
        condition.setConditionId(null);
        conditionIdJSON=null;
        conditionCategoryJSON=rule.getCondition().getConditionType().name();
        condition.save();
      }
      if (conditionIDString != null && conditionIDString.trim().length() != 0) {
        condition.setConditionId(Long.parseLong(conditionIDString));
        if (rule.getCondition().getConditionType() != null)         conditionCategoryJSON=rule.getCondition().getConditionType().name();
        conditionIdJSON=rule.getCondition().getConditionId().toString();
        condition.save();
      }
      EmailTemplate template;
      if (templateString != null && templateString.trim().length() != 0) {
        template=settingRepo.findEmailTemplate(Long.parseLong(templateString));
        rule.setEmailTemplate((JpaEmailTemplateImpl)template);
        templateJSON=rule.getEmailTemplate().name;
      }
      if (recipientString != null && recipientString.trim().length() != 0) {
        rule.setRecipientType(RecipientType.valueOf(recipientString));
        if (rule.getRecipientType() == RecipientType.AdminGroup) {
          String adminGroupString=params.get(""String_Node_Str"");
          if (adminGroupString == null) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          Long adminGroupId=Long.parseLong(adminGroupString);
          AdministrativeGroup adminGroup=settingRepo.findAdministrativeGroup(adminGroupId);
          rule.setAdminGroupRecipient((JpaAdministrativeGroupImpl)adminGroup);
        }
 else {
          rule.setAdminGroupRecipient(null);
        }
        recipientTypeJSON=rule.getRecipientType().toString() + (rule.getAdminGroupRecipient() != null ? ""String_Node_Str"" + rule.getAdminGroupRecipient().getName() + ""String_Node_Str"" : ""String_Node_Str"");
      }
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"",context.getPerson().getDisplayName(),context.getPerson().getId(),context.getPerson().getRole(),rule.getId());
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ rule.getAssociatedState().getBeanName()+ ""String_Node_Str""+ conditionCategoryJSON+ ""String_Node_Str""+ conditionIdJSON+ ""String_Node_Str""+ conditionDisplayJSON+ ""String_Node_Str""+ recipientTypeJSON+ ""String_Node_Str""+ templateJSON+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}",0.9838607192781802
189368,"/** 
 * This will generate and send the email to the right recipients from the rule
 * @param workflowEmailRule - the workflow email rule
 * @param submission - the submission
 */
private static void sendEmail(WorkflowEmailRule workflowEmailRule,Submission submission){
  EmailService emailService=Spring.getBeanOfType(EmailService.class);
  VireoEmail email=createEmail(emailService,workflowEmailRule,submission);
  emailService.sendEmail(email,false);
}","/** 
 * This will generate and send the email to the right recipients from the rule
 * @param workflowEmailRule - the workflow email rule
 * @param submission - the submission
 */
private static void sendEmail(WorkflowEmailRule workflowEmailRule,Submission submission){
  EmailService emailService=Spring.getBeanOfType(EmailService.class);
  VireoEmail email=createEmail(emailService,workflowEmailRule,submission);
  emailService.sendEmail(email,true);
}",0.9922992299229924
189369,"/** 
 * This will generate a VireoEmail from the right recipients from the rule
 * @param emailService - the emailService from Spring
 * @param workflowEmailRule - the workflow email rule
 * @param submission - the submission
 * @return - a new VireoEmail with the correct email template and recipients
 */
private static VireoEmail createEmail(EmailService emailService,WorkflowEmailRule workflowEmailRule,Submission submission){
  List<String> recipients=workflowEmailRule.getRecipients(submission);
  VireoEmail vireoEmail=emailService.createEmail();
  for (  String email : recipients) {
    vireoEmail.addTo(email);
  }
  vireoEmail.setTemplate(workflowEmailRule.getEmailTemplate());
  return vireoEmail;
}","/** 
 * This will generate a VireoEmail from the right recipients from the rule
 * @param emailService - the emailService from Spring
 * @param workflowEmailRule - the workflow email rule
 * @param submission - the submission
 * @return - a new VireoEmail with the correct email template and recipients
 */
private static VireoEmail createEmail(EmailService emailService,WorkflowEmailRule workflowEmailRule,Submission submission){
  List<String> recipients=workflowEmailRule.getRecipients(submission);
  VireoEmail vireoEmail=emailService.createEmail();
  for (  String email : recipients) {
    vireoEmail.addTo(email);
  }
  vireoEmail.setTemplate(workflowEmailRule.getEmailTemplate());
  vireoEmail.addParameters(submission);
  return vireoEmail;
}",0.9493844049247606
189370,"/** 
 * This static class will take a submission and go through all of the JPA email rules to decide if an email needs to be sent (and to whom) depending on the rule's condition and recipients
 * @param submission - the submission
 */
public static void runEmailRules(Submission submission){
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  List<WorkflowEmailRule> rules=settingRepo.findAllWorkflowEmailRules();
  for (  WorkflowEmailRule workflowEmailRule : rules) {
    if (ruleIsValid(workflowEmailRule,submission)) {
      if (workflowEmailRule.getAssociatedState().equals(submission.getState().getBeanName())) {
switch (workflowEmailRule.getCondition().getConditionType()) {
case Always:
          sendEmail(workflowEmailRule,submission);
        break;
case College:
      Long collegeId=workflowEmailRule.getCondition().getConditionId();
    College ruleCollege=settingRepo.findCollege(collegeId);
  if (ruleCollege.getName().equals(submission.getCollege())) {
    sendEmail(workflowEmailRule,submission);
  }
break;
case Department:
Long departmentId=workflowEmailRule.getCondition().getConditionId();
Department ruleDepartment=settingRepo.findDepartment(departmentId);
if (ruleDepartment.getName().equals(submission.getDepartment())) {
sendEmail(workflowEmailRule,submission);
}
break;
case Program:
Long programId=workflowEmailRule.getCondition().getConditionId();
Program ruleProgram=settingRepo.findProgram(programId);
if (ruleProgram.getName().equals(submission.getProgram())) {
sendEmail(workflowEmailRule,submission);
}
break;
default :
throw new UnsupportedOperationException();
}
}
}
}
}","/** 
 * This static class will take a submission and go through all of the JPA email rules to decide if an email needs to be sent (and to whom) depending on the rule's condition and recipients
 * @param submission - the submission
 */
public static void runEmailRules(Submission submission){
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  List<WorkflowEmailRule> rules=settingRepo.findAllWorkflowEmailRules();
  for (  WorkflowEmailRule workflowEmailRule : rules) {
    if (ruleIsValid(workflowEmailRule,submission)) {
      if (workflowEmailRule.getAssociatedState().getBeanName().equals(submission.getState().getBeanName())) {
switch (workflowEmailRule.getCondition().getConditionType()) {
case Always:
          sendEmail(workflowEmailRule,submission);
        break;
case College:
      Long collegeId=workflowEmailRule.getCondition().getConditionId();
    College ruleCollege=settingRepo.findCollege(collegeId);
  if (ruleCollege != null && ruleCollege.getName().equals(submission.getCollege())) {
    sendEmail(workflowEmailRule,submission);
  }
break;
case Department:
Long departmentId=workflowEmailRule.getCondition().getConditionId();
Department ruleDepartment=settingRepo.findDepartment(departmentId);
if (ruleDepartment != null && ruleDepartment.getName().equals(submission.getDepartment())) {
sendEmail(workflowEmailRule,submission);
}
break;
case Program:
Long programId=workflowEmailRule.getCondition().getConditionId();
Program ruleProgram=settingRepo.findProgram(programId);
if (ruleProgram != null && ruleProgram.getName().equals(submission.getProgram())) {
sendEmail(workflowEmailRule,submission);
}
break;
default :
throw new UnsupportedOperationException();
}
}
}
}
}",0.97441998810232
189371,"/** 
 * Checks the validity of a rule to make sure it should run or not
 * @param workflowEmailRule - the workflow email rule to check
 * @param submission - the submission to check against
 * @return - returns true if rule is valid, false if condition is not set or recipients is emtpy
 */
private static boolean ruleIsValid(WorkflowEmailRule workflowEmailRule,Submission submission){
  boolean ret=true;
  if (workflowEmailRule.getCondition() != null) {
    if (workflowEmailRule.getCondition().getConditionType() == null || workflowEmailRule.getCondition().getConditionId() == null) {
      ret=false;
    }
  }
 else {
    ret=false;
  }
  if (workflowEmailRule.getRecipients(submission).size() == 0) {
    ret=false;
  }
  return ret;
}","/** 
 * Checks the validity of a rule to make sure it should run or not
 * @param workflowEmailRule - the workflow email rule to check
 * @param submission - the submission to check against
 * @return - returns true if rule is valid, false if condition is not set or recipients is emtpy
 */
private static boolean ruleIsValid(WorkflowEmailRule workflowEmailRule,Submission submission){
  boolean ret=true;
  if (workflowEmailRule.getCondition() != null) {
    if (workflowEmailRule.getCondition().getConditionType() == null) {
      ret=false;
    }
switch (workflowEmailRule.getCondition().getConditionType()) {
case College:
case Department:
case Program:
      if (workflowEmailRule.getCondition().getConditionId() == null) {
        ret=false;
      }
    break;
case Always:
  break;
default :
throw new UnsupportedOperationException();
}
}
 else {
ret=false;
}
if (workflowEmailRule.getRecipients(submission).size() == 0) {
ret=false;
}
return ret;
}",0.8497348261638185
189372,"/** 
 * Helper function to create a JSON encoded string for a hashMap of email addresses Will also modify the passed-in hashMap to add the email addresses Will validate the email addresses in the process 
 * @param emails - the emails String from the request
 * @param emails_map - a blank map to add emails to
 * @return - JSON encoded string representing the hashMap of emails
 */
private static String createEmailsJsonAndAddToMap(String emails,HashMap<Integer,String> emails_map){
  String jsonEmails=""String_Node_Str"";
  if (emails != null) {
    int i=0;
    List<String> emails_list=(emails.length() == 0 ? new ArrayList<String>() : Arrays.asList(emails.split(""String_Node_Str"")));
    for (    String email : emails_list) {
      if (!validateEmailAddress(email)) {
        throw new IllegalArgumentException(""String_Node_Str"" + email + ""String_Node_Str"");
      }
      emails_map.put(i,email);
      jsonEmails+=""String_Node_Str"" + i + ""String_Node_Str""+ email+ ""String_Node_Str"";
      i++;
    }
    jsonEmails=jsonEmails.substring(0,jsonEmails.length() - 1);
  }
  jsonEmails+=""String_Node_Str"";
  return jsonEmails;
}","/** 
 * Helper function to create a JSON encoded string for a hashMap of email addresses Will also modify the passed-in hashMap to add the email addresses Will validate the email addresses in the process 
 * @param emails - the emails String from the request
 * @param emails_map - a blank map to add emails to
 * @return - JSON encoded string representing the hashMap of emails
 */
private static String createEmailsJsonAndAddToMap(String emails,HashMap<Integer,String> emails_map){
  String jsonEmails=""String_Node_Str"";
  if (emails != null) {
    int i=0;
    List<String> emails_list=(emails.length() == 0 ? new ArrayList<String>() : Arrays.asList(emails.split(""String_Node_Str"")));
    for (    String email : emails_list) {
      if (!validateEmailAddress(email)) {
        throw new IllegalArgumentException(""String_Node_Str"" + email + ""String_Node_Str"");
      }
      emails_map.put(i,email);
      jsonEmails+=""String_Node_Str"" + i + ""String_Node_Str""+ email+ ""String_Node_Str"";
      i++;
    }
    if (jsonEmails.length() > 1) {
      jsonEmails=jsonEmails.substring(0,jsonEmails.length() - 1);
    }
  }
  jsonEmails+=""String_Node_Str"";
  return jsonEmails;
}",0.9813287016934432
189373,"private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getEmbargoType() != null) row.createCell(j).setCellValue(sub.getEmbargoType().getName());
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
int actions=0;
for (org.tdl.vireo.model.CustomActionValue action : sub.getCustomActions()) {
if (action.getValue()) {
actions++;
}
}
if (actions > 0) row.createCell(j).setCellValue(Integer.toString(actions));
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
}
}
}","private void processWorkbookRow(XSSFRow header,XSSFRow row,Submission sub,List<SearchOrder> SearchOrderList){
  int j=0;
  for (  SearchOrder column : SearchOrderList) {
switch (column) {
case ID:
      header.createCell(j).setCellValue(""String_Node_Str"");
    if (null != sub.getId())     row.createCell(j).setCellValue(sub.getId());
  j++;
break;
case STUDENT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getSubmitter() && null != sub.getSubmitter().getEmail()) row.createCell(j).setCellValue(sub.getSubmitter().getEmail());
j++;
break;
case STUDENT_NAME:
header.createCell(j).setCellValue(""String_Node_Str"");
row.createCell(j).setCellValue(sub.getStudentFormattedName(org.tdl.vireo.model.NameFormat.LAST_FIRST_MIDDLE_BIRTH));
j++;
break;
case STUDENT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmitter() != null && sub.getSubmitter().getInstitutionalIdentifier() != null) row.createCell(j).setCellValue(sub.getSubmitter().getInstitutionalIdentifier());
j++;
break;
case STATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getState()) row.createCell(j).setCellValue(sub.getState().getDisplayName());
j++;
break;
case ASSIGNEE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getAssignee()) row.createCell(j).setCellValue(sub.getAssignee().getFormattedName(org.tdl.vireo.model.NameFormat.FIRST_LAST));
j++;
break;
case DOCUMENT_TITLE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentTitle()) row.createCell(j).setCellValue(sub.getDocumentTitle());
j++;
break;
case DOCUMENT_ABSTRACT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentAbstract()) row.createCell(j).setCellValue(sub.getDocumentAbstract());
j++;
break;
case DOCUMENT_SUBJECTS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentSubjects()) row.createCell(j).setCellValue(StringUtils.join(sub.getDocumentSubjects(),""String_Node_Str""));
j++;
break;
case DOCUMENT_LANGUAGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getDocumentLanguage()) row.createCell(j).setCellValue(sub.getDocumentLanguage());
j++;
break;
case PUBLISHED_MATERIAL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPublishedMaterial()) row.createCell(j).setCellValue(""String_Node_Str"" + sub.getPublishedMaterial());
j++;
break;
case PRIMARY_DOCUMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (null != sub.getPrimaryDocument()) row.createCell(j).setCellValue(sub.getPrimaryDocument().getName());
j++;
break;
case GRADUATION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder sb=new StringBuilder();
String monthName=null;
if (sub.getGraduationMonth() != null && sub.getGraduationMonth() >= 0 && sub.getGraduationMonth() <= 11) monthName=new java.text.DateFormatSymbols().getMonths()[sub.getGraduationMonth()];
if (sub.getGraduationYear() != null) sb.append(sub.getGraduationYear());
if (monthName != null) sb.append(""String_Node_Str"").append(monthName);
row.createCell(j).setCellValue(sb.toString());
j++;
break;
case DEFENSE_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDefenseDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getDefenseDate()));
j++;
break;
case SUBMISSION_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getSubmissionDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getSubmissionDate()));
j++;
break;
case LICENSE_AGREEMENT_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLicenseAgreementDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getLicenseAgreementDate()));
j++;
break;
case APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getApprovalDate()));
j++;
break;
case COMMITTEE_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeApprovalDate()));
j++;
break;
case COMMITTEE_EMBARGO_APPROVAL_DATE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeEmbargoApprovalDate() != null) row.createCell(j).setCellValue(sdf.format(sub.getCommitteeEmbargoApprovalDate()));
j++;
break;
case COMMITTEE_MEMBERS:
header.createCell(j).setCellValue(""String_Node_Str"");
StringBuilder cm=new StringBuilder();
int i=0;
for (i=0; i < sub.getCommitteeMembers().size(); i++) {
CommitteeMember member=sub.getCommitteeMembers().get(i);
cm.append(member.getFormattedName(NameFormat.LAST_FIRST));
if (member.getRoles().size() > 0) {
cm.append(""String_Node_Str"").append(member.getFormattedRoles()).append(""String_Node_Str"");
}
if ((i + 1) < sub.getCommitteeMembers().size()) {
cm.append(""String_Node_Str"");
}
}
row.createCell(j).setCellValue(cm.toString());
j++;
break;
case COMMITTEE_CONTACT_EMAIL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCommitteeContactEmail() != null) row.createCell(j).setCellValue(sub.getCommitteeContactEmail());
j++;
break;
case DEGREE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegree() != null) row.createCell(j).setCellValue(sub.getDegree());
j++;
break;
case DEGREE_LEVEL:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDegreeLevel() != null) row.createCell(j).setCellValue(sub.getDegreeLevel().name());
j++;
break;
case PROGRAM:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getProgram() != null) row.createCell(j).setCellValue(sub.getProgram());
j++;
break;
case COLLEGE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getCollege() != null) row.createCell(j).setCellValue(sub.getCollege());
j++;
break;
case DEPARTMENT:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepartment() != null) row.createCell(j).setCellValue(sub.getDepartment());
j++;
break;
case MAJOR:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getMajor() != null) row.createCell(j).setCellValue(sub.getMajor());
j++;
break;
case EMBARGO_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getEmbargoType() != null) row.createCell(j).setCellValue(sub.getEmbargoType().getName());
j++;
break;
case DOCUMENT_TYPE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentType() != null) row.createCell(j).setCellValue(sub.getDocumentType());
j++;
break;
case UMI_RELEASE:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getUMIRelease() != null) {
if (sub.getUMIRelease()) {
row.createCell(j).setCellValue(""String_Node_Str"");
}
 else {
row.createCell(j).setCellValue(""String_Node_Str"");
}
}
j++;
break;
case CUSTOM_ACTIONS:
header.createCell(j).setCellValue(""String_Node_Str"");
int actions=0;
for (CustomActionValue action : sub.getCustomActions()) {
if (action.getValue()) {
actions++;
}
}
if (actions > 0) row.createCell(j).setCellValue(Integer.toString(actions));
j++;
break;
case DEPOSIT_ID:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDepositId() != null) row.createCell(j).setCellValue(sub.getDepositId());
j++;
break;
case REVIEWER_NOTES:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getReviewerNotes() != null) row.createCell(j).setCellValue(sub.getReviewerNotes());
j++;
break;
case DOCUMENT_KEYWORDS:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getDocumentKeywords() != null) row.createCell(j).setCellValue(sub.getDocumentKeywords());
j++;
break;
case LAST_EVENT_ENTRY:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogEntry() != null) row.createCell(j).setCellValue(sub.getLastLogEntry());
j++;
break;
case LAST_EVENT_TIME:
header.createCell(j).setCellValue(""String_Node_Str"");
if (sub.getLastLogDate() != null) row.createCell(j).setCellValue(sub.getLastLogDate());
j++;
break;
}
}
}",0.9940671547588992
189374,"@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    Logger.info(recipientString);
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    String conditionCategoryJSON=""String_Node_Str"";
    String conditionIdJSON=""String_Node_Str"";
    String conditionDisplayJSON=""String_Node_Str"";
    String recipientTypeJSON=""String_Node_Str"";
    String templateJSON=""String_Node_Str"";
    if ((id != null) && (id.trim().length() != 0) && (!id.equals(""String_Node_Str""))) {
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      AbstractWorkflowRuleCondition condition;
      if ((condition=rule.getCondition()) == null) {
        condition=new JpaEmailWorkflowRuleConditionImpl();
        condition.save();
        rule.setCondition(condition);
      }
      if (conditionCategory != null && conditionCategory.trim().length() != 0) {
        condition.setConditionType(ConditionType.valueOf(conditionCategory));
        condition.setConditionId(null);
        conditionCategoryJSON=rule.getCondition().getConditionType().name();
        condition.save();
      }
      if (conditionIDString != null && conditionIDString.trim().length() != 0) {
        condition.setConditionId(Long.parseLong(conditionIDString));
        if (rule.getCondition().getConditionType() != null)         conditionCategoryJSON=rule.getCondition().getConditionType().name();
        conditionIdJSON=rule.getCondition().getConditionId().toString();
        condition.save();
      }
      EmailTemplate template;
      if (templateString != null && templateString.trim().length() != 0) {
        template=settingRepo.findEmailTemplate(Long.parseLong(templateString));
        rule.setEmailTemplate((JpaEmailTemplateImpl)template);
        templateJSON=rule.getEmailTemplate().name;
      }
      if (recipientString != null && recipientString.trim().length() != 0) {
        Logger.info(recipientString);
        rule.setRecipientType(RecipientType.valueOf(recipientString));
        recipientTypeJSON=rule.getRecipientType().name();
      }
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"");
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ rule.getAssociatedState().getBeanName()+ ""String_Node_Str""+ conditionCategoryJSON+ ""String_Node_Str""+ conditionIdJSON+ ""String_Node_Str""+ conditionDisplayJSON+ ""String_Node_Str""+ recipientTypeJSON+ ""String_Node_Str""+ templateJSON+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}","@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    Logger.info(recipientString);
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    String conditionCategoryJSON=""String_Node_Str"";
    String conditionIdJSON=""String_Node_Str"";
    String conditionDisplayJSON=""String_Node_Str"";
    String recipientTypeJSON=""String_Node_Str"";
    String templateJSON=""String_Node_Str"";
    if ((id != null) && (id.trim().length() != 0) && (!id.equals(""String_Node_Str""))) {
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      AbstractWorkflowRuleCondition condition;
      if ((condition=rule.getCondition()) == null) {
        condition=new JpaEmailWorkflowRuleConditionImpl();
        condition.save();
        rule.setCondition(condition);
      }
      if (conditionCategory != null && conditionCategory.trim().length() != 0) {
        condition.setConditionType(ConditionType.valueOf(conditionCategory));
        condition.setConditionId(null);
        conditionIdJSON=null;
        conditionCategoryJSON=rule.getCondition().getConditionType().name();
        condition.save();
      }
      if (conditionIDString != null && conditionIDString.trim().length() != 0) {
        condition.setConditionId(Long.parseLong(conditionIDString));
        if (rule.getCondition().getConditionType() != null)         conditionCategoryJSON=rule.getCondition().getConditionType().name();
        conditionIdJSON=rule.getCondition().getConditionId().toString();
        condition.save();
      }
      EmailTemplate template;
      if (templateString != null && templateString.trim().length() != 0) {
        template=settingRepo.findEmailTemplate(Long.parseLong(templateString));
        rule.setEmailTemplate((JpaEmailTemplateImpl)template);
        templateJSON=rule.getEmailTemplate().name;
      }
      if (recipientString != null && recipientString.trim().length() != 0) {
        Logger.info(recipientString);
        rule.setRecipientType(RecipientType.valueOf(recipientString));
        recipientTypeJSON=rule.getRecipientType().name();
      }
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"");
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ rule.getAssociatedState().getBeanName()+ ""String_Node_Str""+ conditionCategoryJSON+ ""String_Node_Str""+ conditionIdJSON+ ""String_Node_Str""+ conditionDisplayJSON+ ""String_Node_Str""+ recipientTypeJSON+ ""String_Node_Str""+ templateJSON+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}",0.9952696310312203
189375,"@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    String conditionCatagoryJSON=""String_Node_Str"";
    String conditionIdJSON=""String_Node_Str"";
    String recipientTypeJSON=""String_Node_Str"";
    String templateJSON=""String_Node_Str"";
    if ((id != null) && (id.trim().length() != 0) && (!id.equals(""String_Node_Str""))) {
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      AbstractWorkflowRuleCondition condition;
      if ((condition=rule.getCondition()) != null) {
        condition=new JpaEmailWorkflowRuleConditionImpl();
      }
      if (conditionCategory != null && conditionCategory.trim().length() != 0) {
        condition.setConditionType(ConditionType.valueOf(conditionCategory));
        rule.setCondition(condition);
        conditionCatagoryJSON=rule.getCondition().getConditionType().name();
      }
      if (conditionIDString != null && conditionIDString.trim().length() != 0) {
        condition.setConditionId(Long.parseLong(conditionIDString));
        rule.setCondition(condition);
        conditionIdJSON=rule.getCondition().getConditionId().toString();
      }
      EmailTemplate template;
      if (templateString != null && templateString.trim().length() != 0) {
        template=settingRepo.findEmailTemplateByName(templateString);
        rule.setEmailTemplate(template);
      }
      if (recipientString != null && recipientString.trim().length() != 0) {
        rule.setRecipientType(RecipientType.valueOf(recipientString));
        recipientTypeJSON=rule.getRecipientType().name();
        templateJSON=rule.getEmailTemplate().getName();
      }
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"");
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ rule.getAssociatedState().getBeanName()+ ""String_Node_Str""+ conditionCatagoryJSON+ ""String_Node_Str""+ conditionIdJSON+ ""String_Node_Str""+ recipientTypeJSON+ ""String_Node_Str""+ templateJSON+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}","@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    String conditionCatagoryJSON=""String_Node_Str"";
    String conditionIdJSON=""String_Node_Str"";
    String recipientTypeJSON=""String_Node_Str"";
    String templateJSON=""String_Node_Str"";
    if ((id != null) && (id.trim().length() != 0) && (!id.equals(""String_Node_Str""))) {
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      AbstractWorkflowRuleCondition condition;
      if ((condition=rule.getCondition()) == null) {
        condition=new JpaEmailWorkflowRuleConditionImpl();
        condition.save();
        rule.setCondition(condition);
      }
      if (conditionCategory != null && conditionCategory.trim().length() != 0) {
        condition.setConditionType(ConditionType.valueOf(conditionCategory));
        conditionCatagoryJSON=rule.getCondition().getConditionType().name();
        condition.save();
      }
      if (conditionIDString != null && conditionIDString.trim().length() != 0) {
        condition.setConditionId(Long.parseLong(conditionIDString));
        conditionIdJSON=rule.getCondition().getConditionId().toString();
        condition.save();
      }
      EmailTemplate template;
      if (templateString != null && templateString.trim().length() != 0) {
        template=settingRepo.findEmailTemplateByName(templateString);
        rule.setEmailTemplate(template);
      }
      if (recipientString != null && recipientString.trim().length() != 0) {
        rule.setRecipientType(RecipientType.valueOf(recipientString));
        recipientTypeJSON=rule.getRecipientType().name();
        templateJSON=rule.getEmailTemplate().getName();
      }
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"");
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ rule.getAssociatedState().getBeanName()+ ""String_Node_Str""+ conditionCatagoryJSON+ ""String_Node_Str""+ conditionIdJSON+ ""String_Node_Str""+ recipientTypeJSON+ ""String_Node_Str""+ templateJSON+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}",0.9508670520231214
189376,"/** 
 * Download a back export. This may take a considerable amount of time, so we use play's asynchronous features to suspend the current thread until the next chunk of data is ready to be published.
 * @param packager The packager to use for the export.
 */
@Security(RoleType.REVIEWER) public static void batchExport(){
  String packager=params.get(""String_Node_Str"");
  String packager_extra=params.get(""String_Node_Str"");
  long saved_filter_id=-1;
  if (packager_extra != null && packager_extra.equals(""String_Node_Str"")) {
    saved_filter_id=Long.parseLong(params.get(""String_Node_Str""));
  }
  SearchFilter filter=getActiveSearchFilter(SUBMISSION);
  if (saved_filter_id >= 0) {
    filter=subRepo.findSearchFilter(saved_filter_id);
  }
  Packager exportPackage=(Packager)Spring.getBean(packager);
  Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),exportPackage == null ? ""String_Node_Str"" : exportPackage.getBeanName(),filter == null ? ""String_Node_Str"" : (filter instanceof ActiveSearchFilter ? ((ActiveSearchFilter)filter).encode() : filter instanceof NamedSearchFilter ? ((NamedSearchFilter)filter).getName() : ""String_Node_Str""));
  ExportService exportService=(ExportService)Spring.getBean(exportPackage.getExportServiceBeanName());
  ChunkStream stream=exportService.export(exportPackage,filter);
  response.contentType=stream.getContentType();
  response.setHeader(""String_Node_Str"",stream.getContentDisposition());
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  while (stream.hasNextChunk()) {
    Promise<byte[]> nextChunk=stream.nextChunk();
    byte[] chunk=await(nextChunk);
    response.writeChunk(chunk);
  }
}","/** 
 * Download a back export. This may take a considerable amount of time, so we use play's asynchronous features to suspend the current thread until the next chunk of data is ready to be published.
 * @param packager The packager to use for the export.
 */
@Security(RoleType.REVIEWER) public static void batchExport(){
  String packager=params.get(""String_Node_Str"");
  String packager_extra=params.get(""String_Node_Str"");
  long saved_filter_id=-1;
  if (packager_extra != null && packager_extra.equals(""String_Node_Str"")) {
    saved_filter_id=Long.parseLong(params.get(""String_Node_Str""));
  }
  ActiveSearchFilter filter=getActiveSearchFilter(SUBMISSION);
  if (saved_filter_id >= 0) {
    filter.copyFrom(subRepo.findSearchFilter(saved_filter_id));
  }
  Packager exportPackage=(Packager)Spring.getBean(packager);
  Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),exportPackage == null ? ""String_Node_Str"" : exportPackage.getBeanName(),filter == null ? ""String_Node_Str"" : filter.encode());
  ExportService exportService=(ExportService)Spring.getBean(exportPackage.getExportServiceBeanName());
  ChunkStream stream=exportService.export(exportPackage,filter);
  response.contentType=stream.getContentType();
  response.setHeader(""String_Node_Str"",stream.getContentDisposition());
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  while (stream.hasNextChunk()) {
    Promise<byte[]> nextChunk=stream.nextChunk();
    byte[] chunk=await(nextChunk);
    response.writeChunk(chunk);
  }
}",0.9438202247191012
189377,"/** 
 * Customize the columns shown, and their order, and the results per page.
 * @param nav list or log
 */
@Security(RoleType.REVIEWER) public static void customizeSearch(String nav){
  int type=SUBMISSION;
  if (""String_Node_Str"".equals(nav))   type=ACTION_LOG;
  List<SearchOrder> columns=new ArrayList<SearchOrder>();
  String columnsString=params.get(""String_Node_Str"");
  String[] columnIds=columnsString.split(""String_Node_Str"");
  for (  String columnId : columnIds) {
    String[] parts=columnId.split(""String_Node_Str"");
    SearchOrder column=SearchOrder.find(Integer.valueOf(parts[1]));
    columns.add(column);
  }
  if (columns.contains(SearchOrder.ID)) {
    String columnsSerialized=""String_Node_Str"";
    for (    SearchOrder column : columns) {
      if (columnsSerialized.length() > 0)       columnsSerialized+=""String_Node_Str"";
      columnsSerialized+=column.getId();
    }
    ActiveSearchFilter activeFilter=getActiveSearchFilter(type);
    activeFilter.setColumns(columns);
    response.setCookie(NAMES[type][ACTIVE_FILTER],activeFilter.encode(),COOKIE_DURATION);
  }
  Integer resultsPerPage=params.get(""String_Node_Str"",Integer.class);
  if (resultsPerPage != null && resultsPerPage > 0 && resultsPerPage <= 1000) {
    response.setCookie(NAMES[type][RESULTSPERPAGE],String.valueOf(resultsPerPage),COOKIE_DURATION);
    session.remove(NAMES[type][OFFSET]);
  }
  if (""String_Node_Str"".equals(nav))   list();
  if (""String_Node_Str"".equals(nav))   log();
  error(""String_Node_Str"");
}","/** 
 * Customize the columns shown, and their order, and the results per page.
 * @param nav list or log
 */
@Security(RoleType.REVIEWER) public static void customizeSearch(String nav){
  int type=SUBMISSION;
  if (""String_Node_Str"".equals(nav))   type=ACTION_LOG;
  boolean set_default_columns=(params.get(""String_Node_Str"") != null);
  List<SearchOrder> columns=getDefaultColumns(type);
  if (!set_default_columns) {
    String columnsString=params.get(""String_Node_Str"");
    String[] columnIds=columnsString.split(""String_Node_Str"");
    for (    String columnId : columnIds) {
      String[] parts=columnId.split(""String_Node_Str"");
      SearchOrder column=SearchOrder.find(Integer.valueOf(parts[1]));
      columns.add(column);
    }
  }
  if (columns.contains(SearchOrder.ID)) {
    String columnsSerialized=""String_Node_Str"";
    for (    SearchOrder column : columns) {
      if (columnsSerialized.length() > 0)       columnsSerialized+=""String_Node_Str"";
      columnsSerialized+=column.getId();
    }
    ActiveSearchFilter activeFilter=getActiveSearchFilter(type);
    activeFilter.setColumns(columns);
    response.setCookie(NAMES[type][ACTIVE_FILTER],activeFilter.encode(),COOKIE_DURATION);
  }
  Integer resultsPerPage=params.get(""String_Node_Str"",Integer.class);
  if (resultsPerPage != null && resultsPerPage > 0 && resultsPerPage <= 1000) {
    response.setCookie(NAMES[type][RESULTSPERPAGE],String.valueOf(resultsPerPage),COOKIE_DURATION);
    session.remove(NAMES[type][OFFSET]);
  }
  if (""String_Node_Str"".equals(nav))   list();
  if (""String_Node_Str"".equals(nav))   log();
  error(""String_Node_Str"");
}",0.9318471337579618
189378,"@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    if (conditionCategory == null || conditionCategory.trim().length() == 0)     conditionCategory=""String_Node_Str"";
    JpaEmailWorkflowRuleConditionImpl condition;
    if (conditionCategory == null || conditionCategory.trim().length() == 0) {
      condition=null;
    }
 else {
      condition=new JpaEmailWorkflowRuleConditionImpl();
      condition.setConditionId(Long.parseLong(conditionIDString));
      condition.setConditionType(ConditionType.valueOf(conditionCategory));
    }
    EmailTemplate template;
    if (templateString == null || templateString.trim().length() == 0) {
      template=null;
    }
 else {
      template=settingRepo.findEmailTemplateByName(templateString);
    }
    State associatedState=stateManager.getState(stateString);
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    if (id != null && id.trim().length() > 0 && id != (null)) {
      Long ruleID=Long.valueOf(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      rule.setCondition(condition);
      rule.setRecipientType(RecipientType.valueOf(recipientString));
      rule.setEmailTemplate(template);
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState,conditionCategory,condition,RecipientType.valueOf(recipientString),template);
    }
    rules.add(rule);
    saveModelOrder(rules);
    Logger.info(""String_Node_Str"");
    String stateJSON=rule.getAssociatedState().getBeanName();
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ stateJSON+ ""String_Node_Str""+ conditionCategory+ ""String_Node_Str""+ rule.getCondition()+ ""String_Node_Str""+ rule.getRecipientType().name()+ ""String_Node_Str""+ rule.getEmailTemplate()+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}","@Security(RoleType.MANAGER) public static void addEditEmailWorkflowRuleJSON(String id,String stateString,String conditionCategory,String conditionIDString,String recipientString,String templateString){
  try {
    if (stateString == null || stateString.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    State associatedState=stateManager.getState(stateString);
    if (conditionCategory == null || conditionCategory.trim().length() == 0)     conditionCategory=""String_Node_Str"";
    JpaEmailWorkflowRuleConditionImpl condition;
    if (conditionCategory == null || conditionCategory.trim().length() == 0) {
      condition=null;
    }
 else {
      condition=new JpaEmailWorkflowRuleConditionImpl();
      condition.setConditionId(Long.parseLong(conditionIDString));
      condition.setConditionType(ConditionType.valueOf(conditionCategory));
    }
    EmailTemplate template;
    if (templateString == null || templateString.trim().length() == 0) {
      template=null;
    }
 else {
      template=settingRepo.findEmailTemplateByName(templateString);
    }
    RecipientType recipient=null;
    if ((recipientString != null) || (templateString.trim().length() == 0) || (templateString != ""String_Node_Str"")) {
      recipient=RecipientType.valueOf(recipientString);
    }
    List<WorkflowEmailRule> rules=settingRepo.findWorkflowEmailRulesByState(associatedState);
    WorkflowEmailRule rule;
    if (false) {
      Logger.info(id);
      Long ruleID=Long.parseLong(id);
      rule=settingRepo.findWorkflowEmailRule(ruleID);
      rule.setCondition(condition);
      rule.setRecipientType(RecipientType.valueOf(recipientString));
      rule.setEmailTemplate(template);
    }
 else {
      rule=settingRepo.createWorkflowEmailRule(associatedState,conditionCategory,condition,recipient,template);
    }
    rules.add(rule);
    Logger.info(""String_Node_Str"");
    String stateJSON=rule.getAssociatedState().getBeanName();
    renderJSON(""String_Node_Str"" + rule.getId() + ""String_Node_Str""+ stateJSON+ ""String_Node_Str""+ rule.getCondition().getConditionType()+ ""String_Node_Str""+ rule.getCondition().getConditionId()+ ""String_Node_Str""+ rule.getRecipientType().name()+ ""String_Node_Str""+ rule.getEmailTemplate()+ ""String_Node_Str"");
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}",0.7630640083945436
189379,"@Override public List<String> getRecipients(Submission submission){
  List<String> recipients=new ArrayList<String>();
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
switch (recipientType) {
case Student:
    recipients.add(submission.getSubmitter().getCurrentEmailAddress());
  break;
case Advisor:
recipients.add(submission.getCommitteeContactEmail());
break;
case College:
recipients.addAll(settingRepo.findCollege(this.emailGroupId).getEmails().values());
break;
case Department:
recipients.addAll(settingRepo.findDepartment(this.emailGroupId).getEmails().values());
break;
case Program:
recipients.addAll(settingRepo.findProgram(this.emailGroupId).getEmails().values());
break;
default :
throw new UnsupportedOperationException();
}
return recipients;
}","@Override public List<String> getRecipients(Submission submission){
  List<String> recipients=new ArrayList<String>();
  SettingsRepository settingRepo=Spring.getBeanOfType(SettingsRepository.class);
  if (recipientType == null)   return recipients;
switch (recipientType) {
case Student:
    recipients.add(submission.getSubmitter().getCurrentEmailAddress());
  break;
case Advisor:
recipients.add(submission.getCommitteeContactEmail());
break;
case College:
recipients.addAll(settingRepo.findCollege(this.emailGroupId).getEmails().values());
break;
case Department:
recipients.addAll(settingRepo.findDepartment(this.emailGroupId).getEmails().values());
break;
case Program:
recipients.addAll(settingRepo.findProgram(this.emailGroupId).getEmails().values());
break;
default :
throw new UnsupportedOperationException();
}
return recipients;
}",0.9620563035495716
189380,"/** 
 * Create a new College. The id of the new college will be returned.
 * @param name The name of the new college
 */
@Security(RoleType.MANAGER) public static void editCollegeJSON(String collegeId,String name,String emails){
  try {
    if (name == null || name.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    List<College> colleges=settingRepo.findAllColleges();
    College college=null;
    String jsonEmails=""String_Node_Str"";
    if (collegeId != null && collegeId.trim().length() > 0) {
      Long id=Long.valueOf(collegeId);
      college=settingRepo.findCollege(id);
      college.setName(name);
      HashMap<Integer,String> emails_map=new HashMap<Integer,String>();
      String[] emails_array=emails.split(""String_Node_Str"");
      int i=0;
      jsonEmails=""String_Node_Str"";
      for (      String email : Arrays.asList(emails_array)) {
        emails_map.put(i,email);
        jsonEmails+=""String_Node_Str"" + i + ""String_Node_Str""+ email+ ""String_Node_Str"";
        i++;
        if (i != college.getEmails().size())         jsonEmails+=""String_Node_Str"";
      }
      jsonEmails+=""String_Node_Str"";
      college.setEmails(emails_map);
      college.save();
    }
 else {
      if (emails != null) {
        String[] newEmails=emails.split(""String_Node_Str"");
        college=settingRepo.createCollege(name,Arrays.asList(newEmails));
        jsonEmails=""String_Node_Str"";
        int i=0;
        for (        Map.Entry<Integer,String> entry : college.getEmails().entrySet()) {
          Integer key=entry.getKey();
          String value=entry.getValue();
          jsonEmails+=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
          i++;
          if (i != college.getEmails().size())           jsonEmails+=""String_Node_Str"";
        }
        jsonEmails+=""String_Node_Str"";
      }
 else {
        Logger.info(""String_Node_Str"");
        college=settingRepo.createCollege(name);
      }
      colleges.add(college);
    }
    saveModelOrder(colleges);
    name=escapeJavaScript(college.getName());
    renderJSON(""String_Node_Str"" + college.getId() + ""String_Node_Str""+ name+ ""String_Node_Str""+ jsonEmails+ ""String_Node_Str"");
  }
 catch (  IllegalArgumentException iae) {
    String message=escapeJavaScript(iae.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
catch (  PersistenceException pe) {
    name=escapeJavaScript(name);
    renderJSON(""String_Node_Str"" + name + ""String_Node_Str"");
  }
catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}","/** 
 * Create a new College. The id of the new college will be returned.
 * @param name The name of the new college
 */
@Security(RoleType.MANAGER) public static void editCollegeJSON(String collegeId,String name,String emails){
  try {
    if (name == null || name.trim().length() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    List<College> colleges=settingRepo.findAllColleges();
    College college=null;
    String jsonEmails=""String_Node_Str"";
    if (collegeId != null && collegeId.trim().length() > 0) {
      Long id=Long.valueOf(collegeId);
      college=settingRepo.findCollege(id);
      college.setName(name);
      HashMap<Integer,String> emails_map=new HashMap<Integer,String>();
      String[] emails_array=emails.split(""String_Node_Str"");
      int i=0;
      jsonEmails=""String_Node_Str"";
      for (      String email : Arrays.asList(emails_array)) {
        emails_map.put(i,email);
        jsonEmails+=""String_Node_Str"" + i + ""String_Node_Str""+ email+ ""String_Node_Str"";
        i++;
      }
      jsonEmails=jsonEmails.substring(0,jsonEmails.length() - 1);
      jsonEmails+=""String_Node_Str"";
      college.setEmails(emails_map);
      college.save();
    }
 else {
      if (emails != null) {
        String[] newEmails=emails.split(""String_Node_Str"");
        college=settingRepo.createCollege(name,Arrays.asList(newEmails));
        jsonEmails=""String_Node_Str"";
        int i=0;
        for (        Map.Entry<Integer,String> entry : college.getEmails().entrySet()) {
          Integer key=entry.getKey();
          String value=entry.getValue();
          jsonEmails+=""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str"";
          i++;
          if (i != college.getEmails().size())           jsonEmails+=""String_Node_Str"";
        }
        jsonEmails+=""String_Node_Str"";
      }
 else {
        Logger.info(""String_Node_Str"");
        college=settingRepo.createCollege(name);
      }
      colleges.add(college);
    }
    saveModelOrder(colleges);
    name=escapeJavaScript(college.getName());
    renderJSON(""String_Node_Str"" + college.getId() + ""String_Node_Str""+ name+ ""String_Node_Str""+ jsonEmails+ ""String_Node_Str"");
  }
 catch (  IllegalArgumentException iae) {
    String message=escapeJavaScript(iae.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
catch (  PersistenceException pe) {
    name=escapeJavaScript(name);
    renderJSON(""String_Node_Str"" + name + ""String_Node_Str"");
  }
catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
    String message=escapeJavaScript(re.getMessage());
    renderJSON(""String_Node_Str"" + message + ""String_Node_Str"");
  }
}",0.977810650887574
189381,"/** 
 * @param mock True if shibboleth authentication should be mocked with test attributes. This allows you to use the application without it actualy running behind a shibboleth.
 */
public void setMock(boolean mock){
  if (null != mockShib) {
    mock=mockShib.equals(""String_Node_Str"");
  }
 else {
    mock=(Play.mode == Mode.DEV);
  }
  this.mock=mock;
}","/** 
 * @param mock True if shibboleth authentication should be mocked with test attributes. This allows you to use the application without it actualy running behind a shibboleth.
 */
public void setMock(boolean mock){
  this.mock=mock;
}",0.7537688442211056
189382,"@Override public AuthenticationResult authenticate(Request request){
  if (Logger.isTraceEnabled() || logShib) {
    String log=""String_Node_Str"";
    for (    String name : request.headers.keySet()) {
      for (      String value : request.headers.get(name).values) {
        log+=""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"";
      }
    }
    String configuredLogLevel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
    if (!Logger.isTraceEnabled() && !Logger.configuredManually && !configuredLogLevel.isEmpty()) {
      Logger.setUp(""String_Node_Str"");
    }
 else {
      configuredLogLevel=""String_Node_Str"";
    }
    if (Logger.isTraceEnabled()) {
      Logger.trace(log);
    }
    if (!configuredLogLevel.isEmpty()) {
      Logger.setUp(configuredLogLevel);
    }
  }
  String netid=getSingleAttribute(request,headerNetId);
  String email=getSingleAttribute(request,headerEmail);
  String firstName=getSingleAttribute(request,headerFirstName);
  String lastName=getSingleAttribute(request,headerLastName);
  if (useNetIdAsIdentifier && netid == null) {
    Logger.error(""String_Node_Str"",headerNetId);
    return AuthenticationResult.MISSING_CREDENTIALS;
  }
  if (email == null) {
    Logger.error(""String_Node_Str"",headerEmail);
    return AuthenticationResult.MISSING_CREDENTIALS;
  }
  if (firstName == null && lastName == null) {
    Logger.error(""String_Node_Str"",headerFirstName,headerLastName);
    return AuthenticationResult.MISSING_CREDENTIALS;
  }
  Person person;
  try {
    context.turnOffAuthorization();
    if (useNetIdAsIdentifier) {
      person=personRepo.findPersonByNetId(netid);
    }
 else {
      person=personRepo.findPersonByEmail(email);
    }
    if (person == null) {
      try {
        person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.STUDENT).save();
      }
 catch (      RuntimeException re) {
        Logger.error(re,""String_Node_Str"");
        return AuthenticationResult.BAD_CREDENTIALS;
      }
    }
 else {
      if (netid != null)       person.setNetId(netid);
      person.setEmail(email);
      person.setFirstName(firstName);
      person.setLastName(lastName);
    }
    if (headerInstitutionalIdentifier != null) {
      String identifier=getSingleAttribute(request,headerInstitutionalIdentifier);
      if (!isEmpty(identifier))       person.setInstitutionalIdentifier(identifier);
    }
    if (headerMiddleName != null) {
      String middleName=getSingleAttribute(request,headerMiddleName);
      if (!isEmpty(middleName) && person.getMiddleName() == null)       person.setMiddleName(middleName);
    }
    if (headerBirthYear != null) {
      String birthYearString=getSingleAttribute(request,headerBirthYear);
      if (!isEmpty(birthYearString) && person.getBirthYear() == null) {
        try {
          Integer birthYear=Integer.valueOf(birthYearString);
          person.setBirthYear(birthYear);
        }
 catch (        NumberFormatException nfe) {
          Logger.warn(""String_Node_Str"" + headerBirthYear + ""String_Node_Str""+ birthYearString+ ""String_Node_Str"");
        }
      }
    }
    if (headerAffiliations != null) {
      List<String> affiliations=getAttributes(request,headerAffiliations);
      if (affiliations != null && affiliations.size() > 0) {
        person.getAffiliations().clear();
        if (affiliations != null)         person.getAffiliations().addAll(affiliations);
      }
    }
    if (headerCurrentPhoneNumber != null) {
      String currentPhoneNumber=getSingleAttribute(request,headerCurrentPhoneNumber);
      if (!isEmpty(currentPhoneNumber) && person.getCurrentPhoneNumber() == null)       person.setCurrentPhoneNumber(currentPhoneNumber);
    }
    if (headerCurrentPostalAddress != null) {
      String currentPostalAddress=getSingleAttribute(request,headerCurrentPostalAddress);
      if (!isEmpty(currentPostalAddress) && person.getCurrentPostalAddress() == null)       person.setCurrentPostalAddress(currentPostalAddress);
    }
    if (headerCurrentEmailAddress != null) {
      String currentEmailAddress=getSingleAttribute(request,headerCurrentEmailAddress);
      if (!isEmpty(currentEmailAddress) && person.getCurrentEmailAddress() == null)       person.setCurrentEmailAddress(currentEmailAddress);
    }
    if (headerPermanentPhoneNumber != null) {
      String permanentPhoneNumber=getSingleAttribute(request,headerPermanentPhoneNumber);
      if (!isEmpty(permanentPhoneNumber) && person.getPermanentPhoneNumber() == null)       person.setPermanentPhoneNumber(permanentPhoneNumber);
    }
    if (headerPermanentPostalAddress != null) {
      String permanentPostalAddress=getSingleAttribute(request,headerPermanentPostalAddress);
      if (!isEmpty(permanentPostalAddress) && person.getPermanentPostalAddress() == null)       person.setPermanentPostalAddress(permanentPostalAddress);
    }
    if (headerPermanentEmailAddress != null) {
      String permanentEmailAddress=getSingleAttribute(request,headerPermanentEmailAddress);
      if (!isEmpty(permanentEmailAddress) && person.getPermanentEmailAddress() == null)       person.setPermanentEmailAddress(permanentEmailAddress);
    }
    if (headerCurrentDegree != null) {
      String currentDegree=getSingleAttribute(request,headerCurrentDegree);
      if (!isEmpty(currentDegree) && person.getCurrentDegree() == null)       person.setCurrentDegree(currentDegree);
    }
    if (headerCurrentDepartment != null) {
      String currentDepartment=getSingleAttribute(request,headerCurrentDepartment);
      if (!isEmpty(currentDepartment) && person.getCurrentDepartment() == null)       person.setCurrentDepartment(currentDepartment);
    }
    if (headerCurrentCollege != null) {
      String currentCollege=getSingleAttribute(request,headerCurrentCollege);
      if (!isEmpty(currentCollege) && person.getCurrentCollege() == null)       person.setCurrentCollege(currentCollege);
    }
    if (headerCurrentMajor != null) {
      String currentMajor=getSingleAttribute(request,headerCurrentMajor);
      if (!isEmpty(currentMajor) && person.getCurrentMajor() == null)       person.setCurrentMajor(currentMajor);
    }
    if (headerCurrentGraduationYear != null) {
      String currentGraduationYearString=getSingleAttribute(request,headerCurrentGraduationYear);
      if (!isEmpty(currentGraduationYearString) && person.getCurrentGraduationYear() == null) {
        try {
          Integer currentGraduationYear=Integer.valueOf(currentGraduationYearString);
          person.setCurrentGraduationYear(currentGraduationYear);
        }
 catch (        NumberFormatException nfe) {
          Logger.warn(""String_Node_Str"" + headerCurrentGraduationYear + ""String_Node_Str""+ currentGraduationYearString+ ""String_Node_Str"");
        }
      }
    }
    if (headerCurrentGraduationMonth != null) {
      String currentGraduationMonthString=getSingleAttribute(request,headerCurrentGraduationMonth);
      if (!isEmpty(currentGraduationMonthString) && person.getCurrentGraduationMonth() == null) {
        try {
          Integer currentGraduationMonth=Integer.valueOf(currentGraduationMonthString);
          person.setCurrentGraduationMonth(currentGraduationMonth);
        }
 catch (        NumberFormatException nfe) {
          Logger.warn(""String_Node_Str"" + headerCurrentGraduationMonth + ""String_Node_Str""+ currentGraduationMonthString+ ""String_Node_Str"");
        }
catch (        IllegalArgumentException iae) {
          Logger.warn(""String_Node_Str"" + headerCurrentGraduationMonth + ""String_Node_Str""+ currentGraduationMonthString+ ""String_Node_Str"");
        }
      }
    }
    if (headerOrcid != null) {
      String orcidString=getSingleAttribute(request,headerOrcid);
      if (!isEmpty(orcidString) && person.getOrcid() == null)       person.setOrcid(orcidString);
    }
    person.save();
  }
  finally {
    context.restoreAuthorization();
  }
  context.login(person);
  return AuthenticationResult.SUCCESSFULL;
}","@Override public AuthenticationResult authenticate(Request request){
  if (Logger.isTraceEnabled() || logShib) {
    String log=""String_Node_Str"";
    if (request != null) {
      for (      String name : request.headers.keySet()) {
        for (        String value : request.headers.get(name).values) {
          log+=""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"";
        }
      }
    }
 else {
      log+=""String_Node_Str"";
    }
    String configuredLogLevel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
    if (!Logger.isTraceEnabled() && !Logger.configuredManually && !configuredLogLevel.isEmpty()) {
      Logger.setUp(""String_Node_Str"");
    }
 else {
      configuredLogLevel=""String_Node_Str"";
    }
    if (Logger.isTraceEnabled()) {
      Logger.trace(log);
    }
    if (!configuredLogLevel.isEmpty()) {
      Logger.setUp(configuredLogLevel);
    }
  }
  String netid=getSingleAttribute(request,headerNetId);
  String email=getSingleAttribute(request,headerEmail);
  String firstName=getSingleAttribute(request,headerFirstName);
  String lastName=getSingleAttribute(request,headerLastName);
  if (useNetIdAsIdentifier && netid == null) {
    Logger.error(""String_Node_Str"",headerNetId);
    return AuthenticationResult.MISSING_CREDENTIALS;
  }
  if (email == null) {
    Logger.error(""String_Node_Str"",headerEmail);
    return AuthenticationResult.MISSING_CREDENTIALS;
  }
  if (firstName == null && lastName == null) {
    Logger.error(""String_Node_Str"",headerFirstName,headerLastName);
    return AuthenticationResult.MISSING_CREDENTIALS;
  }
  Person person;
  try {
    context.turnOffAuthorization();
    if (useNetIdAsIdentifier) {
      person=personRepo.findPersonByNetId(netid);
    }
 else {
      person=personRepo.findPersonByEmail(email);
    }
    if (person == null) {
      try {
        person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.STUDENT).save();
      }
 catch (      RuntimeException re) {
        Logger.error(re,""String_Node_Str"");
        return AuthenticationResult.BAD_CREDENTIALS;
      }
    }
 else {
      if (netid != null)       person.setNetId(netid);
      person.setEmail(email);
      person.setFirstName(firstName);
      person.setLastName(lastName);
    }
    if (headerInstitutionalIdentifier != null) {
      String identifier=getSingleAttribute(request,headerInstitutionalIdentifier);
      if (!isEmpty(identifier))       person.setInstitutionalIdentifier(identifier);
    }
    if (headerMiddleName != null) {
      String middleName=getSingleAttribute(request,headerMiddleName);
      if (!isEmpty(middleName) && person.getMiddleName() == null)       person.setMiddleName(middleName);
    }
    if (headerBirthYear != null) {
      String birthYearString=getSingleAttribute(request,headerBirthYear);
      if (!isEmpty(birthYearString) && person.getBirthYear() == null) {
        try {
          Integer birthYear=Integer.valueOf(birthYearString);
          person.setBirthYear(birthYear);
        }
 catch (        NumberFormatException nfe) {
          Logger.warn(""String_Node_Str"" + headerBirthYear + ""String_Node_Str""+ birthYearString+ ""String_Node_Str"");
        }
      }
    }
    if (headerAffiliations != null) {
      List<String> affiliations=getAttributes(request,headerAffiliations);
      if (affiliations != null && affiliations.size() > 0) {
        person.getAffiliations().clear();
        if (affiliations != null)         person.getAffiliations().addAll(affiliations);
      }
    }
    if (headerCurrentPhoneNumber != null) {
      String currentPhoneNumber=getSingleAttribute(request,headerCurrentPhoneNumber);
      if (!isEmpty(currentPhoneNumber) && person.getCurrentPhoneNumber() == null)       person.setCurrentPhoneNumber(currentPhoneNumber);
    }
    if (headerCurrentPostalAddress != null) {
      String currentPostalAddress=getSingleAttribute(request,headerCurrentPostalAddress);
      if (!isEmpty(currentPostalAddress) && person.getCurrentPostalAddress() == null)       person.setCurrentPostalAddress(currentPostalAddress);
    }
    if (headerCurrentEmailAddress != null) {
      String currentEmailAddress=getSingleAttribute(request,headerCurrentEmailAddress);
      if (!isEmpty(currentEmailAddress) && person.getCurrentEmailAddress() == null)       person.setCurrentEmailAddress(currentEmailAddress);
    }
    if (headerPermanentPhoneNumber != null) {
      String permanentPhoneNumber=getSingleAttribute(request,headerPermanentPhoneNumber);
      if (!isEmpty(permanentPhoneNumber) && person.getPermanentPhoneNumber() == null)       person.setPermanentPhoneNumber(permanentPhoneNumber);
    }
    if (headerPermanentPostalAddress != null) {
      String permanentPostalAddress=getSingleAttribute(request,headerPermanentPostalAddress);
      if (!isEmpty(permanentPostalAddress) && person.getPermanentPostalAddress() == null)       person.setPermanentPostalAddress(permanentPostalAddress);
    }
    if (headerPermanentEmailAddress != null) {
      String permanentEmailAddress=getSingleAttribute(request,headerPermanentEmailAddress);
      if (!isEmpty(permanentEmailAddress) && person.getPermanentEmailAddress() == null)       person.setPermanentEmailAddress(permanentEmailAddress);
    }
    if (headerCurrentDegree != null) {
      String currentDegree=getSingleAttribute(request,headerCurrentDegree);
      if (!isEmpty(currentDegree) && person.getCurrentDegree() == null)       person.setCurrentDegree(currentDegree);
    }
    if (headerCurrentDepartment != null) {
      String currentDepartment=getSingleAttribute(request,headerCurrentDepartment);
      if (!isEmpty(currentDepartment) && person.getCurrentDepartment() == null)       person.setCurrentDepartment(currentDepartment);
    }
    if (headerCurrentCollege != null) {
      String currentCollege=getSingleAttribute(request,headerCurrentCollege);
      if (!isEmpty(currentCollege) && person.getCurrentCollege() == null)       person.setCurrentCollege(currentCollege);
    }
    if (headerCurrentMajor != null) {
      String currentMajor=getSingleAttribute(request,headerCurrentMajor);
      if (!isEmpty(currentMajor) && person.getCurrentMajor() == null)       person.setCurrentMajor(currentMajor);
    }
    if (headerCurrentGraduationYear != null) {
      String currentGraduationYearString=getSingleAttribute(request,headerCurrentGraduationYear);
      if (!isEmpty(currentGraduationYearString) && person.getCurrentGraduationYear() == null) {
        try {
          Integer currentGraduationYear=Integer.valueOf(currentGraduationYearString);
          person.setCurrentGraduationYear(currentGraduationYear);
        }
 catch (        NumberFormatException nfe) {
          Logger.warn(""String_Node_Str"" + headerCurrentGraduationYear + ""String_Node_Str""+ currentGraduationYearString+ ""String_Node_Str"");
        }
      }
    }
    if (headerCurrentGraduationMonth != null) {
      String currentGraduationMonthString=getSingleAttribute(request,headerCurrentGraduationMonth);
      if (!isEmpty(currentGraduationMonthString) && person.getCurrentGraduationMonth() == null) {
        try {
          Integer currentGraduationMonth=Integer.valueOf(currentGraduationMonthString);
          person.setCurrentGraduationMonth(currentGraduationMonth);
        }
 catch (        NumberFormatException nfe) {
          Logger.warn(""String_Node_Str"" + headerCurrentGraduationMonth + ""String_Node_Str""+ currentGraduationMonthString+ ""String_Node_Str"");
        }
catch (        IllegalArgumentException iae) {
          Logger.warn(""String_Node_Str"" + headerCurrentGraduationMonth + ""String_Node_Str""+ currentGraduationMonthString+ ""String_Node_Str"");
        }
      }
    }
    if (headerOrcid != null) {
      String orcidString=getSingleAttribute(request,headerOrcid);
      if (!isEmpty(orcidString) && person.getOrcid() == null)       person.setOrcid(orcidString);
    }
    person.save();
  }
  finally {
    context.restoreAuthorization();
  }
  context.login(person);
  return AuthenticationResult.SUCCESSFULL;
}",0.9930741873089162
189383,"/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (params.get(""String_Node_Str"") != null) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     submission.setState(stateManager.getState(""String_Node_Str""));
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    email.addTo(submission.getSubmitter());
    if (params.get(""String_Node_Str"") != null && submission.getCommitteeContactEmail() != null) {
      email.addCc(submission.getCommitteeContactEmail());
    }
    email.setFrom(context.getPerson());
    email.setReplyTo(context.getPerson());
    if (params.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,false);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      submission.save();
      log.save();
    }
  }
}","/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (params.get(""String_Node_Str"") != null) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null) {
      submission.setState(stateManager.getState(""String_Node_Str""));
      submission.save();
    }
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    email.addTo(submission.getSubmitter());
    if (params.get(""String_Node_Str"") != null && submission.getCommitteeContactEmail() != null)     email.addCc(submission.getCommitteeContactEmail());
    email.setFrom(context.getPerson());
    email.setReplyTo(context.getPerson());
    if (params.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,false);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      log.save();
    }
  }
}",0.9794149512459372
189384,"/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      email.addTo(sub.getSubmitter());
      email.setFrom(context.getPerson());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     sub.setState(stateManager.getState(""String_Node_Str""));
    sub.save();
  }
  if (email != null)   emailService.sendEmail(email,false);
}","/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
 else {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      email.addTo(sub.getSubmitter());
      email.setFrom(context.getPerson());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     sub.setState(stateManager.getState(""String_Node_Str""));
    sub.save();
    if (email != null)     emailService.sendEmail(email,false);
  }
}",0.975434391851408
189385,"@Override public long[] submissionSearch(SearchFilter filter,SearchOrder orderBy,SearchDirection direction){
  try {
    IndexReader reader=IndexReader.open(indexer.index);
    try {
      IndexSearcher searcher=new IndexSearcher(reader);
      BooleanQuery andQuery=new BooleanQuery();
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
      buildQuery(andQuery,filter,true);
      boolean reverse=(direction == SearchDirection.ASCENDING) ? false : true;
      SortField dynamicSortField=new SortField(SORT_SUB_FIELDS[orderBy.ordinal()],SORT_TYPES[orderBy.ordinal()],reverse);
      SortField idSortField=new SortField(""String_Node_Str"",SortField.LONG,reverse);
      Sort sort=new Sort(dynamicSortField,idSortField);
      Logger.debug(""String_Node_Str"" + andQuery.toString());
      TopDocs topDocs=searcher.search(andQuery,Integer.MAX_VALUE,sort);
      long[] sortedIds=new long[topDocs.scoreDocs.length];
      for (int i=0; i < topDocs.scoreDocs.length; i++) {
        Document doc=searcher.doc(topDocs.scoreDocs[i].doc);
        sortedIds[i]=Long.valueOf(doc.get(""String_Node_Str"")).longValue();
      }
      return sortedIds;
    }
  finally {
      reader.close();
    }
  }
 catch (  IOException ioe) {
    Logger.error(ioe,""String_Node_Str"");
  }
  return null;
}","@Override public long[] submissionSearch(SearchFilter filter,SearchOrder orderBy,SearchDirection direction){
  try {
    IndexReader reader=IndexReader.open(indexer.index);
    try {
      IndexSearcher searcher=new IndexSearcher(reader);
      BooleanQuery andQuery=new BooleanQuery();
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
      buildQuery(andQuery,filter,true);
      boolean reverse=(direction == SearchDirection.ASCENDING) ? false : true;
      SortField dynamicSortField=new SortField(SORT_SUB_FIELDS[orderBy.ordinal()],SORT_TYPES[orderBy.ordinal()],reverse);
      SortField idSortField=new SortField(""String_Node_Str"",SortField.LONG,reverse);
      Sort sort=new Sort(dynamicSortField,idSortField);
      Logger.debug(""String_Node_Str"" + andQuery.toString());
      TopDocs topDocs=searcher.search(andQuery,Integer.MAX_VALUE,sort);
      long[] sortedIds=new long[topDocs.scoreDocs.length];
      for (int i=0; i < topDocs.scoreDocs.length; i++) {
        Document doc=searcher.doc(topDocs.scoreDocs[i].doc);
        sortedIds[i]=Long.valueOf(doc.get(""String_Node_Str"")).longValue();
      }
      searcher.close();
      return sortedIds;
    }
  finally {
      reader.close();
    }
  }
 catch (  IOException ioe) {
    Logger.error(ioe,""String_Node_Str"");
  }
  return null;
}",0.990984222389181
189386,"@Override public long[] actionLogSearch(SearchFilter filter,SearchOrder orderBy,SearchDirection direction){
  try {
    IndexReader reader=IndexReader.open(indexer.index);
    try {
      IndexSearcher searcher=new IndexSearcher(reader);
      BooleanQuery andQuery=new BooleanQuery();
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
      buildQuery(andQuery,filter,true);
      boolean reverse=(direction == SearchDirection.ASCENDING) ? false : true;
      SortField dynamicSortField=new SortField(SORT_SUB_FIELDS[orderBy.ordinal()],SORT_TYPES[orderBy.ordinal()],reverse);
      SortField idSortField=new SortField(""String_Node_Str"",SortField.LONG,reverse);
      Sort sort=new Sort(dynamicSortField,idSortField);
      Logger.debug(""String_Node_Str"" + andQuery.toString());
      TopDocs topDocs=searcher.search(andQuery,Integer.MAX_VALUE,sort);
      long[] sortedIds=new long[topDocs.scoreDocs.length];
      for (int i=0; i < topDocs.scoreDocs.length; i++) {
        Document doc=searcher.doc(topDocs.scoreDocs[i].doc);
        sortedIds[i]=Long.valueOf(doc.get(""String_Node_Str"")).longValue();
      }
      return sortedIds;
    }
  finally {
      reader.close();
    }
  }
 catch (  IOException ioe) {
    Logger.error(ioe,""String_Node_Str"");
  }
  return null;
}","@Override public long[] actionLogSearch(SearchFilter filter,SearchOrder orderBy,SearchDirection direction){
  try {
    IndexReader reader=IndexReader.open(indexer.index);
    try {
      IndexSearcher searcher=new IndexSearcher(reader);
      BooleanQuery andQuery=new BooleanQuery();
      andQuery.add(new TermQuery(new Term(""String_Node_Str"",""String_Node_Str"")),Occur.MUST);
      buildQuery(andQuery,filter,true);
      boolean reverse=(direction == SearchDirection.ASCENDING) ? false : true;
      SortField dynamicSortField=new SortField(SORT_SUB_FIELDS[orderBy.ordinal()],SORT_TYPES[orderBy.ordinal()],reverse);
      SortField idSortField=new SortField(""String_Node_Str"",SortField.LONG,reverse);
      Sort sort=new Sort(dynamicSortField,idSortField);
      Logger.debug(""String_Node_Str"" + andQuery.toString());
      TopDocs topDocs=searcher.search(andQuery,Integer.MAX_VALUE,sort);
      long[] sortedIds=new long[topDocs.scoreDocs.length];
      for (int i=0; i < topDocs.scoreDocs.length; i++) {
        Document doc=searcher.doc(topDocs.scoreDocs[i].doc);
        sortedIds[i]=Long.valueOf(doc.get(""String_Node_Str"")).longValue();
      }
      searcher.close();
      return sortedIds;
    }
  finally {
      reader.close();
    }
  }
 catch (  IOException ioe) {
    Logger.error(ioe,""String_Node_Str"");
  }
  return null;
}",0.9909774436090224
189387,"/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (params.get(""String_Node_Str"") != null) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     submission.setState(stateManager.getState(""String_Node_Str""));
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    email.addTo(submission.getSubmitter());
    if (params.get(""String_Node_Str"") != null && submission.getCommitteeContactEmail() != null) {
      email.addCc(submission.getCommitteeContactEmail());
    }
    email.setFrom(context.getPerson());
    email.setReplyTo(context.getPerson());
    if (params.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,false);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      submission.save();
      log.save();
    }
  }
}","/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (params.get(""String_Node_Str"") != null) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null) {
      submission.setState(stateManager.getState(""String_Node_Str""));
      submission.save();
    }
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    email.addTo(submission.getSubmitter());
    if (params.get(""String_Node_Str"") != null && submission.getCommitteeContactEmail() != null)     email.addCc(submission.getCommitteeContactEmail());
    email.setFrom(context.getPerson());
    email.setReplyTo(context.getPerson());
    if (params.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,false);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      log.save();
    }
  }
}",0.9794149512459372
189388,"/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      email.addTo(sub.getSubmitter());
      email.setFrom(context.getPerson());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     sub.setState(stateManager.getState(""String_Node_Str""));
    sub.save();
  }
  if (email != null)   emailService.sendEmail(email,false);
}","/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
 else {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      email.addTo(sub.getSubmitter());
      email.setFrom(context.getPerson());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     sub.setState(stateManager.getState(""String_Node_Str""));
    sub.save();
    if (email != null)     emailService.sendEmail(email,false);
  }
}",0.975434391851408
189389,"/** 
 * Modiy the state of this search filter so that it copies the exact state of the other filter. The other filter will not be modified. Note, the current state of this filter will be completely lost.
 * @param otherFilter The filter to copy from.
 */
public void copyFrom(SearchFilter otherFilter);","/** 
 * Modify the state of this search filter so that it copies the exact state of the other filter. The other filter will not be modified. Note, the current state of this filter will be completely lost.
 * @param otherFilter The filter to copy from.
 */
public void copyFrom(SearchFilter otherFilter);",0.9983471074380166
189390,"@Override public void copyTo(SearchFilter other){
  other.getIncludedSubmissions().clear();
  other.getIncludedSubmissions().addAll(this.includedSubmissions);
  other.getExcludedSubmissions().clear();
  other.getExcludedSubmissions().addAll(this.excludedSubmissions);
  other.getIncludedActionLogs().clear();
  other.getIncludedActionLogs().addAll(this.includedActionLogs);
  other.getExcludedActionLogs().clear();
  other.getExcludedActionLogs().addAll(this.excludedActionLogs);
  other.getSearchText().clear();
  other.getSearchText().addAll(this.searchText);
  other.getStates().clear();
  other.getStates().addAll(this.states);
  other.getAssignees().clear();
  other.getAssignees().addAll(this.assignees);
  other.getEmbargoTypes().clear();
  other.getEmbargoTypes().addAll(this.embargos);
  other.getGraduationSemesters().clear();
  other.getGraduationSemesters().addAll(this.semesters);
  other.getDegrees().clear();
  other.getDegrees().addAll(this.degrees);
  other.getDepartments().clear();
  other.getDepartments().addAll(this.departments);
  other.getColleges().clear();
  other.getColleges().addAll(this.colleges);
  other.getPrograms().clear();
  other.getPrograms().addAll(this.programs);
  other.getMajors().clear();
  other.getMajors().addAll(this.majors);
  other.getDocumentTypes().clear();
  other.getDocumentTypes().addAll(this.documentTypes);
  other.setUMIRelease(this.umiRelease);
  other.setDateRangeStart(this.rangeStart);
  other.setDateRangeEnd(this.rangeEnd);
}","@Override public void copyTo(SearchFilter other){
  other.getIncludedSubmissions().clear();
  other.getIncludedSubmissions().addAll(this.includedSubmissions);
  other.getExcludedSubmissions().clear();
  other.getExcludedSubmissions().addAll(this.excludedSubmissions);
  other.getIncludedActionLogs().clear();
  other.getIncludedActionLogs().addAll(this.includedActionLogs);
  other.getExcludedActionLogs().clear();
  other.getExcludedActionLogs().addAll(this.excludedActionLogs);
  other.getSearchText().clear();
  other.getSearchText().addAll(this.searchText);
  other.getStates().clear();
  other.getStates().addAll(this.states);
  other.getAssignees().clear();
  for (  Person assignee : this.assignees) {
    other.addAssignee(assignee);
  }
  other.getEmbargoTypes().clear();
  other.getEmbargoTypes().addAll(this.embargos);
  other.getGraduationSemesters().clear();
  other.getGraduationSemesters().addAll(this.semesters);
  other.getDegrees().clear();
  other.getDegrees().addAll(this.degrees);
  other.getDepartments().clear();
  other.getDepartments().addAll(this.departments);
  other.getColleges().clear();
  other.getColleges().addAll(this.colleges);
  other.getPrograms().clear();
  other.getPrograms().addAll(this.programs);
  other.getMajors().clear();
  other.getMajors().addAll(this.majors);
  other.getDocumentTypes().clear();
  other.getDocumentTypes().addAll(this.documentTypes);
  other.setUMIRelease(this.umiRelease);
  other.setDateRangeStart(this.rangeStart);
  other.setDateRangeEnd(this.rangeEnd);
}",0.9592039800995024
189391,"/** 
 * Download a back export. This may take a considerable amount of time, so we use play's asynchronous features to suspend the current thread until the next chunk of data is ready to be published.
 * @param packager The packager to use for the export.
 */
@Security(RoleType.REVIEWER) public static void batchExport(String packager){
  ActiveSearchFilter filter=Spring.getBeanOfType(ActiveSearchFilter.class);
  Cookie filterCookie=request.cookies.get(NAMES[SUBMISSION][ACTIVE_FILTER]);
  if (filterCookie != null && filterCookie.value != null && filterCookie.value.trim().length() > 0) {
    try {
      filter.decode(filterCookie.value);
    }
 catch (    RuntimeException re) {
      Logger.warn(re,""String_Node_Str"" + filterCookie.value);
    }
  }
  Packager exportPackage=(Packager)Spring.getBean(packager);
  Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),exportPackage == null ? ""String_Node_Str"" : exportPackage.getBeanName(),filter == null ? ""String_Node_Str"" : filter.encode());
  ChunkStream stream=exportService.export(exportPackage,filter);
  response.contentType=stream.getContentType();
  response.setHeader(""String_Node_Str"",stream.getContentDisposition());
  while (stream.hasNextChunk()) {
    Promise<byte[]> nextChunk=stream.nextChunk();
    byte[] chunk=await(nextChunk);
    response.writeChunk(chunk);
  }
}","/** 
 * Download a back export. This may take a considerable amount of time, so we use play's asynchronous features to suspend the current thread until the next chunk of data is ready to be published.
 * @param packager The packager to use for the export.
 */
@Security(RoleType.REVIEWER) public static void batchExport(String packager){
  ActiveSearchFilter filter=Spring.getBeanOfType(ActiveSearchFilter.class);
  Cookie filterCookie=request.cookies.get(NAMES[SUBMISSION][ACTIVE_FILTER]);
  if (filterCookie != null && filterCookie.value != null && filterCookie.value.trim().length() > 0) {
    try {
      filter.decode(filterCookie.value);
    }
 catch (    RuntimeException re) {
      Logger.warn(re,""String_Node_Str"" + filterCookie.value);
    }
  }
  Packager exportPackage=(Packager)Spring.getBean(packager);
  Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail(),exportPackage == null ? ""String_Node_Str"" : exportPackage.getBeanName(),filter == null ? ""String_Node_Str"" : filter.encode());
  ChunkStream stream=exportService.export(exportPackage,filter);
  response.contentType=stream.getContentType();
  response.setHeader(""String_Node_Str"",stream.getContentDisposition());
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  while (stream.hasNextChunk()) {
    Promise<byte[]> nextChunk=stream.nextChunk();
    byte[] chunk=await(nextChunk);
    response.writeChunk(chunk);
  }
}",0.9605614973262032
189392,"/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (params.get(""String_Node_Str"") != null) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     submission.setState(stateManager.getState(""String_Node_Str""));
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    email.addTo(submission.getSubmitter());
    if (params.get(""String_Node_Str"") != null && submission.getCommitteeContactEmail() != null) {
      email.addCc(submission.getCommitteeContactEmail());
    }
    email.setReplyTo(context.getPerson());
    if (params.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,false);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      submission.save();
      log.save();
    }
  }
}","/** 
 * A method to add an Action Log Comment and send an email if requested.
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addActionLogComment(Submission submission){
  String subject=params.get(""String_Node_Str"");
  String message=params.get(""String_Node_Str"");
  if (params.get(""String_Node_Str"") != null) {
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (message == null || message.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     submission.setState(stateManager.getState(""String_Node_Str""));
    VireoEmail email=emailService.createEmail();
    email.addParameters(submission);
    email.setSubject(subject);
    email.setMessage(message);
    email.applyParameterSubstitution();
    email.addTo(submission.getSubmitter());
    if (params.get(""String_Node_Str"") != null && submission.getCommitteeContactEmail() != null) {
      email.addCc(submission.getCommitteeContactEmail());
    }
    email.setFrom(context.getPerson());
    email.setReplyTo(context.getPerson());
    if (params.get(""String_Node_Str"") != null && ""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
      email.setLogOnCompletion(context.getPerson(),submission);
      emailService.sendEmail(email,false);
    }
 else {
      subject=email.getSubject();
      message=email.getMessage();
      String entry;
      if (subject != null && subject.trim().length() > 0)       entry=subject + ""String_Node_Str"" + message;
 else       entry=message;
      ActionLog log=submission.logAction(entry);
      if (""String_Node_Str"".equals(params.get(""String_Node_Str"")))       log.setPrivate(true);
      submission.save();
      log.save();
    }
  }
}",0.9890470974808324
189393,"/** 
 * A method to send the Advisor Approval Email
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) public static void sendAdvisorEmail(Long id){
  Submission submission=subRepo.findSubmission(id);
  String advisorEmail=submission.getCommitteeContactEmail();
  EmailTemplate template=settingRepo.findEmailTemplateByName(""String_Node_Str"");
  VireoEmail email=emailService.createEmail();
  email.getTo().clear();
  email.getCc().clear();
  email.getBcc().clear();
  email.addTo(advisorEmail);
  email.setTemplate(template);
  email.addParameters(submission);
  email.addParameter(""String_Node_Str"",getAdvisorURL(submission));
  email.setLogOnCompletion(context.getPerson(),submission);
  email.setSuccessLogMessage(""String_Node_Str"" + advisorEmail);
  email.setFailureLogMessage(""String_Node_Str"" + advisorEmail);
  emailService.sendEmail(email,false);
  view();
}","/** 
 * A method to send the Advisor Approval Email
 * @param id (The submission id)
 */
@Security(RoleType.REVIEWER) public static void sendAdvisorEmail(Long id){
  Submission submission=subRepo.findSubmission(id);
  String advisorEmail=submission.getCommitteeContactEmail();
  EmailTemplate template=settingRepo.findEmailTemplateByName(""String_Node_Str"");
  VireoEmail email=emailService.createEmail();
  email.getTo().clear();
  email.getCc().clear();
  email.getBcc().clear();
  email.addTo(advisorEmail);
  email.setFrom(context.getPerson());
  email.setReplyTo(context.getPerson());
  email.setTemplate(template);
  email.addParameters(submission);
  email.addParameter(""String_Node_Str"",getAdvisorURL(submission));
  email.setLogOnCompletion(context.getPerson(),submission);
  email.setSuccessLogMessage(""String_Node_Str"" + advisorEmail);
  email.setFailureLogMessage(""String_Node_Str"" + advisorEmail);
  emailService.sendEmail(email,false);
  view();
}",0.9570885388375884
189394,"/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
  if (params.get(""String_Node_Str"") != null) {
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      VireoEmail email=emailService.createEmail();
      email.addParameters(sub);
      email.addTo(sub.getSubmitter());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
      emailService.sendEmail(email,false);
    }
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     sub.setState(stateManager.getState(""String_Node_Str""));
    sub.save();
  }
}","/** 
 * The method to add a file to the submission being viewed. This checks the type of file being uploaded (note, primary, supplement) and calls the appropriate private method.
 * @param subId (The submission id)
 */
@Security(RoleType.REVIEWER) private static void addFile(Submission sub){
  String uploadType=params.get(""String_Node_Str"");
  if (""String_Node_Str"".equals(uploadType)) {
    uploadPrimary(sub);
  }
 else   if (""String_Node_Str"".equals(uploadType)) {
    uploadAdditional(sub);
  }
  VireoEmail email=null;
  if (params.get(""String_Node_Str"") != null) {
    String subject=params.get(""String_Node_Str"");
    String comment=params.get(""String_Node_Str"");
    if (subject == null || subject.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (comment == null || comment.isEmpty())     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!validation.hasErrors()) {
      email=emailService.createEmail();
      email.addParameters(sub);
      email.addTo(sub.getSubmitter());
      email.setFrom(context.getPerson());
      email.setReplyTo(context.getPerson());
      if (params.get(""String_Node_Str"") != null && sub.getCommitteeContactEmail() != null) {
        email.addCc(sub.getCommitteeContactEmail());
      }
      email.setSubject(subject);
      email.setMessage(comment);
      email.setLogOnCompletion(context.getPerson(),sub);
    }
  }
  if (!validation.hasErrors()) {
    if (params.get(""String_Node_Str"") != null)     sub.setState(stateManager.getState(""String_Node_Str""));
    sub.save();
  }
  if (email != null)   emailService.sendEmail(email,false);
}",0.8478192657671791
189395,"@Override public void addDocumentSubject(String subject){
  documentSubjects.add(subject);
}","@Override public void addDocumentSubject(String subject){
  documentSubjects.add(subject);
  documentSubjectsChanged=true;
}",0.8518518518518519
189396,"@Override public JpaSubmissionImpl save(){
  assertReviewerOrOwner(submitter);
  if (pendingLogs.size() > 0) {
    lastActionLogEntry=pendingLogs.get(pendingLogs.size() - 1).getEntry();
    lastActionLogDate=pendingLogs.get(pendingLogs.size() - 1).getActionDate();
  }
  super.save();
  for (  ActionLog log : pendingLogs) {
    log.save();
  }
  pendingLogs.clear();
  return this;
}","@Override public JpaSubmissionImpl save(){
  assertReviewerOrOwner(submitter);
  if (documentSubjectsChanged) {
    String entry=""String_Node_Str"";
    if (documentSubjects.size() == 0)     entry=""String_Node_Str"";
 else {
      for (      String subject : documentSubjects) {
        if (entry.length() != 0)         entry+=""String_Node_Str"";
        entry+=""String_Node_Str"" + subject + ""String_Node_Str"";
      }
      entry=""String_Node_Str"" + entry;
    }
    generateLog(entry,false);
    documentSubjectsChanged=false;
  }
  if (pendingLogs.size() > 0) {
    lastActionLogEntry=pendingLogs.get(pendingLogs.size() - 1).getEntry();
    lastActionLogDate=pendingLogs.get(pendingLogs.size() - 1).getActionDate();
  }
  super.save();
  for (  ActionLog log : pendingLogs) {
    log.save();
  }
  pendingLogs.clear();
  return this;
}",0.6136177194421657
189397,"@Override public void removeDocumentSubject(String subject){
  documentSubjects.remove(subject);
}","@Override public void removeDocumentSubject(String subject){
  documentSubjects.remove(subject);
  documentSubjectsChanged=true;
}",0.8596491228070176
189398,"/** 
 * Test that action logs are generated appropriately.
 * @throws InterruptedException 
 */
@Test public void testActionLogGeneration() throws InterruptedException {
  Submission sub=subRepo.createSubmission(person).save();
  sub.setCommitteeContactEmail(""String_Node_Str"");
  Date now=new Date();
  State initialState=stateManager.getInitialState();
  State nextState=initialState.getTransitions(sub).get(0);
  sub.setState(nextState);
  sub.save();
  sub.setStudentFirstName(""String_Node_Str"");
  sub.setStudentLastName(""String_Node_Str"");
  sub.setStudentMiddleName(""String_Node_Str"");
  sub.setStudentBirthYear(2002);
  sub.setDocumentTitle(""String_Node_Str"");
  sub.setDocumentAbstract(""String_Node_Str"");
  sub.setDocumentKeywords(""String_Node_Str"");
  sub.setDocumentLanguage(""String_Node_Str"");
  sub.setPublishedMaterial(""String_Node_Str"");
  sub.setCommitteeContactEmail(""String_Node_Str"");
  sub.setCommitteeEmailHash(""String_Node_Str"");
  sub.setCommitteeApprovalDate(now);
  sub.setCommitteeEmbargoApprovalDate(now);
  sub.setSubmissionDate(now);
  sub.setApprovalDate(now);
  sub.setLicenseAgreementDate(now);
  sub.setDegree(""String_Node_Str"");
  sub.setDegreeLevel(DegreeLevel.UNDERGRADUATE);
  sub.setDepartment(""String_Node_Str"");
  sub.setProgram(""String_Node_Str"");
  sub.setCollege(""String_Node_Str"");
  sub.setMajor(""String_Node_Str"");
  sub.setDocumentType(""String_Node_Str"");
  sub.setGraduationMonth(0);
  sub.setGraduationYear(2002);
  sub.setUMIRelease(false);
  sub.setDepositId(""String_Node_Str"");
  sub.setReviewerNotes(""String_Node_Str"");
  sub.setDocumentTitle(null);
  sub.setDocumentAbstract(null);
  sub.setDocumentKeywords(null);
  sub.setDocumentLanguage(null);
  sub.setPublishedMaterial(null);
  sub.setCommitteeContactEmail(null);
  sub.setCommitteeEmailHash(null);
  sub.setCommitteeApprovalDate(null);
  sub.setCommitteeEmbargoApprovalDate(null);
  sub.setSubmissionDate(null);
  sub.setApprovalDate(null);
  sub.setLicenseAgreementDate(null);
  sub.setDegree(null);
  sub.setDegreeLevel(null);
  sub.setDepartment(null);
  sub.setProgram(null);
  sub.setCollege(null);
  sub.setMajor(null);
  sub.setDocumentType(null);
  sub.setGraduationMonth(null);
  sub.setGraduationYear(null);
  sub.setUMIRelease(null);
  sub.setDepositId(null);
  sub.setReviewerNotes(null);
  sub.save();
  List<ActionLog> logs=subRepo.findActionLog(sub);
  Iterator<ActionLog> logItr=logs.iterator();
  sub.delete();
  DateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String formattedDate=format.format(now);
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"" + formattedDate,logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertFalse(logItr.hasNext());
  assertEquals(""String_Node_Str"",sub.getLastLogEntry());
}","/** 
 * Test that action logs are generated appropriately.
 * @throws InterruptedException 
 */
@Test public void testActionLogGeneration() throws InterruptedException {
  Submission sub=subRepo.createSubmission(person).save();
  sub.setCommitteeContactEmail(""String_Node_Str"");
  Date now=new Date();
  State initialState=stateManager.getInitialState();
  State nextState=initialState.getTransitions(sub).get(0);
  sub.setState(nextState);
  sub.save();
  sub.setStudentFirstName(""String_Node_Str"");
  sub.setStudentLastName(""String_Node_Str"");
  sub.setStudentMiddleName(""String_Node_Str"");
  sub.setStudentBirthYear(2002);
  sub.setDocumentTitle(""String_Node_Str"");
  sub.setDocumentAbstract(""String_Node_Str"");
  sub.setDocumentKeywords(""String_Node_Str"");
  sub.setDocumentLanguage(""String_Node_Str"");
  sub.addDocumentSubject(""String_Node_Str"");
  sub.setPublishedMaterial(""String_Node_Str"");
  sub.setCommitteeContactEmail(""String_Node_Str"");
  sub.setCommitteeEmailHash(""String_Node_Str"");
  sub.setCommitteeApprovalDate(now);
  sub.setCommitteeEmbargoApprovalDate(now);
  sub.setSubmissionDate(now);
  sub.setApprovalDate(now);
  sub.setLicenseAgreementDate(now);
  sub.setDegree(""String_Node_Str"");
  sub.setDegreeLevel(DegreeLevel.UNDERGRADUATE);
  sub.setDepartment(""String_Node_Str"");
  sub.setProgram(""String_Node_Str"");
  sub.setCollege(""String_Node_Str"");
  sub.setMajor(""String_Node_Str"");
  sub.setDocumentType(""String_Node_Str"");
  sub.setGraduationMonth(0);
  sub.setGraduationYear(2002);
  sub.setUMIRelease(false);
  sub.setDepositId(""String_Node_Str"");
  sub.setReviewerNotes(""String_Node_Str"");
  sub.save();
  sub.setDocumentTitle(null);
  sub.setDocumentAbstract(null);
  sub.setDocumentKeywords(null);
  sub.setDocumentLanguage(null);
  sub.removeDocumentSubject(""String_Node_Str"");
  sub.setPublishedMaterial(null);
  sub.setCommitteeContactEmail(null);
  sub.setCommitteeEmailHash(null);
  sub.setCommitteeApprovalDate(null);
  sub.setCommitteeEmbargoApprovalDate(null);
  sub.setSubmissionDate(null);
  sub.setApprovalDate(null);
  sub.setLicenseAgreementDate(null);
  sub.setDegree(null);
  sub.setDegreeLevel(null);
  sub.setDepartment(null);
  sub.setProgram(null);
  sub.setCollege(null);
  sub.setMajor(null);
  sub.setDocumentType(null);
  sub.setGraduationMonth(null);
  sub.setGraduationYear(null);
  sub.setUMIRelease(null);
  sub.setDepositId(null);
  sub.setReviewerNotes(null);
  sub.save();
  List<ActionLog> logs=subRepo.findActionLog(sub);
  Iterator<ActionLog> logItr=logs.iterator();
  sub.delete();
  DateFormat format=new SimpleDateFormat(""String_Node_Str"");
  String formattedDate=format.format(now);
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"" + formattedDate,logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertEquals(""String_Node_Str"",logItr.next().getEntry());
  assertFalse(logItr.hasNext());
  assertEquals(""String_Node_Str"",sub.getLastLogEntry());
}",0.9810975102006828
189399,"/** 
 * The third step of the submission form. We handle committee members a bit differently. Basically we always keep a List of Maps for each committee member while we are working with it. So there are several methods to parse the committee members from the current form data, validate the committee members, then save the committee members, and if this is the first time visiting the form there is a method to load committee members. It's complex, but the problem is Difficult.
 * @param subId The id the submission.
 */
@Security(RoleType.STUDENT) public static void documentInfo(Long subId){
  Submission sub=getSubmission();
  String title=params.get(""String_Node_Str"");
  String degreeMonth=params.get(""String_Node_Str"");
  String degreeYear=params.get(""String_Node_Str"");
  Date defenseDate=null;
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  try {
    if (params.get(""String_Node_Str"") != null)     defenseDate=(Date)formatter.parse(params.get(""String_Node_Str""));
  }
 catch (  ParseException e) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  String docType=params.get(""String_Node_Str"");
  String abstractText=params.get(""String_Node_Str"");
  String keywords=params.get(""String_Node_Str"");
  String subjectPrimary=params.get(""String_Node_Str"");
  String subjectSecondary=params.get(""String_Node_Str"");
  String subjectTertiary=params.get(""String_Node_Str"");
  String docLanguage=null;
  if (isFieldRequired(DOCUMENT_LANGUAGE) && settingRepo.findAllLanguages().size() == 1) {
    docLanguage=settingRepo.findAllLanguages().get(0).getName();
  }
 else {
    docLanguage=params.get(""String_Node_Str"");
    if (docLanguage != null && docLanguage.trim().length() == 0)     docLanguage=null;
  }
  Boolean publishedMaterialFlag=params.get(""String_Node_Str"",Boolean.class);
  if (publishedMaterialFlag == null)   publishedMaterialFlag=false;
  String publishedMaterial=params.get(""String_Node_Str"");
  if (!publishedMaterialFlag)   publishedMaterial=null;
  String chairEmail=params.get(""String_Node_Str"");
  String embargo=params.get(""String_Node_Str"");
  String umi=params.get(""String_Node_Str"");
  List<TransientMember> committee=parseCommitteeMembers();
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(DOCUMENT_TITLE))     sub.setDocumentTitle(title);
    if (isFieldEnabled(GRADUATION_DATE)) {
      if (!isEmpty(degreeMonth)) {
        try {
          sub.setGraduationMonth(Integer.parseInt(degreeMonth));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationMonth(null);
      }
      if (!isEmpty(degreeYear)) {
        try {
          sub.setGraduationYear(Integer.parseInt(degreeYear));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationYear(null);
      }
    }
    if (isFieldEnabled(DEFENSE_DATE)) {
      sub.setDefenseDate(defenseDate);
    }
    if (isFieldEnabled(DOCUMENT_TYPE))     sub.setDocumentType(docType);
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     sub.setDocumentAbstract(abstractText);
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     sub.setDocumentKeywords(keywords);
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      sub.getDocumentSubjects().clear();
      if (!isEmpty(subjectPrimary))       sub.addDocumentSubject(subjectPrimary);
      if (!isEmpty(subjectSecondary))       sub.addDocumentSubject(subjectSecondary);
      if (!isEmpty(subjectTertiary))       sub.addDocumentSubject(subjectTertiary);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE))     sub.setDocumentLanguage(docLanguage);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     sub.setCommitteeContactEmail(chairEmail);
    if (isFieldEnabled(PUBLISHED_MATERIAL)) {
      if (publishedMaterialFlag)       sub.setPublishedMaterial(publishedMaterial);
 else       sub.setPublishedMaterial(null);
    }
    if (isFieldEnabled(EMBARGO_TYPE)) {
      try {
        sub.setEmbargoType(settingRepo.findEmbargoType(Long.parseLong(embargo)));
      }
 catch (      RuntimeException re) {
        if (isFieldRequired(EMBARGO_TYPE))         validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (isFieldEnabled(UMI_RELEASE)) {
      if (umi != null && umi.trim().length() > 0)       sub.setUMIRelease(true);
 else       sub.setUMIRelease(false);
    }
    if (isFieldEnabled(COMMITTEE)) {
      try {
        saveCommitteeMembers(sub,committee);
      }
 catch (      RuntimeException re) {
      }
    }
    sub.save();
  }
 else {
    if (isFieldEnabled(DOCUMENT_TITLE))     title=sub.getDocumentTitle();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationMonth() != null)     degreeMonth=sub.getGraduationMonth().toString();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationYear() != null)     degreeYear=sub.getGraduationYear().toString();
    if (isFieldEnabled(DEFENSE_DATE) && sub.getDefenseDate() != null)     defenseDate=sub.getDefenseDate();
    if (isFieldEnabled(DOCUMENT_TYPE))     docType=sub.getDocumentType();
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     abstractText=sub.getDocumentAbstract();
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     keywords=sub.getDocumentKeywords();
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      List<String> subjects=sub.getDocumentSubjects();
      if (subjects.size() > 0)       subjectPrimary=subjects.get(0);
      if (subjects.size() > 1)       subjectSecondary=subjects.get(1);
      if (subjects.size() > 2)       subjectTertiary=subjects.get(2);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE)) {
      docLanguage=sub.getDocumentLanguage();
    }
    if (isFieldEnabled(COMMITTEE))     committee=loadCommitteeMembers(sub);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     chairEmail=sub.getCommitteeContactEmail();
    if (isFieldEnabled(PUBLISHED_MATERIAL))     publishedMaterial=sub.getPublishedMaterial();
    if (isFieldEnabled(EMBARGO_TYPE) && sub.getEmbargoType() != null)     embargo=sub.getEmbargoType().getId().toString();
    if (isFieldEnabled(UMI_RELEASE) && sub.getUMIRelease() != null && sub.getUMIRelease() != false)     umi=""String_Node_Str"";
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    FileUpload.fileUpload(subId);
  }
  List<Integer> degreeYears=getDegreeYears();
  renderArgs.put(""String_Node_Str"",degreeYears);
  List<String> docTypes=getValidDocumentTypes(sub);
  renderArgs.put(""String_Node_Str"",docTypes);
  List<EmbargoType> embargoTypes=settingRepo.findAllActiveEmbargoTypes();
  renderArgs.put(""String_Node_Str"",embargoTypes);
  List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
  renderArgs.put(""String_Node_Str"",subjects);
  List<CommitteeMemberRoleType> availableRoles=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  renderArgs.put(""String_Node_Str"",availableRoles);
  List<Language> languages=settingRepo.findAllLanguages();
  renderArgs.put(""String_Node_Str"",languages);
  int committeeSlots=4;
  if (committee.size() > 3)   committeeSlots=committee.size();
  if (params.get(""String_Node_Str"") != null)   committeeSlots+=4;
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_DOCUMENT_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  if (publishedMaterial != null)   publishedMaterialFlag=true;
  renderTemplate(""String_Node_Str"",subId,stickies,title,degreeMonth,degreeYear,defenseDate,docType,abstractText,keywords,subjectPrimary,subjectSecondary,subjectTertiary,docLanguage,committeeSlots,committee,chairEmail,publishedMaterialFlag,publishedMaterial,embargo,umi);
}","/** 
 * The third step of the submission form. We handle committee members a bit differently. Basically we always keep a List of Maps for each committee member while we are working with it. So there are several methods to parse the committee members from the current form data, validate the committee members, then save the committee members, and if this is the first time visiting the form there is a method to load committee members. It's complex, but the problem is Difficult.
 * @param subId The id the submission.
 */
@Security(RoleType.STUDENT) public static void documentInfo(Long subId){
  Submission sub=getSubmission();
  String title=params.get(""String_Node_Str"");
  String degreeMonth=params.get(""String_Node_Str"");
  String degreeYear=params.get(""String_Node_Str"");
  Date defenseDate=null;
  DateFormat formatter=new SimpleDateFormat(""String_Node_Str"");
  try {
    if (params.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(params.get(""String_Node_Str"").trim()))     defenseDate=(Date)formatter.parse(params.get(""String_Node_Str""));
  }
 catch (  ParseException e) {
    validation.addError(""String_Node_Str"",""String_Node_Str"");
  }
  String docType=params.get(""String_Node_Str"");
  String abstractText=params.get(""String_Node_Str"");
  String keywords=params.get(""String_Node_Str"");
  String subjectPrimary=params.get(""String_Node_Str"");
  String subjectSecondary=params.get(""String_Node_Str"");
  String subjectTertiary=params.get(""String_Node_Str"");
  String docLanguage=null;
  if (isFieldRequired(DOCUMENT_LANGUAGE) && settingRepo.findAllLanguages().size() == 1) {
    docLanguage=settingRepo.findAllLanguages().get(0).getName();
  }
 else {
    docLanguage=params.get(""String_Node_Str"");
    if (docLanguage != null && docLanguage.trim().length() == 0)     docLanguage=null;
  }
  Boolean publishedMaterialFlag=params.get(""String_Node_Str"",Boolean.class);
  if (publishedMaterialFlag == null)   publishedMaterialFlag=false;
  String publishedMaterial=params.get(""String_Node_Str"");
  if (!publishedMaterialFlag)   publishedMaterial=null;
  String chairEmail=params.get(""String_Node_Str"");
  String embargo=params.get(""String_Node_Str"");
  String umi=params.get(""String_Node_Str"");
  List<TransientMember> committee=parseCommitteeMembers();
  if (""String_Node_Str"".equals(params.get(""String_Node_Str""))) {
    if (isFieldEnabled(DOCUMENT_TITLE))     sub.setDocumentTitle(title);
    if (isFieldEnabled(GRADUATION_DATE)) {
      if (!isEmpty(degreeMonth)) {
        try {
          sub.setGraduationMonth(Integer.parseInt(degreeMonth));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationMonth(null);
      }
      if (!isEmpty(degreeYear)) {
        try {
          sub.setGraduationYear(Integer.parseInt(degreeYear));
        }
 catch (        RuntimeException re) {
          validation.addError(""String_Node_Str"",""String_Node_Str"");
        }
      }
 else {
        sub.setGraduationYear(null);
      }
    }
    if (isFieldEnabled(DEFENSE_DATE)) {
      sub.setDefenseDate(defenseDate);
    }
    if (isFieldEnabled(DOCUMENT_TYPE))     sub.setDocumentType(docType);
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     sub.setDocumentAbstract(abstractText);
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     sub.setDocumentKeywords(keywords);
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      sub.getDocumentSubjects().clear();
      if (!isEmpty(subjectPrimary))       sub.addDocumentSubject(subjectPrimary);
      if (!isEmpty(subjectSecondary))       sub.addDocumentSubject(subjectSecondary);
      if (!isEmpty(subjectTertiary))       sub.addDocumentSubject(subjectTertiary);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE))     sub.setDocumentLanguage(docLanguage);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     sub.setCommitteeContactEmail(chairEmail);
    if (isFieldEnabled(PUBLISHED_MATERIAL)) {
      if (publishedMaterialFlag)       sub.setPublishedMaterial(publishedMaterial);
 else       sub.setPublishedMaterial(null);
    }
    if (isFieldEnabled(EMBARGO_TYPE)) {
      try {
        sub.setEmbargoType(settingRepo.findEmbargoType(Long.parseLong(embargo)));
      }
 catch (      RuntimeException re) {
        if (isFieldRequired(EMBARGO_TYPE))         validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (isFieldEnabled(UMI_RELEASE)) {
      if (umi != null && umi.trim().length() > 0)       sub.setUMIRelease(true);
 else       sub.setUMIRelease(false);
    }
    if (isFieldEnabled(COMMITTEE)) {
      try {
        saveCommitteeMembers(sub,committee);
      }
 catch (      RuntimeException re) {
      }
    }
    sub.save();
  }
 else {
    if (isFieldEnabled(DOCUMENT_TITLE))     title=sub.getDocumentTitle();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationMonth() != null)     degreeMonth=sub.getGraduationMonth().toString();
    if (isFieldEnabled(GRADUATION_DATE) && sub.getGraduationYear() != null)     degreeYear=sub.getGraduationYear().toString();
    if (isFieldEnabled(DEFENSE_DATE) && sub.getDefenseDate() != null)     defenseDate=sub.getDefenseDate();
    if (isFieldEnabled(DOCUMENT_TYPE))     docType=sub.getDocumentType();
    if (isFieldEnabled(DOCUMENT_ABSTRACT))     abstractText=sub.getDocumentAbstract();
    if (isFieldEnabled(DOCUMENT_KEYWORDS))     keywords=sub.getDocumentKeywords();
    if (isFieldEnabled(DOCUMENT_SUBJECTS)) {
      List<String> subjects=sub.getDocumentSubjects();
      if (subjects.size() > 0)       subjectPrimary=subjects.get(0);
      if (subjects.size() > 1)       subjectSecondary=subjects.get(1);
      if (subjects.size() > 2)       subjectTertiary=subjects.get(2);
    }
    if (isFieldEnabled(DOCUMENT_LANGUAGE)) {
      docLanguage=sub.getDocumentLanguage();
    }
    if (isFieldEnabled(COMMITTEE))     committee=loadCommitteeMembers(sub);
    if (isFieldEnabled(COMMITTEE_CONTACT_EMAIL))     chairEmail=sub.getCommitteeContactEmail();
    if (isFieldEnabled(PUBLISHED_MATERIAL))     publishedMaterial=sub.getPublishedMaterial();
    if (isFieldEnabled(EMBARGO_TYPE) && sub.getEmbargoType() != null)     embargo=sub.getEmbargoType().getId().toString();
    if (isFieldEnabled(UMI_RELEASE) && sub.getUMIRelease() != null && sub.getUMIRelease() != false)     umi=""String_Node_Str"";
  }
  if (""String_Node_Str"".equals(params.get(""String_Node_Str"")) || ""String_Node_Str"".equals(flash.get(""String_Node_Str""))) {
    verify(sub);
  }
  if (params.get(""String_Node_Str"") != null && !validation.hasErrors()) {
    FileUpload.fileUpload(subId);
  }
  List<Integer> degreeYears=getDegreeYears();
  renderArgs.put(""String_Node_Str"",degreeYears);
  List<String> docTypes=getValidDocumentTypes(sub);
  renderArgs.put(""String_Node_Str"",docTypes);
  List<EmbargoType> embargoTypes=settingRepo.findAllActiveEmbargoTypes();
  renderArgs.put(""String_Node_Str"",embargoTypes);
  List<ProquestSubject> subjects=proquestRepo.findAllSubjects();
  renderArgs.put(""String_Node_Str"",subjects);
  List<CommitteeMemberRoleType> availableRoles=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  renderArgs.put(""String_Node_Str"",availableRoles);
  List<Language> languages=settingRepo.findAllLanguages();
  renderArgs.put(""String_Node_Str"",languages);
  int committeeSlots=4;
  if (committee.size() > 3)   committeeSlots=committee.size();
  if (params.get(""String_Node_Str"") != null)   committeeSlots+=4;
  List<String> stickies=new ArrayList<String>();
  String stickiesRaw=settingRepo.getConfigValue(SUBMIT_DOCUMENT_INFO_STICKIES);
  if (stickiesRaw != null && !""String_Node_Str"".equals(stickiesRaw)) {
    try {
      CSVReader reader=new CSVReader(new StringReader(stickiesRaw));
      stickies=Arrays.asList(reader.readNext());
      reader.close();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
  }
  if (publishedMaterial != null)   publishedMaterialFlag=true;
  renderTemplate(""String_Node_Str"",subId,stickies,title,degreeMonth,degreeYear,defenseDate,docType,abstractText,keywords,subjectPrimary,subjectSecondary,subjectTertiary,docLanguage,committeeSlots,committee,chairEmail,publishedMaterialFlag,publishedMaterial,embargo,umi);
}",0.995913886686589
189400,"/** 
 * Logged the user out by clearing their session and sending them to the application's index page.
 */
public static void logout(){
  AuthenticationMethod.Implicit method=null;
  try {
    String methodName=session.get(""String_Node_Str"");
    method=(AuthenticationMethod.Implicit)Spring.getBean(methodName);
  }
 catch (  RuntimeException re) {
  }
  session.clear();
  Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail());
  if (method != null) {
    ActionDefinition action=Router.reverse(""String_Node_Str"");
    action.absolute();
    String redirect=method.logout(request,action.url);
    if (redirect != null)     redirect(redirect);
  }
  Application.index();
}","/** 
 * Logged the user out by clearing their session and sending them to the application's index page.
 */
public static void logout(){
  AuthenticationMethod.Implicit method=null;
  try {
    String methodName=session.get(""String_Node_Str"");
    method=(AuthenticationMethod.Implicit)Spring.getBean(methodName);
  }
 catch (  RuntimeException re) {
  }
  session.clear();
  if (context != null && context.getPerson() != null)   Logger.info(""String_Node_Str"",context.getPerson().getFormattedName(NameFormat.FIRST_LAST),context.getPerson().getId(),context.getPerson().getEmail());
  if (method != null) {
    ActionDefinition action=Router.reverse(""String_Node_Str"");
    action.absolute();
    String redirect=method.logout(request,action.url);
    if (redirect != null)     redirect(redirect);
  }
  Application.index();
}",0.9661229611041404
189401,"/** 
 * Determine if the provided roles are valid for this given degree level of the submission.
 * @param sub The submission
 * @param roles The roles to validate.
 * @return True if valid, otherwise false.
 */
protected static boolean isValidRoleType(Submission sub,List<String> roles){
  List<CommitteeMemberRoleType> types=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  for (  String role : roles) {
    boolean found=false;
    for (    CommitteeMemberRoleType type : types) {
      if (type.getName().equals(type)) {
        found=true;
        break;
      }
    }
    if (!found)     return false;
  }
  return true;
}","/** 
 * Determine if the provided roles are valid for this given degree level of the submission.
 * @param sub The submission
 * @param roles The roles to validate.
 * @return True if valid, otherwise false.
 */
protected static boolean isValidRoleType(Submission sub,List<String> roles){
  List<CommitteeMemberRoleType> types=settingRepo.findAllCommitteeMemberRoleTypes(sub.getDegreeLevel());
  for (  String role : roles) {
    boolean found=false;
    for (    CommitteeMemberRoleType type : types) {
      if (type.getName().equals(role)) {
        found=true;
        break;
      }
    }
    if (!found)     return false;
  }
  return true;
}",0.9953703703703703
189402,"/** 
 * Validate the transient list for committee members. This method checks that all members have their first and last names
 * @param members List of maps for each committee member.
 */
public static boolean validateCommitteeMembers(Submission sub,List<TransientMember> members){
  boolean atLeastOneMember=false;
  int i=1;
  for (  TransientMember member : members) {
    if (isEmpty(member.firstName) && isEmpty(member.lastName)) {
      validation.addError(""String_Node_Str"" + i,""String_Node_Str"");
    }
 else {
      atLeastOneMember=true;
    }
    if (isValidRoleType(sub,member.roles))     validation.addError(""String_Node_Str"" + i,""String_Node_Str"");
  }
  if (!atLeastOneMember)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  return true;
}","/** 
 * Validate the transient list for committee members. This method checks that all members have their first and last names
 * @param members List of maps for each committee member.
 */
public static boolean validateCommitteeMembers(Submission sub,List<TransientMember> members){
  boolean atLeastOneMember=false;
  int i=1;
  for (  TransientMember member : members) {
    if (isEmpty(member.firstName) && isEmpty(member.lastName)) {
      validation.addError(""String_Node_Str"" + i,""String_Node_Str"");
    }
 else {
      atLeastOneMember=true;
    }
    if (!isValidRoleType(sub,member.roles))     validation.addError(""String_Node_Str"" + i,""String_Node_Str"");
  }
  if (!atLeastOneMember)   validation.addError(""String_Node_Str"",""String_Node_Str"");
  return true;
}",0.9993502274204028
189403,"/** 
 * Construct the transient list for committee members from the html form parameters.
 * @return List of committee member.
 */
public static List<TransientMember> parseCommitteeMembers(){
  List<TransientMember> committee=new ArrayList<TransientMember>();
  int i=1;
  while (params.get(""String_Node_Str"" + i) != null || params.get(""String_Node_Str"" + i) != null) {
    String firstName=params.get(""String_Node_Str"" + i);
    String middleName=params.get(""String_Node_Str"" + i);
    String lastName=params.get(""String_Node_Str"" + i);
    String[] roles=params.get(""String_Node_Str"" + i,String[].class);
    if (roles == null)     roles=new String[0];
    i++;
    if ((firstName == null || firstName.trim().length() == 0) && (lastName == null || lastName.trim().length() == 0))     continue;
    TransientMember member=new TransientMember(firstName,middleName,lastName,roles);
    committee.add(member);
  }
  return committee;
}","/** 
 * Construct the transient list for committee members from the html form parameters.
 * @return List of committee member.
 */
public static List<TransientMember> parseCommitteeMembers(){
  List<TransientMember> committee=new ArrayList<TransientMember>();
  int i=1;
  while (params.get(""String_Node_Str"" + i) != null || params.get(""String_Node_Str"" + i) != null) {
    String firstName=params.get(""String_Node_Str"" + i);
    String middleName=params.get(""String_Node_Str"" + i);
    String lastName=params.get(""String_Node_Str"" + i);
    String[] roles=params.get(""String_Node_Str"" + i,String[].class);
    if (roles == null || (roles.length == 1 && roles[0].trim().length() == 0))     roles=new String[0];
    i++;
    if ((firstName == null || firstName.trim().length() == 0) && (lastName == null || lastName.trim().length() == 0))     continue;
    TransientMember member=new TransientMember(firstName,middleName,lastName,roles);
    committee.add(member);
  }
  return committee;
}",0.9479708636836628
189404,"public void doJob(){
  SystemEmailTemplateServiceImpl templateService=Spring.getBeanOfType(SystemEmailTemplateServiceImpl.class);
  templateService.generateAllSystemEmailTemplates();
}","public void doJob(){
  try {
    SystemEmailTemplateServiceImpl templateService=Spring.getBeanOfType(SystemEmailTemplateServiceImpl.class);
    templateService.generateAllSystemEmailTemplates();
  }
 catch (  RuntimeException re) {
    Logger.error(re,""String_Node_Str"");
  }
}",0.7982646420824295
189405,"/** 
 * Write a the provided submission and all associated action logs to the index writer. This method expects that the submission and action logs have been removed from the index, either through a specific delete, or a delete all in the case of rebuilding the index. This method is used to share code between the various index job implementations so that submissions are written the same no matter who indexes them first.
 * @param writer The index writer.
 * @param sub The submission to index.
 */
public void indexSubmission(IndexWriter writer,Submission sub) throws CorruptIndexException, IOException {
  StringBuilder searchText=new StringBuilder();
  long subId=sub.getId();
  String state=sub.getState().getDisplayName();
  searchText.append(state).append(""String_Node_Str"");
  long searchAssigned=0;
  String sortAssigned=""String_Node_Str"";
  if (sub.getAssignee() != null) {
    searchAssigned=sub.getAssignee().getId();
    sortAssigned=sub.getAssignee().getFormattedName(NameFormat.LAST_FIRST_MIDDLE_BIRTH);
    searchText.append(sortAssigned).append(""String_Node_Str"");
  }
  Date graduationSemester=null;
  if (sub.getGraduationYear() != null) {
    Calendar cal=Calendar.getInstance();
    cal.clear();
    cal.set(Calendar.YEAR,sub.getGraduationYear());
    if (sub.getGraduationMonth() != null)     cal.set(Calendar.MONTH,sub.getGraduationMonth());
    graduationSemester=cal.getTime();
  }
  String department=sub.getDepartment();
  String college=sub.getCollege();
  String major=sub.getMajor();
  searchText.append(department).append(""String_Node_Str"").append(college).append(""String_Node_Str"").append(major).append(""String_Node_Str"");
  String embargo=null;
  if (sub.getEmbargoType() != null) {
    embargo=sub.getEmbargoType().getName();
    searchText.append(embargo).append(""String_Node_Str"");
  }
  String degree=sub.getDegree();
  String documentType=sub.getDocumentType();
  searchText.append(degree).append(""String_Node_Str"").append(documentType).append(""String_Node_Str"");
  Date submissionDate=sub.getSubmissionDate();
  String studentName=""String_Node_Str"";
  if (sub.getStudentLastName() != null)   studentName+=sub.getStudentLastName();
  if (sub.getStudentFirstName() != null)   studentName+=sub.getStudentFirstName();
  if (sub.getStudentMiddleName() != null)   studentName+=sub.getStudentMiddleName();
  searchText.append(studentName).append(""String_Node_Str"");
  String studentEmail=sub.getSubmitter().getEmail();
  searchText.append(studentEmail).append(""String_Node_Str"");
  String institutionalIdentifier=sub.getSubmitter().getInstitutionalIdentifier();
  searchText.append(institutionalIdentifier).append(""String_Node_Str"");
  String documentTitle=sub.getDocumentTitle();
  String documentAbstract=sub.getDocumentAbstract();
  String documentKeywords=sub.getDocumentKeywords();
  searchText.append(documentTitle).append(""String_Node_Str"").append(documentAbstract).append(""String_Node_Str"").append(documentKeywords).append(""String_Node_Str"");
  String primaryDocument=null;
  if (sub.getPrimaryDocument() != null) {
    primaryDocument=sub.getPrimaryDocument().getName();
    searchText.append(primaryDocument).append(""String_Node_Str"");
  }
  Date licenseAgreementDate=sub.getLicenseAgreementDate();
  Date approvalDate=sub.getApprovalDate();
  Date committeeApprovalDate=sub.getCommitteeApprovalDate();
  Date committeeEmbargoApprovalDate=sub.getCommitteeEmbargoApprovalDate();
  String committeeMembers=""String_Node_Str"";
  for (  CommitteeMember member : sub.getCommitteeMembers()) {
    committeeMembers+=member.getLastName() + ""String_Node_Str"" + member.getFirstName()+ ""String_Node_Str""+ member.getLastName();
  }
  searchText.append(committeeMembers).append(""String_Node_Str"");
  String committeeContactEmail=sub.getCommitteeContactEmail();
  searchText.append(committeeContactEmail).append(""String_Node_Str"");
  String umiRelease;
  if (sub.getUMIRelease() == null) {
    umiRelease=""String_Node_Str"";
  }
 else   if (sub.getUMIRelease()) {
    umiRelease=""String_Node_Str"";
  }
 else {
    umiRelease=""String_Node_Str"";
  }
  int customActions=0;
  for (  CustomActionValue action : sub.getCustomActions()) {
    if (action.getValue())     customActions++;
  }
  String degreeLevel=null;
  if (sub.getDegreeLevel() != null)   degreeLevel=sub.getDegreeLevel().name();
  searchText.append(degreeLevel).append(""String_Node_Str"");
  String depositId=sub.getDepositId();
  searchText.append(depositId).append(""String_Node_Str"");
  String lastEventEntry=null;
  Date lastEventTime=null;
  List<ActionLog> logs=indexer.subRepo.findActionLog(sub);
  if (logs.size() > 0) {
    lastEventEntry=logs.get(0).getEntry();
    lastEventTime=logs.get(0).getActionDate();
    searchText.append(lastEventEntry);
  }
  Document doc=new Document();
  doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
  doc.add(new Field(""String_Node_Str"",searchText.toString(),Field.Store.NO,Index.ANALYZED_NO_NORMS));
  if (state != null)   doc.add(new Field(""String_Node_Str"",state,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(searchAssigned));
  if (sortAssigned != null)   doc.add(new Field(""String_Node_Str"",sortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
  if (graduationSemester != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
  if (department != null)   doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
  if (college != null)   doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
  if (major != null)   doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
  if (embargo != null)   doc.add(new Field(""String_Node_Str"",embargo,Field.Store.NO,Index.NOT_ANALYZED));
  if (degree != null)   doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentType != null)   doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
  if (submissionDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
  if (studentName != null)   doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
  if (studentEmail != null)   doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (institutionalIdentifier != null)   doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentTitle != null)   doc.add(new Field(""String_Node_Str"",documentTitle,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentAbstract != null)   doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentKeywords != null)   doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
  if (primaryDocument != null)   doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
  if (licenseAgreementDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
  if (approvalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
  if (committeeApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
  if (committeeEmbargoApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
  if (committeeMembers != null)   doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
  if (committeeContactEmail != null)   doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (umiRelease != null)   doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setIntValue(customActions));
  if (degreeLevel != null)   doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
  if (depositId != null)   doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventEntry != null)   doc.add(new Field(""String_Node_Str"",lastEventEntry,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventTime != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(lastEventTime.getTime()));
  writer.addDocument(doc);
  for (  ActionLog log : logs) {
    Long logId=log.getId();
    String logEntry=log.getEntry();
    String logState=log.getSubmissionState().getDisplayName();
    long logSearchAssigned=0;
    String logSortAssigned=null;
    if (log.getPerson() != null) {
      logSearchAssigned=log.getPerson().getId();
      logSortAssigned=log.getPerson().getFormattedName(NameFormat.FIRST_LAST);
    }
    Date logTime=log.getActionDate();
    doc=new Document();
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(logId));
    doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.ANALYZED_NO_NORMS));
    if (logState != null)     doc.add(new Field(""String_Node_Str"",logState,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logSearchAssigned));
    if (logSortAssigned != null)     doc.add(new Field(""String_Node_Str"",logSortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.NOT_ANALYZED));
    if (logTime != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logTime.getTime()));
    if (graduationSemester != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
    if (department != null)     doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
    if (college != null)     doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
    if (major != null)     doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
    if (embargo != null)     doc.add(new Field(""String_Node_Str"",embargo,Field.Store.NO,Index.NOT_ANALYZED));
    if (degree != null)     doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentType != null)     doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
    if (submissionDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
    if (studentName != null)     doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
    if (studentEmail != null)     doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (institutionalIdentifier != null)     doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentAbstract != null)     doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentKeywords != null)     doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
    if (primaryDocument != null)     doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
    if (licenseAgreementDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
    if (approvalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
    if (committeeApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
    if (committeeEmbargoApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
    if (committeeMembers != null)     doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
    if (committeeContactEmail != null)     doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (umiRelease != null)     doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setIntValue(customActions));
    if (degreeLevel != null)     doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
    if (depositId != null)     doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
    writer.addDocument(doc);
    log.detach();
  }
}","/** 
 * Write a the provided submission and all associated action logs to the index writer. This method expects that the submission and action logs have been removed from the index, either through a specific delete, or a delete all in the case of rebuilding the index. This method is used to share code between the various index job implementations so that submissions are written the same no matter who indexes them first.
 * @param writer The index writer.
 * @param sub The submission to index.
 */
public void indexSubmission(IndexWriter writer,Submission sub) throws CorruptIndexException, IOException {
  StringBuilder searchText=new StringBuilder();
  long subId=sub.getId();
  String state=sub.getState().getDisplayName();
  searchText.append(state).append(""String_Node_Str"");
  long searchAssigned=0;
  String sortAssigned=""String_Node_Str"";
  if (sub.getAssignee() != null) {
    searchAssigned=sub.getAssignee().getId();
    sortAssigned=sub.getAssignee().getFormattedName(NameFormat.LAST_FIRST_MIDDLE_BIRTH);
    searchText.append(sortAssigned).append(""String_Node_Str"");
  }
  Date graduationSemester=null;
  if (sub.getGraduationYear() != null) {
    Calendar cal=Calendar.getInstance();
    cal.clear();
    cal.set(Calendar.YEAR,sub.getGraduationYear());
    if (sub.getGraduationMonth() != null)     cal.set(Calendar.MONTH,sub.getGraduationMonth());
    graduationSemester=cal.getTime();
  }
  String department=sub.getDepartment();
  String college=sub.getCollege();
  String major=sub.getMajor();
  searchText.append(department).append(""String_Node_Str"").append(college).append(""String_Node_Str"").append(major).append(""String_Node_Str"");
  String embargo=null;
  if (sub.getEmbargoType() != null) {
    embargo=sub.getEmbargoType().getName();
    searchText.append(embargo).append(""String_Node_Str"");
  }
  String degree=sub.getDegree();
  String documentType=sub.getDocumentType();
  searchText.append(degree).append(""String_Node_Str"").append(documentType).append(""String_Node_Str"");
  Date submissionDate=sub.getSubmissionDate();
  String studentName=""String_Node_Str"";
  if (sub.getStudentLastName() != null)   studentName+=sub.getStudentLastName() + ""String_Node_Str"";
  if (sub.getStudentFirstName() != null)   studentName+=sub.getStudentFirstName() + ""String_Node_Str"";
  if (sub.getStudentMiddleName() != null)   studentName+=sub.getStudentMiddleName() + ""String_Node_Str"";
  searchText.append(studentName).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.LAST_FIRST_BIRTH)).append(""String_Node_Str"");
  searchText.append(sub.getStudentFormattedName(NameFormat.FIRST_LAST_BIRTH)).append(""String_Node_Str"");
  String studentEmail=sub.getSubmitter().getEmail();
  searchText.append(studentEmail).append(""String_Node_Str"");
  String institutionalIdentifier=sub.getSubmitter().getInstitutionalIdentifier();
  searchText.append(institutionalIdentifier).append(""String_Node_Str"");
  String documentTitle=sub.getDocumentTitle();
  String documentAbstract=sub.getDocumentAbstract();
  String documentKeywords=sub.getDocumentKeywords();
  searchText.append(documentTitle).append(""String_Node_Str"").append(documentAbstract).append(""String_Node_Str"").append(documentKeywords).append(""String_Node_Str"");
  String primaryDocument=null;
  if (sub.getPrimaryDocument() != null) {
    primaryDocument=sub.getPrimaryDocument().getName();
    searchText.append(primaryDocument).append(""String_Node_Str"");
  }
  Date licenseAgreementDate=sub.getLicenseAgreementDate();
  Date approvalDate=sub.getApprovalDate();
  Date committeeApprovalDate=sub.getCommitteeApprovalDate();
  Date committeeEmbargoApprovalDate=sub.getCommitteeEmbargoApprovalDate();
  String committeeMembers=""String_Node_Str"";
  for (  CommitteeMember member : sub.getCommitteeMembers()) {
    committeeMembers+=member.getLastName() + ""String_Node_Str"" + member.getFirstName()+ ""String_Node_Str""+ member.getLastName();
  }
  searchText.append(committeeMembers).append(""String_Node_Str"");
  String committeeContactEmail=sub.getCommitteeContactEmail();
  searchText.append(committeeContactEmail).append(""String_Node_Str"");
  String umiRelease;
  if (sub.getUMIRelease() == null) {
    umiRelease=""String_Node_Str"";
  }
 else   if (sub.getUMIRelease()) {
    umiRelease=""String_Node_Str"";
  }
 else {
    umiRelease=""String_Node_Str"";
  }
  int customActions=0;
  for (  CustomActionValue action : sub.getCustomActions()) {
    if (action.getValue())     customActions++;
  }
  String degreeLevel=null;
  if (sub.getDegreeLevel() != null)   degreeLevel=sub.getDegreeLevel().name();
  searchText.append(degreeLevel).append(""String_Node_Str"");
  String depositId=sub.getDepositId();
  searchText.append(depositId).append(""String_Node_Str"");
  String lastEventEntry=null;
  Date lastEventTime=null;
  List<ActionLog> logs=indexer.subRepo.findActionLog(sub);
  if (logs.size() > 0) {
    lastEventEntry=logs.get(0).getEntry();
    lastEventTime=logs.get(0).getActionDate();
    searchText.append(lastEventEntry);
  }
  Document doc=new Document();
  doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
  doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
  doc.add(new Field(""String_Node_Str"",searchText.toString(),Field.Store.NO,Index.ANALYZED_NO_NORMS));
  if (state != null)   doc.add(new Field(""String_Node_Str"",state,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(searchAssigned));
  if (sortAssigned != null)   doc.add(new Field(""String_Node_Str"",sortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
  if (graduationSemester != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
  if (department != null)   doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
  if (college != null)   doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
  if (major != null)   doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
  if (embargo != null)   doc.add(new Field(""String_Node_Str"",embargo,Field.Store.NO,Index.NOT_ANALYZED));
  if (degree != null)   doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentType != null)   doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
  if (submissionDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
  if (studentName != null)   doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
  if (studentEmail != null)   doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (institutionalIdentifier != null)   doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentTitle != null)   doc.add(new Field(""String_Node_Str"",documentTitle,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentAbstract != null)   doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
  if (documentKeywords != null)   doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
  if (primaryDocument != null)   doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
  if (licenseAgreementDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
  if (approvalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
  if (committeeApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
  if (committeeEmbargoApprovalDate != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
  if (committeeMembers != null)   doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
  if (committeeContactEmail != null)   doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
  if (umiRelease != null)   doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
  doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setIntValue(customActions));
  if (degreeLevel != null)   doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
  if (depositId != null)   doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventEntry != null)   doc.add(new Field(""String_Node_Str"",lastEventEntry,Field.Store.NO,Index.NOT_ANALYZED));
  if (lastEventTime != null)   doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(lastEventTime.getTime()));
  writer.addDocument(doc);
  for (  ActionLog log : logs) {
    Long logId=log.getId();
    String logEntry=log.getEntry();
    String logState=log.getSubmissionState().getDisplayName();
    long logSearchAssigned=0;
    String logSortAssigned=null;
    if (log.getPerson() != null) {
      logSearchAssigned=log.getPerson().getId();
      logSortAssigned=log.getPerson().getFormattedName(NameFormat.FIRST_LAST);
    }
    Date logTime=log.getActionDate();
    doc=new Document();
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(subId));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.YES,true).setLongValue(logId));
    doc.add(new Field(""String_Node_Str"",""String_Node_Str"",Field.Store.YES,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.ANALYZED_NO_NORMS));
    if (logState != null)     doc.add(new Field(""String_Node_Str"",logState,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logSearchAssigned));
    if (logSortAssigned != null)     doc.add(new Field(""String_Node_Str"",logSortAssigned,Field.Store.NO,Index.NOT_ANALYZED));
    if (logEntry != null)     doc.add(new Field(""String_Node_Str"",logEntry,Field.Store.NO,Index.NOT_ANALYZED));
    if (logTime != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(logTime.getTime()));
    if (graduationSemester != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(graduationSemester.getTime()));
    if (department != null)     doc.add(new Field(""String_Node_Str"",department,Field.Store.NO,Index.NOT_ANALYZED));
    if (college != null)     doc.add(new Field(""String_Node_Str"",college,Field.Store.NO,Index.NOT_ANALYZED));
    if (major != null)     doc.add(new Field(""String_Node_Str"",major,Field.Store.NO,Index.NOT_ANALYZED));
    if (embargo != null)     doc.add(new Field(""String_Node_Str"",embargo,Field.Store.NO,Index.NOT_ANALYZED));
    if (degree != null)     doc.add(new Field(""String_Node_Str"",degree,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentType != null)     doc.add(new Field(""String_Node_Str"",documentType,Field.Store.NO,Index.NOT_ANALYZED));
    if (submissionDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(submissionDate.getTime()));
    if (studentName != null)     doc.add(new Field(""String_Node_Str"",studentName,Field.Store.NO,Index.NOT_ANALYZED));
    if (studentEmail != null)     doc.add(new Field(""String_Node_Str"",studentEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (institutionalIdentifier != null)     doc.add(new Field(""String_Node_Str"",institutionalIdentifier,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentAbstract != null)     doc.add(new Field(""String_Node_Str"",documentAbstract,Field.Store.NO,Index.NOT_ANALYZED));
    if (documentKeywords != null)     doc.add(new Field(""String_Node_Str"",documentKeywords,Field.Store.NO,Index.NOT_ANALYZED));
    if (primaryDocument != null)     doc.add(new Field(""String_Node_Str"",primaryDocument,Field.Store.NO,Index.NOT_ANALYZED));
    if (licenseAgreementDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(licenseAgreementDate.getTime()));
    if (approvalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(approvalDate.getTime()));
    if (committeeApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeApprovalDate.getTime()));
    if (committeeEmbargoApprovalDate != null)     doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setLongValue(committeeEmbargoApprovalDate.getTime()));
    if (committeeMembers != null)     doc.add(new Field(""String_Node_Str"",committeeMembers,Field.Store.NO,Index.NOT_ANALYZED));
    if (committeeContactEmail != null)     doc.add(new Field(""String_Node_Str"",committeeContactEmail,Field.Store.NO,Index.NOT_ANALYZED));
    if (umiRelease != null)     doc.add(new Field(""String_Node_Str"",umiRelease,Field.Store.NO,Index.NOT_ANALYZED));
    doc.add(new NumericField(""String_Node_Str"",Field.Store.NO,true).setIntValue(customActions));
    if (degreeLevel != null)     doc.add(new Field(""String_Node_Str"",degreeLevel,Field.Store.NO,Index.NOT_ANALYZED));
    if (depositId != null)     doc.add(new Field(""String_Node_Str"",depositId,Field.Store.NO,Index.NOT_ANALYZED));
    writer.addDocument(doc);
    log.detach();
  }
}",0.9899223648850404
189406,"public static void createUser(){
  if (firstUser == null || firstUser == false)   Application.index();
  if (params.get(""String_Node_Str"") != null) {
    String firstName=params.get(""String_Node_Str"");
    String lastName=params.get(""String_Node_Str"");
    String email=params.get(""String_Node_Str"");
    String password1=params.get(""String_Node_Str"");
    String password2=params.get(""String_Node_Str"");
    String netid=params.get(""String_Node_Str"");
    verify(firstName,lastName,email,password1,password2,netid);
    if (!validation.hasErrors()) {
      context.turnOffAuthorization();
      Person person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.ADMINISTRATOR);
      person.setPassword(password1);
      person.save();
      context.turnOffAuthorization();
      context.login(person);
      List<AuthenticationMethod> methods=getEnabledAuthenticationMethods();
      for (      AuthenticationMethod method : methods)       method.personCreated(request,person);
      session.put(""String_Node_Str"",person.getId());
      session.put(""String_Node_Str"",person.getFirstName());
      session.put(""String_Node_Str"",person.getLastName());
      session.put(""String_Node_Str"",person.getDisplayName());
      systemEmailService.generateAllSystemEmailTemplates();
      settingRepo.createConfiguration(Configuration.SUBMIT_INSTRUCTIONS,Configuration.DEFAULT_SUBMIT_INSTRUCTIONS).save();
      settingRepo.createConfiguration(Configuration.SUBMIT_LICENSE,Configuration.DEFAULT_SUBMIT_LICENSE).save();
      for (      EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
        settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active).save();
      }
      firstUser=false;
      Application.index();
    }
 else {
      renderTemplate(""String_Node_Str"",firstName,lastName,email,password1,password2,netid);
    }
  }
  renderTemplate(""String_Node_Str"");
}","public static void createUser(){
  if (firstUser == null || firstUser == false)   Application.index();
  if (params.get(""String_Node_Str"") != null) {
    String firstName=params.get(""String_Node_Str"");
    String lastName=params.get(""String_Node_Str"");
    String email=params.get(""String_Node_Str"");
    String password1=params.get(""String_Node_Str"");
    String password2=params.get(""String_Node_Str"");
    String netid=params.get(""String_Node_Str"");
    verify(firstName,lastName,email,password1,password2,netid);
    if (!validation.hasErrors()) {
      context.turnOffAuthorization();
      Person person=personRepo.createPerson(netid,email,firstName,lastName,RoleType.ADMINISTRATOR).save();
      person.setPassword(password1);
      person.save();
      context.turnOffAuthorization();
      context.login(person);
      List<AuthenticationMethod> methods=getEnabledAuthenticationMethods();
      for (      AuthenticationMethod method : methods)       method.personCreated(request,person);
      session.put(""String_Node_Str"",person.getId());
      session.put(""String_Node_Str"",person.getFirstName());
      session.put(""String_Node_Str"",person.getLastName());
      session.put(""String_Node_Str"",person.getDisplayName());
      systemEmailService.generateAllSystemEmailTemplates();
      settingRepo.createConfiguration(Configuration.SUBMIT_INSTRUCTIONS,Configuration.DEFAULT_SUBMIT_INSTRUCTIONS).save();
      settingRepo.createConfiguration(Configuration.SUBMIT_LICENSE,Configuration.DEFAULT_SUBMIT_LICENSE).save();
      for (      EmbargoArray embargoDefinition : EMBARGO_DEFINTITIONS) {
        settingRepo.createEmbargoType(embargoDefinition.name,embargoDefinition.description,embargoDefinition.duration,embargoDefinition.active).save();
      }
      indexer.deleteAndRebuild(true);
      firstUser=false;
      SettingsTab.settingsRedirect();
    }
 else {
      renderTemplate(""String_Node_Str"",firstName,lastName,email,password1,password2,netid);
    }
  }
  renderTemplate(""String_Node_Str"");
}",0.9778560644187216
189407,"/** 
 * Display vital statistic information about vireo and allow access to some administrator features.
 */
@Security(RoleType.ADMINISTRATOR) public static void controlPanel(){
  Runtime runtime=Runtime.getRuntime();
  String javaVersion=java.lang.System.getProperty(""String_Node_Str"");
  String osName=java.lang.System.getProperty(""String_Node_Str"");
  String osArch=java.lang.System.getProperty(""String_Node_Str"");
  String osVersion=java.lang.System.getProperty(""String_Node_Str"");
  int availableProcessors=runtime.availableProcessors();
  long maximumMemory=runtime.maxMemory() / 1024 / 1024;
  long allocatedMemory=runtime.totalMemory() / 1024 / 1024;
  long freeMemory=runtime.freeMemory() / 1024 / 1024;
  long usedMemory=allocatedMemory - freeMemory / 1024 / 1024;
  String playMode=Play.mode.name();
  String frameworkId=Play.id;
  Date startedAt=new Date(Play.startedAt);
  String httpAddress=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPort=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String logLevel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String db=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String appPath=Play.applicationPath.getPath();
  String attachmentsPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String indexPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailMode=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailHost=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailUser=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailPass=Play.configuration.getProperty(""String_Node_Str"");
  String mailChannel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailFrom=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailReply=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (mailPass != null) {
    mailPass=mailPass.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mailPass=""String_Node_Str"";
  }
  long personTotal=personRepo.findPersonsTotal();
  long submissionTotal=subRepo.findSubmissionsTotal();
  long actionLogTotal=subRepo.findActionLogsTotal();
  String indexImpl=indexer.getClass().getSimpleName();
  String indexJob=""String_Node_Str"";
  if (indexer.isJobRunning()) {
    indexJob=indexer.getCurrentJobLabel();
    float complete=indexer.getCurrentJobProgress() / indexer.getCurrentJobTotal();
    indexJob+=""String_Node_Str"" + complete + ""String_Node_Str"";
  }
  render(javaVersion,osName,osArch,osVersion,availableProcessors,maximumMemory,allocatedMemory,freeMemory,usedMemory,playMode,frameworkId,httpAddress,httpPort,httpPath,startedAt,appPath,logLevel,db,attachmentsPath,indexPath,mailMode,mailHost,mailUser,mailPass,mailChannel,mailFrom,mailReply,personTotal,submissionTotal,actionLogTotal,indexImpl,indexJob);
}","/** 
 * Display vital statistic information about vireo and allow access to some administrator features.
 */
@Security(RoleType.ADMINISTRATOR) public static void controlPanel(){
  Runtime runtime=Runtime.getRuntime();
  String javaVersion=java.lang.System.getProperty(""String_Node_Str"");
  String osName=java.lang.System.getProperty(""String_Node_Str"");
  String osArch=java.lang.System.getProperty(""String_Node_Str"");
  String osVersion=java.lang.System.getProperty(""String_Node_Str"");
  int availableProcessors=runtime.availableProcessors();
  long maximumMemory=runtime.maxMemory() / 1024 / 1024;
  long allocatedMemory=runtime.totalMemory() / 1024 / 1024;
  long freeMemory=runtime.freeMemory() / 1024 / 1024;
  long usedMemory=allocatedMemory - freeMemory / 1024 / 1024;
  String playMode=Play.mode.name();
  String frameworkId=Play.id;
  Date startedAt=new Date(Play.startedAt);
  String httpAddress=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPort=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String httpPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String logLevel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String db=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String appPath=Play.applicationPath.getPath();
  String attachmentsPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String indexPath=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailMode=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailHost=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailUser=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailPass=Play.configuration.getProperty(""String_Node_Str"");
  String mailChannel=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailFrom=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  String mailReply=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
  if (mailPass != null) {
    mailPass=mailPass.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    mailPass=""String_Node_Str"";
  }
  long personTotal=personRepo.findPersonsTotal();
  long submissionTotal=subRepo.findSubmissionsTotal();
  long actionLogTotal=subRepo.findActionLogsTotal();
  String indexImpl=indexer.getClass().getSimpleName();
  String indexJob=""String_Node_Str"";
  if (indexer.isJobRunning()) {
    indexJob=indexer.getCurrentJobLabel();
    float complete=0;
    if (indexer.getCurrentJobTotal() > 0)     complete=indexer.getCurrentJobProgress() / indexer.getCurrentJobTotal();
    indexJob+=""String_Node_Str"" + complete + ""String_Node_Str"";
  }
  render(javaVersion,osName,osArch,osVersion,availableProcessors,maximumMemory,allocatedMemory,freeMemory,usedMemory,playMode,frameworkId,httpAddress,httpPort,httpPath,startedAt,appPath,logLevel,db,attachmentsPath,indexPath,mailMode,mailHost,mailUser,mailPass,mailChannel,mailFrom,mailReply,personTotal,submissionTotal,actionLogTotal,indexImpl,indexJob);
}",0.979987293519695
189408,"/** 
 * Create a new JpaAttachmentIpml from a byte array.
 * @param submission The submission this attachment belongs too.
 * @param type The type of the attachment.
 * @param filename The filename of the attachment.
 * @param content The contents of the attachment.
 */
protected JpaAttachmentImpl(Submission submission,AttachmentType type,String filename,byte[] content) throws IOException {
  this(submission,type);
  if (filename == null || filename.trim().length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (content == null || content.length == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  setName(filename);
  this.data=new Blob();
  this.data.set(new ByteArrayInputStream(content),MimeTypes.getContentType(filename));
  if (AttachmentType.PRIMARY == type)   renamePrimaryDocument();
}","/** 
 * Create a new JpaAttachmentIpml from a byte array.
 * @param submission The submission this attachment belongs too.
 * @param type The type of the attachment.
 * @param filename The filename of the attachment.
 * @param content The contents of the attachment.
 */
protected JpaAttachmentImpl(Submission submission,AttachmentType type,String filename,byte[] content) throws IOException {
  this(submission,type);
  if (filename == null || filename.trim().length() == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  if (content == null || content.length == 0)   throw new IllegalArgumentException(""String_Node_Str"");
  setName(filename);
  String mimeType;
  try {
    mimeType=MimeTypes.getContentType(filename);
  }
 catch (  RuntimeException re) {
    mimeType=""String_Node_Str"";
  }
  this.data=new Blob();
  this.data.set(new ByteArrayInputStream(content),mimeType);
  if (AttachmentType.PRIMARY == type)   renamePrimaryDocument();
}",0.8877721943048577
189409,"@Override public List<ActionLog> findActionLogs(List<Long> logIds){
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  for (int i=0; i < logIds.size(); i++) {
    if (i > 0)     sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + (i + 1));
  }
  sql.append(""String_Node_Str"");
  TypedQuery query=JPA.em().createQuery(sql.toString(),JpaActionLogImpl.class);
  for (int i=0; i < logIds.size(); i++) {
    query.setParameter(i + 1,logIds.get(i));
  }
  return query.getResultList();
}","@Override public List<ActionLog> findActionLogs(List<Long> logIds){
  if (logIds == null || logIds.size() == 0)   return new ArrayList<ActionLog>();
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  for (int i=0; i < logIds.size(); i++) {
    if (i > 0)     sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + (i + 1));
  }
  sql.append(""String_Node_Str"");
  TypedQuery query=JPA.em().createQuery(sql.toString(),JpaActionLogImpl.class);
  for (int i=0; i < logIds.size(); i++) {
    query.setParameter(i + 1,logIds.get(i));
  }
  return query.getResultList();
}",0.927743086529884
189410,"@Override public List<Submission> findSubmissions(List<Long> submissionIds){
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  for (int i=0; i < submissionIds.size(); i++) {
    if (i > 0)     sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + (i + 1));
  }
  sql.append(""String_Node_Str"");
  TypedQuery query=JPA.em().createQuery(sql.toString(),JpaSubmissionImpl.class);
  for (int i=0; i < submissionIds.size(); i++) {
    query.setParameter(i + 1,submissionIds.get(i));
  }
  return query.getResultList();
}","@Override public List<Submission> findSubmissions(List<Long> submissionIds){
  if (submissionIds == null || submissionIds.size() == 0)   return new ArrayList<Submission>();
  StringBuilder sql=new StringBuilder();
  sql.append(""String_Node_Str"");
  for (int i=0; i < submissionIds.size(); i++) {
    if (i > 0)     sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + (i + 1));
  }
  sql.append(""String_Node_Str"");
  TypedQuery query=JPA.em().createQuery(sql.toString(),JpaSubmissionImpl.class);
  for (int i=0; i < submissionIds.size(); i++) {
    query.setParameter(i + 1,submissionIds.get(i));
  }
  return query.getResultList();
}",0.9198664440734556
189411,"@Override public SearchResult<Submission> filterSearchSubmissions(SearchFilter filter,SearchOrder orderBy,SearchDirection direction,int offset,int limit){
  int paramIndex=1;
  Map<String,Object> params=new HashMap<String,Object>();
  ANDList andList=new ANDList();
  for (  String searchText : filter.getSearchText()) {
    ORList orList=new ORList();
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),""String_Node_Str"" + searchText + ""String_Node_Str"");
    andList.add(orList);
  }
  ORList orList=new ORList();
  for (  String stateName : filter.getStates()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),stateName);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Person assignee : filter.getAssignees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),assignee);
  }
  andList.add(orList);
  orList=new ORList();
  for (  EmbargoType embargo : filter.getEmbargoTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),embargo);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Semester semester : filter.getGraduationSemesters()) {
    ANDList semesterList=new ANDList();
    if (semester.year != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.year);
    }
    if (semester.month != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.month);
    }
    if (semesterList.size() > 0)     orList.add(semesterList);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String degree : filter.getDegrees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),degree);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String department : filter.getDepartments()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),department);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String college : filter.getColleges()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),college);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String major : filter.getMajors()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),major);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String docType : filter.getDocumentTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),docType);
  }
  andList.add(orList);
  if (filter.getUMIRelease() != null) {
    if (filter.getUMIRelease()) {
      andList.add(new Statement(""String_Node_Str""));
    }
 else {
      andList.add(new Statement(""String_Node_Str""));
    }
  }
  if (filter.getSubmissionDateRangeStart() != null && filter.getSubmissionDateRangeEnd() != null) {
    Date start=filter.getSubmissionDateRangeStart();
    Date end=filter.getSubmissionDateRangeEnd();
    andList.add(new Statement(""String_Node_Str"" + paramIndex));
    andList.add(new Statement(""String_Node_Str"" + (paramIndex + 1)));
    params.put(""String_Node_Str"" + (paramIndex++),start);
    params.put(""String_Node_Str"" + (paramIndex++),end);
  }
  StringBuilder queryText=new StringBuilder();
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  params.put(""String_Node_Str"",AttachmentType.PRIMARY);
  queryText.append(""String_Node_Str"");
  andList.buildClause(queryText);
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  String orderByClause=SUBMISSION_ORDER_BY_COLUMNS[orderBy.ordinal()];
  if (direction == SearchDirection.DESCENDING)   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
 else   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
  queryText.append(""String_Node_Str"" + orderByClause);
  if (Logger.isDebugEnabled()) {
    String message=""String_Node_Str"" + queryText.toString() + ""String_Node_Str"";
    for (    String key : params.keySet()) {
      message+=""String_Node_Str"" + key + ""String_Node_Str""+ params.get(key)+ ""String_Node_Str"";
    }
    Logger.debug(message);
  }
  TypedQuery<JpaSubmissionImpl> limittedQuery=JPA.em().createQuery(queryText.toString(),JpaSubmissionImpl.class);
  limittedQuery.setFirstResult(offset);
  limittedQuery.setMaxResults(limit);
  for (  String key : params.keySet())   limittedQuery.setParameter(key,params.get(key));
  TypedQuery<JpaSubmissionImpl> fullQuery=JPA.em().createQuery(queryText.toString(),JpaSubmissionImpl.class);
  for (  String key : params.keySet())   fullQuery.setParameter(key,params.get(key));
  JpaSearchResultsImpl<Submission> result=new JpaSearchResultsImpl(filter,direction,orderBy,offset,limit,(List)limittedQuery.getResultList(),fullQuery.getResultList().size());
  return result;
}","@Override public SearchResult<Submission> filterSearchSubmissions(SearchFilter filter,SearchOrder orderBy,SearchDirection direction,int offset,int limit){
  int paramIndex=1;
  Map<String,Object> params=new HashMap<String,Object>();
  ANDList andList=new ANDList();
  for (  String searchText : filter.getSearchText()) {
    ORList orList=new ORList();
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),""String_Node_Str"" + searchText + ""String_Node_Str"");
    andList.add(orList);
  }
  ORList orList=new ORList();
  for (  String stateName : filter.getStates()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),stateName);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Person assignee : filter.getAssignees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),assignee);
  }
  andList.add(orList);
  orList=new ORList();
  for (  EmbargoType embargo : filter.getEmbargoTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),embargo);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Semester semester : filter.getGraduationSemesters()) {
    ANDList semesterList=new ANDList();
    if (semester.year != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.year);
    }
    if (semester.month != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.month);
    }
    if (semesterList.size() > 0)     orList.add(semesterList);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String degree : filter.getDegrees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),degree);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String department : filter.getDepartments()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),department);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String college : filter.getColleges()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),college);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String major : filter.getMajors()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),major);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String docType : filter.getDocumentTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),docType);
  }
  andList.add(orList);
  if (filter.getUMIRelease() != null) {
    if (filter.getUMIRelease()) {
      andList.add(new Statement(""String_Node_Str""));
    }
 else {
      andList.add(new Statement(""String_Node_Str""));
    }
  }
  if (filter.getSubmissionDateRangeStart() != null && filter.getSubmissionDateRangeEnd() != null) {
    Date start=filter.getSubmissionDateRangeStart();
    Date end=filter.getSubmissionDateRangeEnd();
    andList.add(new Statement(""String_Node_Str"" + paramIndex));
    andList.add(new Statement(""String_Node_Str"" + (paramIndex + 1)));
    params.put(""String_Node_Str"" + (paramIndex++),start);
    params.put(""String_Node_Str"" + (paramIndex++),end);
  }
  StringBuilder queryText=new StringBuilder();
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  params.put(""String_Node_Str"",AttachmentType.PRIMARY);
  if (andList.size() > 0) {
    queryText.append(""String_Node_Str"");
    andList.buildClause(queryText);
    queryText.append(""String_Node_Str"");
  }
  queryText.append(""String_Node_Str"");
  String orderByClause=SUBMISSION_ORDER_BY_COLUMNS[orderBy.ordinal()];
  if (direction == SearchDirection.DESCENDING)   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
 else   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
  queryText.append(""String_Node_Str"" + orderByClause);
  if (Logger.isDebugEnabled()) {
    String message=""String_Node_Str"" + queryText.toString() + ""String_Node_Str"";
    for (    String key : params.keySet()) {
      message+=""String_Node_Str"" + key + ""String_Node_Str""+ params.get(key)+ ""String_Node_Str"";
    }
    Logger.debug(message);
  }
  TypedQuery<JpaSubmissionImpl> limittedQuery=JPA.em().createQuery(queryText.toString(),JpaSubmissionImpl.class);
  limittedQuery.setFirstResult(offset);
  limittedQuery.setMaxResults(limit);
  for (  String key : params.keySet())   limittedQuery.setParameter(key,params.get(key));
  TypedQuery<JpaSubmissionImpl> fullQuery=JPA.em().createQuery(queryText.toString(),JpaSubmissionImpl.class);
  for (  String key : params.keySet())   fullQuery.setParameter(key,params.get(key));
  JpaSearchResultsImpl<Submission> result=new JpaSearchResultsImpl(filter,direction,orderBy,offset,limit,(List)limittedQuery.getResultList(),fullQuery.getResultList().size());
  return result;
}",0.9967059639389736
189412,"@Override public SearchResult<ActionLog> filterSearchActionLogs(SearchFilter filter,SearchOrder orderBy,SearchDirection direction,int offset,int limit){
  int paramIndex=1;
  Map<String,Object> params=new HashMap<String,Object>();
  ANDList andList=new ANDList();
  ORList orList=new ORList();
  for (  String searchText : filter.getSearchText()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),""String_Node_Str"" + searchText + ""String_Node_Str"");
  }
  andList.add(orList);
  orList=new ORList();
  for (  String stateName : filter.getStates()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),stateName);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Person assignee : filter.getAssignees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),assignee);
  }
  andList.add(orList);
  orList=new ORList();
  for (  EmbargoType embargo : filter.getEmbargoTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),embargo);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Semester semester : filter.getGraduationSemesters()) {
    ANDList semesterList=new ANDList();
    if (semester.year != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.year);
    }
    if (semester.month != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.month);
    }
    if (semesterList.size() > 0)     orList.add(semesterList);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String degree : filter.getDegrees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),degree);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String department : filter.getDepartments()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),department);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String college : filter.getColleges()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),college);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String major : filter.getMajors()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),major);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String docType : filter.getDocumentTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),docType);
  }
  andList.add(orList);
  if (filter.getUMIRelease() != null) {
    if (filter.getUMIRelease()) {
      andList.add(new Statement(""String_Node_Str""));
    }
 else {
      andList.add(new Statement(""String_Node_Str""));
    }
  }
  if (filter.getSubmissionDateRangeStart() != null && filter.getSubmissionDateRangeEnd() != null) {
    Date start=filter.getSubmissionDateRangeStart();
    Date end=filter.getSubmissionDateRangeEnd();
    andList.add(new Statement(""String_Node_Str"" + paramIndex));
    andList.add(new Statement(""String_Node_Str"" + (paramIndex + 1)));
    params.put(""String_Node_Str"" + (paramIndex++),start);
    params.put(""String_Node_Str"" + (paramIndex++),end);
  }
  StringBuilder queryText=new StringBuilder();
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  params.put(""String_Node_Str"",AttachmentType.PRIMARY);
  queryText.append(""String_Node_Str"");
  andList.buildClause(queryText);
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  String orderByClause=ACTION_LOG_ORDER_BY_COLUMNS[orderBy.ordinal()];
  if (direction == SearchDirection.DESCENDING)   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
 else   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
  queryText.append(""String_Node_Str"" + orderByClause);
  if (Logger.isDebugEnabled()) {
    String message=""String_Node_Str"" + queryText.toString() + ""String_Node_Str"";
    for (    String key : params.keySet()) {
      message+=""String_Node_Str"" + key + ""String_Node_Str""+ params.get(key)+ ""String_Node_Str"";
    }
    Logger.debug(message);
  }
  TypedQuery<JpaActionLogImpl> limittedQuery=JPA.em().createQuery(queryText.toString(),JpaActionLogImpl.class);
  limittedQuery.setFirstResult(offset);
  limittedQuery.setMaxResults(limit);
  for (  String key : params.keySet())   limittedQuery.setParameter(key,params.get(key));
  TypedQuery<JpaActionLogImpl> query=JPA.em().createQuery(queryText.toString(),JpaActionLogImpl.class);
  for (  String key : params.keySet())   query.setParameter(key,params.get(key));
  JpaSearchResultsImpl<ActionLog> result=new JpaSearchResultsImpl(filter,direction,orderBy,offset,limit,(List)limittedQuery.getResultList(),query.getResultList().size());
  return result;
}","@Override public SearchResult<ActionLog> filterSearchActionLogs(SearchFilter filter,SearchOrder orderBy,SearchDirection direction,int offset,int limit){
  int paramIndex=1;
  Map<String,Object> params=new HashMap<String,Object>();
  ANDList andList=new ANDList();
  ORList orList=new ORList();
  for (  String searchText : filter.getSearchText()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),""String_Node_Str"" + searchText + ""String_Node_Str"");
  }
  andList.add(orList);
  orList=new ORList();
  for (  String stateName : filter.getStates()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),stateName);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Person assignee : filter.getAssignees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),assignee);
  }
  andList.add(orList);
  orList=new ORList();
  for (  EmbargoType embargo : filter.getEmbargoTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),embargo);
  }
  andList.add(orList);
  orList=new ORList();
  for (  Semester semester : filter.getGraduationSemesters()) {
    ANDList semesterList=new ANDList();
    if (semester.year != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.year);
    }
    if (semester.month != null) {
      semesterList.add(new Statement(""String_Node_Str"" + paramIndex));
      params.put(""String_Node_Str"" + (paramIndex++),semester.month);
    }
    if (semesterList.size() > 0)     orList.add(semesterList);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String degree : filter.getDegrees()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),degree);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String department : filter.getDepartments()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),department);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String college : filter.getColleges()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),college);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String major : filter.getMajors()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),major);
  }
  andList.add(orList);
  orList=new ORList();
  for (  String docType : filter.getDocumentTypes()) {
    orList.add(new Statement(""String_Node_Str"" + paramIndex));
    params.put(""String_Node_Str"" + (paramIndex++),docType);
  }
  andList.add(orList);
  if (filter.getUMIRelease() != null) {
    if (filter.getUMIRelease()) {
      andList.add(new Statement(""String_Node_Str""));
    }
 else {
      andList.add(new Statement(""String_Node_Str""));
    }
  }
  if (filter.getSubmissionDateRangeStart() != null && filter.getSubmissionDateRangeEnd() != null) {
    Date start=filter.getSubmissionDateRangeStart();
    Date end=filter.getSubmissionDateRangeEnd();
    andList.add(new Statement(""String_Node_Str"" + paramIndex));
    andList.add(new Statement(""String_Node_Str"" + (paramIndex + 1)));
    params.put(""String_Node_Str"" + (paramIndex++),start);
    params.put(""String_Node_Str"" + (paramIndex++),end);
  }
  StringBuilder queryText=new StringBuilder();
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  queryText.append(""String_Node_Str"");
  params.put(""String_Node_Str"",AttachmentType.PRIMARY);
  if (andList.size() > 0) {
    queryText.append(""String_Node_Str"");
    andList.buildClause(queryText);
    queryText.append(""String_Node_Str"");
  }
  queryText.append(""String_Node_Str"");
  String orderByClause=ACTION_LOG_ORDER_BY_COLUMNS[orderBy.ordinal()];
  if (direction == SearchDirection.DESCENDING)   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
 else   orderByClause=orderByClause.replaceAll(""String_Node_Str"",""String_Node_Str"");
  queryText.append(""String_Node_Str"" + orderByClause);
  if (Logger.isDebugEnabled()) {
    String message=""String_Node_Str"" + queryText.toString() + ""String_Node_Str"";
    for (    String key : params.keySet()) {
      message+=""String_Node_Str"" + key + ""String_Node_Str""+ params.get(key)+ ""String_Node_Str"";
    }
    Logger.debug(message);
  }
  TypedQuery<JpaActionLogImpl> limittedQuery=JPA.em().createQuery(queryText.toString(),JpaActionLogImpl.class);
  limittedQuery.setFirstResult(offset);
  limittedQuery.setMaxResults(limit);
  for (  String key : params.keySet())   limittedQuery.setParameter(key,params.get(key));
  TypedQuery<JpaActionLogImpl> query=JPA.em().createQuery(queryText.toString(),JpaActionLogImpl.class);
  for (  String key : params.keySet())   query.setParameter(key,params.get(key));
  JpaSearchResultsImpl<ActionLog> result=new JpaSearchResultsImpl(filter,direction,orderBy,offset,limit,(List)limittedQuery.getResultList(),query.getResultList().size());
  return result;
}",0.9965366387167336
189413,"@Security(RoleType.STUDENT) public static void license(Long subId){
  Submission sub=subRepo.findSubmission(subId);
  if (sub == null) {
    error(""String_Node_Str"");
  }
 else {
    Person submitter=context.getPerson();
    if (sub.getSubmitter() != submitter)     unauthorized();
    String licenseText=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
    if (params.get(""String_Node_Str"") != null) {
      if (params.get(""String_Node_Str"") == null) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        docInfo(subId);
      }
    }
    render(subId,licenseText);
  }
}","@Security(RoleType.STUDENT) public static void license(Long subId){
  Submission sub=subRepo.findSubmission(subId);
  if (sub == null) {
    error(""String_Node_Str"");
  }
 else {
    Person submitter=context.getPerson();
    if (sub.getSubmitter() != submitter)     unauthorized();
    String licenseText=Play.configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
    if (params.get(""String_Node_Str"") != null) {
      if (params.get(""String_Node_Str"") == null) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        sub.setLicenseAgreementDate(new Date());
        docInfo(subId);
      }
    }
    render(subId,licenseText);
  }
}",0.962566844919786
189414,"/** 
 * This is the login page for a particular authentication method. The user will arrive from the loginList method above. There are two cases for this method either the method is Implicit or Explicit. In the Explicit case the user is presented with a login screen and when they provide a correct username/password pair they are logged in. In the Implicit case the user is redirected to authenticate via an external service.
 * @param methodName The spring bean name of the authentication method.
 */
public static void loginMethod(String methodName){
  flash.keep(""String_Node_Str"");
  notFoundIfNull(methodName);
  if (params.get(""String_Node_Str"") != null)   Application.index();
  AuthenticationMethod method=null;
  try {
    method=(AuthenticationMethod)Spring.getBean(methodName);
  }
 catch (  Throwable t) {
    notFound();
  }
  if (!method.isEnabled())   error(""String_Node_Str"" + methodName + ""String_Node_Str"");
  if (method instanceof AuthenticationMethod.Implicit) {
    AuthenticationMethod.Implicit implicitMethod=(AuthenticationMethod.Implicit)method;
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",methodName);
    ActionDefinition routeDefinition=Router.reverse(""String_Node_Str"",routeArgs);
    routeDefinition.absolute();
    String returnURL=routeDefinition.url;
    String initiationRedirect=implicitMethod.startAuthentication(request,returnURL);
    if (initiationRedirect == null) {
      loginReturn(methodName);
    }
 else {
      redirect(initiationRedirect);
    }
  }
 else   if (method instanceof AuthenticationMethod.Explicit) {
    AuthenticationMethod.Explicit explicitMethod=(AuthenticationMethod.Explicit)method;
    if (params.get(""String_Node_Str"") != null) {
      String username=params.get(""String_Node_Str"");
      String password=params.get(""String_Node_Str"");
      AuthenticationResult result=explicitMethod.authenticate(username,password,request);
      if (AuthenticationResult.SUCCESSFULL == result && context.getPerson() != null) {
        Person person=context.getPerson();
        session.put(""String_Node_Str"",person.getId());
        session.put(""String_Node_Str"",person.getFirstName());
        session.put(""String_Node_Str"",person.getLastName());
        session.put(""String_Node_Str"",person.getDisplayName());
        if (flash.get(""String_Node_Str"") != null) {
          String url=flash.get(""String_Node_Str"");
          flash.remove(""String_Node_Str"");
          redirect(url);
        }
 else {
          redirect(""String_Node_Str"");
        }
      }
      validation.addError(""String_Node_Str"",""String_Node_Str"");
      render(method,username,password);
    }
    render(method);
  }
  error(""String_Node_Str"" + methodName + ""String_Node_Str"");
}","/** 
 * This is the login page for a particular authentication method. The user will arrive from the loginList method above. There are two cases for this method either the method is Implicit or Explicit. In the Explicit case the user is presented with a login screen and when they provide a correct username/password pair they are logged in. In the Implicit case the user is redirected to authenticate via an external service.
 * @param methodName The spring bean name of the authentication method.
 */
public static void loginMethod(String methodName){
  flash.keep(""String_Node_Str"");
  notFoundIfNull(methodName);
  if (params.get(""String_Node_Str"") != null)   Application.index();
  AuthenticationMethod method=null;
  try {
    method=(AuthenticationMethod)Spring.getBean(methodName);
  }
 catch (  Throwable t) {
    notFound();
  }
  if (!method.isEnabled())   error(""String_Node_Str"" + methodName + ""String_Node_Str"");
  if (method instanceof AuthenticationMethod.Implicit) {
    AuthenticationMethod.Implicit implicitMethod=(AuthenticationMethod.Implicit)method;
    Map<String,Object> routeArgs=new HashMap<String,Object>();
    routeArgs.put(""String_Node_Str"",methodName);
    ActionDefinition routeDefinition=Router.reverse(""String_Node_Str"",routeArgs);
    routeDefinition.absolute();
    String returnURL=routeDefinition.url;
    String initiationRedirect=implicitMethod.startAuthentication(request,returnURL);
    if (initiationRedirect == null) {
      loginReturn(methodName);
    }
 else {
      redirect(initiationRedirect);
    }
  }
 else   if (method instanceof AuthenticationMethod.Explicit) {
    AuthenticationMethod.Explicit explicitMethod=(AuthenticationMethod.Explicit)method;
    if (params.get(""String_Node_Str"") != null) {
      String username=params.get(""String_Node_Str"");
      String password=params.get(""String_Node_Str"");
      AuthenticationResult result=explicitMethod.authenticate(username,password,request);
      if (AuthenticationResult.SUCCESSFULL == result && context.getPerson() != null) {
        Person person=context.getPerson();
        session.put(""String_Node_Str"",person.getId());
        session.put(""String_Node_Str"",person.getFirstName());
        session.put(""String_Node_Str"",person.getLastName());
        session.put(""String_Node_Str"",person.getDisplayName());
        if (flash.get(""String_Node_Str"") != null) {
          String url=flash.get(""String_Node_Str"");
          flash.remove(""String_Node_Str"");
          if (url != null) {
            redirect(url);
          }
        }
        Application.index();
      }
      validation.addError(""String_Node_Str"",""String_Node_Str"");
      render(method,username,password);
    }
    render(method);
  }
  error(""String_Node_Str"" + methodName + ""String_Node_Str"");
}",0.9749233267183836
189415,"/** 
 * This method is run before every action in any controller (with the
 * @With() annotation !). This method checks to see if someone has been previously authenticated and if so logs them in to the current security context. When someone is logged in their unique person id will be stored on the session as ""personId"". So this method simply checks that parameter and looks the user in the corresponding repository. In addition if the action is annotated with a @Security() annotation then this method will perform those minimal security checks. So if the annotation says that to access the action all users must be at least a REVIEWER then this method will check that. There are two resulting conditions, either there is no currently authenticated user or they do not meet the required access level. In the first case the user would be sent off to login, remembering where to go after completing authentication. For the other case where they are already logged in but don't meet the conditions then they will receive an unauthorized message.
 */
@Before(unless={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public static void securityCheck(){
  context.logout();
  Long personId=null;
  try {
    personId=Long.valueOf(session.get(""String_Node_Str""));
  }
 catch (  RuntimeException re) {
  }
  Person person=null;
  if (personId != null) {
    person=personRepo.findPerson(personId);
    context.login(person);
  }
  Security security=getActionAnnotation(Security.class);
  if (security == null)   security=getControllerInheritedAnnotation(Security.class);
  if (security != null) {
    if (person == null) {
      flash.put(""String_Node_Str"",""String_Node_Str"".equals(request.method) ? request.url : null);
      loginList();
    }
    RoleType expectedRole=security.value();
    RoleType actualRole=person.getRole();
    if (expectedRole.ordinal() > actualRole.ordinal())     forbidden();
  }
}","/** 
 * This method is run before every action in any controller (with the
 * @With() annotation !). This method checks to see if someone has been previously authenticated and if so logs them in to the current security context. When someone is logged in their unique person id will be stored on the session as ""personId"". So this method simply checks that parameter and looks the user in the corresponding repository. In addition if the action is annotated with a @Security() annotation then this method will perform those minimal security checks. So if the annotation says that to access the action all users must be at least a REVIEWER then this method will check that. There are two resulting conditions, either there is no currently authenticated user or they do not meet the required access level. In the first case the user would be sent off to login, remembering where to go after completing authentication. For the other case where they are already logged in but don't meet the conditions then they will receive an unauthorized message.
 */
@Before(unless={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}) public static void securityCheck(){
  context.logout();
  Long personId=null;
  try {
    personId=Long.valueOf(session.get(""String_Node_Str""));
  }
 catch (  RuntimeException re) {
  }
  Person person=null;
  if (personId != null) {
    person=personRepo.findPerson(personId);
    context.login(person);
  }
  Security security=getActionAnnotation(Security.class);
  if (security == null)   security=getControllerInheritedAnnotation(Security.class);
  if (security != null) {
    if (person == null) {
      flash.put(""String_Node_Str"",request.url);
      loginList();
    }
    RoleType expectedRole=security.value();
    RoleType actualRole=person.getRole();
    if (expectedRole.ordinal() > actualRole.ordinal())     forbidden();
  }
}",0.9830238726790452
189416,"/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void verifyPersonalInformation(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub=null;
  if (subId != null) {
    sub=subRepo.findSubmission(subId);
    if (sub.getSubmitter() != submitter)     unauthorized();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentEmailAddress();
    }
  }
  if (params.get(""String_Node_Str"") != null) {
    if (firstName == null || firstName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (lastName == null || lastName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    Integer birthYearInt=null;
    if (birthYear != null && birthYear.trim().length() > 0) {
      try {
        birthYearInt=Integer.valueOf(birthYear);
        if (birthYearInt < 1900 || birthYearInt > (new Date().getYear() + 1900))         validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      NumberFormatException nfe) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!isValidDepartment(department))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidDegree(degree))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidMajor(major))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permPhone == null || permPhone.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permAddress == null || permAddress.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permEmail != null && permEmail.trim().length() > 0) {
      try {
        new InternetAddress(permEmail).validate();
      }
 catch (      AddressException ae) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (currentPhone != null && currentPhone.trim().length() > 0) {
      validation.addError(""String_Node_Str"",""String_Node_Str"");
    }
    if (!validation.hasErrors()) {
      if (sub == null)       sub=subRepo.createSubmission(submitter);
      sub.setStudentFirstName(firstName);
      sub.setStudentMiddleName(middleName);
      sub.setStudentLastName(lastName);
      sub.setStudentBirthYear(birthYearInt);
      sub.setDepartment(department);
      sub.setDegree(degree);
      sub.setMajor(major);
      submitter.setPermanentPhoneNumber(permPhone);
      submitter.setPermanentPostalAddress(permAddress);
      submitter.setPermanentEmailAddress(permEmail);
      submitter.setCurrentPhoneNumber(currentPhone);
      submitter.setCurrentPostalAddress(currentAddress);
      sub.save();
      submitter.save();
      license(sub.getId());
    }
  }
 else   if (sub != null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=sub.getDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=sub.getDegree();
    if (!isValidDegree(degree))     degree=null;
    major=sub.getMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
  }
 else {
    firstName=submitter.getFirstName();
    middleName=submitter.getMiddleName();
    lastName=submitter.getLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=submitter.getCurrentDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=submitter.getCurrentDegree();
    if (!isValidDegree(degree))     degree=null;
    major=submitter.getCurrentMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
  }
  render(submitter,subId,disabledFields,firstName,middleName,lastName,birthYear,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}","/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void verifyPersonalInformation(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub=null;
  if (subId != null) {
    sub=subRepo.findSubmission(subId);
    if (sub.getSubmitter() != submitter)     unauthorized();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentPhone=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      currentPhone=submitter.getCurrentPhoneNumber();
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentPostalAddress();
    }
  }
  if (params.get(""String_Node_Str"") != null) {
    if (firstName == null || firstName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (lastName == null || lastName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    Integer birthYearInt=null;
    if (birthYear != null && birthYear.trim().length() > 0) {
      try {
        birthYearInt=Integer.valueOf(birthYear);
        if (birthYearInt < 1900 || birthYearInt > Calendar.getInstance().get(Calendar.YEAR) + 1900)         validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      NumberFormatException nfe) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!isValidDepartment(department))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidDegree(degree))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidMajor(major))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permPhone == null || permPhone.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permAddress == null || permAddress.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permEmail != null && permEmail.trim().length() > 0) {
      try {
        new InternetAddress(permEmail).validate();
      }
 catch (      AddressException ae) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!validation.hasErrors()) {
      if (sub == null)       sub=subRepo.createSubmission(submitter);
      sub.setStudentFirstName(firstName);
      sub.setStudentMiddleName(middleName);
      sub.setStudentLastName(lastName);
      sub.setStudentBirthYear(birthYearInt);
      sub.setDepartment(department);
      sub.setDegree(degree);
      sub.setMajor(major);
      submitter.setPermanentPhoneNumber(permPhone);
      submitter.setPermanentPostalAddress(permAddress);
      submitter.setPermanentEmailAddress(permEmail);
      submitter.setCurrentPhoneNumber(currentPhone);
      submitter.setCurrentPostalAddress(currentAddress);
      sub.save();
      submitter.save();
      license(sub.getId());
    }
  }
 else   if (sub != null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=sub.getDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=sub.getDegree();
    if (!isValidDegree(degree))     degree=null;
    major=sub.getMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
  }
 else {
    firstName=submitter.getFirstName();
    middleName=submitter.getMiddleName();
    lastName=submitter.getLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=submitter.getCurrentDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=submitter.getCurrentDegree();
    if (!isValidDegree(degree))     degree=null;
    major=submitter.getCurrentMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentPhone=submitter.getCurrentPhoneNumber();
    currentAddress=submitter.getCurrentPostalAddress();
  }
  render(submitter,subId,disabledFields,firstName,middleName,lastName,birthYear,department,degree,major,permPhone,permAddress,permEmail,currentPhone,currentAddress);
}",0.788577282622615
189417,"@Security(RoleType.STUDENT) public static void fileUpload(){
  render(""String_Node_Str"");
}","@Security(RoleType.STUDENT) public static void fileUpload(Long subId){
  render(""String_Node_Str"");
}",0.9479166666666666
189418,"@Security(RoleType.STUDENT) public static void confirmAndSubmit(Long id){
  SecurityContextImpl context=Spring.getBeanOfType(SecurityContextImpl.class);
  JpaSubmissionRepositoryImpl submissions=Spring.getBeanOfType(JpaSubmissionRepositoryImpl.class);
  if (id != null) {
    Submission submission=submissions.findSubmission(id);
    render(context,submission);
  }
 else {
    render(context);
  }
}","@Security(RoleType.STUDENT) public static void confirmAndSubmit(Long subId){
  render(subId);
}",0.3595959595959596
189419,"/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void verifyPersonalInformation(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub=null;
  if (subId != null) {
    sub=subRepo.findSubmission(subId);
    if (sub.getSubmitter() != submitter)     unauthorized();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentEmail=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getCurrentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        currentEmail=submitter.getCurrentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentEmailAddress();
    }
  }
  if (params.get(""String_Node_Str"") != null) {
    if (firstName == null || firstName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (lastName == null || lastName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    Integer birthYearInt=null;
    if (birthYear != null && birthYear.trim().length() > 0) {
      try {
        birthYearInt=Integer.valueOf(birthYear);
        if (birthYearInt < 1900 || birthYearInt > (new Date().getYear() + 1900))         validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      NumberFormatException nfe) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!isValidDepartment(department))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidDegree(degree))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidDepartment(major))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permPhone == null || permPhone.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permAddress == null || permAddress.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permEmail != null && permEmail.trim().length() > 0) {
      try {
        new InternetAddress(permEmail).validate();
      }
 catch (      AddressException ae) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (currentEmail != null && currentEmail.trim().length() > 0) {
      try {
        new InternetAddress(currentEmail).validate();
      }
 catch (      AddressException ae) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!validation.hasErrors()) {
      if (sub == null)       sub=subRepo.createSubmission(submitter);
      sub.setStudentFirstName(firstName);
      sub.setStudentMiddleName(middleName);
      sub.setStudentLastName(lastName);
      sub.setStudentBirthYear(birthYearInt);
      sub.setDepartment(department);
      sub.setDegree(degree);
      sub.setMajor(major);
      submitter.setPermanentPhoneNumber(permPhone);
      submitter.setPermanentPostalAddress(permAddress);
      submitter.setPermanentEmailAddress(permEmail);
      submitter.setCurrentEmailAddress(currentEmail);
      submitter.setCurrentPostalAddress(currentAddress);
      sub.save();
      submitter.save();
      license(sub.getId());
    }
  }
 else   if (sub != null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=sub.getDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=sub.getDegree();
    if (!isValidDegree(degree))     degree=null;
    major=sub.getMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentEmail=submitter.getCurrentEmailAddress();
    currentAddress=submitter.getCurrentPostalAddress();
  }
 else {
    firstName=submitter.getFirstName();
    middleName=submitter.getMiddleName();
    lastName=submitter.getLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=submitter.getCurrentDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=submitter.getCurrentDegree();
    if (!isValidDegree(degree))     degree=null;
    major=submitter.getCurrentMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentEmail=submitter.getCurrentEmailAddress();
    currentAddress=submitter.getCurrentPostalAddress();
  }
  render(submitter,subId,disabledFields,firstName,middleName,lastName,birthYear,department,degree,major,permPhone,permAddress,permEmail,currentEmail,currentAddress);
}","/** 
 * The first screen of the submission process which allows the student to supply their identity, affiliation, and contact information. We default the data displayed to information from the submitter's person object if available. After successfully completing this step a new submission is persisted in the database and the user is sent on to the license step.
 * @param subId The id of the submission being edited. This may be null for this step, all other steps this id is required.
 */
@Security(RoleType.STUDENT) public static void verifyPersonalInformation(Long subId){
  if (params.get(""String_Node_Str"") != null)   Application.index();
  Person submitter=context.getPerson();
  Submission sub=null;
  if (subId != null) {
    sub=subRepo.findSubmission(subId);
    if (sub.getSubmitter() != submitter)     unauthorized();
  }
  String firstName=params.get(""String_Node_Str"");
  String middleName=params.get(""String_Node_Str"");
  String lastName=params.get(""String_Node_Str"");
  String birthYear=params.get(""String_Node_Str"");
  String department=params.get(""String_Node_Str"");
  String degree=params.get(""String_Node_Str"");
  String major=params.get(""String_Node_Str"");
  String permPhone=params.get(""String_Node_Str"");
  String permAddress=params.get(""String_Node_Str"");
  String permEmail=params.get(""String_Node_Str"");
  String currentEmail=params.get(""String_Node_Str"");
  String currentAddress=params.get(""String_Node_Str"");
  List<String> disabledFields=new ArrayList<String>();
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getFirstName() != null) {
      disabledFields.add(""String_Node_Str"");
      firstName=submitter.getFirstName();
    }
    if (submitter.getMiddleName() != null) {
      disabledFields.add(""String_Node_Str"");
      middleName=submitter.getMiddleName();
    }
    if (submitter.getLastName() != null) {
      disabledFields.add(""String_Node_Str"");
      lastName=submitter.getLastName();
    }
    if (submitter.getBirthYear() != null) {
      if (submitter.getBirthYear() == null)       birthYear=""String_Node_Str"";
 else       birthYear=String.valueOf(submitter.getBirthYear());
      disabledFields.add(""String_Node_Str"");
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (isValidDepartment(submitter.getCurrentDepartment())) {
      disabledFields.add(""String_Node_Str"");
      department=submitter.getCurrentDepartment();
    }
    if (isValidDegree(submitter.getCurrentDegree())) {
      disabledFields.add(""String_Node_Str"");
      degree=submitter.getCurrentDegree();
    }
    if (isValidMajor(submitter.getCurrentMajor())) {
      disabledFields.add(""String_Node_Str"");
      major=submitter.getCurrentMajor();
    }
  }
  if (isFieldGroupLocked(""String_Node_Str"")) {
    if (submitter.getPermanentPhoneNumber() != null) {
      disabledFields.add(""String_Node_Str"");
      permPhone=submitter.getPermanentPhoneNumber();
    }
    if (submitter.getPermanentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      permAddress=submitter.getPermanentEmailAddress();
    }
    if (submitter.getPermanentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getPermanentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        permEmail=submitter.getPermanentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentEmailAddress() != null) {
      try {
        new InternetAddress(submitter.getCurrentEmailAddress()).validate();
        disabledFields.add(""String_Node_Str"");
        currentEmail=submitter.getCurrentEmailAddress();
      }
 catch (      AddressException ae) {
      }
    }
    if (submitter.getCurrentPostalAddress() != null) {
      disabledFields.add(""String_Node_Str"");
      currentAddress=submitter.getCurrentEmailAddress();
    }
  }
  if (params.get(""String_Node_Str"") != null) {
    if (firstName == null || firstName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (lastName == null || lastName.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    Integer birthYearInt=null;
    if (birthYear != null && birthYear.trim().length() > 0) {
      try {
        birthYearInt=Integer.valueOf(birthYear);
        if (birthYearInt < 1900 || birthYearInt > (new Date().getYear() + 1900))         validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
 catch (      NumberFormatException nfe) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!isValidDepartment(department))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidDegree(degree))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (!isValidMajor(major))     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permPhone == null || permPhone.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permAddress == null || permAddress.trim().length() == 0)     validation.addError(""String_Node_Str"",""String_Node_Str"");
    if (permEmail != null && permEmail.trim().length() > 0) {
      try {
        new InternetAddress(permEmail).validate();
      }
 catch (      AddressException ae) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (currentEmail != null && currentEmail.trim().length() > 0) {
      try {
        new InternetAddress(currentEmail).validate();
      }
 catch (      AddressException ae) {
        validation.addError(""String_Node_Str"",""String_Node_Str"");
      }
    }
    if (!validation.hasErrors()) {
      if (sub == null)       sub=subRepo.createSubmission(submitter);
      sub.setStudentFirstName(firstName);
      sub.setStudentMiddleName(middleName);
      sub.setStudentLastName(lastName);
      sub.setStudentBirthYear(birthYearInt);
      sub.setDepartment(department);
      sub.setDegree(degree);
      sub.setMajor(major);
      submitter.setPermanentPhoneNumber(permPhone);
      submitter.setPermanentPostalAddress(permAddress);
      submitter.setPermanentEmailAddress(permEmail);
      submitter.setCurrentEmailAddress(currentEmail);
      submitter.setCurrentPostalAddress(currentAddress);
      sub.save();
      submitter.save();
      license(sub.getId());
    }
  }
 else   if (sub != null) {
    firstName=sub.getStudentFirstName();
    middleName=sub.getStudentMiddleName();
    lastName=sub.getStudentLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=sub.getDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=sub.getDegree();
    if (!isValidDegree(degree))     degree=null;
    major=sub.getMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentEmail=submitter.getCurrentEmailAddress();
    currentAddress=submitter.getCurrentPostalAddress();
  }
 else {
    firstName=submitter.getFirstName();
    middleName=submitter.getMiddleName();
    lastName=submitter.getLastName();
    if (submitter.getBirthYear() == null)     birthYear=""String_Node_Str"";
 else     birthYear=String.valueOf(submitter.getBirthYear());
    department=submitter.getCurrentDepartment();
    if (!isValidDepartment(department))     department=null;
    degree=submitter.getCurrentDegree();
    if (!isValidDegree(degree))     degree=null;
    major=submitter.getCurrentMajor();
    if (!isValidMajor(major))     major=null;
    permPhone=submitter.getPermanentPhoneNumber();
    permAddress=submitter.getPermanentPostalAddress();
    permEmail=submitter.getPermanentEmailAddress();
    currentEmail=submitter.getCurrentEmailAddress();
    currentAddress=submitter.getCurrentPostalAddress();
  }
  render(submitter,subId,disabledFields,firstName,middleName,lastName,birthYear,department,degree,major,permPhone,permAddress,permEmail,currentEmail,currentAddress);
}",0.99907879383406
189420,"/** 
 * Generate Persons, Colleges, Departments, Majors, Degrees, Document Types and Graduation Months. 
 */
@Override public void doJob(){
  try {
    PersonRepository personRepo=Spring.getBeanOfType(PersonRepository.class);
    SettingsRepository settingsRepo=Spring.getBeanOfType(SettingsRepository.class);
    for (    PersonsArray personDefinition : PERSONS_DEFINITIONS) {
      personRepo.createPerson(personDefinition.netId,personDefinition.email,personDefinition.firstName,personDefinition.lastName,personDefinition.role).save();
    }
    for (    String collegeDefinition : COLLEGES_DEFINITIONS) {
      settingsRepo.createCollege(collegeDefinition).save();
    }
    for (    String departmentDefinition : DEPARTMENTS_DEFINITIONS) {
      settingsRepo.createDepartment(departmentDefinition).save();
    }
    for (    String majorDefinition : MAJORS_DEFINITIONS) {
      settingsRepo.createMajor(majorDefinition).save();
    }
    for (    DegreeLevelArray degreeDefinition : DEGREES_DEFINITIONS) {
      settingsRepo.createDegree(degreeDefinition.name,degreeDefinition.degreeLevel).save();
    }
    for (    DegreeLevelArray docTypeDefinition : DOCTYPES_DEFINITIONS) {
      settingsRepo.createDocumentType(docTypeDefinition.name,docTypeDefinition.degreeLevel).save();
    }
    for (    int gradMonthDefinition : GRAD_MONTHS_DEFINITIONS) {
      settingsRepo.createGraduationMonth(gradMonthDefinition).save();
    }
    JPA.em().flush();
  }
 catch (  Exception e) {
    Logger.error(e,""String_Node_Str"");
  }
}","/** 
 * Generate Persons, Colleges, Departments, Majors, Degrees, Document Types and Graduation Months. 
 */
@Override public void doJob(){
  try {
    SecurityContext context=Spring.getBeanOfType(SecurityContext.class);
    PersonRepository personRepo=Spring.getBeanOfType(PersonRepository.class);
    SettingsRepository settingsRepo=Spring.getBeanOfType(SettingsRepository.class);
    context.turnOffAuthorization();
    try {
      for (      PersonsArray personDefinition : PERSONS_DEFINITIONS) {
        personRepo.createPerson(personDefinition.netId,personDefinition.email,personDefinition.firstName,personDefinition.lastName,personDefinition.role).save();
      }
      for (      String collegeDefinition : COLLEGES_DEFINITIONS) {
        settingsRepo.createCollege(collegeDefinition).save();
      }
      for (      String departmentDefinition : DEPARTMENTS_DEFINITIONS) {
        settingsRepo.createDepartment(departmentDefinition).save();
      }
      for (      String majorDefinition : MAJORS_DEFINITIONS) {
        settingsRepo.createMajor(majorDefinition).save();
      }
      for (      DegreeLevelArray degreeDefinition : DEGREES_DEFINITIONS) {
        settingsRepo.createDegree(degreeDefinition.name,degreeDefinition.degreeLevel).save();
      }
      for (      DegreeLevelArray docTypeDefinition : DOCTYPES_DEFINITIONS) {
        settingsRepo.createDocumentType(docTypeDefinition.name,docTypeDefinition.degreeLevel).save();
      }
      for (      int gradMonthDefinition : GRAD_MONTHS_DEFINITIONS) {
        settingsRepo.createGraduationMonth(gradMonthDefinition).save();
      }
      JPA.em().flush();
    }
  finally {
      context.restoreAuthorization();
    }
  }
 catch (  Exception e) {
    Logger.error(e,""String_Node_Str"");
  }
}",0.9060504712678624
189421,"private void setItems(JSONArray j) throws JSONException {
  if (curLoadPage == 1) {
    ArrayList<JSONObject> jsonObjectArray=new ArrayList<JSONObject>(j.length());
    containedIds.clear();
    for (int i=0; i < j.length(); i++) {
      JSONObject jj=j.getJSONObject(i);
      jsonObjectArray.add(jj);
      containedIds.add(jj.getLong(""String_Node_Str""));
    }
    list.setAdapter(new PostListAdapter(getActivity(),jsonObjectArray));
  }
 else {
    PostListAdapter oldContent=getPostListAdapter();
    for (int i=0; i < j.length(); i++) {
      JSONObject jj=j.getJSONObject(i);
      if (containedIds.contains(jj.getLong(""String_Node_Str"")))       continue;
      oldContent.add(jj);
      containedIds.add(jj.getLong(""String_Node_Str""));
    }
    oldContent.notifyDataSetChanged();
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
  loadFinished=true;
}","private void setItems(JSONArray j) throws JSONException {
  if (curLoadPage == 1 || getPostListAdapter() == null) {
    ArrayList<JSONObject> jsonObjectArray=new ArrayList<JSONObject>(j.length());
    containedIds.clear();
    for (int i=0; i < j.length(); i++) {
      JSONObject jj=j.getJSONObject(i);
      jsonObjectArray.add(jj);
      containedIds.add(jj.getLong(""String_Node_Str""));
    }
    list.setAdapter(new PostListAdapter(getActivity(),jsonObjectArray));
  }
 else {
    PostListAdapter oldContent=getPostListAdapter();
    for (int i=0; i < j.length(); i++) {
      JSONObject jj=j.getJSONObject(i);
      if (containedIds.contains(jj.getLong(""String_Node_Str"")))       continue;
      oldContent.add(jj);
      containedIds.add(jj.getLong(""String_Node_Str""));
    }
    oldContent.notifyDataSetChanged();
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
  loadFinished=true;
}",0.9824175824175824
189422,"public void loadTimeline(){
  final TwAjax t=new TwAjax(getActivity(),true,true);
  t.getUrlContent(Max.getServer(getActivity()) + ""String_Node_Str"" + String.valueOf(ITEMS_PER_PAGE)+ ""String_Node_Str""+ String.valueOf(curLoadPage),new Runnable(){
    @Override public void run(){
      try {
        JSONArray j=(JSONArray)t.getJsonResult();
        setItems(j);
      }
 catch (      Exception e) {
        list.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.pl_error_listitem,android.R.id.text1,new String[]{""String_Node_Str"" + e.getMessage(),Max.Hexdump(t.getResult().getBytes())}));
        e.printStackTrace();
      }
      hideProgBar();
    }
  }
);
}","public void loadTimeline(){
  final TwAjax t=new TwAjax(getActivity(),true,true);
  int ipp=ITEMS_PER_PAGE;
  int cp=curLoadPage;
  if (getPostListAdapter() == null) {
    ipp=ITEMS_PER_PAGE * curLoadPage;
    cp=1;
  }
  t.getUrlContent(Max.getServer(getActivity()) + ""String_Node_Str"" + String.valueOf(ipp)+ ""String_Node_Str""+ String.valueOf(cp),new Runnable(){
    @Override public void run(){
      try {
        JSONArray j=(JSONArray)t.getJsonResult();
        setItems(j);
      }
 catch (      Exception e) {
        list.setAdapter(new ArrayAdapter<String>(getActivity(),R.layout.pl_error_listitem,android.R.id.text1,new String[]{t.getURL(),""String_Node_Str"" + e.getMessage(),Max.getStackTrace(e),Max.Hexdump(t.getResult().getBytes())}));
        e.printStackTrace();
      }
      hideProgBar();
    }
  }
);
}",0.7758389261744967
189423,"protected void writeUnstoreObject(Property prop,Class propType,IndentedWriter iw) throws IOException {
  IndirectPolicy policy=indirectingPolicy(prop,propType);
  if (policy == IndirectPolicy.DEFINITELY_INDIRECT || policy == IndirectPolicy.INDIRECT_ON_EXCEPTION) {
    iw.println(""String_Node_Str"");
    iw.println(""String_Node_Str"");
    iw.println(""String_Node_Str"" + prop.getName() + ""String_Node_Str""+ prop.getSimpleTypeName()+ ""String_Node_Str"");
  }
 else   if (policy == IndirectPolicy.DEFINITELY_DIRECT)   super.writeUnstoreObject(prop,propType,iw);
 else   throw new InternalError(""String_Node_Str"" + policy);
}","protected void writeUnstoreObject(Property prop,Class propType,IndentedWriter iw) throws IOException {
  IndirectPolicy policy=indirectingPolicy(prop,propType);
  if (policy == IndirectPolicy.DEFINITELY_INDIRECT || policy == IndirectPolicy.INDIRECT_ON_EXCEPTION) {
    iw.println(""String_Node_Str"");
    iw.println(""String_Node_Str"");
    iw.upIndent();
    iw.println(""String_Node_Str"");
    iw.println(""String_Node_Str"");
    iw.println(""String_Node_Str"" + prop.getName() + ""String_Node_Str""+ prop.getSimpleTypeName()+ ""String_Node_Str"");
    iw.downIndent();
    iw.println(""String_Node_Str"");
  }
 else   if (policy == IndirectPolicy.DEFINITELY_DIRECT)   super.writeUnstoreObject(prop,propType,iw);
 else   throw new InternalError(""String_Node_Str"" + policy);
}",0.8953068592057761
189424,"public void writeDelegator(Class intfcl,String genclass,Writer w) throws IOException {
  IndentedWriter iw=CodegenUtils.toIndentedWriter(w);
  String pkg=genclass.substring(0,genclass.lastIndexOf('.'));
  String sgc=CodegenUtils.fqcnLastElement(genclass);
  String scn=(superclass != null ? ClassUtils.simpleClassName(superclass) : null);
  String sin=ClassUtils.simpleClassName(intfcl);
  String[] eins=null;
  if (extraInterfaces != null) {
    eins=new String[extraInterfaces.length];
    for (int i=0, len=extraInterfaces.length; i < len; ++i)     eins[i]=ClassUtils.simpleClassName(extraInterfaces[i]);
  }
  Set imports=new TreeSet(classComp);
  Method[] methods=intfcl.getMethods();
  if (!CodegenUtils.inSamePackage(intfcl.getName(),genclass))   imports.add(intfcl);
  if (superclass != null && !CodegenUtils.inSamePackage(superclass.getName(),genclass))   imports.add(superclass);
  if (extraInterfaces != null) {
    for (int i=0, len=extraInterfaces.length; i < len; ++i) {
      Class checkMe=extraInterfaces[i];
      if (!CodegenUtils.inSamePackage(checkMe.getName(),genclass))       imports.add(checkMe);
    }
  }
  ensureImports(genclass,imports,methods);
  if (reflectiveDelegateMethods != null)   ensureImports(genclass,imports,reflectiveDelegateMethods);
  if (reflectiveDelegationPolicy.delegateClass != null && !CodegenUtils.inSamePackage(reflectiveDelegationPolicy.delegateClass.getName(),genclass))   imports.add(reflectiveDelegationPolicy.delegateClass);
  generateBannerComment(iw);
  iw.println(""String_Node_Str"" + pkg + ';');
  iw.println();
  for (Iterator ii=imports.iterator(); ii.hasNext(); )   iw.println(""String_Node_Str"" + ((Class)ii.next()).getName() + ';');
  generateExtraImports(iw);
  iw.println();
  generateClassJavaDocComment(iw);
  iw.print(CodegenUtils.getModifierString(class_modifiers) + ""String_Node_Str"" + sgc);
  if (superclass != null)   iw.print(""String_Node_Str"" + scn);
  iw.print(""String_Node_Str"" + sin);
  if (eins != null)   for (int i=0, len=eins.length; i < len; ++i)   iw.print(""String_Node_Str"" + eins[i]);
  iw.println();
  iw.println(""String_Node_Str"");
  iw.upIndent();
  iw.println(""String_Node_Str"" + sin + ""String_Node_Str"");
  iw.println();
  if (reflectiveDelegateMethods != null)   iw.println(""String_Node_Str"");
  iw.println();
  iw.println(""String_Node_Str"" + sin + ""String_Node_Str"");
  iw.println(""String_Node_Str"");
  iw.upIndent();
  iw.println(""String_Node_Str"");
  if (reflectiveDelegateMethods != null) {
    String delegateClassExpr;
    if (reflectiveDelegationPolicy == ReflectiveDelegationPolicy.USE_MAIN_DELEGATE_INTERFACE)     delegateClassExpr=sin + ""String_Node_Str"";
 else     if (reflectiveDelegationPolicy == ReflectiveDelegationPolicy.USE_RUNTIME_CLASS)     delegateClassExpr=""String_Node_Str"";
 else     delegateClassExpr=ClassUtils.simpleClassName(reflectiveDelegationPolicy.delegateClass) + ""String_Node_Str"";
    iw.println(""String_Node_Str"" + delegateClassExpr + ""String_Node_Str"");
  }
  iw.downIndent();
  iw.println(""String_Node_Str"");
  iw.println();
  if (wrapping_constructor) {
    iw.println(""String_Node_Str"" + ' ' + sgc+ '('+ sin+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  if (default_constructor) {
    iw.println();
    iw.println(""String_Node_Str"" + ' ' + sgc+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  if (inner_setter) {
    iw.println();
    iw.println(CodegenUtils.getModifierString(method_modifiers) + ""String_Node_Str"" + sin+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  if (inner_getter) {
    iw.println();
    iw.println(CodegenUtils.getModifierString(method_modifiers) + ' ' + sin+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  iw.println();
  for (int i=0, len=methods.length; i < len; ++i) {
    Method method=methods[i];
    if (i != 0)     iw.println();
    iw.println(CodegenUtils.methodSignature(method_modifiers,method,null));
    iw.println(""String_Node_Str"");
    iw.upIndent();
    generatePreDelegateCode(intfcl,genclass,method,iw);
    generateDelegateCode(intfcl,genclass,method,iw);
    generatePostDelegateCode(intfcl,genclass,method,iw);
    iw.downIndent();
    iw.println(""String_Node_Str"");
  }
  if (reflectiveDelegateMethods != null) {
    iw.println(""String_Node_Str"");
    for (int i=0, len=reflectiveDelegateMethods.length; i < len; ++i) {
      Method method=reflectiveDelegateMethods[i];
      if (i != 0)       iw.println();
      iw.println(CodegenUtils.methodSignature(method_modifiers,method,null));
      iw.println(""String_Node_Str"");
      iw.upIndent();
      generatePreDelegateCode(intfcl,genclass,method,iw);
      generateReflectiveDelegateCode(intfcl,genclass,method,iw);
      generatePostDelegateCode(intfcl,genclass,method,iw);
      iw.downIndent();
      iw.println(""String_Node_Str"");
    }
  }
  iw.println();
  generateExtraDeclarations(intfcl,genclass,iw);
  iw.downIndent();
  iw.println(""String_Node_Str"");
}","public void writeDelegator(Class intfcl,String genclass,Writer w) throws IOException {
  IndentedWriter iw=CodegenUtils.toIndentedWriter(w);
  String pkg=genclass.substring(0,genclass.lastIndexOf('.'));
  String sgc=CodegenUtils.fqcnLastElement(genclass);
  String scn=(superclass != null ? ClassUtils.simpleClassName(superclass) : null);
  String sin=ClassUtils.simpleClassName(intfcl);
  String[] eins=null;
  if (extraInterfaces != null) {
    eins=new String[extraInterfaces.length];
    for (int i=0, len=extraInterfaces.length; i < len; ++i)     eins[i]=ClassUtils.simpleClassName(extraInterfaces[i]);
  }
  Set imports=new TreeSet(classComp);
  Method[] methods=intfcl.getMethods();
  if (!CodegenUtils.inSamePackage(intfcl.getName(),genclass))   imports.add(intfcl);
  if (superclass != null && !CodegenUtils.inSamePackage(superclass.getName(),genclass))   imports.add(superclass);
  if (extraInterfaces != null) {
    for (int i=0, len=extraInterfaces.length; i < len; ++i) {
      Class checkMe=extraInterfaces[i];
      if (!CodegenUtils.inSamePackage(checkMe.getName(),genclass))       imports.add(checkMe);
    }
  }
  ensureImports(genclass,imports,methods);
  if (reflectiveDelegateMethods != null)   ensureImports(genclass,imports,reflectiveDelegateMethods);
  if (reflectiveDelegationPolicy.delegateClass != null && !CodegenUtils.inSamePackage(reflectiveDelegationPolicy.delegateClass.getName(),genclass))   imports.add(reflectiveDelegationPolicy.delegateClass);
  generateBannerComment(iw);
  iw.println(""String_Node_Str"" + pkg + ';');
  iw.println();
  for (Iterator ii=imports.iterator(); ii.hasNext(); )   iw.println(""String_Node_Str"" + ((Class)ii.next()).getName() + ';');
  generateExtraImports(iw);
  iw.println();
  generateClassJavaDocComment(iw);
  iw.print(CodegenUtils.getModifierString(class_modifiers) + ""String_Node_Str"" + sgc);
  if (superclass != null)   iw.print(""String_Node_Str"" + scn);
  iw.print(""String_Node_Str"" + sin);
  if (eins != null)   for (int i=0, len=eins.length; i < len; ++i)   iw.print(""String_Node_Str"" + eins[i]);
  iw.println();
  iw.println(""String_Node_Str"");
  iw.upIndent();
  iw.println(""String_Node_Str"" + sin + ""String_Node_Str"");
  iw.println();
  if (reflectiveDelegateMethods != null)   iw.println(""String_Node_Str"");
  iw.println();
  iw.println(""String_Node_Str"" + sin + ""String_Node_Str"");
  iw.println(""String_Node_Str"");
  iw.upIndent();
  iw.println(""String_Node_Str"");
  if (reflectiveDelegateMethods != null) {
    String delegateClassExpr;
    if (reflectiveDelegationPolicy == ReflectiveDelegationPolicy.USE_MAIN_DELEGATE_INTERFACE)     delegateClassExpr=sin + ""String_Node_Str"";
 else     if (reflectiveDelegationPolicy == ReflectiveDelegationPolicy.USE_RUNTIME_CLASS)     delegateClassExpr=""String_Node_Str"";
 else     delegateClassExpr=ClassUtils.simpleClassName(reflectiveDelegationPolicy.delegateClass) + ""String_Node_Str"";
    iw.println(""String_Node_Str"" + delegateClassExpr + ""String_Node_Str"");
  }
  iw.downIndent();
  iw.println(""String_Node_Str"");
  iw.println();
  if (wrapping_constructor) {
    iw.println(CodegenUtils.getModifierString(wrapping_ctor_modifiers) + ' ' + sgc+ '('+ sin+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  if (default_constructor) {
    iw.println();
    iw.println(CodegenUtils.getModifierString(default_ctor_modifiers) + ' ' + sgc+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  if (inner_setter) {
    iw.println();
    iw.println(CodegenUtils.getModifierString(method_modifiers) + ""String_Node_Str"" + sin+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  if (inner_getter) {
    iw.println();
    iw.println(CodegenUtils.getModifierString(method_modifiers) + ' ' + sin+ ""String_Node_Str"");
    iw.println(""String_Node_Str"");
  }
  iw.println();
  for (int i=0, len=methods.length; i < len; ++i) {
    Method method=methods[i];
    if (i != 0)     iw.println();
    iw.println(CodegenUtils.methodSignature(method_modifiers,method,null));
    iw.println(""String_Node_Str"");
    iw.upIndent();
    generatePreDelegateCode(intfcl,genclass,method,iw);
    generateDelegateCode(intfcl,genclass,method,iw);
    generatePostDelegateCode(intfcl,genclass,method,iw);
    iw.downIndent();
    iw.println(""String_Node_Str"");
  }
  if (reflectiveDelegateMethods != null) {
    iw.println(""String_Node_Str"");
    for (int i=0, len=reflectiveDelegateMethods.length; i < len; ++i) {
      Method method=reflectiveDelegateMethods[i];
      if (i != 0)       iw.println();
      iw.println(CodegenUtils.methodSignature(method_modifiers,method,null));
      iw.println(""String_Node_Str"");
      iw.upIndent();
      generatePreDelegateCode(intfcl,genclass,method,iw);
      generateReflectiveDelegateCode(intfcl,genclass,method,iw);
      generatePostDelegateCode(intfcl,genclass,method,iw);
      iw.downIndent();
      iw.println(""String_Node_Str"");
    }
  }
  iw.println();
  generateExtraDeclarations(intfcl,genclass,iw);
  iw.downIndent();
  iw.println(""String_Node_Str"");
}",0.985655532149664
189425,"private static PropertiesConfigSource configSource(String identifier) throws Exception {
  boolean hocon=isHoconPath(identifier);
  if (!hocon && !identifier.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(String.format(""String_Node_Str"",identifier));
  if (hocon) {
    try {
      return (PropertiesConfigSource)Class.forName(HOCON_CFG_SRC_CNAME).newInstance();
    }
 catch (    ClassNotFoundException e) {
      int sfx_index=identifier.lastIndexOf('#');
      String resourcePath=sfx_index > 0 ? identifier.substring(HOCON_PFX_LEN,sfx_index) : identifier.substring(HOCON_PFX_LEN);
      if (BasicMultiPropertiesConfig.class.getResource(resourcePath) == null)       throw new FileNotFoundException(String.format(""String_Node_Str"",resourcePath,identifier));
 else       throw new Exception(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(identifier))   return new SystemPropertiesConfigSource();
 else   return new BasicPropertiesConfigSource();
}","private static PropertiesConfigSource configSource(String identifier) throws Exception {
  boolean hocon=isHoconPath(identifier);
  if (!hocon && !identifier.startsWith(""String_Node_Str""))   throw new IllegalArgumentException(String.format(""String_Node_Str"",identifier));
  if (hocon) {
    try {
      return (PropertiesConfigSource)Class.forName(HOCON_CFG_SRC_CNAME).newInstance();
    }
 catch (    ClassNotFoundException e) {
      int sfx_index=identifier.lastIndexOf('#');
      String resourcePath=sfx_index > 0 ? identifier.substring(HOCON_PFX_LEN,sfx_index) : identifier.substring(HOCON_PFX_LEN);
      if (BasicMultiPropertiesConfig.class.getResource(resourcePath) == null)       throw new FileNotFoundException(String.format(""String_Node_Str"",resourcePath,identifier));
 else       throw new Exception(String.format(""String_Node_Str"",identifier),e);
    }
  }
 else   if (""String_Node_Str"".equals(identifier))   return new SystemPropertiesConfigSource();
 else   return new BasicPropertiesConfigSource();
}",0.9870517928286852
189426,"@Override public void update(DataDistribution<VehicleStateDistribution<O>> target,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> resampleDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  for (  final VehicleStateDistribution<O> state : target.getDomain()) {
    final int count;
    if (target instanceof CountedDataDistribution<?>) {
      count=((CountedDataDistribution)target).getCount(state);
    }
 else {
      count=1;
    }
    final double logCount=Math.log(count);
    VehicleStateDistribution<O> predictedState=state.clone();
    predictedState.setParentState(state);
    predictedState.setObservation(obs);
    predictedState=this.updater.update(predictedState);
    CountedDataDistribution<VehicleStateDistribution<O>> childDist=internalPriorPrediction(predictedState,obs);
    predictedState.setTransitionStateDistribution(childDist);
    resampleDist.increment(predictedState,childDist.getTotal() + logCount);
  }
  Preconditions.checkState(!resampleDist.isEmpty());
  if (this.isDebug)   this.lastResampleDistribution=resampleDist;
  if (obs instanceof TrueObservation) {
    final VehicleStateDistribution<?> trueState=((TrueObservation)obs).getTrueState();
    if (!trueState.getPathStateParam().getValue().getEdge().equals(resampleDist.getMaxValueKey().getTransitionStateDistribution().getMaxValueKey().getPathStateParam().getValue().getEdge())) {
      List<Entry<VehicleStateDistribution<O>,MutableDouble>> sortedDist=Lists.newArrayList(resampleDist.asMap().entrySet());
      Collections.sort(sortedDist,new Comparator<Entry<VehicleStateDistribution<O>,MutableDouble>>(){
        @Override public int compare(        Entry<VehicleStateDistribution<O>,MutableDouble> o1,        Entry<VehicleStateDistribution<O>,MutableDouble> o2){
          final double adjValue1=o1.getValue().getValue() + Math.log(((MutableDoubleCount)o1.getValue()).getCount());
          final double adjValue2=o2.getValue().getValue() + Math.log(((MutableDoubleCount)o2.getValue()).getCount());
          return -Double.compare(adjValue1,adjValue2);
        }
      }
);
      for (      Entry<VehicleStateDistribution<O>,MutableDouble> entry : sortedDist) {
        final VehicleStateDistribution<O> state=entry.getKey().getTransitionStateDistribution().getMaxValueKey();
        final Vector distToTrueState=state.getPathStateParam().getParameterPrior().getGroundDistribution().getMean().minus(trueState.getPathStateParam().getValue().getGroundState());
        final int count=((MutableDoubleCount)entry.getValue()).getCount();
        final double adjValue=entry.getValue().getValue() + Math.log(count);
        System.out.println(resampleDist.getLogFraction(entry.getKey()) + ""String_Node_Str"" + adjValue+ ""String_Node_Str""+ count+ ""String_Node_Str""+ distToTrueState+ ""String_Node_Str""+ state.getPathStateParam().getValue()+ ""String_Node_Str""+ state.getPathStateDistLogLikelihood()+ ""String_Node_Str""+ state.getPredictiveLogLikelihood());
      }
      System.out.println(trueState.getPathStateParam().getValue());
    }
  }
  final ArrayList<VehicleStateDistribution<O>> smoothedStates=resampleDist.sample(this.random,this.getNumParticles());
  List<VehicleStateDistribution<O>> updatedStates=Lists.newArrayList();
  for (  final VehicleStateDistribution<O> state : smoothedStates) {
    final VehicleStateDistribution<O> sampledTransitionState=state.getTransitionStateDistribution().sample(this.random);
    VehicleStateDistribution<O> updatedState=internalUpdate(sampledTransitionState,obs);
    updatedState.setTransitionStateDistribution(sampledTransitionState.getTransitionStateDistribution());
    updatedState.setPriorPredictiveState(sampledTransitionState);
    updatedStates.add(updatedState);
  }
  target.clear();
  target.incrementAll(updatedStates);
  Preconditions.checkState(target.getDomainSize() > 0);
  if (target instanceof CountedDataDistribution<?>) {
    Preconditions.checkState(((CountedDataDistribution<?>)target).getTotalCount() == this.numParticles);
  }
}","@Override public void update(DataDistribution<VehicleStateDistribution<O>> target,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> resampleDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  for (  final VehicleStateDistribution<O> state : target.getDomain()) {
    final int count;
    if (target instanceof CountedDataDistribution<?>) {
      count=((CountedDataDistribution)target).getCount(state);
    }
 else {
      count=1;
    }
    final double logCount=Math.log(count);
    VehicleStateDistribution<O> predictedState=state.clone();
    predictedState.setParentState(state);
    predictedState.setObservation(obs);
    predictedState=this.updater.update(predictedState);
    CountedDataDistribution<VehicleStateDistribution<O>> childDist=internalPriorPrediction(predictedState,obs);
    predictedState.setTransitionStateDistribution(childDist);
    resampleDist.increment(predictedState,childDist.getTotal() + logCount);
  }
  Preconditions.checkState(!resampleDist.isEmpty());
  if (this.isDebug)   this.lastResampleDistribution=resampleDist;
  if (obs instanceof TrueObservation) {
    final VehicleStateDistribution<?> trueState=((TrueObservation)obs).getTrueState();
    if (!trueState.getPathStateParam().getValue().getEdge().equals(resampleDist.getMaxValueKey().getTransitionStateDistribution().getMaxValueKey().getPathStateParam().getValue().getEdge())) {
      List<Entry<VehicleStateDistribution<O>,MutableDouble>> sortedDist=Lists.newArrayList(resampleDist.asMap().entrySet());
      Collections.sort(sortedDist,new Comparator<Entry<VehicleStateDistribution<O>,MutableDouble>>(){
        @Override public int compare(        Entry<VehicleStateDistribution<O>,MutableDouble> o1,        Entry<VehicleStateDistribution<O>,MutableDouble> o2){
          final double adjValue1=o1.getValue().getValue() + Math.log(((MutableDoubleCount)o1.getValue()).getCount());
          final double adjValue2=o2.getValue().getValue() + Math.log(((MutableDoubleCount)o2.getValue()).getCount());
          return -Double.compare(adjValue1,adjValue2);
        }
      }
);
      for (      Entry<VehicleStateDistribution<O>,MutableDouble> entry : sortedDist) {
        final VehicleStateDistribution<O> state=entry.getKey().getTransitionStateDistribution().getMaxValueKey();
        final Vector distToTrueState=state.getPathStateParam().getParameterPrior().getGroundDistribution().getMean().minus(trueState.getPathStateParam().getValue().getGroundState());
        final int count=((MutableDoubleCount)entry.getValue()).getCount();
        final double adjValue=entry.getValue().getValue() + Math.log(count);
        System.out.println(resampleDist.getLogFraction(entry.getKey()) + ""String_Node_Str"" + adjValue+ ""String_Node_Str""+ count+ ""String_Node_Str""+ distToTrueState+ ""String_Node_Str""+ state.getPathStateParam().getValue()+ ""String_Node_Str""+ state.getPathStateDistLogLikelihood()+ ""String_Node_Str""+ state.getPredictiveLogLikelihood());
      }
      System.out.println(trueState.getPathStateParam().getValue());
    }
  }
  final ArrayList<VehicleStateDistribution<O>> smoothedStates=resampleDist.sample(this.random,this.getNumParticles());
  List<VehicleStateDistribution<O>> updatedStates=Lists.newArrayList();
  for (  final VehicleStateDistribution<O> state : smoothedStates) {
    final VehicleStateDistribution<O> sampledTransitionState=state.getTransitionStateDistribution().sample(this.random);
    VehicleStateDistribution<O> updatedState=internalUpdate(sampledTransitionState,obs);
    updatedState.setTransitionStateDistribution(state.getTransitionStateDistribution());
    updatedState.setPriorPredictiveState(sampledTransitionState);
    updatedStates.add(updatedState);
  }
  target.clear();
  target.incrementAll(updatedStates);
  Preconditions.checkState(target.getDomainSize() > 0);
  if (target instanceof CountedDataDistribution<?>) {
    Preconditions.checkState(((CountedDataDistribution<?>)target).getTotalCount() == this.numParticles);
  }
}",0.9978847828791838
189427,"public double increment(KeyType key,final double value,int count){
  final MutableDoubleCount entry=(MutableDoubleCount)this.map.get(key);
  double newValue;
  double delta;
  final double identity=this.isLogScale ? Double.NEGATIVE_INFINITY : 0d;
  if (entry == null) {
    if (value > identity) {
      this.map.put(key,new MutableDoubleCount(value,count));
      delta=value;
    }
 else {
      delta=identity;
    }
    newValue=value;
  }
 else {
    final double sum=this.isLogScale ? LogMath.add(entry.value,value) : entry.value + value;
    if (sum >= identity) {
      delta=value;
      entry.set(sum,entry.count + count);
    }
 else {
      delta=-entry.value;
      entry.set(identity);
    }
    newValue=entry.value;
  }
  if (this.isLogScale) {
    this.total=LogMath.add(this.total,value);
  }
 else {
    this.total+=delta;
  }
  return newValue;
}","@Override public double increment(KeyType key){
  return this.increment(key,isLogScale ? 0d : 1d);
}",0.15527950310559
189428,"@Override public double cost(AStarNode n1,AStarNode n2){
  final BasicDirectedNode dn1=(BasicDirectedNode)n1.getNode();
  final BasicDirectedNode dn2=(BasicDirectedNode)n2.getNode();
  final Edge edgeBetween=dn1.getOutEdge(dn2);
  if (edgeBetween == null) {
    return Double.POSITIVE_INFINITY;
  }
  return 0d;
}","@Override public double cost(AStarNode n1,AStarNode n2){
  final BasicDirectedNode dn1=(BasicDirectedNode)n1.getNode();
  final BasicDirectedNode dn2=(BasicDirectedNode)n2.getNode();
  final List<Edge> edgesBetween=dn1.getOutEdges(dn2);
  if (edgesBetween.isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
  double[] lengths=new double[edgesBetween.size()];
  for (int i=0; i < lengths.length; i++) {
    lengths[i]=((LineString)edgesBetween.get(i).getObject()).getLength();
  }
  return Doubles.min(lengths);
}",0.7004830917874396
189429,"@SuppressWarnings(""String_Node_Str"") protected Path getPathFromGraph(org.geotools.graph.path.Path path,final DirectedEdge bStartEdge,InferenceGraphSegment startSegment,InferenceGraphSegment endSegment,Set<Node> reachedEndNodes){
  List<PathEdge> pathEdges=Lists.newArrayList();
  double distance=0d;
  for (  InferenceGraphSegment segment : startSegment.getParentEdge().getSegments(startSegment.startDistance,Double.POSITIVE_INFINITY)) {
    pathEdges.add(new PathEdge(segment,distance,false));
    distance+=segment.getLine().getLength();
  }
  Iterator<DirectedNode> rNodes=path.riterator();
  DirectedNode prevNode=rNodes.next();
  while (rNodes.hasNext()) {
    DirectedNode node=rNodes.next();
    Edge outEdge=prevNode.getOutEdge(node);
    if (outEdge == null)     return null;
    final InferenceGraphEdge infEdge=this.getInferenceGraphEdge(outEdge);
    for (    InferenceGraphSegment segment : infEdge.getSegments()) {
      Preconditions.checkState(segment.line.p0.equals(Iterables.getLast(pathEdges).getLine().p1));
      pathEdges.add(new PathEdge(segment,distance,false));
      distance+=segment.getLine().getLength();
    }
    reachedEndNodes.add(node);
  }
  if (!pathEdges.isEmpty()) {
    final Path newPath=new Path(pathEdges,false);
    return newPath;
  }
 else {
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") protected Path getPathFromGraph(org.geotools.graph.path.Path path,final DirectedEdge bStartEdge,InferenceGraphSegment startSegment,InferenceGraphSegment endSegment,Set<Node> reachedEndNodes){
  List<PathEdge> pathEdges=Lists.newArrayList();
  double distance=0d;
  for (  InferenceGraphSegment segment : startSegment.getParentEdge().getSegments(startSegment.startDistance,Double.POSITIVE_INFINITY)) {
    pathEdges.add(new PathEdge(segment,distance,false));
    distance+=segment.getLine().getLength();
  }
  Iterator<DirectedNode> rNodes=path.riterator();
  DirectedNode prevNode=rNodes.next();
  while (rNodes.hasNext()) {
    DirectedNode node=rNodes.next();
    Edge outEdge=Preconditions.checkNotNull(prevNode.getOutEdge(node));
    final InferenceGraphEdge infEdge=this.getInferenceGraphEdge(outEdge);
    for (    InferenceGraphSegment segment : infEdge.getSegments()) {
      Preconditions.checkState(segment.line.p0.equals(Iterables.getLast(pathEdges).getLine().p1));
      pathEdges.add(new PathEdge(segment,distance,false));
      distance+=segment.getLine().getLength();
    }
    reachedEndNodes.add(node);
    prevNode=node;
  }
  if (!pathEdges.isEmpty()) {
    final Path newPath=new Path(pathEdges,false);
    return newPath;
  }
 else {
    return null;
  }
}",0.9660693861990088
189430,"/** 
 * This method performs the Bayes update for a single vehicle state.
 * @param state
 * @param obs
 * @return
 */
protected VehicleStateDistribution<O> internalUpdate(VehicleStateDistribution<O> state,O obs){
  final VehicleStateDistribution<O> updatedState=state.clone();
  final PathStateDistribution priorPredictivePathStateDist=updatedState.getPathStateParam().getParameterPrior().clone();
  final MultivariateGaussian updatedMotionState=priorPredictivePathStateDist.getMotionDistribution().clone();
  final PathStateDistribution posteriorPathStateDist;
  if (priorPredictivePathStateDist.getPathState().isOnRoad()) {
    final TruncatedRoadKalmanFilter roadFilter=updatedState.getMotionStateEstimatorPredictor().getRoadFilter().clone();
    final AdjMultivariateGaussian obsProj=PathUtils.getRoadObservation(obs.getProjectedPoint(),updatedState.getObservationCovarianceParam().getValue(),priorPredictivePathStateDist.getPathState().getPath(),priorPredictivePathStateDist.getPathState().getEdge());
    roadFilter.setMeasurementCovariance(obsProj.getCovariance());
    roadFilter.measure(updatedMotionState,obsProj.getMean());
    Preconditions.checkState(updatedMotionState.getCovariance().getElement(0,0) > 1e-6);
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath().getPathTo(updatedMotionState.getMean().getElement(0)),updatedMotionState);
  }
 else {
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath(),updatedMotionState);
  }
  updatedState.getPathStateParam().setValue(posteriorPathStateDist.getPathState());
  updatedState.getPathStateParam().setParameterPrior(posteriorPathStateDist);
  Vector newObsStateSample;
  final RoadModelCovarianceEstimatorPredictor modelCovarianceEstimator=new RoadModelCovarianceEstimatorPredictor(updatedState,state.getMotionStateEstimatorPredictor(),this.random);
  final ScaledInverseGammaCovDistribution currentModelCovDistribution=(ScaledInverseGammaCovDistribution)(posteriorPathStateDist.getPathState().isOnRoad() ? updatedState.getOnRoadModelCovarianceParam().getParameterPrior().clone() : updatedState.getOffRoadModelCovarianceParam().getParameterPrior().clone());
  modelCovarianceEstimator.update(currentModelCovDistribution,obs.getProjectedPoint());
  if (posteriorPathStateDist.getPathState().isOnRoad()) {
    updatedState.getOnRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOnRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOnRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
  }
 else {
    updatedState.getOffRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOffRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOffRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
  }
  newObsStateSample=MotionStateEstimatorPredictor.getOg().times(modelCovarianceEstimator.getNewPosteriorStateSample().getGroundDistribution().getMean());
  final RoadMeasurementCovarianceEstimatorPredictor measurementCovarianceEstimator=this.getRoadMeasurementCovarianceEstimatorPredictor(updatedState,newObsStateSample);
  final ScaledInverseGammaCovDistribution currentObsCovDistribution=(ScaledInverseGammaCovDistribution)updatedState.getObservationCovarianceParam().getParameterPrior().clone();
  measurementCovarianceEstimator.update(currentObsCovDistribution,obs.getProjectedPoint());
  updatedState.getObservationCovarianceParam().setParameterPrior(currentObsCovDistribution);
  final Matrix obsCovSample=currentObsCovDistribution.sample(this.random);
  updatedState.getObservationCovarianceParam().setValue(obsCovSample);
  updatedState.getObservationCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector(obsCovSample.getNumColumns()),obsCovSample));
  updatedState.getMotionStateParam().setParameterPrior(posteriorPathStateDist.getMotionDistribution());
  final MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(posteriorPathStateDist.getMotionDistribution(),posteriorPathStateDist.getPathState().getEdge());
  updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
  updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
  final OnOffEdgeTransPriorDistribution updatedEdgeTransPrior=updatedState.getEdgeTransitionParam().getParameterPrior().clone();
  final InferenceGraphEdge fromEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final InferenceGraphEdge toEdge=updatedState.getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=this.getEdgeTransitionEstimatorPredictor(updatedState,fromEdge);
  edgeTransitionEstimatorPredictor.update(updatedEdgeTransPrior,toEdge);
  final OnOffEdgeTransDistribution updatedEdgeTransConditional=new OnOffEdgeTransDistribution(this.inferredGraph,updatedState.getPathStateParam().getValue(),toEdge,updatedState.getObservationCovarianceParam().getValue(),updatedEdgeTransPrior.getEdgeMotionTransProbPrior().getMean(),updatedEdgeTransPrior.getFreeMotionTransProbPrior().getMean());
  updatedState.setEdgeTransitionParam(SimpleBayesianParameter.create(updatedEdgeTransPrior.getMean(),updatedEdgeTransConditional,updatedEdgeTransPrior));
  updatedState.setEdgeTransitionParam(SimpleBayesianParameter.create(updatedEdgeTransPrior.getMean(),updatedEdgeTransConditional,updatedEdgeTransPrior));
  return updatedState;
}","/** 
 * This method performs the Bayes update for a single vehicle state.
 * @param state
 * @param obs
 * @return
 */
protected VehicleStateDistribution<O> internalUpdate(VehicleStateDistribution<O> state,O obs){
  final VehicleStateDistribution<O> updatedState=state.clone();
  final PathStateDistribution priorPredictivePathStateDist=updatedState.getPathStateParam().getParameterPrior().clone();
  final MultivariateGaussian updatedMotionState=priorPredictivePathStateDist.getMotionDistribution().clone();
  final PathStateDistribution posteriorPathStateDist;
  if (priorPredictivePathStateDist.getPathState().isOnRoad()) {
    final TruncatedRoadKalmanFilter roadFilter=updatedState.getMotionStateEstimatorPredictor().getRoadFilter().clone();
    final AdjMultivariateGaussian obsProj=PathUtils.getRoadObservation(obs.getProjectedPoint(),updatedState.getObservationCovarianceParam().getValue(),priorPredictivePathStateDist.getPathState().getPath(),priorPredictivePathStateDist.getPathState().getEdge());
    final double currentDist=updatedMotionState.getMean().getElement(0);
    if (obsProj.getMean().getElement(0) < currentDist) {
      obsProj.getMean().setElement(0,currentDist);
    }
    roadFilter.setMeasurementCovariance(obsProj.getCovariance());
    roadFilter.measure(updatedMotionState,obsProj.getMean());
    Preconditions.checkState(updatedMotionState.getCovariance().getElement(0,0) > 1e-6);
    final Path postPath=priorPredictivePathStateDist.getPathState().getPath();
    updatedMotionState.setMean(Iterables.getLast(postPath.getPathEdges()).clampToEdge(updatedMotionState.getMean()));
    posteriorPathStateDist=new PathStateDistribution(postPath,updatedMotionState);
  }
 else {
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath(),updatedMotionState);
  }
  updatedState.getPathStateParam().setValue(posteriorPathStateDist.getPathState());
  updatedState.getPathStateParam().setParameterPrior(posteriorPathStateDist);
  Vector newObsStateSample;
  final RoadModelCovarianceEstimatorPredictor modelCovarianceEstimator=new RoadModelCovarianceEstimatorPredictor(updatedState,state.getMotionStateEstimatorPredictor(),this.random);
  final ScaledInverseGammaCovDistribution currentModelCovDistribution=(ScaledInverseGammaCovDistribution)(posteriorPathStateDist.getPathState().isOnRoad() ? updatedState.getOnRoadModelCovarianceParam().getParameterPrior().clone() : updatedState.getOffRoadModelCovarianceParam().getParameterPrior().clone());
  modelCovarianceEstimator.update(currentModelCovDistribution,obs.getProjectedPoint());
  if (posteriorPathStateDist.getPathState().isOnRoad()) {
    updatedState.getOnRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOnRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOnRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
  }
 else {
    updatedState.getOffRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOffRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOffRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
  }
  newObsStateSample=MotionStateEstimatorPredictor.getOg().times(modelCovarianceEstimator.getNewPosteriorStateSample().getGroundDistribution().getMean());
  final RoadMeasurementCovarianceEstimatorPredictor measurementCovarianceEstimator=this.getRoadMeasurementCovarianceEstimatorPredictor(updatedState,newObsStateSample);
  final ScaledInverseGammaCovDistribution currentObsCovDistribution=(ScaledInverseGammaCovDistribution)updatedState.getObservationCovarianceParam().getParameterPrior().clone();
  measurementCovarianceEstimator.update(currentObsCovDistribution,obs.getProjectedPoint());
  updatedState.getObservationCovarianceParam().setParameterPrior(currentObsCovDistribution);
  final Matrix obsCovSample=currentObsCovDistribution.sample(this.random);
  updatedState.getObservationCovarianceParam().setValue(obsCovSample);
  updatedState.getObservationCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector(obsCovSample.getNumColumns()),obsCovSample));
  updatedState.getMotionStateParam().setParameterPrior(posteriorPathStateDist.getMotionDistribution());
  final MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(posteriorPathStateDist.getMotionDistribution(),posteriorPathStateDist.getPathState().getEdge());
  updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
  updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
  final OnOffEdgeTransPriorDistribution updatedEdgeTransPrior=updatedState.getEdgeTransitionParam().getParameterPrior().clone();
  final InferenceGraphEdge fromEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final InferenceGraphEdge toEdge=updatedState.getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=this.getEdgeTransitionEstimatorPredictor(updatedState,fromEdge);
  edgeTransitionEstimatorPredictor.update(updatedEdgeTransPrior,toEdge);
  final OnOffEdgeTransDistribution updatedEdgeTransConditional=new OnOffEdgeTransDistribution(this.inferredGraph,updatedState.getPathStateParam().getValue(),toEdge,updatedState.getObservationCovarianceParam().getValue(),updatedEdgeTransPrior.getEdgeMotionTransProbPrior().getMean(),updatedEdgeTransPrior.getFreeMotionTransProbPrior().getMean());
  updatedState.setEdgeTransitionParam(SimpleBayesianParameter.create(updatedEdgeTransPrior.getMean(),updatedEdgeTransConditional,updatedEdgeTransPrior));
  updatedState.setEdgeTransitionParam(SimpleBayesianParameter.create(updatedEdgeTransPrior.getMean(),updatedEdgeTransConditional,updatedEdgeTransPrior));
  return updatedState;
}",0.9586975699735344
189431,"/** 
 * This method performs the Bayes update for a single vehicle state.
 * @param state
 * @param obs
 * @return
 */
protected VehicleStateDistribution<O> internalUpdate(VehicleStateDistribution<O> state,O obs){
  final VehicleStateDistribution<O> updatedState=state.clone();
  final PathStateDistribution priorPredictivePathStateDist=updatedState.getPathStateParam().getParameterPrior().clone();
  final MultivariateGaussian updatedMotionState=priorPredictivePathStateDist.getMotionDistribution().clone();
  final PathStateDistribution posteriorPathStateDist;
  if (priorPredictivePathStateDist.getPathState().isOnRoad()) {
    final TruncatedRoadKalmanFilter roadFilter=updatedState.getMotionStateEstimatorPredictor().getRoadFilter().clone();
    final AdjMultivariateGaussian obsProj=PathUtils.getRoadObservation(obs.getProjectedPoint(),updatedState.getObservationCovarianceParam().getValue(),priorPredictivePathStateDist.getPathState().getPath(),priorPredictivePathStateDist.getPathState().getEdge());
    roadFilter.setMeasurementCovariance(obsProj.getCovariance());
    roadFilter.measure(updatedMotionState,obsProj.getMean());
    if ((state.getParentState().getPathStateParam().getParameterPrior().getPathState().isOnRoad() && state.getParentState().getPathStateParam().getParameterPrior().getPathState().getElement(0) <= obsProj.getMean().getElement(0)) || updatedMotionState.getMean().getElement(1) > 0d) {
      VehicleStatePLPathSamplingFilter._log.warn(""String_Node_Str"");
    }
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath().getPathTo(updatedMotionState.getMean().getElement(0)),updatedMotionState);
  }
 else {
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath(),updatedMotionState);
  }
  updatedState.getPathStateParam().setValue(posteriorPathStateDist.getPathState());
  updatedState.getPathStateParam().setParameterPrior(posteriorPathStateDist);
  Vector newObsStateSample;
  final RoadModelCovarianceEstimatorPredictor modelCovarianceEstimator=new RoadModelCovarianceEstimatorPredictor(updatedState,state.getMotionStateEstimatorPredictor(),this.random);
  final ScaledInverseGammaCovDistribution currentModelCovDistribution=(ScaledInverseGammaCovDistribution)(posteriorPathStateDist.getPathState().isOnRoad() ? updatedState.getOnRoadModelCovarianceParam().getParameterPrior().clone() : updatedState.getOffRoadModelCovarianceParam().getParameterPrior().clone());
  modelCovarianceEstimator.update(currentModelCovDistribution,obs.getProjectedPoint());
  if (posteriorPathStateDist.getPathState().isOnRoad()) {
    updatedState.getOnRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOnRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOnRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
  }
 else {
    updatedState.getOffRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOffRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOffRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
  }
  newObsStateSample=MotionStateEstimatorPredictor.getOg().times(modelCovarianceEstimator.getNewPosteriorStateSample().getGroundDistribution().getMean());
  final RoadMeasurementCovarianceEstimatorPredictor measurementCovarianceEstimator=new RoadMeasurementCovarianceEstimatorPredictor(updatedState,newObsStateSample);
  final ScaledInverseGammaCovDistribution currentObsCovDistribution=(ScaledInverseGammaCovDistribution)updatedState.getObservationCovarianceParam().getParameterPrior().clone();
  measurementCovarianceEstimator.update(currentObsCovDistribution,obs.getProjectedPoint());
  updatedState.getObservationCovarianceParam().setParameterPrior(currentObsCovDistribution);
  final Matrix obsCovSample=currentObsCovDistribution.sample(this.random);
  updatedState.getObservationCovarianceParam().setValue(obsCovSample);
  updatedState.getObservationCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector(obsCovSample.getNumColumns()),obsCovSample));
  updatedState.getMotionStateParam().setParameterPrior(posteriorPathStateDist.getMotionDistribution());
  final MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(posteriorPathStateDist.getMotionDistribution(),posteriorPathStateDist.getPathState().getEdge());
  updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
  updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
  final InferenceGraphEdge fromEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final InferenceGraphEdge toEdge=updatedState.getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=this.getEdgeTransitionEstimatorPredictor(updatedState,fromEdge);
  final OnOffEdgeTransPriorDistribution updatedEdgeTransPrior=updatedState.getEdgeTransitionParam().getParameterPrior().clone();
  edgeTransitionEstimatorPredictor.update(updatedEdgeTransPrior,toEdge);
  final OnOffEdgeTransDistribution updatedEdgeTransConditional=new OnOffEdgeTransDistribution(this.inferredGraph,updatedState.getPathStateParam().getValue(),toEdge,updatedState.getObservationCovarianceParam().getValue(),updatedEdgeTransPrior.getEdgeMotionTransProbPrior().getMean(),updatedEdgeTransPrior.getFreeMotionTransProbPrior().getMean());
  updatedState.setEdgeTransitionParam(SimpleBayesianParameter.create(updatedEdgeTransPrior.getMean(),updatedEdgeTransConditional,updatedEdgeTransPrior));
  return updatedState;
}","/** 
 * This method performs the Bayes update for a single vehicle state.
 * @param state
 * @param obs
 * @return
 */
protected VehicleStateDistribution<O> internalUpdate(VehicleStateDistribution<O> state,O obs){
  final VehicleStateDistribution<O> updatedState=state.clone();
  final PathStateDistribution priorPredictivePathStateDist=updatedState.getPathStateParam().getParameterPrior().clone();
  final MultivariateGaussian updatedMotionState=priorPredictivePathStateDist.getMotionDistribution().clone();
  final PathStateDistribution posteriorPathStateDist;
  if (priorPredictivePathStateDist.getPathState().isOnRoad()) {
    final TruncatedRoadKalmanFilter roadFilter=updatedState.getMotionStateEstimatorPredictor().getRoadFilter().clone();
    final AdjMultivariateGaussian obsProj=PathUtils.getRoadObservation(obs.getProjectedPoint(),updatedState.getObservationCovarianceParam().getValue(),priorPredictivePathStateDist.getPathState().getPath(),priorPredictivePathStateDist.getPathState().getEdge());
    final double currentDist=updatedMotionState.getMean().getElement(0);
    if (obsProj.getMean().getElement(0) < currentDist) {
      obsProj.getMean().setElement(0,currentDist);
    }
    roadFilter.setMeasurementCovariance(obsProj.getCovariance());
    roadFilter.measure(updatedMotionState,obsProj.getMean());
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath().getPathTo(updatedMotionState.getMean().getElement(0)),updatedMotionState);
  }
 else {
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    posteriorPathStateDist=new PathStateDistribution(priorPredictivePathStateDist.getPathState().getPath(),updatedMotionState);
  }
  updatedState.getPathStateParam().setValue(posteriorPathStateDist.getPathState());
  updatedState.getPathStateParam().setParameterPrior(posteriorPathStateDist);
  Vector newObsStateSample;
  final RoadModelCovarianceEstimatorPredictor modelCovarianceEstimator=new RoadModelCovarianceEstimatorPredictor(updatedState,state.getMotionStateEstimatorPredictor(),this.random);
  final ScaledInverseGammaCovDistribution currentModelCovDistribution=(ScaledInverseGammaCovDistribution)(posteriorPathStateDist.getPathState().isOnRoad() ? updatedState.getOnRoadModelCovarianceParam().getParameterPrior().clone() : updatedState.getOffRoadModelCovarianceParam().getParameterPrior().clone());
  modelCovarianceEstimator.update(currentModelCovDistribution,obs.getProjectedPoint());
  if (posteriorPathStateDist.getPathState().isOnRoad()) {
    updatedState.getOnRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOnRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOnRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
    final Matrix offRoadStateCovSample=MatrixFactory.getDiagonalDefault().createIdentity(2,2).scale(stateCovSample.getElement(0,0));
    updatedState.getOffRoadModelCovarianceParam().setValue(offRoadStateCovSample);
    updatedState.getOffRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector2D(),offRoadStateCovSample));
  }
 else {
    updatedState.getOffRoadModelCovarianceParam().setParameterPrior(currentModelCovDistribution);
    final Matrix stateCovSample=currentModelCovDistribution.sample(this.random);
    updatedState.getOffRoadModelCovarianceParam().setValue(stateCovSample);
    updatedState.getOffRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),stateCovSample));
    final Matrix onRoadStateCovSample=MatrixFactory.getDiagonalDefault().createIdentity(1,1).scale(stateCovSample.getElement(0,0));
    updatedState.getOnRoadModelCovarianceParam().setValue(onRoadStateCovSample);
    updatedState.getOnRoadModelCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector1D(),onRoadStateCovSample));
  }
  newObsStateSample=MotionStateEstimatorPredictor.getOg().times(modelCovarianceEstimator.getNewPosteriorStateSample().getGroundDistribution().getMean());
  final RoadMeasurementCovarianceEstimatorPredictor measurementCovarianceEstimator=new RoadMeasurementCovarianceEstimatorPredictor(updatedState,newObsStateSample);
  final ScaledInverseGammaCovDistribution currentObsCovDistribution=(ScaledInverseGammaCovDistribution)updatedState.getObservationCovarianceParam().getParameterPrior().clone();
  measurementCovarianceEstimator.update(currentObsCovDistribution,obs.getProjectedPoint());
  updatedState.getObservationCovarianceParam().setParameterPrior(currentObsCovDistribution);
  final Matrix obsCovSample=currentObsCovDistribution.sample(this.random);
  updatedState.getObservationCovarianceParam().setValue(obsCovSample);
  updatedState.getObservationCovarianceParam().setConditionalDistribution(new MultivariateGaussian(VectorFactory.getDefault().createVector(obsCovSample.getNumColumns()),obsCovSample));
  updatedState.getMotionStateParam().setParameterPrior(posteriorPathStateDist.getMotionDistribution());
  final MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(posteriorPathStateDist.getMotionDistribution(),posteriorPathStateDist.getPathState().getEdge());
  updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
  updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
  final InferenceGraphEdge fromEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final InferenceGraphEdge toEdge=updatedState.getPathStateParam().getValue().getEdge().getInferenceGraphSegment();
  final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=this.getEdgeTransitionEstimatorPredictor(updatedState,fromEdge);
  final OnOffEdgeTransPriorDistribution updatedEdgeTransPrior=updatedState.getEdgeTransitionParam().getParameterPrior().clone();
  edgeTransitionEstimatorPredictor.update(updatedEdgeTransPrior,toEdge);
  final OnOffEdgeTransDistribution updatedEdgeTransConditional=new OnOffEdgeTransDistribution(this.inferredGraph,updatedState.getPathStateParam().getValue(),toEdge,updatedState.getObservationCovarianceParam().getValue(),updatedEdgeTransPrior.getEdgeMotionTransProbPrior().getMean(),updatedEdgeTransPrior.getFreeMotionTransProbPrior().getMean());
  updatedState.setEdgeTransitionParam(SimpleBayesianParameter.create(updatedEdgeTransPrior.getMean(),updatedEdgeTransConditional,updatedEdgeTransPrior));
  return updatedState;
}",0.8758843432789911
189432,"/** 
 * This method takes a prior predictive vehicle state distribution and returns a distribution over its possible transition states, with prior predictive likelihood weights.
 * @param predictedState
 * @param obs
 * @return
 */
protected CountedDataDistribution<VehicleStateDistribution<O>> internalPriorPrediction(VehicleStateDistribution<O> predictedState,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> childDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  final PathStateMixtureDensityModel predictedPathStateMixture=predictedState.getPathStateParam().getConditionalDistribution();
  for (int i=0; i < predictedPathStateMixture.getDistributionCount(); i++) {
    final PathStateDistribution predictedPathStateDist=predictedPathStateMixture.getDistributions().get(i);
    final double pathStateDistLogLikelihood=predictedPathStateMixture.getPriorWeights()[i];
    OnOffEdgeTransProbabilityFunction edgeTransProbFunction=predictedState.getEdgeTransitionParam().getConditionalDistribution().getProbabilityFunction().clone();
    final double edgeTransitionLogLikelihood=edgeTransProbFunction.logEvaluate(predictedPathStateDist.getPathState().getEdge().getInferenceGraphSegment());
    final VehicleStateDistribution<O> predictedChildState=predictedState.clone();
    predictedChildState.setPathStateParam(SimpleBayesianParameter.create(predictedPathStateDist.getPathState(),predictedPathStateMixture,predictedPathStateDist));
    final MultivariateGaussian measurementPredictionDist=predictedState.getMotionStateEstimatorPredictor().getMeasurementDistribution(predictedPathStateDist);
    predictedChildState.setMotionStateParam(SimpleBayesianParameter.create(measurementPredictionDist.getMean(),measurementPredictionDist,predictedPathStateDist.getMotionDistribution()));
    final double predictiveLogLikelihood=this.getUpdater().computeLogLikelihood(predictedChildState,obs);
    predictedChildState.setParentState(predictedState.getParentState());
    predictedChildState.setObsLogLikelihood(predictiveLogLikelihood);
    predictedChildState.setPathStateDistLogLikelihood(pathStateDistLogLikelihood);
    predictedChildState.setEdgeTransitionLogLikelihood(edgeTransitionLogLikelihood);
    final double childLogLikTotal=predictiveLogLikelihood + pathStateDistLogLikelihood + edgeTransitionLogLikelihood;
    childDist.increment(predictedChildState,childLogLikTotal);
  }
  return childDist;
}","/** 
 * This method takes a prior predictive vehicle state distribution and returns a distribution over its possible transition states, with prior predictive likelihood weights.
 * @param predictedState
 * @param obs
 * @return
 */
protected CountedDataDistribution<VehicleStateDistribution<O>> internalPriorPrediction(VehicleStateDistribution<O> predictedState,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> childDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  final PathStateMixtureDensityModel predictedPathStateMixture=predictedState.getPathStateParam().getConditionalDistribution();
  for (int i=0; i < predictedPathStateMixture.getDistributionCount(); i++) {
    final PathStateDistribution predictedPathStateDist=predictedPathStateMixture.getDistributions().get(i);
    final VehicleStateDistribution<O> predictedChildState=predictedState.clone();
    predictedChildState.setPathStateParam(SimpleBayesianParameter.create(predictedPathStateDist.getPathState(),predictedPathStateMixture,predictedPathStateDist));
    final MultivariateGaussian measurementPredictionDist=predictedState.getMotionStateEstimatorPredictor().getMeasurementDistribution(predictedPathStateDist);
    predictedChildState.setMotionStateParam(SimpleBayesianParameter.create(measurementPredictionDist.getMean(),measurementPredictionDist,predictedPathStateDist.getMotionDistribution()));
    final double childLogLikTotal;
    final double edgeTransitionLogLikelihood;
    final double predictiveLogLikelihood;
    final double pathStateDistLogLikelihood;
    if (predictedPathStateDist instanceof EvaluatedPathStateDistribution) {
      edgeTransitionLogLikelihood=((EvaluatedPathStateDistribution)predictedPathStateDist).getEdgeTransitionLogLikelihood();
      predictiveLogLikelihood=((EvaluatedPathStateDistribution)predictedPathStateDist).getObsLogLikelihood();
      pathStateDistLogLikelihood=((EvaluatedPathStateDistribution)predictedPathStateDist).getEdgeLogLikelihood();
      childLogLikTotal=predictedPathStateMixture.getPriorWeights()[i];
    }
 else {
      OnOffEdgeTransProbabilityFunction edgeTransProbFunction=predictedState.getEdgeTransitionParam().getConditionalDistribution().getProbabilityFunction().clone();
      edgeTransitionLogLikelihood=edgeTransProbFunction.logEvaluate(predictedPathStateDist.getPathState().getEdge().getInferenceGraphSegment());
      predictiveLogLikelihood=this.getUpdater().computeLogLikelihood(predictedChildState,obs);
      pathStateDistLogLikelihood=predictedPathStateMixture.getPriorWeights()[i];
      childLogLikTotal=predictiveLogLikelihood + pathStateDistLogLikelihood + edgeTransitionLogLikelihood;
    }
    predictedChildState.setParentState(predictedState.getParentState());
    predictedChildState.setObsLogLikelihood(predictiveLogLikelihood);
    predictedChildState.setPathStateDistLogLikelihood(pathStateDistLogLikelihood);
    predictedChildState.setEdgeTransitionLogLikelihood(edgeTransitionLogLikelihood);
    childDist.increment(predictedChildState,childLogLikTotal);
  }
  return childDist;
}",0.5133863965267728
189433,"/** 
 * This method returns the predictive distribution over the conditional path. Note that the prior must be converted to this path's distance and direction, and the current vehicle state must have a value for its path state parameter.
 * @param prior
 * @return
 */
@Override public PathStateMixtureDensityModel createPredictiveDistribution(MultivariateGaussian prior){
  final List<PathStateDistribution> distributions=Lists.newArrayList();
  final List<Double> weights=Lists.newArrayList();
  double totalWeight=Double.NEGATIVE_INFINITY;
  if (this.path.isNullPath()) {
    MultivariateGaussian groundDistribution;
    if (prior.getInputDimensionality() == 4) {
      groundDistribution=prior.clone();
    }
 else {
      final PathState prevPathState=this.currentState.getPathStateParam().getValue();
      groundDistribution=PathUtils.getGroundBeliefFromRoad(prior.clone(),prevPathState.getEdge(),true,true);
    }
    distributions.add(new PathStateDistribution(this.path,groundDistribution));
    weights.add(0d);
    totalWeight=0d;
  }
 else {
    if (prior.getInputDimensionality() == 4) {
      final MultivariateGaussian roadDistribution=PathUtils.getRoadBeliefFromGround(prior,Iterables.getOnlyElement(this.path.getPathEdges()),true,this.currentState.getPathStateParam().getValue().getMotionState(),this.currentTimeDiff);
      if (roadDistribution.getMean().getElement(1) > 0d) {
        distributions.add(new PathStateDistribution(this.path,roadDistribution));
        weights.add(0d);
        totalWeight=0d;
      }
    }
 else {
      final MultivariateGaussian roadDistribution=prior;
      for (      final PathEdge edge : this.path.getPathEdges()) {
        final TruncatedRoadGaussian edgeResult=PathStateEstimatorPredictor.getPathEdgePredictive(roadDistribution,edge,this.currentState.getObservation().getObsProjected(),null,this.currentTimeDiff);
        final PathStateDistribution prediction=new PathStateDistribution(this.path.getPathTo(edge),edgeResult);
        distributions.add(prediction);
        final double edgeWeight=roadDistribution.getProbabilityFunction().logEvaluate(prediction.getMean());
        totalWeight=LogMath.add(totalWeight,edgeWeight);
        weights.add(edgeWeight);
      }
    }
  }
  final double[] nativeWeights=new double[weights.size()];
  int i=0;
  for (  final Double weight : weights) {
    nativeWeights[i]=weight - totalWeight;
    i++;
  }
  final PathStateMixtureDensityModel result=new PathStateMixtureDensityModel(distributions,nativeWeights);
  Preconditions.checkState(result.getDistributionCount() == 0 || Math.abs(Math.exp(result.getPriorWeightSum()) - 1d) < 1e-5);
  return result;
}","/** 
 * This method returns the predictive distribution over the conditional path. Note that the prior must be converted to this path's distance and direction, and the current vehicle state must have a value for its path state parameter.
 * @param prior
 * @return
 */
@Override public PathStateMixtureDensityModel createPredictiveDistribution(MultivariateGaussian prior){
  final List<PathStateDistribution> distributions=Lists.newArrayList();
  final List<Double> weights=Lists.newArrayList();
  double totalWeight=Double.NEGATIVE_INFINITY;
  if (this.path.isNullPath()) {
    MultivariateGaussian groundDistribution;
    if (prior.getInputDimensionality() == 4) {
      groundDistribution=prior.clone();
    }
 else {
      final PathState prevPathState=this.currentState.getPathStateParam().getValue();
      groundDistribution=PathUtils.getGroundBeliefFromRoad(prior.clone(),prevPathState.getEdge(),true,true);
    }
    distributions.add(new PathStateDistribution(this.path,groundDistribution));
    weights.add(0d);
    totalWeight=0d;
  }
 else {
    if (prior.getInputDimensionality() == 4) {
      final MultivariateGaussian roadDistribution=PathUtils.getRoadBeliefFromGround(prior,Iterables.getOnlyElement(this.path.getPathEdges()),true,this.currentState.getPathStateParam().getValue().getMotionState(),this.currentTimeDiff);
      if (roadDistribution.getMean().getElement(1) > 0d) {
        distributions.add(new PathStateDistribution(this.path,roadDistribution));
        weights.add(0d);
        totalWeight=0d;
      }
    }
 else {
      final MultivariateGaussian roadDistribution=prior;
      for (      final PathEdge edge : this.path.getPathEdges()) {
        final TruncatedRoadGaussian edgeResult=PathStateEstimatorPredictor.getPathEdgePredictive(roadDistribution,this.currentState.getOnRoadModelCovarianceParam().getValue(),edge,this.currentState.getObservation().getObsProjected(),null,this.currentTimeDiff);
        final PathStateDistribution prediction=new PathStateDistribution(this.path.getPathTo(edge),edgeResult);
        distributions.add(prediction);
        final double edgeWeight=roadDistribution.getProbabilityFunction().logEvaluate(prediction.getMean());
        totalWeight=LogMath.add(totalWeight,edgeWeight);
        weights.add(edgeWeight);
      }
    }
  }
  final double[] nativeWeights=new double[weights.size()];
  int i=0;
  for (  final Double weight : weights) {
    nativeWeights[i]=weight - totalWeight;
    i++;
  }
  final PathStateMixtureDensityModel result=new PathStateMixtureDensityModel(distributions,nativeWeights);
  Preconditions.checkState(result.getDistributionCount() == 0 || Math.abs(Math.exp(result.getPriorWeightSum()) - 1d) < 1e-5);
  return result;
}",0.9886638171343616
189434,"/** 
 * Truncated normal mixing component.
 * @param beliefPrediction
 * @return
 */
public static double marginalPredictiveLogLikInternal(MultivariateGaussian roadDistribution,PathEdge edge,Coordinate obs,Double startDistance,double deltaTime){
  final Matrix Or=MotionStateEstimatorPredictor.getOr();
  double edgeLength;
  final double distToStartOfEdge;
  LineSegment lineSegment;
  if (startDistance != null && edge.getDistToStartOfEdge() == 0) {
    edgeLength=edge.getLength() - startDistance;
    if (edgeLength < 10d) {
      distToStartOfEdge=Math.max(startDistance - 10d,10d);
      edgeLength=edge.getLength() - distToStartOfEdge;
    }
 else {
      distToStartOfEdge=startDistance;
    }
    lineSegment=new LineSegment(edge.getInferenceGraphSegment().getLine().pointAlong(distToStartOfEdge / edge.getLength()),edge.getInferenceGraphSegment().getLine().p1);
  }
 else {
    edgeLength=edge.getLength();
    distToStartOfEdge=edge.getDistToStartOfEdge();
    lineSegment=edge.getInferenceGraphSegment().getLine();
  }
  final double S=Or.times(roadDistribution.getCovariance()).times(Or.transpose()).getElement(0,0) + Math.pow(edgeLength / Math.sqrt(12),2);
  final double mean;
  if (edgeLength < 1e-5) {
    mean=distToStartOfEdge;
  }
 else {
    mean=lineSegment.segmentFraction(obs) * edgeLength + distToStartOfEdge;
  }
  return UnivariateGaussian.PDF.logEvaluate(roadDistribution.getMean().getElement(0),mean,S);
}","/** 
 * Truncated normal mixing component.
 * @param beliefPrediction
 * @return
 */
public static double marginalPredictiveLogLikInternal(MultivariateGaussian roadDistribution,Matrix stateTransCov,PathEdge edge,Coordinate obs,Double startDistance,double deltaTime){
  final Matrix Or=MotionStateEstimatorPredictor.getOr();
  double edgeLength;
  final double distToStartOfEdge;
  LineSegment lineSegment;
  if (startDistance != null && edge.getDistToStartOfEdge() == 0) {
    edgeLength=edge.getLength() - startDistance;
    if (edgeLength < 10d) {
      distToStartOfEdge=Math.max(startDistance - 10d,10d);
      edgeLength=edge.getLength() - distToStartOfEdge;
    }
 else {
      distToStartOfEdge=startDistance;
    }
    lineSegment=new LineSegment(edge.getInferenceGraphSegment().getLine().pointAlong(distToStartOfEdge / edge.getLength()),edge.getInferenceGraphSegment().getLine().p1);
  }
 else {
    edgeLength=edge.getLength();
    distToStartOfEdge=edge.getDistToStartOfEdge();
    lineSegment=edge.getInferenceGraphSegment().getLine();
  }
  final double S=Or.times(stateTransCov).times(Or.transpose()).getElement(0,0) + Math.pow(edgeLength / Math.sqrt(12),2);
  final double mean;
  if (edgeLength < 1e-5) {
    mean=distToStartOfEdge;
  }
 else {
    mean=lineSegment.segmentFraction(obs) * edgeLength + distToStartOfEdge;
  }
  return UnivariateGaussian.PDF.logEvaluate(roadDistribution.getMean().getElement(0),mean,S);
}",0.9790940766550522
189435,"/** 
 * Returns the predictive distribution for the given edge.
 * @param roadDistribution
 * @param edge
 * @return
 */
public static TruncatedRoadGaussian getPathEdgePredictive(MultivariateGaussian roadDistribution,PathEdge edge,Coordinate obs,Double startDistance,double deltaTime){
  final Matrix Or=MotionStateEstimatorPredictor.getOr();
  double edgeLength;
  final double distToStartOfEdge;
  LineSegment lineSegment;
  if (startDistance != null && edge.getDistToStartOfEdge() == 0) {
    edgeLength=edge.getLength() - startDistance;
    if (edgeLength < 10d) {
      distToStartOfEdge=Math.max(startDistance - 10d,10d);
      edgeLength=edge.getLength() - distToStartOfEdge;
    }
 else {
      distToStartOfEdge=startDistance;
    }
    lineSegment=new LineSegment(edge.getInferenceGraphSegment().getLine().pointAlong(distToStartOfEdge / edge.getLength()),edge.getInferenceGraphSegment().getLine().p1);
  }
 else {
    edgeLength=edge.getLength();
    distToStartOfEdge=edge.getDistToStartOfEdge();
    lineSegment=edge.getInferenceGraphSegment().getLine();
  }
  final double S=Or.times(roadDistribution.getCovariance()).times(Or.transpose()).getElement(0,0) + Math.pow(edgeLength / Math.sqrt(12),2);
  final Matrix W=roadDistribution.getCovariance().times(Or.transpose()).scale(1 / S);
  final Matrix R=roadDistribution.getCovariance().minus(W.times(W.transpose()).scale(S));
  final double mean;
  if (edgeLength < 1e-5) {
    mean=distToStartOfEdge;
  }
 else {
    mean=lineSegment.segmentFraction(obs) * edgeLength + distToStartOfEdge;
  }
  final Vector beliefMean=roadDistribution.getMean();
  final double e=mean - Or.times(beliefMean).getElement(0);
  W.setElement(0,0,1d);
  W.setElement(1,0,1d / deltaTime);
  final Vector a=beliefMean.plus(W.getColumn(0).scale(e));
  if (a.getElement(1) < 0d) {
    a.setElement(1,0d);
  }
  final double afterEndDist=-Math.min(distToStartOfEdge + edgeLength - a.getElement(0),0d);
  final double beforeBeginDist=-Math.min(a.getElement(0) - distToStartOfEdge,0d);
  if (afterEndDist > 0d) {
    if (afterEndDist > 1d) {
      return null;
    }
 else {
      a.setElement(0,distToStartOfEdge + edgeLength - 1e-5);
    }
  }
 else   if (beforeBeginDist > 0d) {
    if (beforeBeginDist > 1d) {
      return null;
    }
 else {
      a.setElement(0,distToStartOfEdge + 1e-5);
    }
  }
  SvdMatrix covarResult=new SvdMatrix(R);
  final AbstractSingularValueDecomposition svd=covarResult.getSvd();
  covarResult=new SvdMatrix(new SimpleSingularValueDecomposition(svd.getU(),svd.getS(),svd.getU().transpose()));
  final TruncatedRoadGaussian result=new TruncatedRoadGaussian(a,covarResult);
  return result;
}","/** 
 * Returns the predictive distribution for the given edge.
 * @param roadDistribution
 * @param edge
 * @return
 */
public static TruncatedRoadGaussian getPathEdgePredictive(MultivariateGaussian roadDistribution,Matrix measurementError,PathEdge edge,Coordinate obs,Double startDistance,double deltaTime){
  final Matrix Or=MotionStateEstimatorPredictor.getOr();
  double edgeLength;
  final double distToStartOfEdge;
  LineSegment lineSegment;
  if (startDistance != null && edge.getDistToStartOfEdge() == 0) {
    edgeLength=edge.getLength() - startDistance;
    if (edgeLength < 10d) {
      distToStartOfEdge=Math.max(startDistance - 10d,10d);
      edgeLength=edge.getLength() - distToStartOfEdge;
    }
 else {
      distToStartOfEdge=startDistance;
    }
    lineSegment=new LineSegment(edge.getInferenceGraphSegment().getLine().pointAlong(distToStartOfEdge / edge.getLength()),edge.getInferenceGraphSegment().getLine().p1);
  }
 else {
    edgeLength=edge.getLength();
    distToStartOfEdge=edge.getDistToStartOfEdge();
    lineSegment=edge.getInferenceGraphSegment().getLine();
  }
  final double S=Or.times(measurementError).times(Or.transpose()).getElement(0,0) + Math.pow(edgeLength / Math.sqrt(12),2);
  final Matrix W=roadDistribution.getCovariance().times(Or.transpose()).scale(1 / S);
  final Matrix R=roadDistribution.getCovariance().minus(W.times(W.transpose()).scale(S));
  final double mean;
  if (edgeLength < 1e-5) {
    mean=distToStartOfEdge;
  }
 else {
    mean=lineSegment.segmentFraction(obs) * edgeLength + distToStartOfEdge;
  }
  final Vector beliefMean=roadDistribution.getMean();
  final double e=mean - Or.times(beliefMean).getElement(0);
  W.setElement(0,0,1d);
  W.setElement(1,0,1d / deltaTime);
  final Vector a=beliefMean.plus(W.getColumn(0).scale(e));
  if (a.getElement(1) < 0d) {
    a.setElement(1,0d);
  }
  final double afterEndDist=-Math.min(distToStartOfEdge + edgeLength - a.getElement(0),0d);
  final double beforeBeginDist=-Math.min(a.getElement(0) - distToStartOfEdge,0d);
  if (afterEndDist > 0d) {
    if (afterEndDist > 1d) {
      return null;
    }
 else {
      a.setElement(0,distToStartOfEdge + edgeLength - 1e-5);
    }
  }
 else   if (beforeBeginDist > 0d) {
    if (beforeBeginDist > 1d) {
      return null;
    }
 else {
      a.setElement(0,distToStartOfEdge + 1e-5);
    }
  }
  SvdMatrix covarResult=new SvdMatrix(R);
  final AbstractSingularValueDecomposition svd=covarResult.getSvd();
  covarResult=new SvdMatrix(new SimpleSingularValueDecomposition(svd.getU(),svd.getS(),svd.getU().transpose()));
  final TruncatedRoadGaussian result=new TruncatedRoadGaussian(a,covarResult);
  return result;
}",0.9864864864864864
189436,"private void updateAndCheckStats(DataDistribution<VehicleStateDistribution<GpsObservation>> vehicleStateDist,VehicleStateDistribution<GpsObservation> trueVehicleState,SufficientStatistic obsErrorSS,SufficientStatistic stateErrorSS,SufficientStatistic obsCovErrorSS,SufficientStatistic onRoadCovErrorSS,SufficientStatistic offRoadCovErrorSS,SufficientStatistic transitionsSS,boolean generalizeMoveDiff){
  final SufficientStatistic groundStateMeanStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic obsCovMeanStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic onRoadCovStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic offRoadCovStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic transitionStat=new MultivariateGaussian.SufficientStatistic();
  int truePathsFound=0;
  int numOnTrueEdge=0;
  final boolean hasPriorOnVariances=false;
  Preconditions.checkState(vehicleStateDist.getDomainSize() > 0);
  trueVehicleState.getObservation().getProjectedPoint().minus(trueVehicleState.getMeanLocation());
  for (  final VehicleStateDistribution<GpsObservation> state : vehicleStateDist.getDomain()) {
    AssertJUnit.assertEquals(new TrueObservation(trueVehicleState.getObservation(),null),state.getObservation());
    final int stateCount;
    if (vehicleStateDist instanceof CountedDataDistribution<?>) {
      stateCount=((CountedDataDistribution<VehicleStateDistribution<GpsObservation>>)vehicleStateDist).getCount(state);
    }
 else {
      stateCount=1;
    }
    final PathState pathState=state.getPathStateParam().getValue();
    final PathState truePathState=state.getPathStateParam().getValue();
    final VehicleStateDistribution<GpsObservation> parentState=state.getParentState();
    Vector transType=null;
    if (parentState != null) {
      final PathState parentPathState=parentState.getPathStateParam().getValue();
      transType=OnOffEdgeTransDistribution.getTransitionType(parentPathState.getEdge().getInferenceGraphEdge(),pathState.getEdge().getInferenceGraphEdge());
      if (parentPathState.isOnRoad()) {
        transType=transType.stack(MotionStateEstimatorPredictor.zeros2D);
      }
 else {
        transType=MotionStateEstimatorPredictor.zeros2D.stack(transType);
      }
    }
    for (int i=0; i < stateCount; i++) {
      if ((pathState.isOnRoad() && truePathState.isOnRoad() && pathState.getPath().getGeometry().covers(truePathState.getPath().getGeometry())) || (!pathState.isOnRoad() && !truePathState.isOnRoad())) {
        truePathsFound++;
      }
      if (pathState.getEdge().getInferenceGraphEdge().equals(truePathState.getEdge().getInferenceGraphEdge())) {
        numOnTrueEdge++;
      }
      groundStateMeanStat.update(pathState.getGroundState());
      final Matrix obsCovMean=state.getObservationCovarianceParam().getParameterPrior().getMean();
      obsCovMeanStat.update(obsCovMean.convertToVector());
      final Matrix onRoadCovMean=state.getOnRoadModelCovarianceParam().getParameterPrior().getMean();
      onRoadCovStat.update(onRoadCovMean.convertToVector());
      offRoadCovStat.update(state.getOffRoadModelCovarianceParam().getValue().convertToVector());
      if (transType != null) {
        transitionStat.update(transType);
      }
    }
  }
  this.log.debug(""String_Node_Str"" + truePathsFound);
  this.log.debug(""String_Node_Str"" + numOnTrueEdge);
  Preconditions.checkNotNull(groundStateMeanStat.getMean());
  final Vector obsError=trueVehicleState.getObservation().getProjectedPoint().minus(MotionStateEstimatorPredictor.getOg().times(groundStateMeanStat.getMean()));
  final PathState truePathState=trueVehicleState.getPathStateParam().getValue();
  final Vector stateError=truePathState.getGroundState().minus(groundStateMeanStat.getMean());
  final Vector obsCovError;
  final Vector onRoadCovError;
  final Vector offRoadCovError;
  obsCovError=obsCovMeanStat.getMean().minus(trueVehicleState.getObservationCovarianceParam().getValue().convertToVector());
  onRoadCovError=onRoadCovStat.getMean().minus(trueVehicleState.getOnRoadModelCovarianceParam().getValue().convertToVector());
  offRoadCovError=offRoadCovStat.getMean().minus(trueVehicleState.getOffRoadModelCovarianceParam().getValue().convertToVector());
  this.log.info(""String_Node_Str"" + truePathState.getMotionState());
  this.log.debug(""String_Node_Str"" + obsError);
  this.log.debug(""String_Node_Str"" + stateError);
  this.log.debug(""String_Node_Str"" + obsCovMeanStat.getMean());
  this.log.debug(""String_Node_Str"" + onRoadCovStat.getMean());
  this.log.debug(""String_Node_Str"" + offRoadCovStat.getMean());
  if (transitionStat.getMean() != null) {
    final Vector trueTransProbs=trueVehicleState.getEdgeTransitionParam().getParameterPrior().getEdgeMotionTransProbPrior().getMean().stack(trueVehicleState.getEdgeTransitionParam().getParameterPrior().getFreeMotionTransProbPrior().getMean());
    transitionsSS.update(transitionStat.getMean().minus(trueTransProbs));
  }
  obsErrorSS.update(obsError);
  stateErrorSS.update(stateError);
  obsCovErrorSS.update(obsCovError);
  onRoadCovErrorSS.update(onRoadCovError);
  offRoadCovErrorSS.update(offRoadCovError);
  if (!hasPriorOnVariances) {
    this.log.debug(""String_Node_Str"" + obsErrorSS.getMean());
    this.log.debug(""String_Node_Str"" + stateErrorSS.getMean());
  }
  if (obsErrorSS.getCount() > 1) {
    VehicleStatePLFilterSimulationTest.assertVectorWithCovarianceError(obsErrorSS.getMean(),trueVehicleState.getObservationCovarianceParam().getValue(),5d);
    final Matrix stateModelCovariance=this.createModelCovariance(trueVehicleState,stateErrorSS);
    VehicleStatePLFilterSimulationTest.assertVectorWithCovarianceError(stateErrorSS.getMean(),stateModelCovariance,5d);
    ArrayAsserts.assertArrayEquals(VehicleStatePLFilterSimulationTest.fourZeros,obsCovErrorSS.getMean().toArray(),0.7d * trueVehicleState.getObservationCovarianceParam().getValue().normFrobenius());
    ArrayAsserts.assertArrayEquals(VehicleStatePLFilterSimulationTest.oneZero,onRoadCovErrorSS.getMean().toArray(),0.7d * trueVehicleState.getOnRoadModelCovarianceParam().getValue().normFrobenius());
    ArrayAsserts.assertArrayEquals(VehicleStatePLFilterSimulationTest.fourZeros,offRoadCovErrorSS.getMean().toArray(),0.7d * trueVehicleState.getOffRoadModelCovarianceParam().getValue().normFrobenius());
  }
}","private void updateAndCheckStats(DataDistribution<VehicleStateDistribution<GpsObservation>> vehicleStateDist,VehicleStateDistribution<GpsObservation> trueVehicleState,SufficientStatistic obsErrorSS,SufficientStatistic stateErrorSS,SufficientStatistic obsCovErrorSS,SufficientStatistic onRoadCovErrorSS,SufficientStatistic offRoadCovErrorSS,SufficientStatistic transitionsSS,boolean generalizeMoveDiff){
  final SufficientStatistic groundStateMeanStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic obsCovMeanStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic onRoadCovStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic offRoadCovStat=new MultivariateGaussian.SufficientStatistic();
  final SufficientStatistic transitionStat=new MultivariateGaussian.SufficientStatistic();
  int truePathsFound=0;
  int numOnTrueEdge=0;
  final boolean hasPriorOnVariances=false;
  Preconditions.checkState(vehicleStateDist.getDomainSize() > 0);
  trueVehicleState.getObservation().getProjectedPoint().minus(trueVehicleState.getMeanLocation());
  for (  final VehicleStateDistribution<GpsObservation> state : vehicleStateDist.getDomain()) {
    AssertJUnit.assertEquals(new TrueObservation(trueVehicleState.getObservation(),null),state.getObservation());
    final int stateCount;
    if (vehicleStateDist instanceof CountedDataDistribution<?>) {
      stateCount=((CountedDataDistribution<VehicleStateDistribution<GpsObservation>>)vehicleStateDist).getCount(state);
    }
 else {
      stateCount=1;
    }
    final PathState pathState=state.getPathStateParam().getValue();
    final PathState truePathState=state.getPathStateParam().getValue();
    final VehicleStateDistribution<GpsObservation> parentState=state.getParentState();
    Vector transType=null;
    if (parentState != null) {
      final PathState parentPathState=parentState.getPathStateParam().getValue();
      transType=OnOffEdgeTransDistribution.getTransitionType(parentPathState.getEdge().getInferenceGraphSegment(),pathState.getEdge().getInferenceGraphSegment());
      if (parentPathState.isOnRoad()) {
        transType=transType.stack(MotionStateEstimatorPredictor.zeros2D);
      }
 else {
        transType=MotionStateEstimatorPredictor.zeros2D.stack(transType);
      }
    }
    for (int i=0; i < stateCount; i++) {
      if ((pathState.isOnRoad() && truePathState.isOnRoad() && pathState.getPath().getGeometry().covers(truePathState.getPath().getGeometry())) || (!pathState.isOnRoad() && !truePathState.isOnRoad())) {
        truePathsFound++;
      }
      if (pathState.getEdge().getInferenceGraphSegment().equals(truePathState.getEdge().getInferenceGraphSegment())) {
        numOnTrueEdge++;
      }
      groundStateMeanStat.update(pathState.getGroundState());
      final Matrix obsCovMean=state.getObservationCovarianceParam().getParameterPrior().getMean();
      obsCovMeanStat.update(obsCovMean.convertToVector());
      final Matrix onRoadCovMean=state.getOnRoadModelCovarianceParam().getParameterPrior().getMean();
      onRoadCovStat.update(onRoadCovMean.convertToVector());
      offRoadCovStat.update(state.getOffRoadModelCovarianceParam().getValue().convertToVector());
      if (transType != null) {
        transitionStat.update(transType);
      }
    }
  }
  this.log.debug(""String_Node_Str"" + truePathsFound);
  this.log.debug(""String_Node_Str"" + numOnTrueEdge);
  Preconditions.checkNotNull(groundStateMeanStat.getMean());
  final Vector obsError=trueVehicleState.getObservation().getProjectedPoint().minus(MotionStateEstimatorPredictor.getOg().times(groundStateMeanStat.getMean()));
  final PathState truePathState=trueVehicleState.getPathStateParam().getValue();
  final Vector stateError=truePathState.getGroundState().minus(groundStateMeanStat.getMean());
  final Vector obsCovError;
  final Vector onRoadCovError;
  final Vector offRoadCovError;
  obsCovError=obsCovMeanStat.getMean().minus(trueVehicleState.getObservationCovarianceParam().getValue().convertToVector());
  onRoadCovError=onRoadCovStat.getMean().minus(trueVehicleState.getOnRoadModelCovarianceParam().getValue().convertToVector());
  offRoadCovError=offRoadCovStat.getMean().minus(trueVehicleState.getOffRoadModelCovarianceParam().getValue().convertToVector());
  this.log.info(""String_Node_Str"" + truePathState.getMotionState());
  this.log.debug(""String_Node_Str"" + obsError);
  this.log.debug(""String_Node_Str"" + stateError);
  this.log.debug(""String_Node_Str"" + obsCovMeanStat.getMean());
  this.log.debug(""String_Node_Str"" + onRoadCovStat.getMean());
  this.log.debug(""String_Node_Str"" + offRoadCovStat.getMean());
  if (transitionStat.getMean() != null) {
    final Vector trueTransProbs=trueVehicleState.getEdgeTransitionParam().getParameterPrior().getEdgeMotionTransProbPrior().getMean().stack(trueVehicleState.getEdgeTransitionParam().getParameterPrior().getFreeMotionTransProbPrior().getMean());
    transitionsSS.update(transitionStat.getMean().minus(trueTransProbs));
  }
  obsErrorSS.update(obsError);
  stateErrorSS.update(stateError);
  obsCovErrorSS.update(obsCovError);
  onRoadCovErrorSS.update(onRoadCovError);
  offRoadCovErrorSS.update(offRoadCovError);
  if (!hasPriorOnVariances) {
    this.log.debug(""String_Node_Str"" + obsErrorSS.getMean());
    this.log.debug(""String_Node_Str"" + stateErrorSS.getMean());
  }
  if (obsErrorSS.getCount() > 1) {
    VehicleStatePLFilterSimulationTest.assertVectorWithCovarianceError(obsErrorSS.getMean(),trueVehicleState.getObservationCovarianceParam().getValue(),5d);
    final Matrix stateModelCovariance=this.createModelCovariance(trueVehicleState,stateErrorSS);
    VehicleStatePLFilterSimulationTest.assertVectorWithCovarianceError(stateErrorSS.getMean(),stateModelCovariance,5d);
    ArrayAsserts.assertArrayEquals(VehicleStatePLFilterSimulationTest.fourZeros,obsCovErrorSS.getMean().toArray(),0.7d * trueVehicleState.getObservationCovarianceParam().getValue().normFrobenius());
    ArrayAsserts.assertArrayEquals(VehicleStatePLFilterSimulationTest.oneZero,onRoadCovErrorSS.getMean().toArray(),0.7d * trueVehicleState.getOnRoadModelCovarianceParam().getValue().normFrobenius());
    ArrayAsserts.assertArrayEquals(VehicleStatePLFilterSimulationTest.fourZeros,offRoadCovErrorSS.getMean().toArray(),0.7d * trueVehicleState.getOffRoadModelCovarianceParam().getValue().normFrobenius());
  }
}",0.9923329682365828
189437,"/** 
 * Initialize prior from the given hyper prior parameters, using the hyper prior means (i.e. the given parameters).
 * @param graph
 * @param edgeMotionPriorParams
 * @param freeMotionPriorParams
 * @param rng
 */
public OnOffEdgeTransPriorDistribution(Vector edgeMotionPriorParams,Vector freeMotionPriorParams){
  this.setFreeMotionTransProbPrior(new DirichletDistribution(freeMotionPriorParams));
  this.setEdgeMotionTransProbPrior(new DirichletDistribution(edgeMotionPriorParams));
}","/** 
 * Initialize prior from the given hyper prior parameters, using the hyper prior means (i.e. the given parameters).
 * @param graph
 * @param edgeMotionPriorParams
 * @param freeMotionPriorParams
 * @param rng
 */
public OnOffEdgeTransPriorDistribution(Vector edgeMotionPriorParams,Vector freeMotionPriorParams){
  this.setFreeMotionTransProbPrior(new TwoDDirichletDistribution(freeMotionPriorParams));
  this.setEdgeMotionTransProbPrior(new TwoDDirichletDistribution(edgeMotionPriorParams));
}",0.991919191919192
189438,"public DirichletDistribution getEdgeMotionTransProbPrior(){
  return this.edgeMotionTransProbPrior;
}","public TwoDDirichletDistribution getEdgeMotionTransProbPrior(){
  return this.edgeMotionTransProbPrior;
}",0.9805825242718448
189439,"public DirichletDistribution getFreeMotionTransProbPrior(){
  return this.freeMotionTransProbPrior;
}","public TwoDDirichletDistribution getFreeMotionTransProbPrior(){
  return this.freeMotionTransProbPrior;
}",0.9805825242718448
189440,"public void setFreeMotionTransProbPrior(DirichletDistribution freeMotionTransProbPrior){
  this.freeMotionTransProbPrior=freeMotionTransProbPrior;
}","public void setFreeMotionTransProbPrior(TwoDDirichletDistribution freeMotionTransProbPrior){
  this.freeMotionTransProbPrior=freeMotionTransProbPrior;
}",0.9866666666666668
189441,"public void setEdgeMotionTransProbPrior(DirichletDistribution edgeMotionTransProbPrior){
  this.edgeMotionTransProbPrior=edgeMotionTransProbPrior;
}","public void setEdgeMotionTransProbPrior(TwoDDirichletDistribution edgeMotionTransProbPrior){
  this.edgeMotionTransProbPrior=edgeMotionTransProbPrior;
}",0.9866666666666668
189442,"/** 
 * Finds a UTM projection and applies it to all coordinates of the given geom.
 * @param orig
 * @return
 */
public static Geometry projectLonLatGeom(Geometry orig){
  final Geometry geom=(Geometry)orig.clone();
  geom.apply(new CoordinateFilter(){
    @Override public void filter(    Coordinate coord){
      final ProjectedCoordinate converted=GeoUtils.convertToEuclidean(coord);
      coord.setCoordinate(converted);
    }
  }
);
  geom.geometryChanged();
  return geom;
}","/** 
 * Finds a UTM projection and applies it to all coordinates of the given geom. TODO FIXME XXX: what about when the geoms cross zones?
 * @param orig
 * @return
 */
public static Geometry projectLonLatGeom(Geometry orig){
  final Geometry geom=(Geometry)orig.clone();
  geom.apply(new CoordinateFilter(){
    @Override public void filter(    Coordinate coord){
      final ProjectedCoordinate converted=GeoUtils.convertToEuclidean(coord);
      coord.setCoordinate(converted);
    }
  }
);
  geom.geometryChanged();
  return geom;
}",0.9459193706981318
189443,"public static MathTransform getTransform(Coordinate refLatLon){
  try {
    final CRSAuthorityFactory crsAuthorityFactory=CRS.getAuthorityFactory(false);
    final GeographicCRS geoCRS=crsAuthorityFactory.createGeographicCRS(""String_Node_Str"");
    final CoordinateReferenceSystem dataCRS=crsAuthorityFactory.createCoordinateReferenceSystem(""String_Node_Str"" + GeoUtils.getEPSGCodefromUTS(refLatLon));
    final MathTransform transform=CRS.findMathTransform(geoCRS,dataCRS);
    return transform;
  }
 catch (  final NoSuchIdentifierException e) {
    e.printStackTrace();
  }
catch (  final FactoryException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Get the transform to a local euclidean projection for the area that contains the given reference (lat, lon) coordinate. 
 * @param refLatLon
 * @return
 */
public static MathTransform getTransform(Coordinate refLatLon){
  try {
    final CoordinateReferenceSystem dataCRS=crsAuthorityFactory.createCoordinateReferenceSystem(""String_Node_Str"" + GeoUtils.getEPSGCodefromUTS(refLatLon));
    final MathTransform transform=CRS.findMathTransform(geoCRS,dataCRS);
    return transform;
  }
 catch (  final NoSuchIdentifierException e) {
    e.printStackTrace();
  }
catch (  final FactoryException e) {
    e.printStackTrace();
  }
  return null;
}",0.6417112299465241
189444,"@Override public void update(DataDistribution<VehicleStateDistribution<O>> target,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> resampleDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  for (  final VehicleStateDistribution<O> state : target.getDomain()) {
    final int count;
    if (target instanceof CountedDataDistribution<?>) {
      count=((CountedDataDistribution)target).getCount(state);
    }
 else {
      count=1;
    }
    final double logCount=Math.log(count);
    VehicleStateDistribution<O> predictedState=new VehicleStateDistribution<O>(state);
    predictedState.setObservation(obs);
    predictedState=this.updater.update(predictedState);
    final PathStateMixtureDensityModel predictedPathStateMixture=predictedState.getPathStateParam().getConditionalDistribution();
    for (int i=0; i < predictedPathStateMixture.getDistributionCount(); i++) {
      final PathStateDistribution predictedPathStateDist=predictedPathStateMixture.getDistributions().get(i);
      final double pathStateDistLogLikelihood=predictedPathStateMixture.getPriorWeights()[i];
      final double edgeTransitionLogLikelihood=predictedState.getEdgeTransitionParam().getConditionalDistribution().getProbabilityFunction().logEvaluate(predictedPathStateDist.getPathState().getEdge().getInferenceGraphEdge());
      final VehicleStateDistribution<O> predictedChildState=new VehicleStateDistribution<O>(predictedState);
      predictedChildState.setPathStateParam(SimpleBayesianParameter.create(predictedPathStateDist.getPathState(),predictedPathStateMixture,predictedPathStateDist));
      final MultivariateGaussian measurementPredictionDist=predictedState.getMotionStateEstimatorPredictor().getMeasurementBelief(predictedPathStateDist);
      predictedChildState.setMotionStateParam(SimpleBayesianParameter.create(measurementPredictionDist.getMean(),measurementPredictionDist,predictedPathStateDist.getMotionStateDistribution()));
      final double predictiveLogLikelihood=this.getUpdater().computeLogLikelihood(predictedChildState,obs);
      predictedChildState.setParentState(state);
      resampleDist.increment(predictedChildState,predictiveLogLikelihood + pathStateDistLogLikelihood + edgeTransitionLogLikelihood+ logCount);
    }
  }
  final Random rng=this.getRandom();
  Preconditions.checkState(!resampleDist.isEmpty());
  if (this.isDebug)   this.lastResampleDistribution=resampleDist;
  final ArrayList<VehicleStateDistribution<O>> smoothedStates=resampleDist.sample(rng,this.getNumParticles());
  target.clear();
  for (  final VehicleStateDistribution<O> state : smoothedStates) {
    final VehicleStateDistribution<O> updatedState=state.clone();
    final PathStateDistribution pathStateDist=updatedState.getPathStateParam().getParameterPrior();
    final MultivariateGaussian updatedMotionState=pathStateDist.getGroundBelief().clone();
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    final PathStateEstimatorPredictor pathStateEstimator=new PathStateEstimatorPredictor(state,pathStateDist.getPathState().getPath());
    pathStateDist.setGroundDistribution(updatedMotionState);
    pathStateEstimator.update(pathStateDist,obs.getProjectedPoint());
    updatedState.getPathStateParam().setValue(pathStateDist.getPathState());
    updatedState.getPathStateParam().setParameterPrior(pathStateDist);
    updatedState.getMotionStateParam().setParameterPrior(pathStateDist.getMotionStateDistribution());
    MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(pathStateDist.getMotionStateDistribution(),pathStateDist.getPathState().getEdge());
    updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
    updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
    final InferenceGraphEdge graphEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphEdge();
    final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=new OnOffEdgeTransitionEstimatorPredictor(updatedState,graphEdge);
    OnOffEdgeTransPriorDistribution prior=updatedState.getEdgeTransitionParam().getParameterPrior();
    edgeTransitionEstimatorPredictor.update(prior,graphEdge);
    updatedState.getEdgeTransitionParam().getConditionalDistribution().setFreeMotionTransProbs(prior.getFreeMotionTransProbPrior().getMean());
    updatedState.getEdgeTransitionParam().getConditionalDistribution().setEdgeMotionTransProbs(prior.getEdgeMotionTransProbPrior().getMean());
    updatedState.getEdgeTransitionParam().setValue(prior.getMean());
    target.increment(updatedState,0d);
  }
  Preconditions.checkState(target.getDomainSize() > 0);
}","@Override public void update(DataDistribution<VehicleStateDistribution<O>> target,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> resampleDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  for (  final VehicleStateDistribution<O> state : target.getDomain()) {
    final int count;
    if (target instanceof CountedDataDistribution<?>) {
      count=((CountedDataDistribution)target).getCount(state);
    }
 else {
      count=1;
    }
    final double logCount=Math.log(count);
    VehicleStateDistribution<O> predictedState=new VehicleStateDistribution<O>(state);
    predictedState.setObservation(obs);
    predictedState=this.updater.update(predictedState);
    final PathStateMixtureDensityModel predictedPathStateMixture=predictedState.getPathStateParam().getConditionalDistribution();
    for (int i=0; i < predictedPathStateMixture.getDistributionCount(); i++) {
      final PathStateDistribution predictedPathStateDist=predictedPathStateMixture.getDistributions().get(i);
      final double pathStateDistLogLikelihood=predictedPathStateMixture.getPriorWeights()[i];
      final double edgeTransitionLogLikelihood=predictedState.getEdgeTransitionParam().getConditionalDistribution().getProbabilityFunction().logEvaluate(predictedPathStateDist.getPathState().getEdge().getInferenceGraphEdge());
      final VehicleStateDistribution<O> predictedChildState=new VehicleStateDistribution<O>(predictedState);
      predictedChildState.setPathStateParam(SimpleBayesianParameter.create(predictedPathStateDist.getPathState(),predictedPathStateMixture,predictedPathStateDist));
      final MultivariateGaussian measurementPredictionDist=predictedState.getMotionStateEstimatorPredictor().getMeasurementBelief(predictedPathStateDist);
      predictedChildState.setMotionStateParam(SimpleBayesianParameter.create(measurementPredictionDist.getMean(),measurementPredictionDist,predictedPathStateDist.getMotionDistribution()));
      final double predictiveLogLikelihood=this.getUpdater().computeLogLikelihood(predictedChildState,obs);
      predictedChildState.setParentState(state);
      resampleDist.increment(predictedChildState,predictiveLogLikelihood + pathStateDistLogLikelihood + edgeTransitionLogLikelihood+ logCount);
    }
  }
  final Random rng=this.getRandom();
  Preconditions.checkState(!resampleDist.isEmpty());
  if (this.isDebug)   this.lastResampleDistribution=resampleDist;
  final ArrayList<VehicleStateDistribution<O>> smoothedStates=resampleDist.sample(rng,this.getNumParticles());
  target.clear();
  for (  final VehicleStateDistribution<O> state : smoothedStates) {
    final VehicleStateDistribution<O> updatedState=state.clone();
    final PathStateDistribution pathStateDist=updatedState.getPathStateParam().getParameterPrior().clone();
    final MultivariateGaussian updatedMotionState=pathStateDist.getGroundDistribution().clone();
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    final PathStateEstimatorPredictor pathStateEstimator=new PathStateEstimatorPredictor(state,pathStateDist.getPathState().getPath());
    pathStateDist.setGroundDistribution(updatedMotionState);
    pathStateEstimator.update(pathStateDist,obs.getProjectedPoint());
    updatedState.getPathStateParam().setValue(pathStateDist.getPathState());
    updatedState.getPathStateParam().setParameterPrior(pathStateDist);
    updatedState.getMotionStateParam().setParameterPrior(pathStateDist.getMotionDistribution());
    MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(pathStateDist.getMotionDistribution(),pathStateDist.getPathState().getEdge());
    updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
    updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
    final InferenceGraphEdge graphEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphEdge();
    final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=new OnOffEdgeTransitionEstimatorPredictor(updatedState,graphEdge);
    OnOffEdgeTransPriorDistribution prior=updatedState.getEdgeTransitionParam().getParameterPrior();
    edgeTransitionEstimatorPredictor.update(prior,graphEdge);
    updatedState.getEdgeTransitionParam().getConditionalDistribution().setFreeMotionTransProbs(prior.getFreeMotionTransProbPrior().getMean());
    updatedState.getEdgeTransitionParam().getConditionalDistribution().setEdgeMotionTransProbs(prior.getEdgeMotionTransProbPrior().getMean());
    updatedState.getEdgeTransitionParam().setValue(prior.getMean());
    target.increment(updatedState,0d);
  }
  Preconditions.checkState(target.getDomainSize() > 0);
}",0.8512335958005249
189445,"@Override public Vector convertToVector(){
  return this.distribution.convertToVector();
}","@Override public Vector convertToVector(){
  return this.motionDistribution.convertToVector();
}",0.956989247311828
189446,"public void setMean(Vector mean){
  this.distribution.setMean(mean);
  this.groundBelief=null;
  this.pathState=new PathState(this.path,mean);
}","public void setMean(Vector mean){
  this.motionDistribution.setMean(mean);
  this.edgeDistribution=null;
  this.groundDistribution=null;
  this.pathState=new PathState(this.path,mean);
}",0.8363636363636363
189447,"public Matrix getCovariance(){
  return this.distribution.getCovariance();
}","public Matrix getCovariance(){
  return this.motionDistribution.getCovariance();
}",0.9493670886075948
189448,"public PathStateDistribution getRelatableState(PathStateDistribution stateBelief){
  final Path path=this.pathState.getPath();
  final PathState onThisPath=this.pathState.getRelatableState(stateBelief.getPathState());
  final Matrix covar;
  if (path.isNullPath()) {
    covar=stateBelief.getGroundBelief().getCovariance();
  }
 else {
    if (!stateBelief.getPathState().isOnRoad()) {
      final PathEdgeProjection proj=PathUtils.getRoadProjection(stateBelief.getMotionStateDistribution().getMean(),path.getGeometry(),onThisPath.getEdge().getLine(),onThisPath.getEdge().getDistToStartOfEdge());
      final Matrix C=stateBelief.getCovariance();
      covar=proj.getProjMatrix().transpose().times(C).times(proj.getProjMatrix());
    }
 else {
      covar=stateBelief.getCovariance();
    }
  }
  final PathStateDistribution newBelief=stateBelief.clone();
  newBelief.distribution.setMean(onThisPath.getMotionState());
  newBelief.distribution.setCovariance(covar);
  return newBelief;
}","public PathStateDistribution getRelatableState(PathStateDistribution stateBelief){
  final Path path=this.pathState.getPath();
  final PathState onThisPath=this.pathState.getRelatableState(stateBelief.getPathState());
  final Matrix covar;
  if (path.isNullPath()) {
    covar=stateBelief.getGroundDistribution().getCovariance();
  }
 else {
    if (!stateBelief.getPathState().isOnRoad()) {
      final PathEdgeProjection proj=PathUtils.getRoadProjection(stateBelief.getMotionDistribution().getMean(),path.getGeometry(),onThisPath.getEdge().getLine(),onThisPath.getEdge().getDistToStartOfEdge());
      final Matrix C=stateBelief.getCovariance();
      covar=proj.getProjMatrix().transpose().times(C).times(proj.getProjMatrix());
    }
 else {
      covar=stateBelief.getCovariance();
    }
  }
  final PathStateDistribution newBelief=stateBelief.clone();
  newBelief.motionDistribution.setMean(onThisPath.getMotionState());
  newBelief.motionDistribution.setCovariance(covar);
  return newBelief;
}",0.980372420734776
189449,"public PathStateDistribution convertToPath(Path newPath){
  final PathState onThisPath=this.pathState.convertToPath(newPath);
  final Matrix covar;
  if (newPath.isNullPath()) {
    covar=this.getGroundBelief().getCovariance();
  }
 else {
    if (!this.pathState.isOnRoad()) {
      PathEdgeProjection proj=PathUtils.getRoadProjection(this.pathState.getGroundState(),path.getGeometry(),onThisPath.getEdge().getLine(),onThisPath.getEdge().getDistToStartOfEdge());
      final Matrix C=this.getCovariance();
      covar=proj.getProjMatrix().transpose().times(C).times(proj.getProjMatrix());
    }
 else {
      covar=this.getCovariance();
    }
  }
  final MultivariateGaussian newBelief=this.distribution.clone();
  newBelief.setMean(onThisPath.getMotionState());
  newBelief.setCovariance(covar);
  return new PathStateDistribution(newPath,newBelief);
}","public PathStateDistribution convertToPath(Path newPath){
  final PathState onThisPath=this.pathState.convertToPath(newPath);
  final Matrix covar;
  if (newPath.isNullPath()) {
    covar=this.getGroundDistribution().getCovariance();
  }
 else {
    if (!this.pathState.isOnRoad()) {
      PathEdgeProjection proj=PathUtils.getRoadProjection(this.pathState.getGroundState(),path.getGeometry(),onThisPath.getEdge().getLine(),onThisPath.getEdge().getDistToStartOfEdge());
      final Matrix C=this.getCovariance();
      covar=proj.getProjMatrix().transpose().times(C).times(proj.getProjMatrix());
    }
 else {
      covar=this.getCovariance();
    }
  }
  final MultivariateGaussian newBelief=this.motionDistribution.clone();
  newBelief.setMean(onThisPath.getMotionState());
  newBelief.setCovariance(covar);
  return new PathStateDistribution(newPath,newBelief);
}",0.9848837209302326
189450,"public PDF(PathStateDistribution pathStateDistribution){
  super(pathStateDistribution);
  this.gaussianPdf=pathStateDistribution.distribution.getProbabilityFunction();
}","public PDF(PathStateDistribution pathStateDistribution){
  super(pathStateDistribution);
  this.gaussianPdf=pathStateDistribution.motionDistribution.getProbabilityFunction();
}",0.976878612716763
189451,"@Override public void convertFromVector(Vector parameters){
  this.distribution.convertFromVector(parameters);
}","@Override public void convertFromVector(Vector parameters){
  this.motionDistribution.convertFromVector(parameters);
  this.groundDistribution=null;
  this.edgeDistribution=null;
  this.pathState=new PathState(this.path,this.motionDistribution.getMean());
}",0.6016260162601627
189452,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!super.equals(obj)) {
    return false;
  }
  if (this.getClass() != obj.getClass()) {
    return false;
  }
  final PathStateDistribution other=(PathStateDistribution)obj;
  if (this.pathState == null) {
    if (other.pathState != null) {
      return false;
    }
  }
 else   if (!this.pathState.equals(other.pathState)) {
    return false;
  }
  if (this.distribution == null) {
    if (other.distribution != null) {
      return false;
    }
  }
 else   if (!this.distribution.equals(other.distribution)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!super.equals(obj)) {
    return false;
  }
  if (this.getClass() != obj.getClass()) {
    return false;
  }
  final PathStateDistribution other=(PathStateDistribution)obj;
  if (this.pathState == null) {
    if (other.pathState != null) {
      return false;
    }
  }
 else   if (!this.pathState.equals(other.pathState)) {
    return false;
  }
  if (this.motionDistribution == null) {
    if (other.motionDistribution != null) {
      return false;
    }
  }
 else   if (!this.motionDistribution.equals(other.motionDistribution)) {
    return false;
  }
  return true;
}",0.8363914373088684
189453,"@Override public PathStateDistribution clone(){
  final PathStateDistribution clone=(PathStateDistribution)super.clone();
  clone.path=ObjectUtil.cloneSmart(this.path);
  clone.pathState=ObjectUtil.cloneSmart(this.pathState);
  clone.distribution=this.distribution.clone();
  clone.groundBelief=ObjectUtil.cloneSmart(this.groundBelief);
  clone.localStateBelief=ObjectUtil.cloneSmart(this.localStateBelief);
  return clone;
}","@Override public PathStateDistribution clone(){
  final PathStateDistribution clone=(PathStateDistribution)super.clone();
  clone.path=ObjectUtil.cloneSmart(this.path);
  clone.pathState=ObjectUtil.cloneSmart(this.pathState);
  clone.motionDistribution=this.motionDistribution.clone();
  clone.groundDistribution=ObjectUtil.cloneSmart(this.groundDistribution);
  clone.edgeDistribution=ObjectUtil.cloneSmart(this.edgeDistribution);
  return clone;
}",0.5926773455377574
189454,"/** 
 * Updates the internal distribution to correspond to the argument projected onto the current edge.
 * @param newGroundDist
 */
public void setGroundDistribution(MultivariateGaussian newGroundDist){
  Preconditions.checkArgument(newGroundDist.getInputDimensionality() == 4);
  if (!this.path.isNullPath()) {
    this.distribution=PathUtils.getRoadBeliefFromGround(newGroundDist,this.pathState.getEdge(),true);
    this.pathState=new PathState(this.pathState.getPath(),this.distribution.getMean());
  }
  this.groundBelief=newGroundDist;
}","/** 
 * Updates the internal distribution to correspond to the argument projected onto the current edge.
 * @param newGroundDist
 */
public void setGroundDistribution(MultivariateGaussian newGroundDist){
  Preconditions.checkArgument(newGroundDist.getInputDimensionality() == 4);
  if (!this.path.isNullPath()) {
    this.motionDistribution=PathUtils.getRoadBeliefFromGround(newGroundDist,this.pathState.getEdge(),true);
  }
 else {
    this.motionDistribution=newGroundDist;
  }
  this.pathState=new PathState(this.pathState.getPath(),this.motionDistribution.getMean());
  this.groundDistribution=newGroundDist;
  this.edgeDistribution=null;
}",0.8491996630160067
189455,"@Override public String toString(){
  ToStringBuilder builder=new ToStringBuilder(this,ToStringStyle.SHORT_PREFIX_STYLE);
  builder.append(""String_Node_Str"",distribution);
  builder.append(""String_Node_Str"",path);
  return builder.toString();
}","@Override public String toString(){
  ToStringBuilder builder=new ToStringBuilder(this,ToStringStyle.SHORT_PREFIX_STYLE);
  builder.append(""String_Node_Str"",motionDistribution);
  builder.append(""String_Node_Str"",path);
  return builder.toString();
}",0.9838056680161944
189456,"public PathStateDistribution(PathStateDistribution pathStateDistribution){
  this.pathState=pathStateDistribution.pathState;
  this.path=pathStateDistribution.path;
  this.distribution=pathStateDistribution.distribution;
  this.groundBelief=pathStateDistribution.groundBelief;
  this.localStateBelief=pathStateDistribution.localStateBelief;
}","public PathStateDistribution(PathStateDistribution pathStateDistribution){
  this.pathState=pathStateDistribution.pathState;
  this.path=pathStateDistribution.path;
  this.motionDistribution=pathStateDistribution.motionDistribution;
  this.groundDistribution=pathStateDistribution.groundDistribution;
  this.edgeDistribution=pathStateDistribution.edgeDistribution;
}",0.5084745762711864
189457,"/** 
 * This method gets the predictive/observation/measurement belief, i.e. the measurement model applied to the given state belief.
 * @param belief
 * @param edge
 * @return
 */
public MultivariateGaussian getMeasurementBelief(final PathStateDistribution stateBelief){
  final MultivariateGaussian projBelief=stateBelief.getGroundBelief().clone();
  final Matrix Q=MotionStateEstimatorPredictor.Og.times(projBelief.getCovariance()).times(MotionStateEstimatorPredictor.Og.transpose());
  Q.plusEquals(this.groundFilter.getMeasurementCovariance());
  final MultivariateGaussian res=this.groundFilter.createInitialLearnedObject();
  res.setMean(MotionStateEstimatorPredictor.Og.times(projBelief.getMean()));
  res.setCovariance(Q);
  return res;
}","/** 
 * This method gets the predictive/observation/measurement belief, i.e. the measurement model applied to the given state belief.
 * @param belief
 * @param edge
 * @return
 */
public MultivariateGaussian getMeasurementBelief(final PathStateDistribution stateBelief){
  final MultivariateGaussian projBelief=stateBelief.getGroundDistribution().clone();
  final Matrix Q=MotionStateEstimatorPredictor.Og.times(projBelief.getCovariance()).times(MotionStateEstimatorPredictor.Og.transpose());
  Q.plusEquals(this.groundFilter.getMeasurementCovariance());
  final MultivariateGaussian res=this.groundFilter.createInitialLearnedObject();
  res.setMean(MotionStateEstimatorPredictor.Og.times(projBelief.getMean()));
  res.setCovariance(Q);
  return res;
}",0.988
189458,"@Override public void update(PathStateDistribution prior,Vector data){
  if (prior.getPathState().isOnRoad()) {
    if (!this.path.isOnPath(prior.getMean().getElement(0))) {
      prior.getMean().setElement(0,prior.getPathState().getPath().clampToPath(prior.getMean().getElement(0)));
    }
  }
}","@Override public void update(PathStateDistribution prior,Vector data){
  Preconditions.checkArgument(prior.getPathState().getPath().equals(this.path));
  if (prior.getPathState().isOnRoad()) {
    if (!this.path.isOnPath(prior.getMean().getElement(0))) {
      final Vector mean=prior.getMean().clone();
      mean.setElement(0,prior.getPathState().getPath().clampToPath(prior.getMean().getElement(0)));
      prior.setMean(mean);
    }
  }
}",0.8021680216802168
189459,"@Override public SimpleBayesianParameter<ParameterType,ConditionalType,PriorType> clone(){
  SimpleBayesianParameter<ParameterType,ConditionalType,PriorType> clone=(SimpleBayesianParameter<ParameterType,ConditionalType,PriorType>)super.clone();
  clone.conditional=ObjectUtil.cloneSmart(this.conditional);
  clone.prior=ObjectUtil.cloneSmart(this.prior);
  clone.value=ObjectUtil.cloneSmart(this.value);
  clone.name=this.name;
  return clone;
}","/** 
 * Shallow clone.  Deep copies in here can be expensive.
 */
@Override public SimpleBayesianParameter<ParameterType,ConditionalType,PriorType> clone(){
  SimpleBayesianParameter<ParameterType,ConditionalType,PriorType> clone=(SimpleBayesianParameter<ParameterType,ConditionalType,PriorType>)super.clone();
  clone.conditional=this.conditional;
  clone.prior=this.prior;
  clone.value=this.value;
  clone.name=this.name;
  return clone;
}",0.7891770011273957
189460,"@Override public double getPriorWeightSum(){
  if (priorWeights.length == 1)   return priorWeights[0];
  double logSum=priorWeights[0];
  for (int i=1; i < priorWeights.length; i++) {
    logSum=LogMath.add(logSum,priorWeights[i]);
  }
  return logSum;
}","@Override public double getPriorWeightSum(){
  if (priorWeights.length <= 0)   return Double.NEGATIVE_INFINITY;
  if (priorWeights.length == 1)   return priorWeights[0];
  double logSum=priorWeights[0];
  for (int i=1; i < priorWeights.length; i++) {
    logSum=LogMath.add(logSum,priorWeights[i]);
  }
  return logSum;
}",0.8834782608695653
189461,"/** 
 * This method returns the predictive distribution over the conditional path. Note that the prior must be converted to this path's distance and direction, and the current vehicle state must have a value for its path state parameter.
 * @param prior
 * @return
 */
@Override public PathStateMixtureDensityModel createPredictiveDistribution(MultivariateGaussian prior){
  final List<PathStateDistribution> distributions=Lists.newArrayList();
  final List<Double> weights=Lists.newArrayList();
  if (this.path.isNullPath()) {
    MultivariateGaussian groundDistribution;
    if (prior.getInputDimensionality() == 4) {
      groundDistribution=prior.clone();
    }
 else {
      final PathState prevPathState=this.currentState.getPathStateParam().getValue();
      groundDistribution=PathUtils.getGroundBeliefFromRoad(prior.clone(),prevPathState.getEdge(),true,true);
    }
    distributions.add(new PathStateDistribution(this.path,groundDistribution));
    weights.add(0d);
  }
 else {
    MultivariateGaussian roadDistribution;
    if (prior.getInputDimensionality() == 4) {
      roadDistribution=PathUtils.getRoadBeliefFromGround(prior,Iterables.getOnlyElement(this.path.getPathEdges()),true);
      if (roadDistribution.getMean().getElement(1) > 0d) {
        distributions.add(new PathStateDistribution(this.path,roadDistribution));
        weights.add(0d);
      }
    }
 else {
      roadDistribution=prior;
      for (      final PathEdge edge : this.path.getPathEdges()) {
        PathStateDistribution prediction=getPathEdgePredictive(roadDistribution,edge);
        if (prediction == null)         break;
        distributions.add(prediction);
        weights.add(this.path.getPathEdges().size() == 1 ? 0d : this.marginalPredictiveLogLikInternal(this.path,roadDistribution,edge));
      }
    }
  }
  final PathStateMixtureDensityModel result=new PathStateMixtureDensityModel(distributions,Doubles.toArray(weights));
  Preconditions.checkState(Math.abs(Math.exp(result.getPriorWeightSum()) - 1d) < 1e-5);
  return result;
}","/** 
 * This method returns the predictive distribution over the conditional path. Note that the prior must be converted to this path's distance and direction, and the current vehicle state must have a value for its path state parameter.
 * @param prior
 * @return
 */
@Override public PathStateMixtureDensityModel createPredictiveDistribution(MultivariateGaussian prior){
  final List<PathStateDistribution> distributions=Lists.newArrayList();
  final List<Double> weights=Lists.newArrayList();
  if (this.path.isNullPath()) {
    MultivariateGaussian groundDistribution;
    if (prior.getInputDimensionality() == 4) {
      groundDistribution=prior.clone();
    }
 else {
      final PathState prevPathState=this.currentState.getPathStateParam().getValue();
      groundDistribution=PathUtils.getGroundBeliefFromRoad(prior.clone(),prevPathState.getEdge(),true,true);
    }
    distributions.add(new PathStateDistribution(this.path,groundDistribution));
    weights.add(0d);
  }
 else {
    MultivariateGaussian roadDistribution;
    if (prior.getInputDimensionality() == 4) {
      roadDistribution=PathUtils.getRoadBeliefFromGround(prior,Iterables.getOnlyElement(this.path.getPathEdges()),true);
      if (roadDistribution.getMean().getElement(1) > 0d) {
        distributions.add(new PathStateDistribution(this.path,roadDistribution));
        weights.add(0d);
      }
    }
 else {
      roadDistribution=prior;
      for (      final PathEdge edge : this.path.getPathEdges()) {
        PathStateDistribution prediction=getPathEdgePredictive(roadDistribution,edge);
        if (prediction == null)         break;
        distributions.add(prediction);
        weights.add(this.path.getPathEdges().size() == 1 ? 0d : this.marginalPredictiveLogLikInternal(this.path,roadDistribution,edge));
      }
    }
  }
  final PathStateMixtureDensityModel result=new PathStateMixtureDensityModel(distributions,Doubles.toArray(weights));
  Preconditions.checkState(result.getDistributionCount() == 0 || Math.abs(Math.exp(result.getPriorWeightSum()) - 1d) < 1e-5);
  return result;
}",0.9907542579075426
189462,"public VehicleStatePLFilter(O obs,InferenceGraph inferredGraph,VehicleStateInitialParameters parameters,Boolean isDebug,Random rng){
  this.inferredGraph=inferredGraph;
  this.isDebug=isDebug;
  this.setUpdater(new VehicleStatePLUpdater<O>(obs,inferredGraph,parameters,rng));
}","public VehicleStatePLFilter(O obs,InferenceGraph inferredGraph,VehicleStateInitialParameters parameters,Boolean isDebug,Random rng){
  this.inferredGraph=inferredGraph;
  this.isDebug=isDebug;
  this.setUpdater(new VehicleStatePLUpdater<O>(obs,inferredGraph,parameters,rng));
  this.setNumParticles(parameters.getNumParticles());
  this.setRandom(rng);
}",0.8779714738510301
189463,"@Override public void update(DataDistribution<VehicleStateDistribution<O>> target,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> resampleDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  for (  final VehicleStateDistribution<O> state : target.getDomain()) {
    final int count;
    if (target instanceof CountedDataDistribution<?>) {
      count=((CountedDataDistribution)target).getCount(state);
    }
 else {
      count=1;
    }
    final double logCount=Math.log(count);
    final VehicleStateDistribution<O> predictedState=new VehicleStateDistribution<O>(state);
    predictedState.setObservation(obs);
    this.updater.update(predictedState);
    final PathStateMixtureDensityModel<PathStateDistribution> predictedPathStateMixture=predictedState.getPathStateParam().getConditionalDistribution();
    for (int i=0; i < predictedPathStateMixture.getDistributionCount(); i++) {
      final PathStateDistribution predictedPathStateDist=predictedPathStateMixture.getDistributions().get(i);
      final double pathStateDistLogLikelihood=predictedPathStateMixture.getPriorWeights()[i];
      final double edgeTransitionLogLikelihood=predictedState.getEdgeTransitionParam().getConditionalDistribution().getProbabilityFunction().logEvaluate(predictedPathStateDist.getPathState().getEdge().getInferenceGraphEdge());
      final VehicleStateDistribution<O> predictedChildState=new VehicleStateDistribution<O>(predictedState);
      predictedChildState.setPathStateParam(SimpleBayesianParameter.create(predictedPathStateDist.getPathState(),predictedPathStateMixture,predictedPathStateDist));
      final MultivariateGaussian measurementPredictionDist=predictedState.getMotionStateEstimatorPredictor().getMeasurementBelief(predictedPathStateDist);
      predictedChildState.setMotionStateParam(SimpleBayesianParameter.create(measurementPredictionDist.getMean(),measurementPredictionDist,predictedPathStateDist.getMotionStateDistribution()));
      final double predictiveLogLikelihood=this.getUpdater().computeLogLikelihood(predictedState,obs);
      resampleDist.increment(predictedChildState,predictiveLogLikelihood + pathStateDistLogLikelihood + edgeTransitionLogLikelihood+ logCount);
    }
  }
  final Random rng=this.getRandom();
  Preconditions.checkState(!resampleDist.isEmpty());
  final ArrayList<VehicleStateDistribution<O>> smoothedStates=resampleDist.sample(rng,this.getNumParticles());
  target.clear();
  for (  final VehicleStateDistribution<O> state : smoothedStates) {
    final VehicleStateDistribution<O> updateadState=state.clone();
    final PathStateDistribution pathStateDist=updateadState.getPathStateParam().getParameterPrior();
    final MultivariateGaussian updatedMotionState=pathStateDist.getGroundBelief().clone();
    updateadState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    final PathStateEstimatorPredictor pathStateEstimator=new PathStateEstimatorPredictor(state,pathStateDist.getPathState().getPath());
    pathStateDist.setGroundDistribution(updatedMotionState);
    pathStateEstimator.update(pathStateDist,obs.getProjectedPoint());
    updateadState.getPathStateParam().setValue(pathStateDist.getPathState());
    final InferenceGraphEdge graphEdge=pathStateDist.getPathState().getEdge().getInferenceGraphEdge();
    final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=new OnOffEdgeTransitionEstimatorPredictor(updateadState,graphEdge);
    edgeTransitionEstimatorPredictor.update(updateadState.getEdgeTransitionParam().getParameterPrior(),graphEdge);
    target.increment(updateadState,0d);
  }
}","@Override public void update(DataDistribution<VehicleStateDistribution<O>> target,O obs){
  final CountedDataDistribution<VehicleStateDistribution<O>> resampleDist=new CountedDataDistribution<VehicleStateDistribution<O>>(true);
  for (  final VehicleStateDistribution<O> state : target.getDomain()) {
    final int count;
    if (target instanceof CountedDataDistribution<?>) {
      count=((CountedDataDistribution)target).getCount(state);
    }
 else {
      count=1;
    }
    final double logCount=Math.log(count);
    VehicleStateDistribution<O> predictedState=new VehicleStateDistribution<O>(state);
    predictedState.setObservation(obs);
    predictedState=this.updater.update(predictedState);
    final PathStateMixtureDensityModel predictedPathStateMixture=predictedState.getPathStateParam().getConditionalDistribution();
    for (int i=0; i < predictedPathStateMixture.getDistributionCount(); i++) {
      final PathStateDistribution predictedPathStateDist=predictedPathStateMixture.getDistributions().get(i);
      final double pathStateDistLogLikelihood=predictedPathStateMixture.getPriorWeights()[i];
      final double edgeTransitionLogLikelihood=predictedState.getEdgeTransitionParam().getConditionalDistribution().getProbabilityFunction().logEvaluate(predictedPathStateDist.getPathState().getEdge().getInferenceGraphEdge());
      final VehicleStateDistribution<O> predictedChildState=new VehicleStateDistribution<O>(predictedState);
      predictedChildState.setPathStateParam(SimpleBayesianParameter.create(predictedPathStateDist.getPathState(),predictedPathStateMixture,predictedPathStateDist));
      final MultivariateGaussian measurementPredictionDist=predictedState.getMotionStateEstimatorPredictor().getMeasurementBelief(predictedPathStateDist);
      predictedChildState.setMotionStateParam(SimpleBayesianParameter.create(measurementPredictionDist.getMean(),measurementPredictionDist,predictedPathStateDist.getMotionStateDistribution()));
      final double predictiveLogLikelihood=this.getUpdater().computeLogLikelihood(predictedChildState,obs);
      predictedChildState.setParentState(state);
      resampleDist.increment(predictedChildState,predictiveLogLikelihood + pathStateDistLogLikelihood + edgeTransitionLogLikelihood+ logCount);
    }
  }
  final Random rng=this.getRandom();
  Preconditions.checkState(!resampleDist.isEmpty());
  if (this.isDebug)   this.lastResampleDistribution=resampleDist;
  final ArrayList<VehicleStateDistribution<O>> smoothedStates=resampleDist.sample(rng,this.getNumParticles());
  target.clear();
  for (  final VehicleStateDistribution<O> state : smoothedStates) {
    final VehicleStateDistribution<O> updatedState=state.clone();
    final PathStateDistribution pathStateDist=updatedState.getPathStateParam().getParameterPrior();
    final MultivariateGaussian updatedMotionState=pathStateDist.getGroundBelief().clone();
    updatedState.getMotionStateEstimatorPredictor().update(updatedMotionState,obs.getProjectedPoint());
    final PathStateEstimatorPredictor pathStateEstimator=new PathStateEstimatorPredictor(state,pathStateDist.getPathState().getPath());
    pathStateDist.setGroundDistribution(updatedMotionState);
    pathStateEstimator.update(pathStateDist,obs.getProjectedPoint());
    updatedState.getPathStateParam().setValue(pathStateDist.getPathState());
    updatedState.getPathStateParam().setParameterPrior(pathStateDist);
    updatedState.getMotionStateParam().setParameterPrior(pathStateDist.getMotionStateDistribution());
    MultivariateGaussian obsMotionDist=updatedState.getMotionStateEstimatorPredictor().getObservationDistribution(pathStateDist.getMotionStateDistribution(),pathStateDist.getPathState().getEdge());
    updatedState.getMotionStateParam().setConditionalDistribution(obsMotionDist);
    updatedState.getMotionStateParam().setValue(obsMotionDist.getMean());
    final InferenceGraphEdge graphEdge=updatedState.getParentState().getPathStateParam().getValue().getEdge().getInferenceGraphEdge();
    final OnOffEdgeTransitionEstimatorPredictor edgeTransitionEstimatorPredictor=new OnOffEdgeTransitionEstimatorPredictor(updatedState,graphEdge);
    OnOffEdgeTransPriorDistribution prior=updatedState.getEdgeTransitionParam().getParameterPrior();
    edgeTransitionEstimatorPredictor.update(prior,graphEdge);
    updatedState.getEdgeTransitionParam().getConditionalDistribution().setFreeMotionTransProbs(prior.getFreeMotionTransProbPrior().getMean());
    updatedState.getEdgeTransitionParam().getConditionalDistribution().setEdgeMotionTransProbs(prior.getEdgeMotionTransProbPrior().getMean());
    updatedState.getEdgeTransitionParam().setValue(prior.getMean());
    target.increment(updatedState,0d);
  }
  Preconditions.checkState(target.getDomainSize() > 0);
}",0.8251665080875357
189464,"public MultivariateGaussian getLocalStateBelief(){
  if (this.pathState.isOnRoad()) {
    return this.distribution;
  }
 else {
    final Vector mean=Preconditions.checkNotNull(this.pathState.getEdge().getCheckedStateOnEdge(this.distribution.getMean(),MotionStateEstimatorPredictor.getEdgeLengthErrorTolerance(),true));
    final MultivariateGaussian localStateBelief=this.distribution.clone();
    localStateBelief.setMean(mean);
    return localStateBelief;
  }
}","public MultivariateGaussian getLocalStateBelief(){
  if (!this.pathState.isOnRoad()) {
    return this.distribution;
  }
 else {
    if (this.localStateBelief == null) {
      final Vector mean=Preconditions.checkNotNull(this.pathState.getEdge().getCheckedStateOnEdge(this.distribution.getMean(),MotionStateEstimatorPredictor.getEdgeLengthErrorTolerance(),true));
      final MultivariateGaussian localStateBelief=this.distribution.clone();
      localStateBelief.setMean(mean);
      this.localStateBelief=localStateBelief;
    }
    return localStateBelief;
  }
}",0.8893203883495145
189465,"public MultivariateGaussian getGroundBelief(){
  if (!this.pathState.isOnRoad()) {
    return this.distribution;
  }
  if (this.groundBelief == null) {
    this.groundBelief=PathUtils.getGroundBeliefFromRoad(this.distribution,this.pathState.getEdge(),true);
  }
  return this.groundBelief;
}","public MultivariateGaussian getGroundBelief(){
  if (!this.pathState.isOnRoad()) {
    return this.distribution;
  }
  if (this.groundBelief == null) {
    this.groundBelief=PathUtils.getGroundBeliefFromRoad(this.distribution,this.pathState.getEdge(),false,true);
  }
  return this.groundBelief;
}",0.9897959183673468
189466,"@Override public PathStateDistribution clone(){
  final PathStateDistribution clone=(PathStateDistribution)super.clone();
  clone.path=ObjectUtil.cloneSmart(this.path);
  clone.pathState=ObjectUtil.cloneSmart(this.pathState);
  clone.distribution=this.distribution.clone();
  clone.groundBelief=ObjectUtil.cloneSmart(this.groundBelief);
  return clone;
}","@Override public PathStateDistribution clone(){
  final PathStateDistribution clone=(PathStateDistribution)super.clone();
  clone.path=ObjectUtil.cloneSmart(this.path);
  clone.pathState=ObjectUtil.cloneSmart(this.pathState);
  clone.distribution=this.distribution.clone();
  clone.groundBelief=ObjectUtil.cloneSmart(this.groundBelief);
  clone.localStateBelief=ObjectUtil.cloneSmart(this.localStateBelief);
  return clone;
}",0.9088575096277278
189467,"@Override public String toString(){
  ToStringBuilder builder=new ToStringBuilder(this);
  builder.append(""String_Node_Str"",distribution);
  builder.append(""String_Node_Str"",path);
  return builder.toString();
}","@Override public String toString(){
  ToStringBuilder builder=new ToStringBuilder(this,ToStringStyle.SHORT_PREFIX_STYLE);
  builder.append(""String_Node_Str"",distribution);
  builder.append(""String_Node_Str"",path);
  return builder.toString();
}",0.9274725274725276
189468,"public PathStateDistribution(PathStateDistribution pathStateDistribution){
  this.pathState=pathStateDistribution.pathState;
  this.path=pathStateDistribution.path;
  this.distribution=pathStateDistribution.distribution;
  this.groundBelief=pathStateDistribution.groundBelief;
}","public PathStateDistribution(PathStateDistribution pathStateDistribution){
  this.pathState=pathStateDistribution.pathState;
  this.path=pathStateDistribution.path;
  this.distribution=pathStateDistribution.distribution;
  this.groundBelief=pathStateDistribution.groundBelief;
  this.localStateBelief=pathStateDistribution.localStateBelief;
}",0.896774193548387
189469,"public PDF(PathStateMixtureDensityModel<? extends DistributionType> other){
  super(other);
}","public PDF(PathStateMixtureDensityModel other){
  super(other);
}",0.8227848101265823
189470,"@Override public PathStateMixtureDensityModel.PDF<DistributionType> getProbabilityFunction(){
  return new PathStateMixtureDensityModel.PDF<DistributionType>(this);
}","@Override public PathStateMixtureDensityModel.PDF getProbabilityFunction(){
  return new PathStateMixtureDensityModel.PDF(this);
}",0.8783783783783784
189471,"public PathStateMixtureDensityModel(PathStateMixtureDensityModel<? extends DistributionType> other){
  this(ObjectUtil.cloneSmartElementsAsArrayList(other.getDistributions()),ObjectUtil.deepCopy(other.getPriorWeights()));
}","public PathStateMixtureDensityModel(PathStateMixtureDensityModel other){
  this(ObjectUtil.cloneSmartElementsAsArrayList(other.getDistributions()),ObjectUtil.deepCopy(other.getPriorWeights()));
}",0.9330143540669856
189472,"@Override public PathStateMixtureDensityModel<DistributionType> clone(){
  final PathStateMixtureDensityModel<DistributionType> clone=(PathStateMixtureDensityModel<DistributionType>)super.clone();
  return clone;
}","@Override public PathStateMixtureDensityModel clone(){
  final PathStateMixtureDensityModel clone=(PathStateMixtureDensityModel)super.clone();
  return clone;
}",0.8556149732620321
189473,"/** 
 * Returns the first highest-probability path edge and its mean location, as a path state, naturally.
 */
@Override public PathState getMean(){
  final Map<PathEdge,RingAccumulator<Vector>> edgeToMean=Maps.newHashMap();
  final Map<PathEdge,DataDistribution<Path>> edgeToPaths=Maps.newHashMap();
  final int K=this.getDistributionCount();
  final DefaultDataDistribution<PathEdge> edgeDist=new DefaultDataDistribution<PathEdge>();
  for (int k=0; k < K; k++) {
    final double priorWeight=this.getPriorWeights()[k];
    final DistributionType dist=this.getDistributions().get(k);
    PathEdge edge=dist.getMean().getEdge();
    edgeDist.increment(edge,priorWeight);
    Path path=dist.getMean().getPath();
    DataDistribution<Path> pathDist=edgeToPaths.get(path);
    if (pathDist == null) {
      pathDist=new DefaultDataDistribution<Path>();
      pathDist.increment(path,priorWeight);
    }
    RingAccumulator<Vector> mean=edgeToMean.get(edge);
    if (mean == null) {
      mean=new RingAccumulator<Vector>();
      edgeToMean.put(edge,mean);
    }
    mean.accumulate(dist.getMean().scale(priorWeight));
  }
  final PathEdge bestEdge=edgeDist.getMaxValueKey();
  final Path bestPath=edgeToPaths.get(bestEdge).getMaxValueKey();
  final RingAccumulator<Vector> mean=edgeToMean.get(bestEdge);
  return new PathState(bestPath,mean.getMean());
}","/** 
 * Returns the first highest-probability path edge and its mean location, as a path state, naturally.
 */
@Override public PathState getMean(){
  final Map<PathEdge,RingAccumulator<Vector>> edgeToMean=Maps.newHashMap();
  final Map<PathEdge,DataDistribution<Path>> edgeToPaths=Maps.newHashMap();
  final int K=this.getDistributionCount();
  final DefaultDataDistribution<PathEdge> edgeDist=new DefaultDataDistribution<PathEdge>();
  for (int k=0; k < K; k++) {
    final double priorWeight=this.getPriorWeights()[k];
    final PathStateDistribution dist=this.getDistributions().get(k);
    PathEdge edge=dist.getMean().getEdge();
    edgeDist.increment(edge,priorWeight);
    Path path=dist.getMean().getPath();
    DataDistribution<Path> pathDist=edgeToPaths.get(path);
    if (pathDist == null) {
      pathDist=new DefaultDataDistribution<Path>();
      pathDist.increment(path,priorWeight);
    }
    RingAccumulator<Vector> mean=edgeToMean.get(edge);
    if (mean == null) {
      mean=new RingAccumulator<Vector>();
      edgeToMean.put(edge,mean);
    }
    mean.accumulate(dist.getMean().scale(priorWeight));
  }
  final PathEdge bestEdge=edgeDist.getMaxValueKey();
  final Path bestPath=edgeToPaths.get(bestEdge).getMaxValueKey();
  final RingAccumulator<Vector> mean=edgeToMean.get(bestEdge);
  return new PathState(bestPath,mean.getMean());
}",0.9863518996680192
189474,"@Override public double cost(AStarNode n1,AStarNode n2){
  final BasicDirectedNode dn1=(BasicDirectedNode)n1.getNode();
  final BasicDirectedNode dn2=(BasicDirectedNode)n2.getNode();
  if (dn1.getOutEdge(dn2) == null)   return Double.POSITIVE_INFINITY;
  return 0d;
}","@Override public double cost(AStarNode n1,AStarNode n2){
  final BasicDirectedNode dn1=(BasicDirectedNode)n1.getNode();
  final BasicDirectedNode dn2=(BasicDirectedNode)n2.getNode();
  Edge edgeBetween=dn1.getOutEdge(dn2);
  if (edgeBetween == null)   return Double.POSITIVE_INFINITY;
  return 0d;
}",0.8763250883392226
189475,"@Override public Set<InferredPath> getPaths(final VehicleState fromState,final Coordinate toCoord){
  InferredEdge currentEdge=fromState.getBelief().getEdge().getInferredEdge();
  Set<InferredEdge> startEdges=Sets.newHashSet();
  if (!currentEdge.isNullEdge()) {
    startEdges.add(currentEdge);
  }
 else {
    final MultivariateGaussian obsBelief=fromState.getMovementFilter().getObservationBelief(fromState.getBelief());
    final double beliefDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)obsBelief.getCovariance()),MAX_STATE_SNAP_RADIUS);
    startEdges.addAll(getNearbyEdges(fromState.getMeanLocation(),beliefDistance));
  }
  final Set<InferredEdge> endEdges=Sets.newHashSet();
  final double obsStdDevDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)fromState.getMovementFilter().getObsCovar()),MAX_OBS_SNAP_RADIUS);
  double maxEndEdgeLength=Double.NEGATIVE_INFINITY;
  for (  final InferredEdge edge : getNearbyEdges(toCoord,obsStdDevDistance)) {
    if (edge.getLength() > maxEndEdgeLength)     maxEndEdgeLength=edge.getLength();
    endEdges.add(edge);
  }
  Set<InferredPath> paths=Sets.newHashSet();
  paths.add(getNullPath());
  if (endEdges.isEmpty())   return paths;
  for (  InferredEdge startEdge : startEdges) {
    paths.add(getInferredPath(getPathEdge(startEdge,0,false)));
    for (    InferredEdge endEdge : endEdges) {
      final Node source=((DirectedEdge)startEdge.getBackingEdge()).getInNode();
      final Node target=((DirectedEdge)endEdge.getBackingEdge()).getOutNode();
      AStarFunctions afuncs=new VehicleStateAStarFunction(target,toCoord,obsStdDevDistance);
      AStarShortestPathFinder aStarIter=new AStarShortestPathFinder(this.graphGenerator.getGraph(),source,target,afuncs);
      aStarIter.calculate();
      try {
        Path path=aStarIter.getPath();
        final boolean isBackward=false;
        List<PathEdge> pathEdges=Lists.newArrayList();
        double distToStart=0d;
        Iterator iter=path.riterator();
        BasicDirectedNode prevNode=null;
        while (iter.hasNext()) {
          BasicDirectedNode node=(BasicDirectedNode)iter.next();
          if (prevNode != null && node.equals(prevNode)) {
            Edge edge=Preconditions.checkNotNull(node.getOutEdge(node));
            InferredEdge infEdge=getInferredEdge(edge);
            pathEdges.add(getPathEdge(infEdge,distToStart,isBackward));
            distToStart+=isBackward ? -infEdge.getLength() : infEdge.getLength();
          }
          prevNode=node;
        }
        if (!pathEdges.isEmpty())         paths.add(getInferredPath(pathEdges,isBackward));
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + e);
      }
    }
  }
  return paths;
}","@Override public Set<InferredPath> getPaths(final VehicleState fromState,final Coordinate toCoord){
  InferredEdge currentEdge=fromState.getBelief().getEdge().getInferredEdge();
  Set<InferredEdge> startEdges=Sets.newHashSet();
  if (!currentEdge.isNullEdge()) {
    startEdges.add(currentEdge);
  }
 else {
    final MultivariateGaussian obsBelief=fromState.getMovementFilter().getObservationBelief(fromState.getBelief());
    final double beliefDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)obsBelief.getCovariance()),MAX_STATE_SNAP_RADIUS);
    startEdges.addAll(getNearbyEdges(fromState.getMeanLocation(),beliefDistance));
  }
  final double obsStdDevDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)fromState.getMovementFilter().getObsCovar()),MAX_OBS_SNAP_RADIUS);
  final Set<Node> endNodes=Sets.newHashSet();
  for (  final InferredEdge edge : getNearbyEdges(toCoord,obsStdDevDistance)) {
    final DirectedEdge bEdge=((DirectedEdge)edge.getBackingEdge());
    endNodes.add(bEdge.getNodeA());
    endNodes.add(bEdge.getNodeB());
  }
  Set<InferredPath> paths=Sets.newHashSet();
  paths.add(getNullPath());
  if (endNodes.isEmpty())   return paths;
  for (  InferredEdge startEdge : startEdges) {
    paths.add(getInferredPath(getPathEdge(startEdge,0,false)));
    final DirectedEdge bStartEdge=((DirectedEdge)startEdge.getBackingEdge());
    final Node source=bStartEdge.getOutNode();
    Set<Node> reachedEndNodes=Sets.newHashSet(source);
    for (    Node target : endNodes) {
      if (reachedEndNodes.contains(target))       continue;
      AStarFunctions afuncs=new VehicleStateAStarFunction(target,toCoord,obsStdDevDistance);
      AStarShortestPathFinder aStarIter=new AStarShortestPathFinder(this.graphGenerator.getGraph(),source,target,afuncs);
      aStarIter.calculate();
      try {
        Path path=aStarIter.getPath();
        List<PathEdge> pathEdges=Lists.newArrayList();
        double distToStart=0d;
        Iterator iter=path.riterator();
        BasicDirectedNode prevNode=(BasicDirectedNode)bStartEdge.getInNode();
        while (iter.hasNext()) {
          BasicDirectedNode node=(BasicDirectedNode)iter.next();
          Edge edge=Preconditions.checkNotNull(prevNode.getOutEdge(node));
          InferredEdge infEdge=getInferredEdge(edge);
          pathEdges.add(getPathEdge(infEdge,distToStart,false));
          distToStart+=infEdge.getLength();
          reachedEndNodes.add(node);
          prevNode=node;
        }
        if (!pathEdges.isEmpty())         paths.add(getInferredPath(pathEdges,false));
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + e);
      }
    }
  }
  return paths;
}",0.7675059731666973
189476,"private PathState sampleSmoothedPrevState(PathStateBelief prior,PathStateBelief priorPred,PathStateBelief posterior,Vector obs,Random rng){
  final PathStateBelief priorOnPath=priorPred.getPath().getStateBeliefOnPath(prior);
  Preconditions.checkState(Iterables.getFirst(priorOnPath.getPath().getPathEdges(),null).equals(Iterables.getFirst(priorPred.getPath().getPathEdges(),null)) && Iterables.getFirst(priorPred.getPath().getPathEdges(),null).equals(Iterables.getFirst(posterior.getPath().getPathEdges(),null)));
  final Matrix F;
  final Matrix G;
  final Matrix C;
  final Vector m;
  final Matrix Omega;
  final Vector y;
  final Matrix Sigma;
  if (posterior.isOnRoad()) {
    final MultivariateGaussian obsProjBelief=PathUtils.getRoadObservation(obs,this.obsCovar,priorPred.getPath(),Iterables.getLast(priorPred.getPath().getPathEdges()));
    y=obsProjBelief.getMean();
    Sigma=obsProjBelief.getCovariance();
    F=AbstractRoadTrackingFilter.getOr();
    G=this.getRoadModel().getA();
    C=priorOnPath.getGlobalStateBelief().getCovariance();
    m=priorOnPath.getGlobalState();
    Omega=this.getOnRoadStateTransCovar();
  }
 else {
    y=obs;
    F=AbstractRoadTrackingFilter.getOg();
    G=this.getGroundModel().getA();
    C=priorOnPath.getGroundBelief().getCovariance();
    m=priorOnPath.getGroundState();
    Omega=this.getOffRoadStateTransCovar();
    Sigma=this.getObsCovar();
  }
  final Matrix W=F.times(Omega).times(F.transpose()).plus(Sigma);
  final Matrix FG=F.times(G);
  final Matrix A=FG.times(C).times(FG.transpose()).plus(W);
  final Matrix Wtil=A.transpose().solve(FG.times(C.transpose())).transpose();
  final Vector mSmooth=m.plus(Wtil.times(y.minus(FG.times(m))));
  final Matrix CSmooth=C.minus(Wtil.times(A).times(Wtil.transpose()));
  final Matrix Csqrt=StatisticsUtil.rootOfSemiDefinite(CSmooth);
  final Vector result=MultivariateGaussian.sample(mSmooth,Csqrt,rng);
  return posterior.getPath().getStateOnPath(result);
}","private PathState sampleSmoothedPrevState(PathStateBelief prior,PathStateBelief priorPred,PathStateBelief posterior,Vector obs,Random rng){
  final PathStateBelief priorOnPath=priorPred.getPath().getStateBeliefOnPath(prior);
  Preconditions.checkState(Iterables.getFirst(priorOnPath.getPath().getPathEdges(),null).equals(Iterables.getFirst(priorPred.getPath().getPathEdges(),null)) && Iterables.getFirst(priorPred.getPath().getPathEdges(),null).equals(Iterables.getFirst(posterior.getPath().getPathEdges(),null)));
  final Matrix F;
  final Matrix G;
  final Matrix C;
  final Vector m;
  final Matrix Omega;
  final Vector y;
  final Matrix Sigma;
  if (posterior.isOnRoad()) {
    final MultivariateGaussian obsProjBelief=PathUtils.getRoadObservation(obs,this.obsCovar,priorPred.getPath(),posterior.getEdge());
    y=obsProjBelief.getMean();
    Sigma=obsProjBelief.getCovariance();
    F=AbstractRoadTrackingFilter.getOr();
    G=this.getRoadModel().getA();
    C=priorOnPath.getGlobalStateBelief().getCovariance();
    m=priorOnPath.getGlobalState();
    Omega=this.getOnRoadStateTransCovar();
  }
 else {
    y=obs;
    F=AbstractRoadTrackingFilter.getOg();
    G=this.getGroundModel().getA();
    C=priorOnPath.getGroundBelief().getCovariance();
    m=priorOnPath.getGroundState();
    Omega=this.getOffRoadStateTransCovar();
    Sigma=this.getObsCovar();
  }
  final Matrix W=F.times(Omega).times(F.transpose()).plus(Sigma);
  final Matrix FG=F.times(G);
  final Matrix A=FG.times(C).times(FG.transpose()).plus(W);
  final Matrix Wtil=A.transpose().solve(FG.times(C.transpose())).transpose();
  final Vector mSmooth=m.plus(Wtil.times(y.minus(FG.times(m))));
  final Matrix CSmooth=C.minus(Wtil.times(A).times(Wtil.transpose()));
  final Matrix Csqrt=StatisticsUtil.rootOfSemiDefinite(CSmooth);
  final Vector result=MultivariateGaussian.sample(mSmooth,Csqrt,rng);
  return posterior.getPath().getStateOnPath(result);
}",0.9840370751802264
189477,"private void updateStats(DataDistribution<VehicleState> vehicleStateDist,VehicleState trueVehicleState,SufficientStatistic obsErrorSS,SufficientStatistic obsCovErrorSS,SufficientStatistic onRoadCovErrorSS,SufficientStatistic offRoadCovErrorSS,SufficientStatistic transitionsSS,boolean generalizeMoveDiff){
  SufficientStatistic obsErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic obsCovErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic onRoadCovErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic offRoadCovErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic transitionsErrorStat=new MultivariateGaussian.SufficientStatistic();
  for (  VehicleState state : vehicleStateDist.getDomain()) {
    AssertJUnit.assertEquals(trueVehicleState.getObservation(),state.getObservation());
    final Vector obsError=trueVehicleState.getObservation().getProjectedPoint().minus(state.getMeanLocation());
    obsErrorStat.update(obsError);
    final Matrix obsCovMean=((ErrorEstimatingRoadTrackingFilter)state.getMovementFilter()).getObsVariancePrior().getMean();
    final Matrix obsCovError=obsCovMean.minus(trueVehicleState.getMovementFilter().getObsCovar());
    obsCovErrorStat.update(obsCovError.convertToVector());
    final Matrix onRoadCovMean=((ErrorEstimatingRoadTrackingFilter)state.getMovementFilter()).getOnRoadStateVariancePrior().getMean();
    final Matrix onRoadCovFactor=state.getMovementFilter().getCovarianceFactor(true);
    final Matrix onRoadCovError=onRoadCovFactor.times(onRoadCovMean).times(onRoadCovFactor.transpose()).minus(trueVehicleState.getMovementFilter().getOnRoadStateTransCovar());
    onRoadCovErrorStat.update(onRoadCovError.convertToVector());
    final Matrix offRoadCovMean=((ErrorEstimatingRoadTrackingFilter)state.getMovementFilter()).getOffRoadStateVariancePrior().getMean();
    final Matrix offRoadCovFactor=state.getMovementFilter().getCovarianceFactor(false);
    final Matrix offRoadCovError=offRoadCovFactor.times(offRoadCovMean).times(offRoadCovFactor.transpose()).minus(trueVehicleState.getMovementFilter().getOffRoadStateTransCovar());
    offRoadCovErrorStat.update(offRoadCovError.convertToVector());
    final VehicleState parentState=state.getParentState();
    if (parentState != null) {
      Vector transType=OnOffEdgeTransDirMulti.getTransitionType(parentState.getBelief().getEdge().getInferredEdge(),state.getBelief().getEdge().getInferredEdge());
      if (parentState.getBelief().isOnRoad()) {
        transType=transType.stack(AbstractRoadTrackingFilter.zeros2D);
      }
 else {
        transType=AbstractRoadTrackingFilter.zeros2D.stack(transType);
      }
      final Vector trueTransProbs=trueVehicleState.getEdgeTransitionDist().getEdgeMotionTransPrior().getMean().stack(trueVehicleState.getEdgeTransitionDist().getFreeMotionTransPrior().getMean());
      transitionsErrorStat.update(transType.minus(trueTransProbs));
    }
  }
  obsErrorSS.update(obsErrorStat.getMean());
  obsCovErrorSS.update(obsCovErrorStat.getMean());
  onRoadCovErrorSS.update(onRoadCovErrorStat.getMean());
  offRoadCovErrorSS.update(offRoadCovErrorStat.getMean());
  if (transitionsErrorStat.getMean() != null)   transitionsSS.update(transitionsErrorStat.getMean());
  System.out.println(""String_Node_Str"" + obsErrorSS.getMean());
  System.out.println(""String_Node_Str"" + obsCovErrorSS.getMean());
  System.out.println(""String_Node_Str"" + onRoadCovErrorSS.getMean());
  System.out.println(""String_Node_Str"" + offRoadCovErrorSS.getMean());
  System.out.println(""String_Node_Str"" + transitionsSS.getMean());
  final long approxRuns=sim.getSimParameters().getDuration() / sim.getSimParameters().getFrequency();
  if (obsErrorSS.getCount() > Math.min(approxRuns / 16,25)) {
    if (obsErrorZeroArray == null)     obsErrorZeroArray=VectorFactory.getDefault().createVector(obsErrorSS.getMean().getDimensionality()).toArray();
    AssertJUnit.assertArrayEquals(obsErrorSS.getMean().getDimensionality() == 4 ? fourZeros : twoZeros,obsErrorSS.getMean().toArray(),5);
  }
}","private void updateStats(DataDistribution<VehicleState> vehicleStateDist,VehicleState trueVehicleState,SufficientStatistic obsErrorSS,SufficientStatistic obsCovErrorSS,SufficientStatistic onRoadCovErrorSS,SufficientStatistic offRoadCovErrorSS,SufficientStatistic transitionsSS,boolean generalizeMoveDiff){
  SufficientStatistic obsErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic obsCovErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic onRoadCovErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic offRoadCovErrorStat=new MultivariateGaussian.SufficientStatistic();
  SufficientStatistic transitionsErrorStat=new MultivariateGaussian.SufficientStatistic();
  for (  VehicleState state : vehicleStateDist.getDomain()) {
    AssertJUnit.assertEquals(trueVehicleState.getObservation(),state.getObservation());
    final Vector obsError=trueVehicleState.getObservation().getProjectedPoint().minus(state.getMeanLocation());
    obsErrorStat.update(obsError);
    final Matrix obsCovMean=((ErrorEstimatingRoadTrackingFilter)state.getMovementFilter()).getObsVariancePrior().getMean();
    final Matrix obsCovError=obsCovMean.minus(trueVehicleState.getMovementFilter().getObsCovar());
    obsCovErrorStat.update(obsCovError.convertToVector());
    final Matrix onRoadCovMean=((ErrorEstimatingRoadTrackingFilter)state.getMovementFilter()).getOnRoadStateVariancePrior().getMean();
    final Matrix onRoadCovError=onRoadCovMean.minus(trueVehicleState.getMovementFilter().getQr());
    onRoadCovErrorStat.update(onRoadCovError.convertToVector());
    final Matrix offRoadCovMean=((ErrorEstimatingRoadTrackingFilter)state.getMovementFilter()).getOffRoadStateVariancePrior().getMean();
    final Matrix offRoadCovError=offRoadCovMean.minus(trueVehicleState.getMovementFilter().getQg());
    offRoadCovErrorStat.update(offRoadCovError.convertToVector());
    final VehicleState parentState=state.getParentState();
    if (parentState != null) {
      Vector transType=OnOffEdgeTransDirMulti.getTransitionType(parentState.getBelief().getEdge().getInferredEdge(),state.getBelief().getEdge().getInferredEdge());
      if (parentState.getBelief().isOnRoad()) {
        transType=transType.stack(AbstractRoadTrackingFilter.zeros2D);
      }
 else {
        transType=AbstractRoadTrackingFilter.zeros2D.stack(transType);
      }
      final Vector trueTransProbs=trueVehicleState.getEdgeTransitionDist().getEdgeMotionTransPrior().getMean().stack(trueVehicleState.getEdgeTransitionDist().getFreeMotionTransPrior().getMean());
      transitionsErrorStat.update(transType.minus(trueTransProbs));
    }
  }
  obsErrorSS.update(obsErrorStat.getMean());
  obsCovErrorSS.update(obsCovErrorStat.getMean());
  onRoadCovErrorSS.update(onRoadCovErrorStat.getMean());
  offRoadCovErrorSS.update(offRoadCovErrorStat.getMean());
  if (transitionsErrorStat.getMean() != null)   transitionsSS.update(transitionsErrorStat.getMean());
  System.out.println(""String_Node_Str"" + obsErrorSS.getMean());
  System.out.println(""String_Node_Str"" + obsCovErrorSS.getMean());
  System.out.println(""String_Node_Str"" + onRoadCovErrorSS.getMean());
  System.out.println(""String_Node_Str"" + offRoadCovErrorSS.getMean());
  System.out.println(""String_Node_Str"" + transitionsSS.getMean());
  final long approxRuns=sim.getSimParameters().getDuration() / sim.getSimParameters().getFrequency();
  if (obsErrorSS.getCount() > 0) {
    if (obsErrorZeroArray == null)     obsErrorZeroArray=VectorFactory.getDefault().createVector(obsErrorSS.getMean().getDimensionality()).toArray();
    AssertJUnit.assertArrayEquals(obsErrorSS.getMean().getDimensionality() == 4 ? fourZeros : twoZeros,obsErrorSS.getMean().toArray(),3d * Math.sqrt(trueVehicleState.getMovementFilter().getObsCovar().normFrobenius()));
    AssertJUnit.assertArrayEquals(oneZero,onRoadCovErrorSS.getMean().toArray(),0.4d * trueVehicleState.getMovementFilter().getQr().normFrobenius());
    AssertJUnit.assertArrayEquals(fourZeros,offRoadCovErrorSS.getMean().toArray(),0.4d * trueVehicleState.getMovementFilter().getQg().normFrobenius());
  }
}",0.8229444579189911
189478,"@Override public double h(Node n){
  final double distance=((XYNode)n).getCoordinate().distance(toCoord);
  if (distance < obsStdDevDistance)   return 0d;
  return (distance - obsStdDevDistance) / 15d;
}","@Override public double h(Node n){
  final double distance=((Point)n.getObject()).getCoordinate().distance(toCoord);
  if (distance < obsStdDevDistance)   return 0d;
  return (distance - obsStdDevDistance) / 15d;
}",0.9304556354916068
189479,"@Override public Set<InferredPath> getPaths(final VehicleState fromState,final Coordinate toCoord){
  InferredEdge currentEdge=fromState.getBelief().getEdge().getInferredEdge();
  Set<InferredEdge> startEdges=Sets.newHashSet();
  if (!currentEdge.isNullEdge()) {
    startEdges.add(currentEdge);
  }
 else {
    final MultivariateGaussian obsBelief=fromState.getMovementFilter().getObservationBelief(fromState.getBelief());
    final double beliefDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)obsBelief.getCovariance()),MAX_STATE_SNAP_RADIUS);
    startEdges.addAll(getNearbyEdges(fromState.getBelief().getGroundState(),beliefDistance));
  }
  final Set<InferredEdge> endEdges=Sets.newHashSet();
  final double obsStdDevDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)fromState.getMovementFilter().getObsCovar()),MAX_OBS_SNAP_RADIUS);
  double maxEndEdgeLength=Double.NEGATIVE_INFINITY;
  for (  final InferredEdge edge : getNearbyEdges(toCoord,obsStdDevDistance)) {
    if (edge.getLength() > maxEndEdgeLength)     maxEndEdgeLength=edge.getLength();
    endEdges.add(edge);
  }
  Set<InferredPath> paths=Sets.newHashSet();
  paths.add(getNullPath());
  if (endEdges.isEmpty())   return paths;
  for (  InferredEdge startEdge : startEdges) {
    for (    InferredEdge endEdge : endEdges) {
      final Node source=((DirectedEdge)startEdge.getBackingEdge()).getInNode();
      final Node target=((DirectedEdge)endEdge.getBackingEdge()).getOutNode();
      AStarFunctions afuncs=new VehicleStateAStarFunction(target,toCoord,obsStdDevDistance);
      AStarShortestPathFinder aStarIter=new AStarShortestPathFinder(this.graphGenerator.getGraph(),source,target,afuncs);
      aStarIter.calculate();
      try {
        Path path=aStarIter.getPath();
        final boolean isBackward=false;
        List<PathEdge> pathEdges=Lists.newArrayList();
        double distToStart=0d;
        for (        Object edgeObj : path.getEdges()) {
          Edge edge=(Edge)edgeObj;
          InferredEdge infEdge=getInferredEdge(edge);
          pathEdges.add(getPathEdge(infEdge,distToStart,isBackward));
          distToStart+=isBackward ? -infEdge.getLength() : infEdge.getLength();
        }
        paths.add(getInferredPath(pathEdges,isBackward));
      }
 catch (      Exception e) {
      }
    }
  }
  return paths;
}","@Override public Set<InferredPath> getPaths(final VehicleState fromState,final Coordinate toCoord){
  InferredEdge currentEdge=fromState.getBelief().getEdge().getInferredEdge();
  Set<InferredEdge> startEdges=Sets.newHashSet();
  if (!currentEdge.isNullEdge()) {
    startEdges.add(currentEdge);
  }
 else {
    final MultivariateGaussian obsBelief=fromState.getMovementFilter().getObservationBelief(fromState.getBelief());
    final double beliefDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)obsBelief.getCovariance()),MAX_STATE_SNAP_RADIUS);
    startEdges.addAll(getNearbyEdges(fromState.getBelief().getGroundState(),beliefDistance));
  }
  final Set<InferredEdge> endEdges=Sets.newHashSet();
  final double obsStdDevDistance=Math.min(StatisticsUtil.getLargeNormalCovRadius((DenseMatrix)fromState.getMovementFilter().getObsCovar()),MAX_OBS_SNAP_RADIUS);
  double maxEndEdgeLength=Double.NEGATIVE_INFINITY;
  for (  final InferredEdge edge : getNearbyEdges(toCoord,obsStdDevDistance)) {
    if (edge.getLength() > maxEndEdgeLength)     maxEndEdgeLength=edge.getLength();
    endEdges.add(edge);
  }
  Set<InferredPath> paths=Sets.newHashSet();
  paths.add(getNullPath());
  if (endEdges.isEmpty())   return paths;
  for (  InferredEdge startEdge : startEdges) {
    for (    InferredEdge endEdge : endEdges) {
      final Node source=((DirectedEdge)startEdge.getBackingEdge()).getInNode();
      final Node target=((DirectedEdge)endEdge.getBackingEdge()).getOutNode();
      AStarFunctions afuncs=new VehicleStateAStarFunction(target,toCoord,obsStdDevDistance);
      AStarShortestPathFinder aStarIter=new AStarShortestPathFinder(this.graphGenerator.getGraph(),source,target,afuncs);
      aStarIter.calculate();
      try {
        Path path=aStarIter.getPath();
        final boolean isBackward=false;
        List<PathEdge> pathEdges=Lists.newArrayList();
        double distToStart=0d;
        for (        Object edgeObj : path.getEdges()) {
          Edge edge=(Edge)edgeObj;
          InferredEdge infEdge=getInferredEdge(edge);
          pathEdges.add(getPathEdge(infEdge,distToStart,isBackward));
          distToStart+=isBackward ? -infEdge.getLength() : infEdge.getLength();
        }
        if (!pathEdges.isEmpty())         paths.add(getInferredPath(pathEdges,isBackward));
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + e);
      }
    }
  }
  return paths;
}",0.9843063402385436
189480,"/** 
 * The given collection of lines should be in GPS coordinates, since they will be projected here.
 * @param lines
 */
public GenericJTSGraph(Collection<LineString> lines){
  graphGenerator=new DirectedLineStringGraphGenerator();
  for (  LineString edge : lines) {
    gpsEnv.expandToInclude(edge.getEnvelopeInternal());
    final MathTransform transform=GeoUtils.getTransform(edge.getCoordinate());
    Geometry projectedEdge;
    try {
      projectedEdge=JTS.transform(edge,transform);
      projEnv.expandToInclude(projectedEdge.getEnvelopeInternal());
      graphGenerator.add(projectedEdge);
      edgeIndex.insert(projectedEdge.getEnvelopeInternal(),projectedEdge);
    }
 catch (    final TransformException e) {
      e.printStackTrace();
    }
  }
  edgeIndex.build();
}","/** 
 * The given collection of lines should be in GPS coordinates, since they will be projected here.
 * @param lines
 */
public GenericJTSGraph(Collection<LineString> lines){
  graphGenerator=new DirectedLineStringGraphGenerator();
  for (  LineString edge : lines) {
    gpsEnv.expandToInclude(edge.getEnvelopeInternal());
    final MathTransform transform=GeoUtils.getTransform(edge.getCoordinate());
    Geometry projectedEdge;
    try {
      projectedEdge=JTS.transform(edge,transform);
      projectedEdge.setUserData(edge.getCoordinate());
      projEnv.expandToInclude(projectedEdge.getEnvelopeInternal());
      graphGenerator.add(projectedEdge);
      edgeIndex.insert(projectedEdge.getEnvelopeInternal(),projectedEdge);
    }
 catch (    final TransformException e) {
      e.printStackTrace();
    }
  }
  edgeIndex.build();
}",0.966153846153846
189481,"/** 
 * From http://gis.stackexchange.com/questions/28986/geotoolkit-conversion-from -lat-long-to-utm
 */
public static int getEPSGCodefromUTS(Coordinate refLonLat){
  int epsg_code=32600;
  if (refLonLat.y < 0) {
    epsg_code+=100;
  }
  epsg_code+=getUTMZoneForLongitude(refLonLat.x);
  return epsg_code;
}","/** 
 * From http://gis.stackexchange.com/questions/28986/geotoolkit-conversion-from -lat-long-to-utm
 */
public static int getEPSGCodefromUTS(Coordinate refLatLon){
  int epsg_code=32600;
  if (refLatLon.x < 0) {
    epsg_code+=100;
  }
  epsg_code+=getUTMZoneForLongitude(refLatLon.y);
  return epsg_code;
}",0.9449838187702264
189482,"public static MathTransform getTransform(Coordinate refLonLat){
  try {
    final CRSAuthorityFactory crsAuthorityFactory=CRS.getAuthorityFactory(true);
    final GeographicCRS geoCRS=crsAuthorityFactory.createGeographicCRS(""String_Node_Str"");
    final CoordinateReferenceSystem dataCRS=crsAuthorityFactory.createCoordinateReferenceSystem(""String_Node_Str"" + getEPSGCodefromUTS(refLonLat));
    final MathTransform transform=CRS.findMathTransform(geoCRS,dataCRS);
    return transform;
  }
 catch (  final NoSuchIdentifierException e) {
    e.printStackTrace();
  }
catch (  final FactoryException e) {
    e.printStackTrace();
  }
  return null;
}","public static MathTransform getTransform(Coordinate refLatLon){
  try {
    final CRSAuthorityFactory crsAuthorityFactory=CRS.getAuthorityFactory(false);
    final GeographicCRS geoCRS=crsAuthorityFactory.createGeographicCRS(""String_Node_Str"");
    final CoordinateReferenceSystem dataCRS=crsAuthorityFactory.createCoordinateReferenceSystem(""String_Node_Str"" + getEPSGCodefromUTS(refLatLon));
    final MathTransform transform=CRS.findMathTransform(geoCRS,dataCRS);
    return transform;
  }
 catch (  final NoSuchIdentifierException e) {
    e.printStackTrace();
  }
catch (  final FactoryException e) {
    e.printStackTrace();
  }
  return null;
}",0.9822940723633564
189483,"@BeforeTest public void setUp() throws NoSuchAuthorityCodeException, FactoryRegistryException, FactoryException, IOException {
  List<LineString> edges=Lists.newArrayList();
  CoordinateReferenceSystem crs=CRS.getAuthorityFactory(true).createGeographicCRS(""String_Node_Str"");
  startCoord=new Coordinate(40.7549,-73.97749);
  Envelope tmpEnv=new Envelope(startCoord);
  final double appMeter=GeoUtils.getMetersInAngleDegrees(1d);
  tmpEnv.expandBy(appMeter * 10e3);
  ReferencedEnvelope gridBounds=new ReferencedEnvelope(tmpEnv.getMinX(),tmpEnv.getMaxX(),tmpEnv.getMinY(),tmpEnv.getMaxY(),crs);
  List<OrthoLineDef> lineDefs=Arrays.asList(new OrthoLineDef(LineOrientation.VERTICAL,1,appMeter * 100d),new OrthoLineDef(LineOrientation.HORIZONTAL,1,appMeter * 100d));
  SimpleFeatureSource grid=Lines.createOrthoLines(gridBounds,lineDefs);
  FeatureIterator iter=grid.getFeatures().features();
  while (iter.hasNext()) {
    Feature feature=iter.next();
    LineString geom=(LineString)feature.getDefaultGeometryProperty().getValue();
    edges.add(geom);
    edges.add((LineString)geom.reverse());
  }
  graph=new GenericJTSGraph(edges);
  avgTransform=MatrixFactory.getDefault().copyArray(new double[][]{{1,0,1,0},{0,1,0,1}}).scale(1d / 2d);
}","@BeforeTest public void setUp() throws NoSuchAuthorityCodeException, FactoryRegistryException, FactoryException, IOException {
  List<LineString> edges=Lists.newArrayList();
  CoordinateReferenceSystem crs=CRS.getAuthorityFactory(false).createGeographicCRS(""String_Node_Str"");
  startCoord=new Coordinate(40.7549,-73.97749);
  Envelope tmpEnv=new Envelope(startCoord);
  final double appMeter=GeoUtils.getMetersInAngleDegrees(1d);
  tmpEnv.expandBy(appMeter * 10e3);
  ReferencedEnvelope gridBounds=new ReferencedEnvelope(tmpEnv.getMinX(),tmpEnv.getMaxX(),tmpEnv.getMinY(),tmpEnv.getMaxY(),crs);
  List<OrthoLineDef> lineDefs=Arrays.asList(new OrthoLineDef(LineOrientation.VERTICAL,1,appMeter * 100d),new OrthoLineDef(LineOrientation.HORIZONTAL,1,appMeter * 100d));
  SimpleFeatureSource grid=Lines.createOrthoLines(gridBounds,lineDefs);
  FeatureIterator iter=grid.getFeatures().features();
  while (iter.hasNext()) {
    Feature feature=iter.next();
    LineString geom=(LineString)feature.getDefaultGeometryProperty().getValue();
    edges.add(geom);
    edges.add((LineString)geom.reverse());
  }
  graph=new GenericJTSGraph(edges);
  avgTransform=MatrixFactory.getDefault().copyArray(new double[][]{{1,0,1,0},{0,1,0,1}}).scale(1d / 2d);
}",0.9971830985915492
189484,"/** 
 * TODO FIXME: make this a generic getStateOnPath (replace the other one).
 * @see {@link InferredPath#getStateOnPath(AbstractPathState)}
 * @param stateBelief
 * @return
 */
public PathStateBelief getStateBeliefOnPath(PathStateBelief stateBelief){
  final MultivariateGaussian edgeStateBelief;
  if (!this.isEmptyPath()) {
    edgeStateBelief=stateBelief.getGlobalStateBelief().clone();
    if (!stateBelief.isOnRoad()) {
      AbstractRoadTrackingFilter.convertToRoadBelief(edgeStateBelief,this,Iterables.getFirst(this.getEdges(),null),true);
    }
 else {
      final Vector convertedState=this.getStateOnPath(stateBelief);
      edgeStateBelief.setMean(convertedState);
    }
  }
 else {
    edgeStateBelief=stateBelief.getGroundBelief();
  }
  return PathStateBelief.getPathStateBelief(this,edgeStateBelief);
}","/** 
 * TODO FIXME: make this a generic getStateOnPath (replace the other one).
 * @see {@link InferredPath#getStateOnPath(AbstractPathState)}
 * @param stateBelief
 * @return
 */
public PathStateBelief getStateBeliefOnPath(PathStateBelief stateBelief){
  final MultivariateGaussian edgeStateBelief;
  if (!this.isEmptyPath()) {
    edgeStateBelief=stateBelief.getGlobalStateBelief().clone();
    if (!stateBelief.isOnRoad()) {
      AbstractRoadTrackingFilter.convertToRoadBelief(edgeStateBelief,this,Iterables.getFirst(this.getEdges(),null),true);
    }
 else {
      final Vector convertedState=this.getStateOnPath(stateBelief);
      Preconditions.checkState(convertedState != null);
      edgeStateBelief.setMean(convertedState);
    }
  }
 else {
    edgeStateBelief=stateBelief.getGroundBelief();
  }
  return PathStateBelief.getPathStateBelief(this,edgeStateBelief);
}",0.9669811320754716
189485,"@Override public Coordinate getCoordOnEdge(Vector obsPoint){
  if (this == SimpleInferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.getElement(1),obsPoint.getElement(0));
  final LinearLocation here=locationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  return revOnLine;
}","@Override public Coordinate getCoordOnEdge(Vector obsPoint){
  if (this.isNullEdge())   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.getElement(1),obsPoint.getElement(0));
  final LinearLocation here=locationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  return revOnLine;
}",0.9580022701475596
189486,"@Override public String getEdgeId(){
  return edgeId.toString();
}","@Override public String getEdgeId(){
  return String.valueOf(edgeId);
}",0.8175182481751825
189487,"@Override public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == SimpleInferredEdge.emptyEdge)   return null;
  final LinearLocation here=locationIndexedLine.project(obsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  return VectorFactory.getDefault().createVector2D(pointOnLine.x,pointOnLine.y);
}","@Override public Vector getPointOnEdge(Coordinate obsPoint){
  if (this.isNullEdge())   return null;
  final LinearLocation here=locationIndexedLine.project(obsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  return VectorFactory.getDefault().createVector2D(pointOnLine.x,pointOnLine.y);
}",0.9440242057488654
189488,"/** 
 * This returns a list of edges that are incoming, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way in the direction of this edge).
 * @return
 */
@Override public List<InferredEdge> getIncomingTransferableEdges(InferredEdge infEdge){
  Preconditions.checkArgument(infEdge.getBackingEdge() instanceof SimpleInferredEdge);
  final List<InferredEdge> result=Lists.newArrayList();
  for (  final Edge edge : OtpGraph.filterForStreetEdges(((Edge)((SimpleInferredEdge)infEdge.getBackingEdge())).getFromVertex().getIncoming())) {
    if (this.getBaseGraph().getIdForEdge(edge) != null)     result.add(this.getInferredEdge(edge));
  }
  return result;
}","/** 
 * This returns a list of edges that are incoming, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way in the direction of this edge).
 * @return
 */
@Override public List<InferredEdge> getIncomingTransferableEdges(InferredEdge infEdge){
  final List<InferredEdge> result=Lists.newArrayList();
  for (  final Edge edge : OtpGraph.filterForStreetEdges(((Edge)(infEdge.getBackingEdge())).getFromVertex().getIncoming())) {
    if (this.getBaseGraph().getIdForEdge(edge) != null)     result.add(this.getInferredEdge(edge));
  }
  return result;
}",0.9159465828750982
189489,"/** 
 * This returns a list of edges that are outgoing, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way against the direction of this edge).
 * @return
 */
@Override public List<InferredEdge> getOutgoingTransferableEdges(InferredEdge infEdge){
  Preconditions.checkArgument(infEdge.getBackingEdge() instanceof SimpleInferredEdge);
  final List<InferredEdge> result=Lists.newArrayList();
  for (  final Edge edge : OtpGraph.filterForStreetEdges(((Edge)((SimpleInferredEdge)infEdge.getBackingEdge())).getToVertex().getOutgoingStreetEdges())) {
    result.add(this.getInferredEdge(edge));
  }
  return result;
}","/** 
 * This returns a list of edges that are outgoing, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way against the direction of this edge).
 * @return
 */
@Override public List<InferredEdge> getOutgoingTransferableEdges(InferredEdge infEdge){
  final List<InferredEdge> result=Lists.newArrayList();
  for (  final Edge edge : OtpGraph.filterForStreetEdges(((Edge)(infEdge.getBackingEdge())).getToVertex().getOutgoingStreetEdges())) {
    result.add(this.getInferredEdge(edge));
  }
  return result;
}",0.5197645079899075
189490,"/** 
 * See   {@link #checkAndConvertState(Vector,InferredPath)}
 * @param belief
 * @param path
 * @return
 */
public static MultivariateGaussian checkAndConvertBelief(MultivariateGaussian belief,InferredPath path){
  final MultivariateGaussian adjBelief;
  if (path.isNullPath() && belief.getInputDimensionality() != 4) {
    final double dist=AbstractRoadTrackingFilter.getOr().times(belief.getMean()).getElement(0);
    final PathEdge edge=path.getEdgeForDistance(dist,false);
    adjBelief=getGroundBeliefFromRoad(belief,edge,false);
  }
 else   if (!path.isNullPath() && belief.getInputDimensionality() != 2) {
    adjBelief=getRoadBeliefFromGround(belief,path,false);
  }
 else {
    if (!path.isNullPath()) {
      Preconditions.checkState(path.isOnPath(AbstractRoadTrackingFilter.getOr().times(belief.getMean()).getElement(0)));
    }
    adjBelief=belief;
  }
  return adjBelief;
}","/** 
 * See   {@link #checkAndConvertState(Vector,InferredPath)}
 * @param belief
 * @param path
 * @return
 */
public static MultivariateGaussian checkAndConvertBelief(MultivariateGaussian belief,InferredPath path){
  final MultivariateGaussian adjBelief;
  if (path.isNullPath() && belief.getInputDimensionality() != 4) {
    final double dist=AbstractRoadTrackingFilter.getOr().times(belief.getMean()).getElement(0);
    final PathEdge edge=path.getEdgeForDistance(dist,false);
    adjBelief=getGroundBeliefFromRoad(belief,edge,true);
  }
 else   if (!path.isNullPath() && belief.getInputDimensionality() != 2) {
    adjBelief=getRoadBeliefFromGround(belief,path,true);
  }
 else {
    if (!path.isNullPath()) {
      Preconditions.checkState(path.isOnPath(AbstractRoadTrackingFilter.getOr().times(belief.getMean()).getElement(0)));
    }
    adjBelief=belief;
  }
  Preconditions.checkState(belief.getMean().getDimensionality() == belief.getCovariance().getNumColumns() && belief.getCovariance().isSquare());
  return adjBelief;
}",0.9174025974025974
189491,"public static MultivariateGaussian getRoadBeliefFromGround(MultivariateGaussian belief,InferredEdge edge,boolean useAbsVelocity){
  Preconditions.checkArgument(belief.getInputDimensionality() == 4);
  final MultivariateGaussian tmpMg=getRoadBeliefFromGround(belief,edge.getGeometry(),false,null,0,true);
  return tmpMg;
}","public static MultivariateGaussian getRoadBeliefFromGround(MultivariateGaussian belief,InferredEdge edge,boolean useAbsVelocity){
  Preconditions.checkArgument(belief.getInputDimensionality() == 4);
  final MultivariateGaussian tmpMg=getRoadBeliefFromGround(belief,edge.getGeometry(),false,null,0,useAbsVelocity);
  return tmpMg;
}",0.97239263803681
189492,"/** 
 * Checks that the state is either on- or off-road, depending on the given path, and converts if necessary.
 * @param state
 * @param path
 * @return
 */
public static Vector checkAndConvertState(Vector state,InferredPath path){
  final Vector adjState;
  if (path.isNullPath() && state.getDimensionality() != 4) {
    final double dist=AbstractRoadTrackingFilter.getOr().times(state).getElement(0);
    final PathEdge edge=path.getEdgeForDistance(dist,false);
    adjState=getGroundStateFromRoad(state,edge,false);
  }
 else   if (!path.isNullPath() && state.getDimensionality() != 2) {
    adjState=getRoadStateFromGround(state,path,false);
  }
 else {
    adjState=state;
  }
  return adjState;
}","/** 
 * Checks that the state is either on- or off-road, depending on the given path, and converts if necessary.
 * @param state
 * @param path
 * @return
 */
public static Vector checkAndConvertState(Vector state,InferredPath path){
  final Vector adjState;
  if (path.isNullPath() && state.getDimensionality() != 4) {
    final double dist=AbstractRoadTrackingFilter.getOr().times(state).getElement(0);
    final PathEdge edge=path.getEdgeForDistance(dist,false);
    adjState=getGroundStateFromRoad(state,edge,true);
  }
 else   if (!path.isNullPath() && state.getDimensionality() != 2) {
    adjState=getRoadStateFromGround(state,path,true);
  }
 else {
    adjState=state;
  }
  return adjState;
}",0.9900426742532006
189493,"/** 
 * <b>Attention</b>: When we're projected onto a vertex of the LineString then we can have multiple transformations. <br> More importantly, we can lose velocity by performing this projection (how much dependents on the orientation of the edge(s) being we're projecting onto)! However, we can preserve it by simply using the velocity projection's direction and the velocity magnitude of the original 4D vector. This must be done by the user with the results of this method. <br> <br> The returned projection is always in the positive direction.
 * @param locVelocity
 * @param path
 * @param pathEdge
 * @return
 */
public static PathEdgeProjection getRoadProjection(Vector locVelocity,Geometry pathGeometry,boolean pathIsBackwards,Geometry edgeGeometry,double edgeDistanceToStartOnPath){
  Preconditions.checkArgument(locVelocity.getDimensionality() == 2 || locVelocity.getDimensionality() == 4);
  Preconditions.checkArgument(edgeGeometry == null || pathGeometry.contains(edgeGeometry));
  if (locVelocity.getDimensionality() == 2)   return null;
  final Vector m=locVelocity.clone();
  final LinearLocation lineLocation;
  final Coordinate currentPos=GeoUtils.makeCoordinate(AbstractRoadTrackingFilter.getOg().times(m));
  final double distanceToStartOfSegmentOnGeometry;
  final LineSegment pathLineSegment;
  if (edgeGeometry != null) {
    final Geometry edgeGeom=edgeGeometry;
    final LocationIndexedLine locIndex=new LocationIndexedLine(edgeGeom);
    final LinearLocation tmpLocation=locIndex.project(currentPos);
    final LengthIndexedLine tmpLengthIdx=new LengthIndexedLine(edgeGeom);
    final double lengthOnEdge=tmpLengthIdx.indexOf(tmpLocation.getCoordinate(edgeGeom));
    pathLineSegment=tmpLocation.getSegment(edgeGeom);
    final LengthIndexedLine lengthIndex=new LengthIndexedLine(edgeGeom);
    distanceToStartOfSegmentOnGeometry=Math.abs(edgeDistanceToStartOnPath) + lengthIndex.indexOf(pathLineSegment.p0);
    lineLocation=LengthLocationMap.getLocation(pathGeometry,Math.abs(edgeDistanceToStartOnPath) + lengthOnEdge);
  }
 else {
    final LocationIndexedLine locIndex=new LocationIndexedLine(pathGeometry);
    lineLocation=locIndex.project(currentPos);
    pathLineSegment=lineLocation.getSegment(pathGeometry);
    final LengthIndexedLine lengthIndex=new LengthIndexedLine(pathGeometry);
    distanceToStartOfSegmentOnGeometry=lengthIndex.indexOf(pathLineSegment.p0);
  }
  return PathUtils.posVelProjectionPair(pathLineSegment,distanceToStartOfSegmentOnGeometry);
}","/** 
 * <b>Attention</b>: When we're projected onto a vertex of the LineString then we can have multiple transformations. <br> More importantly, we can lose velocity by performing this projection (how much dependents on the orientation of the edge(s) being we're projecting onto)! However, we can preserve it by simply using the velocity projection's direction and the velocity magnitude of the original 4D vector. This must be done by the user with the results of this method. <br> <br> The returned projection is always in the positive direction.
 * @param locVelocity
 * @param path
 * @param pathEdge
 * @return
 */
public static PathEdgeProjection getRoadProjection(Vector locVelocity,Geometry pathGeometry,boolean pathIsBackwards,Geometry edgeGeometry,double edgeDistanceToStartOnPath){
  Preconditions.checkArgument(locVelocity.getDimensionality() == 2 || locVelocity.getDimensionality() == 4);
  if (locVelocity.getDimensionality() == 2)   return null;
  final Vector m=locVelocity.clone();
  final LinearLocation lineLocation;
  final Coordinate currentPos=GeoUtils.makeCoordinate(AbstractRoadTrackingFilter.getOg().times(m));
  final double distanceToStartOfSegmentOnGeometry;
  final LineSegment pathLineSegment;
  if (edgeGeometry != null) {
    final Geometry edgeGeom=edgeGeometry;
    final LocationIndexedLine locIndex=new LocationIndexedLine(edgeGeom);
    final LinearLocation tmpLocation=locIndex.project(currentPos);
    final LengthIndexedLine tmpLengthIdx=new LengthIndexedLine(edgeGeom);
    final double lengthOnEdge=tmpLengthIdx.indexOf(tmpLocation.getCoordinate(edgeGeom));
    pathLineSegment=tmpLocation.getSegment(edgeGeom);
    final LengthIndexedLine lengthIndex=new LengthIndexedLine(edgeGeom);
    distanceToStartOfSegmentOnGeometry=Math.abs(edgeDistanceToStartOnPath) + lengthIndex.indexOf(pathLineSegment.p0);
    lineLocation=LengthLocationMap.getLocation(pathGeometry,Math.abs(edgeDistanceToStartOnPath) + lengthOnEdge);
  }
 else {
    final LocationIndexedLine locIndex=new LocationIndexedLine(pathGeometry);
    lineLocation=locIndex.project(currentPos);
    pathLineSegment=lineLocation.getSegment(pathGeometry);
    final LengthIndexedLine lengthIndex=new LengthIndexedLine(pathGeometry);
    distanceToStartOfSegmentOnGeometry=lengthIndex.indexOf(pathLineSegment.p0);
  }
  return PathUtils.posVelProjectionPair(pathLineSegment,distanceToStartOfSegmentOnGeometry);
}",0.9670061099796334
189494,public abstract PathState getStateOnPath(Vector result);,"/** 
 * Converts location component of the mean to a location on this path, if any. <br> Basically, if the state isn't already defined on the path, then we check if the state's edge is the opposite direction to the first edge on this path. If so, we can convert the state to this path's direction.
 * @param beliefPrediction
 */
public abstract PathState getStateOnPath(PathState currentState);",0.1955555555555555
189495,"@Override public PathState getStateOnPath(Vector state){
  return this.getStateOnPath(state,AbstractRoadTrackingFilter.getEdgeLengthErrorTolerance());
}","@Override public PathState getStateOnPath(PathState currentState){
}",0.4818181818181818
189496,"public static SimplePathState getPathState(@Nonnull InferredPath path,@Nonnull Vector state){
  Preconditions.checkArgument(!path.isNullPath() || state.getDimensionality() == 4);
  return new SimplePathState(path,state);
}","public static SimplePathState getPathState(@Nonnull InferredPath path,@Nonnull Vector state){
  Preconditions.checkArgument(!path.isNullPath() || state.getDimensionality() == 4);
  final Vector adjState=PathUtils.checkAndConvertState(state,path);
  return new SimplePathState(path,adjState);
}",0.858252427184466
189497,"@Override public Vector getGroundState(){
  if (this.groundState != null)   return this.groundState;
  this.groundState=AbstractRoadTrackingFilter.convertToGroundState(this.globalState,this.getEdge(),true);
  return this.groundState;
}","@Override public Vector getGroundState(){
  if (this.groundState != null)   return this.groundState;
  this.groundState=PathUtils.getGroundStateFromRoad(this.globalState,this.getEdge(),true);
  return this.groundState;
}",0.7868131868131868
189498,"public MultivariateGaussian getGroundBelief(){
  if (this.groundBelief == null) {
    final MultivariateGaussian newBelief=this.globalStateBelief.clone();
    AbstractRoadTrackingFilter.convertToGroundBelief(newBelief,this.getEdge(),true);
    this.groundBelief=newBelief;
    return newBelief;
  }
 else {
    return this.groundBelief;
  }
}","public MultivariateGaussian getGroundBelief(){
  if (this.groundBelief == null) {
    this.groundBelief=PathUtils.getGroundBeliefFromRoad(this.globalStateBelief,this.getEdge(),isOnRoad());
  }
  return this.groundBelief;
}",0.4148936170212766
189499,"public static PathStateBelief getPathStateBelief(SimplePathState oldPathState,Matrix covariance){
  Preconditions.checkState(oldPathState.getRawState().getDimensionality() == covariance.getNumColumns());
  final SimplePathStateBelief result=new SimplePathStateBelief(oldPathState.getPath(),new MultivariateGaussian(oldPathState.getRawState(),covariance));
  result.localStateBelief=new MultivariateGaussian(oldPathState.getLocalState(),covariance);
  return result;
}","/** 
 * Simply adds a covariance to a PathState to produce a PathStateBelief.
 * @param oldPathState
 * @param covariance
 * @return
 */
public static PathStateBelief getPathStateBelief(SimplePathState oldPathState,Matrix covariance){
  Preconditions.checkState(oldPathState.getRawState().getDimensionality() == covariance.getNumColumns());
  final SimplePathStateBelief result=new SimplePathStateBelief(oldPathState.getPath(),new MultivariateGaussian(oldPathState.getRawState(),covariance));
  result.localStateBelief=new MultivariateGaussian(oldPathState.getLocalState(),covariance);
  return result;
}",0.8720821661998133
189500,"@Override public void buildGraph(Graph graph,HashMap<Class<?>,Object> extra){
  Field xfield;
  Field yfield;
  Field geomfield;
  try {
    xfield=AbstractVertex.class.getDeclaredField(""String_Node_Str"");
    xfield.setAccessible(true);
    yfield=AbstractVertex.class.getDeclaredField(""String_Node_Str"");
    yfield.setAccessible(true);
    geomfield=PlainStreetEdge.class.getDeclaredField(""String_Node_Str"");
    geomfield.setAccessible(true);
  }
 catch (  final SecurityException e) {
    throw new RuntimeException(e);
  }
catch (  final NoSuchFieldException e) {
    throw new RuntimeException(e);
  }
  graph=graph.getService(BaseGraph.class).getBaseGraph();
  graph.setVertexComparatorFactory(new SimpleVertexComparatorFactory());
  final MathTransform transform=getCRSTransform();
  try {
    for (    final Vertex v : graph.getVertices()) {
      final AbstractVertex abv=((AbstractVertex)v);
      final Coordinate converted=new Coordinate();
      JTS.transform(abv.getCoordinate(),converted,transform);
      xfield.set(abv,converted.x);
      yfield.set(abv,converted.y);
      final ArrayList<Edge> toRemove=new ArrayList<Edge>();
      for (      final Edge e : v.getOutgoing()) {
        final Geometry orig=e.getGeometry();
        if (orig == null) {
          toRemove.add(e);
          continue;
        }
        final Geometry geom=JTS.transform(orig,transform);
        geomfield.set(e,geom);
      }
      for (      final Edge e : toRemove) {
        v.removeOutgoing(e);
        e.getToVertex().removeIncoming(e);
      }
    }
  }
 catch (  final NoninvertibleTransformException e) {
    throw new RuntimeException(e);
  }
catch (  final TransformException e) {
    throw new RuntimeException(e);
  }
catch (  final IllegalArgumentException e) {
    throw new RuntimeException(e);
  }
catch (  final IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}","@Override public void buildGraph(Graph graph,HashMap<Class<?>,Object> extra){
  Field xfield;
  Field yfield;
  Field geomfield;
  try {
    xfield=AbstractVertex.class.getDeclaredField(""String_Node_Str"");
    xfield.setAccessible(true);
    yfield=AbstractVertex.class.getDeclaredField(""String_Node_Str"");
    yfield.setAccessible(true);
    geomfield=PlainStreetEdge.class.getDeclaredField(""String_Node_Str"");
    geomfield.setAccessible(true);
  }
 catch (  final SecurityException e) {
    throw new RuntimeException(e);
  }
catch (  final NoSuchFieldException e) {
    throw new RuntimeException(e);
  }
  graph=graph.getService(BaseGraph.class).getBaseGraph();
  graph.setVertexComparatorFactory(new SimpleVertexComparatorFactory());
  try {
    for (    final Vertex v : graph.getVertices()) {
      final AbstractVertex abv=((AbstractVertex)v);
      final ProjectedCoordinate converted=GeoUtils.convertToEuclidean(GeoUtils.reverseCoordinates(abv.getCoordinate()));
      xfield.set(abv,converted.x);
      yfield.set(abv,converted.y);
      final ArrayList<Edge> toRemove=new ArrayList<Edge>();
      for (      final Edge e : v.getOutgoing()) {
        final Geometry orig=e.getGeometry();
        if (orig == null) {
          toRemove.add(e);
          continue;
        }
        final Geometry geom=GeoUtils.projectLonLatGeom(orig);
        final ProjectedCoordinate tmpConv=GeoUtils.convertToEuclidean(GeoUtils.reverseCoordinates(orig.getCoordinate()));
        geom.setUserData(new Integer(tmpConv.getUtmZone()));
        geomfield.set(e,geom);
      }
      for (      final Edge e : toRemove) {
        v.removeOutgoing(e);
        e.getToVertex().removeIncoming(e);
      }
    }
  }
 catch (  final IllegalArgumentException e) {
    throw new RuntimeException(e);
  }
catch (  final IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}",0.8359872611464968
189501,"public Projection getProjection(){
  return projection;
}","@JsonIgnore public Projection getProjection(){
  return projection;
}",0.9047619047619048
189502,"@Override public State traverse(State s0){
  final RoutingRequest options=s0.getOptions();
  if (turnRestricted(options) && !options.getModes().contains(TraverseMode.WALK)) {
    return null;
  }
  final TraverseMode traverseMode=s0.getNonTransitMode(options);
  if (!((TurnVertex)fromv).canTraverse(options,traverseMode)) {
    return null;
  }
  final StateEditor s1=s0.edit(this);
  final double speed=options.getSpeed(s0.getNonTransitMode(options));
  final double time=(((TurnVertex)fromv).getEffectiveLength(traverseMode) + turnCost / 20.0) / speed;
  final double weight=((TurnVertex)fromv).computeWeight(s0,options,time);
  s1.incrementWalkDistance(((TurnVertex)fromv).getLength());
  s1.incrementTimeInSeconds((int)Math.ceil(time));
  s1.incrementWeight(weight);
  if (s1.weHaveWalkedTooFar(options))   return null;
  return s1.makeState();
}","@Override public State traverse(State s0){
  final RoutingRequest options=s0.getOptions();
  if (turnRestricted(TraverseMode.CAR) && !options.getModes().contains(TraverseMode.WALK)) {
    return null;
  }
  final TraverseMode traverseMode=s0.getNonTransitMode(options);
  if (!((TurnVertex)fromv).canTraverse(options,traverseMode)) {
    return null;
  }
  final StateEditor s1=s0.edit(this);
  final double speed=options.getSpeed(s0.getNonTransitMode(options));
  final double time=(((TurnVertex)fromv).getEffectiveLength(traverseMode) + turnCost / 20.0) / speed;
  final double weight=((TurnVertex)fromv).computeWeight(s0,options,time);
  s1.incrementWalkDistance(((TurnVertex)fromv).getLength());
  s1.incrementTimeInSeconds((int)Math.ceil(time));
  s1.incrementWeight(weight);
  if (s1.weHaveWalkedTooFar(options))   return null;
  return s1.makeState();
}",0.9865575686732904
189503,"public Simulation(String simulationName,OtpGraph graph,SimulationParameters simParameters){
  this.simParameters=simParameters;
  this.parameters=simParameters.getStateParams();
  this.filterTypeName=simParameters.getStateParams().getFilterTypeName();
  this.inferredGraph=graph;
  this.simulationName=simulationName;
  this.rng=new Random();
  if (parameters.getSeed() != 0l) {
    this.seed=parameters.getSeed();
  }
 else {
    this.seed=rng.nextLong();
  }
  this.rng.setSeed(seed);
}","public Simulation(String simulationName,OtpGraph graph,SimulationParameters simParameters){
  this.simParameters=simParameters;
  this.parameters=simParameters.getStateParams();
  this.filterTypeName=simParameters.getStateParams().getFilterTypeName();
  this.inferredGraph=graph;
  this.simulationName=simulationName;
  this.rng=new Random();
  if (parameters.getSeed() != 0l) {
    this.seed=parameters.getSeed();
  }
 else {
    this.seed=rng.nextLong();
  }
  this.rng.setSeed(seed);
  Observation initialObs=null;
  try {
    Observation.remove(simulationName);
    initialObs=Observation.createObservation(this.simulationName,this.simParameters.getStartTime(),this.simParameters.getStartCoordinate(),null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
  }
  if (initialObs != null) {
    this.updater=new VehicleTrackingPathSamplerFilterUpdater(initialObs,graph,parameters,rng);
  }
 else {
    this.updater=null;
  }
}",0.6749654218533887
189504,"private VehicleState sampleState(VehicleState vehicleState,long time){
  vehicleState.getMovementFilter().setCurrentTimeDiff(this.simParameters.getFrequency());
  final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
  final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
  final PathEdge currentPathEdge=PathEdge.getEdge(vehicleState.getInferredEdge());
  this.localSeed=rng.nextLong();
  final InferredPath newPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
  final PathEdge newPathEdge=Iterables.getLast(newPath.getEdges());
  final Matrix gCov=vehicleState.getMovementFilter().getGroundFilter().getMeasurementCovariance();
  final Vector thisLoc=sampleObservation(currentLocBelief,gCov,newPathEdge);
  final Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
  Observation thisObs;
  try {
    thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
    return null;
  }
  final VehicleState newState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,newPath,vehicleState);
  return newState;
}","private VehicleState sampleState(VehicleState vehicleState,long time){
  vehicleState.getMovementFilter().setCurrentTimeDiff(this.simParameters.getFrequency());
  final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
  final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
  final PathEdge currentPathEdge=PathEdge.getEdge(vehicleState.getInferredEdge());
  this.localSeed=rng.nextLong();
  final InferredPath newPath=this.updater.traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
  final PathEdge newPathEdge=Iterables.getLast(newPath.getEdges());
  final Matrix gCov=vehicleState.getMovementFilter().getGroundFilter().getMeasurementCovariance();
  final Vector thisLoc=sampleObservation(currentLocBelief,gCov,newPathEdge);
  final Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
  Observation thisObs;
  try {
    thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
    return null;
  }
  final VehicleState newState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,newPath,vehicleState);
  return newState;
}",0.9950134253931724
189505,"public VehicleState computeInitialState(){
  Observation initialObs;
  try {
    try {
      Observation.remove(simulationName);
      initialObs=Observation.createObservation(this.simulationName,this.simParameters.getStartTime(),this.simParameters.getStartCoordinate(),null,null,null);
    }
 catch (    final TimeOrderException e) {
      e.printStackTrace();
      return null;
    }
    final List<InferredEdge> edges=Lists.newArrayList(InferredEdge.getEmptyEdge());
    for (    final StreetEdge edge : this.inferredGraph.getNearbyEdges(initialObs.getProjectedPoint(),25d)) {
      edges.add(this.inferredGraph.getInferredEdge(edge));
    }
    final Set<InferredPathEntry> evaluatedPaths=Sets.newHashSet();
    final InferredEdge currentInferredEdge=edges.get(rng.nextInt(edges.size()));
    for (    final InferredEdge edge : edges) {
      final InferredPath thisPath;
      if (edge.isEmptyEdge()) {
        thisPath=InferredPath.getEmptyPath();
      }
 else {
        thisPath=InferredPath.getInferredPath(edge);
      }
      if (edge == currentInferredEdge) {
      }
      evaluatedPaths.add(new InferredPathEntry(thisPath,null,null,null,Double.NEGATIVE_INFINITY));
    }
    final VehicleState vehicleState=new VehicleState(this.inferredGraph,initialObs,currentInferredEdge,parameters,rng);
    return vehicleState;
  }
 catch (  final NumberFormatException e) {
    e.printStackTrace();
  }
  return null;
}","public VehicleState computeInitialState(){
  if (this.updater == null)   return null;
  try {
    final Observation initialObs=this.updater.getInitialObservation();
    final List<InferredEdge> edges=Lists.newArrayList(InferredEdge.getEmptyEdge());
    for (    final StreetEdge edge : this.inferredGraph.getNearbyEdges(initialObs.getProjectedPoint(),25d)) {
      edges.add(this.inferredGraph.getInferredEdge(edge));
    }
    final Set<InferredPathEntry> evaluatedPaths=Sets.newHashSet();
    final InferredEdge currentInferredEdge=edges.get(rng.nextInt(edges.size()));
    for (    final InferredEdge edge : edges) {
      final InferredPath thisPath;
      if (edge.isEmptyEdge()) {
        thisPath=InferredPath.getEmptyPath();
      }
 else {
        thisPath=InferredPath.getInferredPath(edge);
      }
      if (edge == currentInferredEdge) {
      }
      evaluatedPaths.add(new InferredPathEntry(thisPath,null,null,null,Double.NEGATIVE_INFINITY));
    }
    final VehicleState vehicleState=new VehicleState(this.inferredGraph,initialObs,currentInferredEdge,parameters,rng);
    return vehicleState;
  }
 catch (  final NumberFormatException e) {
    e.printStackTrace();
  }
  return null;
}",0.8498475609756098
189506,"@Override public double logEvaluate(Observation input){
  double logLikelihood=0d;
  logLikelihood+=this.edgeTransitionDist.logEvaluate(this.getPath().getEdges().get(0).getInferredEdge(),this.getInferredEdge());
  logLikelihood+=this.getMovementFilter().logLikelihood(input.getProjectedPoint(),this.belief,PathEdge.getEdge(this.getInferredEdge()));
  return logLikelihood;
}","@Beta @Override public double logEvaluate(Observation input){
  double logLikelihood=0d;
  logLikelihood+=this.getMovementFilter().logLikelihood(input.getProjectedPoint(),this.belief,PathEdge.getEdge(this.getInferredEdge()));
  return logLikelihood;
}",0.784
189507,"public double logEvaluate(InferredEdge from,InferredEdge to){
  if (from.isEmptyEdge()) {
    return getFreeMotionTransPrior().getProbabilityFunction().logEvaluate(getTransitionType(from,to));
  }
 else {
    return getEdgeMotionTransPrior().getProbabilityFunction().logEvaluate(getTransitionType(from,to));
  }
}","public double logEvaluate(InferredEdge from,InferredEdge to){
  if (from == null) {
    if (to.isEmptyEdge()) {
      return getFreeMotionTransPrior().getProbabilityFunction().logEvaluate(getTransitionType(to,to));
    }
 else {
      return getEdgeMotionTransPrior().getProbabilityFunction().logEvaluate(getTransitionType(to,to));
    }
  }
 else {
    if (from.isEmptyEdge()) {
      return getFreeMotionTransPrior().getProbabilityFunction().logEvaluate(getTransitionType(from,to));
    }
 else {
      return getEdgeMotionTransPrior().getProbabilityFunction().logEvaluate(getTransitionType(from,to));
    }
  }
}",0.6745689655172413
189508,"public int getTotalCount(){
  return totalCount;
}","public int getTotalCount(){
  int total=0;
  for (  java.util.Map.Entry<KeyType,MutableDouble> entry : this.map.entrySet()) {
    MutableDoubleCount count=(MutableDoubleCount)entry.getValue();
    total+=count.getCount();
  }
  return total;
}",0.2116040955631399
189509,"@Override public double increment(KeyType key,final double value){
  final MutableDouble entry=this.map.get(key);
  double newValue;
  double delta;
  if (entry == null) {
    if (value > 0.0) {
      this.map.put(key,new MutableDouble(value));
      delta=value;
    }
 else {
      delta=0.0;
    }
    newValue=value;
  }
 else {
    if (entry.value + value >= 0.0) {
      delta=value;
      entry.value+=value;
    }
 else {
      delta=-entry.value;
      entry.value=0.0;
    }
    newValue=entry.value;
  }
  if (delta != 0.0) {
    keysToCounts.adjustOrPutValue(key,1,1);
    totalCount++;
    assert(totalCount == StatisticsUtil.sum(keysToCounts.values()));
  }
  this.total+=delta;
  return newValue;
}","@Override public double increment(KeyType key,final double value){
  final MutableDoubleCount entry=(MutableDoubleCount)this.map.get(key);
  double newValue;
  double delta;
  if (entry == null) {
    if (value > 0.0) {
      this.map.put(key,new MutableDoubleCount(value));
      delta=value;
    }
 else {
      delta=0.0;
    }
    newValue=value;
  }
 else {
    if (entry.value + value >= 0.0) {
      delta=value;
      entry.plusEquals(value);
    }
 else {
      delta=-entry.value;
      entry.set(0d);
    }
    newValue=entry.value;
  }
  this.total+=delta;
  return newValue;
}",0.8110599078341014
189510,"public int getCount(final KeyType key){
  return keysToCounts.get(key);
}","public int getCount(KeyType key){
  return ((MutableDoubleCount)this.map.get(key)).getCount();
}",0.7455621301775148
189511,"@Override public void set(final KeyType key,final double value){
  final MutableDouble entry=this.map.get(key);
  if (entry == null) {
    if (value > 0.0) {
      this.map.put(key,new MutableDouble(value));
      this.total+=value;
      keysToCounts.adjustOrPutValue(key,1,1);
      totalCount++;
    }
  }
 else   if (value > 0.0) {
    this.total+=value - entry.value;
    entry.value=value;
    keysToCounts.adjustOrPutValue(key,1,1);
    totalCount++;
  }
 else {
    entry.value=0.0;
  }
  assert(totalCount <= 50);
  assert(totalCount == StatisticsUtil.sum(keysToCounts.values()));
}","public void set(final KeyType key,final double value,final int count){
  final MutableDoubleCount entry=(MutableDoubleCount)this.map.get(key);
  if (entry == null) {
    if (value > 0.0) {
      this.map.put(key,new MutableDoubleCount(value,count));
      this.total+=value;
    }
  }
 else   if (value > 0.0) {
    this.total+=value - entry.value;
    entry.set(value,count);
  }
 else {
    entry.set(0d,count);
  }
}",0.4752475247524752
189512,"@Override public void clear(){
  this.map.clear();
  this.total=0.0;
  this.keysToCounts.clear();
  this.totalCount=0;
}","@Override public void clear(){
  super.clear();
  this.total=0.0;
}",0.6844919786096256
189513,"/** 
 * Creates a new instance of
 * @param map Backing Map that stores the data
 * @param total Sum of all values in the Map
 */
protected LogDefaultDataDistribution(final LinkedHashMap<KeyType,Multiset.Entry<KeyType>> map,final double total){
  this.map=Maps.newLinkedHashMap(map);
  this.total=total;
}","/** 
 * Creates a new instance of
 * @param map Backing Map that stores the data
 * @param total Sum of all values in the Map
 */
protected LogDefaultDataDistribution(final Map<KeyType,MutableDouble> map,final double total){
  super(map);
  this.total=total;
}",0.863716814159292
189514,"@Override public LogDefaultDataDistribution<KeyType> clone(){
  final LogDefaultDataDistribution<KeyType> clone=new LogDefaultDataDistribution<KeyType>(this.getDomainSize());
  clone.incrementAll(this.getDomain());
  clone.total=this.total;
  clone.totalCount=this.totalCount;
  return clone;
}","@Override public LogDefaultDataDistribution<KeyType> clone(){
}",0.3529411764705882
189515,"public static <DistributionType,SupportType extends Comparable>DataDistribution<SupportType> getLogNormalizedDistribution(Map<SupportType,WrappedWeightedValue<DistributionType>> map){
  double totalLikelihood=Double.NEGATIVE_INFINITY;
  for (  final WrappedWeightedValue<DistributionType> weight : map.values()) {
    totalLikelihood=LogMath.add(weight.getWeight(),totalLikelihood);
  }
  if (totalLikelihood == Double.NEGATIVE_INFINITY)   return null;
  final List<Entry<SupportType,WrappedWeightedValue<DistributionType>>> entryList=Lists.newArrayList(map.entrySet());
  final DataDistribution<SupportType> result=new LogDefaultDataDistribution<SupportType>();
  for (  final Entry<SupportType,WrappedWeightedValue<DistributionType>> entry : entryList) {
    if (entry.getValue().getWeight() == Double.NEGATIVE_INFINITY)     continue;
    final double weight=entry.getValue().getWeight() - totalLikelihood;
    result.set(entry.getKey(),Math.exp(weight));
  }
  return result;
}","public static <DistributionType,SupportType extends Comparable>DataDistribution<SupportType> getLogNormalizedDistribution(Map<SupportType,WrappedWeightedValue<DistributionType>> map){
  double totalLikelihood=Double.NEGATIVE_INFINITY;
  for (  final WrappedWeightedValue<DistributionType> weight : map.values()) {
    totalLikelihood=LogMath.add(weight.getWeight(),totalLikelihood);
  }
  if (totalLikelihood == Double.NEGATIVE_INFINITY)   return null;
  final List<Entry<SupportType,WrappedWeightedValue<DistributionType>>> entryList=Lists.newArrayList(map.entrySet());
  final LogDefaultDataDistribution<SupportType> result=new LogDefaultDataDistribution<SupportType>();
  for (  final Entry<SupportType,WrappedWeightedValue<DistributionType>> entry : entryList) {
    if (entry.getValue().getWeight() == Double.NEGATIVE_INFINITY)     continue;
    final double weight=entry.getValue().getWeight() - totalLikelihood;
    result.set(entry.getKey(),Math.exp(weight),entry.getValue().getCount());
  }
  return result;
}",0.980980980980981
189516,"public VehicleTrackingBootstrapFilter(Observation obs,OtpGraph inferredGraph,InitialParameters parameters,boolean isDebug){
  this.isDebug=isDebug;
  this.setNumParticles(50);
  this.inferredGraph=inferredGraph;
  VehicleTrackingBootstrapFilterUpdater updater=new VehicleTrackingBootstrapFilterUpdater(obs,this.inferredGraph,parameters);
  this.setUpdater(updater);
  this.initialObservation=obs;
}","public VehicleTrackingBootstrapFilter(Observation obs,OtpGraph inferredGraph,VehicleStateInitialParameters parameters,boolean isDebug){
  this.isDebug=isDebug;
  this.setNumParticles(50);
  this.inferredGraph=inferredGraph;
  VehicleTrackingBootstrapFilterUpdater updater=new VehicleTrackingBootstrapFilterUpdater(obs,this.inferredGraph,parameters);
  this.setUpdater(updater);
  this.initialObservation=obs;
}",0.9851485148514852
189517,"public VehicleTrackingBootstrapFilterUpdater(Observation obs,OtpGraph inferredGraph,InitialParameters parameters){
  this.initialObservation=obs;
  this.inferredGraph=inferredGraph;
  this.parameters=parameters;
  this.threadRandom=new UpdaterThreadLocal(parameters.getSeed());
}","public VehicleTrackingBootstrapFilterUpdater(Observation obs,OtpGraph inferredGraph,VehicleStateInitialParameters parameters){
  this.initialObservation=obs;
  this.inferredGraph=inferredGraph;
  this.parameters=parameters;
  this.threadRandom=new UpdaterThreadLocal(parameters.getSeed());
}",0.9789473684210528
189518,"public VehicleTrackingPLFilter(Observation obs,OtpGraph inferredGraph,InitialParameters parameters,boolean isDebug){
  this.isDebug=isDebug;
  this.setNumParticles(50);
  this.inferredGraph=inferredGraph;
  this.setUpdater(new VehicleTrackingBootstrapFilterUpdater(obs,this.inferredGraph,parameters));
  this.initialObservation=obs;
}","public VehicleTrackingPLFilter(Observation obs,OtpGraph inferredGraph,VehicleStateInitialParameters parameters,boolean isDebug){
  this.isDebug=isDebug;
  this.setNumParticles(50);
  this.inferredGraph=inferredGraph;
  this.setUpdater(new VehicleTrackingBootstrapFilterUpdater(obs,this.inferredGraph,parameters));
  this.initialObservation=obs;
}",0.9823529411764704
189519,"@Override public String toString(){
  return ""String_Node_Str"" + value + ""String_Node_Str""+ weight+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + count + ""String_Node_Str""+ value+ ""String_Node_Str""+ weight+ ""String_Node_Str"";
}",0.8947368421052632
189520,"@Override public State traverse(State s0){
  RoutingRequest options=s0.getOptions();
  if (turnRestricted(s0,options) && !options.getModes().contains(TraverseMode.WALK)) {
    return null;
  }
  TraverseMode traverseMode=s0.getNonTransitMode(options);
  if (!((TurnVertex)fromv).canTraverse(options,traverseMode)) {
    return null;
  }
  StateEditor s1=s0.edit(this);
  double speed=options.getSpeed(s0.getNonTransitMode(options));
  double time=(((TurnVertex)fromv).getEffectiveLength(traverseMode) + turnCost / 20.0) / speed;
  double weight=((TurnVertex)fromv).computeWeight(s0,options,time);
  s1.incrementWalkDistance(((TurnVertex)fromv).getLength());
  s1.incrementTimeInSeconds((int)Math.ceil(time));
  s1.incrementWeight(weight);
  if (s1.weHaveWalkedTooFar(options))   return null;
  return s1.makeState();
}","@Override public State traverse(State s0){
  final RoutingRequest options=s0.getOptions();
  if (turnRestricted(s0,options) && !options.getModes().contains(TraverseMode.WALK)) {
    return null;
  }
  final TraverseMode traverseMode=s0.getNonTransitMode(options);
  if (!((TurnVertex)fromv).canTraverse(options,traverseMode)) {
    return null;
  }
  final StateEditor s1=s0.edit(this);
  final double speed=options.getSpeed(s0.getNonTransitMode(options));
  final double time=(((TurnVertex)fromv).getEffectiveLength(traverseMode) + turnCost / 20.0) / speed;
  final double weight=((TurnVertex)fromv).computeWeight(s0,options,time);
  s1.incrementWalkDistance(((TurnVertex)fromv).getLength());
  s1.incrementTimeInSeconds((int)Math.ceil(time));
  s1.incrementWeight(weight);
  if (s1.weHaveWalkedTooFar(options))   return null;
  return s1.makeState();
}",0.9784688995215312
189521,"public TurnEdge makeTurnEdge(StreetVertex out){
  if (out instanceof TurnVertex) {
    return new SimpleTurnEdge(this,(TurnVertex)out);
  }
  return new SimpleTurnEdge(this,out);
}","@Override public TurnEdge makeTurnEdge(StreetVertex out){
  if (out instanceof TurnVertex) {
    return new SimpleTurnEdge(this,out);
  }
  return new SimpleTurnEdge(this,out);
}",0.9385474860335196
189522,"@Override public double distance(double lat1,double lon1,double lat2,double lon2,double radius){
  double xd=lon1 - lon2;
  double yd=lat1 - lat2;
  return Math.sqrt(xd * xd + yd * yd);
}","@Override public double distance(double lat1,double lon1,double lat2,double lon2,double radius){
  final double xd=lon1 - lon2;
  final double yd=lat1 - lat2;
  return Math.sqrt(xd * xd + yd * yd);
}",0.9689119170984456
189523,"@Override public double fastDistance(double lat1,double lon1,double lat2,double lon2){
  double xd=lon1 - lon2;
  double yd=lat1 - lat2;
  return Math.sqrt(xd * xd + yd * yd);
}","@Override public double fastDistance(double lat1,double lon1,double lat2,double lon2){
  final double xd=lon1 - lon2;
  final double yd=lat1 - lat2;
  return Math.sqrt(xd * xd + yd * yd);
}",0.9672131147540984
189524,"public PathEdge getEdgeForDistance(double distance,boolean clamp){
  final double direction=Math.signum(totalPathDistance);
  if (direction * distance > Math.abs(totalPathDistance)) {
    return Iterables.getLast(edges);
  }
 else   if (direction * distance < 0d) {
    return Iterables.getFirst(edges,null);
  }
  for (  final PathEdge edge : edges) {
    if (edge.isOnEdge(distance))     return edge;
  }
  return null;
}","public PathEdge getEdgeForDistance(double distance,boolean clamp){
}",0.2769857433808554
189525,"public InferredEdge getStartEdge(){
  return startEdge;
}","public InferredEdge getStartEdge(){
  return startSearchEdge;
}",0.95
189526,"public InferredEdge getEndEdge(){
  return endEdge;
}","public InferredEdge getEndEdge(){
  return endSearchEdge;
}",0.9464285714285714
189527,"public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge,boolean allowExtensions){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(!edge.isEmptyEdge());
  final Vector positiveMean;
  if (belief.getMean().getElement(0) < 0d) {
    final Vector posMeanTmp=belief.getMean().clone();
    double posLocation=Math.max(0d,belief.getMean().getElement(0) + edge.getInferredEdge().getLength() + Math.abs(edge.getDistToStartOfEdge()));
    if (allowExtensions && posLocation < 0d) {
      posLocation=edge.getInferredEdge().getLength() + Math.abs(belief.getMean().getElement(0));
    }
    posMeanTmp.setElement(0,posLocation);
    positiveMean=posMeanTmp;
  }
 else {
    positiveMean=belief.getMean().clone();
  }
  final Entry<LineSegment,Double> segmentDist=getSegmentAndDistanceToStart(edge.getInferredEdge(),positiveMean.getElement(0));
  final double absTotalPathDistanceToStartOfSegment=Math.abs(segmentDist.getValue());
  final double absTotalPathDistanceToEndOfSegment=absTotalPathDistanceToStartOfSegment + segmentDist.getKey().getLength();
  final Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(segmentDist.getKey(),absTotalPathDistanceToStartOfSegment);
  if (!allowExtensions) {
    if (positiveMean.getElement(0) > absTotalPathDistanceToEndOfSegment) {
      positiveMean.setElement(0,absTotalPathDistanceToEndOfSegment);
    }
 else     if (positiveMean.getElement(0) < absTotalPathDistanceToStartOfSegment) {
      positiveMean.setElement(0,absTotalPathDistanceToStartOfSegment);
    }
  }
  final Matrix C=belief.getCovariance();
  final Vector projMean=projPair.getKey().times(positiveMean).plus(projPair.getValue());
  final Matrix projCov=projPair.getKey().times(C).times(projPair.getKey().transpose());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}","public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge,boolean allowExtensions){
}",0.1053135471517472
189528,"private Set<InferredPath> computePaths(PathKey key){
  final InferredEdge currentEdge=key.getState().getInferredEdge();
  final Coordinate toCoord=key.getEndCoord();
  final Coordinate fromCoord=key.getStartCoord();
  final Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  final Set<Edge> startEdges=Sets.newHashSet();
  if (!currentEdge.isEmptyEdge()) {
    final PlainStreetEdgeWithOSMData edge=(PlainStreetEdgeWithOSMData)currentEdge.getEdge();
    for (    final Edge outgoing : edge.getTurnVertex().getOutgoing()) {
      startEdges.add(outgoing);
    }
  }
 else {
    final double stateStdDevDistance=1.98d * Math.sqrt(key.getState().getBelief().getCovariance().normFrobenius());
    for (    final Object obj : getNearbyEdges(fromCoord,stateStdDevDistance)) {
      final PlainStreetEdgeWithOSMData edge=(PlainStreetEdgeWithOSMData)obj;
      startEdges.addAll(edge.getTurnVertex().getOutgoing());
    }
  }
  final Set<Edge> endEdges=Sets.newHashSet();
  final double obsStdDevDistance=1.98d * Math.sqrt(key.getState().getMovementFilter().getObsVariance().normFrobenius());
  for (  final Object obj : getNearbyEdges(toCoord,obsStdDevDistance)) {
    final PlainStreetEdgeWithOSMData edge=(PlainStreetEdgeWithOSMData)obj;
    endEdges.addAll(edge.getTurnVertex().getOutgoing());
  }
  final double timeDiff=key.getState().getMovementFilter().getCurrentTimeDiff();
  final double distanceMax=MAX_DISTANCE_SPEED * timeDiff;
  for (  final Edge startEdge : startEdges) {
    final MultiDestinationAStar forwardAStar=new MultiDestinationAStar(turnGraph,endEdges,toCoord,obsStdDevDistance,startEdge,distanceMax);
    final ShortestPathTree spt1=forwardAStar.getSPT(false);
    final MultiDestinationAStar backwardAStar=new MultiDestinationAStar(turnGraph,endEdges,toCoord,obsStdDevDistance,startEdge,distanceMax);
    final ShortestPathTree spt2=backwardAStar.getSPT(true);
    for (    final Edge endEdge : endEdges) {
      final GraphPath forwardPath=spt1.getPath(endEdge.getToVertex(),false);
      if (forwardPath != null) {
        final InferredPath forwardResult=copyAStarResults(forwardPath,getBaseEdge(startEdge),false);
        if (forwardResult != null) {
          paths.add(forwardResult);
          forwardResult.setStartEdge(this.getInferredEdge(startEdge));
          forwardResult.setEndEdge(this.getInferredEdge(endEdge));
        }
      }
      if (backwardAStar != null) {
        final GraphPath backwardPath=spt2.getPath(endEdge.getFromVertex(),false);
        if (backwardPath != null) {
          final InferredPath backwardResult=copyAStarResults(backwardPath,startEdge,true);
          if (backwardResult != null) {
            paths.add(backwardResult);
            backwardResult.setStartEdge(this.getInferredEdge(startEdge));
            backwardResult.setEndEdge(this.getInferredEdge(endEdge));
          }
        }
      }
    }
  }
  return paths;
}","private Set<InferredPath> computePaths(PathKey key){
  final InferredEdge currentEdge=key.getState().getInferredEdge();
  final Coordinate toCoord=key.getEndCoord();
  final Coordinate fromCoord=key.getStartCoord();
  final Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  final Set<Edge> startEdges=Sets.newHashSet();
  if (!currentEdge.isEmptyEdge()) {
    final PlainStreetEdgeWithOSMData edge=(PlainStreetEdgeWithOSMData)currentEdge.getEdge();
    for (    final Edge outgoing : edge.getTurnVertex().getOutgoing()) {
      startEdges.add(outgoing);
    }
  }
 else {
    final double stateStdDevDistance=1.98d * Math.sqrt(key.getState().getBelief().getCovariance().normFrobenius());
    for (    final Object obj : getNearbyEdges(fromCoord,stateStdDevDistance)) {
      final PlainStreetEdgeWithOSMData edge=(PlainStreetEdgeWithOSMData)obj;
      startEdges.addAll(edge.getTurnVertex().getOutgoing());
    }
  }
  final Set<Edge> endEdges=Sets.newHashSet();
  final double obsStdDevDistance=1.98d * Math.sqrt(key.getState().getMovementFilter().getObsVariance().normFrobenius());
  for (  final Object obj : getNearbyEdges(toCoord,obsStdDevDistance)) {
    final PlainStreetEdgeWithOSMData edge=(PlainStreetEdgeWithOSMData)obj;
    endEdges.addAll(edge.getTurnVertex().getOutgoing());
  }
  final double timeDiff=key.getState().getMovementFilter().getCurrentTimeDiff();
  final double distanceMax=MAX_DISTANCE_SPEED * timeDiff;
  for (  final Edge startEdge : startEdges) {
    final MultiDestinationAStar forwardAStar=new MultiDestinationAStar(turnGraph,endEdges,toCoord,obsStdDevDistance,startEdge,distanceMax);
    final ShortestPathTree spt1=forwardAStar.getSPT(false);
    final MultiDestinationAStar backwardAStar=new MultiDestinationAStar(turnGraph,endEdges,toCoord,obsStdDevDistance,startEdge,distanceMax);
    final ShortestPathTree spt2=backwardAStar.getSPT(true);
    for (    final Edge endEdge : endEdges) {
      final GraphPath forwardPath=spt1.getPath(endEdge.getToVertex(),false);
      if (forwardPath != null) {
        final InferredPath forwardResult=copyAStarResults(forwardPath,getBaseEdge(startEdge),false);
        if (forwardResult != null) {
          paths.add(forwardResult);
          forwardResult.setStartSearchEdge(this.getInferredEdge(startEdge));
          forwardResult.setEndSearchEdge(this.getInferredEdge(endEdge));
        }
      }
      if (backwardAStar != null) {
        final GraphPath backwardPath=spt2.getPath(endEdge.getFromVertex(),false);
        if (backwardPath != null) {
          final InferredPath backwardResult=copyAStarResults(backwardPath,startEdge,true);
          if (backwardResult != null) {
            paths.add(backwardResult);
            backwardResult.setStartSearchEdge(this.getInferredEdge(startEdge));
            backwardResult.setEndSearchEdge(this.getInferredEdge(endEdge));
          }
        }
      }
    }
  }
  return paths;
}",0.9958946288060212
189529,"/** 
 * This method samples a path, updates the belief to reflect that, and returns the path.
 * @param edgeTransDist
 * @param belief
 * @param startEdge
 * @param movementFilter
 * @return
 */
private InferredPath traverseEdge(EdgeTransitionDistributions edgeTransDist,final MultivariateGaussian belief,PathEdge startEdge,StandardRoadTrackingFilter movementFilter){
  rng.setSeed(this.localSeed);
  PathEdge currentEdge=startEdge;
  PathEdge previousEdge=null;
  final MultivariateGaussian newBelief=belief.clone();
  final List<PathEdge> currentPath=Lists.newArrayList();
  double distTraveled=0d;
  Double totalDistToTravel=null;
  while (totalDistToTravel == null || Math.abs(totalDistToTravel) > Math.abs(distTraveled)) {
    final List<InferredEdge> transferEdges=Lists.newArrayList();
    if (currentEdge.getInferredEdge() == InferredEdge.getEmptyEdge()) {
      final Vector projLocation=StandardRoadTrackingFilter.getOg().times(newBelief.getMean());
      for (      final StreetEdge edge : this.inferredGraph.getNearbyEdges(projLocation,movementFilter.getObservationErrorAbsRadius())) {
        transferEdges.add(this.inferredGraph.getInferredEdge(edge));
      }
    }
 else {
      if (totalDistToTravel == null) {
        transferEdges.add(startEdge.getInferredEdge());
      }
 else {
        if (newBelief.getMean().getElement(0) < 0d) {
          transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
        }
 else         if (newBelief.getMean().getElement(0) > 0d) {
          transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
        }
 else {
          transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
          transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
        }
        transferEdges.remove(currentEdge.getInferredEdge());
      }
    }
    final InferredEdge sampledEdge=edgeTransDist.sample(rng,transferEdges,currentEdge == null ? startEdge.getInferredEdge() : currentEdge.getInferredEdge());
    if (sampledEdge == InferredEdge.getEmptyEdge()) {
      if (totalDistToTravel == null) {
        movementFilter.predict(newBelief,PathEdge.getEmptyPathEdge(),startEdge);
      }
 else {
        StandardRoadTrackingFilter.convertToGroundBelief(newBelief,currentEdge,true);
      }
      currentEdge=PathEdge.getEmptyPathEdge();
      currentPath.add(PathEdge.getEmptyPathEdge());
      break;
    }
    double direction=newBelief.getMean().getElement(0) >= 0d ? 1d : -1d;
    final PathEdge sampledPathEdge=PathEdge.getEdge(sampledEdge,previousEdge == null || previousEdge.isEmptyEdge() ? 0d : direction * previousEdge.getInferredEdge().getLength() + previousEdge.getDistToStartOfEdge());
    if (sampledPathEdge == null) {
      newBelief.getMean().setElement(0,direction * currentEdge.getInferredEdge().getLength());
      newBelief.getMean().setElement(1,0d);
      break;
    }
    if (totalDistToTravel == null) {
      final PathEdge initialEdge=startEdge.isEmptyEdge() ? sampledPathEdge : startEdge;
      currentEdge=initialEdge;
      if (newBelief.getInputDimensionality() == 4) {
        StandardRoadTrackingFilter.convertToRoadBelief(newBelief,InferredPath.getInferredPath(initialEdge));
      }
      double previousLocation=newBelief.getMean().getElement(0);
      movementFilter.predict(newBelief,initialEdge,initialEdge);
      final Vector transStateSample=sampleMovementBelief(newBelief.getMean(),movementFilter);
      newBelief.setMean(transStateSample);
      final double newLocation=newBelief.getMean().getElement(0);
      final double L=initialEdge.getInferredEdge().getLength();
      if (Math.signum(newLocation) != Math.signum(previousLocation)) {
        if (newLocation < 0d) {
          previousLocation=-L + previousLocation;
        }
 else {
          previousLocation=L + previousLocation;
        }
      }
      totalDistToTravel=newBelief.getMean().getElement(0) - previousLocation;
      direction=totalDistToTravel >= 0d ? 1d : -1d;
      final double l=previousLocation < 0d ? L + previousLocation : previousLocation;
      final double r=totalDistToTravel >= 0d ? L - l : l;
      if (r < Math.abs(totalDistToTravel)) {
        distTraveled+=r * Math.signum(totalDistToTravel);
      }
 else {
        distTraveled+=totalDistToTravel;
      }
    }
 else {
      distTraveled+=direction * sampledPathEdge.getInferredEdge().getLength();
      currentEdge=sampledPathEdge;
    }
    previousEdge=currentEdge;
    currentPath.add(currentEdge);
  }
  assert(Iterables.getLast(currentPath).isEmptyEdge() || Iterables.getLast(currentPath).isOnEdge(newBelief.getMean().getElement(0)));
  belief.setMean(newBelief.getMean());
  belief.setCovariance(newBelief.getCovariance());
  return InferredPath.getInferredPath(currentPath,(totalDistToTravel != null && totalDistToTravel < 0d) ? true : false);
}","/** 
 * This method samples a path, updates the belief to reflect that, and returns the path.
 * @param edgeTransDist
 * @param belief
 * @param startEdge
 * @param movementFilter
 * @return
 */
private InferredPath traverseEdge(EdgeTransitionDistributions edgeTransDist,final MultivariateGaussian belief,PathEdge startEdge,StandardRoadTrackingFilter movementFilter){
  rng.setSeed(this.localSeed);
  PathEdge currentEdge=startEdge;
  PathEdge previousEdge=null;
  final MultivariateGaussian newBelief=belief.clone();
  final List<PathEdge> currentPath=Lists.newArrayList();
  double distTraveled=0d;
  Double totalDistToTravel=null;
  while (totalDistToTravel == null || Math.abs(totalDistToTravel) > Math.abs(distTraveled)) {
    final List<InferredEdge> transferEdges=Lists.newArrayList();
    if (currentEdge.getInferredEdge() == InferredEdge.getEmptyEdge()) {
      final Vector projLocation=StandardRoadTrackingFilter.getOg().times(newBelief.getMean());
      for (      final StreetEdge edge : this.inferredGraph.getNearbyEdges(projLocation,movementFilter.getObservationErrorAbsRadius())) {
        transferEdges.add(this.inferredGraph.getInferredEdge(edge));
      }
    }
 else {
      if (totalDistToTravel == null) {
        transferEdges.add(startEdge.getInferredEdge());
      }
 else {
        if (newBelief.getMean().getElement(0) < 0d) {
          transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
        }
 else         if (newBelief.getMean().getElement(0) > 0d) {
          transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
        }
 else {
          transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
          transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
        }
        transferEdges.remove(currentEdge.getInferredEdge());
      }
    }
    final InferredEdge sampledEdge=edgeTransDist.sample(rng,transferEdges,currentEdge == null ? startEdge.getInferredEdge() : currentEdge.getInferredEdge());
    if (sampledEdge == InferredEdge.getEmptyEdge()) {
      if (totalDistToTravel == null) {
        movementFilter.predict(newBelief,PathEdge.getEmptyPathEdge(),startEdge);
      }
 else {
        StandardRoadTrackingFilter.convertToGroundBelief(newBelief,currentEdge,true);
      }
      currentEdge=PathEdge.getEmptyPathEdge();
      currentPath.add(PathEdge.getEmptyPathEdge());
      break;
    }
    double direction=newBelief.getMean().getElement(0) >= 0d ? 1d : -1d;
    final PathEdge sampledPathEdge=PathEdge.getEdge(sampledEdge,previousEdge == null || previousEdge.isEmptyEdge() ? 0d : direction * previousEdge.getInferredEdge().getLength() + previousEdge.getDistToStartOfEdge());
    if (sampledPathEdge == null) {
      newBelief.getMean().setElement(0,direction * currentEdge.getInferredEdge().getLength());
      newBelief.getMean().setElement(1,0d);
      break;
    }
    if (totalDistToTravel == null) {
      final PathEdge initialEdge=startEdge.isEmptyEdge() ? sampledPathEdge : startEdge;
      currentEdge=initialEdge;
      if (newBelief.getInputDimensionality() == 4) {
        StandardRoadTrackingFilter.convertToRoadBelief(newBelief,InferredPath.getInferredPath(initialEdge));
      }
      double previousLocation=newBelief.getMean().getElement(0);
      movementFilter.predict(newBelief,initialEdge,initialEdge);
      final Vector transStateSample=sampleMovementBelief(newBelief.getMean(),movementFilter);
      newBelief.setMean(transStateSample);
      final double newLocation=newBelief.getMean().getElement(0);
      final double L=initialEdge.getInferredEdge().getLength();
      if (Math.signum(newLocation) != Math.signum(previousLocation)) {
        if (newLocation < 0d) {
          previousLocation=-L + previousLocation;
        }
 else {
          previousLocation=L + previousLocation;
        }
      }
      totalDistToTravel=newBelief.getMean().getElement(0) - previousLocation;
      direction=totalDistToTravel >= 0d ? 1d : -1d;
      final double l=previousLocation < 0d ? L + previousLocation : previousLocation;
      final double r=Math.abs(totalDistToTravel >= 0d ? L - l : l);
      if (r < Math.abs(totalDistToTravel)) {
        distTraveled+=r * Math.signum(totalDistToTravel);
      }
 else {
        distTraveled+=totalDistToTravel;
      }
    }
 else {
      distTraveled+=direction * sampledPathEdge.getInferredEdge().getLength();
      currentEdge=sampledPathEdge;
    }
    previousEdge=currentEdge;
    currentPath.add(currentEdge);
  }
  assert(Iterables.getLast(currentPath).isEmptyEdge() || Iterables.getLast(currentPath).isOnEdge(newBelief.getMean().getElement(0)));
  belief.setMean(newBelief.getMean());
  belief.setCovariance(newBelief.getCovariance());
  return InferredPath.getInferredPath(currentPath,(totalDistToTravel != null && totalDistToTravel < 0d) ? true : false);
}",0.9989800081599348
189530,"private VehicleState sampleState(VehicleState vehicleState,long time){
  vehicleState.getMovementFilter().setCurrentTimeDiff(this.simParameters.getFrequency());
  vehicleState.getBelief().clone();
  final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
  final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
  final PathEdge currentPathEdge=PathEdge.getEdge(vehicleState.getInferredEdge());
  this.localSeed=rng.nextLong();
  final InferredPath newPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
  final PathEdge newPathEdge=Iterables.getLast(newPath.getEdges());
  final Matrix gCov=vehicleState.getMovementFilter().getGroundFilter().getMeasurementCovariance();
  final Vector thisLoc=sampleObservation(currentLocBelief,gCov,newPathEdge);
  final Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
  Observation thisObs;
  try {
    thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
    return null;
  }
  final VehicleState newState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,newPath,vehicleState);
  instance.update(newState,thisObs,this.simParameters.isPerformInference());
  return newState;
}","private VehicleState sampleState(VehicleState vehicleState,long time){
  vehicleState.getMovementFilter().setCurrentTimeDiff(this.simParameters.getFrequency());
  final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
  final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
  final PathEdge currentPathEdge=PathEdge.getEdge(vehicleState.getInferredEdge());
  this.localSeed=rng.nextLong();
  final InferredPath newPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
  final PathEdge newPathEdge=Iterables.getLast(newPath.getEdges());
  final Matrix gCov=vehicleState.getMovementFilter().getGroundFilter().getMeasurementCovariance();
  final Vector thisLoc=sampleObservation(currentLocBelief,gCov,newPathEdge);
  final Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
  Observation thisObs;
  try {
    thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
    return null;
  }
  final VehicleState newState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,newPath,vehicleState);
  instance.update(newState,thisObs,this.simParameters.isPerformInference());
  return newState;
}",0.9870689655172412
189531,"public InferredPath(PathEdge edge){
  Preconditions.checkArgument(!edge.isEmptyEdge());
  this.edges=ImmutableList.of(edge);
  this.totalPathDistance=edge.getInferredEdge().getLength();
  this.isBackward=Boolean.FALSE;
}","public InferredPath(PathEdge edge){
  Preconditions.checkArgument(!edge.isEmptyEdge());
  this.edges=ImmutableList.of(edge);
  this.totalPathDistance=edge.getInferredEdge().getLength();
  this.isBackward=Boolean.FALSE;
  this.edgeIds.add(edge.getInferredEdge().getEdgeId());
}",0.8870967741935484
189532,"/** 
 * This method samples a path, updates the belief to reflect that, and returns the path.
 * @param edgeTransDist
 * @param belief
 * @param startEdge
 * @param movementFilter
 * @return
 */
private InferredPath traverseEdge(EdgeTransitionDistributions edgeTransDist,final MultivariateGaussian belief,PathEdge startEdge,StandardRoadTrackingFilter movementFilter){
  PathEdge currentEdge=startEdge;
  final List<PathEdge> currentPath=Lists.newArrayList();
  double distTraveled=0d;
  Double totalDistToTravel=null;
  while (totalDistToTravel == null || Math.abs(totalDistToTravel) >= Math.abs(currentEdge.getDistToStartOfEdge()) + currentEdge.getInferredEdge().getLength()) {
    final List<InferredEdge> transferEdges=Lists.newArrayList();
    if (currentEdge.getInferredEdge() == InferredEdge.getEmptyEdge()) {
      final Vector projLocation=StandardRoadTrackingFilter.getOg().times(belief.getMean());
      transferEdges.addAll(this.inferredGraph.getNearbyEdges(projLocation));
    }
 else {
      if (totalDistToTravel == null) {
        transferEdges.add(currentEdge.getInferredEdge());
      }
 else       if (belief.getMean().getElement(0) < 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
      }
 else       if (belief.getMean().getElement(0) > 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
 else {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
    }
    final InferredEdge sampledEdge=edgeTransDist.sample(rng,transferEdges,currentEdge.getInferredEdge());
    if (sampledEdge == InferredEdge.getEmptyEdge()) {
      movementFilter.predict(belief,PathEdge.getEmptyPathEdge(),currentEdge);
      if (currentPath.isEmpty()) {
        return InferredPath.getEmptyPath();
      }
 else {
        currentPath.add(PathEdge.getEmptyPathEdge());
        return InferredPath.getInferredPath(currentPath);
      }
    }
    final PathEdge sampledPathEdge=PathEdge.getEdge(sampledEdge,distTraveled);
    if (totalDistToTravel == null) {
      if (belief.getInputDimensionality() == 4) {
        StandardRoadTrackingFilter.invertProjection(belief,sampledPathEdge);
      }
      final double currentLoc=belief.getMean().getElement(0);
      movementFilter.predict(belief,sampledPathEdge,null);
      belief.getMean().setElement(0,belief.getMean().getElement(0) + currentLoc);
      final Vector transStateSample=sampleMovementBelief(belief.getMean(),movementFilter);
      belief.setMean(transStateSample);
      totalDistToTravel=belief.getMean().getElement(0);
    }
    final double direction=belief.getMean().getElement(0) >= 0d ? 1d : -1d;
    if (sampledPathEdge == null) {
      belief.getMean().setElement(0,direction * currentEdge.getInferredEdge().getLength());
      belief.getMean().setElement(1,0d);
      break;
    }
    distTraveled+=direction * sampledPathEdge.getInferredEdge().getLength();
    currentEdge=sampledPathEdge;
    currentPath.add(sampledPathEdge);
  }
  return InferredPath.getInferredPath(currentPath);
}","/** 
 * This method samples a path, updates the belief to reflect that, and returns the path.
 * @param edgeTransDist
 * @param belief
 * @param startEdge
 * @param movementFilter
 * @return
 */
private InferredPath traverseEdge(EdgeTransitionDistributions edgeTransDist,final MultivariateGaussian belief,PathEdge startEdge,StandardRoadTrackingFilter movementFilter){
  PathEdge currentEdge=startEdge;
  final List<PathEdge> currentPath=Lists.newArrayList();
  double distTraveled=0d;
  Double totalDistToTravel=null;
  while (totalDistToTravel == null || Math.abs(totalDistToTravel) >= Math.abs(currentEdge.getDistToStartOfEdge()) + currentEdge.getInferredEdge().getLength()) {
    final List<InferredEdge> transferEdges=Lists.newArrayList();
    if (currentEdge.getInferredEdge() == InferredEdge.getEmptyEdge()) {
      final Vector projLocation=StandardRoadTrackingFilter.getOg().times(belief.getMean());
      transferEdges.addAll(this.inferredGraph.getNearbyEdges(projLocation));
    }
 else {
      if (totalDistToTravel == null) {
        transferEdges.add(currentEdge.getInferredEdge());
      }
 else       if (belief.getMean().getElement(0) < 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
      }
 else       if (belief.getMean().getElement(0) > 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
 else {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
    }
    final InferredEdge sampledEdge=edgeTransDist.sample(rng,transferEdges,currentEdge.getInferredEdge());
    if (sampledEdge == InferredEdge.getEmptyEdge()) {
      movementFilter.predict(belief,PathEdge.getEmptyPathEdge(),currentEdge);
      if (currentPath.isEmpty()) {
        return InferredPath.getEmptyPath();
      }
 else {
        currentPath.add(PathEdge.getEmptyPathEdge());
        return InferredPath.getInferredPath(currentPath);
      }
    }
    double direction=belief.getMean().getElement(0) >= 0d ? 1d : -1d;
    final PathEdge sampledPathEdge=PathEdge.getEdge(sampledEdge,distTraveled);
    if (totalDistToTravel == null) {
      if (belief.getInputDimensionality() == 4) {
        StandardRoadTrackingFilter.invertProjection(belief,sampledPathEdge);
      }
      movementFilter.predict(belief,sampledPathEdge,null);
      final Vector transStateSample=sampleMovementBelief(belief.getMean(),movementFilter);
      belief.setMean(transStateSample);
      totalDistToTravel=belief.getMean().getElement(0);
      direction=belief.getMean().getElement(0) >= 0d ? 1d : -1d;
    }
    if (sampledPathEdge == null) {
      belief.getMean().setElement(0,direction * currentEdge.getInferredEdge().getLength());
      belief.getMean().setElement(1,0d);
      break;
    }
    distTraveled+=direction * sampledPathEdge.getInferredEdge().getLength();
    currentEdge=sampledPathEdge;
    currentPath.add(sampledPathEdge);
  }
  return InferredPath.getInferredPath(currentPath);
}",0.8941773758527686
189533,"public Vector sampleObservation(VehicleState vehicleState,PathEdge edge){
  final MultivariateGaussian gbelief=vehicleState.getBelief().clone();
  StandardRoadTrackingFilter.convertToGroundBelief(gbelief,edge);
  final Vector gMean=StandardRoadTrackingFilter.getOg().times(gbelief.getMean());
  final Matrix gCov=vehicleState.getMovementFilter().getGroundFilter().getMeasurementCovariance();
  final Matrix covSqrt=CholeskyDecompositionMTJ.create(DenseMatrixFactoryMTJ.INSTANCE.copyMatrix(gCov)).getR();
  final Vector thisStateSample=MultivariateGaussian.sample(gMean,covSqrt,rng);
  return thisStateSample;
}","public Vector sampleObservation(MultivariateGaussian velLocBelief,Matrix obsCov,PathEdge edge){
  final MultivariateGaussian gbelief=velLocBelief.clone();
  StandardRoadTrackingFilter.convertToGroundBelief(gbelief,edge);
  final Vector gMean=StandardRoadTrackingFilter.getOg().times(gbelief.getMean());
  final Matrix covSqrt=CholeskyDecompositionMTJ.create(DenseMatrixFactoryMTJ.INSTANCE.copyMatrix(obsCov)).getR();
  final Vector thisStateSample=MultivariateGaussian.sample(gMean,covSqrt,rng);
  return thisStateSample;
}",0.8278905560458959
189534,"private VehicleState sampleState(VehicleState vehicleState,long time){
  vehicleState.getMovementFilter().setCurrentTimeDiff(this.simParameters.getFrequency());
  final MultivariateGaussian previousLocBelief=vehicleState.getBelief().clone();
  final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
  final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
  final PathEdge currentPathEdge=PathEdge.getEdge(vehicleState.getInferredEdge());
  final InferredPath newPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
  final PathEdge newPathEdge=Iterables.getLast(newPath.getEdges());
  final Vector thisLoc=sampleObservation(vehicleState,newPathEdge);
  final Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
  Observation thisObs;
  try {
    thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
    return null;
  }
  final VehicleState newState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,newPathEdge,newPath,vehicleState);
  instance.update(newState,thisObs,this.simParameters.isPerformInference());
  return newState;
}","private VehicleState sampleState(VehicleState vehicleState,long time){
  vehicleState.getMovementFilter().setCurrentTimeDiff(this.simParameters.getFrequency());
  final MultivariateGaussian previousLocBelief=vehicleState.getBelief().clone();
  final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
  final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
  final PathEdge currentPathEdge=PathEdge.getEdge(vehicleState.getInferredEdge());
  final InferredPath newPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
  final PathEdge newPathEdge=Iterables.getLast(newPath.getEdges());
  final Matrix gCov=vehicleState.getMovementFilter().getGroundFilter().getMeasurementCovariance();
  final Vector thisLoc=sampleObservation(currentLocBelief,gCov,newPathEdge);
  final Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
  Observation thisObs;
  try {
    thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
  }
 catch (  final TimeOrderException e) {
    e.printStackTrace();
    return null;
  }
  final VehicleState newState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,newPathEdge,newPath,vehicleState);
  instance.update(newState,thisObs,this.simParameters.isPerformInference());
  return newState;
}",0.9521739130434784
189535,"/** 
 * Get the snapped location in projected/euclidean coordinates for the given obsPoint (in lat/lon).
 * @param obsPoint
 * @return
 */
public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.y,obsPoint.x);
  final LinearLocation here=posLocationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=posLocationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  final Coordinate projPointOnLine=GeoUtils.convertToEuclidean(revOnLine);
  return VectorFactory.getDefault().createVector2D(projPointOnLine.x,projPointOnLine.y);
}","/** 
 * Get the snapped location in projected/euclidean coordinates for the given obsPoint (in lat/lon).
 * @param obsPoint
 * @return
 */
public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.y,obsPoint.x);
  final LinearLocation here=locationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  final Coordinate projPointOnLine=GeoUtils.convertToEuclidean(revOnLine);
  return VectorFactory.getDefault().createVector2D(projPointOnLine.x,projPointOnLine.y);
}",0.992816091954023
189536,"public Coordinate getCenterPointCoord(){
  return this.posGeometry.getCentroid().getCoordinate();
}","public Coordinate getCenterPointCoord(){
  return this.geometry.getCentroid().getCoordinate();
}",0.9743589743589745
189537,"public Coordinate getCoordOnEdge(Vector obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.getElement(1),obsPoint.getElement(0));
  final LinearLocation here=posLocationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=posLocationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  return revOnLine;
}","public Coordinate getCoordOnEdge(Vector obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.getElement(1),obsPoint.getElement(0));
  final LinearLocation here=locationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  return revOnLine;
}",0.988558352402746
189538,"public InferredEdge(Edge edge,Integer edgeId,OtpGraph graph){
  if (edge instanceof TurnEdge || edge == null) {
    System.out.println(""String_Node_Str"");
  }
  this.graph=graph;
  this.edgeId=edgeId;
  this.edge=edge;
  this.posGeometry=edge.getGeometry();
  this.negGeometry=edge.getGeometry().reverse();
  this.posLocationIndexedLine=new LocationIndexedLine(posGeometry);
  this.posLengthIndexedLine=new LengthIndexedLine(posGeometry);
  this.posLengthLocationMap=new LengthLocationMap(posGeometry);
  this.negLocationIndexedLine=new LocationIndexedLine(negGeometry);
  this.negLengthIndexedLine=new LengthIndexedLine(negGeometry);
  this.negLengthLocationMap=new LengthLocationMap(negGeometry);
  this.startVertex=edge.getFromVertex();
  this.endVertex=edge.getToVertex();
  final Coordinate startPoint=this.posLocationIndexedLine.extractPoint(this.posLocationIndexedLine.getStartIndex());
  final Coordinate startPointCoord=GeoUtils.convertToEuclidean(new Coordinate(startPoint.y,startPoint.x));
  this.startPoint=VectorFactory.getDefault().createVector2D(startPointCoord.x,startPointCoord.y);
  final Coordinate endPoint=this.posLocationIndexedLine.extractPoint(this.posLocationIndexedLine.getEndIndex());
  final Coordinate endPointCoord=GeoUtils.convertToEuclidean(new Coordinate(endPoint.y,endPoint.x));
  this.endPoint=VectorFactory.getDefault().createVector2D(endPointCoord.x,endPointCoord.y);
  this.length=GeoUtils.getAngleDegreesInMeters(posGeometry.getLength());
  this.velocityPrecisionDist=new NormalInverseGammaDistribution(4.4d,1d / Math.pow(30d,2d),1d / Math.pow(30d,2d) + 1d,Math.pow(30d,2d));
  this.velocityEstimator=new UnivariateGaussianMeanVarianceBayesianEstimator(velocityPrecisionDist);
}","public InferredEdge(Edge edge,Integer edgeId,OtpGraph graph){
  if (edge instanceof TurnEdge || edge == null) {
    System.out.println(""String_Node_Str"");
  }
  this.graph=graph;
  this.edgeId=edgeId;
  this.edge=edge;
  this.geometry=edge.getGeometry();
  this.locationIndexedLine=new LocationIndexedLine(geometry);
  this.lengthIndexedLine=new LengthIndexedLine(geometry);
  this.lengthLocationMap=new LengthLocationMap(geometry);
  this.startVertex=edge.getFromVertex();
  this.endVertex=edge.getToVertex();
  final Coordinate startPoint=this.locationIndexedLine.extractPoint(this.locationIndexedLine.getStartIndex());
  final Coordinate startPointCoord=GeoUtils.convertToEuclidean(new Coordinate(startPoint.y,startPoint.x));
  this.startPoint=VectorFactory.getDefault().createVector2D(startPointCoord.x,startPointCoord.y);
  final Coordinate endPoint=this.locationIndexedLine.extractPoint(this.locationIndexedLine.getEndIndex());
  final Coordinate endPointCoord=GeoUtils.convertToEuclidean(new Coordinate(endPoint.y,endPoint.x));
  this.endPoint=VectorFactory.getDefault().createVector2D(endPointCoord.x,endPointCoord.y);
  this.length=GeoUtils.getAngleDegreesInMeters(geometry.getLength());
  this.velocityPrecisionDist=new NormalInverseGammaDistribution(4.4d,1d / Math.pow(30d,2d),1d / Math.pow(30d,2d) + 1d,Math.pow(30d,2d));
  this.velocityEstimator=new UnivariateGaussianMeanVarianceBayesianEstimator(velocityPrecisionDist);
}",0.7383444338725024
189539,"/** 
 * Returns the lineSegment in the geometry of the edge and the distance to the start of the segment on the entire path.
 * @param edge
 * @param distanceAlong
 * @return
 */
public static Entry<LineSegment,Double> getSegmentAndDistanceToStart(PathEdge edge,double distanceAlong){
  final boolean isNegative=distanceAlong < 0d;
  final Geometry geometry;
  final LengthIndexedLine lengthIdxLine;
  if (isNegative) {
    geometry=edge.getInferredEdge().getNegGeometry();
    lengthIdxLine=edge.getInferredEdge().getNegLengthIndexedLine();
  }
 else {
    geometry=edge.getInferredEdge().getPosGeometry();
    lengthIdxLine=edge.getInferredEdge().getPosLengthIndexedLine();
  }
  final double distAlongGeometry=Math.abs(distanceAlong - edge.getDistToStartOfEdge());
  final LinearLocation lineLocation=LengthLocationMap.getLocation(geometry,GeoUtils.getMetersInAngleDegrees(distAlongGeometry));
  final LineSegment lineSegment=lineLocation.getSegment(geometry);
  final double distanceToStartOfSegmentOnGeometry=GeoUtils.getAngleDegreesInMeters(lengthIdxLine.indexOf(lineSegment.p0));
  final double distanceToStartOfSegmentOnPath=distanceToStartOfSegmentOnGeometry + Math.abs(edge.getDistToStartOfEdge());
  return Maps.immutableEntry(lineSegment,distanceToStartOfSegmentOnPath);
}","/** 
 * Returns the lineSegment in the geometry of the edge and the distance-to-start of the segment on the entire path. The line segment is in the direction of the edge's geometry, and the distance-to-start has the same sign as the direction of movement.
 * @param edge
 * @param distanceAlong
 * @return
 */
public static Entry<LineSegment,Double> getSegmentAndDistanceToStart(PathEdge edge,double distanceAlong){
  final Geometry geometry=edge.getInferredEdge().getGeometry();
  final LengthIndexedLine lengthIdxLine=edge.getInferredEdge().getLengthIndexedLine();
  final double direction=distanceAlong >= 0d ? 1d : -1d;
  final double distAlongGeometry=distanceAlong - edge.getDistToStartOfEdge();
  final LinearLocation lineLocation=LengthLocationMap.getLocation(geometry,GeoUtils.getMetersInAngleDegrees(distAlongGeometry));
  final LineSegment lineSegment=lineLocation.getSegment(geometry);
  final Coordinate startOfSegmentCoord=direction < 0d ? lineSegment.p1 : lineSegment.p0;
  final double positiveDistToStartOfSegmentOnGeometry=lengthIdxLine.indexOf(startOfSegmentCoord);
  double distanceToStartOfSegmentOnPath;
  if (direction < 0d) {
    distanceToStartOfSegmentOnPath=geometry.getLength() - positiveDistToStartOfSegmentOnGeometry;
  }
 else {
    distanceToStartOfSegmentOnPath=positiveDistToStartOfSegmentOnGeometry;
  }
  distanceToStartOfSegmentOnPath=GeoUtils.getAngleDegreesInMeters(distanceToStartOfSegmentOnPath) + edge.getDistToStartOfEdge();
  return Maps.immutableEntry(lineSegment,distanceToStartOfSegmentOnPath);
}",0.5751680226388397
189540,"public static void convertToRoadBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 2)   return;
  Preconditions.checkArgument(!edge.isEmptyEdge());
  final Vector m=belief.getMean().clone();
  final Matrix C=belief.getCovariance().clone();
  final Coordinate latlonCurrentPos=GeoUtils.convertToLatLon(Og.times(m));
  final LinearLocation lineLocation=edge.getInferredEdge().getPosLocationIndexedLine().project(GeoUtils.reverseCoordinates(latlonCurrentPos));
  final LineSegment lineSegment=lineLocation.getSegment(edge.getInferredEdge().getPosGeometry());
  final double distanceToStartOfSegmentOnGeometry=GeoUtils.getAngleDegreesInMeters(edge.getInferredEdge().getPosLengthIndexedLine().indexOf(lineSegment.p0));
  final double distanceToStartOfSegmentOnPath=distanceToStartOfSegmentOnGeometry + edge.getDistToStartOfEdge();
  final Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(lineSegment,distanceToStartOfSegmentOnPath);
  final Vector projMean=projPair.getKey().transpose().times(m.minus(projPair.getValue()));
  final Matrix projCov=projPair.getKey().transpose().times(C).times(projPair.getKey());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}","public static void convertToRoadBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 2)   return;
  Preconditions.checkArgument(!edge.isEmptyEdge());
  final Vector m=belief.getMean().clone();
  final Matrix C=belief.getCovariance().clone();
  final Coordinate latlonCurrentPos=GeoUtils.convertToLatLon(Og.times(m));
  final LinearLocation lineLocation=edge.getInferredEdge().getLocationIndexedLine().project(GeoUtils.reverseCoordinates(latlonCurrentPos));
  final LineSegment lineSegment=lineLocation.getSegment(edge.getInferredEdge().getGeometry());
  final double distanceToStartOfSegmentOnGeometry=GeoUtils.getAngleDegreesInMeters(edge.getInferredEdge().getLengthIndexedLine().indexOf(lineSegment.p0));
  final double distanceToStartOfSegmentOnPath=distanceToStartOfSegmentOnGeometry + edge.getDistToStartOfEdge();
  final Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(lineSegment,distanceToStartOfSegmentOnPath);
  final Vector projMean=projPair.getKey().transpose().times(m.minus(projPair.getValue()));
  final Matrix projCov=projPair.getKey().transpose().times(C).times(projPair.getKey());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}",0.8113137327874953
189541,"public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(!edge.isEmptyEdge());
  final Entry<LineSegment,Double> segmentDist=getSegmentAndDistanceToStart(edge,belief.getMean().getElement(0));
  final Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(segmentDist.getKey(),segmentDist.getValue());
  final double totalPathDistanceToEdge=Math.abs(edge.getDistToStartOfEdge()) + edge.getInferredEdge().getLength();
  final Vector positiveMean;
  if (belief.getMean().getElement(0) < 0d) {
    final Vector posMeanTmp=belief.getMean().clone();
    final double distance=totalPathDistanceToEdge + belief.getMean().getElement(0);
    posMeanTmp.setElement(0,distance);
    positiveMean=posMeanTmp;
  }
 else {
    positiveMean=belief.getMean();
  }
  if (positiveMean.getElement(0) > totalPathDistanceToEdge) {
    positiveMean.setElement(0,totalPathDistanceToEdge);
  }
 else   if (positiveMean.getElement(0) < Math.abs(edge.getDistToStartOfEdge())) {
    positiveMean.setElement(0,Math.abs(edge.getDistToStartOfEdge()));
  }
  final Matrix C=belief.getCovariance();
  final Vector projMean=projPair.getKey().times(positiveMean).plus(projPair.getValue());
  final Matrix projCov=projPair.getKey().times(C).times(projPair.getKey().transpose());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}","public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(!edge.isEmptyEdge());
  final Entry<LineSegment,Double> segmentDist=getSegmentAndDistanceToStart(edge,belief.getMean().getElement(0));
  final double absTotalPathDistanceToStartOfSegment=Math.abs(segmentDist.getValue());
  final double absTotalPathDistanceToEndOfSegment=absTotalPathDistanceToStartOfSegment + GeoUtils.getAngleDegreesInMeters(segmentDist.getKey().getLength());
  final Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(segmentDist.getKey(),absTotalPathDistanceToStartOfSegment);
  final Vector positiveMean;
  if (belief.getMean().getElement(0) < 0d) {
    final Vector posMeanTmp=belief.getMean().clone();
    final double distance=Math.abs(edge.getDistToStartOfEdge()) + edge.getInferredEdge().getLength() + belief.getMean().getElement(0);
    posMeanTmp.setElement(0,distance);
    positiveMean=posMeanTmp;
  }
 else {
    positiveMean=belief.getMean();
  }
  if (positiveMean.getElement(0) > absTotalPathDistanceToEndOfSegment) {
    positiveMean.setElement(0,absTotalPathDistanceToEndOfSegment);
  }
 else   if (positiveMean.getElement(0) < absTotalPathDistanceToStartOfSegment) {
    positiveMean.setElement(0,absTotalPathDistanceToStartOfSegment);
  }
  final Matrix C=belief.getCovariance();
  final Vector projMean=projPair.getKey().times(positiveMean).plus(projPair.getValue());
  final Matrix projCov=projPair.getKey().times(C).times(projPair.getKey().transpose());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}",0.7157958320749018
189542,"@SuppressWarnings(""String_Node_Str"") public FilterInformation(InferredPath path,Collection<InferredPathEntry> evaluatedPaths,DataDistribution<VehicleState> resampleDist){
  this.path=path;
  this.evaluatedPaths=(Collection<InferredPathEntry>)Objects.firstNonNull(evaluatedPaths,Collections.emptyList());
  this.resampleDist=resampleDist;
}","@SuppressWarnings(""String_Node_Str"") public FilterInformation(Collection<InferredPathEntry> evaluatedPaths,DataDistribution<VehicleState> resampleDist){
  this.evaluatedPaths=(Collection<InferredPathEntry>)Objects.firstNonNull(evaluatedPaths,Collections.emptyList());
  this.resampleDist=resampleDist;
}",0.9439252336448598
189543,"public InferredEdge getInferredEdge(Edge edge){
  InferredEdge edgeInfo=edgeToInfo.get(edge);
  final Integer edgeId=graph.getIdForEdge(edge);
  if (edgeInfo == null) {
    edgeInfo=new InferredEdge(edge,edgeId,this);
    edgeToInfo.put(edge,edgeInfo);
  }
  return edgeInfo;
}","public InferredEdge getInferredEdge(Edge edge){
  VertexPair key=new VertexPair(edge.getFromVertex(),edge.getToVertex());
  InferredEdge edgeInfo=edgeToInfo.get(key);
  final Integer edgeId=graph.getIdForEdge(edge);
  if (edgeInfo == null) {
    edgeInfo=new InferredEdge(edge,edgeId,this);
    edgeToInfo.put(key,edgeInfo);
  }
  return edgeInfo;
}",0.7476038338658147
189544,"public InferredEdge getEdge(int id){
  final Edge edge=graph.getEdgeById(id);
  InferredEdge edgeInfo=edgeToInfo.get(edge);
  if (edgeInfo == null) {
    edgeInfo=new InferredEdge(edge,id,this);
    edgeToInfo.put(edge,edgeInfo);
  }
  return edgeInfo;
}","public InferredEdge getEdge(int id){
  final Edge edge=graph.getEdgeById(id);
  VertexPair key=new VertexPair(edge.getFromVertex(),edge.getToVertex());
  InferredEdge edgeInfo=edgeToInfo.get(key);
  if (edgeInfo == null) {
    edgeInfo=new InferredEdge(edge,id,this);
    edgeToInfo.put(key,edgeInfo);
  }
  return edgeInfo;
}",0.7275862068965517
189545,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((endCoord == null) ? 0 : endCoord.hashCode());
  result=prime * result + ((startCoord == null) ? 0 : startCoord.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((endVertex == null) ? 0 : endVertex.hashCode());
  result=prime * result + ((startVertex == null) ? 0 : startVertex.hashCode());
  return result;
}",0.6049382716049383
189546,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final PathKey other=(PathKey)obj;
  if (endCoord == null) {
    if (other.endCoord != null) {
      return false;
    }
  }
 else   if (!endCoord.equals(other.endCoord)) {
    return false;
  }
  if (startCoord == null) {
    if (other.startCoord != null) {
      return false;
    }
  }
 else   if (!startCoord.equals(other.startCoord)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  VertexPair other=(VertexPair)obj;
  if (endVertex == null) {
    if (other.endVertex != null) {
      return false;
    }
  }
 else   if (!endVertex.equals(other.endVertex)) {
    return false;
  }
  if (startVertex == null) {
    if (other.startVertex != null) {
      return false;
    }
  }
 else   if (!startVertex.equals(other.startVertex)) {
    return false;
  }
  return true;
}",0.524390243902439
189547,"@Override public String toString(){
  return ""String_Node_Str"" + edgeId + ""String_Node_Str""+ endPoint+ ""String_Node_Str""+ startPoint+ ""String_Node_Str""+ length+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + edgeId + ""String_Node_Str""+ length+ ""String_Node_Str"";
}",0.8013245033112583
189548,"/** 
 * XXX: the state must have a prior predictive mean.
 * @param obs
 * @param state
 * @return
 */
public InferredPathEntry getPredictiveLogLikelihood(Observation obs,VehicleState state){
  final MultivariateGaussian beliefPrediction=state.getBelief();
  final StandardRoadTrackingFilter filter=state.getMovementFilter();
  PathEdge prevEdge=PathEdge.getEdge(state.getInferredEdge());
  double pathLogLik=Double.NEGATIVE_INFINITY;
  final Map<PathEdge,DefaultWeightedValue<MultivariateGaussian>> edgeToPredictiveBeliefAndLogLikelihood=Maps.newHashMap();
  for (  final PathEdge edge : this.getEdges()) {
    final MultivariateGaussian edgeBelief=beliefPrediction.clone();
    if (edge == PathEdge.getEmptyPathEdge()) {
      filter.predict(edgeBelief,edge,prevEdge);
    }
 else {
      edge.predict(edgeBelief);
    }
    double localLogLik=state.getEdgeTransitionDist().predictiveLogLikelihood(prevEdge.getInferredEdge(),edge.getInferredEdge());
    localLogLik+=filter.logLikelihood(obs.getProjectedPoint(),edgeBelief,edge);
    Preconditions.checkArgument(!Double.isNaN(localLogLik));
    edgeToPredictiveBeliefAndLogLikelihood.put(edge,new DefaultWeightedValue<MultivariateGaussian>(edgeBelief.clone(),localLogLik));
    pathLogLik=LogMath.add(pathLogLik,localLogLik);
    prevEdge=edge;
  }
  return new InferredPathEntry(this,edgeToPredictiveBeliefAndLogLikelihood,filter,pathLogLik);
}","/** 
 * XXX: the state must have a prior predictive mean.
 * @param obs
 * @param state
 * @return
 */
public InferredPathEntry getPredictiveLogLikelihood(Observation obs,VehicleState state){
  final MultivariateGaussian beliefPrediction=state.getBelief();
  final StandardRoadTrackingFilter filter=state.getMovementFilter();
  PathEdge prevEdge=PathEdge.getEdge(state.getInferredEdge());
  double pathLogLik=Double.NEGATIVE_INFINITY;
  final Map<PathEdge,DefaultWeightedValue<MultivariateGaussian>> edgeToPredictiveBeliefAndLogLikelihood=Maps.newHashMap();
  for (  final PathEdge edge : this.getEdges()) {
    final MultivariateGaussian edgeBelief=beliefPrediction.clone();
    final double edgePredMarginalLogLik;
    if (edge == PathEdge.getEmptyPathEdge()) {
      filter.predict(edgeBelief,edge,prevEdge);
      edgePredMarginalLogLik=Double.NEGATIVE_INFINITY;
    }
 else {
      edge.predict(edgeBelief,obs);
      edgePredMarginalLogLik=edge.marginalPredictiveLogLikelihood(beliefPrediction);
    }
    final double edgePredTransLogLik=state.getEdgeTransitionDist().predictiveLogLikelihood(prevEdge.getInferredEdge(),edge.getInferredEdge());
    final double localPosVelPredLogLik=filter.logLikelihood(obs.getProjectedPoint(),edgeBelief,edge);
    final double localLogLik=edgePredMarginalLogLik + edgePredTransLogLik + localPosVelPredLogLik;
    Preconditions.checkArgument(!Double.isNaN(localLogLik));
    edgeToPredictiveBeliefAndLogLikelihood.put(edge,new DefaultWeightedValue<MultivariateGaussian>(edgeBelief.clone(),localLogLik));
    pathLogLik=LogMath.add(pathLogLik,localLogLik);
    prevEdge=edge;
  }
  return new InferredPathEntry(this,edgeToPredictiveBeliefAndLogLikelihood,filter,pathLogLik);
}",0.8471419396274887
189549,"@Override public String toString(){
  return ""String_Node_Str"" + edges + ""String_Node_Str""+ totalPathDistance+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + edgeIds + ""String_Node_Str""+ totalPathDistance+ ""String_Node_Str"";
}",0.9924242424242424
189550,"/** 
 * This method truncates the given belief over the interval defined by this edge.
 * @param belief
 */
public void predict(MultivariateGaussian belief){
  StandardRoadTrackingFilter.convertToRoadBelief(belief,this);
  final Matrix Or=StandardRoadTrackingFilter.getOr();
  final double S=Or.times(belief.getCovariance()).times(Or.transpose()).getElement(0,0) + Math.pow(edge.getLength() / Math.sqrt(12),2);
  final Matrix W=belief.getCovariance().times(Or.transpose()).scale(1 / S);
  final Matrix R=belief.getCovariance().minus(W.times(W.transpose()).scale(S));
  final double mean=(distToStartOfEdge + edge.getLength()) / 2d;
  final double e=mean - Or.times(belief.getMean()).getElement(0);
  final Vector a=belief.getMean().plus(W.getColumn(0).scale(e));
  belief.setMean(a);
  belief.setCovariance(R);
}","/** 
 * This method truncates the given belief over the interval defined by this edge.
 * @param belief
 */
public void predict(MultivariateGaussian belief,Observation obs){
  StandardRoadTrackingFilter.convertToRoadBelief(belief,this);
  final Matrix Or=StandardRoadTrackingFilter.getOr();
  final double S=Or.times(belief.getCovariance()).times(Or.transpose()).getElement(0,0) + Math.pow(edge.getLength() / Math.sqrt(12),2);
  final Matrix W=belief.getCovariance().times(Or.transpose()).scale(1 / S);
  final Matrix R=belief.getCovariance().minus(W.times(W.transpose()).scale(S));
  final boolean isPositive=belief.getMean().getElement(0) >= 0d;
  final double mean=(distToStartOfEdge + (isPositive ? 1d : -1d) * edge.getLength()) / 2d;
  final double e=mean - Or.times(belief.getMean()).getElement(0);
  final Vector a=belief.getMean().plus(W.getColumn(0).scale(e));
  belief.setMean(a);
  belief.setCovariance(R);
}",0.9381860196418256
189551,"public double marginalPredictiveLogLikelihood(MultivariateGaussian beliefPrediction,double direction){
  Preconditions.checkArgument(beliefPrediction.getInputDimensionality() == 2);
  final Matrix Or=StandardRoadTrackingFilter.getOr();
  final double variance=Math.sqrt(Or.times(beliefPrediction.getCovariance()).times(Or.transpose()).getElement(0,0));
  final double mean=Or.times(beliefPrediction.getMean()).getElement(0);
  final double endDist=direction * edge.getLength() + this.distToStartOfEdge;
  final double result=UnivariateGaussian.CDF.evaluate(endDist,mean,variance) - UnivariateGaussian.CDF.evaluate(this.distToStartOfEdge,mean,variance);
  return Math.log(result);
}","public double marginalPredictiveLogLikelihood(MultivariateGaussian beliefPrediction,double direction){
  Preconditions.checkArgument(beliefPrediction.getInputDimensionality() == 2);
  final Matrix Or=StandardRoadTrackingFilter.getOr();
  final double variance=Or.times(beliefPrediction.getCovariance()).times(Or.transpose()).getElement(0,0);
  final double mean=Or.times(beliefPrediction.getMean()).getElement(0);
  final double endDist=direction * edge.getLength() + this.distToStartOfEdge;
  final double result=UnivariateGaussian.CDF.evaluate(endDist,mean,variance) - UnivariateGaussian.CDF.evaluate(this.distToStartOfEdge,mean,variance);
  return Math.log(result);
}",0.9918578830495928
189552,"private Set<InferredPath> computePaths(PathKey key){
  final InferredEdge currentEdge=key.getState().getInferredEdge();
  final Coordinate toCoord=GeoUtils.reverseCoordinates(key.getEndCoord());
  final Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  final Set<Edge> startEdges=Sets.newHashSet();
  final double stateStdDevDistance=1.98d * Math.sqrt(key.getState().getBelief().getCovariance().normFrobenius());
  if (!currentEdge.isEmptyEdge()) {
    startEdges.add(currentEdge.getEdge());
  }
 else {
    final Coordinate fromCoord=GeoUtils.reverseCoordinates(key.getStartCoord());
    final Envelope fromEnv=new Envelope(fromCoord);
    fromEnv.expandBy(GeoUtils.getMetersInAngleDegrees(stateStdDevDistance));
    for (    final Object obj : this.narratedGraph.getEdgeIndex().query(fromEnv)) {
      final Edge edge=(Edge)obj;
      startEdges.add(edge);
    }
  }
  final Set<Edge> endEdges=Sets.newHashSet();
  final Envelope toEnv=new Envelope(toCoord);
  final double obsStdDevDistance=1.98d * Math.sqrt(key.getState().getMovementFilter().getObsVariance().normFrobenius());
  toEnv.expandBy(GeoUtils.getMetersInAngleDegrees(obsStdDevDistance));
  for (  final Object obj : this.narratedGraph.getEdgeIndex().query(toEnv)) {
    final Edge edge=(Edge)obj;
    endEdges.add(edge);
  }
  final List<Edge> endEdgeList=Lists.newArrayList(endEdges);
  for (  final Edge startEdge : startEdges) {
    final MultiDestinationAStar forwardAStar=new MultiDestinationAStar(this.graph,endEdgeList,toCoord,obsStdDevDistance,startEdge);
    final MultiDestinationAStar backwardAStar=new MultiDestinationAStar(this.graph,endEdgeList,toCoord,obsStdDevDistance,startEdge);
    final ShortestPathTree spt1=forwardAStar.getSPT(false);
    final ShortestPathTree spt2=backwardAStar.getSPT(true);
    for (    final Edge endEdge : endEdgeList) {
      final GraphPath forwardPath=spt1.getPath(endEdge.getToVertex(),false);
      if (forwardPath != null) {
        final InferredPath forwardResult=copyAStarResults(forwardPath,startEdge,false);
        if (forwardResult != null) {
          paths.add(forwardResult);
          forwardResult.setStartEdge(this.getInferredEdge(startEdge));
          forwardResult.setEndEdge(this.getInferredEdge(endEdge));
        }
      }
      final GraphPath backwardPath=spt2.getPath(endEdge.getFromVertex(),false);
      if (backwardPath != null) {
        final InferredPath backwardResult=copyAStarResults(backwardPath,startEdge,true);
        if (backwardResult != null) {
          paths.add(backwardResult);
          backwardResult.setStartEdge(this.getInferredEdge(startEdge));
          backwardResult.setEndEdge(this.getInferredEdge(endEdge));
        }
      }
    }
  }
  return paths;
}","private Set<InferredPath> computePaths(PathKey key){
  final InferredEdge currentEdge=key.getState().getInferredEdge();
  final Coordinate toCoord=GeoUtils.reverseCoordinates(key.getEndCoord());
  final Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  final Set<Edge> startEdges=Sets.newHashSet();
  final double stateStdDevDistance=1.98d * Math.sqrt(key.getState().getBelief().getCovariance().normFrobenius());
  if (!currentEdge.isEmptyEdge()) {
    startEdges.add(currentEdge.getEdge());
  }
 else {
    final Coordinate fromCoord=GeoUtils.reverseCoordinates(key.getStartCoord());
    final Envelope fromEnv=new Envelope(fromCoord);
    fromEnv.expandBy(GeoUtils.getMetersInAngleDegrees(stateStdDevDistance));
    for (    final Object obj : this.narratedGraph.getEdgeIndex().query(fromEnv)) {
      final Edge edge=(Edge)obj;
      startEdges.add(edge);
    }
  }
  final Set<Edge> endEdges=Sets.newHashSet();
  final Envelope toEnv=new Envelope(toCoord);
  final double obsStdDevDistance=1.98d * Math.sqrt(key.getState().getMovementFilter().getObsVariance().normFrobenius());
  toEnv.expandBy(GeoUtils.getMetersInAngleDegrees(obsStdDevDistance));
  final RoutingRequest options=new RoutingRequest(TraverseMode.CAR);
  for (  final Object obj : this.narratedGraph.getEdgeIndex().query(toEnv)) {
    final Edge edge=(Edge)obj;
    if (((StreetEdge)edge).canTraverse(options)) {
      endEdges.add(edge);
    }
  }
  for (  final Edge startEdge : startEdges) {
    final MultiDestinationAStar forwardAStar=new MultiDestinationAStar(this.graph,endEdges,toCoord,obsStdDevDistance,startEdge);
    final MultiDestinationAStar backwardAStar=new MultiDestinationAStar(this.graph,endEdges,toCoord,obsStdDevDistance,startEdge);
    final ShortestPathTree spt1=forwardAStar.getSPT(false);
    final ShortestPathTree spt2=backwardAStar.getSPT(true);
    for (    final Edge endEdge : endEdges) {
      final GraphPath forwardPath=spt1.getPath(endEdge.getToVertex(),false);
      if (forwardPath != null) {
        final InferredPath forwardResult=copyAStarResults(forwardPath,startEdge,false);
        if (forwardResult != null) {
          paths.add(forwardResult);
          forwardResult.setStartEdge(this.getInferredEdge(startEdge));
          forwardResult.setEndEdge(this.getInferredEdge(endEdge));
        }
      }
      final GraphPath backwardPath=spt2.getPath(endEdge.getFromVertex(),false);
      if (backwardPath != null) {
        final InferredPath backwardResult=copyAStarResults(backwardPath,startEdge,true);
        if (backwardResult != null) {
          paths.add(backwardResult);
          backwardResult.setStartEdge(this.getInferredEdge(startEdge));
          backwardResult.setEndEdge(this.getInferredEdge(endEdge));
        }
      }
    }
  }
  return paths;
}",0.918109668109668
189553,"public MultiDestinationAStar(Graph graph,List<Edge> end,Coordinate center,double radius,Edge start){
  this.graph=graph;
  this.end=end;
  this.center=center;
  this.radius=radius;
  this.start=start;
}","public MultiDestinationAStar(Graph graph,Set<Edge> endEdges,Coordinate center,double radius,Edge start){
  this.graph=graph;
  this.end=new HashSet<Edge>(endEdges);
  this.center=center;
  this.radius=radius;
  this.start=start;
}",0.9074074074074074
189554,"public ShortestPathTree getSPT(boolean arriveBy){
  final GenericAStar astar=new GenericAStar();
  astar.setSearchTerminationStrategy(this);
  astar.setSkipTraverseResultStrategy(this);
  final RoutingRequest req=new RoutingRequest();
  req.setArriveBy(arriveBy);
  final Vertex startVertex=arriveBy ? start.getToVertex() : start.getFromVertex();
  final String bogusName=""String_Node_Str"" + Thread.currentThread().getId();
  final Vertex bogus=new IntersectionVertex(graph,bogusName,startVertex.getCoordinate(),bogusName);
  if (!arriveBy) {
    req.setRoutingContext(graph,startVertex,bogus);
  }
 else {
    req.setRoutingContext(graph,bogus,startVertex);
  }
  req.rctx.remainingWeightHeuristic=this;
  final ShortestPathTree result=astar.getShortestPathTree(req);
  graph.removeVertex(bogus);
  req.cleanup();
  return result;
}","public ShortestPathTree getSPT(boolean arriveBy){
  final GenericAStar astar=new GenericAStar();
  astar.setSearchTerminationStrategy(this);
  astar.setSkipTraverseResultStrategy(this);
  astar.setTraverseVisitor(this);
  final RoutingRequest req=new RoutingRequest(TraverseMode.CAR);
  req.setArriveBy(arriveBy);
  final Vertex startVertex=arriveBy ? start.getToVertex() : start.getFromVertex();
  final String bogusName=""String_Node_Str"" + Thread.currentThread().getId();
  final Vertex bogus=new IntersectionVertex(graph,bogusName,startVertex.getCoordinate(),bogusName);
  if (!arriveBy) {
    req.setRoutingContext(graph,startVertex,bogus);
  }
 else {
    req.setRoutingContext(graph,bogus,startVertex);
  }
  req.rctx.remainingWeightHeuristic=this;
  final ShortestPathTree result=astar.getShortestPathTree(req);
  graph.removeVertex(bogus);
  req.cleanup();
  return result;
}",0.9708624708624708
189555,"@Override public double computeForwardWeight(State s,Vertex target){
  final Vertex v=s.getVertex();
  final double distance=DistanceLibrary.fastDistance(v.getCoordinate(),center) - radius;
  return distance / MAX_SPEED;
}","@Override public double computeForwardWeight(State s,Vertex target){
  final Vertex v=s.getVertex();
  double distance=DistanceLibrary.fastDistance(v.getCoordinate(),center) - radius;
  if (distance < 0)   distance=0;
  return distance / MAX_SPEED;
}",0.9152542372881356
189556,"@Override public boolean shouldSearchContinue(Vertex origin,Vertex target,State current,ShortestPathTree spt,RoutingRequest traverseOptions){
  end.remove(current.getBackEdge());
  return end.size() != 0;
}","@Override public boolean shouldSearchContinue(Vertex origin,Vertex target,State current,ShortestPathTree spt,RoutingRequest traverseOptions){
  return end.size() != 0;
}",0.9013333333333332
189557,"@SuppressWarnings(""String_Node_Str"") public FilterInformation(Collection<InferredPathEntry> evaluatedPaths,DataDistribution<VehicleState> resampleDist){
  this.evaluatedPaths=(Collection<InferredPathEntry>)Objects.firstNonNull(evaluatedPaths,Collections.emptyList());
  this.resampleDist=resampleDist;
}","@SuppressWarnings(""String_Node_Str"") public FilterInformation(Set<InferredPath> evaluatedPaths,DataDistribution<VehicleState> resampleDist){
  this.evaluatedPaths=(Set<InferredPath>)Objects.firstNonNull(evaluatedPaths,Collections.emptySet());
  this.resampleDist=resampleDist;
}",0.9294320137693632
189558,"public Collection<InferredPathEntry> getEvaluatedPaths(){
  return evaluatedPaths;
}","public Set<InferredPath> getEvaluatedPaths(){
  return evaluatedPaths;
}",0.9102564102564102
189559,"private Set<InferredPath> computePaths(PathKey key){
  final InferredEdge currentEdge=key.getState().getInferredEdge();
  final Coordinate toCoord=GeoUtils.reverseCoordinates(key.getEndCoord());
  final Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  final Set<Edge> startEdges=Sets.newHashSet();
  final double stateStdDevDistance=1.98d * Math.sqrt(key.getState().getBelief().getCovariance().normFrobenius());
  if (!currentEdge.isEmptyEdge()) {
    startEdges.add(currentEdge.getEdge());
  }
 else {
    final Coordinate fromCoord=GeoUtils.reverseCoordinates(key.getStartCoord());
    final Envelope fromEnv=new Envelope(fromCoord);
    fromEnv.expandBy(GeoUtils.getMetersInAngleDegrees(stateStdDevDistance));
    for (    final Object obj : this.pathSampler.getEdgeIndex().query(fromEnv)) {
      final Edge edge=(Edge)obj;
      startEdges.add(edge);
    }
  }
  final Set<Edge> endEdges=Sets.newHashSet();
  final Envelope toEnv=new Envelope(toCoord);
  final double obsStdDevDistance=1.98d * Math.sqrt(key.getState().getMovementFilter().getObsVariance().normFrobenius());
  toEnv.expandBy(GeoUtils.getMetersInAngleDegrees(obsStdDevDistance));
  for (  final Object obj : this.pathSampler.getEdgeIndex().query(toEnv)) {
    final Edge edge=(Edge)obj;
    endEdges.add(edge);
  }
  final List<Edge> endEdgeList=Lists.newArrayList(endEdges);
  for (  final Edge startEdge : startEdges) {
    final MultiDestinationAStar aStar=new MultiDestinationAStar(this.graph,endEdgeList,toCoord,obsStdDevDistance,startEdge);
    final ShortestPathTree spt1=aStar.getSPT(false);
    final ShortestPathTree spt2=aStar.getSPT(true);
    for (    final Edge endEdge : endEdgeList) {
      final GraphPath forwardPath=spt1.getPath(endEdge.getFromVertex(),false);
      if (forwardPath != null) {
        final InferredPath forwardResult=copyAStarResults(forwardPath,false);
        if (forwardResult != null)         paths.add(forwardResult);
      }
      final GraphPath backwardPath=spt2.getPath(endEdge.getFromVertex(),false);
      if (backwardPath != null) {
        final InferredPath backwardResult=copyAStarResults(backwardPath,true);
        if (backwardResult != null)         paths.add(backwardResult);
      }
    }
  }
  return paths;
}","private Set<InferredPath> computePaths(PathKey key){
  final InferredEdge currentEdge=key.getState().getInferredEdge();
  final Coordinate toCoord=GeoUtils.reverseCoordinates(key.getEndCoord());
  final Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  final Set<Edge> startEdges=Sets.newHashSet();
  final double stateStdDevDistance=1.98d * Math.sqrt(key.getState().getBelief().getCovariance().normFrobenius());
  if (!currentEdge.isEmptyEdge()) {
    startEdges.add(currentEdge.getEdge());
  }
 else {
    final Coordinate fromCoord=GeoUtils.reverseCoordinates(key.getStartCoord());
    final Envelope fromEnv=new Envelope(fromCoord);
    fromEnv.expandBy(GeoUtils.getMetersInAngleDegrees(stateStdDevDistance));
    for (    final Object obj : this.pathSampler.getEdgeIndex().query(fromEnv)) {
      final Edge edge=(Edge)obj;
      startEdges.add(edge);
    }
  }
  final Set<Edge> endEdges=Sets.newHashSet();
  final Envelope toEnv=new Envelope(toCoord);
  final double obsStdDevDistance=1.98d * Math.sqrt(key.getState().getMovementFilter().getObsVariance().normFrobenius());
  toEnv.expandBy(GeoUtils.getMetersInAngleDegrees(obsStdDevDistance));
  for (  final Object obj : this.pathSampler.getEdgeIndex().query(toEnv)) {
    final Edge edge=(Edge)obj;
    endEdges.add(edge);
  }
  final List<Edge> endEdgeList=Lists.newArrayList(endEdges);
  for (  final Edge startEdge : startEdges) {
    final MultiDestinationAStar forwardAStar=new MultiDestinationAStar(this.graph,endEdgeList,toCoord,obsStdDevDistance,startEdge);
    final MultiDestinationAStar backwardAStar=new MultiDestinationAStar(this.graph,endEdgeList,toCoord,obsStdDevDistance,startEdge);
    final ShortestPathTree spt1=forwardAStar.getSPT(false);
    final ShortestPathTree spt2=backwardAStar.getSPT(true);
    for (    final Edge endEdge : endEdgeList) {
      final GraphPath forwardPath=spt1.getPath(endEdge.getToVertex(),false);
      if (forwardPath != null) {
        final InferredPath forwardResult=copyAStarResults(forwardPath,startEdge,false);
        if (forwardResult != null)         paths.add(forwardResult);
      }
      final GraphPath backwardPath=spt2.getPath(endEdge.getToVertex(),false);
      if (backwardPath != null) {
        final InferredPath backwardResult=copyAStarResults(backwardPath,startEdge,true);
        if (backwardResult != null)         paths.add(backwardResult);
      }
    }
  }
  return paths;
}",0.7303346834363675
189560,"private InferredPath copyAStarResults(GraphPath gpath,boolean isReverse){
  final double direction=isReverse ? -1d : 1d;
  double pathDist=0d;
  final List<PathEdge> path=Lists.newArrayList();
  for (  final Edge pathEdge : isReverse ? Lists.reverse(gpath.edges) : gpath.edges) {
    if (OtpGraph.isStreetEdge(pathEdge) && pathEdge.getGeometry() != null && pathEdge.getDistance() > 0d && graph.getIdForEdge(pathEdge) != null && !pathEdge.equals(Iterables.getLast(path,null))) {
      path.add(PathEdge.getEdge(this.getInferredEdge(pathEdge),pathDist));
      pathDist+=direction * pathEdge.getDistance();
    }
 else     if (pathEdge.getFromVertex() != null && !pathEdge.getFromVertex().getOutgoingStreetEdges().isEmpty()) {
      for (      final Edge streetEdge : pathEdge.getFromVertex().getOutgoingStreetEdges()) {
        if (streetEdge.getGeometry() != null && !streetEdge.equals(Iterables.getLast(path,null)) && streetEdge.getDistance() > 0d && graph.getIdForEdge(streetEdge) != null) {
          path.add(PathEdge.getEdge(this.getInferredEdge(streetEdge.getFromVertex().getOutgoingStreetEdges().get(0)),pathDist));
          pathDist+=direction * streetEdge.getDistance();
          break;
        }
      }
    }
  }
  if (!path.isEmpty())   return InferredPath.getInferredPath(path);
 else   return null;
}","private InferredPath copyAStarResults(GraphPath gpath,Edge startEdge,boolean isReverse){
  final double direction=isReverse ? -1d : 1d;
  double pathDist=0d;
  final List<PathEdge> path=Lists.newArrayList();
  final PathEdge startPathEdge=PathEdge.getEdge(this.getInferredEdge(startEdge));
  if (gpath.edges.isEmpty()) {
    path.add(startPathEdge);
  }
 else {
    for (    final Edge edge : isReverse ? Lists.reverse(gpath.edges) : gpath.edges) {
      PathEdge pathEdge=getValidPathEdge(edge,pathDist,direction,path);
      pathDist+=direction * pathEdge.getInferredEdge().getLength();
      path.add(pathEdge);
    }
  }
  if (!path.isEmpty())   return InferredPath.getInferredPath(path);
 else   return null;
}",0.3220088626292466
189561,"/** 
 * XXX: the state must have a prior predictive mean.
 * @param obs
 * @param state
 * @return
 */
public InferredPathEntry getPredictiveLogLikelihood(Observation obs,VehicleState state){
  final MultivariateGaussian beliefPrediction=state.getBelief().clone();
  final StandardRoadTrackingFilter filter=state.getMovementFilter();
  PathEdge prevEdge=PathEdge.getEdge(state.getInferredEdge());
  double pathLogLik=Double.NEGATIVE_INFINITY;
  final Map<PathEdge,DefaultWeightedValue<MultivariateGaussian>> edgeToPredictiveBeliefAndLogLikelihood=Maps.newHashMap();
  for (  final PathEdge edge : this.getEdges()) {
    final MultivariateGaussian edgeBelief=beliefPrediction.clone();
    final double edgePredMarginalLogLik;
    if (edge.isEmptyEdge()) {
      filter.predict(edgeBelief,edge,prevEdge);
      edgePredMarginalLogLik=0d;
    }
 else {
      edge.predict(edgeBelief,obs);
      edgePredMarginalLogLik=edge.marginalPredictiveLogLikelihood(beliefPrediction);
    }
    final double edgePredTransLogLik=state.getEdgeTransitionDist().predictiveLogLikelihood(prevEdge.getInferredEdge(),edge.getInferredEdge());
    final double localPosVelPredLogLik=filter.logLikelihood(obs.getProjectedPoint(),edgeBelief,edge);
    final double localLogLik=edgePredMarginalLogLik + edgePredTransLogLik + localPosVelPredLogLik;
    Preconditions.checkArgument(!Double.isNaN(localLogLik));
    edgeToPredictiveBeliefAndLogLikelihood.put(edge,new DefaultWeightedValue<MultivariateGaussian>(edgeBelief.clone(),localLogLik));
    pathLogLik=LogMath.add(pathLogLik,localLogLik);
    prevEdge=edge;
  }
  return new InferredPathEntry(this,edgeToPredictiveBeliefAndLogLikelihood,filter,pathLogLik);
}","/** 
 * XXX: the state must have a prior predictive mean.
 * @param obs
 * @param state
 * @return
 */
public InferredPathEntry getPredictiveLogLikelihood(Observation obs,VehicleState state){
  final MultivariateGaussian beliefPrediction=state.getBelief().clone();
  final StandardRoadTrackingFilter filter=state.getMovementFilter();
  filter.predict(beliefPrediction,this.getEdges().get(0),PathEdge.getEdge(state.getInferredEdge()));
  PathEdge prevEdge=PathEdge.getEdge(state.getInferredEdge());
  double pathLogLik=Double.NEGATIVE_INFINITY;
  final Map<PathEdge,DefaultWeightedValue<MultivariateGaussian>> edgeToPredictiveBeliefAndLogLikelihood=Maps.newHashMap();
  for (  final PathEdge edge : this.getEdges()) {
    final MultivariateGaussian edgeBelief=beliefPrediction.clone();
    final double edgePredMarginalLogLik;
    if (edge.isEmptyEdge()) {
      filter.predict(edgeBelief,edge,prevEdge);
      edgePredMarginalLogLik=0d;
    }
 else {
      edge.predict(edgeBelief,obs);
      edgePredMarginalLogLik=edge.marginalPredictiveLogLikelihood(beliefPrediction);
    }
    final double edgePredTransLogLik=state.getEdgeTransitionDist().predictiveLogLikelihood(prevEdge.getInferredEdge(),edge.getInferredEdge());
    final double localPosVelPredLogLik=filter.logLikelihood(obs.getProjectedPoint(),edgeBelief,edge);
    final double localLogLik=edgePredMarginalLogLik + edgePredTransLogLik + localPosVelPredLogLik;
    Preconditions.checkArgument(!Double.isNaN(localLogLik));
    edgeToPredictiveBeliefAndLogLikelihood.put(edge,new DefaultWeightedValue<MultivariateGaussian>(edgeBelief.clone(),localLogLik));
    pathLogLik=LogMath.add(pathLogLik,localLogLik);
    prevEdge=edge;
  }
  return new InferredPathEntry(this,beliefPrediction,edgeToPredictiveBeliefAndLogLikelihood,filter,pathLogLik);
}",0.966189111747851
189562,"public InferredPathEntry(InferredPath path,Map<PathEdge,DefaultWeightedValue<MultivariateGaussian>> edgeToPredictiveBeliefAndLogLikelihood,StandardRoadTrackingFilter filter,double totalLogLikelihood){
  this.totalLogLikelihood=totalLogLikelihood;
  this.path=path;
  this.filter=filter;
  this.edgeToPredictiveBelief=edgeToPredictiveBeliefAndLogLikelihood;
}","public InferredPathEntry(InferredPath path,MultivariateGaussian beliefPrediction,Map<PathEdge,DefaultWeightedValue<MultivariateGaussian>> edgeToPredictiveBeliefAndLogLikelihood,StandardRoadTrackingFilter filter,double totalLogLikelihood){
  this.beliefPrediction=beliefPrediction;
  this.totalLogLikelihood=totalLogLikelihood;
  this.path=path;
  this.filter=filter;
  this.edgeToPredictiveBelief=edgeToPredictiveBeliefAndLogLikelihood;
}",0.8994974874371859
189563,"ShortestPathTree getSPT(boolean arriveBy){
  final GenericAStar astar=new GenericAStar();
  astar.setSearchTerminationStrategy(this);
  astar.setSkipTraverseResultStrategy(this);
  final RoutingRequest req=new RoutingRequest();
  final Vertex bogus=new IntersectionVertex(graph,""String_Node_Str"",start.getFromVertex().getCoordinate(),""String_Node_Str"");
  req.setRoutingContext(graph,start.getFromVertex(),bogus);
  req.rctx.remainingWeightHeuristic=this;
  req.setArriveBy(arriveBy);
  return astar.getShortestPathTree(req);
}","ShortestPathTree getSPT(boolean arriveBy){
  final GenericAStar astar=new GenericAStar();
  astar.setSearchTerminationStrategy(this);
  astar.setSkipTraverseResultStrategy(this);
  final RoutingRequest req=new RoutingRequest();
  final Vertex startVertex=arriveBy ? start.getToVertex() : start.getFromVertex();
  final String bogusName=""String_Node_Str"" + System.nanoTime();
  final Vertex bogus=new IntersectionVertex(graph,bogusName,startVertex.getCoordinate(),bogusName);
  req.setRoutingContext(graph,startVertex,bogus);
  req.rctx.remainingWeightHeuristic=this;
  req.setArriveBy(arriveBy);
  final ShortestPathTree result=astar.getShortestPathTree(req);
  req.cleanup();
  return result;
}",0.6104746317512275
189564,"@Override public boolean shouldSearchContinue(Vertex origin,Vertex target,State current,ShortestPathTree spt,RoutingRequest traverseOptions){
  if (end.remove(current.getBackEdge())) {
    return end.size() == 0;
  }
  return false;
}","@Override public boolean shouldSearchContinue(Vertex origin,Vertex target,State current,ShortestPathTree spt,RoutingRequest traverseOptions){
  end.remove(current.getBackEdge());
  return end.size() != 0;
}",0.9272727272727272
189565,"/** 
 * Note: this skips observations with a time delta of zero or less.
 */
@Override public void update(DataDistribution<VehicleState> target,Observation obs){
  final double timeDiff=prevTime == 0 ? 0 : (obs.getTimestamp().getTime() - prevTime) / 1000;
  prevTime=obs.getTimestamp().getTime();
  if (timeDiff <= 0)   return;
  final Multimap<VehicleState,DefaultWeightedValue<InferredPathEntry>> stateToPaths=HashMultimap.create();
  final Set<InferredPathEntry> evaluatedPaths=Sets.newHashSet();
  final List<DefaultWeightedValue<VehicleState>> resampler=Lists.newArrayList();
  for (  final VehicleState state : target.getDomain()) {
    state.getMovementFilter().predict(state.getBelief(),PathEdge.getEdge(state.getInferredEdge()),PathEdge.getEdge(state.getInferredEdge(),0d));
    final Set<InferredPath> instStateTransitions=inferredGraph.getPaths(state,obs.getObsCoords());
    state.getMovementFilter().setCurrentTimeDiff(timeDiff);
    double totalLogLik=Double.NEGATIVE_INFINITY;
    for (    final InferredPath path : instStateTransitions) {
      final InferredPathEntry infPath=path.getPredictiveLogLikelihood(obs,state);
      if (isDebug)       evaluatedPaths.add(infPath);
      totalLogLik=LogMath.add(totalLogLik,infPath.getTotalLogLikelihood());
      stateToPaths.put(state,new DefaultWeightedValue<InferredPathEntry>(infPath,infPath.getTotalLogLikelihood()));
    }
    resampler.add(new DefaultWeightedValue<VehicleState>(state,totalLogLik));
  }
  final Random rng=getRandom();
  final DataDistribution<VehicleState> resampleDist=StatisticsUtil.getLogNormalizedDistribution(resampler);
  @SuppressWarnings(""String_Node_Str"") final ArrayList<? extends VehicleState> smoothedStates=resampleDist.sample(rng,getNumParticles());
  target.clear();
  if (isDebug)   this.filterInfo.put(obs,new FilterInformation(evaluatedPaths,resampleDist));
  for (  final VehicleState state : smoothedStates) {
    final VehicleState newState=state.clone();
    final DataDistribution<InferredPathEntry> instStateDist=StatisticsUtil.getLogNormalizedDistribution(Lists.newArrayList(stateToPaths.get(newState)));
    final InferredPathEntry sampledPathEntry=instStateDist.sample(rng);
    final PathEdge sampledEdge;
    if (sampledPathEntry.getPath().getEdges().size() > 1) {
      final DataDistribution<PathEdge> pathEdgeDist=StatisticsUtil.getLogNormalizedDistribution(sampledPathEntry.getEdgeToPredictiveBelief());
      sampledEdge=pathEdgeDist.sample(rng);
    }
 else {
      sampledEdge=sampledPathEntry.getPath().getEdges().get(0);
    }
    final MultivariateGaussian sampledBelief=sampledPathEntry.getEdgeToPredictiveBelief().get(sampledEdge).getValue().clone();
    final StandardRoadTrackingFilter updatedFilter=sampledPathEntry.getFilter().clone();
    updatedFilter.measure(sampledBelief,obs.getProjectedPoint(),sampledEdge);
    InferredEdge prevEdge=sampledPathEntry.getPath().getEdges().get(0).getInferredEdge();
    final EdgeTransitionDistributions updatedEdgeTransDist=newState.getEdgeTransitionDist().clone();
    for (    final PathEdge edge : sampledPathEntry.getPath().getEdges()) {
      if (prevEdge != null)       updatedEdgeTransDist.update(prevEdge,edge.getInferredEdge());
      if (!edge.isEmptyEdge()) {
        edge.getInferredEdge().getVelocityEstimator().update(edge.getInferredEdge().getVelocityPrecisionDist(),sampledBelief.getMean().getElement(1));
      }
      prevEdge=edge.getInferredEdge();
    }
    final VehicleState newTransState=new VehicleState(this.inferredGraph,obs,updatedFilter,sampledBelief,updatedEdgeTransDist,sampledEdge,sampledPathEntry.getPath(),state);
    target.set(newTransState,1d / smoothedStates.size());
  }
}","/** 
 * Note: this skips observations with a time delta of zero or less.
 */
@Override public void update(DataDistribution<VehicleState> target,Observation obs){
  final double timeDiff=prevTime == 0 ? 0 : (obs.getTimestamp().getTime() - prevTime) / 1000;
  prevTime=obs.getTimestamp().getTime();
  if (timeDiff <= 0)   return;
  final Multimap<VehicleState,DefaultWeightedValue<InferredPathEntry>> stateToPaths=HashMultimap.create();
  final Set<InferredPath> evaluatedPaths=Sets.newHashSet();
  final List<DefaultWeightedValue<VehicleState>> resampler=Lists.newArrayList();
  for (  final VehicleState state : target.getDomain()) {
    final Set<InferredPath> instStateTransitions=inferredGraph.getPaths(state,obs.getObsCoords());
    state.getMovementFilter().setCurrentTimeDiff(timeDiff);
    double totalLogLik=Double.NEGATIVE_INFINITY;
    for (    final InferredPath path : instStateTransitions) {
      final InferredPathEntry infPath=path.getPredictiveLogLikelihood(obs,state);
      if (isDebug)       evaluatedPaths.add(path);
      totalLogLik=LogMath.add(totalLogLik,infPath.getTotalLogLikelihood());
      stateToPaths.put(state,new DefaultWeightedValue<InferredPathEntry>(infPath,infPath.getTotalLogLikelihood()));
    }
    resampler.add(new DefaultWeightedValue<VehicleState>(state,totalLogLik));
  }
  final Random rng=getRandom();
  final DataDistribution<VehicleState> resampleDist=StatisticsUtil.getLogNormalizedDistribution(resampler);
  @SuppressWarnings(""String_Node_Str"") final ArrayList<? extends VehicleState> smoothedStates=resampleDist.sample(rng,getNumParticles());
  target.clear();
  if (isDebug)   this.filterInfo.put(obs,new FilterInformation(evaluatedPaths,resampleDist));
  for (  final VehicleState state : smoothedStates) {
    final VehicleState newState=state.clone();
    final DataDistribution<InferredPathEntry> instStateDist=StatisticsUtil.getLogNormalizedDistribution(Lists.newArrayList(stateToPaths.get(newState)));
    final InferredPathEntry sampledPathEntry=instStateDist.sample(rng);
    final PathEdge sampledEdge;
    if (sampledPathEntry.getPath().getEdges().size() > 1) {
      final DataDistribution<PathEdge> pathEdgeDist=StatisticsUtil.getLogNormalizedDistribution(sampledPathEntry.getEdgeToPredictiveBelief());
      sampledEdge=pathEdgeDist.sample(rng);
    }
 else {
      sampledEdge=sampledPathEntry.getPath().getEdges().get(0);
    }
    final MultivariateGaussian sampledBelief=sampledPathEntry.getEdgeToPredictiveBelief().get(sampledEdge).getValue().clone();
    final StandardRoadTrackingFilter updatedFilter=sampledPathEntry.getFilter().clone();
    updatedFilter.measure(sampledBelief,obs.getProjectedPoint(),sampledEdge);
    InferredEdge prevEdge=sampledPathEntry.getPath().getEdges().get(0).getInferredEdge();
    final EdgeTransitionDistributions updatedEdgeTransDist=newState.getEdgeTransitionDist().clone();
    for (    final PathEdge edge : sampledPathEntry.getPath().getEdges()) {
      if (prevEdge != null)       updatedEdgeTransDist.update(prevEdge,edge.getInferredEdge());
      if (!edge.isEmptyEdge()) {
        edge.getInferredEdge().getVelocityEstimator().update(edge.getInferredEdge().getVelocityPrecisionDist(),sampledBelief.getMean().getElement(1));
      }
      prevEdge=edge.getInferredEdge();
    }
    final VehicleState newTransState=new VehicleState(this.inferredGraph,obs,updatedFilter,sampledBelief,updatedEdgeTransDist,sampledEdge,sampledPathEntry.getPath(),state);
    target.set(newTransState,1d / smoothedStates.size());
  }
}",0.9784931316775356
189566,"@Override public DataDistribution<VehicleState> createInitialLearnedObject(){
  final DataDistribution<VehicleState> dist=super.createInitialLearnedObject();
  if (isDebug) {
    final Set<InferredPathEntry> evaledPaths=Sets.newHashSet();
    for (    final VehicleState state : dist.getDomain()) {
      evaledPaths.add(new InferredPathEntry(state.getPath(),Collections.<PathEdge,DefaultWeightedValue<MultivariateGaussian>>emptyMap(),state.getMovementFilter(),Double.NaN));
    }
    this.filterInfo.put(initialObservation,new FilterInformation(evaledPaths,dist));
  }
  return dist;
}","@Override public DataDistribution<VehicleState> createInitialLearnedObject(){
  final DataDistribution<VehicleState> dist=super.createInitialLearnedObject();
  if (isDebug) {
    final Set<InferredPath> evaledPaths=Sets.newHashSet();
    for (    final VehicleState state : dist.getDomain()) {
      evaledPaths.add(state.getPath());
    }
    this.filterInfo.put(initialObservation,new FilterInformation(evaledPaths,dist));
  }
  return dist;
}",0.6653734238603298
189567,"@Override public DataDistribution<VehicleState> createInitialParticles(int numParticles){
  final StandardRoadTrackingFilter trackingFilter=new StandardRoadTrackingFilter(parameters.getObsVariance(),parameters.getOffRoadStateVariance(),parameters.getOnRoadStateVariance());
  final MultivariateGaussian initialBelief=trackingFilter.createInitialLearnedObject();
  final Vector xyPoint=initialObservation.getProjectedPoint();
  initialBelief.setMean(VectorFactory.getDefault().copyArray(new double[]{xyPoint.getElement(0),0d,xyPoint.getElement(1),0d}));
  final List<StreetEdge> initialEdges=inferredGraph.getNearbyEdges(initialBelief,trackingFilter);
  final DataDistribution<VehicleState> initialDist=new DefaultDataDistribution<VehicleState>(numParticles);
  final Set<InferredPathEntry> evaluatedPaths=Sets.newHashSet();
  if (!initialEdges.isEmpty()) {
    for (    final Edge nativeEdge : initialEdges) {
      final InferredEdge edge=inferredGraph.getInferredEdge(nativeEdge);
      final PathEdge pathEdge=PathEdge.getEdge(edge,0d);
      final InferredPath path=InferredPath.getInferredPath(pathEdge);
      evaluatedPaths.add(new InferredPathEntry(path,null,null,Double.NEGATIVE_INFINITY));
      final VehicleState state=new VehicleState(this.inferredGraph,initialObservation,pathEdge.getInferredEdge(),parameters);
      final VehicleStateConditionalParams edgeLoc=new VehicleStateConditionalParams(pathEdge,initialObservation.getProjectedPoint());
      final double lik=state.getProbabilityFunction().evaluate(edgeLoc);
      initialDist.increment(state,lik);
    }
  }
  final VehicleState state=new VehicleState(this.inferredGraph,initialObservation,InferredEdge.getEmptyEdge(),parameters);
  final double lik=state.getProbabilityFunction().evaluate(new VehicleStateConditionalParams(initialObservation.getProjectedPoint()));
  initialDist.increment(state,lik);
  final DataDistribution<VehicleState> retDist=new DefaultDataDistribution<VehicleState>(initialDist.sample(threadRandom.get(),numParticles));
  return retDist;
}","@Override public DataDistribution<VehicleState> createInitialParticles(int numParticles){
  final StandardRoadTrackingFilter trackingFilter=new StandardRoadTrackingFilter(parameters.getObsVariance(),parameters.getOffRoadStateVariance(),parameters.getOnRoadStateVariance());
  final MultivariateGaussian initialBelief=trackingFilter.createInitialLearnedObject();
  final Vector xyPoint=initialObservation.getProjectedPoint();
  initialBelief.setMean(VectorFactory.getDefault().copyArray(new double[]{xyPoint.getElement(0),0d,xyPoint.getElement(1),0d}));
  final List<StreetEdge> initialEdges=inferredGraph.getNearbyEdges(initialBelief,trackingFilter);
  final DataDistribution<VehicleState> initialDist=new DefaultDataDistribution<VehicleState>(numParticles);
  final Set<InferredPathEntry> evaluatedPaths=Sets.newHashSet();
  if (!initialEdges.isEmpty()) {
    for (    final Edge nativeEdge : initialEdges) {
      final InferredEdge edge=inferredGraph.getInferredEdge(nativeEdge);
      final PathEdge pathEdge=PathEdge.getEdge(edge,0d);
      final InferredPath path=InferredPath.getInferredPath(pathEdge);
      evaluatedPaths.add(new InferredPathEntry(path,null,null,null,Double.NEGATIVE_INFINITY));
      final VehicleState state=new VehicleState(this.inferredGraph,initialObservation,pathEdge.getInferredEdge(),parameters);
      final VehicleStateConditionalParams edgeLoc=new VehicleStateConditionalParams(pathEdge,initialObservation.getProjectedPoint());
      final double lik=state.getProbabilityFunction().evaluate(edgeLoc);
      initialDist.increment(state,lik);
    }
  }
  final VehicleState state=new VehicleState(this.inferredGraph,initialObservation,InferredEdge.getEmptyEdge(),parameters);
  final double lik=state.getProbabilityFunction().evaluate(new VehicleStateConditionalParams(initialObservation.getProjectedPoint()));
  initialDist.increment(state,lik);
  final DataDistribution<VehicleState> retDist=new DefaultDataDistribution<VehicleState>(initialDist.sample(threadRandom.get(),numParticles));
  return retDist;
}",0.9987754102375704
189568,"public static boolean isStreetEdge(Edge pathEdge){
  if (!(pathEdge instanceof TurnEdge || pathEdge instanceof OutEdge || pathEdge instanceof PlainStreetEdge))   return true;
 else   return false;
}","public static boolean isStreetEdge(Edge pathEdge){
  if (!(pathEdge instanceof TurnEdge || pathEdge instanceof OutEdge || pathEdge instanceof PlainStreetEdge))   return false;
 else   return true;
}",0.9646464646464646
189569,"private Set<InferredPath> computePaths(PathKey key){
  Coordinate fromCoord=GeoUtils.getLonLat(key.getStartCoord());
  Coordinate toCoord=GeoUtils.getLonLat(key.getEndCoord());
  Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  Builder<PathEdge> path=ImmutableList.builder();
  final CoordinateSequence movementSeq=JTSFactoryFinder.getGeometryFactory().getCoordinateSequenceFactory().create(new Coordinate[]{fromCoord,toCoord});
  final Geometry movementGeometry=JTSFactoryFinder.getGeometryFactory().createLineString(movementSeq);
  final List<Edge> minimumConnectingEdges=Objects.firstNonNull(narratedGraph.getStreetMatcher().match(movementGeometry),ImmutableList.<Edge>of());
  if (!minimumConnectingEdges.isEmpty()) {
    double pathDist=0d;
    for (    Edge pathEdge : minimumConnectingEdges) {
      path.add(PathEdge.getEdge(this.getInferredEdge(pathEdge),pathDist));
      pathDist+=pathEdge.getDistance();
    }
    paths.add(new InferredPath(path.build(),pathDist));
  }
  return paths;
}","private Set<InferredPath> computePaths(PathKey key){
  Coordinate fromCoord=GeoUtils.reverseCoordinates(key.getStartCoord());
  Coordinate toCoord=GeoUtils.reverseCoordinates(key.getEndCoord());
  Set<InferredPath> paths=Sets.newHashSet(InferredPath.getEmptyPath());
  Builder<PathEdge> path=ImmutableList.builder();
  final CoordinateSequence movementSeq=JTSFactoryFinder.getGeometryFactory().getCoordinateSequenceFactory().create(new Coordinate[]{fromCoord,toCoord});
  final Geometry movementGeometry=JTSFactoryFinder.getGeometryFactory().createLineString(movementSeq);
  final List<Edge> minimumConnectingEdges=Objects.firstNonNull(narratedGraph.getStreetMatcher().match(movementGeometry),ImmutableList.<Edge>of());
  if (!minimumConnectingEdges.isEmpty()) {
    double pathDist=0d;
    for (    Edge pathEdge : minimumConnectingEdges) {
      path.add(PathEdge.getEdge(this.getInferredEdge(pathEdge),pathDist));
      pathDist+=pathEdge.getDistance();
    }
    paths.add(new InferredPath(path.build(),pathDist));
  }
  return paths;
}",0.973811833171678
189570,"/** 
 * Get the snapped location in projected/euclidean coordinates for the  given obsPoint (in lat/lon).
 * @param obsPoint
 * @return
 */
public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.y,obsPoint.x);
  final LinearLocation here=line.project(revObsPoint);
  final Coordinate pointOnLine=line.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  final Coordinate projPointOnLine=GeoUtils.convertToEuclidean(revOnLine);
  return VectorFactory.getDefault().createVector2D(projPointOnLine.x,projPointOnLine.y);
}","/** 
 * Get the snapped location in projected/euclidean coordinates for the  given obsPoint (in lat/lon).
 * @param obsPoint
 * @return
 */
public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.y,obsPoint.x);
  final LinearLocation here=locationIndexedLine.project(revObsPoint);
  final Coordinate pointOnLine=locationIndexedLine.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  final Coordinate projPointOnLine=GeoUtils.convertToEuclidean(revOnLine);
  return VectorFactory.getDefault().createVector2D(projPointOnLine.x,projPointOnLine.y);
}",0.9779086892488954
189571,"public Graph getGraph(){
  return graph;
}","public InferredGraph getGraph(){
  return graph;
}",0.9130434782608696
189572,"private InferredEdge(Edge edge,Integer edgeId,InferredGraph graph){
  this.graph=graph;
  this.edgeId=edgeId;
  this.line=new LocationIndexedLine(edge.getGeometry());
  this.geometry=edge.getGeometry();
  this.startVertex=edge.getFromVertex();
  this.endVertex=edge.getToVertex();
  final Coordinate startPoint=this.line.extractPoint(this.line.getStartIndex());
  final Coordinate startPointCoord=GeoUtils.convertToEuclidean(new Coordinate(startPoint.y,startPoint.x));
  this.startPoint=VectorFactory.getDefault().createVector2D(startPointCoord.x,startPointCoord.y);
  final Coordinate endPoint=this.line.extractPoint(this.line.getEndIndex());
  final Coordinate endPointCoord=GeoUtils.convertToEuclidean(new Coordinate(endPoint.y,endPoint.x));
  this.endPoint=VectorFactory.getDefault().createVector2D(endPointCoord.x,endPointCoord.y);
  this.length=this.startPoint.euclideanDistance(this.endPoint);
  this.angle=Angle.angle(startPoint,endPoint);
  this.velocityPrecisionDist=new NormalInverseGammaDistribution(266d,1 / Math.sqrt(1800d),1 / Math.sqrt(1800) + 1,Math.sqrt(1800));
  this.velocityEstimator=new UnivariateGaussianMeanVarianceBayesianEstimator(velocityPrecisionDist);
}","private InferredEdge(Edge edge,Integer edgeId,InferredGraph graph){
  this.graph=graph;
  this.edgeId=edgeId;
  this.geometry=edge.getGeometry();
  this.locationIndexedLine=new LocationIndexedLine(edge.getGeometry());
  this.lengthIndexedLine=new LengthIndexedLine(edge.getGeometry());
  this.lengthLocationMap=new LengthLocationMap(geometry);
  this.startVertex=edge.getFromVertex();
  this.endVertex=edge.getToVertex();
  final Coordinate startPoint=this.locationIndexedLine.extractPoint(this.locationIndexedLine.getStartIndex());
  final Coordinate startPointCoord=GeoUtils.convertToEuclidean(new Coordinate(startPoint.y,startPoint.x));
  this.startPoint=VectorFactory.getDefault().createVector2D(startPointCoord.x,startPointCoord.y);
  final Coordinate endPoint=this.locationIndexedLine.extractPoint(this.locationIndexedLine.getEndIndex());
  final Coordinate endPointCoord=GeoUtils.convertToEuclidean(new Coordinate(endPoint.y,endPoint.x));
  this.endPoint=VectorFactory.getDefault().createVector2D(endPointCoord.x,endPointCoord.y);
  this.length=GeoUtils.getAngleDegreesInMeters(geometry.getLength());
  this.velocityPrecisionDist=new NormalInverseGammaDistribution(266d,1 / Math.sqrt(1800d),1 / Math.sqrt(1800) + 1,Math.sqrt(1800));
  this.velocityEstimator=new UnivariateGaussianMeanVarianceBayesianEstimator(velocityPrecisionDist);
}",0.8161648177496038
189573,"public static void convertToRoadBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 2)   return;
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  final Vector m=belief.getMean().clone();
  final Matrix C=belief.getCovariance().clone();
  Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(edge,false);
  final Vector projMean=projPair.getKey().transpose().times(m.minus(projPair.getValue()));
  final Matrix projCov=projPair.getKey().transpose().times(C).times(projPair.getKey());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}","public static void convertToRoadBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 2)   return;
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  final Vector m=belief.getMean().clone();
  final Matrix C=belief.getCovariance().clone();
  final Coordinate latlonCurrentPos=GeoUtils.convertToLatLon(Og.times(m));
  LinearLocation lineLocation=edge.getInferredEdge().getLocationIndexedLine().project(GeoUtils.reverseCoordinates(latlonCurrentPos));
  LineSegment lineSegment=lineLocation.getSegment(edge.getInferredEdge().getGeometry());
  final double distanceToStartOfSegment=GeoUtils.getAngleDegreesInMeters(edge.getInferredEdge().getLengthIndexedLine().indexOf(lineSegment.p0));
  Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(lineSegment,distanceToStartOfSegment);
  final Vector projMean=projPair.getKey().transpose().times(m.minus(projPair.getValue()));
  final Matrix projCov=projPair.getKey().transpose().times(C).times(projPair.getKey());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}",0.750128270908158
189574,"/** 
 * Returns the matrix and offset vector for projection onto the given edge. distEnd is the distance from the start of the path to the end of the given edge. NOTE: These results are only in the positive direction.  Convert on your end.
 * @param edge
 * @param isNegative 
 * @param distEnd
 * @return
 */
static private Entry<Matrix,Vector> posVelProjectionPair(PathEdge edge,boolean isNegative){
  final Vector start=isNegative ? edge.getInferredEdge().getEndPoint() : edge.getInferredEdge().getStartPoint();
  final Vector end=isNegative ? edge.getInferredEdge().getStartPoint() : edge.getInferredEdge().getEndPoint();
  final double length=edge.getInferredEdge().getLength();
  final double distToStart=Math.abs(edge.getDistToStartOfEdge());
  final Vector P1=end.minus(start).scale(1 / length);
  final Vector s1=start.minus(P1.scale(distToStart));
  final Matrix P=MatrixFactory.getDefault().createMatrix(4,2);
  P.setColumn(0,P1.stack(zeros2D));
  P.setColumn(1,zeros2D.stack(P1));
  final Vector a=s1.stack(zeros2D);
  return Maps.immutableEntry(U.times(P),U.times(a));
}","/** 
 * Returns the matrix and offset vector for projection onto the given edge. distEnd is the distance from the start of the path to the end of the given edge. NOTE: These results are only in the positive direction.  Convert on your end.
 */
static private Entry<Matrix,Vector> posVelProjectionPair(LineSegment lineSegment,double distToStartOfLine){
  final Vector start=GeoUtils.getEuclideanVector(GeoUtils.reverseCoordinates(lineSegment.p0));
  final Vector end=GeoUtils.getEuclideanVector(GeoUtils.reverseCoordinates(lineSegment.p1));
  final double length=GeoUtils.getAngleDegreesInMeters(lineSegment.getLength());
  final double distToStart=Math.abs(distToStartOfLine);
  final Vector P1=end.minus(start).scale(1 / length);
  final Vector s1=start.minus(P1.scale(distToStart));
  final Matrix P=MatrixFactory.getDefault().createMatrix(4,2);
  P.setColumn(0,P1.stack(zeros2D));
  P.setColumn(1,zeros2D.stack(P1));
  final Vector a=s1.stack(zeros2D);
  return Maps.immutableEntry(U.times(P),U.times(a));
}",0.6736741519350214
189575,"public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  final boolean isNegative=belief.getMean().getElement(0) < 0d;
  Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(edge,isNegative);
  Vector truncatedMean=getTruncatedEdgeLocation(belief.getMean(),edge);
  if (isNegative) {
    truncatedMean.setElement(0,Math.abs(truncatedMean.getElement(0)));
  }
  final Matrix C=belief.getCovariance();
  final Vector projMean=projPair.getKey().times(truncatedMean).plus(projPair.getValue());
  final Matrix projCov=projPair.getKey().times(C).times(projPair.getKey().transpose());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}","public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  final double distanceAlong=belief.getMean().getElement(0);
  final boolean isNegative=distanceAlong < 0d;
  LinearLocation lineLocation=edge.getInferredEdge().getLengthLocationMap().getLocation(GeoUtils.getMetersInAngleDegrees(distanceAlong));
  LineSegment lineSegment=lineLocation.getSegment(edge.getInferredEdge().getGeometry());
  final double distanceToStartOfSegment=GeoUtils.getAngleDegreesInMeters(edge.getInferredEdge().getLengthIndexedLine().indexOf(lineSegment.p0));
  if (isNegative)   lineSegment.reverse();
  Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(lineSegment,distanceToStartOfSegment);
  Vector truncatedMean=getTruncatedEdgeLocation(belief.getMean(),edge);
  if (isNegative) {
    truncatedMean.setElement(0,Math.abs(truncatedMean.getElement(0)));
  }
  final Matrix C=belief.getCovariance();
  final Vector projMean=projPair.getKey().times(truncatedMean).plus(projPair.getValue());
  final Matrix projCov=projPair.getKey().times(C).times(projPair.getKey().transpose());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}",0.7555746140651801
189576,"@Override public MathTransform get(){
  return super.get();
}","@Override public GeoSetup get(){
  return super.get();
}",0.8376068376068376
189577,"public static MathTransform getCRSTransform(){
  return transform.get();
}","public static MathTransform getCRSTransform(){
  return geoData.get().getTransform();
}",0.8695652173913043
189578,"@Override protected MathTransform initialValue(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    final String googleWebMercatorCode=""String_Node_Str"";
    final String cartesianCode=""String_Node_Str"";
    final CRSAuthorityFactory crsAuthorityFactory=CRS.getAuthorityFactory(true);
    final CoordinateReferenceSystem mapCRS=crsAuthorityFactory.createCoordinateReferenceSystem(googleWebMercatorCode);
    final CoordinateReferenceSystem dataCRS=crsAuthorityFactory.createCoordinateReferenceSystem(cartesianCode);
    final boolean lenient=true;
    return CRS.findMathTransform(mapCRS,dataCRS,lenient);
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}","@Override protected GeoSetup initialValue(){
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  try {
    final String googleWebMercatorCode=""String_Node_Str"";
    final String cartesianCode=""String_Node_Str"";
    final CRSAuthorityFactory crsAuthorityFactory=CRS.getAuthorityFactory(true);
    final CoordinateReferenceSystem mapCRS=crsAuthorityFactory.createCoordinateReferenceSystem(googleWebMercatorCode);
    final CoordinateReferenceSystem dataCRS=crsAuthorityFactory.createCoordinateReferenceSystem(cartesianCode);
    final boolean lenient=true;
    final MathTransform transform=CRS.findMathTransform(mapCRS,dataCRS,lenient);
    return new GeoSetup(mapCRS,dataCRS,transform);
  }
 catch (  final Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9157113958192852
189579,"public static synchronized Observation createObservation(String vehicleId,String timestamp,String latStr,String lonStr,String velocity,String heading,String accuracy) throws NumberFormatException, ParseException, TransformException, TimeOrderException {
  final double lat=Double.parseDouble(latStr);
  final double lon=Double.parseDouble(lonStr);
  final Coordinate obsCoords=new Coordinate(lon,lat);
  final Double velocityd=velocity != null ? Double.parseDouble(velocity) : null;
  final Double headingd=heading != null ? Double.parseDouble(heading) : null;
  final Double accuracyd=accuracy != null ? Double.parseDouble(accuracy) : null;
  final Date time=sdf.parse(timestamp);
  return createObservation(vehicleId,time,obsCoords,velocityd,headingd,accuracyd);
}","public static synchronized Observation createObservation(String vehicleId,String timestamp,String latStr,String lonStr,String velocity,String heading,String accuracy) throws NumberFormatException, ParseException, TransformException, TimeOrderException {
  final double lat=Double.parseDouble(latStr);
  final double lon=Double.parseDouble(lonStr);
  final Coordinate obsCoords=new Coordinate(lat,lon);
  Preconditions.checkArgument(GeoUtils.isInLatLonCoords(obsCoords));
  final Double velocityd=velocity != null ? Double.parseDouble(velocity) : null;
  final Double headingd=heading != null ? Double.parseDouble(heading) : null;
  final Double accuracyd=accuracy != null ? Double.parseDouble(accuracy) : null;
  final Date time=sdf.parse(timestamp);
  return createObservation(vehicleId,time,obsCoords,velocityd,headingd,accuracyd);
}",0.9494066208619611
189580,"public static boolean isInProjCoords(Coordinate rawCoords){
  try {
    JTS.checkCoordinatesRange(JTS.toGeometry(JTS.toDirectPosition(rawCoords,getDataCRS()).getDirectPosition()),getDataCRS());
    return true;
  }
 catch (  PointOutsideEnvelopeException e) {
    return false;
  }
}","public static boolean isInProjCoords(Coordinate rawCoords){
  try {
    JTS.checkCoordinatesRange(JTS.toGeometry(JTS.toDirectPosition(rawCoords,getProjCRS()).getDirectPosition()),getProjCRS());
    return true;
  }
 catch (  PointOutsideEnvelopeException e) {
    return false;
  }
}",0.9363957597173144
189581,"public static boolean isInLatLonCoords(Coordinate rawCoords){
  try {
    JTS.checkCoordinatesRange(JTS.toGeometry(JTS.toDirectPosition(rawCoords,getMapCRS()).getDirectPosition()),getMapCRS());
    return true;
  }
 catch (  PointOutsideEnvelopeException e) {
    return false;
  }
}","public static boolean isInLatLonCoords(Coordinate rawCoords){
  try {
    JTS.checkCoordinatesRange(JTS.toGeometry(JTS.toDirectPosition(rawCoords,getLatLonCRS()).getDirectPosition()),getLatLonCRS());
    return true;
  }
 catch (  PointOutsideEnvelopeException e) {
    return false;
  }
}",0.9685314685314684
189582,"@Override public String toString(){
  return ""String_Node_Str"" + freeMotionTransProbPrior.getParameters() + ""String_Node_Str""+ freeMotionTransPrior.getParameters()+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + freeMotionTransPrior.getParameters() + ""String_Node_Str""+ edgeMotionTransPrior.getParameters()+ ""String_Node_Str"";
}",0.9781420765027322
189583,"public Set<InferredEdge> getNearbyEdges(Vector mean){
  Set<InferredEdge> results=Sets.newHashSet();
  SnappedEdges snappedEdges=this.narratedGraph.snapToGraph(null,new Coordinate(mean.getElement(0),mean.getElement(1)));
  for (  Edge edge : snappedEdges.getSnappedEdges()) {
    results.add(getInferredEdge(edge));
  }
  return results;
}","/** 
 * Get nearby street edges from a projected point.
 * @param mean
 * @return
 */
public Set<InferredEdge> getNearbyEdges(Vector mean){
  Set<InferredEdge> results=Sets.newHashSet();
  Coordinate latlon=GeoUtils.convertToLatLon(mean);
  SnappedEdges snappedEdges=this.narratedGraph.snapToGraph(null,latlon);
  for (  Edge edge : snappedEdges.getSnappedEdges()) {
    results.add(getInferredEdge(edge));
  }
  return results;
}",0.7438231469440832
189584,"/** 
 * This returns a list of edges that are outgoing, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way against the direction of this edge).
 * @return
 */
public List<InferredEdge> getOutgoingTransferableEdges(){
  List<InferredEdge> result=Lists.newArrayList();
  for (  Edge edge : this.startVertex.getOutgoing()) {
    Set<Edge> tmpResults=Sets.newHashSet();
    if (edge.getGeometry() == null) {
      tmpResults.addAll(edge.getFromVertex().getOutgoingStreetEdges());
      tmpResults.addAll(edge.getToVertex().getOutgoingStreetEdges());
    }
 else {
      tmpResults.add(edge);
    }
    for (    Edge edge2 : tmpResults) {
      if (!edge2.getGeometry().equals(geometry))       result.add(graph.getInferredEdge(edge2));
    }
  }
  return result;
}","/** 
 * This returns a list of edges that are outgoing, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way against the direction of this edge).
 * @return
 */
public List<InferredEdge> getOutgoingTransferableEdges(){
  List<InferredEdge> result=Lists.newArrayList();
  for (  Edge edge : this.endVertex.getOutgoing()) {
    Set<Edge> tmpResults=Sets.newHashSet();
    if (edge.getGeometry() == null) {
      tmpResults.addAll(edge.getFromVertex().getOutgoingStreetEdges());
      tmpResults.addAll(edge.getToVertex().getOutgoingStreetEdges());
    }
 else {
      tmpResults.add(edge);
    }
    for (    Edge edge2 : tmpResults) {
      if (!edge2.getGeometry().equals(geometry))       result.add(graph.getInferredEdge(edge2));
    }
  }
  return result;
}",0.9949685534591196
189585,"@Override public String toString(){
  return ""String_Node_Str"" + endPoint + ""String_Node_Str""+ startPoint+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + edgeId + ""String_Node_Str""+ endPoint+ ""String_Node_Str""+ startPoint+ ""String_Node_Str""+ length+ ""String_Node_Str"";
}",0.8181818181818182
189586,"public OsmSegment(Integer i,Geometry g){
  id=i;
  geom=g;
}","public OsmSegment(Integer i,Geometry g,String name){
  angle=Angle.angle(g.getCoordinates()[0],g.getCoordinates()[1]);
  id=i;
  geom=g;
  this.name=name;
}",0.5555555555555556
189587,"public static void segment(Integer segmentId) throws JsonGenerationException, JsonMappingException, IOException {
  final Edge e=graph.getGraph().getEdgeById(segmentId);
  if (e != null) {
    final OsmSegment osmSegment=new OsmSegment(segmentId,e.getGeometry());
    renderJSON(jsonMapper.writeValueAsString(osmSegment));
  }
 else   badRequest();
}","public static void segment(Integer segmentId) throws JsonGenerationException, JsonMappingException, IOException {
  final Edge e=graph.getGraph().getEdgeById(segmentId);
  if (e != null) {
    final OsmSegment osmSegment=new OsmSegment(segmentId,e.getGeometry(),e.toString());
    renderJSON(jsonMapper.writeValueAsString(osmSegment));
  }
 else   badRequest();
}",0.9817671809256662
189588,"public void runSimulation(){
  Observation initialObs;
  try {
    try {
      initialObs=Observation.createObservation(this.simulationName,startTime,startCoordinates,null,null,null);
    }
 catch (    TimeOrderException e) {
      e.printStackTrace();
      return;
    }
    final SnappedEdges initialEdges=Api.getGraph().snapToGraph(null,initialObs.getObsCoords());
    List<InferredEdge> edges=Lists.newArrayList(InferredGraph.getEmptyEdge());
    for (    Edge edge : initialEdges.getSnappedEdges()) {
      edges.add(inferredGraph.getInferredEdge(edge));
    }
    final InferredEdge currentInferredEdge=edges.get(rng.nextInt(edges.size()));
    InferredPath currentPath=currentInferredEdge == InferredGraph.getEmptyEdge() ? InferredPath.getEmptyPath() : new InferredPath(currentInferredEdge);
    PathEdge currentPathEdge=Iterables.getOnlyElement(currentPath.getEdges());
    VehicleState vehicleState=new VehicleState(this.inferredGraph,initialObs,currentInferredEdge);
    Vector thisStateSample=sampleBelief(vehicleState);
    vehicleState.getBelief().setMean(thisStateSample);
    for (long time=startTime.getTime() + frequency * 1000; time < endTime.getTime(); time+=frequency * 1000) {
      vehicleState.getMovementFilter().setCurrentTimeDiff(frequency);
      final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
      final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
      currentPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
      Vector transStateSample=sampleBelief(vehicleState);
      vehicleState.getBelief().setMean(transStateSample);
      currentPathEdge=Iterables.getLast(currentPath.getEdges());
      Vector thisLoc=sampleObservation(vehicleState,currentPathEdge);
      Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
      Observation thisObs;
      try {
        thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
      }
 catch (      TimeOrderException e) {
        e.printStackTrace();
        continue;
      }
      InferenceResultRecord result=InferenceResultRecord.createInferenceResultRecord(thisObs,currentLocBelief,currentPath.getEdges());
      InferenceService.addSimulationRecords(simulationName,result);
      Logger.info(""String_Node_Str"" + thisObs);
      vehicleState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,currentPathEdge,currentPath,vehicleState);
    }
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
}","public void runSimulation(){
  Observation initialObs;
  try {
    try {
      initialObs=Observation.createObservation(this.simulationName,startTime,startCoordinates,null,null,null);
    }
 catch (    TimeOrderException e) {
      e.printStackTrace();
      return;
    }
    inferredGraph.getNearbyEdges(initialObs.getProjectedPoint());
    List<InferredEdge> edges=Lists.newArrayList(InferredGraph.getEmptyEdge());
    final InferredEdge currentInferredEdge=edges.get(rng.nextInt(edges.size()));
    InferredPath currentPath=currentInferredEdge == InferredGraph.getEmptyEdge() ? InferredPath.getEmptyPath() : new InferredPath(currentInferredEdge);
    PathEdge currentPathEdge=Iterables.getOnlyElement(currentPath.getEdges());
    VehicleState vehicleState=new VehicleState(this.inferredGraph,initialObs,currentInferredEdge);
    Vector thisStateSample=sampleMovementBelief(vehicleState);
    vehicleState.getBelief().setMean(thisStateSample);
    for (long time=startTime.getTime() + frequency * 1000; time < endTime.getTime(); time+=frequency * 1000) {
      vehicleState.getMovementFilter().setCurrentTimeDiff(frequency);
      final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
      final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
      currentPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
      Vector transStateSample=sampleMovementBelief(vehicleState);
      vehicleState.getBelief().setMean(transStateSample);
      currentPathEdge=Iterables.getLast(currentPath.getEdges());
      Vector thisLoc=sampleObservation(vehicleState,currentPathEdge);
      Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
      Observation thisObs;
      try {
        thisObs=Observation.createObservation(simulationName,new Date(time),obsCoord,null,null,null);
      }
 catch (      TimeOrderException e) {
        e.printStackTrace();
        continue;
      }
      InferenceResultRecord result=InferenceResultRecord.createInferenceResultRecord(thisObs,currentLocBelief,currentPath.getEdges());
      InferenceService.addSimulationRecords(simulationName,result);
      Logger.info(""String_Node_Str"" + thisObs);
      vehicleState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,currentPathEdge,currentPath,vehicleState);
    }
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
}",0.752583349580815
189589,"/** 
 * This method samples a path, updates the belief to reflect that, and returns the path.
 * @param edgeTransDist
 * @param belief
 * @param startEdge
 * @param movementFilter
 * @return
 */
private InferredPath traverseEdge(EdgeTransitionDistributions edgeTransDist,final MultivariateGaussian belief,PathEdge startEdge,StandardRoadTrackingFilter movementFilter){
  PathEdge currentEdge=startEdge;
  List<PathEdge> currentPath=Lists.newArrayList();
  double distTraveled=0d;
  Double totalDistToTravel=null;
  while (totalDistToTravel == null || totalDistToTravel >= currentEdge.getDistToStartOfEdge() + currentEdge.getInferredEdge().getLength()) {
    List<InferredEdge> transferEdges=Lists.newArrayList();
    if (currentEdge.getInferredEdge() == InferredGraph.getEmptyEdge()) {
      transferEdges.addAll(this.inferredGraph.getNearbyEdges(belief.getMean()));
    }
 else {
      if (belief.getMean().getElement(0) < 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
      }
 else       if (belief.getMean().getElement(0) > 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
 else {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
      transferEdges.add(currentEdge.getInferredEdge());
    }
    InferredEdge sampledEdge=edgeTransDist.sample(rng,transferEdges,currentEdge.getInferredEdge());
    if (sampledEdge == InferredGraph.getEmptyEdge()) {
      movementFilter.predict(belief,PathEdge.getEmptyPathEdge(),currentEdge);
      if (currentPath.isEmpty()) {
        return InferredPath.getEmptyPath();
      }
 else {
        currentPath.add(PathEdge.getEmptyPathEdge());
        return new InferredPath(ImmutableList.copyOf(currentPath),distTraveled);
      }
    }
    PathEdge sampledPathEdge=PathEdge.getEdge(sampledEdge,distTraveled);
    if (totalDistToTravel == null) {
      if (belief.getInputDimensionality() == 4) {
        StandardRoadTrackingFilter.invertProjection(belief,sampledPathEdge);
      }
      movementFilter.predict(belief,null,null);
      totalDistToTravel=belief.getMean().getElement(0);
    }
    final double direction=belief.getMean().getElement(0) >= 0d ? 1d : -1d;
    if (sampledPathEdge == null) {
      belief.getMean().setElement(0,direction * currentEdge.getInferredEdge().getLength());
      belief.getMean().setElement(1,0d);
      break;
    }
    distTraveled+=direction * currentEdge.getInferredEdge().getLength();
    currentEdge=sampledPathEdge;
    currentPath.add(sampledPathEdge);
  }
  belief.getMean().setElement(0,belief.getMean().getElement(0) - currentEdge.getDistToStartOfEdge());
  return new InferredPath(ImmutableList.copyOf(currentPath));
}","/** 
 * This method samples a path, updates the belief to reflect that, and returns the path.
 * @param edgeTransDist
 * @param belief
 * @param startEdge
 * @param movementFilter
 * @return
 */
private InferredPath traverseEdge(EdgeTransitionDistributions edgeTransDist,final MultivariateGaussian belief,PathEdge startEdge,StandardRoadTrackingFilter movementFilter){
  PathEdge currentEdge=startEdge;
  List<PathEdge> currentPath=Lists.newArrayList();
  double distTraveled=0d;
  Double totalDistToTravel=null;
  while (totalDistToTravel == null || totalDistToTravel >= currentEdge.getDistToStartOfEdge() + currentEdge.getInferredEdge().getLength()) {
    List<InferredEdge> transferEdges=Lists.newArrayList();
    if (currentEdge.getInferredEdge() == InferredGraph.getEmptyEdge()) {
      Vector projLocation=StandardRoadTrackingFilter.getOg().times(belief.getMean());
      transferEdges.addAll(this.inferredGraph.getNearbyEdges(projLocation));
    }
 else {
      if (belief.getMean().getElement(0) < 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
      }
 else       if (belief.getMean().getElement(0) > 0d) {
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
 else {
        transferEdges.addAll(currentEdge.getInferredEdge().getIncomingTransferableEdges());
        transferEdges.addAll(currentEdge.getInferredEdge().getOutgoingTransferableEdges());
      }
    }
    InferredEdge sampledEdge=edgeTransDist.sample(rng,transferEdges,currentEdge.getInferredEdge());
    if (sampledEdge == InferredGraph.getEmptyEdge()) {
      movementFilter.predict(belief,PathEdge.getEmptyPathEdge(),currentEdge);
      if (currentPath.isEmpty()) {
        return InferredPath.getEmptyPath();
      }
 else {
        currentPath.add(PathEdge.getEmptyPathEdge());
        return new InferredPath(ImmutableList.copyOf(currentPath),distTraveled);
      }
    }
    PathEdge sampledPathEdge=PathEdge.getEdge(sampledEdge,distTraveled);
    if (totalDistToTravel == null) {
      if (belief.getInputDimensionality() == 4) {
        StandardRoadTrackingFilter.invertProjection(belief,sampledPathEdge);
      }
      movementFilter.predict(belief,null,null);
      totalDistToTravel=belief.getMean().getElement(0);
    }
    final double direction=belief.getMean().getElement(0) >= 0d ? 1d : -1d;
    if (sampledPathEdge == null) {
      belief.getMean().setElement(0,direction * currentEdge.getInferredEdge().getLength());
      belief.getMean().setElement(1,0d);
      break;
    }
    distTraveled+=direction * sampledPathEdge.getInferredEdge().getLength();
    currentEdge=sampledPathEdge;
    currentPath.add(sampledPathEdge);
  }
  belief.getMean().setElement(0,belief.getMean().getElement(0) - currentEdge.getDistToStartOfEdge());
  return new InferredPath(ImmutableList.copyOf(currentPath));
}",0.8354827466016034
189590,"public EdgeTransitionDistributions(InferredGraph graph){
  this.graph=graph;
}","public EdgeTransitionDistributions(InferredGraph graph){
  this.graph=graph;
  freeMotionTransPrior.setParameters(freeMotionTransProbPrior.getMean());
  edgeMotionTransPrior.setParameters(edgeMotionTransProbPrior.getMean());
}",0.5131578947368421
189591,"public InferredEdge sample(Random rng,List<InferredEdge> transferEdges,InferredEdge currentEdge,MultivariateGaussian groundBelief){
  Preconditions.checkArgument(groundBelief.getInputDimensionality() == 4);
  Preconditions.checkArgument(!transferEdges.contains(InferredGraph.getEmptyEdge()));
  Preconditions.checkNotNull(currentEdge);
  Preconditions.checkNotNull(transferEdges);
  if (currentEdge == InferredGraph.getEmptyEdge()) {
    if (transferEdges.isEmpty()) {
      return InferredGraph.getEmptyEdge();
    }
 else {
      final Vector sample=this.freeMotionTransPrior.sample(rng);
      if (sample.equals(stateOffToOn)) {
        return transferEdges.get(rng.nextInt(transferEdges.size()));
      }
 else {
        return InferredGraph.getEmptyEdge();
      }
    }
  }
 else {
    final Vector sample=this.edgeMotionTransPrior.sample(rng);
    if (sample.equals(stateOnToOff)) {
      return InferredGraph.getEmptyEdge();
    }
 else {
      List<InferredEdge> support=Lists.newArrayList(transferEdges);
      support.add(currentEdge);
      return support.get(rng.nextInt(transferEdges.size()));
    }
  }
}","public InferredEdge sample(Random rng,List<InferredEdge> transferEdges,InferredEdge currentEdge){
  Preconditions.checkArgument(!transferEdges.contains(InferredGraph.getEmptyEdge()));
  Preconditions.checkNotNull(currentEdge);
  Preconditions.checkNotNull(transferEdges);
  if (currentEdge == InferredGraph.getEmptyEdge()) {
    if (transferEdges.isEmpty()) {
      return InferredGraph.getEmptyEdge();
    }
 else {
      final Vector sample=this.freeMotionTransPrior.sample(rng);
      if (sample.equals(stateOffToOn)) {
        return transferEdges.get(rng.nextInt(transferEdges.size()));
      }
 else {
        return InferredGraph.getEmptyEdge();
      }
    }
  }
 else {
    final Vector sample=this.edgeMotionTransPrior.sample(rng);
    if (sample.equals(stateOnToOff) || transferEdges.isEmpty()) {
      return InferredGraph.getEmptyEdge();
    }
 else {
      List<InferredEdge> support=Lists.newArrayList(transferEdges);
      return support.get(rng.nextInt(transferEdges.size()));
    }
  }
}",0.2824858757062147
189592,"/** 
 * This returns a list of edges that are incoming, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way in the direction of this edge).
 * @return
 */
public List<InferredEdge> getIncomingTransferableEdges(){
  List<InferredEdge> result=Lists.newArrayList();
  for (  Edge incomingEdge : this.startVertex.getIncoming()) {
    if (!incomingEdge.getGeometry().equals(geometry))     result.add(graph.getInferredEdge(incomingEdge));
  }
  return result;
}","/** 
 * This returns a list of edges that are incoming, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way in the direction of this edge).
 * @return
 */
public List<InferredEdge> getIncomingTransferableEdges(){
  List<InferredEdge> result=Lists.newArrayList();
  for (  Edge edge : this.startVertex.getIncoming()) {
    Set<Edge> tmpResults=Sets.newHashSet();
    if (edge.getGeometry() == null) {
      tmpResults.addAll(edge.getFromVertex().getOutgoingStreetEdges());
      tmpResults.addAll(edge.getToVertex().getOutgoingStreetEdges());
    }
 else {
      tmpResults.add(edge);
    }
    for (    Edge edge2 : tmpResults) {
      if (!edge2.getGeometry().equals(geometry))       result.add(graph.getInferredEdge(edge2));
    }
  }
  return result;
}",0.5553822152886115
189593,"public Set<InferredPath> load(PathKey key){
  return Sets.newHashSet(InferredPath.getEmptyPath());
}","public Set<InferredPath> load(PathKey key){
  return computePaths(key);
}",0.7398843930635838
189594,"/** 
 * This returns a list of edges that are outgoing, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way against the direction of this edge).
 * @return
 */
public List<InferredEdge> getOutgoingTransferableEdges(){
  List<InferredEdge> result=Lists.newArrayList();
  for (  Edge outgoingEdge : this.startVertex.getOutgoing()) {
    if (!outgoingEdge.getGeometry().equals(geometry))     result.add(graph.getInferredEdge(outgoingEdge));
  }
  return result;
}","/** 
 * This returns a list of edges that are outgoing, wrt the direction of this edge, and that are reachable from this edge (e.g. not one way against the direction of this edge).
 * @return
 */
public List<InferredEdge> getOutgoingTransferableEdges(){
  List<InferredEdge> result=Lists.newArrayList();
  for (  Edge edge : this.startVertex.getOutgoing()) {
    Set<Edge> tmpResults=Sets.newHashSet();
    if (edge.getGeometry() == null) {
      tmpResults.addAll(edge.getFromVertex().getOutgoingStreetEdges());
      tmpResults.addAll(edge.getToVertex().getOutgoingStreetEdges());
    }
 else {
      tmpResults.add(edge);
    }
    for (    Edge edge2 : tmpResults) {
      if (!edge2.getGeometry().equals(geometry))       result.add(graph.getInferredEdge(edge2));
    }
  }
  return result;
}",0.7167182662538699
189595,"/** 
 * Get the snapped location in projected/euclidean coordinates for the  given obsPoint (in lat/lon).
 * @param obsPoint
 * @return
 */
public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final LinearLocation here=line.project(obsPoint);
  final Coordinate pointOnLine=line.extractPoint(here);
  final Coordinate projPointOnLine=GeoUtils.convertToEuclidean(pointOnLine);
  return VectorFactory.getDefault().createVector2D(projPointOnLine.x,projPointOnLine.y);
}","/** 
 * Get the snapped location in projected/euclidean coordinates for the  given obsPoint (in lat/lon).
 * @param obsPoint
 * @return
 */
public Vector getPointOnEdge(Coordinate obsPoint){
  if (this == InferredEdge.emptyEdge)   return null;
  final Coordinate revObsPoint=new Coordinate(obsPoint.y,obsPoint.x);
  final LinearLocation here=line.project(revObsPoint);
  final Coordinate pointOnLine=line.extractPoint(here);
  final Coordinate revOnLine=new Coordinate(pointOnLine.y,pointOnLine.x);
  final Coordinate projPointOnLine=GeoUtils.convertToEuclidean(revOnLine);
  return VectorFactory.getDefault().createVector2D(projPointOnLine.x,projPointOnLine.y);
}",0.8672865595942519
189596,"private InferredEdge(Edge edge,Integer edgeId,InferredGraph graph){
  this.graph=graph;
  this.edgeId=edgeId;
  this.line=new LocationIndexedLine(edge.getGeometry());
  this.geometry=edge.getGeometry();
  this.startVertex=edge.getFromVertex();
  this.endVertex=edge.getToVertex();
  final Coordinate startPoint=this.line.extractPoint(this.line.getStartIndex());
  final Coordinate startPointCoord=GeoUtils.convertToEuclidean(startPoint);
  this.startPoint=VectorFactory.getDefault().createVector2D(startPointCoord.x,startPointCoord.y);
  final Coordinate endPoint=this.line.extractPoint(this.line.getEndIndex());
  final Coordinate endPointCoord=GeoUtils.convertToEuclidean(endPoint);
  this.endPoint=VectorFactory.getDefault().createVector2D(endPointCoord.x,endPointCoord.y);
  this.length=this.startPoint.euclideanDistance(this.endPoint);
  this.angle=Angle.angle(startPoint,endPoint);
  this.velocityPrecisionDist=new NormalInverseGammaDistribution(266d,1 / Math.sqrt(1800d),1 / Math.sqrt(1800) + 1,Math.sqrt(1800));
  this.velocityEstimator=new UnivariateGaussianMeanVarianceBayesianEstimator(velocityPrecisionDist);
}","private InferredEdge(Edge edge,Integer edgeId,InferredGraph graph){
  this.graph=graph;
  this.edgeId=edgeId;
  this.line=new LocationIndexedLine(edge.getGeometry());
  this.geometry=edge.getGeometry();
  this.startVertex=edge.getFromVertex();
  this.endVertex=edge.getToVertex();
  final Coordinate startPoint=this.line.extractPoint(this.line.getStartIndex());
  final Coordinate startPointCoord=GeoUtils.convertToEuclidean(new Coordinate(startPoint.y,startPoint.x));
  this.startPoint=VectorFactory.getDefault().createVector2D(startPointCoord.x,startPointCoord.y);
  final Coordinate endPoint=this.line.extractPoint(this.line.getEndIndex());
  final Coordinate endPointCoord=GeoUtils.convertToEuclidean(new Coordinate(endPoint.y,endPoint.x));
  this.endPoint=VectorFactory.getDefault().createVector2D(endPointCoord.x,endPointCoord.y);
  this.length=this.startPoint.euclideanDistance(this.endPoint);
  this.angle=Angle.angle(startPoint,endPoint);
  this.velocityPrecisionDist=new NormalInverseGammaDistribution(266d,1 / Math.sqrt(1800d),1 / Math.sqrt(1800) + 1,Math.sqrt(1800));
  this.velocityEstimator=new UnivariateGaussianMeanVarianceBayesianEstimator(velocityPrecisionDist);
}",0.9583333333333334
189597,"public InferredPath(InferredEdge inferredEdge){
  Preconditions.checkArgument(inferredEdge == InferredGraph.getEmptyEdge());
  this.edges=ImmutableList.of(PathEdge.getEdge(inferredEdge,0d));
  this.totalPathDistance=inferredEdge.getLength();
}","public InferredPath(InferredEdge inferredEdge){
  Preconditions.checkArgument(inferredEdge != InferredGraph.getEmptyEdge());
  this.edges=ImmutableList.of(PathEdge.getEdge(inferredEdge,0d));
  this.totalPathDistance=inferredEdge.getLength();
}",0.9958847736625516
189598,"/** 
 * Pass it a road-coordinates prior predictive belief distribution, edge and  path starting distance, and it will update the prior predictive distribution  for that edge and path.  Otherwise, project free-movement onto an edge or  predict free movement.
 * @param belief
 * @param edge
 * @param startOfEdgeDist 
 */
public void predict(MultivariateGaussian belief,PathEdge edge,PathEdge prevEdge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (edge == PathEdge.getEmptyPathEdge()) {
    if (belief.getInputDimensionality() == 4) {
      groundFilter.predict(belief);
    }
 else {
      Preconditions.checkNotNull(prevEdge);
      convertToGroundBelief(belief,prevEdge);
      groundFilter.predict(belief);
      if (belief.getMean().getElement(0) > prevEdge.getDistToStartOfEdge() + prevEdge.getInferredEdge().getLength()) {
        belief.getMean().setElement(0,prevEdge.getDistToStartOfEdge() + prevEdge.getInferredEdge().getLength());
      }
 else       if (belief.getMean().getElement(0) < prevEdge.getDistToStartOfEdge()) {
        belief.getMean().setElement(0,prevEdge.getDistToStartOfEdge());
      }
      Preconditions.checkArgument(belief.getMean().getElement(0) >= 0);
    }
  }
 else {
    if (belief.getInputDimensionality() == 4) {
      invertProjection(belief,edge);
      roadFilter.predict(belief);
    }
 else {
      if (edge == null) {
        roadFilter.predict(belief);
      }
 else {
        final double S=Or.times(belief.getCovariance()).times(Or.transpose()).getElement(0,0) + Math.pow(edge.getInferredEdge().getLength() / Math.sqrt(12),2);
        final Matrix W=belief.getCovariance().times(Or.transpose()).scale(1 / S);
        final Matrix R=belief.getCovariance().minus(W.times(W.transpose()).scale(S));
        final double mean=(edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength()) / 2d;
        final double e=mean - Or.times(belief.getMean()).getElement(0);
        final Vector a=belief.getMean().plus(W.getColumn(0).scale(e));
        Preconditions.checkArgument(a.getElement(0) >= 0);
        belief.setMean(a);
        belief.setCovariance(R);
      }
    }
  }
}","/** 
 * Pass it a road-coordinates prior predictive belief distribution, edge and  path starting distance, and it will update the prior predictive distribution  for that edge and path.  Otherwise, project free-movement onto an edge or  predict free movement.
 * @param belief
 * @param edge
 * @param startOfEdgeDist 
 */
public void predict(MultivariateGaussian belief,PathEdge edge,PathEdge prevEdge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (edge == PathEdge.getEmptyPathEdge()) {
    if (belief.getInputDimensionality() == 4) {
      groundFilter.predict(belief);
    }
 else {
      Preconditions.checkNotNull(prevEdge);
      convertToGroundBelief(belief,prevEdge);
      groundFilter.predict(belief);
    }
  }
 else {
    if (belief.getInputDimensionality() == 4) {
      invertProjection(belief,edge);
      roadFilter.predict(belief);
    }
 else {
      if (edge == null) {
        roadFilter.predict(belief);
      }
 else {
        final double S=Or.times(belief.getCovariance()).times(Or.transpose()).getElement(0,0) + Math.pow(edge.getInferredEdge().getLength() / Math.sqrt(12),2);
        final Matrix W=belief.getCovariance().times(Or.transpose()).scale(1 / S);
        final Matrix R=belief.getCovariance().minus(W.times(W.transpose()).scale(S));
        final double mean=(edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength()) / 2d;
        final double e=mean - Or.times(belief.getMean()).getElement(0);
        final Vector a=belief.getMean().plus(W.getColumn(0).scale(e));
        Preconditions.checkArgument(a.getElement(0) >= 0);
        belief.setMean(a);
        belief.setCovariance(R);
      }
    }
  }
}",0.8783852835973429
189599,"public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(edge);
  Vector truncatedMean;
  if (belief.getMean().getElement(0) > edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength()) {
    truncatedMean=belief.getMean().clone();
    truncatedMean.setElement(0,edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength());
  }
 else   if (belief.getMean().getElement(0) < edge.getDistToStartOfEdge()) {
    truncatedMean=belief.getMean().clone();
    truncatedMean.setElement(0,edge.getDistToStartOfEdge());
  }
 else {
    truncatedMean=belief.getMean();
  }
  Matrix C=belief.getCovariance();
  belief.setMean(projPair.getKey().times(truncatedMean).minus(projPair.getValue()));
  belief.setCovariance(projPair.getKey().times(C).times(projPair.getKey().transpose()));
}","public static void convertToGroundBelief(MultivariateGaussian belief,PathEdge edge){
  Preconditions.checkArgument(belief.getInputDimensionality() == 2 || belief.getInputDimensionality() == 4);
  if (belief.getInputDimensionality() == 4)   return;
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  Entry<Matrix,Vector> projPair=StandardRoadTrackingFilter.posVelProjectionPair(edge);
  Vector truncatedMean;
  final double totalPathDistance=edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength();
  final double distance;
  truncatedMean=belief.getMean().clone();
  if (belief.getMean().getElement(0) < 0d) {
    distance=totalPathDistance + belief.getMean().getElement(0);
    truncatedMean.setElement(0,distance);
  }
 else {
    distance=belief.getMean().getElement(0);
  }
  if (distance > totalPathDistance) {
    truncatedMean.setElement(0,totalPathDistance);
  }
 else   if (distance < edge.getDistToStartOfEdge()) {
    truncatedMean.setElement(0,edge.getDistToStartOfEdge());
  }
  final Matrix C=belief.getCovariance();
  final Vector projMean=projPair.getKey().times(truncatedMean).plus(projPair.getValue());
  final Matrix projCov=projPair.getKey().times(C).times(projPair.getKey().transpose());
  belief.setMean(projMean);
  belief.setCovariance(projCov);
}",0.47233691164327
189600,"public static void invertProjection(MultivariateGaussian dist,PathEdge edge){
  Preconditions.checkNotNull(edge);
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  Preconditions.checkArgument(dist.getInputDimensionality() == 2 || dist.getInputDimensionality() == 4);
  Entry<Matrix,Vector> projPair=posVelProjectionPair(edge);
  if (dist.getInputDimensionality() == 2) {
    Vector a=projPair.getKey().times(dist.getMean()).plus(projPair.getValue());
    Matrix R=projPair.getKey().times(dist.getCovariance()).times(projPair.getKey().transpose());
    dist.setCovariance(R);
    dist.setMean(a);
  }
 else {
    Vector m=projPair.getKey().transpose().times(dist.getMean().minus(projPair.getValue()));
    final double totalDist=edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength();
    double dist2=m.getElement(0);
    if (dist2 < edge.getDistToStartOfEdge()) {
      dist2=0d;
    }
 else     if (dist2 > totalDist) {
      dist2=totalDist;
    }
    m.setElement(0,dist2);
    Matrix C=projPair.getKey().transpose().times(dist.getCovariance()).times(projPair.getKey());
    dist.setCovariance(C);
    dist.setMean(m);
  }
}","public static void invertProjection(MultivariateGaussian dist,PathEdge edge){
  Preconditions.checkNotNull(edge);
  Preconditions.checkArgument(edge != PathEdge.getEmptyPathEdge());
  Preconditions.checkArgument(dist.getInputDimensionality() == 2 || dist.getInputDimensionality() == 4);
  Entry<Matrix,Vector> projPair=posVelProjectionPair(edge);
  if (dist.getInputDimensionality() == 2) {
    convertToGroundBelief(dist,edge);
  }
 else {
    Vector m=projPair.getKey().transpose().times(dist.getMean().minus(projPair.getValue()));
    final double totalDist=edge.getDistToStartOfEdge() + edge.getInferredEdge().getLength();
    double dist2=m.getElement(0);
    if (dist2 < edge.getDistToStartOfEdge()) {
      dist2=0d;
    }
 else     if (dist2 > totalDist) {
      dist2=totalDist;
    }
    m.setElement(0,dist2);
    Matrix C=projPair.getKey().transpose().times(dist.getCovariance()).times(projPair.getKey());
    dist.setCovariance(C);
    dist.setMean(m);
  }
}",0.8839830906528887
189601,"@Override public String toString(){
  return ""String_Node_Str"" + movementFilter + ""String_Node_Str""+ belief+ ""String_Node_Str""+ edgeTransitionDist+ ""String_Node_Str""+ observation+ ""String_Node_Str""+ edge+ ""String_Node_Str""+ parentState+ ""String_Node_Str""+ distanceFromPreviousState+ ""String_Node_Str"";
}","@Override public String toString(){
  return Objects.toStringHelper(this).add(""String_Node_Str"",belief).add(""String_Node_Str"",edge).addValue(observation.getTimestamp()).add(""String_Node_Str"",parentState).add(""String_Node_Str"",movementFilter).toString();
}",0.2150537634408602
189602,"/** 
 * Snaps the observed location to a graph edge, computes edges traveled between observations (when applicable), and returns both sets of edges.
 * @param loc
 * @return
 */
public SnappedEdges snapToGraph(Coordinate fromCoords,Coordinate toCoords){
  Preconditions.checkNotNull(toCoords);
  final RoutingRequest options=OtpGraph.defaultOptions;
  final Vertex snappedVertex=indexService.getClosestVertex(new Coordinate(toCoords.y,toCoords.x),null,options);
  final Builder<Edge> pathTraversed=ImmutableList.builder();
  final com.google.common.collect.ImmutableSet.Builder<Edge> snappedEdges=ImmutableSet.<Edge>builder();
  if (snappedVertex != null && (snappedVertex instanceof StreetLocation)) {
    final StreetLocation snappedStreetLocation=(StreetLocation)snappedVertex;
    final Set<Edge> edges=Sets.newHashSet();
    edges.addAll(Objects.firstNonNull(snappedStreetLocation.getOutgoingStreetEdges(),ImmutableList.<Edge>of()));
    snappedEdges.addAll(edges);
    if (fromCoords != null && !fromCoords.equals2D(toCoords)) {
      final CoordinateSequence movementSeq=JTSFactoryFinder.getGeometryFactory().getCoordinateSequenceFactory().create(new Coordinate[]{new Coordinate(fromCoords.y,fromCoords.x),new Coordinate(toCoords.y,toCoords.x)});
      final Geometry movementGeometry=JTSFactoryFinder.getGeometryFactory().createLineString(movementSeq);
      final List<Edge> minimumConnectingEdges=Objects.firstNonNull(streetMatcher.match(movementGeometry),ImmutableList.<Edge>of());
      for (      final Edge edge : minimumConnectingEdges) {
        pathTraversed.add(edge);
      }
    }
 else {
    }
  }
  return new SnappedEdges(snappedEdges.build(),pathTraversed.build());
}","/** 
 * Snaps the observed location to a graph edge, computes edges traveled between observations (when applicable), and returns both sets of edges.
 * @param loc
 * @return
 */
public SnappedEdges snapToGraph(Coordinate fromCoords,Coordinate toCoords){
  Preconditions.checkNotNull(toCoords);
  final RoutingRequest options=OtpGraph.defaultOptions;
  final Vertex snappedVertex=indexService.getClosestVertex(new Coordinate(toCoords.y,toCoords.x),null,options);
  final Builder<Edge> pathTraversed=ImmutableList.builder();
  final com.google.common.collect.ImmutableSet.Builder<Edge> snappedEdges=ImmutableSet.<Edge>builder();
  if (snappedVertex != null && (snappedVertex instanceof StreetLocation)) {
    final StreetLocation snappedStreetLocation=(StreetLocation)snappedVertex;
    final Set<Edge> edges=Sets.newHashSet();
    edges.addAll(Objects.firstNonNull(snappedStreetLocation.getOutgoing(),ImmutableList.<Edge>of()));
    edges.addAll(Objects.firstNonNull(snappedStreetLocation.getIncoming(),ImmutableList.<Edge>of()));
    for (    Edge edge : edges) {
      if (edge.getGeometry() == null) {
        snappedEdges.addAll(edge.getFromVertex().getOutgoingStreetEdges());
        snappedEdges.addAll(edge.getToVertex().getOutgoingStreetEdges());
      }
 else {
        snappedEdges.add(edge);
      }
    }
    if (fromCoords != null && !fromCoords.equals2D(toCoords)) {
      final CoordinateSequence movementSeq=JTSFactoryFinder.getGeometryFactory().getCoordinateSequenceFactory().create(new Coordinate[]{new Coordinate(fromCoords.y,fromCoords.x),new Coordinate(toCoords.y,toCoords.x)});
      final Geometry movementGeometry=JTSFactoryFinder.getGeometryFactory().createLineString(movementSeq);
      final List<Edge> minimumConnectingEdges=Objects.firstNonNull(streetMatcher.match(movementGeometry),ImmutableList.<Edge>of());
      for (      final Edge edge : minimumConnectingEdges) {
        pathTraversed.add(edge);
      }
    }
 else {
    }
  }
  return new SnappedEdges(snappedEdges.build(),pathTraversed.build());
}",0.8972363831499865
189603,"public static void simulation(){
  Simulation sim=new Simulation();
  Logger.info(""String_Node_Str"" + sim.getSimulationName());
  InferenceService.addSimulationRecords(sim.getSimulationName(),sim.runSimulation());
  instances();
}","public static void simulation(){
  Simulation sim=new Simulation();
  Logger.info(""String_Node_Str"" + sim.getSimulationName());
  if (InferenceService.getInferenceInstance(sim.getSimulationName()) != null) {
    Logger.warn(""String_Node_Str"" + sim.getSimulationName());
    InferenceService.remove(sim.getSimulationName());
  }
  Application.simActor.tell(sim);
  instances();
}",0.4901315789473684
189604,"public VehicleState(InferredGraph graph,Observation observation,StandardRoadTrackingFilter filter,MultivariateGaussian belief,EdgeTransitionDistributions edgeTransitionDist,PathEdge edge,InferredPath path,VehicleState state){
  this.observation=observation;
  this.movementFilter=filter;
  this.belief=belief;
  this.graph=graph;
  this.distanceFromPreviousState=edge.getDistToStartOfEdge();
  if (belief.getInputDimensionality() == 2)   belief.getMean().setElement(0,belief.getMean().getElement(0) - edge.getDistToStartOfEdge());
  this.edgeTransitionDist=edgeTransitionDist;
  this.edge=edge.getInferredEdge();
  this.parentState=state;
  this.path=path;
  final double timeDiff;
  if (observation.getPreviousObservation() != null) {
    timeDiff=observation.getTimestamp().getTime() - observation.getPreviousObservation().getTimestamp().getTime();
  }
 else {
    timeDiff=30d;
  }
  this.movementFilter.setCurrentTimeDiff(timeDiff);
}","public VehicleState(InferredGraph graph,Observation observation,StandardRoadTrackingFilter filter,MultivariateGaussian belief,EdgeTransitionDistributions edgeTransitionDist,PathEdge edge,InferredPath path,VehicleState state){
  this.observation=observation;
  this.movementFilter=filter;
  this.belief=belief;
  this.graph=graph;
  this.distanceFromPreviousState=edge.getDistToStartOfEdge();
  if (belief.getInputDimensionality() == 2)   belief.getMean().setElement(0,belief.getMean().getElement(0) - edge.getDistToStartOfEdge());
  this.edgeTransitionDist=edgeTransitionDist;
  this.edge=edge.getInferredEdge();
  this.parentState=state;
  this.path=path;
  final double timeDiff;
  if (observation.getPreviousObservation() != null) {
    timeDiff=(observation.getTimestamp().getTime() - observation.getPreviousObservation().getTimestamp().getTime()) / 1000d;
  }
 else {
    timeDiff=30d;
  }
  this.movementFilter.setCurrentTimeDiff(timeDiff);
}",0.9946977730646872
189605,"public List<InferenceResultRecord> runSimulation(){
  Observation initialObs;
  try {
    initialObs=Observation.createObservation(this.simulationName,startTime,startCoordinates,null,null,null);
    final SnappedEdges initialEdges=Api.getGraph().snapToGraph(null,initialObs.getObsCoords());
    List<InferredEdge> edges=Lists.newArrayList(InferredGraph.getEmptyEdge());
    for (    Edge edge : initialEdges.getSnappedEdges()) {
      edges.add(inferredGraph.getInferredEdge(edge));
    }
    final InferredEdge currentInferredEdge=edges.get(rng.nextInt(edges.size()));
    InferredPath currentPath=new InferredPath(currentInferredEdge);
    PathEdge currentPathEdge=Iterables.getOnlyElement(currentPath.getEdges());
    VehicleState vehicleState=new VehicleState(this.inferredGraph,initialObs,currentInferredEdge);
    Vector thisStateSample=sampleBelief(vehicleState);
    vehicleState.getBelief().setMean(thisStateSample);
    for (long time=startTime.getTime(); time < endTime.getTime(); time+=frequency * 1000) {
      vehicleState.getMovementFilter().setCurrentTimeDiff(frequency);
      final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
      final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
      currentPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
      currentPathEdge=Iterables.getLast(currentPath.getEdges());
      Vector thisLoc=sampleObservation(vehicleState);
      Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
      final Observation thisObs=Observation.createObservation(""String_Node_Str"",new Date(time),obsCoord,null,null,null);
      results.add(InferenceResultRecord.createInferenceResultRecord(thisObs,currentLocBelief,currentPath.getEdges()));
      Logger.info(""String_Node_Str"" + thisObs);
      vehicleState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,currentPathEdge,currentPath,vehicleState);
    }
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
  return results;
}","public List<InferenceResultRecord> runSimulation(){
  Observation initialObs;
  try {
    initialObs=Observation.createObservation(this.simulationName,startTime,startCoordinates,null,null,null);
    final SnappedEdges initialEdges=Api.getGraph().snapToGraph(null,initialObs.getObsCoords());
    List<InferredEdge> edges=Lists.newArrayList(InferredGraph.getEmptyEdge());
    for (    Edge edge : initialEdges.getSnappedEdges()) {
      edges.add(inferredGraph.getInferredEdge(edge));
    }
    final InferredEdge currentInferredEdge=edges.get(rng.nextInt(edges.size()));
    InferredPath currentPath=new InferredPath(currentInferredEdge);
    PathEdge currentPathEdge=Iterables.getOnlyElement(currentPath.getEdges());
    VehicleState vehicleState=new VehicleState(this.inferredGraph,initialObs,currentInferredEdge);
    Vector thisStateSample=sampleBelief(vehicleState);
    vehicleState.getBelief().setMean(thisStateSample);
    for (long time=startTime.getTime(); time < endTime.getTime(); time+=frequency * 1000) {
      vehicleState.getMovementFilter().setCurrentTimeDiff(frequency);
      final MultivariateGaussian currentLocBelief=vehicleState.getBelief();
      final EdgeTransitionDistributions currentEdgeTrans=vehicleState.getEdgeTransitionDist();
      currentPath=traverseEdge(vehicleState.getEdgeTransitionDist(),currentLocBelief,currentPathEdge,vehicleState.getMovementFilter());
      Vector transStateSample=sampleBelief(vehicleState);
      vehicleState.getBelief().setMean(transStateSample);
      currentPathEdge=Iterables.getLast(currentPath.getEdges());
      Vector thisLoc=sampleObservation(vehicleState);
      Coordinate obsCoord=GeoUtils.convertToLatLon(thisLoc);
      final Observation thisObs=Observation.createObservation(""String_Node_Str"",new Date(time),obsCoord,null,null,null);
      results.add(InferenceResultRecord.createInferenceResultRecord(thisObs,currentLocBelief,currentPath.getEdges()));
      Logger.info(""String_Node_Str"" + thisObs);
      vehicleState=new VehicleState(this.inferredGraph,thisObs,vehicleState.getMovementFilter(),currentLocBelief,currentEdgeTrans,currentPathEdge,currentPath,vehicleState);
    }
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
  return results;
}",0.9735038830516216
189606,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.host_edit);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  viewPager=(ViewPager)findViewById(R.id.pager);
  viewPager.setAdapter(new EditHostFragmentPagerAdapter(getSupportFragmentManager(),this,hostId));
  databaseManager=new DatabaseManager(this);
  Bundle extras=getIntent().getExtras();
  hostId=(BundleUtils.contains(extras,KEY_HOST_ID)) ? extras.getLong(KEY_HOST_ID) : null;
  Host host=(hostId == null) ? null : databaseManager.getHost(hostId);
  if (host != null)   getSupportActionBar().setSubtitle(host.getLabel());
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    if (savedInstanceState.getBoolean(KEY_SHOW_CANCEL_DIALOG))     showCancelDialog();
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.host_edit);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  databaseManager=new DatabaseManager(this);
  Bundle extras=getIntent().getExtras();
  hostId=(BundleUtils.contains(extras,KEY_HOST_ID)) ? extras.getLong(KEY_HOST_ID) : null;
  Host host=(hostId == null) ? null : databaseManager.getHost(hostId);
  viewPager=(ViewPager)findViewById(R.id.pager);
  viewPager.setAdapter(new EditHostFragmentPagerAdapter(getSupportFragmentManager(),this,hostId));
  if (host != null)   getSupportActionBar().setSubtitle(host.getLabel());
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState != null) {
    if (savedInstanceState.getBoolean(KEY_SHOW_CANCEL_DIALOG))     showCancelDialog();
  }
}",0.841031149301826
189607,"public synchronized void initializeApplicationAdapter(List<Application> applications){
  applicationAdapter=new ApplicationArrayAdapter(getActivity(),applications);
  initializeLaunchIntentSpinner();
}","public void initializeApplicationAdapter(List<Application> applications){
  applicationAdapter=new ApplicationArrayAdapter(getActivity(),applications);
  initializeLaunchIntentSpinner();
}",0.9665809768637532
189608,"private void initializeLaunchIntentSpinner(){
  if (applicationAdapter != null) {
    getLaunchIntentSpinner().setAdapter(applicationAdapter);
    setSelectedLaunchIntent();
  }
}","private void initializeLaunchIntentSpinner(){
  if (applicationAdapter != null) {
    getLaunchIntentSpinner().setAdapter(applicationAdapter);
    setSelectedLaunchIntent();
    getView().findViewById(R.id.launch_intent).setVisibility(View.VISIBLE);
    getView().findViewById(R.id.launch_intent_progress_bar).setVisibility(View.GONE);
  }
}",0.6884615384615385
189609,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Spinner launchIntentSpinner=getLaunchIntentSpinner();
  SeekBar delaySeekBar=(SeekBar)getView().findViewById(R.id.delay_seekbar);
  SeekBar tcpConnectTimeoutSeekBar=(SeekBar)getView().findViewById(R.id.tcp_timeout_seekbar);
  final TextView delayDisplay=(TextView)getView().findViewById(R.id.delay_display);
  final TextView tcpConnectTimeoutDisplay=(TextView)getView().findViewById(R.id.tcp_timeout_display);
  launchIntentSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedLaunchIntent=((ApplicationArrayAdapter)parent.getAdapter()).getItem(position).getIntent();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  delaySeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",delayDisplay));
  tcpConnectTimeoutSeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",tcpConnectTimeoutDisplay));
  Bundle args=getArguments();
  if (savedInstanceState != null) {
    delaySeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    tcpConnectTimeoutSeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    selectedLaunchIntent=savedInstanceState.getString(""String_Node_Str"");
    launchIntentSpinner.setAdapter(applicationAdapter);
    setSelectedLaunchIntent();
  }
 else   if (args != null) {
    Long hostId=args.getLong(EditHostActivity.KEY_HOST_ID);
    Host host=databaseManager.getHost(hostId);
    delay=host.getDelay();
    delaySeekBar.setProgress(host.getDelay());
    tcpConnectTimeout=host.getTcpConnectTimeout();
    tcpConnectTimeoutSeekBar.setProgress(host.getTcpConnectTimeout());
    selectedLaunchIntent=host.getLaunchIntentPackage();
  }
 else {
    delaySeekBar.setProgress(Host.DEFAULT_DELAY);
    tcpConnectTimeoutSeekBar.setProgress(Host.DEFAULT_TCP_CONNECT_TIMEOUT);
  }
  if (applicationAdapter == null) {
    initializeApplicationAdapter(Arrays.asList(new Application(""String_Node_Str"",null,""String_Node_Str"")));
    RetrieveApplicationsAsyncTask retrieveAppsTask=new RetrieveApplicationsAsyncTask(getActivity(),this);
    retrieveAppsTask.execute();
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Spinner launchIntentSpinner=getLaunchIntentSpinner();
  SeekBar delaySeekBar=(SeekBar)getView().findViewById(R.id.delay_seekbar);
  SeekBar tcpConnectTimeoutSeekBar=(SeekBar)getView().findViewById(R.id.tcp_timeout_seekbar);
  final TextView delayDisplay=(TextView)getView().findViewById(R.id.delay_display);
  final TextView tcpConnectTimeoutDisplay=(TextView)getView().findViewById(R.id.tcp_timeout_display);
  launchIntentSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedLaunchIntent=((ApplicationArrayAdapter)parent.getAdapter()).getItem(position).getIntent();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  delaySeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",delayDisplay));
  tcpConnectTimeoutSeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",tcpConnectTimeoutDisplay));
  Bundle args=getArguments();
  if (savedInstanceState != null) {
    delaySeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    tcpConnectTimeoutSeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    selectedLaunchIntent=savedInstanceState.getString(""String_Node_Str"");
    launchIntentSpinner.setAdapter(applicationAdapter);
    setSelectedLaunchIntent();
  }
 else   if (args != null) {
    Long hostId=args.getLong(EditHostActivity.KEY_HOST_ID);
    Host host=databaseManager.getHost(hostId);
    delay=host.getDelay();
    delaySeekBar.setProgress(host.getDelay());
    tcpConnectTimeout=host.getTcpConnectTimeout();
    tcpConnectTimeoutSeekBar.setProgress(host.getTcpConnectTimeout());
    selectedLaunchIntent=host.getLaunchIntentPackage();
  }
 else {
    delaySeekBar.setProgress(Host.DEFAULT_DELAY);
    tcpConnectTimeoutSeekBar.setProgress(Host.DEFAULT_TCP_CONNECT_TIMEOUT);
  }
  if (applicationAdapter == null) {
    RetrieveApplicationsAsyncTask retrieveAppsTask=new RetrieveApplicationsAsyncTask(getActivity(),this);
    retrieveAppsTask.execute();
  }
}",0.9420352082438816
189610,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Spinner launchIntentSpinner=getLaunchIntentSpinner();
  SeekBar delaySeekBar=(SeekBar)getView().findViewById(R.id.delay_seekbar);
  SeekBar tcpConnectTimeoutSeekBar=(SeekBar)getView().findViewById(R.id.tcp_timeout_seekbar);
  final TextView delayDisplay=(TextView)getView().findViewById(R.id.delay_display);
  final TextView tcpConnectTimeoutDisplay=(TextView)getView().findViewById(R.id.tcp_timeout_display);
  launchIntentSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedLaunchIntent=((ApplicationArrayAdapter)parent.getAdapter()).getItem(position).getIntent();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  delaySeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",delayDisplay));
  tcpConnectTimeoutSeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",tcpConnectTimeoutDisplay));
  Bundle args=getArguments();
  if (savedInstanceState != null) {
    delaySeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    tcpConnectTimeoutSeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    selectedLaunchIntent=savedInstanceState.getString(""String_Node_Str"");
    launchIntentSpinner.setAdapter(applicationAdapter);
    setSelectedLaunchIntent();
  }
 else   if (args != null) {
    Long hostId=args.getLong(EditHostActivity.KEY_HOST_ID);
    Host host=databaseManager.getHost(hostId);
    delay=host.getDelay();
    delaySeekBar.setProgress(host.getDelay());
    tcpConnectTimeout=host.getTcpConnectTimeout();
    tcpConnectTimeoutSeekBar.setProgress(host.getTcpConnectTimeout());
    selectedLaunchIntent=host.getLaunchIntentPackage();
  }
 else {
    delaySeekBar.setProgress(Host.DEFAULT_DELAY);
    tcpConnectTimeoutSeekBar.setProgress(Host.DEFAULT_TCP_CONNECT_TIMEOUT);
  }
  if (applicationAdapter == null) {
    RetrieveApplicationsAsyncTask retrieveAppsTask=new RetrieveApplicationsAsyncTask(getActivity(),this);
    retrieveAppsTask.execute();
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  Spinner launchIntentSpinner=getLaunchIntentSpinner();
  SeekBar delaySeekBar=(SeekBar)getView().findViewById(R.id.delay_seekbar);
  SeekBar tcpConnectTimeoutSeekBar=(SeekBar)getView().findViewById(R.id.tcp_timeout_seekbar);
  final TextView delayDisplay=(TextView)getView().findViewById(R.id.delay_display);
  final TextView tcpConnectTimeoutDisplay=(TextView)getView().findViewById(R.id.tcp_timeout_display);
  launchIntentSpinner.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedLaunchIntent=((ApplicationArrayAdapter)parent.getAdapter()).getItem(position).getIntent();
    }
    @Override public void onNothingSelected(    AdapterView<?> parent){
    }
  }
);
  delaySeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",delayDisplay));
  tcpConnectTimeoutSeekBar.setOnSeekBarChangeListener(new FieldSettingSeekBarChangeListener(""String_Node_Str"",tcpConnectTimeoutDisplay));
  Bundle args=getArguments();
  if (savedInstanceState != null) {
    delaySeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    tcpConnectTimeoutSeekBar.setProgress(savedInstanceState.getInt(""String_Node_Str""));
    selectedLaunchIntent=savedInstanceState.getString(""String_Node_Str"");
    launchIntentSpinner.setAdapter(applicationAdapter);
    setSelectedLaunchIntent();
  }
 else   if (args != null) {
    Long hostId=args.getLong(EditHostActivity.KEY_HOST_ID);
    Host host=databaseManager.getHost(hostId);
    delay=host.getDelay();
    delaySeekBar.setProgress(host.getDelay());
    tcpConnectTimeout=host.getTcpConnectTimeout();
    tcpConnectTimeoutSeekBar.setProgress(host.getTcpConnectTimeout());
    selectedLaunchIntent=host.getLaunchIntentPackage();
  }
 else {
    delaySeekBar.setProgress(delay);
    tcpConnectTimeoutSeekBar.setProgress(tcpConnectTimeout);
  }
  if (applicationAdapter == null) {
    RetrieveApplicationsAsyncTask retrieveAppsTask=new RetrieveApplicationsAsyncTask(getActivity(),this);
    retrieveAppsTask.execute();
  }
}",0.972578505086245
189611,"@Override protected void onPostExecute(KnockResult result){
  FragmentManager fragmentManager=activity.getSupportFragmentManager();
  Fragment dialog=fragmentManager.findFragmentByTag(ProgressDialogFragment.TAG);
  if (dialog != null)   ((ProgressDialogFragment)dialog).dismiss();
  if (result.isSuccess()) {
    if (StringUtils.isNotBlank(result.getLaunchIntentPackage())) {
      Intent launchIntent=activity.getPackageManager().getLaunchIntentForPackage(result.getLaunchIntentPackage());
      activity.startActivity(launchIntent);
    }
 else {
      showToast(activity.getString(R.string.toast_msg_knocking_complete));
    }
  }
 else {
    showToast(activity.getString(R.string.toast_msg_knocking_failed) + result.getError());
  }
}","@Override protected void onPostExecute(KnockResult result){
  FragmentManager fragmentManager=activity.getSupportFragmentManager();
  Fragment dialog=fragmentManager.findFragmentByTag(ProgressDialogFragment.TAG);
  if (dialog != null)   ((ProgressDialogFragment)dialog).dismiss();
  if (result.isSuccess()) {
    if (StringUtils.isNotBlank(result.getLaunchIntentPackage())) {
      Intent launchIntent=activity.getPackageManager().getLaunchIntentForPackage(result.getLaunchIntentPackage());
      if (launchIntent == null) {
        showToast(""String_Node_Str"" + result.getLaunchIntentPackage());
      }
 else {
        activity.startActivity(launchIntent);
      }
    }
 else {
      showToast(activity.getString(R.string.toast_msg_knocking_complete));
    }
  }
 else {
    showToast(activity.getString(R.string.toast_msg_knocking_failed) + result.getError());
  }
}",0.8146766169154229
189612,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  hostDataManager=new HostDataManager(getActivity());
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  hostDataManager=new HostDataManager(getActivity());
}",0.918429003021148
189613,"public RetrieveInstalledApplicationsTask(Context context,String selectedLaunchIntent){
  this.context=context;
  this.dialog=new ProgressDialog(context);
  this.selectedLaunchIntent=selectedLaunchIntent;
}","public RetrieveInstalledApplicationsTask(String selectedLaunchIntent){
  this.selectedLaunchIntent=selectedLaunchIntent;
}",0.746177370030581
189614,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  EditText delayEditText=getDelayEditText();
  Bundle args=getArguments();
  String selectedLaunchIntent=null;
  if (savedInstanceState != null) {
    delayEditText.setText(savedInstanceState.getString(DELAY_BUNDLE_KEY));
    selectedLaunchIntent=savedInstanceState.getString(LAUNCH_INTENT_BUNDLE_KEY);
  }
 else   if (args != null) {
    Long hostId=args.getLong(EditHostActivity.HOST_ID_BUNDLE_KEY);
    Host host=hostDataManager.getHost(hostId);
    delayEditText.setText(new Integer(host.getDelay()).toString());
    selectedLaunchIntent=host.getLaunchIntentPackage();
  }
  RetrieveInstalledApplicationsTask retrieveAppsTask=new RetrieveInstalledApplicationsTask(getActivity(),selectedLaunchIntent);
  retrieveAppsTask.execute();
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  EditText delayEditText=getDelayEditText();
  Bundle args=getArguments();
  String selectedLaunchIntent=null;
  if (savedInstanceState != null) {
    delayEditText.setText(savedInstanceState.getString(DELAY_BUNDLE_KEY));
    selectedLaunchIntent=savedInstanceState.getString(LAUNCH_INTENT_BUNDLE_KEY);
  }
 else   if (args != null) {
    Long hostId=args.getLong(EditHostActivity.HOST_ID_BUNDLE_KEY);
    Host host=hostDataManager.getHost(hostId);
    delayEditText.setText(new Integer(host.getDelay()).toString());
    selectedLaunchIntent=host.getLaunchIntentPackage();
  }
  FragmentTransaction ft=getFragmentManager().beginTransaction();
  Fragment prev=getFragmentManager().findFragmentByTag(""String_Node_Str"");
  if (prev != null)   ft.remove(prev);
  ft.addToBackStack(null);
  dialogFragment=ProgressDialogFragment.newInstance(getString(R.string.progress_dialog_retrieving_applications));
  dialogFragment.show(ft,""String_Node_Str"");
  RetrieveInstalledApplicationsTask retrieveAppsTask=new RetrieveInstalledApplicationsTask(selectedLaunchIntent);
  retrieveAppsTask.execute();
}",0.7843326885880078
189615,"@Override protected void onPreExecute(){
  dialog.setMessage(context.getResources().getString(R.string.progress_dialog_retrieving_applications));
  dialog.setCancelable(false);
  dialog.show();
}","@Override protected void onPreExecute(){
}",0.3544303797468354
189616,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(DELAY_BUNDLE_KEY,getDelayEditText().getText().toString());
  outState.putString(LAUNCH_INTENT_BUNDLE_KEY,((Application)getLaunchIntentSpinner().getSelectedItem()).getIntent());
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(DELAY_BUNDLE_KEY,getDelayEditText().getText().toString());
  if (getLaunchIntentSpinner().getSelectedItem() != null)   outState.putString(LAUNCH_INTENT_BUNDLE_KEY,((Application)getLaunchIntentSpinner().getSelectedItem()).getIntent());
}",0.91131498470948
189617,"@Override protected void onPostExecute(List<Application> applications){
  ArrayAdapter<Application> adapter=new ApplicationArrayAdapter(getActivity(),applications);
  Spinner launchAppSpinner=getLaunchIntentSpinner();
  launchAppSpinner.setAdapter(adapter);
  if (selectedLaunchIntent != null) {
    for (int i=0; i < adapter.getCount(); i++) {
      Application application=adapter.getItem(i);
      if (application.getIntent().equals(selectedLaunchIntent)) {
        launchAppSpinner.setSelection(i);
        break;
      }
    }
  }
  if (dialog.isShowing())   dialog.dismiss();
}","@Override protected void onPostExecute(List<Application> applications){
  ApplicationArrayAdapter adapter=new ApplicationArrayAdapter(getActivity(),applications);
  Spinner launchAppSpinner=getLaunchIntentSpinner();
  launchAppSpinner.setAdapter(adapter);
  if (selectedLaunchIntent != null) {
    for (int i=0; i < adapter.getCount(); i++) {
      Application application=adapter.getItem(i);
      if (application.getIntent().equals(selectedLaunchIntent)) {
        launchAppSpinner.setSelection(i);
        break;
      }
    }
  }
  if (dialogFragment.isAdded())   dialogFragment.dismiss();
}",0.9235993208828522
189618,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.edit_host);
  resources=getResources();
  hostDataManager=new HostDataManager(getApplicationContext());
  hostFragment=new HostFragment();
  portsFragment=new PortsFragment();
  miscFragment=new MiscFragment();
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  ActionBar.Tab hostTab=getSupportActionBar().newTab();
  hostTab.setText(resources.getString(R.string.host_tab_name));
  hostTab.setTabListener(this);
  ActionBar.Tab portsTab=getSupportActionBar().newTab();
  portsTab.setText(resources.getString(R.string.ports_tab_name));
  portsTab.setTabListener(this);
  ActionBar.Tab miscTab=getSupportActionBar().newTab();
  miscTab.setText(resources.getString(R.string.misc_tab_name));
  miscTab.setTabListener(this);
  getSupportActionBar().addTab(hostTab);
  getSupportActionBar().addTab(portsTab);
  getSupportActionBar().addTab(miscTab);
  if (savedInstanceState != null) {
    getSupportActionBar().setSelectedNavigationItem(savedInstanceState.getInt(""String_Node_Str""));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.edit_host);
  hostDataManager=new HostDataManager(getApplicationContext());
  getSupportActionBar().setHomeButtonEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  addTab(getString(R.string.host_tab_name));
  addTab(getString(R.string.ports_tab_name));
  addTab(getString(R.string.misc_tab_name));
  if (savedInstanceState != null) {
    getSupportActionBar().setSelectedNavigationItem(savedInstanceState.getInt(""String_Node_Str""));
  }
}",0.5807469752761705
189619,"private void saveHost(){
  String hostLabel=hostFragment.getHostLabelEditTextView().getText().toString();
  String hostname=hostFragment.getHostnameEditTextView().getText().toString();
  LinearLayout portListView=portsFragment.getPortListLinearLayoutView();
  if (portListView != null) {
    for (int i=0; i < portListView.getChildCount(); i++) {
      View row=portListView.getChildAt(i);
      EditText portEditText=(EditText)row.findViewById(R.id.port_row_port);
      Spinner protocolSpinner=(Spinner)row.findViewById(R.id.port_row_protocol);
      System.out.println(portEditText.getText().toString());
      System.out.println(protocolSpinner.getSelectedItem().toString());
    }
  }
  EditText delayEditTextView=miscFragment.getDelayEdit();
  int delay=0;
  if (delayEditTextView != null) {
    String delayStr=delayEditTextView.getText().toString();
    delay=(delayStr != null && delayStr.length() > 0) ? Integer.parseInt(delayStr) : 0;
  }
  Host host=new Host();
  host.setLabel(hostLabel);
  host.setHostname(hostname);
  host.setDelay(delay);
}","private void saveHost(){
  HostFragment hostFragment=(HostFragment)getSupportFragmentManager().findFragmentByTag(getString(R.string.host_tab_name));
  PortsFragment portsFragment=(PortsFragment)getSupportFragmentManager().findFragmentByTag(getString(R.string.ports_tab_name));
  MiscFragment miscFragment=(MiscFragment)getSupportFragmentManager().findFragmentByTag(getString(R.string.misc_tab_name));
  String hostLabel=hostFragment.getHostLabelEditTextView().getText().toString();
  String hostname=hostFragment.getHostnameEditTextView().getText().toString();
  if (portsFragment != null) {
    LinearLayout portListView=portsFragment.getPortListLinearLayoutView();
    for (int i=0; i < portListView.getChildCount(); i++) {
      View row=portListView.getChildAt(i);
      EditText portEditText=(EditText)row.findViewById(R.id.port_row_port);
      Spinner protocolSpinner=(Spinner)row.findViewById(R.id.port_row_protocol);
      System.out.println(portEditText.getText().toString());
      System.out.println(protocolSpinner.getSelectedItem().toString());
    }
  }
  int delay=0;
  if (miscFragment != null) {
    EditText delayEditTextView=miscFragment.getDelayEdit();
    String delayStr=delayEditTextView.getText().toString();
    delay=(delayStr != null && delayStr.length() > 0) ? Integer.parseInt(delayStr) : 0;
  }
  Host host=new Host();
  host.setLabel(hostLabel);
  host.setHostname(hostname);
  host.setDelay(delay);
}",0.7799196787148595
189620,"@Override public void onTabSelected(Tab tab,FragmentTransaction ft){
switch (tab.getPosition()) {
case TAB_HOST_INDEX:
    ft.replace(R.id.fragment_content,hostFragment,resources.getString(R.string.host_tab_name));
  break;
case TAB_PORTS_INDEX:
ft.replace(R.id.fragment_content,portsFragment,resources.getString(R.string.ports_tab_name));
break;
case TAB_MISC_INDEX:
ft.replace(R.id.fragment_content,miscFragment,resources.getString(R.string.misc_tab_name));
break;
default :
break;
}
}","@Override public void onTabSelected(Tab tab,FragmentTransaction ft){
  Fragment hostFragment=getSupportFragmentManager().findFragmentByTag(getString(R.string.host_tab_name));
  Fragment portsFragment=getSupportFragmentManager().findFragmentByTag(getString(R.string.ports_tab_name));
  Fragment miscFragment=getSupportFragmentManager().findFragmentByTag(getString(R.string.misc_tab_name));
switch (tab.getPosition()) {
case TAB_HOST_INDEX:
    if (hostFragment == null) {
      hostFragment=new HostFragment();
      ft.add(R.id.fragment_content,hostFragment,getString(R.string.host_tab_name));
    }
  ft.show(hostFragment);
if (portsFragment != null) ft.hide(portsFragment);
if (miscFragment != null) ft.hide(miscFragment);
break;
case TAB_PORTS_INDEX:
if (portsFragment == null) {
portsFragment=new PortsFragment();
ft.add(R.id.fragment_content,portsFragment,getString(R.string.ports_tab_name));
}
ft.show(portsFragment);
if (hostFragment != null) ft.hide(hostFragment);
if (miscFragment != null) ft.hide(miscFragment);
break;
case TAB_MISC_INDEX:
if (miscFragment == null) {
miscFragment=new MiscFragment();
ft.add(R.id.fragment_content,miscFragment,getString(R.string.misc_tab_name));
}
ft.show(miscFragment);
if (hostFragment != null) ft.hide(hostFragment);
if (portsFragment != null) ft.hide(portsFragment);
break;
}
}",0.3368304803975704
189621,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(""String_Node_Str"",getSupportActionBar().getSelectedNavigationIndex());
  outState.putIntArray(""String_Node_Str"",new int[]{});
  outState.putIntArray(""String_Node_Str"",new int[]{});
  outState.putString(""String_Node_Str"",null);
  outState.putString(""String_Node_Str"",null);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(""String_Node_Str"",getSupportActionBar().getSelectedNavigationIndex());
}",0.6552901023890785
189622,"@Override public void suggestionSelected(TransportSuggestion s){
  connector.setOnRoundtrip(true);
  serverRpc.suggestionSelected(s.index);
  stopAskingForSuggestions();
}","@Override public void suggestionSelected(TransportSuggestion s){
  serverRpc.suggestionSelected(s.index);
  stopAskingForSuggestions();
}",0.8896103896103896
189623,"/** 
 * Print local variables on a suspended thread. Takes the topmost stack frame and lists all local variables and their values.
 * @param t suspended thread
 */
protected void printLocalVariables(ThreadReference t){
  if (!t.isSuspended()) {
    return;
  }
  try {
    if (t.frameCount() == 0) {
      System.out.println(""String_Node_Str"");
    }
 else {
      StackFrame sf=t.frame(0);
      List<LocalVariable> locals=sf.visibleVariables();
      if (locals.size() == 0) {
        System.out.println(""String_Node_Str"");
        return;
      }
      for (      LocalVariable lv : locals) {
        System.out.println(lv.typeName() + ""String_Node_Str"" + lv.name()+ ""String_Node_Str""+ sf.getValue(lv));
      }
    }
  }
 catch (  IncompatibleThreadStateException ex) {
    Logger.getLogger(Debugger.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  AbsentInformationException ex) {
    System.out.println(""String_Node_Str"");
  }
}","/** 
 * Print local variables on a suspended thread. Takes the topmost stack frame and lists all local variables and their values.
 * @param t suspended thread
 */
protected void printLocalVariables(ThreadReference t){
  if (!t.isSuspended()) {
    return;
  }
  try {
    if (t.frameCount() == 0) {
      System.out.println(""String_Node_Str"");
    }
 else {
      StackFrame sf=t.frame(0);
      List<LocalVariable> locals=sf.visibleVariables();
      if (locals.isEmpty()) {
        System.out.println(""String_Node_Str"");
        return;
      }
      for (      LocalVariable lv : locals) {
        System.out.println(lv.typeName() + ""String_Node_Str"" + lv.name()+ ""String_Node_Str""+ sf.getValue(lv));
      }
    }
  }
 catch (  IncompatibleThreadStateException ex) {
    Logger.getLogger(Debugger.class.getName()).log(Level.SEVERE,null,ex);
  }
catch (  AbsentInformationException ex) {
    System.out.println(""String_Node_Str"");
  }
}",0.9893730074388948
189624,"public static ConfidenceLevel toConfidenceLevel(String dqQuality){
  ConfidenceLevel confidenceLevel;
  if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Certainly;
  }
 else   if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Possibly;
  }
 else   if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Apparently;
  }
 else   if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Perhaps;
  }
 else {
    confidenceLevel=null;
    Marker qualityContext=ConversionContext.getDetachedMarker(""String_Node_Str"");
    ConversionContext.addReference(qualityContext);
    try {
      logger.warn(ConversionContext.getContext(),""String_Node_Str"",dqQuality);
    }
  finally {
      ConversionContext.removeReference(qualityContext);
    }
  }
  return confidenceLevel;
}","public static ConfidenceLevel toConfidenceLevel(String dqQuality){
  ConfidenceLevel confidenceLevel;
  if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Certainly;
  }
 else   if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Possibly;
  }
 else   if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Apparently;
  }
 else   if (""String_Node_Str"".equals(dqQuality)) {
    confidenceLevel=ConfidenceLevel.Perhaps;
  }
 else {
    confidenceLevel=null;
    if (dqQuality != null) {
      Marker qualityContext=ConversionContext.getDetachedMarker(""String_Node_Str"");
      ConversionContext.addReference(qualityContext);
      try {
        logger.warn(ConversionContext.getContext(),""String_Node_Str"",dqQuality);
      }
  finally {
        ConversionContext.removeReference(qualityContext);
      }
    }
  }
  return confidenceLevel;
}",0.9458403126744837
189625,"@BeforeClass public void setUp() throws Exception {
  SequentialIdentifierGenerator.reset();
  URL gedcomUrl=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File gedcomFile=new File(gedcomUrl.toURI());
  ModelParser modelParser=new ModelParser();
  gedcom=modelParser.parseGedcom(gedcomFile);
  assertNotNull(gedcom);
  assertNotNull(gedcom.getPeople());
  assertNotNull(gedcom.getSources());
  assertNotNull(gedcom.getRepositories());
}","@BeforeClass public void setUp() throws Exception {
  SequentialIdentifierGenerator.reset();
  URL gedcomUrl=this.getClass().getClassLoader().getResource(""String_Node_Str"");
  File gedcomFile=new File(gedcomUrl.toURI());
  ModelParser modelParser=new ModelParser();
  gedcom=modelParser.parseGedcom(gedcomFile);
  assertNotNull(gedcom);
  assertNotNull(gedcom.getPeople());
  assertEquals(gedcom.getPeople().size(),5);
  assertNotNull(gedcom.getFamilies());
  assertEquals(gedcom.getFamilies().size(),2);
  assertNotNull(gedcom.getSources());
  assertEquals(gedcom.getSources().size(),1);
  assertNotNull(gedcom.getRepositories());
  assertEquals(gedcom.getRepositories().size(),1);
}",0.8
189626,"private void processFacts(Person gedxPerson,List<EventFact> facts,GedcomxConversionResult result) throws IOException {
  if (facts == null) {
    return;
  }
  for (  EventFact fact : facts) {
    Fact gedxFact=FactMapper.toFact(fact,result);
    if (gedxFact == null) {
      fact.getType();
      if (fact.getTag() != null && fact.getTag().equalsIgnoreCase(""String_Node_Str"")) {
        processSex(gedxPerson,fact);
      }
    }
  }
}","private void processFacts(Person gedxPerson,List<EventFact> facts,GedcomxConversionResult result) throws IOException {
  if (facts == null) {
    return;
  }
  for (  EventFact fact : facts) {
    Fact gedxFact=FactMapper.toFact(fact,result);
    if (gedxFact == null) {
      fact.getType();
      if (fact.getTag() != null && fact.getTag().equalsIgnoreCase(""String_Node_Str"")) {
        processSex(gedxPerson,fact);
      }
    }
    if (gedxFact != null) {
      gedxPerson.addFact(gedxFact);
    }
  }
}",0.9258474576271186
189627,"/** 
 * Load/reload the main and advanced configuration.
 */
public static void load(){
  if (!CONFIG_FILE.exists()) {
    FileUtils.copyJarConfig(CONFIG_FILE);
    if (!ADVANCED_FILE.exists())     FileUtils.copyJarConfig(ADVANCED_FILE);
  }
 else {
    loadFile(config,CONFIG_FILE);
    if (!ADVANCED_FILE.exists())     FileUtils.copyJarConfig(ADVANCED_FILE);
    loadFile(advanced,ADVANCED_FILE);
    configVersion=advanced.getInt(""String_Node_Str"",4);
    if (configVersion < 8)     ConfigUpdater.importFrom(configVersion);
 else {
      for (      ConfigValue<Boolean> v : booleans.values())       v.load();
      for (      ConfigValue<Integer> v : integers.values())       v.load();
      alias.load();
      if (configVersion == 8)       loadLightWeight();
    }
    advanced.set(""String_Node_Str"",CONFIG_VERSION);
    configVersion=CONFIG_VERSION;
    write();
  }
  loadWorlds();
}","/** 
 * Load/reload the main and advanced configuration.
 */
public static void load(){
  if (!CONFIG_FILE.exists()) {
    FileUtils.copyJarConfig(CONFIG_FILE);
    if (!ADVANCED_FILE.exists())     FileUtils.copyJarConfig(ADVANCED_FILE);
  }
 else {
    loadFile(config,CONFIG_FILE);
    if (!ADVANCED_FILE.exists())     FileUtils.copyJarConfig(ADVANCED_FILE);
    loadFile(advanced,ADVANCED_FILE);
    configVersion=advanced.getInt(""String_Node_Str"",4);
    if (configVersion < 8)     ConfigUpdater.importFrom(configVersion);
 else {
      for (      ConfigValue<Boolean> v : booleans.values())       v.load();
      CreeperLog.setDebug(getBool(CfgVal.DEBUG));
      for (      ConfigValue<Integer> v : integers.values())       v.load();
      alias.load();
      if (configVersion == 8)       loadLightWeight();
    }
    advanced.set(""String_Node_Str"",CONFIG_VERSION);
    configVersion=CONFIG_VERSION;
    write();
  }
  loadWorlds();
}",0.9726775956284152
189628,"/** 
 * Replace all explosions near a player.
 * @param sender The sender. If it is the console, then the command is ignored.
 * @param args The command arguments.
 */
private void healNear(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    boolean hasPermission=checkPermissions(player,""String_Node_Str"",""String_Node_Str"");
    Player target;
    if (args.length > 1) {
      hasPermission=hasPermission || checkPermissions(player,""String_Node_Str"");
      if (!hasPermission) {
        player.sendMessage(getMessage(""String_Node_Str"",player.getWorld().getName(),sender.getName(),null,null,null,null));
        return;
      }
      target=Bukkit.getServer().getPlayer(args[1]);
      if (target == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
 else {
      hasPermission=hasPermission || checkPermissions(player,""String_Node_Str"");
      if (!hasPermission) {
        sender.sendMessage(getMessage(""String_Node_Str"",null,sender.getName(),null,null,null,null));
        return;
      }
      target=player;
    }
    ExplodedBlockManager.replaceNear(target);
  }
 else   if (args.length > 1) {
    Player target=Bukkit.getServer().getPlayer(args[1]);
    if (target == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    ExplodedBlockManager.replaceNear(target);
  }
 else   sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}","/** 
 * Replace all explosions near a player.
 * @param sender The sender. If it is the console, then the command is ignored.
 * @param args The command arguments.
 */
private void healNear(CommandSender sender,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    boolean hasPermission=checkPermissions(player,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    Player target;
    if (args.length > 1) {
      if (!hasPermission) {
        player.sendMessage(getMessage(""String_Node_Str"",player.getWorld().getName(),sender.getName(),null,null,null,null));
        return;
      }
      target=Bukkit.getServer().getPlayer(args[1]);
      if (target == null) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
 else {
      hasPermission=hasPermission || checkPermissions(player,""String_Node_Str"");
      if (!hasPermission) {
        sender.sendMessage(getMessage(""String_Node_Str"",null,sender.getName(),null,null,null,null));
        return;
      }
      target=player;
    }
    ExplodedBlockManager.replaceNear(target);
  }
 else   if (args.length > 1) {
    Player target=Bukkit.getServer().getPlayer(args[1]);
    if (target == null) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    ExplodedBlockManager.replaceNear(target);
  }
 else   sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
}",0.5613191343181038
189629,"/** 
 * Handle the commands concerning boolean settings.
 * @param world The world in which to change the setting.
 * @param key The setting to change.
 * @param args The arguments of the command.
 * @param setting The name of the setting.
 * @param sender The sender who performed the command.
 */
private void booleanCmd(WorldConfig world,WCfgVal key,String[] args,String setting,CommandSender sender){
  if (sender instanceof Player && !checkPermissions((Player)sender,""String_Node_Str""))   sender.sendMessage(getMessage(""String_Node_Str"",null,sender.getName(),null,null,null,null));
  if (args.length == 1)   world.setBool(key,!world.getBool(key));
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))   world.setBool(key,true);
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))   world.setBool(key,false);
 else {
    sender.sendMessage(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + setting + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(ChatColor.GREEN + setting + ""String_Node_Str""+ world.getBool(key));
}","/** 
 * Handle the commands concerning boolean settings.
 * @param world The world in which to change the setting.
 * @param key The setting to change.
 * @param args The arguments of the command.
 * @param setting The name of the setting.
 * @param sender The sender who performed the command.
 */
private void booleanCmd(WorldConfig world,WCfgVal key,String[] args,String setting,CommandSender sender){
  if (sender instanceof Player && !checkPermissions((Player)sender,""String_Node_Str""))   sender.sendMessage(getMessage(""String_Node_Str"",null,sender.getName(),null,null,null,null));
  if (world == null) {
    for (    World w : Bukkit.getServer().getWorlds())     booleanCmd(CreeperConfig.getWorld(w),key,args,setting,sender);
    return;
  }
  if (args.length == 1)   world.setBool(key,!world.getBool(key));
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))   world.setBool(key,true);
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"") || args[1].equalsIgnoreCase(""String_Node_Str""))   world.setBool(key,false);
 else {
    sender.sendMessage(""String_Node_Str"" + args[0] + ""String_Node_Str"");
    sender.sendMessage(""String_Node_Str"" + setting + ""String_Node_Str"");
    return;
  }
  sender.sendMessage(ChatColor.GREEN + setting + ""String_Node_Str""+ world.getBool(key));
}",0.935933147632312
189630,"/** 
 * Create a new CreeperBlock of the right class. Factory method that should be used as a constructor.
 * @param blockState The block to be represented.
 * @return A new CreeperBlock of the right subclass.
 */
public static CreeperBlock newBlock(BlockState blockState){
  if (PluginHandler.isSpoutEnabled() && SpoutBlock.isCustomBlock(blockState))   return new SpoutBlock(blockState);
  if (blockState instanceof InventoryHolder)   return new CreeperChest(blockState);
  if (blockState.getType().hasGravity())   return new CreeperPhysicsBlock(blockState);
switch (blockState.getType()) {
case BED_BLOCK:
    return new CreeperBed(blockState);
case RAILS:
case POWERED_RAIL:
case DETECTOR_RAIL:
  return new CreeperRail(blockState);
case SKULL:
return new CreeperHead(blockState);
case PISTON_BASE:
case PISTON_STICKY_BASE:
case PISTON_EXTENSION:
return new CreeperPiston(blockState);
case WOODEN_DOOR:
case IRON_DOOR_BLOCK:
return new CreeperDoor(blockState);
case NOTE_BLOCK:
return new CreeperNoteBlock((NoteBlock)blockState);
case SIGN_POST:
case WALL_SIGN:
return new CreeperSign((Sign)blockState);
case MOB_SPAWNER:
return new CreeperMonsterSpawner((CreatureSpawner)blockState);
case WOOD_PLATE:
case STONE_PLATE:
return new CreeperPlate(blockState);
case GRASS:
return new CreeperGrass(blockState);
case SMOOTH_BRICK:
case SMOOTH_STAIRS:
return new CreeperBrick(blockState);
case TNT:
case FIRE:
case AIR:
return null;
default :
return new CreeperBlock(blockState);
}
}","/** 
 * Create a new CreeperBlock of the right class. Factory method that should be used as a constructor.
 * @param blockState The block to be represented.
 * @return A new CreeperBlock of the right subclass.
 */
public static CreeperBlock newBlock(BlockState blockState){
  if (PluginHandler.isSpoutEnabled() && SpoutBlock.isCustomBlock(blockState))   return new SpoutBlock(blockState);
  if (blockState instanceof InventoryHolder)   return new CreeperChest(blockState);
  if (blockState.getType().hasGravity())   return new CreeperPhysicsBlock(blockState);
switch (blockState.getType()) {
case BED_BLOCK:
    return new CreeperBed(blockState);
case RAILS:
case POWERED_RAIL:
case DETECTOR_RAIL:
  return new CreeperRail(blockState);
case SKULL:
return new CreeperHead(blockState);
case PISTON_BASE:
case PISTON_STICKY_BASE:
case PISTON_EXTENSION:
return new CreeperPiston(blockState);
case WOODEN_DOOR:
case IRON_DOOR_BLOCK:
return new CreeperDoor(blockState);
case NOTE_BLOCK:
return new CreeperNoteBlock((NoteBlock)blockState);
case SIGN_POST:
case WALL_SIGN:
return new CreeperSign((Sign)blockState);
case MOB_SPAWNER:
return new CreeperMonsterSpawner((CreatureSpawner)blockState);
case WOOD_PLATE:
case STONE_PLATE:
return new CreeperPlate(blockState);
case GRASS:
return new CreeperGrass(blockState);
case SMOOTH_BRICK:
case SMOOTH_STAIRS:
return new CreeperBrick(blockState);
case WOOD_BUTTON:
case STONE_BUTTON:
return new CreeperButton(blockState);
case TNT:
case FIRE:
case AIR:
return null;
default :
return new CreeperBlock(blockState);
}
}",0.9752720079129574
189631,"/** 
 * Add an element to the map. It is placed in the correct zone, created if necessary.
 * @param el The element.
 * @param x The x coordinate.
 * @param y The y coordinate.
 */
public void addElement(T el,double x,double y){
  if (el == null)   return;
  Point p=new Point((int)(x / BLOCK_SIZE),(int)(y / BLOCK_SIZE));
  LinkedList<T> list=map.get(p);
  if (list == null) {
    list=new LinkedList<T>();
    map.put(p,new LinkedList<T>());
  }
  list.add(el);
}","/** 
 * Add an element to the map. It is placed in the correct zone, created if necessary.
 * @param el The element.
 * @param x The x coordinate.
 * @param y The y coordinate.
 */
public void addElement(T el,double x,double y){
  if (el == null)   return;
  Point p=new Point((int)(x / BLOCK_SIZE),(int)(y / BLOCK_SIZE));
  LinkedList<T> list=map.get(p);
  if (list == null) {
    list=new LinkedList<T>();
    map.put(p,list);
  }
  list.add(el);
}",0.974863387978142
189632,"@Override public boolean replace(boolean shouldDrop){
  Painting p=getWorld().spawn(location.getBlock().getRelative(hanging.getAttachedFace()).getLocation(),Painting.class);
  p.teleport(location);
  p.setFacingDirection(hanging.getFacing(),true);
  p.setArt(((Painting)hanging).getArt());
  return true;
}","@Override public boolean replace(boolean shouldDrop){
  try {
    Painting p=getWorld().spawn(location.getBlock().getRelative(hanging.getAttachedFace()).getLocation(),Painting.class);
    p.teleport(location);
    p.setFacingDirection(hanging.getFacing(),true);
    p.setArt(((Painting)hanging).getArt());
  }
 catch (  IllegalArgumentException e) {
    return false;
  }
  return true;
}",0.7809798270893372
189633,"@Override public final boolean replace(boolean shouldDrop){
  Block block=getBlock();
  int blockId=block.getTypeId();
  if (!CreeperConfig.overwriteBlocks && !isEmpty(blockId)) {
    if (CreeperConfig.dropDestroyedBlocks)     drop();
    return true;
  }
 else   if (CreeperConfig.overwriteBlocks && !isEmpty(blockId) && CreeperConfig.dropDestroyedBlocks) {
    CreeperBlock b=CreeperBlock.newBlock(block.getState());
    b.drop();
    b.remove();
  }
  if (!shouldDrop && isDependent(getTypeId()) && isEmpty(getBlock().getRelative(getAttachingFace()).getTypeId())) {
    delay_replacement();
    return true;
  }
 else   update();
  checkForAscendingRails();
  return true;
}","@Override public final boolean replace(boolean shouldDrop){
  Block block=getBlock();
  int blockId=block.getTypeId();
  if (!CreeperConfig.overwriteBlocks && !isEmpty(blockId)) {
    if (CreeperConfig.dropDestroyedBlocks)     drop();
    return true;
  }
 else   if (CreeperConfig.overwriteBlocks && !isEmpty(blockId) && CreeperConfig.dropDestroyedBlocks) {
    CreeperBlock b=CreeperBlock.newBlock(block.getState());
    if (b != null) {
      b.drop();
      b.remove();
    }
  }
  if (!shouldDrop && isDependent(getTypeId()) && isEmpty(getBlock().getRelative(getAttachingFace()).getTypeId())) {
    delay_replacement();
    return true;
  }
 else   update();
  checkForAscendingRails();
  return true;
}",0.9631768953068592
189634,"@Override public void clean(){
  Iterator<LinkedList<CreeperExplosion>> iter=map.values().iterator();
  while (iter.hasNext()) {
    LinkedList<CreeperExplosion> list=iter.next();
    Iterator<CreeperExplosion> it=list.iterator();
    while (it.hasNext()) {
      CreeperExplosion e=it.next();
      if (e.getBlockList().isEmpty())       it.remove();
    }
    if (list.isEmpty())     iter.remove();
  }
}","@Override public void clean(){
  Iterator<LinkedList<CreeperExplosion>> iter=map.values().iterator();
  while (iter.hasNext()) {
    LinkedList<CreeperExplosion> list=iter.next();
    Iterator<CreeperExplosion> it=list.iterator();
    while (it.hasNext()) {
      CreeperExplosion e=it.next();
      if (e.isEmpty())       it.remove();
    }
    if (list.isEmpty())     iter.remove();
  }
}",0.981132075471698
189635,"public static WorldConfig loadWorld(World world){
  String name=world.getName();
  WorldConfig returnValue=world_config.get(name);
  if (returnValue == null) {
    try {
      returnValue=new WorldConfig(name,getDataFolder());
    }
 catch (    Exception e) {
      log.severe(""String_Node_Str"" + name);
      log.severe(e.getMessage());
    }
  }
  return returnValue;
}","public static WorldConfig loadWorld(World world){
  String name=world.getName();
  WorldConfig returnValue=world_config.get(name);
  if (returnValue == null) {
    try {
      returnValue=new WorldConfig(name,getDataFolder());
    }
 catch (    Exception e) {
      log.severe(""String_Node_Str"" + name);
      log.severe(e.getMessage());
    }
  }
  world_config.put(name,returnValue);
  return returnValue;
}",0.9333333333333332
189636,"public static void checkReplace(boolean blockPerBlock){
  Date now=new Date();
  Iterator<CreeperExplosion> iter=explosionList.iterator();
  while (iter.hasNext()) {
    CreeperExplosion cEx=iter.next();
    Date time=cEx.getTime();
    List<Replaceable> blockList=cEx.getBlockList();
    Date after=new Date(time.getTime() + CreeperConfig.waitBeforeHeal * 1000);
    if (after.before(now)) {
      if (!blockPerBlock) {
        BlockManager.replace_blocks(blockList);
        iter.remove();
      }
 else {
        if (!blockList.isEmpty())         BlockManager.replace_one_block(blockList);
        if (blockList.isEmpty()) {
          explosionIndex.removeElement(cEx,cEx.getLocation().getX(),cEx.getLocation().getZ());
          iter.remove();
        }
      }
    }
 else     break;
  }
  PaintingsManager.replacePaintings(now);
}","public static void checkReplace(boolean blockPerBlock){
  Date now=new Date();
  Iterator<CreeperExplosion> iter=explosionList.iterator();
  while (iter.hasNext()) {
    CreeperExplosion cEx=iter.next();
    Date time=cEx.getTime();
    List<Replaceable> blockList=cEx.getBlockList();
    Date after=new Date(time.getTime() + CreeperConfig.waitBeforeHeal * 1000);
    if (after.before(now)) {
      if (!blockPerBlock) {
        BlockManager.replace_blocks(blockList);
        iter.remove();
      }
 else {
        if (!blockList.isEmpty())         BlockManager.replace_one_block(blockList);
        if (blockList.isEmpty()) {
          if (!CreeperConfig.lightweightMode)           explosionIndex.removeElement(cEx,cEx.getLocation().getX(),cEx.getLocation().getZ());
          iter.remove();
        }
      }
    }
 else     break;
  }
  PaintingsManager.replacePaintings(now);
}",0.9732246798603028
189637,"public void restore(){
  super.update(true);
  if (hasNeighbor()) {
    neighbor.update(true);
    Inventory i=((InventoryHolder)chest.getState()).getInventory();
    ItemStack[] both;
    ItemStack[] otherInv=neighborInventory;
    ItemStack[] newInv=storedInventory;
    if (neighbor.isRight())     both=CreeperUtils.concat(otherInv,newInv);
 else     both=CreeperUtils.concat(newInv,otherInv);
    i.setContents(both);
  }
 else   ((InventoryHolder)chest.getState()).getInventory().setContents(storedInventory);
}","public void restore(){
  super.update(true);
  try {
    if (hasNeighbor()) {
      neighbor.update(true);
      Inventory i=((InventoryHolder)chest.getState()).getInventory();
      ItemStack[] both;
      ItemStack[] otherInv=neighborInventory;
      ItemStack[] newInv=storedInventory;
      if (neighbor.isRight())       both=CreeperUtils.concat(otherInv,newInv);
 else       both=CreeperUtils.concat(newInv,otherInv);
      i.setContents(both);
    }
 else     ((InventoryHolder)chest.getState()).getInventory().setContents(storedInventory);
  }
 catch (  java.lang.ClassCastException e) {
    CreeperLog.warning(""String_Node_Str"");
    CreeperLog.warning(chest.getClass().getCanonicalName());
    CreeperLog.displayBlockLocation(chest,true);
    e.printStackTrace();
  }
}",0.7650695517774343
189638,"public static void displayBlockLocation(Block block){
  Location loc=block.getLocation();
  debug(block.getType() + ""String_Node_Str"" + loc.getBlockX()+ ""String_Node_Str""+ loc.getBlockY()+ ""String_Node_Str""+ loc.getBlockZ());
}","public static void displayBlockLocation(Block block,boolean force){
  Location loc=block.getLocation();
  String s=block.getType() + ""String_Node_Str"" + loc.getBlockX()+ ""String_Node_Str""+ loc.getBlockY()+ ""String_Node_Str""+ loc.getBlockZ();
  if (force)   warning(s);
 else   debug(s);
}",0.858252427184466
189639,"public void onEnable(){
  instance=this;
  new CreeperConfig(this);
  Logger.getLogger(""String_Node_Str"").info(""String_Node_Str"");
  File file=new File(getDataFolder() + ""String_Node_Str"");
  file.delete();
  logInfo(""String_Node_Str"",3);
  blockManager=new BlockManager(this);
  new CreeperMessenger(getDataFolder(),this);
  logInfo(""String_Node_Str"",3);
  commandExecutor=new CreeperCommandManager(this);
  perms=new CreeperPermissionManager(this);
  CommandMap commandMap=null;
  try {
    Field field=SimplePluginManager.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    commandMap=(CommandMap)(field.get(getServer().getPluginManager()));
  }
 catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  String[] aliases={""String_Node_Str"",CreeperConfig.alias};
  CreeperCommand com=new CreeperCommand(aliases,""String_Node_Str"",""String_Node_Str"",commandExecutor);
  if (commandMap != null)   commandMap.register(""String_Node_Str"",com);
  handler=new CreeperHandler();
  new CreeperEconomy(this);
  File warningLogFile=new File(getDataFolder() + ""String_Node_Str"");
  if (!warningLogFile.exists())   try {
    warningLogFile.createNewFile();
  }
 catch (  IOException e) {
    CreeperLog.warning(e.getMessage());
  }
  new CreeperLog(warningLogFile);
  logInfo(""String_Node_Str"",3);
  int tmp_period=20;
  if (CreeperConfig.blockPerBlock)   tmp_period=CreeperConfig.blockPerBlockInterval;
  if (getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    public void run(){
      ExplodedBlockManager.checkReplace(CreeperConfig.blockPerBlock);
    }
  }
,200,tmp_period) == -1)   CreeperLog.warning(""String_Node_Str"");
  if (getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    public void run(){
      BurntBlockManager.replaceBurnt();
    }
  }
,200,20) == -1)   CreeperLog.warning(""String_Node_Str"");
  if (getServer().getScheduler().scheduleAsyncRepeatingTask(this,new Runnable(){
    public void run(){
      cleanMaps();
    }
  }
,200,2000) == -1)   CreeperLog.warning(""String_Node_Str"");
  logInfo(""String_Node_Str"",3);
  PluginManager pm=getServer().getPluginManager();
  Plugin lwcPlugin=pm.getPlugin(""String_Node_Str"");
  if (lwcPlugin != null) {
    lwc=((LWCPlugin)lwcPlugin).getLWC();
    logInfo(""String_Node_Str"",1);
  }
  Plugin lockettePlugin=pm.getPlugin(""String_Node_Str"");
  if (lockettePlugin != null) {
    CreeperConfig.lockette=true;
    logInfo(""String_Node_Str"",1);
  }
  Plugin mobArena=pm.getPlugin(""String_Node_Str"");
  if (mobArena != null) {
    maHandler=new MobArenaHandler();
    logInfo(""String_Node_Str"",1);
  }
  Plugin cTrap=pm.getPlugin(""String_Node_Str"");
  if (cTrap != null) {
    new CreeperTrapHandler(this,(CreeperTrap)cTrap);
    logInfo(""String_Node_Str"",1);
  }
 else   new CreeperTrapHandler(this);
  factionHandler=new FactionHandler(pm);
  if (factionHandler.isFactionsEnabled()) {
    logInfo(""String_Node_Str"",1);
  }
  logInfo(""String_Node_Str"",3);
  pm.registerEvents(listener,this);
  pm.registerEvents(blockListener,this);
  if (!(CreeperConfig.lightweightMode))   pm.registerEvents(fancyListener,this);
  populateWarnList();
  logInfo(""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"",0);
}","public void onEnable(){
  instance=this;
  File warningLogFile=new File(getDataFolder() + ""String_Node_Str"");
  if (!warningLogFile.exists())   try {
    warningLogFile.createNewFile();
  }
 catch (  IOException e) {
    Logger.getLogger(""String_Node_Str"").warning(e.getMessage());
  }
  new CreeperLog(warningLogFile);
  new CreeperConfig(this);
  File file=new File(getDataFolder() + ""String_Node_Str"");
  file.delete();
  logInfo(""String_Node_Str"",3);
  blockManager=new BlockManager(this);
  new CreeperMessenger(getDataFolder(),this);
  logInfo(""String_Node_Str"",3);
  commandExecutor=new CreeperCommandManager(this);
  perms=new CreeperPermissionManager(this);
  CommandMap commandMap=null;
  try {
    Field field=SimplePluginManager.class.getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    commandMap=(CommandMap)(field.get(getServer().getPluginManager()));
  }
 catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  String[] aliases={""String_Node_Str"",CreeperConfig.alias};
  CreeperCommand com=new CreeperCommand(aliases,""String_Node_Str"",""String_Node_Str"",commandExecutor);
  if (commandMap != null)   commandMap.register(""String_Node_Str"",com);
  handler=new CreeperHandler();
  new CreeperEconomy(this);
  logInfo(""String_Node_Str"",3);
  int tmp_period=20;
  if (CreeperConfig.blockPerBlock)   tmp_period=CreeperConfig.blockPerBlockInterval;
  if (getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    public void run(){
      ExplodedBlockManager.checkReplace(CreeperConfig.blockPerBlock);
    }
  }
,200,tmp_period) == -1)   CreeperLog.warning(""String_Node_Str"");
  if (getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    public void run(){
      BurntBlockManager.replaceBurnt();
    }
  }
,200,20) == -1)   CreeperLog.warning(""String_Node_Str"");
  if (getServer().getScheduler().scheduleAsyncRepeatingTask(this,new Runnable(){
    public void run(){
      cleanMaps();
    }
  }
,200,2000) == -1)   CreeperLog.warning(""String_Node_Str"");
  logInfo(""String_Node_Str"",3);
  PluginManager pm=getServer().getPluginManager();
  Plugin lwcPlugin=pm.getPlugin(""String_Node_Str"");
  if (lwcPlugin != null) {
    lwc=((LWCPlugin)lwcPlugin).getLWC();
    logInfo(""String_Node_Str"",1);
  }
  Plugin lockettePlugin=pm.getPlugin(""String_Node_Str"");
  if (lockettePlugin != null) {
    CreeperConfig.lockette=true;
    logInfo(""String_Node_Str"",1);
  }
  Plugin mobArena=pm.getPlugin(""String_Node_Str"");
  if (mobArena != null) {
    maHandler=new MobArenaHandler();
    logInfo(""String_Node_Str"",1);
  }
  Plugin cTrap=pm.getPlugin(""String_Node_Str"");
  if (cTrap != null) {
    new CreeperTrapHandler(this,(CreeperTrap)cTrap);
    logInfo(""String_Node_Str"",1);
  }
 else   new CreeperTrapHandler(this);
  factionHandler=new FactionHandler(pm);
  if (factionHandler.isFactionsEnabled()) {
    logInfo(""String_Node_Str"",1);
  }
  logInfo(""String_Node_Str"",3);
  pm.registerEvents(listener,this);
  pm.registerEvents(blockListener,this);
  if (!(CreeperConfig.lightweightMode))   pm.registerEvents(fancyListener,this);
  populateWarnList();
  logInfo(""String_Node_Str"" + getDescription().getVersion() + ""String_Node_Str"",0);
}",0.6823422330097088
189640,"private static void copyJarConfig(File file){
  OutputStream outStream=null;
  try {
    file.createNewFile();
    InputStream templateIn=plugin.getResource(""String_Node_Str"");
    outStream=new FileOutputStream(file);
    int read=0;
    byte[] bytes=new byte[1024];
    while ((read=templateIn.read(bytes)) != -1) {
      outStream.write(bytes,0,read);
    }
    templateIn.close();
    outStream.flush();
    outStream.close();
    CreeperLog.logInfo(""String_Node_Str"",1);
  }
 catch (  Exception e) {
    CreeperLog.warning(""String_Node_Str"");
    CreeperLog.warning(e.getMessage());
    if (outStream != null) {
      try {
        outStream.flush();
        outStream.close();
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
}","public static void copyJarConfig(File file,String resource){
  OutputStream outStream=null;
  try {
    file.createNewFile();
    InputStream templateIn=plugin.getResource(resource);
    outStream=new FileOutputStream(file);
    int read=0;
    byte[] bytes=new byte[1024];
    while ((read=templateIn.read(bytes)) != -1) {
      outStream.write(bytes,0,read);
    }
    templateIn.close();
    outStream.flush();
    outStream.close();
    CreeperLog.logInfo(""String_Node_Str"",1);
  }
 catch (  Exception e) {
    CreeperLog.warning(""String_Node_Str"" + file.getName());
    CreeperLog.warning(e.getMessage());
    if (outStream != null) {
      try {
        outStream.flush();
        outStream.close();
      }
 catch (      IOException e1) {
        e1.printStackTrace();
      }
    }
  }
}",0.955966815571155
189641,"public CreeperConfig(CreeperHeal instance){
  plugin=instance;
  yml=new File(getDataFolder() + ""String_Node_Str"");
  configFile=plugin.getConfig();
  if (!new File(getDataFolder().toString()).exists()) {
    new File(getDataFolder().toString()).mkdir();
  }
  if (!yml.exists()) {
    CreeperLog.warning(""String_Node_Str"");
    copyJarConfig(yml);
  }
  load();
  write();
}","public CreeperConfig(CreeperHeal instance){
  plugin=instance;
  yml=new File(getDataFolder() + ""String_Node_Str"");
  configFile=plugin.getConfig();
  if (!new File(getDataFolder().toString()).exists()) {
    new File(getDataFolder().toString()).mkdir();
  }
  if (!yml.exists()) {
    CreeperLog.warning(""String_Node_Str"");
    copyJarConfig(yml,""String_Node_Str"");
  }
  load();
  write();
}",0.9765625
189642,"public void load() throws FileNotFoundException, IOException, InvalidConfigurationException {
  File configFile=new File(pluginFolder.getPath() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  if (!configFile.exists())   configFile.createNewFile();
  config=new YamlConfiguration();
  config.load(configFile);
  creepers=getBoolean(""String_Node_Str"",true);
  tnt=getBoolean(""String_Node_Str"",true);
  ghast=getBoolean(""String_Node_Str"",true);
  dragons=getBoolean(""String_Node_Str"",false);
  magical=getBoolean(""String_Node_Str"",false);
  fire=getBoolean(""String_Node_Str"",true);
  enderman=getBoolean(""String_Node_Str"",true);
  replaceAbove=getBoolean(""String_Node_Str"",false);
  replaceLimit=getInt(""String_Node_Str"",64);
  blockList=loadList(""String_Node_Str"");
  repairTime=getInt(""String_Node_Str"",-1);
  blockLava=getBoolean(""String_Node_Str"",false);
  blockTNT=getBoolean(""String_Node_Str"",false);
  blockIgnite=getBoolean(""String_Node_Str"",false);
  blockBlackList=getBoolean(""String_Node_Str"",false);
  blockSpawnEggs=getBoolean(""String_Node_Str"",false);
  blockPvP=getBoolean(""String_Node_Str"",false);
  warnLava=getBoolean(""String_Node_Str"",false);
  warnTNT=getBoolean(""String_Node_Str"",false);
  warnIgnite=getBoolean(""String_Node_Str"",false);
  warnBlackList=getBoolean(""String_Node_Str"",false);
  warnSpawnEggs=getBoolean(""String_Node_Str"",false);
  warnPvP=getBoolean(""String_Node_Str"",false);
  preventFireSpread=getBoolean(""String_Node_Str"",false);
  preventFireLava=getBoolean(""String_Node_Str"",false);
  placeList=loadList(""String_Node_Str"");
  ignoreFactionsWilderness=getBoolean(""String_Node_Str"",false);
  ignoreFactionsTerritory=getBoolean(""String_Node_Str"",false);
  whiteBlockList=getBoolean(""String_Node_Str"",false);
  whitePlaceList=getBoolean(""String_Node_Str"",false);
  wither=getBoolean(""String_Node_Str"",true);
  spawnWither=getBoolean(""String_Node_Str"",true);
}","public void load() throws FileNotFoundException, IOException, InvalidConfigurationException {
  File configFile=new File(pluginFolder.getPath() + ""String_Node_Str"" + name+ ""String_Node_Str"");
  if (!configFile.exists())   CreeperConfig.copyJarConfig(configFile,""String_Node_Str"");
  config=new YamlConfiguration();
  config.load(configFile);
  creepers=getBoolean(""String_Node_Str"",true);
  tnt=getBoolean(""String_Node_Str"",true);
  ghast=getBoolean(""String_Node_Str"",true);
  dragons=getBoolean(""String_Node_Str"",false);
  magical=getBoolean(""String_Node_Str"",false);
  fire=getBoolean(""String_Node_Str"",true);
  enderman=getBoolean(""String_Node_Str"",true);
  replaceAbove=getBoolean(""String_Node_Str"",false);
  replaceLimit=getInt(""String_Node_Str"",64);
  blockList=loadList(""String_Node_Str"");
  repairTime=getInt(""String_Node_Str"",-1);
  blockLava=getBoolean(""String_Node_Str"",false);
  blockTNT=getBoolean(""String_Node_Str"",false);
  blockIgnite=getBoolean(""String_Node_Str"",false);
  blockBlackList=getBoolean(""String_Node_Str"",false);
  blockSpawnEggs=getBoolean(""String_Node_Str"",false);
  blockPvP=getBoolean(""String_Node_Str"",false);
  warnLava=getBoolean(""String_Node_Str"",false);
  warnTNT=getBoolean(""String_Node_Str"",false);
  warnIgnite=getBoolean(""String_Node_Str"",false);
  warnBlackList=getBoolean(""String_Node_Str"",false);
  warnSpawnEggs=getBoolean(""String_Node_Str"",false);
  warnPvP=getBoolean(""String_Node_Str"",false);
  preventFireSpread=getBoolean(""String_Node_Str"",false);
  preventFireLava=getBoolean(""String_Node_Str"",false);
  placeList=loadList(""String_Node_Str"");
  ignoreFactionsWilderness=getBoolean(""String_Node_Str"",false);
  ignoreFactionsTerritory=getBoolean(""String_Node_Str"",false);
  whiteBlockList=getBoolean(""String_Node_Str"",false);
  whitePlaceList=getBoolean(""String_Node_Str"",false);
  wither=getBoolean(""String_Node_Str"",true);
  spawnWither=getBoolean(""String_Node_Str"",true);
}",0.98403559277676
189643,"public static void logInfo(String msg,int level){
  logLevel=CreeperConfig.logLevel;
  if (level <= logLevel) {
    log.info(""String_Node_Str"" + msg);
    record(""String_Node_Str"" + msg);
  }
}","public static void logInfo(String msg,int level){
  if (logLevel == -42)   if (CreeperConfig.logLevel != -42)   logLevel=CreeperConfig.logLevel;
  if (level <= logLevel) {
    log.info(""String_Node_Str"" + msg);
    record(""String_Node_Str"" + msg);
  }
}",0.8251121076233184
189644,"private static void createNewFile(File file){
  try {
    file.createNewFile();
    boolean success=false;
    InputStream templateIn=plugin.getResource(""String_Node_Str"");
    OutputStream outStream=new FileOutputStream(file);
    int read=0;
    byte[] bytes=new byte[1024];
    while ((read=templateIn.read(bytes)) != -1) {
      outStream.write(bytes,0,read);
    }
    templateIn.close();
    outStream.flush();
    outStream.close();
    if (success)     CreeperLog.logInfo(""String_Node_Str"",1);
 else     CreeperLog.warning(""String_Node_Str"");
  }
 catch (  Exception e) {
    CreeperLog.warning(""String_Node_Str"");
    CreeperLog.warning(e.getMessage());
  }
}","private static void createNewFile(File file){
  try {
    file.createNewFile();
    InputStream templateIn=plugin.getResource(""String_Node_Str"");
    OutputStream outStream=new FileOutputStream(file);
    int read=0;
    byte[] bytes=new byte[1024];
    while ((read=templateIn.read(bytes)) != -1) {
      outStream.write(bytes,0,read);
    }
    templateIn.close();
    outStream.flush();
    outStream.close();
    CreeperLog.logInfo(""String_Node_Str"",1);
  }
 catch (  Exception e) {
    CreeperLog.warning(""String_Node_Str"");
    CreeperLog.warning(e.getMessage());
  }
}",0.8157683024939663
189645,"private JMenu buildAiMenu(){
  JMenuItem aiEnabledItem;
  JMenuItem evolveItem;
  aiEnabledItem=new JCheckBoxMenuItem();
  aiEnabledItem.setText(""String_Node_Str"");
  aiEnabledItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,ActionEvent.CTRL_MASK));
  aiEnabledItem.addActionListener((e) -> ai.setEnabled(((JMenuItem)e.getSource()).isSelected()));
  evolveItem=new JCheckBoxMenuItem();
  evolveItem.setText(""String_Node_Str"");
  evolveItem.addActionListener((e) -> ai.setTraining(((JMenuItem)e.getSource()).isSelected()));
  JMenu menu=new JMenu(""String_Node_Str"");
  menu.add(aiEnabledItem);
  menu.add(evolveItem);
  menu.add(buildSpeedMenu());
  return menu;
}","private JMenu buildAiMenu(){
  JMenuItem aiEnabledItem;
  JMenuItem evolveItem;
  aiEnabledItem=new JCheckBoxMenuItem();
  aiEnabledItem.setText(""String_Node_Str"");
  aiEnabledItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.CTRL_MASK));
  aiEnabledItem.addActionListener((e) -> ai.setEnabled(((JMenuItem)e.getSource()).isSelected()));
  evolveItem=new JCheckBoxMenuItem();
  evolveItem.setText(""String_Node_Str"");
  evolveItem.addActionListener((e) -> ai.setTraining(((JMenuItem)e.getSource()).isSelected()));
  JMenu menu=new JMenu(""String_Node_Str"");
  menu.add(aiEnabledItem);
  menu.add(evolveItem);
  menu.add(buildSpeedMenu());
  return menu;
}",0.9917971662938104
189646,"public void start(){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  ClassNotFoundException|InstantiationException|IllegalAccessException|UnsupportedLookAndFeelException e1) {
    e1.printStackTrace();
  }
  frame=new JFrame();
  frame.setTitle(""String_Node_Str"");
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.setMinimumSize(new Dimension(300,600));
  frame.setLocationRelativeTo(null);
  frame.getContentPane().setLayout(new BorderLayout());
  frame.getContentPane().add(this,BorderLayout.CENTER);
  buildMenu(frame);
  frame.setVisible(true);
  new Thread(this).start();
}","public void start(){
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  ClassNotFoundException|InstantiationException|IllegalAccessException|UnsupportedLookAndFeelException e1) {
    e1.printStackTrace();
  }
  frame=new JFrame();
  frame.setTitle(""String_Node_Str"");
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  frame.setMinimumSize(new Dimension(300,600));
  frame.setLocationRelativeTo(null);
  frame.getContentPane().setLayout(new BorderLayout());
  frame.getContentPane().add(this,BorderLayout.CENTER);
  buildMenu(frame);
  frame.setVisible(true);
  new Thread(this).start();
}",0.9837083010085338
189647,"private JMenu buildGameMenu(){
  JMenuItem pauseItem;
  JMenuItem newGameItem;
  JMenuItem autoReplayItem;
  pauseItem=new JCheckBoxMenuItem();
  pauseItem.setText(""String_Node_Str"");
  pauseItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,ActionEvent.CTRL_MASK));
  pauseItem.addActionListener((e) -> context.pause(((JMenuItem)e.getSource()).isSelected()));
  newGameItem=new JMenuItem();
  newGameItem.setText(""String_Node_Str"");
  newGameItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK));
  newGameItem.addActionListener((e) -> context.newGame());
  autoReplayItem=new JCheckBoxMenuItem();
  autoReplayItem.setText(""String_Node_Str"");
  autoReplayItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,ActionEvent.CTRL_MASK));
  autoReplayItem.addActionListener((e) -> context.setAutoRestart(((JMenuItem)e.getSource()).isSelected()));
  context.registerNewGameListener(() -> {
    pauseItem.setEnabled(true);
    pauseItem.setSelected(false);
  }
);
  context.registerEndGameListener(() -> pauseItem.setEnabled(false));
  JMenu gameMenu=new JMenu(""String_Node_Str"");
  gameMenu.add(pauseItem);
  gameMenu.add(newGameItem);
  gameMenu.add(autoReplayItem);
  gameMenu.addSeparator();
  gameMenu.add(buildBoardSizeMenu());
  gameMenu.add(buildSequenceMenu());
  return gameMenu;
}","private JMenu buildGameMenu(){
  JMenuItem pauseItem;
  JMenuItem newGameItem;
  JMenuItem autoReplayItem;
  pauseItem=new JCheckBoxMenuItem();
  pauseItem.setText(""String_Node_Str"");
  pauseItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P,InputEvent.CTRL_MASK));
  pauseItem.addActionListener((e) -> context.pause(((JMenuItem)e.getSource()).isSelected()));
  newGameItem=new JMenuItem();
  newGameItem.setText(""String_Node_Str"");
  newGameItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,InputEvent.CTRL_MASK));
  newGameItem.addActionListener((e) -> context.newGame());
  autoReplayItem=new JCheckBoxMenuItem();
  autoReplayItem.setText(""String_Node_Str"");
  autoReplayItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,InputEvent.CTRL_MASK));
  autoReplayItem.addActionListener((e) -> context.setAutoRestart(((JMenuItem)e.getSource()).isSelected()));
  context.registerNewGameListener(() -> {
    pauseItem.setEnabled(true);
    pauseItem.setSelected(false);
  }
);
  context.registerEndGameListener(() -> pauseItem.setEnabled(false));
  JMenu gameMenu=new JMenu(""String_Node_Str"");
  gameMenu.add(pauseItem);
  gameMenu.add(newGameItem);
  gameMenu.add(autoReplayItem);
  gameMenu.addSeparator();
  gameMenu.add(buildBoardSizeMenu());
  gameMenu.add(buildSequenceMenu());
  return gameMenu;
}",0.9874952633573324
189648,"/** 
 * Creates a new Board.
 * @param width The board width.
 * @param height The board height.
 */
public Board(int width,int height){
  this.width=width;
  this.height=height;
  board=new Shape[width * height];
  Arrays.fill(board,Shape.NoShape);
}","/** 
 * Creates a new Board.
 * @param width The board width.
 * @param height The board height.
 */
public Board(int width,int height){
  this.width=width;
  this.height=height;
  board=new Shape[width * height];
  clear();
}",0.9308176100628932
189649,"public void startNewGame(){
  data=new GameData(new Board(10,20),new PieceSequence(new ShufflePieceSelector()));
  new NewTetrominoCommand(data).execute();
}","public void startNewGame(){
  if (data.getBoard() == null) {
    data.setBoard(new Board(10,20));
  }
  if (data.getSequence() == null) {
    data.setSequence(new PieceSequence(new ShufflePieceSelector()));
  }
  data.clear();
  new NewTetrominoCommand(data).execute();
}",0.6495327102803738
189650,"public final void rewind(){
  current--;
  preview--;
}","public void rewind(){
  current--;
  preview--;
}",0.9423076923076924
189651,"public final Tetromino peekCurrent(){
  return pieces.get(current);
}","public Tetromino peekCurrent(){
  return pieces.get(current);
}",0.9545454545454546
189652,"public final Tetromino peekPreview(){
  return pieces.get(preview);
}","public Tetromino peekPreview(){
  return pieces.get(preview);
}",0.9545454545454546
189653,"public final void advance(){
  current++;
  preview++;
  while (pieces.size() <= preview) {
    pieces.add(selector.getNextPiece());
  }
}","public void advance(){
  current++;
  preview++;
  while (pieces.size() <= preview) {
    pieces.add(selector.getNextPiece());
  }
}",0.9777777777777776
189654,"@Override public Move getBestMove(Board board,Tetromino current,Tetromino preview,int x,int y){
  int bestRotationDelta=0;
  int bestTranslationDelta=0;
  double max=Double.NEGATIVE_INFINITY;
  for (int rotationDelta=0; rotationDelta < 4; rotationDelta++) {
    int minTranslationDelta=getMinTranslationDelta(board,current,x,y);
    int maxTranslationDelta=getMaxTranslationDelta(board,current,x,y);
    for (int translationDelta=minTranslationDelta; translationDelta <= maxTranslationDelta; translationDelta++) {
      dummy1=board.tryClone(dummy1);
      if (dummy1.tryMove(current,x + translationDelta,dummy1.dropHeight(current,x + translationDelta))) {
        double score=score(dummy1);
        if (score > max) {
          max=score;
          bestTranslationDelta=translationDelta;
          bestRotationDelta=rotationDelta;
        }
      }
    }
    current=Tetromino.rotateLeft(current);
  }
  return new Move(bestRotationDelta,bestTranslationDelta);
}","@Override public Move getBestMove(Board board,Tetromino current,Tetromino preview,int x,int y){
  int bestRotationDelta=0;
  int bestTranslationDelta=0;
  double max=Double.NEGATIVE_INFINITY;
  for (int rotationDelta=0; rotationDelta < 4; rotationDelta++) {
    int minTranslationDelta=getMaxTranslationDelta(board,current,x,y,-1);
    int maxTranslationDelta=getMaxTranslationDelta(board,current,x,y,+1);
    for (int translationDelta=minTranslationDelta; translationDelta <= maxTranslationDelta; translationDelta++) {
      dummy1=board.tryClone(dummy1);
      if (dummy1.tryMove(current,x + translationDelta,dummy1.dropHeight(current,x + translationDelta))) {
        double score=score(dummy1);
        if (score > max) {
          max=score;
          bestTranslationDelta=translationDelta;
          bestRotationDelta=rotationDelta;
        }
      }
    }
    current=Tetromino.rotateLeft(current);
  }
  return new Move(bestRotationDelta,bestTranslationDelta);
}",0.9948293691830404
189655,"private int getMaxTranslationDelta(Board board,Tetromino piece,int x,int y){
  int translation=0;
  while (board.canMove(piece,x + translation,y)) {
    translation++;
  }
  return translation;
}","private int getMaxTranslationDelta(Board board,Tetromino piece,int x,int y,int step){
  int translation=0;
  while (board.canMove(piece,x + translation + step,y)) {
    translation+=step;
  }
  return translation;
}",0.946341463414634
189656,"/** 
 * bcc -- incase you need to be copied on emails
 * @return
 * @throws AddressException
 */
private InternetAddress[] getBCC() throws AddressException {
  if (bcc != null) {
    return bcc;
  }
  if (BCC_EMAIL_LIST.length > 0 && BCC_EMAIL_LIST[0].equals(DUMMY_EMAIL)) {
    bcc=new InternetAddress[BCC_EMAIL_LIST.length];
    for (    String email : BCC_EMAIL_LIST) {
      bcc[0]=new InternetAddress(email);
    }
  }
 else {
    bcc=new InternetAddress[0];
  }
  return bcc;
}","/** 
 * bcc -- incase you need to be copied on emails
 * @return
 * @throws AddressException
 */
private InternetAddress[] getBCC() throws AddressException {
  if (bcc != null) {
    return bcc;
  }
  if (BCC_EMAIL_LIST.length > 0 && !BCC_EMAIL_LIST[0].equals(DUMMY_EMAIL)) {
    bcc=new InternetAddress[BCC_EMAIL_LIST.length];
    int index=0;
    for (    String email : BCC_EMAIL_LIST) {
      bcc[index++]=new InternetAddress(email);
    }
  }
 else {
    bcc=new InternetAddress[0];
  }
  return bcc;
}",0.9737373737373738
189657,"/** 
 * Creates a drug reference from a drug UUID
 * @param drugUuid the drug UUID
 * @return the drug reference
 */
public static DrugReference fromDrugUuid(String drugUuid){
  Drug drug=Context.getConceptService().getDrugByUuid(drugUuid);
  return new DrugReference(drug.getConcept().getUuid(),drug.getUuid());
}","/** 
 * Creates a drug reference from a drug UUID
 * @param drugUuid the drug UUID
 * @return the drug reference
 */
public static DrugReference fromDrugUuid(String drugUuid){
  Drug drug=Context.getConceptService().getDrugByUuid(drugUuid);
  if (drug != null) {
    return new DrugReference(drug.getConcept().getUuid(),drug.getUuid());
  }
  return null;
}",0.9359165424739196
189658,"/** 
 * Loads definitions from an input stream containing XML
 * @param stream the path to XML resource
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 */
public void loadDefinitionsFromXML(InputStream stream) throws ParserConfigurationException, IOException, SAXException {
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=dbFactory.newDocumentBuilder();
  Document document=builder.parse(stream);
  Element root=document.getDocumentElement();
  NodeList categoryNodes=root.getElementsByTagName(""String_Node_Str"");
  for (int c=0; c < categoryNodes.getLength(); c++) {
    Element categoryElement=(Element)categoryNodes.item(c);
    String categoryCode=categoryElement.getAttribute(""String_Node_Str"");
    String masterSetUuid=categoryElement.getAttribute(""String_Node_Str"");
    Concept masterSetConcept=MetadataUtils.existing(Concept.class,masterSetUuid);
    masterSetConcepts.put(categoryCode,masterSetConcept.getConceptId());
    Map<String,DrugReference> categoryDrugs=new HashMap<String,DrugReference>();
    List<RegimenDefinitionGroup> categoryGroups=new ArrayList<RegimenDefinitionGroup>();
    NodeList drugNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int d=0; d < drugNodes.getLength(); d++) {
      Element drugElement=(Element)drugNodes.item(d);
      String drugCode=drugElement.getAttribute(""String_Node_Str"");
      String drugConceptUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      String drugDrugUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      DrugReference drug=(drugDrugUuid != null) ? DrugReference.fromDrugUuid(drugDrugUuid) : DrugReference.fromConceptUuid(drugConceptUuid);
      categoryDrugs.put(drugCode,drug);
    }
    NodeList groupNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int g=0; g < groupNodes.getLength(); g++) {
      Element groupElement=(Element)groupNodes.item(g);
      String groupCode=groupElement.getAttribute(""String_Node_Str"");
      String groupName=groupElement.getAttribute(""String_Node_Str"");
      RegimenDefinitionGroup group=new RegimenDefinitionGroup(groupCode,groupName);
      categoryGroups.add(group);
      NodeList regimenNodes=groupElement.getElementsByTagName(""String_Node_Str"");
      for (int r=0; r < regimenNodes.getLength(); r++) {
        Element regimenElement=(Element)regimenNodes.item(r);
        String name=regimenElement.getAttribute(""String_Node_Str"");
        RegimenDefinition regimenDefinition=new RegimenDefinition(name,group);
        NodeList componentNodes=regimenElement.getElementsByTagName(""String_Node_Str"");
        for (int p=0; p < componentNodes.getLength(); p++) {
          Element componentElement=(Element)componentNodes.item(p);
          String drugCode=componentElement.getAttribute(""String_Node_Str"");
          Double dose=componentElement.hasAttribute(""String_Node_Str"") ? Double.parseDouble(componentElement.getAttribute(""String_Node_Str"")) : null;
          String units=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          String frequency=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          DrugReference drug=categoryDrugs.get(drugCode);
          if (drug == null)           throw new RuntimeException(""String_Node_Str"" + drugCode);
          regimenDefinition.addComponent(drug,dose,units,frequency);
        }
        group.addRegimen(regimenDefinition);
      }
    }
    drugs.put(categoryCode,categoryDrugs);
    regimenGroups.put(categoryCode,categoryGroups);
  }
}","/** 
 * Loads definitions from an input stream containing XML
 * @param stream the path to XML resource
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 */
public void loadDefinitionsFromXML(InputStream stream) throws ParserConfigurationException, IOException, SAXException {
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=dbFactory.newDocumentBuilder();
  Document document=builder.parse(stream);
  Element root=document.getDocumentElement();
  NodeList categoryNodes=root.getElementsByTagName(""String_Node_Str"");
  for (int c=0; c < categoryNodes.getLength(); c++) {
    Element categoryElement=(Element)categoryNodes.item(c);
    String categoryCode=categoryElement.getAttribute(""String_Node_Str"");
    String masterSetUuid=categoryElement.getAttribute(""String_Node_Str"");
    Concept masterSetConcept=MetadataUtils.existing(Concept.class,masterSetUuid);
    masterSetConcepts.put(categoryCode,masterSetConcept.getConceptId());
    Map<String,DrugReference> categoryDrugs=new HashMap<String,DrugReference>();
    List<RegimenDefinitionGroup> categoryGroups=new ArrayList<RegimenDefinitionGroup>();
    NodeList drugNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int d=0; d < drugNodes.getLength(); d++) {
      Element drugElement=(Element)drugNodes.item(d);
      String drugCode=drugElement.getAttribute(""String_Node_Str"");
      String drugConceptUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      String drugDrugUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      DrugReference drug=(drugDrugUuid != null) ? DrugReference.fromDrugUuid(drugDrugUuid) : DrugReference.fromConceptUuid(drugConceptUuid);
      if (drug != null) {
        categoryDrugs.put(drugCode,drug);
      }
    }
    NodeList groupNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int g=0; g < groupNodes.getLength(); g++) {
      Element groupElement=(Element)groupNodes.item(g);
      String groupCode=groupElement.getAttribute(""String_Node_Str"");
      String groupName=groupElement.getAttribute(""String_Node_Str"");
      RegimenDefinitionGroup group=new RegimenDefinitionGroup(groupCode,groupName);
      categoryGroups.add(group);
      NodeList regimenNodes=groupElement.getElementsByTagName(""String_Node_Str"");
      for (int r=0; r < regimenNodes.getLength(); r++) {
        Element regimenElement=(Element)regimenNodes.item(r);
        String name=regimenElement.getAttribute(""String_Node_Str"");
        RegimenDefinition regimenDefinition=new RegimenDefinition(name,group);
        NodeList componentNodes=regimenElement.getElementsByTagName(""String_Node_Str"");
        for (int p=0; p < componentNodes.getLength(); p++) {
          Element componentElement=(Element)componentNodes.item(p);
          String drugCode=componentElement.getAttribute(""String_Node_Str"");
          Double dose=componentElement.hasAttribute(""String_Node_Str"") ? Double.parseDouble(componentElement.getAttribute(""String_Node_Str"")) : null;
          String units=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          String frequency=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          DrugReference drug=categoryDrugs.get(drugCode);
          if (drug == null)           throw new RuntimeException(""String_Node_Str"" + drugCode);
          regimenDefinition.addComponent(drug,dose,units,frequency);
        }
        group.addRegimen(regimenDefinition);
      }
    }
    drugs.put(categoryCode,categoryDrugs);
    regimenGroups.put(categoryCode,categoryGroups);
  }
}",0.9952569169960476
189659,"public void controller(@FragmentParam(""String_Node_Str"") Patient patient,@FragmentParam(""String_Node_Str"") Boolean complete,FragmentModel model){
  Map<String,Object> calculations=new HashMap<String,Object>();
  PatientWrapper patientWrapper=new PatientWrapper(patient);
  Encounter lastMchEnrollment=patientWrapper.lastEncounter(MetadataUtils.existing(EncounterType.class,MchMetadata._EncounterType.MCHMS_ENROLLMENT));
  EncounterWrapper lastMchEnrollmentWrapped=new EncounterWrapper(lastMchEnrollment);
  Obs hivStatusObs=lastMchEnrollmentWrapped.firstObs(Dictionary.getConcept(Dictionary.HIV_STATUS));
  if (hivStatusObs != null) {
    calculations.put(""String_Node_Str"",hivStatusObs.getValueCoded());
  }
 else {
    calculations.put(""String_Node_Str"",""String_Node_Str"");
  }
  Encounter lastMchConsultation=patientWrapper.lastEncounter(MetadataUtils.existing(EncounterType.class,MchMetadata._EncounterType.MCHMS_CONSULTATION));
  if (lastMchConsultation != null) {
    EncounterWrapper lastMchConsultationWrapped=new EncounterWrapper(lastMchConsultation);
    Obs arvUseObs=lastMchConsultationWrapped.firstObs(Dictionary.getConcept(Dictionary.ANTIRETROVIRAL_USE_IN_PREGNANCY));
    if (arvUseObs != null) {
      Concept concept=arvUseObs.getValueCoded();
      if (concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_PROPHYLAXIS)) || concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_HAART))) {
        String regimen=""String_Node_Str"";
        List<Obs> drugObsList=lastMchConsultationWrapped.allObs(Dictionary.getConcept(Dictionary.ANTIRETROVIRAL_USED_IN_PREGNANCY));
        if (!drugObsList.isEmpty()) {
          String rgmn=""String_Node_Str"";
          for (          Obs obs : drugObsList) {
            if (obs != null) {
              rgmn+=obs.getValueCoded().getName().getName();
              if (!obs.equals(drugObsList.get(drugObsList.size() - 1))) {
                rgmn+=""String_Node_Str"";
              }
            }
          }
          if (!rgmn.isEmpty()) {
            regimen=rgmn;
          }
        }
        if (concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_PROPHYLAXIS))) {
          calculations.put(""String_Node_Str"",""String_Node_Str"" + regimen + ""String_Node_Str"");
          calculations.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_HAART))) {
          calculations.put(""String_Node_Str"",""String_Node_Str"");
          calculations.put(""String_Node_Str"",""String_Node_Str"" + regimen + ""String_Node_Str"");
        }
      }
 else {
        calculations.put(""String_Node_Str"",""String_Node_Str"");
        calculations.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      calculations.put(""String_Node_Str"",""String_Node_Str"");
      calculations.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    calculations.put(""String_Node_Str"",""String_Node_Str"");
    calculations.put(""String_Node_Str"",""String_Node_Str"");
  }
  model.addAttribute(""String_Node_Str"",calculations);
}","public void controller(@FragmentParam(""String_Node_Str"") Patient patient,@FragmentParam(""String_Node_Str"") Boolean complete,FragmentModel model){
  Map<String,Object> calculations=new HashMap<String,Object>();
  PatientWrapper patientWrapper=new PatientWrapper(patient);
  Encounter lastMchEnrollment=patientWrapper.lastEncounter(MetadataUtils.existing(EncounterType.class,MchMetadata._EncounterType.MCHMS_ENROLLMENT));
  EncounterWrapper lastMchEnrollmentWrapped=new EncounterWrapper(lastMchEnrollment);
  Obs hivStatusObs=null;
  if (lastMchEnrollmentWrapped != null) {
    hivStatusObs=lastMchEnrollmentWrapped.firstObs(Dictionary.getConcept(Dictionary.HIV_STATUS));
  }
  if (hivStatusObs != null) {
    calculations.put(""String_Node_Str"",hivStatusObs.getValueCoded());
  }
 else {
    calculations.put(""String_Node_Str"",""String_Node_Str"");
  }
  Encounter lastMchConsultation=patientWrapper.lastEncounter(MetadataUtils.existing(EncounterType.class,MchMetadata._EncounterType.MCHMS_CONSULTATION));
  if (lastMchConsultation != null) {
    EncounterWrapper lastMchConsultationWrapped=new EncounterWrapper(lastMchConsultation);
    Obs arvUseObs=lastMchConsultationWrapped.firstObs(Dictionary.getConcept(Dictionary.ANTIRETROVIRAL_USE_IN_PREGNANCY));
    if (arvUseObs != null) {
      Concept concept=arvUseObs.getValueCoded();
      if (concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_PROPHYLAXIS)) || concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_HAART))) {
        String regimen=""String_Node_Str"";
        List<Obs> drugObsList=lastMchConsultationWrapped.allObs(Dictionary.getConcept(Dictionary.ANTIRETROVIRAL_USED_IN_PREGNANCY));
        if (!drugObsList.isEmpty()) {
          String rgmn=""String_Node_Str"";
          for (          Obs obs : drugObsList) {
            if (obs != null) {
              rgmn+=obs.getValueCoded().getName().getName();
              if (!obs.equals(drugObsList.get(drugObsList.size() - 1))) {
                rgmn+=""String_Node_Str"";
              }
            }
          }
          if (!rgmn.isEmpty()) {
            regimen=rgmn;
          }
        }
        if (concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_PROPHYLAXIS))) {
          calculations.put(""String_Node_Str"",""String_Node_Str"" + regimen + ""String_Node_Str"");
          calculations.put(""String_Node_Str"",""String_Node_Str"");
        }
 else         if (concept.equals(Dictionary.getConcept(Dictionary.MOTHER_ON_HAART))) {
          calculations.put(""String_Node_Str"",""String_Node_Str"");
          calculations.put(""String_Node_Str"",""String_Node_Str"" + regimen + ""String_Node_Str"");
        }
      }
 else {
        calculations.put(""String_Node_Str"",""String_Node_Str"");
        calculations.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
 else {
      calculations.put(""String_Node_Str"",""String_Node_Str"");
      calculations.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    calculations.put(""String_Node_Str"",""String_Node_Str"");
    calculations.put(""String_Node_Str"",""String_Node_Str"");
  }
  model.addAttribute(""String_Node_Str"",calculations);
}",0.9887932434627252
189660,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Date date=(Date)parameterValues.get(""String_Node_Str"");
  if (date == null) {
    date=new Date();
  }
  Date startOfDay=DateUtil.getStartOfDay(date);
  Date endOfDay=DateUtil.getEndOfDay(date);
  Concept returnVisitDate=Dictionary.getConcept(Dictionary.RETURN_VISIT_DATE);
  EncounterType tbFollowup=MetadataUtils.existing(EncounterType.class,TbMetadata._EncounterType.TB_CONSULTATION);
  DateObsCohortDefinition cd=new DateObsCohortDefinition();
  cd.setTimeModifier(TimeModifier.ANY);
  cd.setQuestion(returnVisitDate);
  cd.setOperator1(RangeComparator.GREATER_EQUAL);
  cd.setValue1(startOfDay);
  cd.setOperator2(RangeComparator.LESS_EQUAL);
  cd.setValue2(endOfDay);
  cd.setEncounterTypeList(Collections.singletonList(tbFollowup));
  EvaluatedCohort withScheduledVisit=CalculationUtils.evaluateWithReporting(cd,cohort,null,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    ret.put(ptId,new BooleanResult(withScheduledVisit.contains(ptId),this));
  }
  return ret;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  if (parameterValues != null) {
    logger.info(""String_Node_Str"");
    logger.info(parameterValues.toString());
  }
 else {
    logger.info(""String_Node_Str"");
  }
  Date date=new Date();
  Date startOfDay=DateUtil.getStartOfDay(date);
  Date endOfDay=DateUtil.getEndOfDay(date);
  Concept returnVisitDate=Dictionary.getConcept(Dictionary.RETURN_VISIT_DATE);
  DateObsCohortDefinition cd=new DateObsCohortDefinition();
  cd.setTimeModifier(TimeModifier.ANY);
  cd.setQuestion(returnVisitDate);
  cd.setOperator1(RangeComparator.GREATER_EQUAL);
  cd.setValue1(startOfDay);
  cd.setOperator2(RangeComparator.LESS_EQUAL);
  cd.setValue2(endOfDay);
  EvaluatedCohort withScheduledVisit=CalculationUtils.evaluateWithReporting(cd,cohort,null,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    ret.put(ptId,new BooleanResult(withScheduledVisit.contains(ptId),this));
  }
  return ret;
}",0.8236339404709018
189661,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Boolean notOnIpt=false;
  Program iptProgram=MetadataUtils.existing(Program.class,IPTMetadata._Program.IPT);
  Program tbProgram=MetadataUtils.existing(Program.class,TbMetadata._Program.TB);
  EncounterType iptOutcome=MetadataUtils.existing(EncounterType.class,IPTMetadata._EncounterType.IPT_OUTCOME);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> onIptProgram=Filters.inProgram(iptProgram,alive,context);
  Set<Integer> inTbProgram=Filters.inProgram(tbProgram,alive,context);
  CalculationResultMap lastIptMap=Calculations.lastEncounter(iptOutcome,alive,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    if (alive.contains(ptId) && !inTbProgram.contains(ptId) && !onIptProgram.contains(ptId)) {
      Encounter lastIptEncounter=EmrCalculationUtils.encounterResultForPatient(lastIptMap,ptId);
      if (lastIptEncounter != null) {
        DateTime lastIptEncounterDate=new DateTime(lastIptEncounter.getEncounterDatetime());
        Years yearsSinceLastIpt=Years.yearsBetween(lastIptEncounterDate,new DateTime());
        if (yearsSinceLastIpt.getYears() > 2) {
          notOnIpt=true;
        }
      }
 else {
        notOnIpt=true;
      }
    }
    ret.put(ptId,new BooleanResult(notOnIpt,this));
  }
  return ret;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program iptProgram=MetadataUtils.existing(Program.class,IPTMetadata._Program.IPT);
  Program tbProgram=MetadataUtils.existing(Program.class,TbMetadata._Program.TB);
  EncounterType iptOutcome=MetadataUtils.existing(EncounterType.class,IPTMetadata._EncounterType.IPT_OUTCOME);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> onIptProgram=Filters.inProgram(iptProgram,alive,context);
  Set<Integer> inTbProgram=Filters.inProgram(tbProgram,alive,context);
  CalculationResultMap lastIptMap=Calculations.lastEncounter(iptOutcome,alive,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    Boolean notOnIpt=false;
    if (alive.contains(ptId) && !inTbProgram.contains(ptId) && !onIptProgram.contains(ptId)) {
      Encounter lastIptEncounter=EmrCalculationUtils.encounterResultForPatient(lastIptMap,ptId);
      if (lastIptEncounter != null) {
        DateTime lastIptEncounterDate=new DateTime(lastIptEncounter.getEncounterDatetime());
        Years yearsSinceLastIpt=Years.yearsBetween(lastIptEncounterDate,new DateTime());
        if (yearsSinceLastIpt.getYears() > 2) {
          notOnIpt=true;
        }
      }
 else {
        notOnIpt=true;
      }
    }
    ret.put(ptId,new BooleanResult(notOnIpt,this,context));
  }
  return ret;
}",0.9785615491009682
189662,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Boolean onIpt=false;
  Program iptProgram=MetadataUtils.existing(Program.class,IPTMetadata._Program.IPT);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> onIptProgram=Filters.inProgram(iptProgram,alive,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    if (onIptProgram.contains(ptId)) {
      onIpt=true;
    }
    ret.put(ptId,new BooleanResult(onIpt,this));
  }
  return ret;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program iptProgram=MetadataUtils.existing(Program.class,IPTMetadata._Program.IPT);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> onIptProgram=Filters.inProgram(iptProgram,alive,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    Boolean onIpt=false;
    if (onIptProgram.contains(ptId)) {
      onIpt=true;
    }
    ret.put(ptId,new BooleanResult(onIpt,this,context));
  }
  return ret;
}",0.3001658374792703
189663,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Boolean missingPyridoxine=false;
  Program tbProgram=MetadataUtils.existing(Program.class,TbMetadata._Program.TB);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> inTbProgram=Filters.inProgram(tbProgram,alive,context);
  CalculationResultMap nutritionSupportObs=Calculations.allObs(Dictionary.getConcept(Dictionary.NUTRITIONAL_SUPPORT),inTbProgram,context);
  Concept pyridoxine=Dictionary.getConcept(Dictionary.PYRIDOXINE);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    if (inTbProgram.contains(ptId)) {
      ListResult listResult=(ListResult)nutritionSupportObs.get(ptId);
      List<Obs> allNSObs=CalculationUtils.extractResultValues(listResult);
      for (      Obs obs : allNSObs) {
        if (obs.getValueCoded().equals(pyridoxine)) {
          missingPyridoxine=true;
        }
      }
    }
    ret.put(ptId,new BooleanResult(missingPyridoxine,this));
  }
  return ret;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program tbProgram=MetadataUtils.existing(Program.class,TbMetadata._Program.TB);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> inTbProgram=Filters.inProgram(tbProgram,alive,context);
  Concept pyridoxine=Dictionary.getConcept(Dictionary.PYRIDOXINE);
  CalculationResultMap nutritionSupportObs=Calculations.allObs(Dictionary.getConcept(Dictionary.NUTRITIONAL_SUPPORT),inTbProgram,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    Boolean missingPyridoxine=false;
    if (inTbProgram.contains(ptId)) {
      ListResult listResult=(ListResult)nutritionSupportObs.get(ptId);
      List<Obs> allNSObs=CalculationUtils.extractResultValues(listResult);
      for (      Obs obs : allNSObs) {
        if (obs.getValueCoded().equals(pyridoxine)) {
          missingPyridoxine=true;
        }
      }
    }
    ret.put(ptId,new BooleanResult(missingPyridoxine,this,context));
  }
  return ret;
}",0.8354545454545454
189664,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program tbProgram=MetadataUtils.existing(Program.class,TbMetadata._Program.TB);
  EncounterType tbScreening=MetadataUtils.existing(EncounterType.class,TbMetadata._EncounterType.TB_SCREENING);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> inTbProgram=Filters.inProgram(tbProgram,alive,context);
  CalculationResultMap ret=new CalculationResultMap();
  CalculationResultMap lastEncounterMap=Calculations.lastEncounter(null,alive,context);
  CalculationResultMap lastTbScreeningMap=Calculations.lastEncounter(tbScreening,alive,context);
  for (  Integer ptId : cohort) {
    Boolean missedScreening=false;
    if (alive.contains(ptId) && !inTbProgram.contains(ptId)) {
      Encounter lastEncounter=EmrCalculationUtils.encounterResultForPatient(lastEncounterMap,ptId);
      Encounter lastTbScreeningEncounter=EmrCalculationUtils.encounterResultForPatient(lastTbScreeningMap,ptId);
      DateTime lastEncounterDate=lastEncounter != null ? new DateTime(lastEncounter.getEncounterDatetime()) : null;
      DateTime lastTbScreeningDate=lastTbScreeningEncounter != null ? new DateTime(lastTbScreeningEncounter.getEncounterDatetime()) : null;
      if ((lastTbScreeningDate != null && lastEncounterDate != null)) {
        if (Math.abs(DateTimeComparator.getDateOnlyInstance().compare(lastTbScreeningDate,lastEncounterDate)) > 1) {
          missedScreening=true;
        }
      }
      ret.put(ptId,new BooleanResult(missedScreening,this));
    }
  }
  return ret;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program tbProgram=MetadataUtils.existing(Program.class,TbMetadata._Program.TB);
  EncounterType tbScreening=MetadataUtils.existing(EncounterType.class,TbMetadata._EncounterType.TB_SCREENING);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> inTbProgram=Filters.inProgram(tbProgram,alive,context);
  CalculationResultMap ret=new CalculationResultMap();
  CalculationResultMap lastEncounterMap=Calculations.lastEncounter(null,alive,context);
  CalculationResultMap lastTbScreeningMap=Calculations.lastEncounter(tbScreening,alive,context);
  for (  Integer ptId : cohort) {
    Boolean missedScreening=false;
    if (alive.contains(ptId) && !inTbProgram.contains(ptId)) {
      Encounter lastEncounter=EmrCalculationUtils.encounterResultForPatient(lastEncounterMap,ptId);
      Encounter lastTbScreeningEncounter=EmrCalculationUtils.encounterResultForPatient(lastTbScreeningMap,ptId);
      DateTime lastEncounterDate=lastEncounter != null ? new DateTime(lastEncounter.getEncounterDatetime()) : null;
      DateTime lastTbScreeningDate=lastTbScreeningEncounter != null ? new DateTime(lastTbScreeningEncounter.getEncounterDatetime()) : null;
      if ((lastTbScreeningDate != null && lastEncounterDate != null)) {
        if (Math.abs(DateTimeComparator.getDateOnlyInstance().compare(lastTbScreeningDate,lastEncounterDate)) > 1) {
          missedScreening=true;
        }
      }
    }
    ret.put(ptId,new BooleanResult(missedScreening,this,context));
  }
  return ret;
}",0.9871244635193132
189665,"public FileDownload controller(@RequestParam(""String_Node_Str"") ReportRequest reportRequest,@RequestParam(""String_Node_Str"") String dataSetName,@RequestParam(""String_Node_Str"") String columnName,PageRequest pageRequest,@SpringBean ReportManager reportManager,@SpringBean KenyaUiUtils kenyaUi,@SpringBean ReportService reportService,@SpringBean CsvCreator csvCreator){
  ReportDefinition definition=reportRequest.getReportDefinition().getParameterizable();
  ReportDescriptor report=reportManager.getReportDescriptor(definition);
  CoreUtils.checkAccess(report,kenyaUi.getCurrentApp(pageRequest));
  ReportData reportData=reportService.loadReportData(reportRequest);
  MapDataSet dataSet=(MapDataSet)reportData.getDataSets().get(dataSetName);
  DataSetColumn dataSetColumn=dataSet.getMetaData().getColumn(columnName);
  Object result=dataSet.getData(dataSetColumn);
  Cohort cohort=null;
  if (result instanceof CohortIndicatorAndDimensionResult) {
    CohortIndicatorAndDimensionResult cidr=(CohortIndicatorAndDimensionResult)dataSet.getData(dataSetColumn);
    cohort=cidr.getCohortIndicatorAndDimensionCohort();
  }
 else   if (result instanceof Cohort) {
    cohort=(Cohort)result;
  }
  List<Patient> patients=Context.getPatientSetService().getPatients(cohort.getMemberIds());
  PatientCalculationService calculationService=Context.getService(PatientCalculationService.class);
  PatientCalculationContext calculationContext=calculationService.createCalculationContext();
  Date endDate=(Date)reportRequest.getReportDefinition().getParameterMappings().get(""String_Node_Str"");
  calculationContext.setNow(endDate);
  DateOfEnrollmentArtCalculation dateOfEnrollmentArtCalculation=new DateOfEnrollmentArtCalculation();
  CalculationResultMap enrollmentDates=dateOfEnrollmentArtCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  InitialArtStartDateCalculation initialArtStartDateCalculation=new InitialArtStartDateCalculation();
  CalculationResultMap artInitializationDates=initialArtStartDateCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  List<Object> data=new ArrayList<Object>();
  List<Object> headerRow=new ArrayList<Object>();
  List<Object> header=new ArrayList<Object>();
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  headerRow.add(header.toArray());
  for (  Patient patient : patients) {
    List<Object> row=new ArrayList<Object>();
    row.add(patient.getPersonName().getFullName());
    row.add(patient.getAge());
    row.add(patient.getGender());
    row.add(new ArrayList<PatientIdentifier>(patient.getIdentifiers()).get(0));
    String enrollmentDate=null;
    CalculationResult enrollmentDateCalcResult=enrollmentDates.get(patient.getId());
    if (enrollmentDateCalcResult != null) {
      enrollmentDate=DATE_FORMAT.format((Date)enrollmentDateCalcResult.getValue());
    }
    row.add(enrollmentDate);
    String artInitializationDate=null;
    CalculationResult artInitializationDateCalcResult=artInitializationDates.get(patient.getId());
    if (artInitializationDateCalcResult != null) {
      artInitializationDate=DATE_FORMAT.format((Date)artInitializationDateCalcResult.getValue());
    }
    row.add(artInitializationDate);
    data.add(row.toArray());
  }
  System.out.println(""String_Node_Str"");
  FileDownload fileDownload=new FileDownload(""String_Node_Str"",""String_Node_Str"",csvCreator.createCsv(data,header));
  return fileDownload;
}","public FileDownload controller(@RequestParam(""String_Node_Str"") ReportRequest reportRequest,@RequestParam(""String_Node_Str"") String dataSetName,@RequestParam(""String_Node_Str"") String columnName,PageRequest pageRequest,@SpringBean ReportManager reportManager,@SpringBean KenyaUiUtils kenyaUi,@SpringBean ReportService reportService,@SpringBean CsvMaker csvMaker){
  ReportDefinition definition=reportRequest.getReportDefinition().getParameterizable();
  ReportDescriptor report=reportManager.getReportDescriptor(definition);
  CoreUtils.checkAccess(report,kenyaUi.getCurrentApp(pageRequest));
  ReportData reportData=reportService.loadReportData(reportRequest);
  MapDataSet dataSet=(MapDataSet)reportData.getDataSets().get(dataSetName);
  DataSetColumn dataSetColumn=dataSet.getMetaData().getColumn(columnName);
  Object result=dataSet.getData(dataSetColumn);
  Cohort cohort=null;
  if (result instanceof CohortIndicatorAndDimensionResult) {
    CohortIndicatorAndDimensionResult cidr=(CohortIndicatorAndDimensionResult)dataSet.getData(dataSetColumn);
    cohort=cidr.getCohortIndicatorAndDimensionCohort();
  }
 else   if (result instanceof Cohort) {
    cohort=(Cohort)result;
  }
  List<Patient> patients=Context.getPatientSetService().getPatients(cohort.getMemberIds());
  PatientCalculationService calculationService=Context.getService(PatientCalculationService.class);
  PatientCalculationContext calculationContext=calculationService.createCalculationContext();
  Date endDate=(Date)reportRequest.getReportDefinition().getParameterMappings().get(""String_Node_Str"");
  calculationContext.setNow(endDate);
  DateOfEnrollmentArtCalculation dateOfEnrollmentArtCalculation=new DateOfEnrollmentArtCalculation();
  CalculationResultMap enrollmentDates=dateOfEnrollmentArtCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  InitialArtStartDateCalculation initialArtStartDateCalculation=new InitialArtStartDateCalculation();
  CalculationResultMap artInitializationDates=initialArtStartDateCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  List<Object> data=new ArrayList<Object>();
  List<Object> headerRow=new ArrayList<Object>();
  List<Object> header=new ArrayList<Object>();
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  headerRow.add(header.toArray());
  for (  Patient patient : patients) {
    List<Object> row=new ArrayList<Object>();
    row.add(patient.getPersonName().getFullName());
    row.add(patient.getAge());
    row.add(patient.getGender());
    row.add(new ArrayList<PatientIdentifier>(patient.getIdentifiers()).get(0));
    String enrollmentDate=null;
    CalculationResult enrollmentDateCalcResult=enrollmentDates.get(patient.getId());
    if (enrollmentDateCalcResult != null && enrollmentDateCalcResult.getValue() != null) {
      enrollmentDate=DATE_FORMAT.format((Date)enrollmentDateCalcResult.getValue());
    }
    row.add(enrollmentDate);
    String artInitializationDate=null;
    CalculationResult artInitializationDateCalcResult=artInitializationDates.get(patient.getId());
    if (artInitializationDateCalcResult != null && artInitializationDateCalcResult.getValue() != null) {
      artInitializationDate=DATE_FORMAT.format((Date)artInitializationDateCalcResult.getValue());
    }
    row.add(artInitializationDate);
    data.add(row.toArray());
  }
  System.out.println(""String_Node_Str"");
  FileDownload fileDownload=new FileDownload(""String_Node_Str"",""String_Node_Str"",csvMaker.createCsv(data,header));
  return fileDownload;
}",0.9818584683561834
189666,"public FileDownload controller(@RequestParam(""String_Node_Str"") ReportRequest reportRequest,@RequestParam(""String_Node_Str"") String dataSetName,@RequestParam(""String_Node_Str"") String columnName,PageRequest pageRequest,@SpringBean ReportManager reportManager,@SpringBean KenyaUiUtils kenyaUi,@SpringBean ReportService reportService,@SpringBean CsvMaker csvMaker){
  ReportDefinition definition=reportRequest.getReportDefinition().getParameterizable();
  ReportDescriptor report=reportManager.getReportDescriptor(definition);
  CoreUtils.checkAccess(report,kenyaUi.getCurrentApp(pageRequest));
  ReportData reportData=reportService.loadReportData(reportRequest);
  MapDataSet dataSet=(MapDataSet)reportData.getDataSets().get(dataSetName);
  DataSetColumn dataSetColumn=dataSet.getMetaData().getColumn(columnName);
  Object result=dataSet.getData(dataSetColumn);
  Cohort cohort=null;
  if (result instanceof CohortIndicatorAndDimensionResult) {
    CohortIndicatorAndDimensionResult cidr=(CohortIndicatorAndDimensionResult)dataSet.getData(dataSetColumn);
    cohort=cidr.getCohortIndicatorAndDimensionCohort();
  }
 else   if (result instanceof Cohort) {
    cohort=(Cohort)result;
  }
  List<Patient> patients=Context.getPatientSetService().getPatients(cohort.getMemberIds());
  PatientCalculationService calculationService=Context.getService(PatientCalculationService.class);
  PatientCalculationContext calculationContext=calculationService.createCalculationContext();
  Date endDate=(Date)reportRequest.getReportDefinition().getParameterMappings().get(""String_Node_Str"");
  calculationContext.setNow(endDate);
  DateOfEnrollmentArtCalculation dateOfEnrollmentArtCalculation=new DateOfEnrollmentArtCalculation();
  CalculationResultMap enrollmentDates=dateOfEnrollmentArtCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  InitialArtStartDateCalculation initialArtStartDateCalculation=new InitialArtStartDateCalculation();
  CalculationResultMap artInitializationDates=initialArtStartDateCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  List<Object> data=new ArrayList<Object>();
  List<Object> headerRow=new ArrayList<Object>();
  List<Object> header=new ArrayList<Object>();
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  headerRow.add(header.toArray());
  for (  Patient patient : patients) {
    List<Object> row=new ArrayList<Object>();
    row.add(patient.getPersonName().getFullName());
    row.add(patient.getAge());
    row.add(patient.getGender());
    row.add(new ArrayList<PatientIdentifier>(patient.getIdentifiers()).get(0));
    String enrollmentDate=null;
    CalculationResult enrollmentDateCalcResult=enrollmentDates.get(patient.getId());
    if (enrollmentDateCalcResult != null && enrollmentDateCalcResult.getValue() != null) {
      enrollmentDate=DATE_FORMAT.format((Date)enrollmentDateCalcResult.getValue());
    }
    row.add(enrollmentDate);
    String artInitializationDate=null;
    CalculationResult artInitializationDateCalcResult=artInitializationDates.get(patient.getId());
    if (artInitializationDateCalcResult != null && artInitializationDateCalcResult.getValue() != null) {
      artInitializationDate=DATE_FORMAT.format((Date)artInitializationDateCalcResult.getValue());
    }
    row.add(artInitializationDate);
    data.add(row.toArray());
  }
  System.out.println(""String_Node_Str"");
  FileDownload fileDownload=new FileDownload(""String_Node_Str"",""String_Node_Str"",csvMaker.createCsv(data,header));
  return fileDownload;
}","public FileDownload controller(@RequestParam(""String_Node_Str"") ReportRequest reportRequest,@RequestParam(""String_Node_Str"") String dataSetName,@RequestParam(""String_Node_Str"") String columnName,PageRequest pageRequest,@SpringBean ReportManager reportManager,@SpringBean KenyaUiUtils kenyaUi,@SpringBean ReportService reportService,@SpringBean CsvMaker csvMaker){
  ReportDefinition definition=reportRequest.getReportDefinition().getParameterizable();
  ReportDescriptor report=reportManager.getReportDescriptor(definition);
  CoreUtils.checkAccess(report,kenyaUi.getCurrentApp(pageRequest));
  ReportData reportData=reportService.loadReportData(reportRequest);
  MapDataSet dataSet=(MapDataSet)reportData.getDataSets().get(dataSetName);
  DataSetColumn dataSetColumn=dataSet.getMetaData().getColumn(columnName);
  Object result=dataSet.getData(dataSetColumn);
  Cohort cohort=null;
  if (result instanceof CohortIndicatorAndDimensionResult) {
    CohortIndicatorAndDimensionResult cidr=(CohortIndicatorAndDimensionResult)dataSet.getData(dataSetColumn);
    cohort=cidr.getCohortIndicatorAndDimensionCohort();
  }
 else   if (result instanceof Cohort) {
    cohort=(Cohort)result;
  }
  List<Patient> patients=Context.getPatientSetService().getPatients(cohort.getMemberIds());
  PatientCalculationService calculationService=Context.getService(PatientCalculationService.class);
  PatientCalculationContext calculationContext=calculationService.createCalculationContext();
  Date endDate=(Date)reportRequest.getReportDefinition().getParameterMappings().get(""String_Node_Str"");
  calculationContext.setNow(endDate);
  DateOfEnrollmentArtCalculation dateOfEnrollmentArtCalculation=new DateOfEnrollmentArtCalculation();
  CalculationResultMap enrollmentDates=dateOfEnrollmentArtCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  InitialArtStartDateCalculation initialArtStartDateCalculation=new InitialArtStartDateCalculation();
  CalculationResultMap artInitializationDates=initialArtStartDateCalculation.evaluate(cohort.getMemberIds(),null,calculationContext);
  List<Object> data=new ArrayList<Object>();
  List<Object> headerRow=new ArrayList<Object>();
  List<Object> header=new ArrayList<Object>();
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  header.add(""String_Node_Str"");
  headerRow.add(header.toArray());
  for (  Patient patient : patients) {
    List<Object> row=new ArrayList<Object>();
    row.add(patient.getPersonName().getFullName());
    row.add(patient.getAge());
    row.add(patient.getGender());
    row.add(getUpn(patient));
    String enrollmentDate=null;
    CalculationResult enrollmentDateCalcResult=enrollmentDates.get(patient.getId());
    if (enrollmentDateCalcResult != null && enrollmentDateCalcResult.getValue() != null) {
      enrollmentDate=DATE_FORMAT.format((Date)enrollmentDateCalcResult.getValue());
    }
    row.add(enrollmentDate);
    String artInitializationDate=null;
    CalculationResult artInitializationDateCalcResult=artInitializationDates.get(patient.getId());
    if (artInitializationDateCalcResult != null && artInitializationDateCalcResult.getValue() != null) {
      artInitializationDate=DATE_FORMAT.format((Date)artInitializationDateCalcResult.getValue());
    }
    row.add(artInitializationDate);
    data.add(row.toArray());
  }
  System.out.println(""String_Node_Str"");
  FileDownload fileDownload=new FileDownload(""String_Node_Str"",""String_Node_Str"",csvMaker.createCsv(data,header));
  return fileDownload;
}",0.9892650701899256
189667,"public void controller(){
}","public void controller(FragmentModel model){
  model.put(""String_Node_Str"",Context.getAdministrationService().getGlobalProperty(EmrConstants.GP_EXTERNAL_HELP_URL,EmrConstants.DEFAULT_EXTERNAL_HELP_URL));
}",0.2327586206896551
189668,"/** 
 * @see org.openmrs.calculation.patient.PatientCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 */
@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program mchcsProgram=MetadataUtils.getProgram(MchMetadata._Program.MCHCS);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> inMchcsProgram=Filters.inProgram(mchcsProgram,alive,context);
  CalculationResultMap lastChildHivStatus=Calculations.lastObs(Dictionary.getConcept(Dictionary.CHILDS_CURRENT_HIV_STATUS),inMchcsProgram,context);
  CalculationResultMap lastHivRapidTest1=Calculations.lastObs(Dictionary.getConcept(Dictionary.HIV_RAPID_TEST_1_QUALITATIVE),inMchcsProgram,context);
  CalculationResultMap lastHivRapidTest2=Calculations.lastObs(Dictionary.getConcept(Dictionary.HIV_RAPID_TEST_2_QUALITATIVE),inMchcsProgram,context);
  Concept hivExposed=Dictionary.getConcept(Dictionary.EXPOSURE_TO_HIV);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    boolean needsAntibody=false;
    if (inMchcsProgram.contains(ptId) && lastChildHivStatus != null) {
      Obs hivStatusObs=EmrCalculationUtils.obsResultForPatient(lastChildHivStatus,ptId);
      Obs rapidTest1=EmrCalculationUtils.obsResultForPatient(lastHivRapidTest1,ptId);
      Obs rapidTest2=EmrCalculationUtils.obsResultForPatient(lastHivRapidTest2,ptId);
      if (rapidTest1 == null && rapidTest2 == null && (hivStatusObs.getValueCoded().equals(hivExposed))) {
        needsAntibody=true;
      }
    }
    ret.put(ptId,new BooleanResult(needsAntibody,this,context));
  }
  return ret;
}","/** 
 * @see org.openmrs.calculation.patient.PatientCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 */
@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program mchcsProgram=MetadataUtils.existing(Program.class,MchMetadata._Program.MCHCS);
  Set<Integer> alive=Filters.alive(cohort,context);
  Set<Integer> inMchcsProgram=Filters.inProgram(mchcsProgram,alive,context);
  CalculationResultMap lastChildHivStatus=Calculations.lastObs(Dictionary.getConcept(Dictionary.CHILDS_CURRENT_HIV_STATUS),inMchcsProgram,context);
  CalculationResultMap lastHivRapidTest1=Calculations.lastObs(Dictionary.getConcept(Dictionary.HIV_RAPID_TEST_1_QUALITATIVE),inMchcsProgram,context);
  CalculationResultMap lastHivRapidTest2=Calculations.lastObs(Dictionary.getConcept(Dictionary.HIV_RAPID_TEST_2_QUALITATIVE),inMchcsProgram,context);
  Concept hivExposed=Dictionary.getConcept(Dictionary.EXPOSURE_TO_HIV);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    boolean needsAntibody=false;
    if (inMchcsProgram.contains(ptId)) {
      Obs hivStatusObs=EmrCalculationUtils.obsResultForPatient(lastChildHivStatus,ptId);
      Obs rapidTest1=EmrCalculationUtils.obsResultForPatient(lastHivRapidTest1,ptId);
      Obs rapidTest2=EmrCalculationUtils.obsResultForPatient(lastHivRapidTest2,ptId);
      if (hivStatusObs != null && (hivStatusObs.getValueCoded().equals(hivExposed)) && rapidTest1 == null && rapidTest2 == null) {
        needsAntibody=true;
      }
    }
    ret.put(ptId,new BooleanResult(needsAntibody,this,context));
  }
  return ret;
}",0.9439953810623556
189669,"/** 
 * Synchronizes an object
 * @param syncKey the sync key
 * @param incoming the object
 */
protected void synchronizeObject(MetadataDeployService deployService,Object syncKey,T incoming){
  Integer existingId=keyCache.get(syncKey);
  T existing=existingId != null ? fetchExistingById(existingId) : null;
  if (existing == null) {
    deployService.saveObject(incoming);
    keyCache.put(syncKey,incoming.getId());
    log.info(""String_Node_Str"" + incoming.getName() + ""String_Node_Str""+ syncKey);
    created.add(incoming);
  }
 else {
    String incomingHash=getObjectHash(incoming);
    String existingHash=getObjectHash(existing);
    if (!incomingHash.equals(existingHash)) {
      incoming.setId(existing.getId());
      Context.evictFromSession(existing);
      deployService.saveObject(incoming);
      log.info(""String_Node_Str"" + incoming.getName() + ""String_Node_Str""+ syncKey);
      updated.add(incoming);
    }
    notSyncedObjects.remove(existing.getId());
  }
}","/** 
 * Synchronizes an object
 * @param syncKey the sync key
 * @param incoming the object
 */
protected void synchronizeObject(MetadataDeployService deployService,Object syncKey,T incoming){
  Integer existingId=keyCache.get(syncKey);
  T existing=existingId != null ? fetchExistingById(existingId) : null;
  if (existing == null) {
    deployService.saveObject(incoming);
    keyCache.put(syncKey,incoming.getId());
    log.info(""String_Node_Str"" + incoming.getName() + ""String_Node_Str""+ syncKey);
    created.add(incoming);
  }
 else {
    String incomingHash=getObjectHash(incoming);
    String existingHash=getObjectHash(existing);
    if (!incomingHash.equals(existingHash)) {
      mergeWithExisting(existing,incoming);
      deployService.saveObject(incoming);
      log.info(""String_Node_Str"" + incoming.getName() + ""String_Node_Str""+ syncKey);
      updated.add(incoming);
    }
    notSyncedObjects.remove(existing.getId());
  }
}",0.946985446985447
189670,"@Test public void integration() throws Exception {
  LocationAttributeType codeAttrType=MetadataUtils.getLocationAttributeType(CommonMetadata._LocationAttributeType.MASTER_FACILITY_CODE);
  ObjectSource<Location> source1=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization1=new LocationMflSynchronization(source1);
  synchronization1.run();
  Assert.assertThat(synchronization1.getCreatedObjects(),hasSize(3));
  Assert.assertThat(synchronization1.getUpdatedObjects(),hasSize(0));
  Assert.assertThat(synchronization1.getRetiredObjects(),hasSize(0));
  Location modified=locationService.getLocation(""String_Node_Str"");
  modified.setName(""String_Node_Str"");
  locationService.saveLocation(modified);
  ObjectSource<Location> source2=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization2=new LocationMflSynchronization(source2);
  synchronization2.run();
  Assert.assertThat(locationService.getLocation(""String_Node_Str""),notNullValue());
  Assert.assertThat(synchronization2.getCreatedObjects(),hasSize(0));
  Assert.assertThat(synchronization2.getUpdatedObjects(),hasSize(1));
  Assert.assertThat(synchronization2.getRetiredObjects(),hasSize(0));
  Location invalid=locationService.getLocation(""String_Node_Str"");
  invalid.getActiveAttributes(codeAttrType).get(0).setValue(""String_Node_Str"");
  locationService.saveLocation(invalid);
  ObjectSource<Location> source3=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization3=new LocationMflSynchronization(source3);
  synchronization3.run();
  Assert.assertThat(synchronization3.getCreatedObjects(),hasSize(1));
  Assert.assertThat(synchronization3.getUpdatedObjects(),hasSize(0));
  Assert.assertThat(synchronization3.getRetiredObjects(),hasSize(1));
  ObjectSource<Location> source4=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization4=new LocationMflSynchronization(source4);
  synchronization4.run();
  Assert.assertThat(synchronization4.getCreatedObjects(),hasSize(0));
  Assert.assertThat(synchronization4.getUpdatedObjects(),hasSize(0));
  Assert.assertThat(synchronization4.getRetiredObjects(),hasSize(0));
  Context.flushSession();
  Context.clearSession();
  for (  Location loc : locationService.getAllLocations()) {
    List<LocationAttribute> codeAttrs=loc.getActiveAttributes(codeAttrType);
  }
}","@Test public void integration() throws Exception {
  LocationAttributeType codeAttrType=MetadataUtils.getLocationAttributeType(CommonMetadata._LocationAttributeType.MASTER_FACILITY_CODE);
  ObjectSource<Location> source1=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization1=new LocationMflSynchronization(source1);
  synchronization1.run();
  Assert.assertThat(synchronization1.getCreatedObjects(),hasSize(3));
  Assert.assertThat(synchronization1.getUpdatedObjects(),hasSize(0));
  Assert.assertThat(synchronization1.getRetiredObjects(),hasSize(0));
  Location modified=locationService.getLocation(""String_Node_Str"");
  modified.setName(""String_Node_Str"");
  locationService.saveLocation(modified);
  ObjectSource<Location> source2=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization2=new LocationMflSynchronization(source2);
  synchronization2.run();
  Assert.assertThat(locationService.getLocation(""String_Node_Str""),notNullValue());
  Assert.assertThat(synchronization2.getCreatedObjects(),hasSize(0));
  Assert.assertThat(synchronization2.getUpdatedObjects(),hasSize(1));
  Assert.assertThat(synchronization2.getRetiredObjects(),hasSize(0));
  Location invalid=locationService.getLocation(""String_Node_Str"");
  invalid.getActiveAttributes(codeAttrType).get(0).setValue(""String_Node_Str"");
  locationService.saveLocation(invalid);
  ObjectSource<Location> source3=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization3=new LocationMflSynchronization(source3);
  synchronization3.run();
  Assert.assertThat(synchronization3.getCreatedObjects(),hasSize(1));
  Assert.assertThat(synchronization3.getUpdatedObjects(),hasSize(0));
  Assert.assertThat(synchronization3.getRetiredObjects(),hasSize(1));
  ObjectSource<Location> source4=new LocationMflCsvSource(""String_Node_Str"",codeAttrType);
  AbstractSynchronization synchronization4=new LocationMflSynchronization(source4);
  synchronization4.run();
  Assert.assertThat(synchronization4.getCreatedObjects(),hasSize(0));
  Assert.assertThat(synchronization4.getUpdatedObjects(),hasSize(0));
  Assert.assertThat(synchronization4.getRetiredObjects(),hasSize(0));
  Context.flushSession();
  Context.clearSession();
  for (  Location loc : locationService.getAllLocations()) {
    List<LocationAttribute> codeAttrs=loc.getActiveAttributes(codeAttrType);
    Assert.assertThat(codeAttrs.size(),lessThanOrEqualTo(1));
  }
}",0.9874949576442114
189671,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> params,PatientCalculationContext context){
  PregnancyStage stage=(params != null && params.containsKey(""String_Node_Str"")) ? (PregnancyStage)params.get(""String_Node_Str"") : null;
  Concept result=(params != null && params.containsKey(""String_Node_Str"")) ? (Concept)params.get(""String_Node_Str"") : null;
  Boolean partner=(params != null && params.containsKey(""String_Node_Str"")) ? (Boolean)params.get(""String_Node_Str"") : false;
  Program mchmsProgram=MetadataUtils.getProgram(MchMetadata._Program.MCHMS);
  Set<Integer> alivePatients=Filters.alive(cohort,context);
  CalculationResultMap activePatientPrograms=Calculations.activeEnrollment(mchmsProgram,alivePatients,context);
  Set<Integer> aliveMchmsPatients=CalculationUtils.patientsThatPass(activePatientPrograms);
  Concept hivStatusConcept=partner ? Dictionary.getConcept(Dictionary.PARTNER_HIV_STATUS) : Dictionary.getConcept(Dictionary.HIV_STATUS);
  Concept hivTestDateConcept=partner ? Dictionary.getConcept(Dictionary.DATE_OF_PARTNER_HIV_DIAGNOSIS) : Dictionary.getConcept(Dictionary.DATE_OF_HIV_DIAGNOSIS);
  CalculationResultMap lastHivStatusObss=Calculations.lastObs(hivStatusConcept,aliveMchmsPatients,context);
  CalculationResultMap lastHivTestDateObss=Calculations.lastObs(hivTestDateConcept,aliveMchmsPatients,context);
  CalculationResultMap lastDeliveryDateObss=Calculations.lastObs(Dictionary.getConcept(Dictionary.DATE_OF_CONFINEMENT),aliveMchmsPatients,context);
  CalculationResultMap resultMap=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    Concept patientsLastHivStatus=EmrCalculationUtils.codedObsResultForPatient(lastHivStatusObss,ptId);
    Date patientsLastHivTestDate=EmrCalculationUtils.datetimeObsResultForPatient(lastHivTestDateObss,ptId);
    CalculationResult activePatientProgram=activePatientPrograms.get(ptId);
    boolean qualified=false;
    if (aliveMchmsPatients.contains(ptId) && (patientsLastHivStatus != null && (patientsLastHivStatus.equals(Dictionary.getConcept(Dictionary.POSITIVE)) || patientsLastHivStatus.equals(Dictionary.getConcept(Dictionary.NEGATIVE)))) && (activePatientProgram != null)) {
      Date enrollmentDate=((PatientProgram)activePatientProgram.getValue()).getDateEnrolled();
      Date deliveryDate=EmrCalculationUtils.datetimeObsResultForPatient(lastDeliveryDateObss,ptId);
      if (deliveryDate != null && deliveryDate.before(enrollmentDate)) {
        deliveryDate=null;
      }
      qualified=qualifiedByStage(stage,enrollmentDate,patientsLastHivTestDate,deliveryDate) && (result == null ? true : result.equals(patientsLastHivStatus));
    }
    resultMap.put(ptId,new BooleanResult(qualified,this,context));
  }
  return resultMap;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> params,PatientCalculationContext context){
  PregnancyStage stage=(params != null && params.containsKey(""String_Node_Str"")) ? (PregnancyStage)params.get(""String_Node_Str"") : null;
  Concept result=(params != null && params.containsKey(""String_Node_Str"")) ? (Concept)params.get(""String_Node_Str"") : null;
  Boolean partner=(params != null && params.containsKey(""String_Node_Str"")) ? (Boolean)params.get(""String_Node_Str"") : false;
  Program mchmsProgram=MetadataUtils.getProgram(MchMetadata._Program.MCHMS);
  Set<Integer> alivePatients=Filters.alive(cohort,context);
  CalculationResultMap activePatientPrograms=Calculations.activeEnrollment(mchmsProgram,alivePatients,context);
  Set<Integer> aliveMchmsPatients=CalculationUtils.patientsThatPass(activePatientPrograms);
  Concept hivStatusConcept=partner ? Dictionary.getConcept(Dictionary.PARTNER_HIV_STATUS) : Dictionary.getConcept(Dictionary.HIV_STATUS);
  Concept hivTestDateConcept=partner ? Dictionary.getConcept(Dictionary.DATE_OF_PARTNER_HIV_DIAGNOSIS) : Dictionary.getConcept(Dictionary.DATE_OF_HIV_DIAGNOSIS);
  CalculationResultMap lastHivStatusObss=Calculations.lastObs(hivStatusConcept,aliveMchmsPatients,context);
  CalculationResultMap lastHivTestDateObss=Calculations.lastObs(hivTestDateConcept,aliveMchmsPatients,context);
  CalculationResultMap lastDeliveryDateObss=Calculations.lastObs(Dictionary.getConcept(Dictionary.DATE_OF_CONFINEMENT),aliveMchmsPatients,context);
  CalculationResultMap resultMap=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    Concept lastHivStatus=EmrCalculationUtils.codedObsResultForPatient(lastHivStatusObss,ptId);
    Date lastHivTestDate=EmrCalculationUtils.datetimeObsResultForPatient(lastHivTestDateObss,ptId);
    CalculationResult activePatientProgram=activePatientPrograms.get(ptId);
    boolean qualified=false;
    if (aliveMchmsPatients.contains(ptId) && (lastHivStatus != null && (lastHivStatus.equals(Dictionary.getConcept(Dictionary.POSITIVE)) || lastHivStatus.equals(Dictionary.getConcept(Dictionary.NEGATIVE)))) && (activePatientProgram != null)) {
      Date enrollmentDate=((PatientProgram)activePatientProgram.getValue()).getDateEnrolled();
      Date deliveryDate=EmrCalculationUtils.datetimeObsResultForPatient(lastDeliveryDateObss,ptId);
      if (deliveryDate != null && deliveryDate.before(enrollmentDate)) {
        deliveryDate=null;
      }
      qualified=qualifiedByStage(stage,enrollmentDate,lastHivTestDate,deliveryDate) && (result == null ? true : result.equals(lastHivStatus));
    }
    resultMap.put(ptId,new BooleanResult(qualified,this,context));
  }
  return resultMap;
}",0.9872448979591836
189672,"/** 
 * @see org.openmrs.calculation.patient.PatientCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 */
@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Concept currentWhoStage=getConcept(Dictionary.CURRENT_WHO_STAGE);
  CalculationResultMap artStartDates=calculate(new InitialArtStartDateCalculation(),cohort,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    SimpleResult result=null;
    Date artStartDate=EmrCalculationUtils.datetimeResultForPatient(artStartDates,ptId);
    if (artStartDate != null) {
      CalculationResultMap currentWhoStageObss=Calculations.lastObsOnOrBefore(currentWhoStage,artStartDate,Collections.singleton(ptId),context);
      Obs whoStageObs=EmrCalculationUtils.obsResultForPatient(currentWhoStageObss,ptId);
      if (whoStageObs != null) {
        result=new SimpleResult(EmrUtils.whoStage(whoStageObs.getValueCoded()),this);
      }
    }
    ret.put(ptId,result);
  }
  return ret;
}","/** 
 * @see org.openmrs.calculation.patient.PatientCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 */
@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Concept currentWhoStage=getConcept(Dictionary.CURRENT_WHO_STAGE);
  CalculationResultMap artStartDates=calculate(new InitialArtStartDateCalculation(),cohort,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    SimpleResult result=null;
    Date artStartDate=EmrCalculationUtils.datetimeResultForPatient(artStartDates,ptId);
    if (artStartDate != null) {
      CalculationResultMap currentWhoStageObss=Calculations.lastObsOnOrBefore(currentWhoStage,artStartDate,Collections.singleton(ptId),context);
      Obs whoStageObs=EmrCalculationUtils.obsResultForPatient(currentWhoStageObss,ptId);
      if (whoStageObs != null) {
        Integer whoStage=EmrUtils.whoStage(whoStageObs.getValueCoded());
        if (whoStage != null) {
          result=new SimpleResult(whoStage,this);
        }
      }
    }
    ret.put(ptId,result);
  }
  return ret;
}",0.941726924712888
189673,"/** 
 * @see PregnantAtArtStartCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 * @verifies calculate recorded pregnancy status at ART start for all patients
 */
@Test public void evaluate_shouldCalculatePregnancyStatusAtArtStart() throws Exception {
  PatientService ps=Context.getPatientService();
  Concept pregnancyStatus=Dictionary.getConcept(Dictionary.PREGNANCY_STATUS);
  Concept yes=Dictionary.getConcept(Dictionary.YES);
  Concept no=Dictionary.getConcept(Dictionary.NO);
  Concept stavudine=Context.getConceptService().getConcept(84309);
  TestUtils.saveObs(ps.getPatient(2),pregnancyStatus,yes,TestUtils.date(2007,12,25));
  TestUtils.saveObs(ps.getPatient(6),pregnancyStatus,yes,TestUtils.date(2012,1,1));
  TestUtils.saveDrugOrder(Context.getPatientService().getPatient(6),stavudine,TestUtils.date(2012,1,8),null);
  TestUtils.saveObs(ps.getPatient(7),pregnancyStatus,yes,TestUtils.date(2012,1,1));
  TestUtils.saveObs(ps.getPatient(7),pregnancyStatus,no,TestUtils.date(2012,1,3));
  TestUtils.saveDrugOrder(Context.getPatientService().getPatient(7),stavudine,TestUtils.date(2012,1,8),null);
  TestUtils.saveObs(ps.getPatient(8),pregnancyStatus,yes,TestUtils.date(2012,1,1));
  TestUtils.saveObs(ps.getPatient(8),pregnancyStatus,no,TestUtils.date(2012,1,15));
  TestUtils.saveDrugOrder(Context.getPatientService().getPatient(8),stavudine,TestUtils.date(2012,1,8),null);
  Context.flushSession();
  List<Integer> ptIds=Arrays.asList(2,6,7,8,999);
  CalculationResultMap resultMap=Context.getService(PatientCalculationService.class).evaluate(ptIds,new PregnantAtArtStartCalculation());
  Assert.assertTrue((Boolean)resultMap.get(2).getValue());
  Assert.assertTrue((Boolean)resultMap.get(6).getValue());
  Assert.assertFalse((Boolean)resultMap.get(7).getValue());
  Assert.assertTrue((Boolean)resultMap.get(8).getValue());
  Assert.assertFalse((Boolean)resultMap.get(999).getValue());
}","/** 
 * @see PregnantAtArtStartCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 * @verifies calculate recorded pregnancy status at ART start for all patients
 */
@Test public void evaluate_shouldCalculatePregnancyStatusAtArtStart() throws Exception {
  Concept pregnancyStatus=Dictionary.getConcept(Dictionary.PREGNANCY_STATUS);
  Concept yes=Dictionary.getConcept(Dictionary.YES);
  Concept no=Dictionary.getConcept(Dictionary.NO);
  Concept stavudine=Dictionary.getConcept(Dictionary.STAVUDINE);
  TestUtils.saveObs(TestUtils.getPatient(2),pregnancyStatus,yes,TestUtils.date(2007,12,25));
  TestUtils.saveObs(TestUtils.getPatient(6),pregnancyStatus,yes,TestUtils.date(2012,1,1));
  TestUtils.saveDrugOrder(TestUtils.getPatient(6),stavudine,TestUtils.date(2012,1,8),null);
  TestUtils.saveObs(TestUtils.getPatient(7),pregnancyStatus,yes,TestUtils.date(2012,1,1));
  TestUtils.saveObs(TestUtils.getPatient(7),pregnancyStatus,no,TestUtils.date(2012,1,3));
  TestUtils.saveDrugOrder(TestUtils.getPatient(7),stavudine,TestUtils.date(2012,1,8),null);
  TestUtils.saveObs(TestUtils.getPatient(8),pregnancyStatus,yes,TestUtils.date(2012,1,1));
  TestUtils.saveObs(TestUtils.getPatient(8),pregnancyStatus,no,TestUtils.date(2012,1,15));
  TestUtils.saveDrugOrder(TestUtils.getPatient(8),stavudine,TestUtils.date(2012,1,8),null);
  Context.flushSession();
  List<Integer> ptIds=Arrays.asList(2,6,7,8,999);
  CalculationResultMap resultMap=Context.getService(PatientCalculationService.class).evaluate(ptIds,new PregnantAtArtStartCalculation());
  Assert.assertTrue((Boolean)resultMap.get(2).getValue());
  Assert.assertTrue((Boolean)resultMap.get(6).getValue());
  Assert.assertFalse((Boolean)resultMap.get(7).getValue());
  Assert.assertTrue((Boolean)resultMap.get(8).getValue());
  Assert.assertFalse((Boolean)resultMap.get(999).getValue());
}",0.9252650633566072
189674,"/** 
 * Loads definitions from an input stream containing XML
 * @param stream the path to XML resource
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 */
public void loadDefinitionsFromXML(InputStream stream) throws ParserConfigurationException, IOException, SAXException {
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=dbFactory.newDocumentBuilder();
  Document document=builder.parse(stream);
  Element root=document.getDocumentElement();
  NodeList categoryNodes=root.getElementsByTagName(""String_Node_Str"");
  for (int c=0; c < categoryNodes.getLength(); c++) {
    Element categoryElement=(Element)categoryNodes.item(c);
    String categoryCode=categoryElement.getAttribute(""String_Node_Str"");
    String masterSetUuid=categoryElement.getAttribute(""String_Node_Str"");
    Concept masterSetConcept=Context.getConceptService().getConceptByUuid(masterSetUuid);
    masterSetConcepts.put(categoryCode,masterSetConcept.getConceptId());
    Map<String,DrugReference> categoryDrugs=new HashMap<String,DrugReference>();
    List<RegimenDefinitionGroup> categoryGroups=new ArrayList<RegimenDefinitionGroup>();
    NodeList drugNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int d=0; d < drugNodes.getLength(); d++) {
      Element drugElement=(Element)drugNodes.item(d);
      String drugCode=drugElement.getAttribute(""String_Node_Str"");
      String drugConceptUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      String drugDrugUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      DrugReference drug=(drugDrugUuid != null) ? DrugReference.fromDrugUuid(drugDrugUuid) : DrugReference.fromConceptUuid(drugConceptUuid);
      categoryDrugs.put(drugCode,drug);
    }
    NodeList groupNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int g=0; g < groupNodes.getLength(); g++) {
      Element groupElement=(Element)groupNodes.item(g);
      String groupCode=groupElement.getAttribute(""String_Node_Str"");
      String groupName=groupElement.getAttribute(""String_Node_Str"");
      RegimenDefinitionGroup group=new RegimenDefinitionGroup(groupCode,groupName);
      categoryGroups.add(group);
      NodeList regimenNodes=groupElement.getElementsByTagName(""String_Node_Str"");
      for (int r=0; r < regimenNodes.getLength(); r++) {
        Element regimenElement=(Element)regimenNodes.item(r);
        String name=regimenElement.getAttribute(""String_Node_Str"");
        RegimenDefinition regimenDefinition=new RegimenDefinition(name,group);
        NodeList componentNodes=regimenElement.getElementsByTagName(""String_Node_Str"");
        for (int p=0; p < componentNodes.getLength(); p++) {
          Element componentElement=(Element)componentNodes.item(p);
          String drugCode=componentElement.getAttribute(""String_Node_Str"");
          Double dose=componentElement.hasAttribute(""String_Node_Str"") ? Double.parseDouble(componentElement.getAttribute(""String_Node_Str"")) : null;
          String units=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          String frequency=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          DrugReference drug=categoryDrugs.get(drugCode);
          if (drug == null)           throw new RuntimeException(""String_Node_Str"" + drugCode);
          regimenDefinition.addComponent(drug,dose,units,frequency);
        }
        group.addRegimen(regimenDefinition);
      }
    }
    drugs.put(categoryCode,categoryDrugs);
    regimenGroups.put(categoryCode,categoryGroups);
  }
}","/** 
 * Loads definitions from an input stream containing XML
 * @param stream the path to XML resource
 * @throws ParserConfigurationException
 * @throws IOException
 * @throws SAXException
 */
public void loadDefinitionsFromXML(InputStream stream) throws ParserConfigurationException, IOException, SAXException {
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=dbFactory.newDocumentBuilder();
  Document document=builder.parse(stream);
  Element root=document.getDocumentElement();
  NodeList categoryNodes=root.getElementsByTagName(""String_Node_Str"");
  for (int c=0; c < categoryNodes.getLength(); c++) {
    Element categoryElement=(Element)categoryNodes.item(c);
    String categoryCode=categoryElement.getAttribute(""String_Node_Str"");
    String masterSetUuid=categoryElement.getAttribute(""String_Node_Str"");
    Concept masterSetConcept=MetadataUtils.getConcept(masterSetUuid);
    masterSetConcepts.put(categoryCode,masterSetConcept.getConceptId());
    Map<String,DrugReference> categoryDrugs=new HashMap<String,DrugReference>();
    List<RegimenDefinitionGroup> categoryGroups=new ArrayList<RegimenDefinitionGroup>();
    NodeList drugNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int d=0; d < drugNodes.getLength(); d++) {
      Element drugElement=(Element)drugNodes.item(d);
      String drugCode=drugElement.getAttribute(""String_Node_Str"");
      String drugConceptUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      String drugDrugUuid=drugElement.hasAttribute(""String_Node_Str"") ? drugElement.getAttribute(""String_Node_Str"") : null;
      DrugReference drug=(drugDrugUuid != null) ? DrugReference.fromDrugUuid(drugDrugUuid) : DrugReference.fromConceptUuid(drugConceptUuid);
      categoryDrugs.put(drugCode,drug);
    }
    NodeList groupNodes=categoryElement.getElementsByTagName(""String_Node_Str"");
    for (int g=0; g < groupNodes.getLength(); g++) {
      Element groupElement=(Element)groupNodes.item(g);
      String groupCode=groupElement.getAttribute(""String_Node_Str"");
      String groupName=groupElement.getAttribute(""String_Node_Str"");
      RegimenDefinitionGroup group=new RegimenDefinitionGroup(groupCode,groupName);
      categoryGroups.add(group);
      NodeList regimenNodes=groupElement.getElementsByTagName(""String_Node_Str"");
      for (int r=0; r < regimenNodes.getLength(); r++) {
        Element regimenElement=(Element)regimenNodes.item(r);
        String name=regimenElement.getAttribute(""String_Node_Str"");
        RegimenDefinition regimenDefinition=new RegimenDefinition(name,group);
        NodeList componentNodes=regimenElement.getElementsByTagName(""String_Node_Str"");
        for (int p=0; p < componentNodes.getLength(); p++) {
          Element componentElement=(Element)componentNodes.item(p);
          String drugCode=componentElement.getAttribute(""String_Node_Str"");
          Double dose=componentElement.hasAttribute(""String_Node_Str"") ? Double.parseDouble(componentElement.getAttribute(""String_Node_Str"")) : null;
          String units=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          String frequency=componentElement.hasAttribute(""String_Node_Str"") ? componentElement.getAttribute(""String_Node_Str"") : null;
          DrugReference drug=categoryDrugs.get(drugCode);
          if (drug == null)           throw new RuntimeException(""String_Node_Str"" + drugCode);
          regimenDefinition.addComponent(drug,dose,units,frequency);
        }
        group.addRegimen(regimenDefinition);
      }
    }
    drugs.put(categoryCode,categoryDrugs);
    regimenGroups.put(categoryCode,categoryGroups);
  }
}",0.9917880794701986
189675,"@Before public void setup() throws Exception {
  executeDataSet(""String_Node_Str"");
  executeDataSet(""String_Node_Str"");
  executeDataSet(""String_Node_Str"");
  reportManager.refresh();
}","@Before public void setup() throws Exception {
  executeDataSet(""String_Node_Str"");
  executeDataSet(""String_Node_Str"");
  executeDataSet(""String_Node_Str"");
  regimenManager.refresh();
  reportManager.refresh();
}",0.91
189676,"public void controller(FragmentModel model,@SpringBean KenyaEmr emr){
  if (!emr.isRefreshed()) {
    model.put(""String_Node_Str"",""String_Node_Str"");
  }
}","public void controller(FragmentModel model,@SpringBean KenyaEmr emr){
  String systemMessage=null;
  if (!emr.isRefreshed()) {
    systemMessage=""String_Node_Str"";
  }
  model.put(""String_Node_Str"",systemMessage);
}",0.7243243243243244
189677,"/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
@Override public void validate(Object target,Errors errors){
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  boolean hasUser=false;
  if (StringUtils.isNotEmpty(username)) {
    hasUser=true;
    if (Context.getUserService().getUserByUsername(username) != null) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (StringUtils.isEmpty(password)) {
      require(errors,""String_Node_Str"");
    }
 else {
      try {
        OpenmrsUtil.validatePassword(username,password,null);
      }
 catch (      PasswordException e) {
        errors.rejectValue(""String_Node_Str"",e.getMessage());
      }
    }
    if (StringUtils.isEmpty(confirmPassword)) {
      require(errors,""String_Node_Str"");
    }
 else     if (!OpenmrsUtil.nullSafeEquals(password,confirmPassword)) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    require(errors,""String_Node_Str"");
  }
  boolean hasProvider=false;
  if (StringUtils.isNotEmpty(providerIdentifier)) {
    hasProvider=true;
    Provider withId=Context.getProviderService().getProviderByIdentifier(providerIdentifier);
    if (withId != null) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (!hasUser && !hasProvider) {
    errors.reject(""String_Node_Str"");
  }
}","/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
@Override public void validate(Object target,Errors errors){
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  boolean hasUser=false;
  if (StringUtils.isNotEmpty(username)) {
    hasUser=true;
    if (Context.getUserService().getUserByUsername(username) != null) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    if (StringUtils.isEmpty(password)) {
      require(errors,""String_Node_Str"");
    }
 else {
      try {
        OpenmrsUtil.validatePassword(username,password,null);
      }
 catch (      PasswordException e) {
        errors.rejectValue(""String_Node_Str"",e.getMessage());
      }
    }
    if (StringUtils.isEmpty(confirmPassword)) {
      require(errors,""String_Node_Str"");
    }
 else     if (!OpenmrsUtil.nullSafeEquals(password,confirmPassword)) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
    require(errors,""String_Node_Str"");
  }
  boolean hasProvider=false;
  if (StringUtils.isNotEmpty(providerIdentifier)) {
    hasProvider=true;
    Provider withId=Context.getProviderService().getProviderByIdentifier(providerIdentifier);
    if (withId != null) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
  if (!hasUser && !hasProvider) {
    errors.reject(""String_Node_Str"");
  }
}",0.9871928002769124
189678,"/** 
 * @see org.openmrs.api.handler.ExistingVisitAssignmentHandler#beforeCreateEncounter(org.openmrs.Encounter)
 */
@Override public void beforeCreateEncounter(Encounter encounter){
  if (encounter.getVisit() != null) {
    return;
  }
  if (useExistingVisit(encounter)) {
    return;
  }
  if (encounter.getForm() != null) {
    FormDescriptor fd=KenyaEmr.getInstance().getFormManager().getFormDescriptor(encounter.getForm());
    if (fd != null && fd.getAutoCreateVisitType() != null) {
      useNewVisit(encounter,fd.getAutoCreateVisitType());
    }
  }
}","/** 
 * @see org.openmrs.api.handler.ExistingVisitAssignmentHandler#beforeCreateEncounter(org.openmrs.Encounter)
 */
@Override public void beforeCreateEncounter(Encounter encounter){
  if (encounter.getVisit() != null) {
    return;
  }
  if (useExistingVisit(encounter)) {
    return;
  }
  if (encounter.getForm() != null) {
    FormDescriptor fd=KenyaEmr.getInstance().getFormManager().getFormDescriptor(encounter.getForm());
    if (fd != null && fd.getAutoCreateVisitTypeUuid() != null) {
      VisitType visitType=Metadata.getVisitType(fd.getAutoCreateVisitTypeUuid());
      useNewVisit(encounter,visitType);
    }
  }
}",0.8785834738617201
189679,"/** 
 * Simplifies a location
 * @param location the location
 * @param mfcAttrType the MFL code attribute type
 * @param ui the UI utils
 * @return the simple object
 */
public SimpleObject simpleLocation(Location location,LocationAttributeType mfcAttrType,UiUtils ui){
  List<LocationAttribute> attrs=location.getActiveAttributes(mfcAttrType);
  String facilityCode=attrs.size() > 0 ? (String)attrs.get(0).getValue() : null;
  String display=location.getName() + ""String_Node_Str"" + (facilityCode != null ? facilityCode : ""String_Node_Str"")+ ""String_Node_Str"";
  return SimpleObject.create(""String_Node_Str"",location.getLocationId(),""String_Node_Str"",display);
}","/** 
 * Simplifies a location
 * @param location the location
 * @param mfcAttrType the MFL code attribute type
 * @param ui the UI utils
 * @return the simple object
 */
public SimpleObject simpleLocation(Location location,LocationAttributeType mfcAttrType,UiUtils ui){
  List<LocationAttribute> attrs=location.getActiveAttributes(mfcAttrType);
  String facilityCode=attrs.size() > 0 ? (String)attrs.get(0).getValue() : null;
  return SimpleObject.create(""String_Node_Str"",location.getId(),""String_Node_Str"",location.getName(),""String_Node_Str"",(facilityCode != null ? facilityCode : ""String_Node_Str""));
}",0.7993705743509048
189680,"/** 
 * Searches for locations by name of MFL code
 * @param term the search term
 * @return the list of locations as simple objects
 */
public List<SimpleObject> locationSearch(@RequestParam(required=false,value=""String_Node_Str"") String term,UiUtils ui,@SpringBean KenyaEmrUiUtils kenyaUi){
  LocationService svc=Context.getLocationService();
  LocationAttributeType mflCodeAttrType=Metadata.getLocationAttributeType(Metadata.MASTER_FACILITY_CODE_LOCATION_ATTRIBUTE_TYPE);
  Set<Location> results=new TreeSet<Location>(new Comparator<Location>(){
    @Override public int compare(    Location location1,    Location location2){
      return location1.getName().compareTo(location2.getName());
    }
  }
);
  Location defaultLocation=Context.getService(KenyaEmrService.class).getDefaultLocation();
  if (defaultLocation != null) {
    results.add(defaultLocation);
    results.addAll(defaultLocation.getChildLocations(false));
  }
  if (StringUtils.isNumeric(term) && term.length() >= 5) {
    Location locationByMflCode=Context.getService(KenyaEmrService.class).getLocationByMflCode(term);
    if (locationByMflCode != null) {
      results.add(locationByMflCode);
    }
  }
  if (StringUtils.isNotBlank(term)) {
    results.addAll(svc.getLocations(term,true,0,20));
  }
  List<SimpleObject> ret=new ArrayList<SimpleObject>();
  for (  Location l : results) {
    ret.add(kenyaUi.simpleLocation(l,mflCodeAttrType,ui));
  }
  return ret;
}","/** 
 * Searches for locations by name of MFL code
 * @param term the search term
 * @return the list of locations as simple objects
 */
public List<SimpleObject> locationSearch(@RequestParam(required=false,value=""String_Node_Str"") String term,UiUtils ui,@SpringBean KenyaEmrUiUtils kenyaUi){
  LocationService svc=Context.getLocationService();
  LocationAttributeType mflCodeAttrType=Metadata.getLocationAttributeType(Metadata.MASTER_FACILITY_CODE_LOCATION_ATTRIBUTE_TYPE);
  Set<Location> results=new TreeSet<Location>(new Comparator<Location>(){
    @Override public int compare(    Location location1,    Location location2){
      return location1.getName().compareTo(location2.getName());
    }
  }
);
  if (StringUtils.isNumeric(term) && term.length() >= 5) {
    Location locationByMflCode=Context.getService(KenyaEmrService.class).getLocationByMflCode(term);
    if (locationByMflCode != null) {
      results.add(locationByMflCode);
    }
  }
  if (StringUtils.isNotBlank(term)) {
    results.addAll(svc.getLocations(term,true,0,20));
  }
  List<SimpleObject> ret=new ArrayList<SimpleObject>();
  for (  Location l : results) {
    ret.add(kenyaUi.simpleLocation(l,mflCodeAttrType,ui));
  }
  return ret;
}",0.9156626506024096
189681,"/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
@Override public void validate(Object target,Errors errors){
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  if (StringUtils.isBlank(patientClinicNumber.getIdentifier())) {
    patientClinicNumber=null;
  }
  if (StringUtils.isBlank(hivIdNumber.getIdentifier())) {
    hivIdNumber=null;
  }
  if (!(StringUtils.isBlank(telephoneContact.getValue()))) {
    validateTelephoneNumber(errors,""String_Node_Str"",telephoneContact.getValue());
  }
 else {
    telephoneContact=null;
  }
  if (!(StringUtils.isBlank(nextOfKinContact.getValue()))) {
    validateTelephoneNumber(errors,""String_Node_Str"",nextOfKinContact.getValue());
  }
 else {
    nextOfKinContact=null;
  }
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
}","/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
@Override public void validate(Object target,Errors errors){
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  if (StringUtils.isBlank(patientClinicNumber.getIdentifier())) {
    patientClinicNumber=null;
  }
  if (StringUtils.isBlank(hivIdNumber.getIdentifier())) {
    hivIdNumber=null;
  }
  if (!(StringUtils.isBlank(telephoneContact.getValue()))) {
    validateTelephoneNumber(errors,""String_Node_Str"",telephoneContact.getValue());
  }
 else {
    telephoneContact=null;
  }
  if (!(StringUtils.isBlank(nextOfKinContact.getValue()))) {
    validateTelephoneNumber(errors,""String_Node_Str"",nextOfKinContact.getValue());
  }
 else {
    nextOfKinContact=null;
  }
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  if (birthdate != null) {
    if (birthdate.after(new Date()))     errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
 else {
      Calendar c=Calendar.getInstance();
      c.setTime(new Date());
      c.add(Calendar.YEAR,-120);
      if (birthdate.before(c.getTime())) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
}",0.8492922564529559
189682,"@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program hivProgram=Metadata.getProgram(Metadata.HIV_PROGRAM);
  Set<Integer> alive=alivePatients(cohort,context);
  Set<Integer> inHivProgram=CalculationUtils.patientsThatPass(activeEnrollment(hivProgram,alive,context));
  CalculationResultMap lastCD4Obss=lastObs(getConcept(Dictionary.CD4_COUNT),inHivProgram,context);
  CalculationResultMap oldCD4Obss=lastObsAtLeastDaysAgo(getConcept(Dictionary.CD4_COUNT),KenyaEmrConstants.DECLINING_CD4_COUNT_ACROSS_DAYS,inHivProgram,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    Double lastCD4Count=0.0;
    Double oldCD4Count=0.0;
    boolean declining=false;
    if (inHivProgram.contains(ptId)) {
      lastCD4Count=CalculationUtils.numericObsResultForPatient(lastCD4Obss,ptId);
      oldCD4Count=CalculationUtils.numericObsResultForPatient(oldCD4Obss,ptId);
      if (lastCD4Count != null && oldCD4Count != null) {
        declining=lastCD4Count < oldCD4Count;
      }
    }
    ret.put(ptId,new BooleanResult(declining,this,context));
  }
  return ret;
}","@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> parameterValues,PatientCalculationContext context){
  Program hivProgram=Metadata.getProgram(Metadata.HIV_PROGRAM);
  Set<Integer> alive=alivePatients(cohort,context);
  Set<Integer> inHivProgram=CalculationUtils.patientsThatPass(activeEnrollment(hivProgram,alive,context));
  CalculationResultMap lastCD4Obss=lastObs(getConcept(Dictionary.CD4_COUNT),inHivProgram,context);
  CalculationResultMap oldCD4Obss=lastObsAtLeastDaysAgo(getConcept(Dictionary.CD4_COUNT),KenyaEmrConstants.DECLINING_CD4_COUNT_ACROSS_DAYS,inHivProgram,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    boolean declining=false;
    if (inHivProgram.contains(ptId)) {
      Double lastCD4Count=CalculationUtils.numericObsResultForPatient(lastCD4Obss,ptId);
      Double oldCD4Count=CalculationUtils.numericObsResultForPatient(oldCD4Obss,ptId);
      if (lastCD4Count != null && oldCD4Count != null) {
        declining=lastCD4Count < oldCD4Count;
      }
    }
    ret.put(ptId,new BooleanResult(declining,this,context));
  }
  return ret;
}",0.9699279966116052
189683,"/** 
 * @see org.openmrs.calculation.patient.PatientCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 * @should return null for patients who have never started ARVs
 * @should return whether patients are currently taking a second-line regimen
 */
@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> arg1,PatientCalculationContext context){
  CalculationResultMap currentArvs=calculate(new CurrentArtRegimenCalculation(),cohort,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    BooleanResult result=null;
    SimpleResult currentArvResult=(SimpleResult)currentArvs.get(ptId);
    if (currentArvResult != null) {
      RegimenOrder currentRegimen=(RegimenOrder)currentArvResult.getValue();
      boolean isSecondLine=CalculationUtils.regimenInGroup(currentRegimen,""String_Node_Str"",""String_Node_Str"");
      ;
      result=new BooleanResult(isSecondLine,this,context);
    }
    ret.put(ptId,result);
  }
  return ret;
}","/** 
 * @see org.openmrs.calculation.patient.PatientCalculation#evaluate(java.util.Collection,java.util.Map,org.openmrs.calculation.patient.PatientCalculationContext)
 * @should return null for patients who have never started ARVs
 * @should return whether patients are currently taking a second-line regimen
 */
@Override public CalculationResultMap evaluate(Collection<Integer> cohort,Map<String,Object> arg1,PatientCalculationContext context){
  CalculationResultMap currentArvs=calculate(new CurrentArtRegimenCalculation(),cohort,context);
  CalculationResultMap ret=new CalculationResultMap();
  for (  Integer ptId : cohort) {
    BooleanResult result=null;
    SimpleResult currentArvResult=(SimpleResult)currentArvs.get(ptId);
    if (currentArvResult != null) {
      RegimenOrder currentRegimen=(RegimenOrder)currentArvResult.getValue();
      boolean isSecondLine=CalculationUtils.regimenInGroup(currentRegimen,""String_Node_Str"",""String_Node_Str"");
      result=new BooleanResult(isSecondLine,this,context);
    }
    ret.put(ptId,result);
  }
  return ret;
}",0.9171322160148976
189684,"public WithoutCTXOrDapsoneReport(){
  super(new WithoutCtxOrDapsoneCalculation());
}","public WithoutCTXOrDapsoneReport(){
  super(new NeverTakenCtxOrDapsoneCalculation());
}",0.9005847953216374
189685,"@Before public void setup() throws Exception {
  executeDataSet(""String_Node_Str"");
  executeDataSet(""String_Node_Str"");
  emr.getRegimenManager().clear();
  InputStream stream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  emr.getRegimenManager().loadDefinitionsFromXML(stream);
  this.ui=new FragmentActionUiUtils(null,null,null);
  DrugOrder aspirin=new DrugOrder();
  aspirin.setConcept(Context.getConceptService().getConcept(71617));
  aspirin.setDose(100.0d);
  aspirin.setUnits(""String_Node_Str"");
  aspirin.setFrequency(""String_Node_Str"");
  DrugOrder stavudine=new DrugOrder();
  stavudine.setConcept(Context.getConceptService().getConcept(84309));
  stavudine.setDose(30.0d);
  stavudine.setUnits(""String_Node_Str"");
  stavudine.setFrequency(""String_Node_Str"");
  regimen=new RegimenOrder();
  regimen.addDrugOrder(aspirin);
  regimen.addDrugOrder(stavudine);
}","@Before public void setup() throws Exception {
  executeDataSet(""String_Node_Str"");
  executeDataSet(""String_Node_Str"");
  emr.getRegimenManager().clear();
  InputStream stream=getClass().getClassLoader().getResourceAsStream(""String_Node_Str"");
  emr.getRegimenManager().loadDefinitionsFromXML(stream);
  this.ui=new FragmentActionUiUtils(null,null,null);
  DrugOrder aspirin=new DrugOrder();
  aspirin.setConcept(Context.getConceptService().getConcept(71617));
  aspirin.setDose(100.0d);
  aspirin.setUnits(""String_Node_Str"");
  aspirin.setFrequency(""String_Node_Str"");
  DrugOrder stavudine=new DrugOrder();
  stavudine.setConcept(Context.getConceptService().getConcept(84309));
  stavudine.setDose(30.0d);
  stavudine.setUnits(""String_Node_Str"");
  stavudine.setFrequency(""String_Node_Str"");
  regimen=new RegimenOrder(new HashSet<DrugOrder>(Arrays.asList(aspirin,stavudine)));
}",0.9504504504504504
189686,"/** 
 * @see org.openmrs.module.kenyaemr.KenyaEmrUiUtils#simpleRegimen(org.openmrs.module.kenyaemr.regimen.RegimenOrder,org.openmrs.ui.framework.UiUtils)
 */
@Test public void simpleRegimen_shouldConvertToSimpleObject(){
  SimpleObject obj1=kenyaUi.simpleRegimen(null,ui);
  Assert.assertEquals(""String_Node_Str"",obj1.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",obj1.get(""String_Node_Str""));
  SimpleObject obj2=kenyaUi.simpleRegimen(new RegimenOrder(),ui);
  Assert.assertEquals(""String_Node_Str"",obj2.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",obj2.get(""String_Node_Str""));
  SimpleObject obj3=kenyaUi.simpleRegimen(regimen,ui);
  Assert.assertNotNull(obj3.get(""String_Node_Str""));
  Assert.assertNotNull(obj3.get(""String_Node_Str""));
}","/** 
 * @see org.openmrs.module.kenyaemr.KenyaEmrUiUtils#simpleRegimen(org.openmrs.module.kenyaemr.regimen.RegimenOrder,org.openmrs.ui.framework.UiUtils)
 */
@Test public void simpleRegimen_shouldConvertToSimpleObject(){
  SimpleObject obj1=kenyaUi.simpleRegimen(null,ui);
  Assert.assertEquals(""String_Node_Str"",obj1.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",obj1.get(""String_Node_Str""));
  SimpleObject obj3=kenyaUi.simpleRegimen(regimen,ui);
  Assert.assertNotNull(obj3.get(""String_Node_Str""));
  Assert.assertNotNull(obj3.get(""String_Node_Str""));
}",0.8480825958702065
189687,"/** 
 * @see RegimenManager#findDefinitions(String,RegimenOrder,boolean)
 */
@Test public void findDefinitions_shouldFindDefinitionsForRegimen(){
  DrugOrder lamivudine=new DrugOrder();
  lamivudine.setConcept(Context.getConceptService().getConcept(78643));
  lamivudine.setDose(150d);
  lamivudine.setUnits(""String_Node_Str"");
  lamivudine.setFrequency(""String_Node_Str"");
  DrugOrder stavudine=new DrugOrder();
  stavudine.setConcept(Context.getConceptService().getConcept(84309));
  stavudine.setDose(30d);
  stavudine.setUnits(""String_Node_Str"");
  stavudine.setFrequency(""String_Node_Str"");
  RegimenOrder regimen=new RegimenOrder();
  regimen.addDrugOrder(lamivudine);
  regimen.addDrugOrder(stavudine);
  List<RegimenDefinition> defsExact=regimenManager.findDefinitions(""String_Node_Str"",regimen,true);
  Assert.assertEquals(1,defsExact.size());
  Assert.assertEquals(""String_Node_Str"",defsExact.get(0).getName());
  List<RegimenDefinition> defsNonExact=regimenManager.findDefinitions(""String_Node_Str"",regimen,false);
  Assert.assertEquals(2,defsNonExact.size());
  Assert.assertEquals(""String_Node_Str"",defsNonExact.get(0).getName());
  Assert.assertEquals(""String_Node_Str"",defsNonExact.get(1).getName());
}","/** 
 * @see RegimenManager#findDefinitions(String,RegimenOrder,boolean)
 */
@Test public void findDefinitions_shouldFindDefinitionsForRegimen(){
  DrugOrder lamivudine=new DrugOrder();
  lamivudine.setConcept(Context.getConceptService().getConcept(78643));
  lamivudine.setDose(150d);
  lamivudine.setUnits(""String_Node_Str"");
  lamivudine.setFrequency(""String_Node_Str"");
  DrugOrder stavudine=new DrugOrder();
  stavudine.setConcept(Context.getConceptService().getConcept(84309));
  stavudine.setDose(30d);
  stavudine.setUnits(""String_Node_Str"");
  stavudine.setFrequency(""String_Node_Str"");
  RegimenOrder regimen=new RegimenOrder(new HashSet<DrugOrder>(Arrays.asList(lamivudine,stavudine)));
  List<RegimenDefinition> defsExact=regimenManager.findDefinitions(""String_Node_Str"",regimen,true);
  Assert.assertEquals(1,defsExact.size());
  Assert.assertEquals(""String_Node_Str"",defsExact.get(0).getName());
  List<RegimenDefinition> defsNonExact=regimenManager.findDefinitions(""String_Node_Str"",regimen,false);
  Assert.assertEquals(2,defsNonExact.size());
  Assert.assertEquals(""String_Node_Str"",defsNonExact.get(0).getName());
  Assert.assertEquals(""String_Node_Str"",defsNonExact.get(1).getName());
}",0.953757225433526
189688,"public void controller(@FragmentParam(""String_Node_Str"") Patient patient,@FragmentParam(""String_Node_Str"") Boolean complete,FragmentModel model,@SpringBean KenyaEmr emr) throws InvalidCalculationException {
  Map<String,CalculationResult> calculationResults=new HashMap<String,CalculationResult>();
  if (complete != null && complete.booleanValue()) {
    calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(InitialArtRegimenCalculation.class,null,patient.getPatientId()));
  }
  calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(LastWHOStageCalculation.class,null,patient.getPatientId()));
  calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(LastCD4CountCalculation.class,null,patient.getPatientId()));
  calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(LastCD4PercentageCalculation.class,null,patient.getPatientId()));
  model.addAttribute(""String_Node_Str"",calculationResults);
  Concept medSet=emr.getRegimenManager().getMasterSetConcept(""String_Node_Str"");
  RegimenChangeHistory history=RegimenChangeHistory.forPatient(patient,medSet);
  model.addAttribute(""String_Node_Str"",history);
}","public void controller(@FragmentParam(""String_Node_Str"") Patient patient,@FragmentParam(""String_Node_Str"") Boolean complete,FragmentModel model,@SpringBean KenyaEmr emr) throws InvalidCalculationException {
  Map<String,CalculationResult> calculationResults=new HashMap<String,CalculationResult>();
  if (complete != null && complete.booleanValue()) {
    calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(InitialArtRegimenCalculation.class,null,patient.getPatientId()));
    calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(InitialArtStartDateCalculation.class,null,patient.getPatientId()));
  }
  calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(LastWHOStageCalculation.class,null,patient.getPatientId()));
  calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(LastCD4CountCalculation.class,null,patient.getPatientId()));
  calculationResults.put(""String_Node_Str"",CalculationUtils.evaluateForPatient(LastCD4PercentageCalculation.class,null,patient.getPatientId()));
  model.addAttribute(""String_Node_Str"",calculationResults);
  Concept medSet=emr.getRegimenManager().getMasterSetConcept(""String_Node_Str"");
  RegimenChangeHistory history=RegimenChangeHistory.forPatient(patient,medSet);
  model.addAttribute(""String_Node_Str"",history);
}",0.9414998036906164
189689,"/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
@Override public void validate(Object target,Errors errors){
  if (StringUtils.isBlank(patientClinicNumber.getIdentifier())) {
    patientClinicNumber=null;
  }
  if (StringUtils.isBlank(hivIdNumber.getIdentifier())) {
    hivIdNumber=null;
  }
  if (!(StringUtils.isBlank(telephoneContact.getValue()))) {
    if (!telephoneContact.getValue().trim().matches(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    telephoneContact=null;
  }
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
}","/** 
 * @see org.springframework.validation.Validator#validate(java.lang.Object,org.springframework.validation.Errors)
 */
@Override public void validate(Object target,Errors errors){
  if (StringUtils.isBlank(patientClinicNumber.getIdentifier())) {
    patientClinicNumber=null;
  }
  if (StringUtils.isBlank(hivIdNumber.getIdentifier())) {
    hivIdNumber=null;
  }
  if (!(StringUtils.isBlank(telephoneContact.getValue()))) {
    if (!telephoneContact.getValue().trim().matches(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    telephoneContact=null;
  }
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  require(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
  validateField(errors,""String_Node_Str"");
}",0.9333333333333332
189690,"public void controller(@RequestParam(""String_Node_Str"") Patient patient,@RequestParam(value=""String_Node_Str"",required=false) Visit visit,PageModel model,Session session){
  PatientService ps=Context.getPatientService();
  AppUiUtil.startApp(""String_Node_Str"",session);
  model.addAttribute(""String_Node_Str"",new MetadataConstants());
  model.addAttribute(""String_Node_Str"",patient);
  model.addAttribute(""String_Node_Str"",patient);
  VisitService vs=Context.getVisitService();
  List<Visit> activeVisits=vs.getActiveVisitsByPatient(patient);
  model.addAttribute(""String_Node_Str"",activeVisits);
  if (visit == null && activeVisits.size() > 0) {
    visit=activeVisits.get(0);
  }
  model.addAttribute(""String_Node_Str"",visit);
  if (activeVisits.size() == 0) {
    Visit newVisit=new Visit();
    newVisit.setPatient(patient);
    newVisit.setStartDatetime(new Date());
    newVisit.setVisitType(vs.getVisitTypeByUuid(MetadataConstants.OUTPATIENT_VISIT_TYPE_UUID));
    model.addAttribute(""String_Node_Str"",newVisit);
  }
  ProgramWorkflowService pws=Context.getProgramWorkflowService();
  Program hivProgram=pws.getProgramByUuid(MetadataConstants.HIV_PROGRAM_UUID);
  model.addAttribute(""String_Node_Str"",hivProgram);
  Program tbProgram=pws.getProgramByUuid(MetadataConstants.TB_PROGRAM_UUID);
  model.addAttribute(""String_Node_Str"",tbProgram);
}","public void controller(@RequestParam(""String_Node_Str"") Patient patient,@RequestParam(value=""String_Node_Str"",required=false) Visit visit,PageModel model,Session session){
  PatientService ps=Context.getPatientService();
  AppUiUtil.startApp(""String_Node_Str"",session);
  model.addAttribute(""String_Node_Str"",new MetadataConstants());
  model.addAttribute(""String_Node_Str"",patient);
  model.addAttribute(""String_Node_Str"",patient);
  VisitService vs=Context.getVisitService();
  List<Visit> activeVisits=vs.getActiveVisitsByPatient(patient);
  model.addAttribute(""String_Node_Str"",activeVisits);
  if (visit == null && activeVisits.size() > 0) {
    visit=activeVisits.get(0);
  }
  model.addAttribute(""String_Node_Str"",visit);
  Calendar now=Calendar.getInstance();
  now.set(Calendar.SECOND,0);
  now.set(Calendar.MILLISECOND,0);
  if (activeVisits.size() == 0) {
    Visit newVisit=new Visit();
    newVisit.setPatient(patient);
    newVisit.setStartDatetime(now.getTime());
    newVisit.setVisitType(vs.getVisitTypeByUuid(MetadataConstants.OUTPATIENT_VISIT_TYPE_UUID));
    model.addAttribute(""String_Node_Str"",newVisit);
  }
  ProgramWorkflowService pws=Context.getProgramWorkflowService();
  Program hivProgram=pws.getProgramByUuid(MetadataConstants.HIV_PROGRAM_UUID);
  model.addAttribute(""String_Node_Str"",hivProgram);
  Program tbProgram=pws.getProgramByUuid(MetadataConstants.TB_PROGRAM_UUID);
  model.addAttribute(""String_Node_Str"",tbProgram);
}",0.9576059850374063
189691,"public Object editLoginDetails(@RequestParam(""String_Node_Str"") Person person,@MethodParam(""String_Node_Str"") @BindParams(""String_Node_Str"") EditLoginDetailsForm form,UiUtils ui){
  ui.validate(form,form,""String_Node_Str"");
  Context.getUserService().saveUser(form.getUserToSave(person),form.getPassword().equals(form.PLACEHOLDER) ? null : form.getPassword());
  return new SuccessResult(""String_Node_Str"");
}","public Object editLoginDetails(@RequestParam(""String_Node_Str"") Person person,@MethodParam(""String_Node_Str"") @BindParams(""String_Node_Str"") EditLoginDetailsForm form,UiUtils ui){
  ui.validate(form,form,""String_Node_Str"");
  User user=form.getUserToSave(person);
  String newPassword=form.getPassword().equals(form.PLACEHOLDER) ? null : form.getPassword();
  if (user.getUserId() == null) {
    Context.getUserService().saveUser(user,newPassword);
  }
 else {
    Context.getUserService().saveUser(user,null);
    if (newPassword != null) {
      Context.getUserService().changePassword(user,newPassword);
    }
  }
  return new SuccessResult(""String_Node_Str"");
}",0.664804469273743
189692,"public List<SimpleObject> withActiveVisits(@RequestParam(value=""String_Node_Str"",required=false) String query,@RequestParam(value=""String_Node_Str"",required=false) Integer age,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") int ageWindow,UiUtils ui){
  List<SimpleObject> matching=search(query,null,age,ageWindow,ui);
  List<Visit> activeVisits=Context.getVisitService().getVisits(null,null,null,null,null,null,null,null,null,false,false);
  if (matching == null || matching.size() == 0) {
    List<Patient> ret=new ArrayList<Patient>();
    for (    Visit v : activeVisits) {
      if (!ret.contains(v.getPatient()))       ret.add(v.getPatient());
    }
    matching=simplePatientList(ui,ret);
  }
  Map<String,Visit> ptIds=new HashMap<String,Visit>();
  for (  Visit v : activeVisits) {
    ptIds.put(v.getPatient().getPatientId().toString(),v);
  }
  for (Iterator<SimpleObject> i=matching.iterator(); i.hasNext(); ) {
    SimpleObject candidate=i.next();
    Visit v=ptIds.get(candidate.get(""String_Node_Str""));
    if (v == null) {
      i.remove();
    }
 else {
      String imgUrl=ui.resourceLink(""String_Node_Str"",""String_Node_Str"");
      candidate.put(""String_Node_Str"",""String_Node_Str"" + imgUrl + ""String_Node_Str""+ ui.format(v.getVisitType())+ ""String_Node_Str""+ ui.format(v.getStartDatetime())+ ""String_Node_Str"");
    }
  }
  return matching;
}","public List<SimpleObject> withActiveVisits(@RequestParam(value=""String_Node_Str"",required=false) String query,@RequestParam(value=""String_Node_Str"",required=false) Integer age,@RequestParam(value=""String_Node_Str"",defaultValue=""String_Node_Str"") int ageWindow,UiUtils ui){
  List<SimpleObject> matching=search(query,null,age,ageWindow,ui);
  List<Visit> activeVisits=Context.getVisitService().getVisits(null,null,null,null,null,null,null,null,null,false,false);
  if (matching == null || matching.size() == 0) {
    List<Patient> ret=new ArrayList<Patient>();
    for (    Visit v : activeVisits) {
      if (!ret.contains(v.getPatient()))       ret.add(v.getPatient());
    }
    matching=simplePatientList(ui,ret);
  }
  Map<String,Visit> ptIds=new HashMap<String,Visit>();
  for (  Visit v : activeVisits) {
    ptIds.put(v.getPatient().getPatientId().toString(),v);
  }
  for (Iterator<SimpleObject> i=matching.iterator(); i.hasNext(); ) {
    SimpleObject candidate=i.next();
    Visit v=ptIds.get(candidate.get(""String_Node_Str""));
    if (v == null) {
      i.remove();
    }
 else {
      candidate.put(""String_Node_Str"",""String_Node_Str"" + ui.format(v.getVisitType()) + ""String_Node_Str""+ ui.format(v.getStartDatetime())+ ""String_Node_Str"");
    }
  }
  return matching;
}",0.9508073601201652
189693,"@Override public Map<String,String> extractPathParameters(final String uriPath){
  final Map<String,String> pathParamNameAndValues=new HashMap<String,String>();
  final Matcher m=getPathInformation().getPathMatcher(uriPath);
  if (m.matches()) {
    for (int i=1; i <= m.groupCount(); i++) {
      final String paramName=getPathInformation().getFnParamNameForGroup(i);
      final String paramValue=m.group(i);
      pathParamNameAndValues.put(paramName,paramValue);
    }
  }
  return pathParamNameAndValues;
}","@Override public Map<String,String> extractPathParameters(final String uriPath){
  final Map<String,String> pathParamNameAndValues=new HashMap<String,String>();
  if (uriPath == null) {
    return pathParamNameAndValues;
  }
  final Matcher m=getPathInformation().getPathMatcher(uriPath);
  if (m.matches()) {
    for (int i=1; i <= m.groupCount(); i++) {
      final String paramName=getPathInformation().getFnParamNameForGroup(i);
      final String paramValue=m.group(i);
      pathParamNameAndValues.put(paramName,paramValue);
    }
  }
  return pathParamNameAndValues;
}",0.9410681399631676
189694,"@Override public boolean matchesPath(final String path){
  final Matcher m=getPathInformation().getPathMatcher(path);
  return m.matches();
}","@Override public boolean matchesPath(final String path){
  if (path == null) {
    return false;
  }
  final Matcher m=getPathInformation().getPathMatcher(path);
  return m.matches();
}",0.8650306748466258
189695,"protected void processHttpResponse(final Element httpResponse,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response) throws RestXqServiceException {
  final String strStatus=httpResponse.getAttribute(STATUS_ATTR_NAME);
  HttpStatus httpStatus=null;
  if (strStatus != null && !strStatus.isEmpty()) {
    final int status=Integer.parseInt(strStatus);
    try {
      httpStatus=HttpStatus.fromStatus(status);
    }
 catch (    final IllegalArgumentException iae) {
      throw new RestXqServiceException(""String_Node_Str"" + strStatus,iae);
    }
  }
  final String reason=httpResponse.getAttribute(REASON_ATTR_NAME);
  if (httpStatus != null) {
    if (reason != null && !reason.isEmpty()) {
      response.setStatus(httpStatus,reason);
    }
 else {
      response.setStatus(httpStatus);
    }
  }
  final NodeList nlHttpHeader=httpResponse.getElementsByTagNameNS(HTTP_HEADER_ELEMENT_NAME.getNamespaceURI(),HTTP_HEADER_ELEMENT_NAME.getLocalPart());
  processHttpHeaders(nlHttpHeader,serializationProperties,response);
}","protected void processHttpResponse(final Element httpResponse,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response) throws RestXqServiceException {
  final String strStatus=httpResponse.getAttribute(STATUS_ATTR_NAME);
  HttpStatus httpStatus=null;
  if (strStatus != null && !strStatus.isEmpty()) {
    final int status=Integer.parseInt(strStatus);
    try {
      httpStatus=HttpStatus.fromStatus(status);
    }
 catch (    final IllegalArgumentException iae) {
      throw new RestXqServiceException(""String_Node_Str"" + strStatus,iae);
    }
  }
  final String message=httpResponse.getAttribute(MESSAGE_ATTR_NAME);
  final String reason=(message == null || message.isEmpty()) ? httpResponse.getAttribute(REASON_ATTR_NAME) : message;
  if (httpStatus != null) {
    if (reason != null && !reason.isEmpty()) {
      response.setStatus(httpStatus,reason);
    }
 else {
      response.setStatus(httpStatus);
    }
  }
  final NodeList nlHttpHeader=httpResponse.getElementsByTagNameNS(HTTP_HEADER_ELEMENT_NAME.getNamespaceURI(),HTTP_HEADER_ELEMENT_NAME.getLocalPart());
  processHttpHeaders(nlHttpHeader,serializationProperties,response);
}",0.9409131602506714
189696,"/** 
 * Extract the HTTP Request Body Implementations are free to return a proxy which lazily extracts the request body if desired.
 * @param request The HTTP Request to extract the request body from
 * @return The Sequence of values extracted from the request body,typically a single item but possibly more for a multi-part request
 * @throws RestXqServiceException If an error occurred whilst processing the Request Body
 */
protected abstract Sequence extractRequestBody(final HttpRequest request) throws RestXqServiceException ;","/** 
 * Extract the HTTP Request Body Implementations are free to return a proxy which lazily extracts the request body if desired.
 * @param request The HTTP Request to extract the request body from
 * @return The Sequence of values extracted from the request body,typically a single item but possibly more for a multi-part request. If there is no request body, then Sequence.EMPTY_SEQUENCE should be returned.
 * @throws RestXqServiceException If an error occurred whilst processing the Request Body
 */
protected abstract Sequence extractRequestBody(final HttpRequest request) throws RestXqServiceException ;",0.9308836395450568
189697,"/** 
 * Extract Annotated Parameters from the Request
 * @param request The HTTP Request to process
 * @return The Map of Parameters to values, the key is the parametername and the value is the sequence of values extracted from the request
 * @throws RestXqServiceException If an error occurred whilst processing the request
 */
protected Set<TypedArgumentValue> extractParameters(final HttpRequest request) throws RestXqServiceException {
  final Set<TypedArgumentValue> paramNameValues=new HashSet<TypedArgumentValue>();
  if (getResourceFunction().getPathAnnotation() != null) {
    for (    final Entry<String,String> pathParameter : getResourceFunction().getPathAnnotation().extractPathParameters(request.getPath()).entrySet()) {
      paramNameValues.add(new TypedArgumentValue<String>(){
        @Override public String getArgumentName(){
          return pathParameter.getKey();
        }
        @Override public Sequence<String> getTypedValue(){
          return new SequenceImpl<String>(new StringTypedValue(pathParameter.getValue()));
        }
      }
);
    }
  }
  if (!getBodyContentAnnotations().isEmpty()) {
    final Sequence requestBody=extractRequestBody(request);
    for (    final HttpMethodWithBodyAnnotation bodyContentAnnotation : getBodyContentAnnotations()) {
      paramNameValues.add(new TypedArgumentValue(){
        @Override public String getArgumentName(){
          return bodyContentAnnotation.getBodyParameterName();
        }
        @Override public Sequence getTypedValue(){
          return requestBody;
        }
      }
);
    }
  }
  for (  final ParameterAnnotation parameterAnnotation : getResourceFunction().getParameterAnnotations()) {
    final TypedArgumentValue typedArgumentValue=parameterAnnotation.extractParameter(request);
    paramNameValues.add(new TypedArgumentValue(){
      @Override public String getArgumentName(){
        return typedArgumentValue.getArgumentName();
      }
      @Override public Sequence getTypedValue(){
        return typedArgumentValue.getTypedValue();
      }
    }
);
  }
  return paramNameValues;
}","/** 
 * Extract Annotated Parameters from the Request
 * @param request The HTTP Request to process
 * @return The Map of Parameters to values, the key is the parametername and the value is the sequence of values extracted from the request
 * @throws RestXqServiceException If an error occurred whilst processing the request
 */
protected Set<TypedArgumentValue> extractParameters(final HttpRequest request) throws RestXqServiceException {
  final Set<TypedArgumentValue> paramNameValues=new HashSet<TypedArgumentValue>();
  if (getResourceFunction().getPathAnnotation() != null) {
    for (    final Entry<String,String> pathParameter : getResourceFunction().getPathAnnotation().extractPathParameters(request.getPath()).entrySet()) {
      paramNameValues.add(new TypedArgumentValue<String>(){
        @Override public String getArgumentName(){
          return pathParameter.getKey();
        }
        @Override public Sequence<String> getTypedValue(){
          return new SequenceImpl<String>(new StringTypedValue(pathParameter.getValue()));
        }
      }
);
    }
  }
  if (!getBodyContentAnnotations().isEmpty()) {
    final Sequence requestBody=extractRequestBody(request);
    for (    final HttpMethodWithBodyAnnotation bodyContentAnnotation : getBodyContentAnnotations()) {
      paramNameValues.add(new TypedArgumentValue(){
        @Override public String getArgumentName(){
          return bodyContentAnnotation.getBodyParameterName();
        }
        @Override public Sequence getTypedValue(){
          if (requestBody != null) {
            return requestBody;
          }
 else {
            return Sequence.EMPTY_SEQUENCE;
          }
        }
      }
);
    }
  }
  for (  final ParameterAnnotation parameterAnnotation : getResourceFunction().getParameterAnnotations()) {
    final TypedArgumentValue typedArgumentValue=parameterAnnotation.extractParameter(request);
    paramNameValues.add(new TypedArgumentValue(){
      @Override public String getArgumentName(){
        return typedArgumentValue.getArgumentName();
      }
      @Override public Sequence getTypedValue(){
        return typedArgumentValue.getTypedValue();
      }
    }
);
  }
  return paramNameValues;
}",0.969937077604288
189698,"protected void processHttpResponse(final Element httpResponse,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response) throws RestXqServiceException {
  final String strStatus=httpResponse.getAttribute(STATUS_ATTR_NAME);
  HttpStatus httpStatus=null;
  if (strStatus != null && !strStatus.isEmpty()) {
    final int status=Integer.parseInt(strStatus);
    try {
      httpStatus=HttpStatus.fromStatus(status);
    }
 catch (    final IllegalArgumentException iae) {
      throw new RestXqServiceException(""String_Node_Str"" + strStatus,iae);
    }
  }
  final String reason=httpResponse.getAttribute(REASON_ATTR_NAME);
  if (httpStatus != null && (reason != null && !reason.isEmpty())) {
    response.setStatus(httpStatus,reason);
  }
 else {
    response.setStatus(httpStatus);
  }
  final NodeList nlHttpHeader=httpResponse.getElementsByTagNameNS(HTTP_HEADER_ELEMENT_NAME.getNamespaceURI(),HTTP_HEADER_ELEMENT_NAME.getLocalPart());
  processHttpHeaders(nlHttpHeader,serializationProperties,response);
}","protected void processHttpResponse(final Element httpResponse,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response) throws RestXqServiceException {
  final String strStatus=httpResponse.getAttribute(STATUS_ATTR_NAME);
  HttpStatus httpStatus=null;
  if (strStatus != null && !strStatus.isEmpty()) {
    final int status=Integer.parseInt(strStatus);
    try {
      httpStatus=HttpStatus.fromStatus(status);
    }
 catch (    final IllegalArgumentException iae) {
      throw new RestXqServiceException(""String_Node_Str"" + strStatus,iae);
    }
  }
  final String reason=httpResponse.getAttribute(REASON_ATTR_NAME);
  if (httpStatus != null) {
    if (reason != null && !reason.isEmpty()) {
      response.setStatus(httpStatus,reason);
    }
 else {
      response.setStatus(httpStatus);
    }
  }
  final NodeList nlHttpHeader=httpResponse.getElementsByTagNameNS(HTTP_HEADER_ELEMENT_NAME.getNamespaceURI(),HTTP_HEADER_ELEMENT_NAME.getLocalPart());
  processHttpHeaders(nlHttpHeader,serializationProperties,response);
}",0.9723282442748092
189699,"@Override public boolean matchesMediaType(final HttpRequest request){
  final String acceptHeader=request.getHeader(HttpHeaderName.Accept.toString());
  if (acceptHeader.indexOf(ANY_MEDIA_TYPE) > -1) {
    return true;
  }
  Matcher mtcProducesContentType=null;
  final String accepts[]=acceptHeader.split(""String_Node_Str"");
  for (  String accept : accepts) {
    accept=accept.toLowerCase();
    accept=accept.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final int idxExt=accept.indexOf(""String_Node_Str"");
    if (idxExt > -1) {
      accept=accept.substring(0,idxExt);
    }
    accept=accept.replaceFirst(InternetMediaType.subtypeSeparator + ""String_Node_Str"",InternetMediaType.subtypeSeparator + ""String_Node_Str"");
    if (mtcProducesContentType == null) {
      mtcProducesContentType=getMediaTypesPatternMatcher().matcher(accept);
    }
 else {
      mtcProducesContentType=mtcProducesContentType.reset(accept);
    }
    if (mtcProducesContentType.matches()) {
      return true;
    }
  }
  return false;
}","@Override public boolean matchesMediaType(final HttpRequest request){
  final String acceptHeader=request.getHeader(HttpHeaderName.Accept.toString());
  if (acceptHeader.equals(org.exquery.InternetMediaType.ANY.getMediaType())) {
    return true;
  }
  Matcher mtcProducesContentType=null;
  final String accepts[]=acceptHeader.split(""String_Node_Str"");
  for (  String accept : accepts) {
    accept=accept.toLowerCase();
    accept=accept.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final int idxExt=accept.indexOf(""String_Node_Str"");
    if (idxExt > -1) {
      accept=accept.substring(0,idxExt);
    }
    accept=accept.replaceFirst(InternetMediaType.subtypeSeparator + ""String_Node_Str"",InternetMediaType.subtypeSeparator + ""String_Node_Str"");
    if (mtcProducesContentType == null) {
      mtcProducesContentType=getMediaTypesPatternMatcher().matcher(accept);
    }
 else {
      mtcProducesContentType=mtcProducesContentType.reset(accept);
    }
    if (mtcProducesContentType.matches()) {
      return true;
    }
  }
  return false;
}",0.614423076923077
189700,"protected void processHttpHeaders(final NodeList nlHttpHeader,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response){
  for (int i=0; i < nlHttpHeader.getLength(); i++) {
    final Element elemHeader=(Element)nlHttpHeader.item(i);
    final String name=elemHeader.getAttribute(NAME_ATTR_NAME);
    final String value=elemHeader.getAttribute(VALUE_ATTR_NAME);
    response.setHeader(name,value);
  }
}","protected void processHttpHeaders(final NodeList nlHttpHeader,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response){
  for (int i=0; i < nlHttpHeader.getLength(); i++) {
    final Element elemHeader=(Element)nlHttpHeader.item(i);
    final String name=elemHeader.getAttribute(NAME_ATTR_NAME);
    final String value=elemHeader.getAttribute(VALUE_ATTR_NAME);
    if (name.equals(HttpHeader.CONTENT_TYPE.getHeaderName())) {
      serializationProperties.put(SerializationProperty.CONTENT_TYPE,value);
    }
    response.setHeader(name,value);
  }
}",0.8113391984359726
189701,"protected void processHttpHeaders(final NodeList nlHttpHeader,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response){
  for (int i=0; i < nlHttpHeader.getLength(); i++) {
    final Element elemHeader=(Element)nlHttpHeader.item(i);
    final String name=elemHeader.getAttribute(NAME_ATTR_NAME);
    final String value=elemHeader.getAttribute(VALUE_ATTR_NAME);
    if (name.equals(HttpHeader.CONTENT_TYPE.getHeaderName())) {
      serializationProperties.put(SerializationProperty.CONTENT_TYPE,value);
    }
    response.setHeader(name,value);
  }
}","protected void processHttpHeaders(final NodeList nlHttpHeader,final Map<SerializationProperty,String> serializationProperties,final HttpResponse response){
  for (int i=0; i < nlHttpHeader.getLength(); i++) {
    final Element elemHeader=(Element)nlHttpHeader.item(i);
    final String name=elemHeader.getAttribute(NAME_ATTR_NAME);
    final String value=elemHeader.getAttribute(VALUE_ATTR_NAME);
    if (name.equals(HttpHeader.CONTENT_TYPE.getHeaderName())) {
      serializationProperties.put(SerializationProperty.MEDIA_TYPE,value);
    }
    response.setHeader(name,value);
  }
}",0.9897260273972602
189702,"private ParameterAnnotationMapping parseAnnotationLiterals(final Literal parameterName,final Literal functionArgumentName,final Literal[] defaultValueLiterals) throws RestAnnotationException {
  final Cardinality requiredCardinality;
  if (defaultValueLiterals.length == 0) {
    requiredCardinality=Cardinality.ZERO_OR_MORE;
  }
 else {
    requiredCardinality=Cardinality.ONE_OR_MORE;
  }
  final ParameterAnnotationMapping mapping=super.parseAnnotationLiterals(parameterName,functionArgumentName,requiredCardinality);
  if (defaultValueLiterals.length > 0) {
    final Type requiredType;
    if (haveConsistentType(defaultValueLiterals)) {
      requiredType=defaultValueLiterals[0].getType();
    }
 else {
      requiredType=Type.ANY_SIMPLE_TYPE;
    }
    checkFnDeclaresParameterWithType(getFunctionSignature(),mapping.getParameterName(),requiredType,getInvalidDefaultValueTypeErr());
  }
  return new ParameterAnnotationMapping(mapping.getParameterName(),mapping.getFunctionArgumentName(),defaultValueLiterals);
}","private ParameterAnnotationMapping parseAnnotationLiterals(final Literal parameterName,final Literal functionArgumentName,final Literal[] defaultValueLiterals) throws RestAnnotationException {
  final Cardinality requiredCardinality;
  if (defaultValueLiterals.length == 0) {
    requiredCardinality=Cardinality.ZERO_OR_MORE;
  }
 else {
    requiredCardinality=Cardinality.ONE_OR_MORE;
  }
  final ParameterAnnotationMapping mapping=super.parseAnnotationLiterals(parameterName,functionArgumentName,requiredCardinality);
  if (defaultValueLiterals.length > 0) {
    final Type requiredType;
    if (haveConsistentType(defaultValueLiterals)) {
      requiredType=defaultValueLiterals[0].getType();
    }
 else {
      requiredType=Type.ANY_SIMPLE_TYPE;
    }
    checkFnDeclaresParameterWithType(getFunctionSignature(),mapping.getFunctionArgumentName(),requiredType,getInvalidDefaultValueTypeErr());
  }
  return new ParameterAnnotationMapping(mapping.getParameterName(),mapping.getFunctionArgumentName(),defaultValueLiterals);
}",0.8404099560761347
189703,"/** 
 * Gets the names of HTTP Header in the HTTP Request
 * @return The set of HTTP Header names
 */
public Set<String> getHeaderNames();","/** 
 * Gets the names of HTTP Header in the HTTP Request
 * @return The list of HTTP Header names
 */
public List<String> getHeaderNames();",0.9712230215827338
189704,"/** 
 * Get the names of parameters available in the request
 * @return the set of parameter names in the request
 */
public Set<String> getParameterNames();","/** 
 * Get the names of parameters available in the request
 * @return the list of parameter names in the request
 */
public List<String> getParameterNames();",0.9746835443037974
189705,"@Test public void singleWildcardMediaRange(){
  final String any=ANY.getMediaType();
  final AcceptHeader acceptHeader=new AcceptHeader(any);
  assertEquals(1,acceptHeader.getAccepts().size());
  assertEquals(ANY,acceptHeader.getAccepts().get(0).getMediaRange());
}","@Test public void singleWildcardMediaRange(){
  final String any=ANY.getMediaType();
  final AcceptHeader acceptHeader=new AcceptHeader(any);
  assertEquals(1,acceptHeader.getAccepts().size());
  assertEquals(any,acceptHeader.getAccepts().get(0).getMediaRange());
}",0.9886792452830188
189706,"/** 
 * Serialize to the body of the HTTP Response
 * @param result
 * @param response
 * @param serializationProperties
 * @throws RestXqServiceException  
 */
protected void serializeBody(final Sequence result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException {
  SupportedMethod method=null;
  final String mediaType=serializationProperties.get(SerializationProperty.MEDIA_TYPE);
  if (mediaType != null && !mediaType.isEmpty()) {
    response.setContentType(mediaType);
  }
  if (method != null && method.equals(SupportedMethod.binary)) {
    serializeBinaryBody(result,response);
  }
 else {
    serializeNodeBody(result,response,serializationProperties);
  }
}","/** 
 * Serialize to the body of the HTTP Response
 * @param result
 * @param response
 * @param serializationProperties
 * @throws RestXqServiceException  
 */
protected void serializeBody(final Sequence result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException {
  SupportedMethod method=null;
  try {
    final String methodProp=serializationProperties.get(SerializationProperty.METHOD);
    method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
  }
 catch (  final IllegalArgumentException iae) {
    System.out.println(iae.getMessage());
  }
  final String mediaType=serializationProperties.get(SerializationProperty.MEDIA_TYPE);
  if (mediaType != null && !mediaType.isEmpty()) {
    response.setContentType(mediaType);
  }
  if (method != null && method.equals(SupportedMethod.binary)) {
    serializeBinaryBody(result,response);
  }
 else {
    serializeNodeBody(result,response,serializationProperties);
  }
}",0.8378684807256236
189707,"/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().isSubTypeOf(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}","/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().hasSubType(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}",0.998758997269794
189708,"@Override public String getValue(){
  return JSON_MEDIATYPE;
}","@Override public String getValue(){
  return OOXML_MEDIATYPE;
}",0.944
189709,"@Override public Sequence getTypedValue(){
  return new SequenceImpl(typedArgumentValue.getTypedValue());
}","@Override public Sequence getTypedValue(){
  return typedArgumentValue.getTypedValue();
}",0.9081632653061223
189710,"/** 
 * Extract Annotated Parameters from the Request
 * @param request The HTTP Request to process
 * @return The Map of Parameters to values, the key is the parametername and the value is the sequence of values extracted from the request
 * @throws RestXqServiceException If an error occured whilst processing the request
 */
protected Set<TypedArgumentValue> extractParameters(final HttpRequest request) throws RestXqServiceException {
  final Set<TypedArgumentValue> paramNameValues=new HashSet<TypedArgumentValue>();
  for (  final Entry<String,String> pathParameter : getResourceFunction().getPathAnnotation().extractPathParameters(request.getPath()).entrySet()) {
    paramNameValues.add(new TypedArgumentValue<String>(){
      @Override public String getArgumentName(){
        return pathParameter.getKey();
      }
      @Override public Sequence<String> getTypedValue(){
        return new SequenceImpl<String>(new StringTypedValue(pathParameter.getValue()));
      }
    }
);
  }
  if (!getBodyContentAnnotations().isEmpty()) {
    final Sequence requestBody=extractRequestBody(request);
    for (    final HttpMethodWithBodyAnnotation bodyContentAnnotation : getBodyContentAnnotations()) {
      paramNameValues.add(new TypedArgumentValue(){
        @Override public String getArgumentName(){
          return bodyContentAnnotation.getBodyParameterName();
        }
        @Override public Sequence getTypedValue(){
          return requestBody;
        }
      }
);
    }
  }
  for (  final ParameterAnnotation parameterAnnotation : getResourceFunction().getParameterAnnotations()) {
    final TypedArgumentValue typedArgumentValue=parameterAnnotation.extractParameter(request);
    paramNameValues.add(new TypedArgumentValue(){
      @Override public String getArgumentName(){
        return typedArgumentValue.getArgumentName();
      }
      @Override public Sequence getTypedValue(){
        return new SequenceImpl(typedArgumentValue.getTypedValue());
      }
    }
);
  }
  return paramNameValues;
}","/** 
 * Extract Annotated Parameters from the Request
 * @param request The HTTP Request to process
 * @return The Map of Parameters to values, the key is the parametername and the value is the sequence of values extracted from the request
 * @throws RestXqServiceException If an error occured whilst processing the request
 */
protected Set<TypedArgumentValue> extractParameters(final HttpRequest request) throws RestXqServiceException {
  final Set<TypedArgumentValue> paramNameValues=new HashSet<TypedArgumentValue>();
  for (  final Entry<String,String> pathParameter : getResourceFunction().getPathAnnotation().extractPathParameters(request.getPath()).entrySet()) {
    paramNameValues.add(new TypedArgumentValue<String>(){
      @Override public String getArgumentName(){
        return pathParameter.getKey();
      }
      @Override public Sequence<String> getTypedValue(){
        return new SequenceImpl<String>(new StringTypedValue(pathParameter.getValue()));
      }
    }
);
  }
  if (!getBodyContentAnnotations().isEmpty()) {
    final Sequence requestBody=extractRequestBody(request);
    for (    final HttpMethodWithBodyAnnotation bodyContentAnnotation : getBodyContentAnnotations()) {
      paramNameValues.add(new TypedArgumentValue(){
        @Override public String getArgumentName(){
          return bodyContentAnnotation.getBodyParameterName();
        }
        @Override public Sequence getTypedValue(){
          return requestBody;
        }
      }
);
    }
  }
  for (  final ParameterAnnotation parameterAnnotation : getResourceFunction().getParameterAnnotations()) {
    final TypedArgumentValue typedArgumentValue=parameterAnnotation.extractParameter(request);
    paramNameValues.add(new TypedArgumentValue(){
      @Override public String getArgumentName(){
        return typedArgumentValue.getArgumentName();
      }
      @Override public Sequence getTypedValue(){
        return typedArgumentValue.getTypedValue();
      }
    }
);
  }
  return paramNameValues;
}",0.9955246146195924
189711,"@Override public Sequence getTypedValue(){
  final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
  if (formParam == null) {
    final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
    return literalsToSequence(defaultLiterals);
  }
  if (formParam instanceof String) {
    return new SequenceImpl(new StringTypedValue((String)formParam));
  }
  if (formParam instanceof InputStream) {
    return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
  }
  return null;
}","@Override public Sequence getTypedValue(){
  final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
  if (formParam == null) {
    final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
    return literalsToSequence(defaultLiterals);
  }
  if (formParam instanceof String) {
    return new SequenceImpl(new StringTypedValue((String)formParam));
  }
 else   if (formParam instanceof List) {
    final List<String> formFieldValues=(List<String>)formParam;
    return collectionToSequence(formFieldValues);
  }
 else   if (formParam instanceof InputStream) {
    return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
  }
  return null;
}",0.8747152619589977
189712,"/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue extractParameter(final HttpRequest request){
  return new TypedArgumentValue(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence getTypedValue(){
      final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
      if (formParam == null) {
        final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
        return literalsToSequence(defaultLiterals);
      }
      if (formParam instanceof String) {
        return new SequenceImpl(new StringTypedValue((String)formParam));
      }
      if (formParam instanceof InputStream) {
        return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
      }
      return null;
    }
  }
;
}","/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue extractParameter(final HttpRequest request){
  return new TypedArgumentValue(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence getTypedValue(){
      final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
      if (formParam == null) {
        final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
        return literalsToSequence(defaultLiterals);
      }
      if (formParam instanceof String) {
        return new SequenceImpl(new StringTypedValue((String)formParam));
      }
 else       if (formParam instanceof List) {
        final List<String> formFieldValues=(List<String>)formParam;
        return collectionToSequence(formFieldValues);
      }
 else       if (formParam instanceof InputStream) {
        return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
      }
      return null;
    }
  }
;
}",0.914903620122238
189713,"@Override public Sequence<String> getTypedValue(){
  final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
  if (queryParam == null) {
    final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
    if (defaultLiterals.length > 0) {
      return literalsToSequence(defaultLiterals);
    }
 else {
      return Sequence.EMPTY_SEQUENCE;
    }
  }
 else   if (queryParam instanceof String) {
    return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
  }
  return null;
}","@Override public Sequence<String> getTypedValue(){
  final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
  if (queryParam == null) {
    final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
    if (defaultLiterals.length > 0) {
      return literalsToSequence(defaultLiterals);
    }
 else {
      return Sequence.EMPTY_SEQUENCE;
    }
  }
 else   if (queryParam instanceof String) {
    return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
  }
 else   if (queryParam instanceof List) {
    final List<String> queryParamValues=(List<String>)queryParam;
    return collectionToSequence(queryParamValues);
  }
  return null;
}",0.8544747081712062
189714,"/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue<String> extractParameter(final HttpRequest request){
  return new TypedArgumentValue<String>(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence<String> getTypedValue(){
      final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
      if (queryParam == null) {
        final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
        if (defaultLiterals.length > 0) {
          return literalsToSequence(defaultLiterals);
        }
 else {
          return Sequence.EMPTY_SEQUENCE;
        }
      }
 else       if (queryParam instanceof String) {
        return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
      }
      return null;
    }
  }
;
}","/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue<String> extractParameter(final HttpRequest request){
  return new TypedArgumentValue<String>(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence<String> getTypedValue(){
      final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
      if (queryParam == null) {
        final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
        if (defaultLiterals.length > 0) {
          return literalsToSequence(defaultLiterals);
        }
 else {
          return Sequence.EMPTY_SEQUENCE;
        }
      }
 else       if (queryParam instanceof String) {
        return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
      }
 else       if (queryParam instanceof List) {
        final List<String> queryParamValues=(List<String>)queryParam;
        return collectionToSequence(queryParamValues);
      }
      return null;
    }
  }
;
}",0.9011709601873537
189715,"/** 
 * Checks that a function declares a named argument with a specific compatible type
 * @param functionSignature The function signature to check for the named argument with compatible type
 * @param fnArgumentName The name of the argument to check the function signature for
 * @param requiredArgumentType The required type of the argument to check the function signature for
 * @param errorCode An error code to return in the exception of the required type could not be found
 * @throws RestAnnotationException If the named argument with a compatible required type is not declared by the function signature
 */
protected void checkFnDeclaresParameterWithType(final FunctionSignature functionSignature,final String fnArgumentName,final Type requiredArgumentType,final RestXqErrorCode errorCode) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  boolean found=false;
  for (  final FunctionArgument fnArgument : fnArguments) {
    if (fnArgument.getName().equals(fnArgumentName)) {
      if (!fnArgument.getType().isSubTypeOf(requiredArgumentType)) {
        throw new RestAnnotationException(errorCode);
      }
      found=true;
      break;
    }
  }
  if (!found) {
    throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
  }
}","/** 
 * Checks that a function declares a named argument with a specific compatible type
 * @param functionSignature The function signature to check for the named argument with compatible type
 * @param fnArgumentName The name of the argument to check the function signature for
 * @param requiredArgumentType The required type of the argument to check the function signature for
 * @param errorCode An error code to return in the exception of the required type could not be found
 * @throws RestAnnotationException If the named argument with a compatible required type is not declared by the function signature
 */
protected void checkFnDeclaresParameterWithType(final FunctionSignature functionSignature,final String fnArgumentName,final Type requiredArgumentType,final RestXqErrorCode errorCode) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  boolean found=false;
  for (  final FunctionArgument fnArgument : fnArguments) {
    if (fnArgument.getName().equals(fnArgumentName)) {
      if (!hasCompatibleType(fnArgument.getType(),requiredArgumentType)) {
        throw new RestAnnotationException(errorCode);
      }
      found=true;
      break;
    }
  }
  if (!found) {
    throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
  }
}",0.9808429118773946
189716,"protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames,final Cardinality requiredCardinality) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(requiredCardinality)) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().hasSubType(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
}","protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames,final Cardinality requiredCardinality) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(requiredCardinality)) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!hasCompatibleType(fnArgument.getType(),getRequiredFunctionParameterType())) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
}",0.9405405405405406
189717,protected abstract RestXqErrorCode getInvalidMediaTypeLiteralErr();,"/** 
 * Get the Error Code to use when the Annotation has an invalid Media Type literal
 * @return The error code
 */
protected abstract RestXqErrorCode getInvalidMediaTypeLiteralErr();",0.5317460317460317
189718,protected abstract RestXqErrorCode getEmptyAnnotationParamsErr();,"/** 
 * Get the Error Code to use when the Annotation Parameters are Empty
 * @return The error code
 */
protected abstract RestXqErrorCode getEmptyAnnotationParamsErr();",0.5531914893617021
189719,protected abstract RestXqErrorCode getInvalidMediaTypeErr();,"/** 
 * Get the Error Code to use when the Annotation has an invalid Media Type
 * @return The error code
 */
protected abstract RestXqErrorCode getInvalidMediaTypeErr();",0.5217391304347826
189720,"/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (fnArgument.getCardinality().hasRequiredCardinality(Cardinality.ONE)) {
          throw new RestAnnotationException(RestXqErrorCodes.RQST0005);
        }
        if (!fnArgument.getType().isSubTypeOf(Type.ITEM)) {
          throw new RestAnnotationException(RestXqErrorCodes.RQST0006);
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}","/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!fnArgument.getType().isSubTypeOf(getRequiredFunctionParameterType())) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}",0.9508541392904074
189721,"/** 
 * Processes the Serialization Annotations and sets Serialization Properties that will be used during serialization of the response
 * @param serializationAnnotations The Serialization Annotations to process  
 * @param serializationProperties The Serialization properties derived from the Serialization Annotations
 */
protected void processSerializationAnnotations(final Set<SerializationAnnotation> serializationAnnotations,final Map<SerializationProperty,String> serializationProperties){
  String mediaType=null;
  for (  SerializationAnnotation serializationAnnotation : serializationAnnotations) {
    if (serializationAnnotation instanceof MethodAnnotation) {
      final String methodProp=((MethodAnnotation)serializationAnnotation).getMethod();
      serializationProperties.put(SerializationProperty.METHOD,methodProp);
      SupportedMethod method=null;
      try {
        method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
      }
 catch (      final IllegalArgumentException iae) {
        System.out.println(iae.getMessage());
      }
      if (method != null) {
        if (method.equals(SupportedMethod.xml) || method.equals(SupportedMethod.xhtml)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,getDefaultContentType());
        }
 else         if (method.equals(SupportedMethod.html) || method.equals(SupportedMethod.html5)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.TEXT_HTML.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
        }
 else         if (method.equals(SupportedMethod.json)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.APPLICATION_JSON.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
        }
      }
    }
 else     if (serializationAnnotation instanceof MediaTypeAnnotation) {
      mediaType=((MediaTypeAnnotation)serializationAnnotation).getMediaType();
    }
  }
  if (mediaType != null) {
    serializationProperties.put(SerializationProperty.MEDIA_TYPE,mediaType);
  }
}","/** 
 * Processes the Serialization Annotations and sets Serialization Properties that will be used during serialization of the response
 * @param serializationAnnotations The Serialization Annotations to process  
 * @param serializationProperties The Serialization properties derived from the Serialization Annotations
 */
protected void processSerializationAnnotations(final Set<SerializationAnnotation> serializationAnnotations,final Map<SerializationProperty,String> serializationProperties){
  String mediaType=null;
  for (  SerializationAnnotation serializationAnnotation : serializationAnnotations) {
    if (serializationAnnotation instanceof MethodAnnotation) {
      final String methodProp=((MethodAnnotation)serializationAnnotation).getMethod();
      serializationProperties.put(SerializationProperty.METHOD,methodProp);
      SupportedMethod method=null;
      try {
        method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
      }
 catch (      final IllegalArgumentException iae) {
        System.out.println(iae.getMessage());
      }
      if (method != null) {
        if (method.equals(SupportedMethod.xml) || method.equals(SupportedMethod.xhtml)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,getDefaultContentType());
        }
 else         if (method.equals(SupportedMethod.html) || method.equals(SupportedMethod.html5)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.TEXT_HTML.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
        }
 else         if (method.equals(SupportedMethod.json)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.APPLICATION_JSON.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
        }
 else         if (method.equals(SupportedMethod.binary)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.APPLICATION_OCTET_STREAM.getMediaType());
        }
      }
    }
 else     if (serializationAnnotation instanceof MediaTypeAnnotation) {
      mediaType=((MediaTypeAnnotation)serializationAnnotation).getMediaType();
    }
  }
  if (mediaType != null) {
    serializationProperties.put(SerializationProperty.MEDIA_TYPE,mediaType);
  }
}",0.8719346049046321
189722,"/** 
 * Sorts the Services into Path Specificity descending order That is to say that the resultant sorted list should have the most specific URI's at the top! 
 * @param other Another Service
 */
@Override public int compareTo(final RestXqService other){
  if (other == null || !(other instanceof RestXqService)) {
    return 1;
  }
  return getResourceFunction().getPathAnnotation().getPathSpecificityMetric() - ((RestXqService)other).getResourceFunction().getPathAnnotation().getPathSpecificityMetric();
}","/** 
 * Sorts the Services into Path Specificity descending order That is to say that the resultant sorted list should have the most specific URI's at the top! 
 * @param other Another Service
 */
@Override public int compareTo(final RestXqService other){
  if (other == null || !(other instanceof RestXqService)) {
    return 1;
  }
  long result=getResourceFunction().getPathAnnotation().getPathSpecificityMetric() - ((RestXqService)other).getResourceFunction().getPathAnnotation().getPathSpecificityMetric();
  if (result > 0) {
    return 1;
  }
 else   if (result < 0) {
    return -1;
  }
 else {
    return 0;
  }
}",0.8867256637168142
189723,"/** 
 * Parses the Parameter Annotation Value
 * @return The Parameter to Argument Mapping described by the Parameter Annotation
 * @throws RestAnnotationException if the Parameter annotations mapping is invalid
 */
protected ParameterAnnotationMapping parseAnnotationValue() throws RestAnnotationException {
  final Literal[] annotationLiterals=getLiterals();
  if (canProvideDefaultValue()) {
    if (annotationLiterals.length < 2 || annotationLiterals.length > 3) {
      throw new RestAnnotationException(getInvalidAnnotationParamsErr());
    }
  }
 else {
    if (annotationLiterals.length != 2) {
      throw new RestAnnotationException(getInvalidAnnotationParamsErr());
    }
  }
  return parseAnnotationLiterals(annotationLiterals[0],annotationLiterals[1],annotationLiterals.length == 3 ? annotationLiterals[2] : null);
}","/** 
 * Parses the Parameter Annotation Value
 * @return The Parameter to Argument Mapping described by the Parameter Annotation
 * @throws RestAnnotationException if the Parameter annotations mapping is invalid
 */
protected ParameterAnnotationMapping parseAnnotationValue() throws RestAnnotationException {
  final Literal[] annotationLiterals=getLiterals();
  if (annotationLiterals.length != 2) {
    throw new RestAnnotationException(getInvalidAnnotationParamsErr());
  }
  return parseAnnotationLiterals(annotationLiterals[0],annotationLiterals[1],Cardinality.ZERO_OR_MORE);
}",0.7498228206945429
189724,"/** 
 * Parses the Parameter Annotations Literal Values
 * @param parameterName The name of the Parameter
 * @param functionArgumentName The name of the Function Argument
 * @param defaultValue The default value if provided, or null otherwise
 * @return A description of the mapping between the Parameter and the Function Argument
 * @throws RestAnnotationException if the mapping is invalid
 */
protected ParameterAnnotationMapping parseAnnotationLiterals(final Literal parameterName,final Literal functionArgumentName,final Literal defaultValue) throws RestAnnotationException {
  if (parameterName.getType() != Type.STRING) {
    throw new RestAnnotationException(getInvalidParameterNameErr());
  }
  if (functionArgumentName.getType() != Type.STRING) {
    throw new RestAnnotationException(getInvalidFunctionArgumentNameErr());
  }
  if (defaultValue != null && !defaultValue.getType().isSubTypeOf(Type.ANY_SIMPLE_TYPE)) {
    throw new RestAnnotationException(getInvalidDefaultValueErr());
  }
  final String keyStr=parameterName.getValue();
  final String varStr=functionArgumentName.getValue();
  if (keyStr.isEmpty()) {
    throw new RestAnnotationException(getInvalidParameterNameErr());
  }
  if (varStr.isEmpty()) {
    throw new RestAnnotationException(getInvalidFunctionArgumentNameErr());
  }
  final Matcher mtcFnParameter=functionArgumentPattern.matcher(varStr);
  if (!mtcFnParameter.matches()) {
    throw new RestAnnotationException(getInvalidAnnotationParametersSyntaxErr());
  }
  final String varName=mtcFnParameter.group(1);
  if (defaultValue == null) {
    checkFnDeclaresParameter(getFunctionSignature(),varName);
  }
 else {
    checkFnDeclaresParameterWithType(getFunctionSignature(),varName,defaultValue.getType(),getInvalidDefaultValueTypeErr());
  }
  return new ParameterAnnotationMapping(keyStr,varName,defaultValue != null ? defaultValue : null);
}","/** 
 * Parses the Parameter Annotations Literal Values
 * @param parameterName The name of the Parameter
 * @param functionArgumentName The name of the Function Argument
 * @param defaultValue The default value if provided, or null otherwise
 * @return A description of the mapping between the Parameter and the Function Argument
 * @throws RestAnnotationException if the mapping is invalid
 */
protected final ParameterAnnotationMapping parseAnnotationLiterals(final Literal parameterName,final Literal functionArgumentName,final Cardinality requiredCardinality) throws RestAnnotationException {
  if (parameterName.getType() != Type.STRING) {
    throw new RestAnnotationException(getInvalidParameterNameErr());
  }
  if (functionArgumentName.getType() != Type.STRING) {
    throw new RestAnnotationException(getInvalidFunctionArgumentNameErr());
  }
  final String keyStr=parameterName.getValue();
  final String varStr=functionArgumentName.getValue();
  if (keyStr.isEmpty()) {
    throw new RestAnnotationException(getInvalidParameterNameErr());
  }
  if (varStr.isEmpty()) {
    throw new RestAnnotationException(getInvalidFunctionArgumentNameErr());
  }
  final Matcher mtcFnParameter=functionArgumentPattern.matcher(varStr);
  if (!mtcFnParameter.matches()) {
    throw new RestAnnotationException(getInvalidAnnotationParametersSyntaxErr());
  }
  final String varName=mtcFnParameter.group(1);
  checkFnDeclaresParameter(getFunctionSignature(),varName,requiredCardinality);
  return new ParameterAnnotationMapping(keyStr,varName);
}",0.5327102803738317
189725,"/** 
 * Checks that a function declares a named argument
 * @param functionSignature The function signature to check for the named argument
 * @param fnArgumentName The name of the argument to check the function signature for
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameter(final FunctionSignature functionSignature,final String fnArgumentName) throws RestAnnotationException {
  final List<String> fnParamNames=new ArrayList<String>(1);
  fnParamNames.add(fnArgumentName);
  checkFnDeclaresParameters(functionSignature,fnParamNames);
}","protected void checkFnDeclaresParameter(final FunctionSignature functionSignature,final String fnArgumentName,final Cardinality requiredCardinality) throws RestAnnotationException {
  final List<String> fnParamNames=new ArrayList<String>(1);
  fnParamNames.add(fnArgumentName);
  checkFnDeclaresParameters(functionSignature,fnParamNames,requiredCardinality);
}",0.604
189726,"/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().hasSubType(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
}","protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames,final Cardinality requiredCardinality) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(requiredCardinality)) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().hasSubType(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
}",0.7180722891566265
189727,"@Override public Sequence getTypedValue(){
  final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
  if (formParam == null) {
    final Literal defaultLiteral=getParameterAnnotationMapping().getDefaultValue();
    return new SequenceImpl(new StringTypedValue(defaultLiteral.getValue()));
  }
  if (formParam instanceof String) {
    return new SequenceImpl(new StringTypedValue((String)formParam));
  }
  if (formParam instanceof InputStream) {
    return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
  }
  return null;
}","@Override public Sequence getTypedValue(){
  final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
  if (formParam == null) {
    final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
    return literalsToSequence(defaultLiterals);
  }
  if (formParam instanceof String) {
    return new SequenceImpl(new StringTypedValue((String)formParam));
  }
  if (formParam instanceof InputStream) {
    return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
  }
  return null;
}",0.9507640067911716
189728,"/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue extractParameter(final HttpRequest request){
  return new TypedArgumentValue(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence getTypedValue(){
      final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
      if (formParam == null) {
        final Literal defaultLiteral=getParameterAnnotationMapping().getDefaultValue();
        return new SequenceImpl(new StringTypedValue(defaultLiteral.getValue()));
      }
      if (formParam instanceof String) {
        return new SequenceImpl(new StringTypedValue((String)formParam));
      }
      if (formParam instanceof InputStream) {
        return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
      }
      return null;
    }
  }
;
}","/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue extractParameter(final HttpRequest request){
  return new TypedArgumentValue(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence getTypedValue(){
      final Object formParam=request.getFormParam(getParameterAnnotationMapping().getParameterName());
      if (formParam == null) {
        final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
        return literalsToSequence(defaultLiterals);
      }
      if (formParam instanceof String) {
        return new SequenceImpl(new StringTypedValue((String)formParam));
      }
      if (formParam instanceof InputStream) {
        return new SequenceImpl<InputStream>(new Base64BinaryTypedValue((InputStream)formParam));
      }
      return null;
    }
  }
;
}",0.9705882352941176
189729,"public ParameterAnnotationMapping(final String parameterName,final String functionArgumentName,final Literal defaultValue){
  this.parameterName=parameterName;
  this.functionArgumentName=functionArgumentName;
  this.defaultValue=defaultValue;
}","public ParameterAnnotationMapping(final String parameterName,final String functionArgumentName,final Literal[] defaultValues){
  this.parameterName=parameterName;
  this.functionArgumentName=functionArgumentName;
  this.defaultValues=defaultValues;
}",0.98989898989899
189730,"@Override public Sequence<String> getTypedValue(){
  final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
  if (queryParam == null) {
    final Literal defaultLiteral=getParameterAnnotationMapping().getDefaultValue();
    if (defaultLiteral != null) {
      return new SequenceImpl<String>(new StringTypedValue(defaultLiteral.getValue()));
    }
 else {
      return Sequence.EMPTY_SEQUENCE;
    }
  }
 else   if (queryParam instanceof String) {
    return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
  }
  return null;
}","@Override public Sequence<String> getTypedValue(){
  final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
  if (queryParam == null) {
    final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
    if (defaultLiterals.length > 0) {
      return literalsToSequence(defaultLiterals);
    }
 else {
      return Sequence.EMPTY_SEQUENCE;
    }
  }
 else   if (queryParam instanceof String) {
    return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
  }
  return null;
}",0.9131944444444444
189731,"/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue<String> extractParameter(final HttpRequest request){
  return new TypedArgumentValue<String>(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence<String> getTypedValue(){
      final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
      if (queryParam == null) {
        final Literal defaultLiteral=getParameterAnnotationMapping().getDefaultValue();
        if (defaultLiteral != null) {
          return new SequenceImpl<String>(new StringTypedValue(defaultLiteral.getValue()));
        }
 else {
          return Sequence.EMPTY_SEQUENCE;
        }
      }
 else       if (queryParam instanceof String) {
        return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
      }
      return null;
    }
  }
;
}","/** 
 * @see AbstractParameterAnnotation#extractParameter(org.exquery.http.HttpRequest)
 */
@Override public TypedArgumentValue<String> extractParameter(final HttpRequest request){
  return new TypedArgumentValue<String>(){
    @Override public String getArgumentName(){
      return getParameterAnnotationMapping().getFunctionArgumentName();
    }
    @Override public Sequence<String> getTypedValue(){
      final Object queryParam=request.getQueryParam(getParameterAnnotationMapping().getParameterName());
      if (queryParam == null) {
        final Literal defaultLiterals[]=getParameterAnnotationMapping().getDefaultValues();
        if (defaultLiterals.length > 0) {
          return literalsToSequence(defaultLiterals);
        }
 else {
          return Sequence.EMPTY_SEQUENCE;
        }
      }
 else       if (queryParam instanceof String) {
        return new SequenceImpl<String>(new StringTypedValue((String)queryParam));
      }
      return null;
    }
  }
;
}",0.9496475327291036
189732,"/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!fnArgument.getType().hasSubType(getRequiredFunctionParameterType())) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}","/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().isSubTypeOf(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}",0.9815516805660854
189733,"/** 
 * Processes the Serialization Annotations and sets Serialization Properties that will be used during serialization of the response
 * @param serializationAnnotations The Serialization Annotations to process  
 * @param serializationProperties The Serialization properties derived from the Serialization Annotations
 */
protected void processSerializationAnnotations(final Set<SerializationAnnotation> serializationAnnotations,final Map<SerializationProperty,String> serializationProperties){
  for (  SerializationAnnotation serializationAnnotation : serializationAnnotations) {
    if (serializationAnnotation instanceof MethodAnnotation) {
      final String method=((MethodAnnotation)serializationAnnotation).getMethod();
      serializationProperties.put(SerializationProperty.METHOD,method);
    }
 else     if (serializationAnnotation instanceof MediaTypeAnnotation) {
      final String mediaType=((MediaTypeAnnotation)serializationAnnotation).getMediaType();
      serializationProperties.put(SerializationProperty.MEDIA_TYPE,mediaType);
    }
  }
}","/** 
 * Processes the Serialization Annotations and sets Serialization Properties that will be used during serialization of the response
 * @param serializationAnnotations The Serialization Annotations to process  
 * @param serializationProperties The Serialization properties derived from the Serialization Annotations
 */
protected void processSerializationAnnotations(final Set<SerializationAnnotation> serializationAnnotations,final Map<SerializationProperty,String> serializationProperties){
  String mediaType=null;
  for (  SerializationAnnotation serializationAnnotation : serializationAnnotations) {
    if (serializationAnnotation instanceof MethodAnnotation) {
      final String methodProp=((MethodAnnotation)serializationAnnotation).getMethod();
      serializationProperties.put(SerializationProperty.METHOD,methodProp);
      SupportedMethod method=null;
      try {
        method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
      }
 catch (      final IllegalArgumentException iae) {
        System.out.println(iae.getMessage());
      }
      if (method != null) {
        if (method.equals(SupportedMethod.xml) || method.equals(SupportedMethod.xhtml)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,getDefaultContentType());
        }
 else         if (method.equals(SupportedMethod.html) || method.equals(SupportedMethod.html5)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.TEXT_HTML.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
        }
 else         if (method.equals(SupportedMethod.json)) {
          serializationProperties.put(SerializationProperty.MEDIA_TYPE,InternetMediaType.APPLICATION_JSON.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
        }
      }
    }
 else     if (serializationAnnotation instanceof MediaTypeAnnotation) {
      mediaType=((MediaTypeAnnotation)serializationAnnotation).getMediaType();
    }
  }
  if (mediaType != null) {
    serializationProperties.put(SerializationProperty.MEDIA_TYPE,mediaType);
  }
}",0.5756714060031596
189734,"/** 
 * Serialize to the body of the HTTP Response
 * @param result
 * @param response
 * @param serializationProperties
 * @throws RestXqServiceException  
 */
protected void serializeBody(final Sequence result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException {
  SupportedMethod method=null;
  try {
    final String methodProp=serializationProperties.get(SerializationProperty.METHOD);
    method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
  }
 catch (  IllegalArgumentException iae) {
    System.out.println(iae.getMessage());
  }
  if (method != null) {
    if (method.equals(SupportedMethod.xml) || method.equals(SupportedMethod.xhtml)) {
      response.setContentType(getDefaultContentType());
    }
 else     if (method.equals(SupportedMethod.html) || method.equals(SupportedMethod.html5)) {
      response.setContentType(InternetMediaType.TEXT_HTML.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
    }
 else     if (method.equals(SupportedMethod.json)) {
      response.setContentType(InternetMediaType.APPLICATION_JSON.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
    }
  }
  final String mediaType=serializationProperties.get(SerializationProperty.MEDIA_TYPE);
  if (mediaType != null && !mediaType.isEmpty()) {
    response.setContentType(mediaType);
  }
  if (method != null && method.equals(SupportedMethod.binary)) {
    serializeBinaryBody(result,response);
  }
 else {
    serializeNodeBody(result,response,serializationProperties);
  }
}","/** 
 * Serialize to the body of the HTTP Response
 * @param result
 * @param response
 * @param serializationProperties
 * @throws RestXqServiceException  
 */
protected void serializeBody(final Sequence result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException {
  SupportedMethod method=null;
  final String mediaType=serializationProperties.get(SerializationProperty.MEDIA_TYPE);
  if (mediaType != null && !mediaType.isEmpty()) {
    response.setContentType(mediaType);
  }
  if (method != null && method.equals(SupportedMethod.binary)) {
    serializeBinaryBody(result,response);
  }
 else {
    serializeNodeBody(result,response,serializationProperties);
  }
}",0.6329764453961456
189735,"/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().hasSubType(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}","/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!(fnArgument.getType().hasSubType(getRequiredFunctionParameterType()) | getRequiredFunctionParameterType().hasSubType(fnArgument.getType()))) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
}",0.8338158656629994
189736,"@Test public void path_fnArgNodeType_one_template_isNotOk() throws RestAnnotationException {
  final FunctionArgument[] args={new NodeFnArg(""String_Node_Str"")};
  final PathAnnotationImpl pa=new PathAnnotationImpl();
  pa.setFunctionSignature(new ArgsFunctionSignature(args));
  pa.setLiterals(new Literal[]{new StringLiteral(""String_Node_Str"")});
  RestXqErrorCode code=null;
  try {
    pa.initialise();
  }
 catch (  final RestAnnotationException rae) {
    code=rae.getErrorCode();
  }
  assertEquals(RestXqErrorCodes.RQST0006,code);
}","@Test public void path_fnArgNodeType_one_template_isNotOk() throws RestAnnotationException {
  final FunctionArgument[] args={new NodeFnArg(""String_Node_Str"")};
  final PathAnnotationImpl pa=new PathAnnotationImpl();
  pa.setFunctionSignature(new ArgsFunctionSignature(args));
  pa.setLiterals(new Literal[]{new StringLiteral(""String_Node_Str"")});
  ErrorCode code=null;
  try {
    pa.initialise();
  }
 catch (  final RestAnnotationException rae) {
    code=rae.getErrorCode();
  }
  assertEquals(RestXqErrorCodes.RQST0006,code);
}",0.9944029850746268
189737,"@Override public boolean matchesMediaType(final HttpRequest request){
  final String contentType=request.getContentType();
  final Matcher mtcConsumesContentType=getMediaTypesPatternMatcher().matcher(contentType);
  return mtcConsumesContentType.matches();
}","@Override public boolean matchesMediaType(final HttpRequest request){
  final String contentType=request.getContentType();
  if (contentType == null) {
    return false;
  }
  final Matcher mtcConsumesContentType=getMediaTypesPatternMatcher().matcher(contentType);
  return mtcConsumesContentType.matches();
}",0.91005291005291
189738,"/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!fnArgument.getType().isSubTypeOf(getRequiredFunctionParameterType())) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}","/** 
 * Checks that a function has parameters which are compatible with those declared by an annotation on that function
 * @param functionSignature The function signature to check for declared parameters
 * @param fnArgumentNames The Function arguments to check against the function signature
 * @throws RestAnnotationException If the function arguments are not compatible with the function signature
 */
protected void checkFnDeclaresParameters(final FunctionSignature functionSignature,final List<String> fnArgumentNames) throws RestAnnotationException {
  final FunctionArgument[] fnArguments=functionSignature.getArguments();
  for (  final String fnArgumentName : fnArgumentNames) {
    boolean found=false;
    for (    final FunctionArgument fnArgument : fnArguments) {
      if (fnArgument.getName().equals(fnArgumentName)) {
        if (!fnArgument.getCardinality().hasRequiredCardinality(getRequiredFunctionParameterCardinality())) {
          throw new RestAnnotationException(getInvalidFunctionParameterCardinalityErr());
        }
        if (!fnArgument.getType().hasSubType(getRequiredFunctionParameterType())) {
          throw new RestAnnotationException(getInvalidFunctionParameterTypeErr());
        }
        found=true;
        break;
      }
    }
    if (!found) {
      throw new RestAnnotationException(RestXqErrorCodes.RQST0007);
    }
  }
  for (  final FunctionArgument fnArgument : fnArguments) {
    boolean found=false;
    for (    final String fnArgumentName : fnArgumentNames) {
      if (fnArgumentName.equals(fnArgument.getName())) {
        found=true;
        break;
      }
    }
    if (!found) {
      final Cardinality paramCardinality=fnArgument.getCardinality();
      if (paramCardinality != Cardinality.ZERO && paramCardinality != Cardinality.ZERO_OR_ONE && paramCardinality != Cardinality.ZERO_OR_MORE) {
        throw new RestAnnotationException(RestXqErrorCodes.RQST0008);
      }
    }
  }
}",0.9987129987129988
189739,"/** 
 * Serialize to the body of the HTTP Response
 * @param result
 * @param response
 * @param serializationProperties
 * @throws RestXqServiceException  
 */
protected void serializeBody(final TypedValue result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException {
  SupportedMethod method=null;
  try {
    final String methodProp=serializationProperties.get(SerializationProperty.METHOD);
    method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
  }
 catch (  IllegalArgumentException iae) {
    System.out.println(iae.getMessage());
  }
  if (method != null) {
    if (method.equals(SupportedMethod.xml) || method.equals(SupportedMethod.xhtml)) {
      response.setContentType(getDefaultContentType());
    }
 else     if (method.equals(SupportedMethod.html) || method.equals(SupportedMethod.html5)) {
      response.setContentType(InternetMediaType.TEXT_HTML.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
    }
 else     if (method.equals(SupportedMethod.json)) {
      response.setContentType(InternetMediaType.APPLICATION_JSON.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
    }
  }
  if (method != null && method.equals(SupportedMethod.binary)) {
    serializeBinaryBody(result,response);
  }
 else {
    serializeNodeBody(result,response,serializationProperties);
  }
}","/** 
 * Serialize to the body of the HTTP Response
 * @param result
 * @param response
 * @param serializationProperties
 * @throws RestXqServiceException  
 */
protected void serializeBody(final Sequence result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException {
  SupportedMethod method=null;
  try {
    final String methodProp=serializationProperties.get(SerializationProperty.METHOD);
    method=(methodProp == null ? SupportedMethod.xml : SupportedMethod.valueOf(methodProp));
  }
 catch (  IllegalArgumentException iae) {
    System.out.println(iae.getMessage());
  }
  if (method != null) {
    if (method.equals(SupportedMethod.xml) || method.equals(SupportedMethod.xhtml)) {
      response.setContentType(getDefaultContentType());
    }
 else     if (method.equals(SupportedMethod.html) || method.equals(SupportedMethod.html5)) {
      response.setContentType(InternetMediaType.TEXT_HTML.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
    }
 else     if (method.equals(SupportedMethod.json)) {
      response.setContentType(InternetMediaType.APPLICATION_JSON.getMediaType() + ""String_Node_Str"" + getDefaultEncoding());
    }
  }
  if (method != null && method.equals(SupportedMethod.binary)) {
    serializeBinaryBody(result,response);
  }
 else {
    serializeNodeBody(result,response,serializationProperties);
  }
}",0.9943422913719944
189740,"/** 
 * Serializes the result of a RESTXQ Service
 * @param result The result of the RESTXQ Service's Resource Function invokation
 * @param serializationAnnotations Serialization Annotations which were present on the Resource Function
 * @param response The HTTP Response to Serialize the result to
 * @throws RestXqServiceException If an error occurs during serialization
 */
@Override public void serialize(final Sequence result,final Set<SerializationAnnotation> serializationAnnotations,final HttpResponse response) throws RestXqServiceException {
  if (response.isCommitted()) {
    return;
  }
  final Iterator<TypedValue> itResult=result.iterator();
  if (itResult.hasNext()) {
    final TypedValue firstResultPart=itResult.next();
    Element elem=null;
    if (firstResultPart.getType().equals(Type.DOCUMENT)) {
      elem=((Document)firstResultPart.getValue()).getDocumentElement();
    }
 else     if (firstResultPart.getType().equals(Type.ELEMENT)) {
      elem=(Element)firstResultPart.getValue();
    }
    final Map<SerializationProperty,String> serializationProperties=new EnumMap<SerializationProperty,String>(SerializationProperty.class);
    serializationProperties.putAll(getDefaultSerializationProperties());
    if (elem != null && new QName(elem.getNamespaceURI(),elem.getLocalName()).equals(RestResponseHandler.REST_RESPONSE_ELEMENT_NAME)) {
      processSerializationAnnotations(serializationAnnotations,serializationProperties);
      new RestResponseHandler().process(elem,serializationProperties,response);
      if (itResult.hasNext()) {
        final TypedValue secondResultPart=itResult.next();
        serializeBody(secondResultPart,response,serializationProperties);
      }
    }
 else {
      processSerializationAnnotations(serializationAnnotations,serializationProperties);
      serializeBody(firstResultPart,response,serializationProperties);
    }
  }
}","/** 
 * Serializes the result of a RESTXQ Service
 * @param result The result of the RESTXQ Service's Resource Function invokation
 * @param serializationAnnotations Serialization Annotations which were present on the Resource Function
 * @param response The HTTP Response to Serialize the result to
 * @throws RestXqServiceException If an error occurs during serialization
 */
@Override public void serialize(final Sequence result,final Set<SerializationAnnotation> serializationAnnotations,final HttpResponse response) throws RestXqServiceException {
  if (response.isCommitted()) {
    return;
  }
  final Iterator<TypedValue> itResult=result.iterator();
  if (itResult.hasNext()) {
    final TypedValue firstResultPart=itResult.next();
    Element elem=null;
    if (firstResultPart.getType().equals(Type.DOCUMENT)) {
      elem=((Document)firstResultPart.getValue()).getDocumentElement();
    }
 else     if (firstResultPart.getType().equals(Type.ELEMENT)) {
      elem=(Element)firstResultPart.getValue();
    }
    final Map<SerializationProperty,String> serializationProperties=new EnumMap<SerializationProperty,String>(SerializationProperty.class);
    serializationProperties.putAll(getDefaultSerializationProperties());
    if (elem != null && new QName(elem.getNamespaceURI(),elem.getLocalName()).equals(RestResponseHandler.REST_RESPONSE_ELEMENT_NAME)) {
      processSerializationAnnotations(serializationAnnotations,serializationProperties);
      new RestResponseHandler().process(elem,serializationProperties,response);
      if (itResult.hasNext()) {
        final Sequence seqBody=result.tail();
        serializeBody(seqBody,response,serializationProperties);
      }
    }
 else {
      processSerializationAnnotations(serializationAnnotations,serializationProperties);
      serializeBody(result,response,serializationProperties);
    }
  }
}",0.8788927335640139
189741,"/** 
 * Serialize the Result as Binary content
 * @param result The result to serialize as Binary, typically a sequence of one or more xs:base64Binary or xs:hexBinary
 * @param response The HTTP Response to serialize the result to
 * @throws RestXqServiceException If an error occurred whilst serializing the result
 */
protected abstract void serializeBinaryBody(final TypedValue result,final HttpResponse response) throws RestXqServiceException ;","/** 
 * Serialize the Result as Binary content
 * @param result The result to serialize as Binary, typically a sequence of one or more xs:base64Binary or xs:hexBinary
 * @param response The HTTP Response to serialize the result to
 * @throws RestXqServiceException If an error occurred whilst serializing the result
 */
protected abstract void serializeBinaryBody(final Sequence result,final HttpResponse response) throws RestXqServiceException ;",0.9821029082774048
189742,"/** 
 * Serialize the Result The method for serialization can be obtained from the map of Serialization properties using the key SerializationProperty.method, if the method is missing or null, then XML should be assumed.
 * @param result The result to serialize, typically a sequence of one or more documents
 * @param response The HTTP Response to serialize the result to
 * @param serializationProperties Properties for the serialization
 * @throws RestXqServiceException If an error occurred whilst serializing the result
 */
protected abstract void serializeNodeBody(final TypedValue result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException ;","/** 
 * Serialize the Result The method for serialization can be obtained from the map of Serialization properties using the key SerializationProperty.method, if the method is missing or null, then XML should be assumed.
 * @param result The result to serialize, typically a sequence of one or more documents
 * @param response The HTTP Response to serialize the result to
 * @param serializationProperties Properties for the serialization
 * @throws RestXqServiceException If an error occurred whilst serializing the result
 */
protected abstract void serializeNodeBody(final Sequence result,final HttpResponse response,final Map<SerializationProperty,String> serializationProperties) throws RestXqServiceException ;",0.9888579387186628
189743,"/** 
 * Gets the value of a HTTP Header
 * @param httpHeaderName The name of the HTTP Header to retrieve
 * @return The value of the header or null if the header was not present
 */
public String getHeader(final HttpHeaderName httpHeaderName);","/** 
 * Gets the value of a HTTP Header
 * @param httpHeaderName The name of the HTTP Header to retrieve
 * @return The value of the header or null if the header was not present
 */
public String getHeader(String httpHeaderName);",0.9449152542372882
189744,public boolean containsHeader(String contentType);,public boolean containsHeader(String httpHeaderName);,0.8155339805825242
189745,"public void setHeader(String attribute,String attribute0);","public void setHeader(String httpHeaderName,String value);",0.7931034482758621
189746,"@Override public boolean matchesMediaType(final HttpRequest request){
  final String acceptHeader=request.getHeader(HttpHeaderName.Accept);
  if (acceptHeader.indexOf(ANY_MEDIA_TYPE) > -1) {
    return true;
  }
  Matcher mtcProducesContentType=null;
  final String accepts[]=acceptHeader.split(""String_Node_Str"");
  for (  String accept : accepts) {
    accept=accept.toLowerCase();
    accept=accept.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final int idxExt=accept.indexOf(""String_Node_Str"");
    if (idxExt > -1) {
      accept=accept.substring(0,idxExt);
    }
    accept=accept.replaceFirst(InternetMediaType.subtypeSeparator + ""String_Node_Str"",InternetMediaType.subtypeSeparator + ""String_Node_Str"");
    if (mtcProducesContentType == null) {
      mtcProducesContentType=getMediaTypesPatternMatcher().matcher(accept);
    }
 else {
      mtcProducesContentType=mtcProducesContentType.reset(accept);
    }
    if (mtcProducesContentType.matches()) {
      return true;
    }
  }
  return false;
}","@Override public boolean matchesMediaType(final HttpRequest request){
  final String acceptHeader=request.getHeader(HttpHeaderName.Accept.toString());
  if (acceptHeader.indexOf(ANY_MEDIA_TYPE) > -1) {
    return true;
  }
  Matcher mtcProducesContentType=null;
  final String accepts[]=acceptHeader.split(""String_Node_Str"");
  for (  String accept : accepts) {
    accept=accept.toLowerCase();
    accept=accept.replaceAll(""String_Node_Str"",""String_Node_Str"");
    final int idxExt=accept.indexOf(""String_Node_Str"");
    if (idxExt > -1) {
      accept=accept.substring(0,idxExt);
    }
    accept=accept.replaceFirst(InternetMediaType.subtypeSeparator + ""String_Node_Str"",InternetMediaType.subtypeSeparator + ""String_Node_Str"");
    if (mtcProducesContentType == null) {
      mtcProducesContentType=getMediaTypesPatternMatcher().matcher(accept);
    }
 else {
      mtcProducesContentType=mtcProducesContentType.reset(accept);
    }
    if (mtcProducesContentType.matches()) {
      return true;
    }
  }
  return false;
}",0.994610485056345
189747,"/** 
 * Iterate over the Services Map
 * @param The visitor which visits the services map
 * @param eagerLockAll true if all methods should be locked before visiting anything, false to lock methods as they are visited
 */
public void iterate(final RestXqServiceMapVisitor visitor,final boolean eagerLockAll){
  try {
    if (eagerLockAll) {
      for (      final HttpMethod method : HttpMethod.values()) {
        final ReentrantReadWriteLock lock=getOrCreateMethodLock(method);
        lock.readLock().lock();
      }
      for (      final HttpMethod method : HttpMethod.values()) {
        visitor.visit(method,orderedServices.get(method));
      }
    }
 else {
      for (      final HttpMethod method : HttpMethod.values()) {
        final ReentrantReadWriteLock lock=getOrCreateMethodLock(method);
        lock.readLock().lock();
        visitor.visit(method,orderedServices.get(method));
      }
    }
  }
  finally {
    for (    final HttpMethod method : HttpMethod.values()) {
      final ReentrantReadWriteLock lock=getOrCreateMethodLock(method);
      lock.readLock().unlock();
    }
  }
}","/** 
 * Iterate over the Services Map
 * @param The visitor which visits the services map
 * @param eagerLockAll true if all methods should be locked before visiting anything, false to lock methods as they are visited
 */
public void iterate(final RestXqServiceMapVisitor visitor,final boolean eagerLockAll){
  try {
    if (eagerLockAll) {
      for (      final HttpMethod method : HttpMethod.values()) {
        final ReentrantReadWriteLock lock=getOrCreateMethodLock(method);
        lock.readLock().lock();
      }
      for (      final HttpMethod method : HttpMethod.values()) {
        final List<RestXqService> services=orderedServices.get(method);
        if (services != null) {
          visitor.visit(method,services);
        }
      }
    }
 else {
      for (      final HttpMethod method : HttpMethod.values()) {
        final ReentrantReadWriteLock lock=getOrCreateMethodLock(method);
        lock.readLock().lock();
        final List<RestXqService> services=orderedServices.get(method);
        if (services != null) {
          visitor.visit(method,services);
        }
      }
    }
  }
  finally {
    for (    final HttpMethod method : HttpMethod.values()) {
      final ReentrantReadWriteLock lock=getOrCreateMethodLock(method);
      lock.readLock().unlock();
    }
  }
}",0.8741666666666666
189748,"/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueTypeErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueTypeErr(){
  return RestXqErrorCodes.RQST0018;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueTypeErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueTypeErr(){
  return RestXqErrorCodes.RQST0019;
}",0.994535519125683
189749,"/** 
 * @see AbstractParameterAnnotation#getInvalidKeyErr()
 */
@Override protected RestXqErrorCode getInvalidParameterNameErr(){
  return RestXqErrorCodes.RQST0015;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidKeyErr()
 */
@Override protected RestXqErrorCode getInvalidParameterNameErr(){
  return RestXqErrorCodes.RQST0016;
}",0.994011976047904
189750,"/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamSyntaxErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParametersSyntaxErr(){
  return RestXqErrorCodes.RQST0019;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamSyntaxErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParametersSyntaxErr(){
  return RestXqErrorCodes.RQST0020;
}",0.98989898989899
189751,"/** 
 * @see AbstractParameterAnnotation#getInvalidValueErr()
 */
@Override protected RestXqErrorCode getInvalidFunctionArgumentNameErr(){
  return RestXqErrorCodes.RQST0016;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidValueErr()
 */
@Override protected RestXqErrorCode getInvalidFunctionArgumentNameErr(){
  return RestXqErrorCodes.RQST0017;
}",0.9943181818181818
189752,"/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueErr(){
  return RestXqErrorCodes.RQST0017;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueErr(){
  return RestXqErrorCodes.RQST0018;
}",0.9942857142857144
189753,"/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamsErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParamsErr(){
  return RestXqErrorCodes.RQST0014;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamsErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParamsErr(){
  return RestXqErrorCodes.RQST0015;
}",0.994535519125683
189754,"/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueTypeErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueTypeErr(){
  return RestXqErrorCodes.RQST0024;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueTypeErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueTypeErr(){
  return RestXqErrorCodes.RQST0025;
}",0.994535519125683
189755,"/** 
 * @see AbstractParameterAnnotation#getInvalidKeyErr()
 */
@Override protected RestXqErrorCode getInvalidParameterNameErr(){
  return RestXqErrorCodes.RQST0021;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidKeyErr()
 */
@Override protected RestXqErrorCode getInvalidParameterNameErr(){
  return RestXqErrorCodes.RQST0022;
}",0.994011976047904
189756,"/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamSyntaxErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParametersSyntaxErr(){
  return RestXqErrorCodes.RQST0025;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamSyntaxErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParametersSyntaxErr(){
  return RestXqErrorCodes.RQST0026;
}",0.9949494949494948
189757,"/** 
 * @see AbstractParameterAnnotation#getInvalidValueErr()
 */
@Override protected RestXqErrorCode getInvalidFunctionArgumentNameErr(){
  return RestXqErrorCodes.RQST0022;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidValueErr()
 */
@Override protected RestXqErrorCode getInvalidFunctionArgumentNameErr(){
  return RestXqErrorCodes.RQST0023;
}",0.9943181818181818
189758,"/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueErr(){
  return RestXqErrorCodes.RQST0023;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidDefaultValueErr()
 */
@Override protected RestXqErrorCode getInvalidDefaultValueErr(){
  return RestXqErrorCodes.RQST0024;
}",0.9942857142857144
189759,"/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamsErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParamsErr(){
  return RestXqErrorCodes.RQST0020;
}","/** 
 * @see AbstractParameterAnnotation#getInvalidAnnotationParamsErr()
 */
@Override protected RestXqErrorCode getInvalidAnnotationParamsErr(){
  return RestXqErrorCodes.RQST0021;
}",0.994535519125683
189760,"@Override public Iterator<RestXqService> iterator(){
  final Set<RestXqService> services=new HashSet<RestXqService>();
  final RestXqServiceMapVisitor visitor=new RestXqServiceMapVisitor(){
    @Override public void visit(    final HttpMethod method,    final List<RestXqService> restXqServices){
      services.putAll(restXqService);
    }
  }
;
  getServices().iterate(visitor,true);
  return services.iterator();
}","@Override public Iterator<RestXqService> iterator(){
  final Set<RestXqService> uniqueServices=new HashSet<RestXqService>();
  final RestXqServiceMapVisitor visitor=new RestXqServiceMapVisitor(){
    @Override public void visit(    final HttpMethod method,    final List<RestXqService> restXqServices){
      uniqueServices.addAll(restXqServices);
    }
  }
;
  getServices().iterate(visitor,true);
  return uniqueServices.iterator();
}",0.9636576787807736
189761,"@Override public void visit(final HttpMethod method,final List<RestXqService> restXqServices){
  services.putAll(restXqService);
}","@Override public void visit(final HttpMethod method,final List<RestXqService> restXqServices){
  uniqueServices.addAll(restXqServices);
}",0.9438202247191012
189762,"@Override public PreviewProperty[] getProperties(){
  List<PreviewProperty> properties=new ArrayList<PreviewProperty>();
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_RENDERER,PreviewProperty.RendererModes.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_REFRESH_RATE,Integer.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_THICKNESS,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY_FORCE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  PropertyEditorManager.registerEditor(ColorWrapper.class,DependantColorPropertyEditor.class);
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR,ColorWrapper.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_PERCENTAGE_INSTEAD_OF_LINEAR_SCALE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  return properties.toArray(new PreviewProperty[0]);
}","@Override public PreviewProperty[] getProperties(){
  List<PreviewProperty> properties=new ArrayList<PreviewProperty>();
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_RENDERER,PreviewProperty.RendererModes.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(PreviewProperty.RendererModes.SimpleRenderer));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_REFRESH_RATE,Integer.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(1));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_THICKNESS,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(0.5));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(0.1));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY_FORCE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(false));
  PropertyEditorManager.registerEditor(ColorWrapper.class,DependantColorPropertyEditor.class);
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR,ColorWrapper.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(new Color(0f,0f,0.5f)));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_PERCENTAGE_INSTEAD_OF_LINEAR_SCALE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(true));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT).setValue(false));
  return properties.toArray(new PreviewProperty[0]);
}",0.9545454545454546
189763,"private void renderBigProcessingItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    PGraphics graphics=((ProcessingTarget)target).getGraphics();
    graphics.noFill();
    graphics.strokeWeight(thickness);
    graphics.strokeCap(PGraphics.ROUND);
    graphics.stroke(data.getEdgeColor().getRed(),data.getEdgeColor().getGreen(),data.getEdgeColor().getBlue(),data.getEdgeColor().getAlpha());
    graphics.beginShape();
    for (int i=0; i < points.length; i++) {
      float x1=(float)points[i].x;
      float y1=(float)points[i].y;
      graphics.vertex(x1,-y1);
    }
    graphics.endShape();
  }
}","private void renderBigProcessingItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    PGraphics graphics=((ProcessingTarget)target).getGraphics();
    graphics.noFill();
    graphics.strokeWeight(thickness);
    graphics.strokeCap(PGraphics.ROUND);
    graphics.stroke(data.getEdgeColor().getRed(),data.getEdgeColor().getGreen(),data.getEdgeColor().getBlue(),forceAlpha ? intAlpha : data.getEdgeColor().getAlpha());
    graphics.beginShape();
    for (int i=0; i < points.length; i++) {
      float x1=(float)points[i].x;
      float y1=(float)points[i].y;
      graphics.vertex(x1,-y1);
    }
    graphics.endShape();
  }
}",0.9861111111111112
189764,"private void renderBigAndComplexProcessingItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    if (data.getSubdivisonPoints() == null || data.getSubdivisionEdgeColor() == null || edgeWrapper.id == data.getSubdivisonPoints().length - 1) {
      continue;
    }
    PGraphics graphics=((ProcessingTarget)target).getGraphics();
    graphics.noFill();
    graphics.strokeWeight(thickness);
    graphics.strokeCap(PGraphics.ROUND);
    Color color=data.getSubdivisionEdgeColor()[edgeWrapper.id];
    if (color == null) {
      continue;
    }
    graphics.stroke(color.getRed(),color.getGreen(),color.getBlue(),color.getAlpha());
    graphics.line((float)points[edgeWrapper.id].x,-(float)points[edgeWrapper.id].y,(float)points[edgeWrapper.id + 1].x,-(float)points[edgeWrapper.id + 1].y);
  }
}","private void renderBigAndComplexProcessingItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    if (data.getSubdivisonPoints() == null || data.getSubdivisionEdgeColor() == null || edgeWrapper.id == data.getSubdivisonPoints().length - 1) {
      continue;
    }
    PGraphics graphics=((ProcessingTarget)target).getGraphics();
    graphics.noFill();
    graphics.strokeWeight(thickness);
    graphics.strokeCap(PGraphics.ROUND);
    Color color=data.getSubdivisionEdgeColor()[edgeWrapper.id];
    if (color == null) {
      continue;
    }
    graphics.stroke(color.getRed(),color.getGreen(),color.getBlue(),(forceAlpha ? intAlpha : color.getAlpha()));
    graphics.line((float)points[edgeWrapper.id].x,-(float)points[edgeWrapper.id].y,(float)points[edgeWrapper.id + 1].x,-(float)points[edgeWrapper.id + 1].y);
  }
}",0.978178368121442
189765,"private void renderBigAndComplexPDFItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    Color color=data.getSubdivisionEdgeColor()[edgeWrapper.id];
    PDFTarget pdfTarget=(PDFTarget)target;
    PdfContentByte cb=pdfTarget.getContentByte();
    int i=edgeWrapper.id;
    if (i == points.length - 1) {
      continue;
    }
    cb.moveTo((float)points[i].x,(float)points[i].y);
    cb.lineTo((float)points[i + 1].x,(float)points[i + 1].y);
    cb.setRGBColorStroke(color.getRed(),color.getGreen(),color.getBlue());
    cb.setLineWidth(thickness);
    if (color.getAlpha() < 255) {
      cb.saveState();
      float alpha=color.getAlpha() / 255f;
      PdfGState gState=new PdfGState();
      gState.setStrokeOpacity(alpha);
      cb.setGState(gState);
    }
    cb.stroke();
    if (color.getAlpha() < 255) {
      cb.restoreState();
    }
  }
}","private void renderBigAndComplexPDFItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    Color color=data.getSubdivisionEdgeColor()[edgeWrapper.id];
    PDFTarget pdfTarget=(PDFTarget)target;
    PdfContentByte cb=pdfTarget.getContentByte();
    int i=edgeWrapper.id;
    if (i == points.length - 1) {
      continue;
    }
    cb.moveTo((float)points[i].x,(float)points[i].y);
    cb.lineTo((float)points[i + 1].x,(float)points[i + 1].y);
    cb.setRGBColorStroke(color.getRed(),color.getGreen(),color.getBlue());
    cb.setLineWidth(thickness);
    float usedAlpha=(forceAlpha ? intAlpha : color.getAlpha());
    if (usedAlpha < 255) {
      cb.saveState();
      float alpha=usedAlpha / 255f;
      PdfGState gState=new PdfGState();
      gState.setStrokeOpacity(alpha);
      cb.setGState(gState);
    }
    cb.stroke();
    if (usedAlpha < 255) {
      cb.restoreState();
    }
  }
}",0.9476978095663836
189766,"@Override public PreviewProperty[] getProperties(){
  List<PreviewProperty> properties=new ArrayList<PreviewProperty>();
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_RENDERER,PreviewProperty.RendererModes.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_REFRESH_RATE,Integer.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_THINKNESS,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  PropertyEditorManager.registerEditor(ColorWrapper.class,DependantColorPropertyEditor.class);
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR,ColorWrapper.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_PERCENTAGE_INSTEAD_OF_LINEAR_SCALE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  return properties.toArray(new PreviewProperty[0]);
}","@Override public PreviewProperty[] getProperties(){
  List<PreviewProperty> properties=new ArrayList<PreviewProperty>();
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_RENDERER,PreviewProperty.RendererModes.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_REFRESH_RATE,Integer.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_THICKNESS,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY,Double.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY_FORCE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  PropertyEditorManager.registerEditor(ColorWrapper.class,DependantColorPropertyEditor.class);
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR,ColorWrapper.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_USE_PERCENTAGE_INSTEAD_OF_LINEAR_SCALE,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  properties.add(PreviewProperty.createProperty(this,PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS,Boolean.class,""String_Node_Str"",""String_Node_Str"",PreviewProperty.CATEGORY_EDGE_LAYOUT));
  return properties.toArray(new PreviewProperty[0]);
}",0.9430471234460828
189767,"private void renderBigAndComplexSVGItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    if (edgeWrapper.id == points.length - 1) {
      continue;
    }
    Color color=data.getSubdivisionEdgeColor()[edgeWrapper.id];
    SVGTarget svgTarget=(SVGTarget)target;
    Element edgeElem=svgTarget.createElement(""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",edge.getSource().getNodeData().getId() + ""String_Node_Str"" + edge.getTarget().getNodeData().getId());
    edgeElem.setAttribute(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",points[edgeWrapper.id].x,points[edgeWrapper.id].y,points[edgeWrapper.id + 1].x,points[edgeWrapper.id + 1].y));
    edgeElem.setAttribute(""String_Node_Str"",svgTarget.toHexString(color));
    edgeElem.setAttribute(""String_Node_Str"",Float.toString(thickness * svgTarget.getScaleRatio()));
    edgeElem.setAttribute(""String_Node_Str"",(color.getAlpha() / 255f) + ""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",""String_Node_Str"");
    svgTarget.getTopElement(SVGTarget.TOP_EDGES).appendChild(edgeElem);
  }
}","private void renderBigAndComplexSVGItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    if (edgeWrapper.id == points.length - 1) {
      continue;
    }
    Color color=data.getSubdivisionEdgeColor()[edgeWrapper.id];
    SVGTarget svgTarget=(SVGTarget)target;
    Element edgeElem=svgTarget.createElement(""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",edge.getSource().getNodeData().getId() + ""String_Node_Str"" + edge.getTarget().getNodeData().getId());
    edgeElem.setAttribute(""String_Node_Str"",String.format(Locale.ENGLISH,""String_Node_Str"",points[edgeWrapper.id].x,points[edgeWrapper.id].y,points[edgeWrapper.id + 1].x,points[edgeWrapper.id + 1].y));
    edgeElem.setAttribute(""String_Node_Str"",svgTarget.toHexString(color));
    edgeElem.setAttribute(""String_Node_Str"",Float.toString(thickness * svgTarget.getScaleRatio()));
    edgeElem.setAttribute(""String_Node_Str"",((forceAlpha ? intAlpha : color.getAlpha()) / 255f) + ""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",""String_Node_Str"");
    svgTarget.getTopElement(SVGTarget.TOP_EDGES).appendChild(edgeElem);
  }
}",0.983667409057164
189768,"private void renderBigSVGItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    Color color=new Color(data.getEdgeColor().getRed(),data.getEdgeColor().getGreen(),data.getEdgeColor().getBlue(),(int)(255 * alpha));
    SVGTarget svgTarget=(SVGTarget)target;
    Element edgeElem=svgTarget.createElement(""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",svgTarget.toHexString(color));
    edgeElem.setAttribute(""String_Node_Str"",Float.toString(thickness * svgTarget.getScaleRatio()));
    edgeElem.setAttribute(""String_Node_Str"",(color.getAlpha() / 255f) + ""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",edge.toString());
    StringBuilder builder=new StringBuilder();
    for (int i=0; i < points.length; i++) {
      if (i != 0) {
        builder.append(""String_Node_Str"");
      }
      builder.append(points[i].x).append(""String_Node_Str"").append(-points[i].y);
    }
    edgeElem.setAttribute(""String_Node_Str"",builder.toString());
    svgTarget.getTopElement(SVGTarget.TOP_EDGES).appendChild(edgeElem);
  }
}","private void renderBigSVGItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    Color color=new Color(data.getEdgeColor().getRed(),data.getEdgeColor().getGreen(),data.getEdgeColor().getBlue());
    SVGTarget svgTarget=(SVGTarget)target;
    Element edgeElem=svgTarget.createElement(""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",svgTarget.toHexString(color));
    edgeElem.setAttribute(""String_Node_Str"",Float.toString(thickness * svgTarget.getScaleRatio()));
    edgeElem.setAttribute(""String_Node_Str"",((forceAlpha ? intAlpha : color.getAlpha()) / 255f) + ""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",""String_Node_Str"");
    edgeElem.setAttribute(""String_Node_Str"",edge.toString());
    StringBuilder builder=new StringBuilder();
    for (int i=0; i < points.length; i++) {
      if (i != 0) {
        builder.append(""String_Node_Str"");
      }
      builder.append(points[i].x).append(""String_Node_Str"").append(-points[i].y);
    }
    edgeElem.setAttribute(""String_Node_Str"",builder.toString());
    svgTarget.getTopElement(SVGTarget.TOP_EDGES).appendChild(edgeElem);
  }
}",0.9768467475192943
189769,"private void renderBigPDFItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    Color color=new Color(data.getEdgeColor().getRed(),data.getEdgeColor().getGreen(),data.getEdgeColor().getBlue(),(int)(255 * alpha));
    PDFTarget pdfTarget=(PDFTarget)target;
    PdfContentByte cb=pdfTarget.getContentByte();
    for (int i=0; i < points.length - 1; i++) {
      cb.moveTo((float)points[i].x,(float)points[i].y);
      cb.lineTo((float)points[i + 1].x,(float)points[i + 1].y);
    }
    cb.setRGBColorStroke(color.getRed(),color.getGreen(),color.getBlue());
    cb.setLineWidth(thickness);
    if (color.getAlpha() < 255) {
      cb.saveState();
      float alpha=color.getAlpha() / 255f;
      PdfGState gState=new PdfGState();
      gState.setStrokeOpacity(alpha);
      cb.setGState(gState);
    }
    cb.stroke();
    if (color.getAlpha() < 255) {
      cb.restoreState();
    }
  }
}","private void renderBigPDFItem(SubdividedEdgeBigItem item,RenderTarget target,PreviewProperties properties){
  for (  SortedEdgeWrapper edgeWrapper : item.edges) {
    Edge edge=edgeWrapper.edge;
    EdgeLayoutData data=(EdgeLayoutData)edge.getEdgeData().getLayoutData();
    Point2D.Double[] points=data.getSubdivisonPoints();
    Color color=new Color(data.getEdgeColor().getRed(),data.getEdgeColor().getGreen(),data.getEdgeColor().getBlue(),(int)(255 * alpha));
    PDFTarget pdfTarget=(PDFTarget)target;
    PdfContentByte cb=pdfTarget.getContentByte();
    for (int i=0; i < points.length - 1; i++) {
      cb.moveTo((float)points[i].x,(float)points[i].y);
      cb.lineTo((float)points[i + 1].x,(float)points[i + 1].y);
    }
    cb.setRGBColorStroke(color.getRed(),color.getGreen(),color.getBlue());
    cb.setLineWidth(thickness);
    float usedAlpha=(forceAlpha ? intAlpha : color.getAlpha());
    if (usedAlpha < 255) {
      cb.saveState();
      float alpha=usedAlpha / 255f;
      PdfGState gState=new PdfGState();
      gState.setStrokeOpacity(alpha);
      cb.setGState(gState);
    }
    cb.stroke();
    if (usedAlpha < 255) {
      cb.restoreState();
    }
  }
}",0.9494600431965444
189770,"@Override public void preProcess(PreviewModel previewModel){
  alpha=(float)previewModel.getProperties().getDoubleValue(PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY);
  thickness=(float)previewModel.getProperties().getDoubleValue(PreviewProperty.EDGE_LAYOUT_EDGE_THINKNESS);
  originalColor=previewModel.getProperties().getColorValue(PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR);
  useSimpleRendererBecauseOtherAreEmpty=false;
  if (previewModel.getItems(""String_Node_Str"") == null || previewModel.getItems(""String_Node_Str"").length == 0 || !((SubdividedEdgeBigItem)previewModel.getItems(""String_Node_Str"")[0]).isReady()) {
    useSimpleRendererBecauseOtherAreEmpty=true;
  }
}","@Override public void preProcess(PreviewModel previewModel){
  alpha=(float)previewModel.getProperties().getDoubleValue(PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY);
  intAlpha=(int)(255 * alpha);
  forceAlpha=(boolean)previewModel.getProperties().getBooleanValue(PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY_FORCE);
  thickness=(float)previewModel.getProperties().getDoubleValue(PreviewProperty.EDGE_LAYOUT_EDGE_THICKNESS);
  originalColor=previewModel.getProperties().getColorValue(PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR);
  useSimpleRendererBecauseOtherAreEmpty=false;
  if (previewModel.getItems(""String_Node_Str"") == null || previewModel.getItems(""String_Node_Str"").length == 0 || !((SubdividedEdgeBigItem)previewModel.getItems(""String_Node_Str"")[0]).isReady()) {
    useSimpleRendererBecauseOtherAreEmpty=true;
  }
}",0.8986842105263158
189771,"public DefaultPreset(){
  super(NbBundle.getMessage(DefaultPreset.class,""String_Node_Str""));
  properties.put(PreviewProperty.ARROW_SIZE,3f);
  properties.put(PreviewProperty.BACKGROUND_COLOR,Color.WHITE);
  properties.put(PreviewProperty.EDGE_COLOR,new EdgeColor(EdgeColor.Mode.MIXED));
  properties.put(PreviewProperty.EDGE_CURVED,true);
  properties.put(PreviewProperty.EDGE_RESCALE_WEIGHT,Boolean.FALSE);
  properties.put(PreviewProperty.EDGE_OPACITY,100f);
  properties.put(PreviewProperty.EDGE_RADIUS,0f);
  properties.put(PreviewProperty.EDGE_THICKNESS,1f);
  properties.put(PreviewProperty.EDGE_LABEL_COLOR,new DependantOriginalColor(DependantOriginalColor.Mode.ORIGINAL));
  properties.put(PreviewProperty.EDGE_LABEL_FONT,new Font(""String_Node_Str"",Font.PLAIN,10));
  properties.put(PreviewProperty.EDGE_LABEL_MAX_CHAR,30);
  properties.put(PreviewProperty.EDGE_LABEL_OUTLINE_COLOR,new DependantColor(Color.WHITE));
  properties.put(PreviewProperty.EDGE_LABEL_OUTLINE_OPACITY,80f);
  properties.put(PreviewProperty.EDGE_LABEL_OUTLINE_SIZE,0f);
  properties.put(PreviewProperty.EDGE_LABEL_SHORTEN,false);
  properties.put(PreviewProperty.NODE_BORDER_COLOR,new DependantColor(Color.BLACK));
  properties.put(PreviewProperty.NODE_BORDER_WIDTH,1.0f);
  properties.put(PreviewProperty.NODE_OPACITY,100f);
  properties.put(PreviewProperty.NODE_LABEL_BOX_COLOR,new DependantColor(DependantColor.Mode.PARENT));
  properties.put(PreviewProperty.NODE_LABEL_BOX_OPACITY,100f);
  properties.put(PreviewProperty.NODE_LABEL_COLOR,new DependantOriginalColor(Color.BLACK));
  properties.put(PreviewProperty.NODE_LABEL_FONT,new Font(""String_Node_Str"",Font.PLAIN,12));
  properties.put(PreviewProperty.NODE_LABEL_MAX_CHAR,30);
  properties.put(PreviewProperty.NODE_LABEL_OUTLINE_COLOR,new DependantColor(Color.WHITE));
  properties.put(PreviewProperty.NODE_LABEL_OUTLINE_OPACITY,80f);
  properties.put(PreviewProperty.NODE_LABEL_OUTLINE_SIZE,0f);
  properties.put(PreviewProperty.NODE_LABEL_PROPORTIONAL_SIZE,true);
  properties.put(PreviewProperty.NODE_LABEL_SHORTEN,false);
  properties.put(PreviewProperty.NODE_LABEL_SHOW_BOX,false);
  properties.put(PreviewProperty.SHOW_EDGES,Boolean.TRUE);
  properties.put(PreviewProperty.SHOW_EDGE_LABELS,Boolean.FALSE);
  properties.put(PreviewProperty.SHOW_NODE_LABELS,Boolean.FALSE);
  properties.put(PreviewProperty.EDGE_LAYOUT_USE_RENDERER,PreviewProperty.RendererModes.SimpleRenderer);
  properties.put(PreviewProperty.EDGE_LAYOUT_EDGE_THINKNESS,0.5);
  properties.put(PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY,0.1);
  properties.put(PreviewProperty.EDGE_LAYOUT_REFRESH_RATE,1);
  properties.put(PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR,new Color(0f,0f,0.5f));
  properties.put(PreviewProperty.EDGE_LAYOUT_USE_PERCENTAGE_INSTEAD_OF_LINEAR_SCALE,true);
  properties.put(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS,false);
}","public DefaultPreset(){
  super(NbBundle.getMessage(DefaultPreset.class,""String_Node_Str""));
  properties.put(PreviewProperty.ARROW_SIZE,3f);
  properties.put(PreviewProperty.BACKGROUND_COLOR,Color.WHITE);
  properties.put(PreviewProperty.EDGE_COLOR,new EdgeColor(EdgeColor.Mode.MIXED));
  properties.put(PreviewProperty.EDGE_CURVED,true);
  properties.put(PreviewProperty.EDGE_RESCALE_WEIGHT,Boolean.FALSE);
  properties.put(PreviewProperty.EDGE_OPACITY,100f);
  properties.put(PreviewProperty.EDGE_RADIUS,0f);
  properties.put(PreviewProperty.EDGE_THICKNESS,1f);
  properties.put(PreviewProperty.EDGE_LABEL_COLOR,new DependantOriginalColor(DependantOriginalColor.Mode.ORIGINAL));
  properties.put(PreviewProperty.EDGE_LABEL_FONT,new Font(""String_Node_Str"",Font.PLAIN,10));
  properties.put(PreviewProperty.EDGE_LABEL_MAX_CHAR,30);
  properties.put(PreviewProperty.EDGE_LABEL_OUTLINE_COLOR,new DependantColor(Color.WHITE));
  properties.put(PreviewProperty.EDGE_LABEL_OUTLINE_OPACITY,80f);
  properties.put(PreviewProperty.EDGE_LABEL_OUTLINE_SIZE,0f);
  properties.put(PreviewProperty.EDGE_LABEL_SHORTEN,false);
  properties.put(PreviewProperty.NODE_BORDER_COLOR,new DependantColor(Color.BLACK));
  properties.put(PreviewProperty.NODE_BORDER_WIDTH,1.0f);
  properties.put(PreviewProperty.NODE_OPACITY,100f);
  properties.put(PreviewProperty.NODE_LABEL_BOX_COLOR,new DependantColor(DependantColor.Mode.PARENT));
  properties.put(PreviewProperty.NODE_LABEL_BOX_OPACITY,100f);
  properties.put(PreviewProperty.NODE_LABEL_COLOR,new DependantOriginalColor(Color.BLACK));
  properties.put(PreviewProperty.NODE_LABEL_FONT,new Font(""String_Node_Str"",Font.PLAIN,12));
  properties.put(PreviewProperty.NODE_LABEL_MAX_CHAR,30);
  properties.put(PreviewProperty.NODE_LABEL_OUTLINE_COLOR,new DependantColor(Color.WHITE));
  properties.put(PreviewProperty.NODE_LABEL_OUTLINE_OPACITY,80f);
  properties.put(PreviewProperty.NODE_LABEL_OUTLINE_SIZE,0f);
  properties.put(PreviewProperty.NODE_LABEL_PROPORTIONAL_SIZE,true);
  properties.put(PreviewProperty.NODE_LABEL_SHORTEN,false);
  properties.put(PreviewProperty.NODE_LABEL_SHOW_BOX,false);
  properties.put(PreviewProperty.SHOW_EDGES,Boolean.TRUE);
  properties.put(PreviewProperty.SHOW_EDGE_LABELS,Boolean.FALSE);
  properties.put(PreviewProperty.SHOW_NODE_LABELS,Boolean.FALSE);
  properties.put(PreviewProperty.EDGE_LAYOUT_USE_RENDERER,PreviewProperty.RendererModes.SimpleRenderer);
  properties.put(PreviewProperty.EDGE_LAYOUT_EDGE_THICKNESS,0.5);
  properties.put(PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY,0.1);
  properties.put(PreviewProperty.EDGE_LAYOUT_EDGE_TRANSPARENCY_FORCE,false);
  properties.put(PreviewProperty.EDGE_LAYOUT_REFRESH_RATE,1);
  properties.put(PreviewProperty.EDGE_LAYOUT_SIMPLE_RENDERER_COLOR,new Color(0f,0f,0.5f));
  properties.put(PreviewProperty.EDGE_LAYOUT_USE_PERCENTAGE_INSTEAD_OF_LINEAR_SCALE,true);
  properties.put(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS,false);
}",0.9864517235465616
189772,"@Override public void modifyAlgo(){
  double maxIntensity=0;
  ArrayList<Double> intensity=new ArrayList<Double>();
  ArrayList intensities=new ArrayList();
  for (  Edge edge : graphModel.getGraph().getEdges()) {
    if (cancel) {
      break;
    }
    FDEBLayoutData data=edge.getEdgeData().getLayoutData();
    intensity.add(data.intensity + 1);
    if (Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getBooleanValue(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS)) {
      for (      double x : data.intensities) {
        intensities.add(x);
      }
    }
    maxIntensity=Math.max(maxIntensity,data.intensity + 1);
  }
  Collections.sort(intensity);
  double threshold=intensity.get((int)Math.min(intensity.size() - 1,intensity.size() * Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getDoubleValue(""String_Node_Str"")));
  int x=intensity.size();
  System.err.println(""String_Node_Str"" + intensity.get(x / 5) + ""String_Node_Str""+ intensity.get(x * 2 / 5)+ ""String_Node_Str""+ intensity.get(x * 3 / 5)+ ""String_Node_Str""+ intensity.get(x * 4 / 5));
  System.err.println(""String_Node_Str"" + threshold);
  for (  Edge edge : graphModel.getGraph().getEdges()) {
    if (cancel) {
      break;
    }
    FDEBLayoutData data=edge.getEdgeData().getLayoutData();
    data.updateColor(intensity);
    if (Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getBooleanValue(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS)) {
      data.updateColors(intensities);
    }
  }
  System.err.println(""String_Node_Str"");
}","@Override public void modifyAlgo(){
  double maxIntensity=0;
  ArrayList<Double> intensity=new ArrayList<Double>();
  ArrayList intensities=new ArrayList();
  for (  Edge edge : graphModel.getGraph().getEdges()) {
    if (cancel) {
      break;
    }
    FDEBLayoutData data=edge.getEdgeData().getLayoutData();
    intensity.add(data.intensity + 1);
    if (Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getBooleanValue(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS)) {
      for (      double x : data.intensities) {
        intensities.add(x);
      }
    }
    maxIntensity=Math.max(maxIntensity,data.intensity + 1);
  }
  if (Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getBooleanValue(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS)) {
    Collections.sort(intensities);
  }
  Collections.sort(intensity);
  double threshold=intensity.get((int)Math.min(intensity.size() - 1,intensity.size() * Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getDoubleValue(""String_Node_Str"")));
  int x=intensity.size();
  System.err.println(""String_Node_Str"" + intensity.get(x / 5) + ""String_Node_Str""+ intensity.get(x * 2 / 5)+ ""String_Node_Str""+ intensity.get(x * 3 / 5)+ ""String_Node_Str""+ intensity.get(x * 4 / 5));
  System.err.println(""String_Node_Str"" + threshold);
  for (  Edge edge : graphModel.getGraph().getEdges()) {
    if (cancel) {
      break;
    }
    FDEBLayoutData data=edge.getEdgeData().getLayoutData();
    data.updateColor(intensity);
    if (Lookup.getDefault().lookup(PreviewController.class).getModel().getProperties().getBooleanValue(PreviewProperty.EDGE_LAYOUT_PRECALCULATE_POINTS)) {
      data.updateColors(intensities);
    }
  }
  System.err.println(""String_Node_Str"");
}",0.5111764705882353
189773,"@Override public void initAlgo(){
  for (  Edge edge : graphModel.getGraph().getEdges()) {
    edge.getEdgeData().setLayoutData(new FDEBLayoutData(edge.getSource().getNodeData().x(),edge.getSource().getNodeData().y(),edge.getTarget().getNodeData().x(),edge.getTarget().getNodeData().y()));
  }
  cycle=1;
  setConverged(false);
  stepSize=parameters.getStepSize();
  sprintConstant=parameters.getSprintConstant();
  iterationsPerCycle=parameters.getIterationsPerCycle();
}","@Override public void initAlgo(){
  for (  Edge edge : graphModel.getGraph().getEdges()) {
    edge.getEdgeData().setLayoutData(new FDEBLayoutData(edge.getSource().getNodeData().x(),edge.getSource().getNodeData().y(),edge.getTarget().getNodeData().x(),edge.getTarget().getNodeData().y()));
  }
  cycle=1;
  setConverged(false);
  stepSize=parameters.getStepSize();
  sprintConstant=parameters.getSprintConstant();
  iterationsPerCycle=parameters.getIterationsPerCycle();
  compatibilityThreshold=parameters.getCompatibilityThreshold();
  System.out.println(""String_Node_Str"" + sprintConstant);
}",0.8847235238987816
189774,"@Override public void goAlgo(){
  for (int step=0; step < stepSize; step++) {
    for (    Edge edge : graphModel.getGraph().getEdges()) {
      ((FDEBLayoutData)edge.getEdgeData().getLayoutData()).newSubdivisionPoints=Arrays.copyOf(((FDEBLayoutData)edge.getEdgeData().getLayoutData()).subdivisionPoints,((FDEBLayoutData)edge.getEdgeData().getLayoutData()).subdivisionPoints.length);
    }
    for (    Edge edge : graphModel.getGraph().getEdges()) {
      if (edge.isSelfLoop()) {
        continue;
      }
      FDEBLayoutData data=edge.getEdgeData().getLayoutData();
      double k=sprintConstant / (data.length * (data.subdivisionPoints.length - 1));
      for (int i=1; i < data.subdivisionPoints.length - 1; i++) {
        double Fsi_x=(data.subdivisionPoints[i - 1].x - data.subdivisionPoints[i].x) + (data.subdivisionPoints[i + 1].x - data.subdivisionPoints[i].x);
        double Fsi_y=(data.subdivisionPoints[i - 1].y - data.subdivisionPoints[i].y) + (data.subdivisionPoints[i + 1].y - data.subdivisionPoints[i].y);
        if (Math.abs(k) <= 1) {
          Fsi_x*=k;
          Fsi_y*=k;
        }
        double Fei_x=0;
        double Fei_y=0;
        for (        Edge moveEdge : graphModel.getGraph().getEdges()) {
          if (moveEdge.isSelfLoop()) {
            continue;
          }
          FDEBLayoutData moveData=moveEdge.getEdgeData().getLayoutData();
          double v_x=moveData.subdivisionPoints[i].x - data.subdivisionPoints[i].x;
          double v_y=moveData.subdivisionPoints[i].y - data.subdivisionPoints[i].y;
          if (Math.abs(v_x) > EPS || Math.abs(v_y) > EPS) {
            double len_sq=v_x * v_x + v_y * v_y;
            double m=(1.0 / Math.sqrt(len_sq));
            v_x*=m;
            v_y*=m;
            Fei_x+=v_x;
            Fei_y+=v_y;
          }
        }
        System.err.println(""String_Node_Str"" + (Fei_x + Fsi_x) + ""String_Node_Str""+ (Fei_y + Fsi_y)+ ""String_Node_Str""+ stepSize);
        data.newSubdivisionPoints[i]=new Point.Double(data.subdivisionPoints[i].x + stepSize * (Fei_x + Fsi_x),data.subdivisionPoints[i].y + stepSize * (Fei_y + Fsi_y));
      }
    }
    for (    Edge edge : graphModel.getGraph().getEdges()) {
      ((FDEBLayoutData)edge.getEdgeData().getLayoutData()).subdivisionPoints=((FDEBLayoutData)edge.getEdgeData().getLayoutData()).newSubdivisionPoints;
      ((FDEBLayoutData)edge.getEdgeData().getLayoutData()).newSubdivisionPoints=null;
    }
  }
  if (cycle == parameters.getNumCycles()) {
    setConverged(true);
  }
 else {
    prepareForTheNextStep();
  }
}","@Override public void goAlgo(){
  long totalEdges=0;
  long passedEdges=0;
  for (int step=0; step < iterationsPerCycle; step++) {
    for (    Edge edge : graphModel.getGraph().getEdges()) {
      ((FDEBLayoutData)edge.getEdgeData().getLayoutData()).newSubdivisionPoints=Arrays.copyOf(((FDEBLayoutData)edge.getEdgeData().getLayoutData()).subdivisionPoints,((FDEBLayoutData)edge.getEdgeData().getLayoutData()).subdivisionPoints.length);
    }
    for (    Edge edge : graphModel.getGraph().getEdges()) {
      if (edge.isSelfLoop()) {
        continue;
      }
      FDEBLayoutData data=edge.getEdgeData().getLayoutData();
      double k=sprintConstant / (data.length * (data.subdivisionPoints.length - 1));
      for (int i=1; i < data.subdivisionPoints.length - 1; i++) {
        double Fsi_x=(data.subdivisionPoints[i - 1].x - data.subdivisionPoints[i].x) + (data.subdivisionPoints[i + 1].x - data.subdivisionPoints[i].x);
        double Fsi_y=(data.subdivisionPoints[i - 1].y - data.subdivisionPoints[i].y) + (data.subdivisionPoints[i + 1].y - data.subdivisionPoints[i].y);
        if (Math.abs(k) <= 1) {
          Fsi_x*=k;
          Fsi_y*=k;
        }
        double Fei_x=0;
        double Fei_y=0;
        for (        Edge moveEdge : graphModel.getGraph().getEdges()) {
          if (moveEdge.isSelfLoop()) {
            continue;
          }
          totalEdges++;
          if (calculateCompatibility(edge,moveEdge) < EPS) {
            continue;
          }
          passedEdges++;
          FDEBLayoutData moveData=moveEdge.getEdgeData().getLayoutData();
          double v_x=moveData.subdivisionPoints[i].x - data.subdivisionPoints[i].x;
          double v_y=moveData.subdivisionPoints[i].y - data.subdivisionPoints[i].y;
          if (Math.abs(v_x) > EPS || Math.abs(v_y) > EPS) {
            double len_sq=v_x * v_x + v_y * v_y;
            double m=(calculateCompatibility(edge,moveEdge) / Math.sqrt(len_sq));
            v_x*=m;
            v_y*=m;
            Fei_x+=v_x;
            Fei_y+=v_y;
          }
        }
        data.newSubdivisionPoints[i]=new Point.Double(data.subdivisionPoints[i].x + stepSize * (Fei_x + Fsi_x),data.subdivisionPoints[i].y + stepSize * (Fei_y + Fsi_y));
      }
    }
    for (    Edge edge : graphModel.getGraph().getEdges()) {
      ((FDEBLayoutData)edge.getEdgeData().getLayoutData()).subdivisionPoints=((FDEBLayoutData)edge.getEdgeData().getLayoutData()).newSubdivisionPoints;
      ((FDEBLayoutData)edge.getEdgeData().getLayoutData()).newSubdivisionPoints=null;
    }
  }
  System.err.println(""String_Node_Str"" + totalEdges + ""String_Node_Str""+ passedEdges+ ""String_Node_Str""+ ((double)passedEdges) / totalEdges);
  if (cycle == parameters.getNumCycles()) {
    setConverged(true);
  }
 else {
    prepareForTheNextStep();
  }
}",0.7463469464218808
189775,"void setParametersToDefault(){
  numCycles=5;
  stepSize=1.0;
  iterationsPerCycle=100;
  sprintConstant=0.5;
  stepDampingFactor=0.5;
}","void setParametersToDefault(){
  numCycles=5;
  stepSize=1;
  iterationsPerCycle=10;
  sprintConstant=0.5;
  stepDampingFactor=0.5;
  compatibilityThreshold=0.6;
}",0.8896321070234113
189776,"public void renderStraightEdge(float x1,float y1,float x2,float y2,RenderTarget renderTarget){
  int thickness=2;
  Color color=new Color((float)Math.random(),(float)Math.random(),(float)Math.random());
  Float targetRadius=2f;
  if (targetRadius != null && targetRadius < 0) {
    PVector direction=new PVector(x2,y2);
    direction.sub(new PVector(x1,y1));
    direction.normalize();
    direction=new PVector(direction.x,direction.y);
    direction.mult(targetRadius);
    direction.add(new PVector(x2,y2));
    x2=direction.x;
    y2=direction.y;
  }
  Float sourceRadius=2f;
  if (sourceRadius != null && sourceRadius < 0) {
    PVector direction=new PVector(x1,y1);
    direction.sub(new PVector(x2,y2));
    direction.normalize();
    direction=new PVector(direction.x,direction.y);
    direction.mult(sourceRadius);
    direction.add(new PVector(x1,y1));
    x1=direction.x;
    y1=direction.y;
  }
  PDFTarget pdfTarget=(PDFTarget)renderTarget;
  PdfContentByte cb=pdfTarget.getContentByte();
  cb.moveTo(x1,y1);
  cb.lineTo(x2,y2);
  cb.setRGBColorStroke(color.getRed(),color.getGreen(),color.getBlue());
  cb.setLineWidth(thickness);
  if (color.getAlpha() < 255) {
    cb.saveState();
    float alpha=color.getAlpha() / 255f;
    PdfGState gState=new PdfGState();
    gState.setStrokeOpacity(alpha);
    cb.setGState(gState);
  }
  cb.stroke();
  if (color.getAlpha() < 255) {
    cb.restoreState();
  }
}","public void renderStraightEdge(float x1,float y1,float x2,float y2,RenderTarget renderTarget){
  int thickness=1;
  Color color=new Color((float)Math.random(),(float)Math.random(),(float)Math.random());
  Float targetRadius=1f;
  Float sourceRadius=1f;
  PDFTarget pdfTarget=(PDFTarget)renderTarget;
  PdfContentByte cb=pdfTarget.getContentByte();
  cb.moveTo(x1,y1);
  cb.lineTo(x2,y2);
  cb.setRGBColorStroke(color.getRed(),color.getGreen(),color.getBlue());
  cb.setLineWidth(thickness);
  if (color.getAlpha() < 255) {
    cb.saveState();
    float alpha=color.getAlpha() / 255f;
    PdfGState gState=new PdfGState();
    gState.setStrokeOpacity(alpha);
    cb.setGState(gState);
  }
  cb.stroke();
  if (color.getAlpha() < 255) {
    cb.restoreState();
  }
}",0.6807339449541284
189777,"@Override public void render(Item item,RenderTarget target,PreviewProperties properties){
  FDEBLayoutData data=(FDEBLayoutData)item.getSource();
  System.err.println(""String_Node_Str"" + data.subdivisionPoints.length + ""String_Node_Str"");
  for (int i=0; i < data.subdivisionPoints.length - 1; i++) {
    float x1=(float)data.subdivisionPoints[i].x;
    float y1=(float)data.subdivisionPoints[i].y;
    float x2=(float)data.subdivisionPoints[i + 1].x;
    float y2=(float)data.subdivisionPoints[i + 1].y;
    renderStraightEdge(x1,y1,x2,y2,target);
  }
  double x1=data.subdivisionPoints[data.subdivisionPoints.length - 1].x;
  double y1=data.subdivisionPoints[data.subdivisionPoints.length - 1].y;
}","@Override public void render(Item item,RenderTarget target,PreviewProperties properties){
  FDEBLayoutData data=(FDEBLayoutData)item.getSource();
  for (int i=0; i < data.subdivisionPoints.length - 1; i++) {
    float x1=(float)data.subdivisionPoints[i].x;
    float y1=(float)data.subdivisionPoints[i].y;
    float x2=(float)data.subdivisionPoints[i + 1].x;
    float y2=(float)data.subdivisionPoints[i + 1].y;
    renderStraightEdge(x1,y1,x2,y2,target);
  }
  double x1=data.subdivisionPoints[data.subdivisionPoints.length - 1].x;
  double y1=data.subdivisionPoints[data.subdivisionPoints.length - 1].y;
}",0.9288446824789596
189778,"public static void run(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.newProject();
  Workspace workspace=pc.getCurrentWorkspace();
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  PreviewModel model=Lookup.getDefault().lookup(PreviewController.class).getModel();
  ImportController importController=Lookup.getDefault().lookup(ImportController.class);
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  RankingController rankingController=Lookup.getDefault().lookup(RankingController.class);
  Container container;
  try {
    File file=new File(""String_Node_Str"");
    container=importController.importFile(file);
    container.getLoader().setEdgeDefault(EdgeDefault.DIRECTED);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return;
  }
  importController.process(container,new DefaultProcessor(),workspace);
  importController.process(container,new DefaultProcessor(),workspace);
  DirectedGraph graph=graphModel.getDirectedGraph();
  System.out.println(""String_Node_Str"" + graph.getNodeCount());
  System.out.println(""String_Node_Str"" + graph.getEdgeCount());
  FDEBBundler layout=new FDEBBundler(null,new FDEBBundlerParameters());
  layout.setGraphModel(graphModel);
  layout.initAlgo();
  layout.resetPropertiesValues();
  while (!layout.isConverged()) {
    layout.goAlgo();
  }
  layout.endAlgo();
  PreviewController previewController=Lookup.getDefault().lookup(PreviewController.class);
  PreviewModel previewModel=previewController.getModel();
  ManagedRenderer[] managedRenderers={new ManagedRenderer(new FDEBRenderer(),true),new ManagedRenderer(new NodeRenderer(),true),new ManagedRenderer(new EdgeRenderer(),false)};
  previewModel.setManagedRenderers(managedRenderers);
  ExportController ec=Lookup.getDefault().lookup(ExportController.class);
  try {
    ec.exportFile(new File(""String_Node_Str""));
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return;
  }
  PDFExporter pdfExporter=(PDFExporter)ec.getExporter(""String_Node_Str"");
  pdfExporter.setPageSize(PageSize.A0);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ec.exportStream(baos,pdfExporter);
}","public static void run(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.newProject();
  Workspace workspace=pc.getCurrentWorkspace();
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  PreviewModel model=Lookup.getDefault().lookup(PreviewController.class).getModel();
  ImportController importController=Lookup.getDefault().lookup(ImportController.class);
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  RankingController rankingController=Lookup.getDefault().lookup(RankingController.class);
  Container container;
  try {
    File file=new File(""String_Node_Str"");
    container=importController.importFile(file);
    container.getLoader().setEdgeDefault(EdgeDefault.DIRECTED);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return;
  }
  importController.process(container,new DefaultProcessor(),workspace);
  importController.process(container,new DefaultProcessor(),workspace);
  DirectedGraph graph=graphModel.getDirectedGraph();
  System.out.println(""String_Node_Str"" + graph.getNodeCount());
  System.out.println(""String_Node_Str"" + graph.getEdgeCount());
  FDEBBundler layout=new FDEBBundler(null,new FDEBBundlerParameters());
  layout.setGraphModel(graphModel);
  layout.initAlgo();
  layout.resetPropertiesValues();
  PreviewController previewController=Lookup.getDefault().lookup(PreviewController.class);
  PreviewModel previewModel=previewController.getModel();
  ManagedRenderer[] managedRenderers={new ManagedRenderer(new FDEBRenderer(),true),new ManagedRenderer(new NodeRenderer(),true),new ManagedRenderer(new EdgeRenderer(),false)};
  previewModel.setManagedRenderers(managedRenderers);
  int i=0;
  ExportController ec=Lookup.getDefault().lookup(ExportController.class);
  try {
    ec.exportFile(new File(""String_Node_Str""));
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  while (!layout.isConverged()) {
    i++;
    layout.goAlgo();
    try {
      ec.exportFile(new File(""String_Node_Str"" + i + ""String_Node_Str""));
    }
 catch (    IOException ex) {
      ex.printStackTrace();
      return;
    }
  }
  PDFExporter pdfExporter=(PDFExporter)ec.getExporter(""String_Node_Str"");
  pdfExporter.setPageSize(PageSize.A0);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ec.exportStream(baos,pdfExporter);
}",0.9264644786040714
189779,"@Override public void selectColumn(final AttributeColumn column){
  if (model != null) {
    if (!(model.getChart() == null && column == null) || (model.getChart() != null && !model.getChart().getColumn().equals(column))) {
      if (column != null && !attributeModel.getGraphTable().hasColumn(column.getId())) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      Thread thread=new Thread(new Runnable(){
        @Override public void run(){
          TimelineChart chart=null;
          Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
          if (column != null) {
            DynamicType type=(DynamicType)graph.getAttributes().getValue(column.getIndex());
            if (type != null) {
              List<Interval> intervals=type.getIntervals(model.getCustomMin(),model.getCustomMax());
              Number[] xs=new Number[intervals.size() * 2];
              Number[] ys=new Number[intervals.size() * 2];
              int i=0;
              for (              Interval interval : intervals) {
                Number x=(Double)interval.getLow();
                Number y=(Number)interval.getValue();
                xs[i]=x;
                ys[i]=y;
                i++;
                xs[i]=(Double)interval.getHigh();
                ys[i]=y;
                i++;
              }
              if (xs.length > 0) {
                chart=new TimelineChartImpl(column,xs,ys);
              }
            }
          }
          model.setChart(chart);
          fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.CHART,model,chart));
        }
      }
,""String_Node_Str"");
      thread.start();
    }
  }
}","@Override public void selectColumn(final AttributeColumn column){
  if (model != null) {
    if (!(model.getChart() == null && column == null) || (model.getChart() != null && !model.getChart().getColumn().equals(column))) {
      if (column != null && !attributeModel.getGraphTable().hasColumn(column.getId())) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      Thread thread=new Thread(new Runnable(){
        @Override public void run(){
          TimelineChart chart=null;
          Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
          if (column != null) {
            DynamicType type=(DynamicType)graph.getAttributes().getValue(column.getIndex());
            if (type != null) {
              List<Interval> intervals=type.getIntervals(model.getCustomMin(),model.getCustomMax());
              Number[] xs=new Number[intervals.size() * 2];
              Number[] ys=new Number[intervals.size() * 2];
              int i=0;
              Interval interval;
              for (int j=0; j < intervals.size(); j++) {
                interval=intervals.get(j);
                Number x=(Double)interval.getLow();
                Number y=(Number)interval.getValue();
                xs[i]=x;
                ys[i]=y;
                i++;
                if (j != intervals.size() - 1 && intervals.get(j + 1).getLow() < interval.getHigh()) {
                  xs[i]=(Double)intervals.get(j + 1).getLow();
                }
 else {
                  xs[i]=(Double)interval.getHigh();
                }
                ys[i]=y;
                i++;
              }
              if (xs.length > 0) {
                chart=new TimelineChartImpl(column,xs,ys);
              }
            }
          }
          model.setChart(chart);
          fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.CHART,model,chart));
        }
      }
,""String_Node_Str"");
      thread.start();
    }
  }
}",0.7963213416283473
189780,"public void compute(){
  graph.readLock();
  Set<Node> unsettledNodes=new HashSet<Node>();
  Set<Node> settledNodes=new HashSet<Node>();
  for (  Node node : graph.getNodes()) {
    distances.put(node,Double.POSITIVE_INFINITY);
  }
  distances.put(sourceNode,0d);
  unsettledNodes.add(sourceNode);
  while (!unsettledNodes.isEmpty()) {
    Double minDistance=Double.POSITIVE_INFINITY;
    Node minDistanceNode=null;
    for (    Node k : unsettledNodes) {
      Double dist=distances.get(k);
      if (minDistanceNode == null) {
        minDistanceNode=k;
      }
 else       if (dist.compareTo(minDistance) < 0) {
        minDistance=dist;
        minDistanceNode=k;
      }
    }
    unsettledNodes.remove(minDistanceNode);
    settledNodes.add(minDistanceNode);
    for (    Edge edge : graph.getEdges(minDistanceNode)) {
      Node neighbor=graph.getOpposite(minDistanceNode,edge);
      if (!settledNodes.contains(neighbor)) {
        double dist=getShortestDistance(minDistanceNode) + edgeWeight(edge);
        if (getShortestDistance(neighbor) > dist) {
          distances.put(neighbor,dist);
          predecessors.put(neighbor,edge);
          unsettledNodes.add(neighbor);
          maxDistance=Math.max(maxDistance,dist);
        }
      }
    }
  }
  graph.readUnlock();
}","public void compute(){
  graph.readLock();
  Set<Node> unsettledNodes=new HashSet<Node>();
  Set<Node> settledNodes=new HashSet<Node>();
  for (  Node node : graph.getNodes()) {
    distances.put(node,Double.POSITIVE_INFINITY);
  }
  distances.put(sourceNode,0d);
  unsettledNodes.add(sourceNode);
  while (!unsettledNodes.isEmpty()) {
    Double minDistance=Double.POSITIVE_INFINITY;
    Node minDistanceNode=null;
    for (    Node k : unsettledNodes) {
      Double dist=distances.get(k);
      if (minDistanceNode == null) {
        minDistanceNode=k;
      }
      if (dist.compareTo(minDistance) < 0) {
        minDistance=dist;
        minDistanceNode=k;
      }
    }
    unsettledNodes.remove(minDistanceNode);
    settledNodes.add(minDistanceNode);
    for (    Edge edge : graph.getEdges(minDistanceNode)) {
      Node neighbor=graph.getOpposite(minDistanceNode,edge);
      if (!settledNodes.contains(neighbor)) {
        double dist=getShortestDistance(minDistanceNode) + edgeWeight(edge);
        if (getShortestDistance(neighbor) > dist) {
          distances.put(neighbor,dist);
          predecessors.put(neighbor,edge);
          unsettledNodes.add(neighbor);
          maxDistance=Math.max(maxDistance,dist);
        }
      }
    }
  }
  graph.readUnlock();
}",0.997659906396256
189781,"public void export(Graph graph,String filename) throws IOException {
  if (graph.getNodeCount() <= 1)   return;
  for (  Node node : graph.getNodes()) {
    minX=Math.min((int)node.getNodeData().x(),minX);
    minY=Math.min((int)node.getNodeData().y(),minY);
    maxX=Math.max((int)node.getNodeData().x(),maxX);
    maxY=Math.max((int)node.getNodeData().y(),maxY);
  }
  int width=1024 * 4;
  int height=width * (maxY - minY) / (maxX - minX);
  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
  points=new float[image.getWidth()][image.getHeight()];
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      image.setRGB(i,j,Color.WHITE.getRGB());
    }
  }
  for (  Edge edge : graph.getEdges()) {
    FDEBLayoutData data=edge.getEdgeData().getLayoutData();
    for (int i=0; i < data.subdivisionPoints.length - 1; i++) {
      makeLine(data.subdivisionPoints[i].x,data.subdivisionPoints[i].y,data.subdivisionPoints[i + 1].x,data.subdivisionPoints[i + 1].y);
    }
  }
  float max=0;
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      max=Math.max(max,points[i][j]);
    }
  }
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      if (points[i][j] > 0) {
        image.setRGB(i,j,generateGradient(points[i][j] / max));
      }
    }
  }
  System.err.println(""String_Node_Str"" + ImageIO.write(image,""String_Node_Str"",new File(filename + ""String_Node_Str"")));
}","public void export(Graph graph,String filename) throws IOException {
  if (graph.getNodeCount() <= 1)   return;
  for (  Node node : graph.getNodes()) {
    minX=Math.min((int)node.getNodeData().x(),minX);
    minY=Math.min((int)node.getNodeData().y(),minY);
    maxX=Math.max((int)node.getNodeData().x(),maxX);
    maxY=Math.max((int)node.getNodeData().y(),maxY);
  }
  int width=maxX - minX;
  int height=width * (maxY - minY) / (maxX - minX);
  image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
  points=new float[image.getWidth()][image.getHeight()];
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      image.setRGB(i,j,Color.WHITE.getRGB());
    }
  }
  for (  Edge edge : graph.getEdges()) {
    FDEBLayoutData data=edge.getEdgeData().getLayoutData();
    for (int i=0; i < data.subdivisionPoints.length - 1; i++) {
      makeLine(data.subdivisionPoints[i].x,data.subdivisionPoints[i].y,data.subdivisionPoints[i + 1].x,data.subdivisionPoints[i + 1].y);
    }
  }
  float max=0;
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      max=Math.max(max,points[i][j]);
    }
  }
  for (int i=0; i < image.getWidth(); i++) {
    for (int j=0; j < image.getHeight(); j++) {
      if (points[i][j] > 0) {
        image.setRGB(i,j,generateGradient(points[i][j] / max));
      }
    }
  }
  System.err.println(""String_Node_Str"" + ImageIO.write(image,""String_Node_Str"",new File(filename + ""String_Node_Str"")));
}",0.9937231582424844
189782,"CommunityStructure(HierarchicalUndirectedGraph hgraph){
  this.graph=hgraph;
  N=hgraph.getNodeCount();
  invMap=new HashMap<Integer,Community>();
  nodeConnections=new HashMap[N];
  nodeCommunities=new Community[N];
  map=new HashMap<Node,Integer>();
  topology=new LinkedList[N];
  communities=new LinkedList<Community>();
  int index=0;
  weights=new double[N];
  for (  Node node : hgraph.getNodes()) {
    map.put(node,index);
    nodeCommunities[index]=new Community(this);
    nodeConnections[index]=new HashMap<Community,Float>();
    weights[index]=0;
    nodeCommunities[index].seed(index);
    Community hidden=new Community(structure);
    hidden.nodes.add(index);
    invMap.put(index,hidden);
    communities.add(nodeCommunities[index]);
    index++;
    if (isCanceled) {
      return;
    }
  }
  for (  Node node : hgraph.getNodes()) {
    int node_index=map.get(node);
    topology[node_index]=new LinkedList<ModEdge>();
    for (    Node neighbor : hgraph.getNeighbors(node)) {
      if (node == neighbor) {
        continue;
      }
      int neighbor_index=map.get(neighbor);
      float weight=1;
      if (useWeight) {
        weight=hgraph.getEdge(node,neighbor).getWeight();
      }
      weights[node_index]+=weight;
      Modularity.ModEdge me=new ModEdge(node_index,neighbor_index,weight);
      topology[node_index].add(me);
      Community adjCom=nodeCommunities[neighbor_index];
      nodeConnections[node_index].put(adjCom,weight);
      nodeCommunities[node_index].connections.put(adjCom,weight);
      nodeConnections[neighbor_index].put(nodeCommunities[node_index],weight);
      nodeCommunities[neighbor_index].connections.put(nodeCommunities[node_index],weight);
      graphWeightSum+=weight;
    }
    if (isCanceled) {
      return;
    }
  }
  graphWeightSum/=2.0;
}","CommunityStructure(HierarchicalUndirectedGraph hgraph){
  this.graph=hgraph;
  N=hgraph.getNodeCount();
  invMap=new HashMap<Integer,Community>();
  nodeConnectionsWeight=new HashMap[N];
  nodeConnectionsCount=new HashMap[N];
  nodeCommunities=new Community[N];
  map=new HashMap<Node,Integer>();
  topology=new LinkedList[N];
  communities=new LinkedList<Community>();
  int index=0;
  weights=new double[N];
  for (  Node node : hgraph.getNodes()) {
    map.put(node,index);
    nodeCommunities[index]=new Community(this);
    nodeConnectionsWeight[index]=new HashMap<Community,Float>();
    nodeConnectionsCount[index]=new HashMap<Community,Integer>();
    weights[index]=0;
    nodeCommunities[index].seed(index);
    Community hidden=new Community(structure);
    hidden.nodes.add(index);
    invMap.put(index,hidden);
    communities.add(nodeCommunities[index]);
    index++;
    if (isCanceled) {
      return;
    }
  }
  for (  Node node : hgraph.getNodes()) {
    int node_index=map.get(node);
    topology[node_index]=new LinkedList<ModEdge>();
    for (    Node neighbor : hgraph.getNeighbors(node)) {
      if (node == neighbor) {
        continue;
      }
      int neighbor_index=map.get(neighbor);
      float weight=1;
      if (useWeight) {
        weight=hgraph.getEdge(node,neighbor).getWeight();
      }
      weights[node_index]+=weight;
      Modularity.ModEdge me=new ModEdge(node_index,neighbor_index,weight);
      topology[node_index].add(me);
      Community adjCom=nodeCommunities[neighbor_index];
      nodeConnectionsWeight[node_index].put(adjCom,weight);
      nodeConnectionsCount[node_index].put(adjCom,1);
      nodeCommunities[node_index].connectionsWeight.put(adjCom,weight);
      nodeCommunities[node_index].connectionsCount.put(adjCom,1);
      nodeConnectionsWeight[neighbor_index].put(nodeCommunities[node_index],weight);
      nodeConnectionsCount[neighbor_index].put(nodeCommunities[node_index],1);
      nodeCommunities[neighbor_index].connectionsWeight.put(nodeCommunities[node_index],weight);
      nodeCommunities[neighbor_index].connectionsCount.put(nodeCommunities[node_index],1);
      graphWeightSum+=weight;
    }
    if (isCanceled) {
      return;
    }
  }
  graphWeightSum/=2.0;
}",0.8478852337373237
189783,"private void addNodeTo(int node,Community to){
  to.add(new Integer(node));
  nodeCommunities[node]=to;
  for (  ModEdge e : topology[node]) {
    int neighbor=e.target;
    Float neighEdgesTo=nodeConnections[neighbor].get(to);
    if (neighEdgesTo == null) {
      nodeConnections[neighbor].put(to,e.weight);
    }
 else {
      nodeConnections[neighbor].put(to,neighEdgesTo + e.weight);
    }
    Modularity.Community adjCom=nodeCommunities[neighbor];
    Float oEdgesto=adjCom.connections.get(to);
    if (oEdgesto == null) {
      adjCom.connections.put(to,e.weight);
    }
 else {
      adjCom.connections.put(to,oEdgesto + e.weight);
    }
    Float nodeEdgesTo=nodeConnections[node].get(adjCom);
    if (nodeEdgesTo == null) {
      nodeConnections[node].put(adjCom,e.weight);
    }
 else {
      nodeConnections[node].put(adjCom,nodeEdgesTo + e.weight);
    }
    if (to != adjCom) {
      Float comEdgesto=to.connections.get(adjCom);
      if (comEdgesto == null) {
        to.connections.put(adjCom,e.weight);
      }
 else {
        to.connections.put(adjCom,comEdgesto + e.weight);
      }
    }
  }
}","private void addNodeTo(int node,Community to){
  to.add(new Integer(node));
  nodeCommunities[node]=to;
  for (  ModEdge e : topology[node]) {
    int neighbor=e.target;
    Float neighEdgesTo=nodeConnectionsWeight[neighbor].get(to);
    if (neighEdgesTo == null) {
      nodeConnectionsWeight[neighbor].put(to,e.weight);
    }
 else {
      nodeConnectionsWeight[neighbor].put(to,neighEdgesTo + e.weight);
    }
    Integer neighCountEdgesTo=nodeConnectionsCount[neighbor].get(to);
    if (neighCountEdgesTo == null) {
      nodeConnectionsCount[neighbor].put(to,1);
    }
 else {
      nodeConnectionsCount[neighbor].put(to,neighCountEdgesTo + 1);
    }
    Modularity.Community adjCom=nodeCommunities[neighbor];
    Float wEdgesto=adjCom.connectionsWeight.get(to);
    if (wEdgesto == null) {
      adjCom.connectionsWeight.put(to,e.weight);
    }
 else {
      adjCom.connectionsWeight.put(to,wEdgesto + e.weight);
    }
    Integer cEdgesto=adjCom.connectionsCount.get(to);
    if (cEdgesto == null) {
      adjCom.connectionsCount.put(to,1);
    }
 else {
      adjCom.connectionsCount.put(to,cEdgesto + 1);
    }
    Float nodeEdgesTo=nodeConnectionsWeight[node].get(adjCom);
    if (nodeEdgesTo == null) {
      nodeConnectionsWeight[node].put(adjCom,e.weight);
    }
 else {
      nodeConnectionsWeight[node].put(adjCom,nodeEdgesTo + e.weight);
    }
    Integer nodeCountEdgesTo=nodeConnectionsCount[node].get(adjCom);
    if (nodeCountEdgesTo == null) {
      nodeConnectionsCount[node].put(adjCom,1);
    }
 else {
      nodeConnectionsCount[node].put(adjCom,nodeCountEdgesTo + 1);
    }
    if (to != adjCom) {
      Float comEdgesto=to.connectionsWeight.get(adjCom);
      if (comEdgesto == null) {
        to.connectionsWeight.put(adjCom,e.weight);
      }
 else {
        to.connectionsWeight.put(adjCom,comEdgesto + e.weight);
      }
      Integer comCountEdgesto=to.connectionsCount.get(adjCom);
      if (comCountEdgesto == null) {
        to.connectionsCount.put(adjCom,1);
      }
 else {
        to.connectionsCount.put(adjCom,comCountEdgesto + 1);
      }
    }
  }
}",0.6666666666666666
189784,"private void zoomOut(){
  int M=communities.size();
  LinkedList<ModEdge>[] newTopology=new LinkedList[M];
  int index=0;
  nodeCommunities=new Community[M];
  nodeConnections=new HashMap[M];
  HashMap<Integer,Community> newInvMap=new HashMap<Integer,Community>();
  for (int i=0; i < communities.size(); i++) {
    Community com=communities.get(i);
    nodeConnections[index]=new HashMap<Community,Float>();
    newTopology[index]=new LinkedList<ModEdge>();
    nodeCommunities[index]=new Community(com);
    Set<Community> iter=com.connections.keySet();
    double weightSum=0;
    Community hidden=new Community(structure);
    for (    Integer nodeInt : com.nodes) {
      Community oldHidden=invMap.get(nodeInt);
      hidden.nodes.addAll(oldHidden.nodes);
    }
    newInvMap.put(index,hidden);
    for (    Modularity.Community adjCom : iter) {
      int target=communities.indexOf(adjCom);
      float weight=com.connections.get(adjCom);
      if (target == index)       weightSum+=2. * weight;
 else       weightSum+=weight;
      Modularity.ModEdge e=new Modularity.ModEdge(index,target,weight);
      System.out.println(e.source + ""String_Node_Str"" + e.target+ ""String_Node_Str""+ e.weight);
      newTopology[index].add(e);
    }
    weights[index]=weightSum;
    nodeCommunities[index].seed(index);
    index++;
  }
  communities.clear();
  for (int i=0; i < M; i++) {
    Community com=nodeCommunities[i];
    communities.add(com);
    for (    ModEdge e : newTopology[i]) {
      nodeConnections[i].put(nodeCommunities[e.target],e.weight);
      com.connections.put(nodeCommunities[e.target],e.weight);
    }
  }
  N=M;
  topology=newTopology;
  invMap=newInvMap;
}","private void zoomOut(){
  int M=communities.size();
  LinkedList<ModEdge>[] newTopology=new LinkedList[M];
  int index=0;
  nodeCommunities=new Community[M];
  nodeConnectionsWeight=new HashMap[M];
  nodeConnectionsCount=new HashMap[M];
  HashMap<Integer,Community> newInvMap=new HashMap<Integer,Community>();
  for (int i=0; i < communities.size(); i++) {
    Community com=communities.get(i);
    nodeConnectionsWeight[index]=new HashMap<Community,Float>();
    nodeConnectionsCount[index]=new HashMap<Community,Integer>();
    newTopology[index]=new LinkedList<ModEdge>();
    nodeCommunities[index]=new Community(com);
    Set<Community> iter=com.connectionsWeight.keySet();
    double weightSum=0;
    Community hidden=new Community(structure);
    for (    Integer nodeInt : com.nodes) {
      Community oldHidden=invMap.get(nodeInt);
      hidden.nodes.addAll(oldHidden.nodes);
    }
    newInvMap.put(index,hidden);
    for (    Modularity.Community adjCom : iter) {
      int target=communities.indexOf(adjCom);
      float weight=com.connectionsWeight.get(adjCom);
      if (target == index)       weightSum+=2. * weight;
 else       weightSum+=weight;
      Modularity.ModEdge e=new Modularity.ModEdge(index,target,weight);
      System.out.println(e.source + ""String_Node_Str"" + e.target+ ""String_Node_Str""+ e.weight);
      newTopology[index].add(e);
    }
    weights[index]=weightSum;
    nodeCommunities[index].seed(index);
    index++;
  }
  communities.clear();
  for (int i=0; i < M; i++) {
    Community com=nodeCommunities[i];
    communities.add(com);
    for (    ModEdge e : newTopology[i]) {
      nodeConnectionsWeight[i].put(nodeCommunities[e.target],e.weight);
      nodeConnectionsCount[i].put(nodeCommunities[e.target],1);
      com.connectionsWeight.put(nodeCommunities[e.target],e.weight);
      com.connectionsCount.put(nodeCommunities[e.target],1);
    }
  }
  N=M;
  topology=newTopology;
  invMap=newInvMap;
}",0.8912803532008831
189785,"public void execute(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  Progress.start(progress);
  Random rand=new Random();
  hgraph.readLock();
  structure=new Modularity.CommunityStructure(hgraph);
  double totalWeight=structure.graphWeightSum;
  double[] nodeDegrees=structure.weights.clone();
  if (isCanceled) {
    hgraph.readUnlockAll();
    return;
  }
  boolean someChange=true;
  while (someChange) {
    someChange=false;
    boolean localChange=true;
    while (localChange) {
      localChange=false;
      int start=0;
      if (isRandomized) {
        start=Math.abs(rand.nextInt()) % structure.N;
      }
      int step=0;
      for (int i=start; step < structure.N; i=(i + 1) % structure.N) {
        step++;
        double best=0.;
        Community bestCommunity=null;
        Community nodecom=structure.nodeCommunities[i];
        Set<Community> iter=structure.nodeConnections[i].keySet();
        for (        Community com : iter) {
          double qValue=q(i,com);
          if (qValue > best) {
            best=qValue;
            bestCommunity=com;
          }
        }
        if ((structure.nodeCommunities[i] != bestCommunity) && (bestCommunity != null)) {
          structure.moveNodeTo(i,bestCommunity);
          localChange=true;
        }
        if (isCanceled) {
          hgraph.readUnlockAll();
          return;
        }
      }
      someChange=localChange || someChange;
      if (isCanceled) {
        hgraph.readUnlockAll();
        return;
      }
    }
    if (someChange) {
      structure.zoomOut();
    }
  }
  int[] comStructure=new int[hgraph.getNodeCount()];
  int count=0;
  double[] degreeCount=new double[structure.communities.size()];
  for (  Community com : structure.communities) {
    for (    Integer node : com.nodes) {
      Community hidden=structure.invMap.get(node);
      for (      Integer nodeInt : hidden.nodes) {
        comStructure[nodeInt]=count;
      }
    }
    count++;
  }
  for (  Node node : hgraph.getNodes()) {
    int index=structure.map.get(node);
    if (useWeight) {
      degreeCount[comStructure[index]]+=nodeDegrees[index];
    }
 else {
      degreeCount[comStructure[index]]+=hgraph.getTotalDegree(node);
    }
  }
  modularity=finalQ(comStructure,degreeCount,hgraph,attributeModel,totalWeight);
  hgraph.readUnlock();
}","public void execute(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  Progress.start(progress);
  Random rand=new Random();
  hgraph.readLock();
  structure=new Modularity.CommunityStructure(hgraph);
  double totalWeight=structure.graphWeightSum;
  double[] nodeDegrees=structure.weights.clone();
  if (isCanceled) {
    hgraph.readUnlockAll();
    return;
  }
  boolean someChange=true;
  while (someChange) {
    someChange=false;
    boolean localChange=true;
    while (localChange) {
      localChange=false;
      int start=0;
      if (isRandomized) {
        start=Math.abs(rand.nextInt()) % structure.N;
      }
      int step=0;
      for (int i=start; step < structure.N; i=(i + 1) % structure.N) {
        step++;
        double best=0.;
        Community bestCommunity=null;
        Community nodecom=structure.nodeCommunities[i];
        Set<Community> iter=structure.nodeConnectionsWeight[i].keySet();
        for (        Community com : iter) {
          double qValue=q(i,com);
          if (qValue > best) {
            best=qValue;
            bestCommunity=com;
          }
        }
        if ((structure.nodeCommunities[i] != bestCommunity) && (bestCommunity != null)) {
          structure.moveNodeTo(i,bestCommunity);
          localChange=true;
        }
        if (isCanceled) {
          hgraph.readUnlockAll();
          return;
        }
      }
      someChange=localChange || someChange;
      if (isCanceled) {
        hgraph.readUnlockAll();
        return;
      }
    }
    if (someChange) {
      structure.zoomOut();
    }
  }
  int[] comStructure=new int[hgraph.getNodeCount()];
  int count=0;
  double[] degreeCount=new double[structure.communities.size()];
  for (  Community com : structure.communities) {
    for (    Integer node : com.nodes) {
      Community hidden=structure.invMap.get(node);
      for (      Integer nodeInt : hidden.nodes) {
        comStructure[nodeInt]=count;
      }
    }
    count++;
  }
  for (  Node node : hgraph.getNodes()) {
    int index=structure.map.get(node);
    if (useWeight) {
      degreeCount[comStructure[index]]+=nodeDegrees[index];
    }
 else {
      degreeCount[comStructure[index]]+=hgraph.getTotalDegree(node);
    }
  }
  modularity=finalQ(comStructure,degreeCount,hgraph,attributeModel,totalWeight);
  hgraph.readUnlock();
}",0.9987271955876114
189786,"private void removeNodeFrom(int node,Community from){
  Community community=nodeCommunities[node];
  for (  ModEdge e : topology[node]) {
    int neighbor=e.target;
    Float edgesTo=nodeConnections[neighbor].get(community);
    if (edgesTo - e.weight <= epsilon) {
      nodeConnections[neighbor].remove(community);
    }
 else {
      nodeConnections[neighbor].put(community,edgesTo - e.weight);
    }
    Modularity.Community adjCom=nodeCommunities[neighbor];
    Float oEdgesto=adjCom.connections.get(community);
    if (oEdgesto - e.weight <= epsilon) {
      adjCom.connections.remove(community);
    }
 else {
      adjCom.connections.put(community,oEdgesto - e.weight);
    }
    if (node == neighbor) {
      continue;
    }
    if (adjCom != community) {
      Float comEdgesto=community.connections.get(adjCom);
      if (comEdgesto - e.weight <= epsilon) {
        community.connections.remove(adjCom);
      }
 else {
        community.connections.put(adjCom,comEdgesto - e.weight);
      }
    }
    Float nodeEgesTo=nodeConnections[node].get(adjCom);
    if (nodeEgesTo - e.weight <= epsilon) {
      nodeConnections[node].remove(adjCom);
    }
 else {
      nodeConnections[node].put(adjCom,nodeEgesTo - e.weight);
    }
  }
  from.remove(new Integer(node));
}","private void removeNodeFrom(int node,Community from){
  Community community=nodeCommunities[node];
  for (  ModEdge e : topology[node]) {
    int neighbor=e.target;
    Float edgesTo=nodeConnectionsWeight[neighbor].get(community);
    Integer countEdgesTo=nodeConnectionsCount[neighbor].get(community);
    if (countEdgesTo - 1 == 0) {
      nodeConnectionsWeight[neighbor].remove(community);
      nodeConnectionsCount[neighbor].remove(community);
    }
 else {
      nodeConnectionsWeight[neighbor].put(community,edgesTo - e.weight);
      nodeConnectionsCount[neighbor].put(community,countEdgesTo - 1);
    }
    Modularity.Community adjCom=nodeCommunities[neighbor];
    Float oEdgesto=adjCom.connectionsWeight.get(community);
    Integer oCountEdgesto=adjCom.connectionsCount.get(community);
    if (oCountEdgesto - 1 == 0) {
      adjCom.connectionsWeight.remove(community);
      adjCom.connectionsCount.remove(community);
    }
 else {
      adjCom.connectionsWeight.put(community,oEdgesto - e.weight);
      adjCom.connectionsCount.put(community,oCountEdgesto - 1);
    }
    if (node == neighbor) {
      continue;
    }
    if (adjCom != community) {
      Float comEdgesto=community.connectionsWeight.get(adjCom);
      Integer comCountEdgesto=community.connectionsCount.get(adjCom);
      if (comCountEdgesto - 1 == 0) {
        community.connectionsWeight.remove(adjCom);
        community.connectionsCount.remove(adjCom);
      }
 else {
        community.connectionsWeight.put(adjCom,comEdgesto - e.weight);
        community.connectionsCount.put(adjCom,comCountEdgesto - 1);
      }
    }
    Float nodeEgesTo=nodeConnectionsWeight[node].get(adjCom);
    Integer nodeCountEgesTo=nodeConnectionsCount[node].get(adjCom);
    if (nodeCountEgesTo - 1 == 0) {
      nodeConnectionsWeight[node].remove(adjCom);
      nodeConnectionsCount[node].remove(adjCom);
    }
 else {
      nodeConnectionsWeight[node].put(adjCom,nodeEgesTo - e.weight);
      nodeConnectionsCount[node].put(adjCom,nodeCountEgesTo - 1);
    }
  }
  from.remove(new Integer(node));
}",0.4549536067045794
189787,"private double q(int node,Community community){
  Float edgesToFloat=structure.nodeConnections[node].get(community);
  double edgesTo=0;
  if (edgesToFloat != null) {
    edgesTo=edgesToFloat.doubleValue();
  }
  double weightSum=community.weightSum;
  double nodeWeight=structure.weights[node];
  double qValue=resolution * edgesTo - (nodeWeight * weightSum) / (2.0 * structure.graphWeightSum);
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() > 1)) {
    qValue=resolution * edgesTo - (nodeWeight * (weightSum - nodeWeight)) / (2.0 * structure.graphWeightSum);
  }
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() == 1)) {
    qValue=0.;
  }
  return qValue;
}","private double q(int node,Community community){
  Float edgesToFloat=structure.nodeConnectionsWeight[node].get(community);
  double edgesTo=0;
  if (edgesToFloat != null) {
    edgesTo=edgesToFloat.doubleValue();
  }
  double weightSum=community.weightSum;
  double nodeWeight=structure.weights[node];
  double qValue=resolution * edgesTo - (nodeWeight * weightSum) / (2.0 * structure.graphWeightSum);
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() > 1)) {
    qValue=resolution * edgesTo - (nodeWeight * (weightSum - nodeWeight)) / (2.0 * structure.graphWeightSum);
  }
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() == 1)) {
    qValue=0.;
  }
  return qValue;
}",0.9960474308300395
189788,"public Community(CommunityStructure structure){
  this.structure=structure;
  connections=new HashMap<Modularity.Community,Float>();
  nodes=new LinkedList<Integer>();
}","public Community(CommunityStructure structure){
  this.structure=structure;
  connectionsWeight=new HashMap<Modularity.Community,Float>();
  connectionsCount=new HashMap<Modularity.Community,Integer>();
  nodes=new LinkedList<Integer>();
}",0.8284313725490197
189789,"public boolean verify(){
  for (  EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
    if (edge.getWeight() <= 0f) {
      if (parameters.isRemoveEdgeWithWeightZero()) {
        String id=edge.getId();
        String sourceTargetId=edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId();
        edgeMap.remove(id);
        edgeSourceTargetMap.remove(sourceTargetId);
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",id),Level.SEVERE));
      }
    }
  }
  if (directedEdgesCount > 0 && undirectedEdgesCount == 0) {
    parameters.setEdgeDefault(EdgeDefault.DIRECTED);
  }
 else   if (directedEdgesCount == 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.UNDIRECTED);
  }
 else   if (directedEdgesCount > 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.MIXED);
  }
  for (  NodeDraftImpl node : nodeMap.values()) {
    dynamicGraph=node.getTimeInterval() != null;
    if (dynamicGraph) {
      break;
    }
  }
  if (!dynamicGraph) {
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      dynamicGraph=edge.getTimeInterval() != null;
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (!dynamicGraph) {
    for (    AttributeColumn col : attributeModel.getNodeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
    for (    AttributeColumn col : attributeModel.getEdgeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (timeIntervalMin != null || timeIntervalMax != null) {
    if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
      try {
        String message=""String_Node_Str"" + (timeIntervalMin != null ? DynamicUtilities.getXMLDateStringFromDouble(timeIntervalMin) : ""String_Node_Str"") + ""String_Node_Str"";
        message+=(timeIntervalMax != null ? DynamicUtilities.getXMLDateStringFromDouble(timeIntervalMax) : ""String_Node_Str"") + ""String_Node_Str"";
        report.log(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",message));
      }
 catch (      Exception e) {
      }
    }
 else {
      String message=""String_Node_Str"" + (timeIntervalMin != null ? timeIntervalMin.toString() : ""String_Node_Str"") + ""String_Node_Str"";
      message+=(timeIntervalMax != null ? timeIntervalMax.toString() : ""String_Node_Str"") + ""String_Node_Str"";
      report.log(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",message));
    }
  }
  if (dynamicGraph) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeFormat.toString()),Level.INFO));
  }
  if (dynamicGraph && parameters.isRemoveIntervalsOverlapping()) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      AttributeValue[] values=node.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          type=DynamicUtilities.removeOverlapping(type);
          node.getAttributeRow().setValue(val.getColumn(),type);
        }
      }
    }
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      AttributeValue[] values=edge.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          type=DynamicUtilities.removeOverlapping(type);
          edge.getAttributeRow().setValue(val.getColumn(),type);
        }
      }
    }
  }
  if (dynamicGraph && (timeIntervalMin != null || timeIntervalMax != null)) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && node.getTimeInterval() != null && node.getTimeInterval().getLow() < timeIntervalMin) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),timeIntervalMin,node.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && node.getTimeInterval() != null && node.getTimeInterval().getHigh() > timeIntervalMax) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),node.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        if (node.getTimeInterval() == null) {
          node.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
        }
      }
      AttributeValue[] values=node.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",node.getId()),Level.WARNING));
      }
    }
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && edge.getTimeInterval() != null && edge.getTimeInterval().getLow() < timeIntervalMin) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),timeIntervalMin,edge.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && edge.getTimeInterval() != null && edge.getTimeInterval().getHigh() > timeIntervalMax) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),edge.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        if (edge.getTimeInterval() == null) {
          edge.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
        }
      }
      AttributeValue[] values=edge.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",edge.getId()),Level.WARNING));
      }
    }
  }
  return true;
}","public boolean verify(){
  for (  EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
    if (edge.getWeight() <= 0f) {
      if (parameters.isRemoveEdgeWithWeightZero()) {
        String id=edge.getId();
        String sourceTargetId=edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId();
        edgeMap.remove(id);
        edgeSourceTargetMap.remove(sourceTargetId);
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",id),Level.SEVERE));
      }
    }
  }
  if (directedEdgesCount > 0 && undirectedEdgesCount == 0) {
    parameters.setEdgeDefault(EdgeDefault.DIRECTED);
  }
 else   if (directedEdgesCount == 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.UNDIRECTED);
  }
 else   if (directedEdgesCount > 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.MIXED);
  }
  for (  NodeDraftImpl node : nodeMap.values()) {
    dynamicGraph=node.getTimeInterval() != null;
    if (dynamicGraph) {
      break;
    }
  }
  if (!dynamicGraph) {
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      dynamicGraph=edge.getTimeInterval() != null;
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (!dynamicGraph) {
    for (    AttributeColumn col : attributeModel.getNodeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
    for (    AttributeColumn col : attributeModel.getEdgeTable().getColumns()) {
      dynamicGraph=dynamicGraph || col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (timeIntervalMin != null || timeIntervalMax != null) {
    if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
      try {
        String message=""String_Node_Str"" + (timeIntervalMin != null ? DynamicUtilities.getXMLDateStringFromDouble(timeIntervalMin) : ""String_Node_Str"") + ""String_Node_Str"";
        message+=(timeIntervalMax != null ? DynamicUtilities.getXMLDateStringFromDouble(timeIntervalMax) : ""String_Node_Str"") + ""String_Node_Str"";
        report.log(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",message));
      }
 catch (      Exception e) {
      }
    }
 else {
      String message=""String_Node_Str"" + (timeIntervalMin != null ? timeIntervalMin.toString() : ""String_Node_Str"") + ""String_Node_Str"";
      message+=(timeIntervalMax != null ? timeIntervalMax.toString() : ""String_Node_Str"") + ""String_Node_Str"";
      report.log(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",message));
    }
  }
  if (dynamicGraph) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeFormat.toString()),Level.INFO));
  }
  if (dynamicGraph && parameters.isRemoveIntervalsOverlapping()) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      AttributeValue[] values=node.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          type=DynamicUtilities.removeOverlapping(type);
          node.getAttributeRow().setValue(val.getColumn(),type);
        }
      }
    }
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      AttributeValue[] values=edge.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          type=DynamicUtilities.removeOverlapping(type);
          edge.getAttributeRow().setValue(val.getColumn(),type);
        }
      }
    }
  }
  if (dynamicGraph && (timeIntervalMin != null || timeIntervalMax != null)) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && node.getTimeInterval() != null && node.getTimeInterval().getLow() < timeIntervalMin) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),timeIntervalMin,node.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && node.getTimeInterval() != null && node.getTimeInterval().getHigh() > timeIntervalMax) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),node.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        if (node.getTimeInterval() == null) {
          node.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
        }
      }
      AttributeValue[] values=node.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",node.getId()),Level.WARNING));
      }
    }
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && edge.getTimeInterval() != null && edge.getTimeInterval().getLow() < timeIntervalMin) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),timeIntervalMin,edge.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && edge.getTimeInterval() != null && edge.getTimeInterval().getHigh() > timeIntervalMax) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),edge.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        if (edge.getTimeInterval() == null) {
          edge.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
        }
      }
      AttributeValue[] values=edge.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && val.getValue() instanceof DynamicType) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",edge.getId()),Level.WARNING));
      }
    }
  }
  return true;
}",0.9989901540015148
189790,"public BufferedImage getImage(TimelineModel model,int width,int height){
  double newMin=model.getCustomMin();
  double newMax=model.getCustomMax();
  if (parameters == null || newMax != max || newMin != min || parameters.getWidth() != width || parameters.getHeight() != height) {
    min=newMin;
    max=newMax;
    parameters=new TickParameters(model.getTimeFormat().equals(TimeFormat.DOUBLE) ? TickParameters.TickType.DOUBLE : TickParameters.TickType.DATE);
    parameters.setWidth(width);
    parameters.setHeight(height);
    image=draw();
  }
  return image;
}","public BufferedImage getImage(TimelineModel model,int width,int height){
  double newMin=model.getCustomMin();
  double newMax=model.getCustomMax();
  TickParameters.TickType timeFormat=model.getTimeFormat().equals(TimeFormat.DOUBLE) ? TickParameters.TickType.DOUBLE : TickParameters.TickType.DATE;
  if (parameters == null || newMax != max || newMin != min || parameters.getWidth() != width || parameters.getHeight() != height || !parameters.getType().equals(timeFormat)) {
    min=newMin;
    max=newMax;
    parameters=new TickParameters(timeFormat);
    parameters.setWidth(width);
    parameters.setHeight(height);
    image=draw();
  }
  return image;
}",0.556734693877551
189791,"public Range(Number lowerBound,Number upperBound,Number min,Number max,Number[] values){
  this(lowerBound,upperBound,min,max);
  this.values=values;
}","public Range(Number lowerBound,Number upperBound,Number min,Number max,boolean leftInclusive,boolean rightInclusive,Number[] values){
  this(lowerBound,upperBound,min,max,values);
  this.leftInclusive=leftInclusive;
  this.rightInclusive=rightInclusive;
}",0.6847290640394089
189792,"public boolean init(Filter filter,Graph graph){
  boolean res=true;
  if (filter instanceof NodeFilter) {
    res=((NodeFilter)filter).init(graph);
  }
 else   if (filter instanceof EdgeFilter) {
    res=((EdgeFilter)filter).init(graph);
  }
 else   if (filter instanceof NodeFilter) {
    res=((AttributableFilter)filter).init(graph);
  }
  if (filter instanceof RangeFilter) {
    RangeFilter rangeFilter=(RangeFilter)filter;
    Number[] values=rangeFilter.getValues(graph);
    NumberComparator comparator=new NumberComparator();
    Number min=null;
    Number max=null;
    if (values != null) {
      for (      Number n : values) {
        min=min == null ? n : comparator.min(min,n);
        max=max == null ? n : comparator.max(max,n);
      }
    }
    Range previousRange=(Range)rangeFilter.getRangeProperty().getValue();
    Range newRange;
    if (min == null || max == null) {
      newRange=null;
      rangeFilter.getRangeProperty().setValue(newRange);
    }
 else {
      if (previousRange == null) {
        newRange=new Range(min,max,min,max,values);
        rangeFilter.getRangeProperty().setValue(newRange);
      }
 else       if (previousRange != null && (previousRange.getMinimum() == null || previousRange.getMaximum() == null)) {
        newRange=new Range(previousRange.getLowerBound(),previousRange.getUpperBound(),min,max,values);
        rangeFilter.getRangeProperty().setValue(newRange);
      }
 else {
        boolean stickyLeft=previousRange.getMinimum().equals(previousRange.getLowerBound());
        boolean stickyRight=previousRange.getMaximum().equals(previousRange.getUpperBound());
        Number lowerBound=previousRange.getLowerBound();
        Number upperBound=previousRange.getUpperBound();
        if (stickyRight && comparator.superior(max,upperBound)) {
          upperBound=max;
        }
        if (stickyLeft && comparator.inferior(min,lowerBound)) {
          lowerBound=min;
        }
        if (comparator.superior(upperBound,max)) {
          upperBound=max;
        }
        if (comparator.inferior(lowerBound,min)) {
          lowerBound=min;
        }
        newRange=new Range(lowerBound,upperBound,min,max,values);
        if (!newRange.equals(previousRange)) {
          rangeFilter.getRangeProperty().setValue(newRange);
        }
      }
    }
  }
  return res;
}","public boolean init(Filter filter,Graph graph){
  boolean res=true;
  if (filter instanceof NodeFilter) {
    res=((NodeFilter)filter).init(graph);
  }
 else   if (filter instanceof EdgeFilter) {
    res=((EdgeFilter)filter).init(graph);
  }
 else   if (filter instanceof NodeFilter) {
    res=((AttributableFilter)filter).init(graph);
  }
  if (filter instanceof RangeFilter) {
    RangeFilter rangeFilter=(RangeFilter)filter;
    Number[] values=rangeFilter.getValues(graph);
    NumberComparator comparator=new NumberComparator();
    Number min=null;
    Number max=null;
    if (values != null) {
      for (      Number n : values) {
        min=min == null ? n : comparator.min(min,n);
        max=max == null ? n : comparator.max(max,n);
      }
    }
    Range previousRange=(Range)rangeFilter.getRangeProperty().getValue();
    Range newRange;
    if (min == null || max == null) {
      newRange=null;
      rangeFilter.getRangeProperty().setValue(newRange);
    }
 else {
      if (previousRange == null) {
        newRange=new Range(min,max,min,max,values);
        rangeFilter.getRangeProperty().setValue(newRange);
      }
 else       if (previousRange != null && (previousRange.getMinimum() == null || previousRange.getMaximum() == null)) {
        newRange=new Range(previousRange.getLowerBound(),previousRange.getUpperBound(),min,max,previousRange.isLeftInclusive(),previousRange.isRightInclusive(),values);
        rangeFilter.getRangeProperty().setValue(newRange);
      }
 else {
        boolean stickyLeft=previousRange.getMinimum().equals(previousRange.getLowerBound());
        boolean stickyRight=previousRange.getMaximum().equals(previousRange.getUpperBound());
        Number lowerBound=previousRange.getLowerBound();
        Number upperBound=previousRange.getUpperBound();
        if (stickyRight && comparator.superior(max,upperBound)) {
          upperBound=max;
        }
        if (stickyLeft && comparator.inferior(min,lowerBound)) {
          lowerBound=min;
        }
        if (comparator.superior(upperBound,max)) {
          upperBound=max;
        }
        if (comparator.inferior(lowerBound,min)) {
          lowerBound=min;
        }
        newRange=new Range(lowerBound,upperBound,min,max,previousRange.isLeftInclusive(),previousRange.isRightInclusive(),values);
        if (!newRange.equals(previousRange)) {
          rangeFilter.getRangeProperty().setValue(newRange);
        }
      }
    }
  }
  return res;
}",0.9728714524207012
189793,"public void setup(TimelineModel timelineModel){
  this.model=timelineModel;
  this.controller=Lookup.getDefault().lookup(TimelineController.class);
  setDefaults();
  if (model.getTimeFormat().equals(TimeFormat.DATE)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getCustomMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getCustomMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getIntervalStart());
    Date to=DynamicUtilities.getDateFromDouble(model.getIntervalEnd());
    minTextField.setText(DATE_FORMAT.format(min));
    maxTextField.setText(DATE_FORMAT.format(max));
    startTextField.setText(DATE_FORMAT.format(from));
    endTextField.setText(DATE_FORMAT.format(to));
  }
 else   if (model.getTimeFormat().equals(TimeFormat.DATETIME)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getCustomMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getCustomMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getIntervalStart());
    Date to=DynamicUtilities.getDateFromDouble(model.getIntervalEnd());
    minTextField.setText(DATETIME_FORMAT.format(min));
    maxTextField.setText(DATETIME_FORMAT.format(max));
    startTextField.setText(DATETIME_FORMAT.format(from));
    endTextField.setText(DATETIME_FORMAT.format(to));
  }
 else {
    NumberFormat f=NumberFormat.getInstance(Locale.ENGLISH);
    f.setGroupingUsed(false);
    minTextField.setText(f.format(model.getCustomMin()));
    maxTextField.setText(f.format(model.getCustomMax()));
    startTextField.setText(f.format(model.getIntervalStart()));
    endTextField.setText(f.format(model.getIntervalEnd()));
  }
}","public void setup(TimelineModel timelineModel){
  this.model=timelineModel;
  this.controller=Lookup.getDefault().lookup(TimelineController.class);
  setDefaults();
  if (model.getTimeFormat().equals(TimeFormat.DATE)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getCustomMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getCustomMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getIntervalStart());
    Date to=DynamicUtilities.getDateFromDouble(model.getIntervalEnd());
    minTextField.setText(DATE_FORMAT.format(min));
    maxTextField.setText(DATE_FORMAT.format(max));
    startTextField.setText(DATE_FORMAT.format(from));
    endTextField.setText(DATE_FORMAT.format(to));
  }
 else   if (model.getTimeFormat().equals(TimeFormat.DATETIME)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getCustomMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getCustomMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getIntervalStart());
    Date to=DynamicUtilities.getDateFromDouble(model.getIntervalEnd());
    minTextField.setText(DATETIME_FORMAT.format(min));
    maxTextField.setText(DATETIME_FORMAT.format(max));
    startTextField.setText(DATETIME_FORMAT.format(from));
    endTextField.setText(DATETIME_FORMAT.format(to));
  }
 else {
    NumberFormat f=NumberFormat.getInstance(Locale.ENGLISH);
    f.setGroupingUsed(false);
    f.setMaximumFractionDigits(20);
    minTextField.setText(f.format(model.getCustomMin()));
    maxTextField.setText(f.format(model.getCustomMax()));
    startTextField.setText(f.format(model.getIntervalStart()));
    endTextField.setText(f.format(model.getIntervalEnd()));
  }
}",0.989176187612748
189794,"public void setDefaults(){
  if (model.getTimeFormat().equals(TimeFormat.DATE)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getMin());
    Date to=DynamicUtilities.getDateFromDouble(model.getMax());
    minTextField.setText(DATE_FORMAT.format(min));
    maxTextField.setText(DATE_FORMAT.format(max));
    startTextField.setText(DATE_FORMAT.format(from));
    endTextField.setText(DATE_FORMAT.format(to));
  }
 else   if (model.getTimeFormat().equals(TimeFormat.DATETIME)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getMin());
    Date to=DynamicUtilities.getDateFromDouble(model.getMax());
    minTextField.setText(DATETIME_FORMAT.format(min));
    maxTextField.setText(DATETIME_FORMAT.format(max));
    startTextField.setText(DATETIME_FORMAT.format(from));
    endTextField.setText(DATETIME_FORMAT.format(to));
  }
 else {
    NumberFormat f=NumberFormat.getInstance(Locale.ENGLISH);
    f.setGroupingUsed(false);
    minTextField.setText(f.format(model.getMin()));
    maxTextField.setText(f.format(model.getMax()));
    startTextField.setText(f.format(model.getMin()));
    endTextField.setText(f.format(model.getMax()));
  }
}","public void setDefaults(){
  if (model.getTimeFormat().equals(TimeFormat.DATE)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getMin());
    Date to=DynamicUtilities.getDateFromDouble(model.getMax());
    minTextField.setText(DATE_FORMAT.format(min));
    maxTextField.setText(DATE_FORMAT.format(max));
    startTextField.setText(DATE_FORMAT.format(from));
    endTextField.setText(DATE_FORMAT.format(to));
  }
 else   if (model.getTimeFormat().equals(TimeFormat.DATETIME)) {
    Date min=DynamicUtilities.getDateFromDouble(model.getMin());
    Date max=DynamicUtilities.getDateFromDouble(model.getMax());
    Date from=DynamicUtilities.getDateFromDouble(model.getMin());
    Date to=DynamicUtilities.getDateFromDouble(model.getMax());
    minTextField.setText(DATETIME_FORMAT.format(min));
    maxTextField.setText(DATETIME_FORMAT.format(max));
    startTextField.setText(DATETIME_FORMAT.format(from));
    endTextField.setText(DATETIME_FORMAT.format(to));
  }
 else {
    NumberFormat f=NumberFormat.getInstance(Locale.ENGLISH);
    f.setGroupingUsed(false);
    f.setMaximumFractionDigits(20);
    minTextField.setText(f.format(model.getMin()));
    maxTextField.setText(f.format(model.getMax()));
    startTextField.setText(f.format(model.getMin()));
    endTextField.setText(f.format(model.getMax()));
  }
}",0.9874564459930314
189795,"public Graph filter(Graph graph,Filter[] filters){
  if (filters.length > 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  Filter filter=filters[0];
  if (filter instanceof EdgeFilter && ((EdgeFilter)filter).init(hgraph)) {
    EdgeFilter edgeFilter=(EdgeFilter)filter;
    for (    Edge e : hgraph.getEdgesAndMetaEdges().toArray()) {
      if (edgeFilter.evaluate(hgraph,e)) {
        hgraph.removeEdge(e);
      }
    }
    edgeFilter.finish();
  }
  return hgraph;
}","public Graph filter(Graph graph,Filter[] filters){
  if (filters.length > 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  Filter filter=filters[0];
  if (filter instanceof EdgeFilter && ((EdgeFilter)filter).init(hgraph)) {
    EdgeFilter edgeFilter=(EdgeFilter)filter;
    List<Edge> edgesToRemove=new ArrayList<Edge>();
    for (    Edge e : hgraph.getEdgesAndMetaEdges().toArray()) {
      if (edgeFilter.evaluate(hgraph,e)) {
        edgesToRemove.add(e);
      }
    }
    for (    Edge e : edgesToRemove) {
      hgraph.removeEdge(e);
    }
    edgeFilter.finish();
  }
  return hgraph;
}",0.8422791081750619
189796,"public Graph filter(Graph graph,Filter[] filters){
  if (filters.length > 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  Filter filter=filters[0];
  if (filter instanceof NodeFilter && ((NodeFilter)filter).init(hgraph)) {
    NodeFilter nodeFilter=(NodeFilter)filter;
    for (    Node n : hgraph.getNodes().toArray()) {
      if (nodeFilter.evaluate(hgraph,n)) {
        hgraph.removeNode(n);
      }
    }
    nodeFilter.finish();
  }
  return hgraph;
}","public Graph filter(Graph graph,Filter[] filters){
  if (filters.length > 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  Filter filter=filters[0];
  if (filter instanceof NodeFilter && ((NodeFilter)filter).init(hgraph)) {
    List<Node> nodeToRemove=new ArrayList<Node>();
    NodeFilter nodeFilter=(NodeFilter)filter;
    for (    Node n : hgraph.getNodes().toArray()) {
      if (nodeFilter.evaluate(hgraph,n)) {
        nodeToRemove.add(n);
      }
    }
    for (    Node n : nodeToRemove) {
      hgraph.removeNode(n);
    }
    nodeFilter.finish();
  }
  return hgraph;
}",0.8057432432432432
189797,"public NodePencil(){
  color=Color.BLACK;
  size=10f;
}","public NodePencil(){
  color=new Color(153,153,153);
  size=10f;
}",0.8099173553719008
189798,"public EqualNumberFilter(AttributeColumn column){
  super(NbBundle.getMessage(AttributeEqualBuilder.class,""String_Node_Str""),column);
  this.dynamicHelper=new DynamicAttributesHelper(this,null);
  addProperty(Number.class,""String_Node_Str"");
  ;
}","public EqualNumberFilter(AttributeColumn column){
  super(NbBundle.getMessage(AttributeEqualBuilder.class,""String_Node_Str""),column);
  addProperty(Number.class,""String_Node_Str"");
  addProperty(Range.class,""String_Node_Str"");
}",0.5978947368421053
189799,"public void setRange(Range range){
  if (range.getMinimum() == null && range.getMaximum() == null && this.range != null) {
    this.range=new Range(range.getLowerBound(),range.getUpperBound(),this.range.getMinimum(),this.range.getMaximum());
  }
 else {
    this.range=range;
  }
}","public void setRange(Range range){
  this.range=range;
}",0.3323442136498516
189800,"public AttributeRangeFilter(AttributeColumn column){
  super(column.getTitle() + ""String_Node_Str"" + NbBundle.getMessage(AttributeRangeBuilder.class,""String_Node_Str""),column);
  addProperty(Range.class,""String_Node_Str"");
}","public AttributeRangeFilter(AttributeColumn column){
  super(NbBundle.getMessage(AttributeRangeBuilder.class,""String_Node_Str""),column);
  addProperty(Range.class,""String_Node_Str"");
}",0.9019607843137256
189801,"public PartitionCountFilter(Partition partition){
  super(NbBundle.getMessage(PartitionCountBuilder.class,""String_Node_Str""),partition.getColumn());
  this.partition=partition;
}","public PartitionCountFilter(Partition partition){
  super(NbBundle.getMessage(PartitionCountBuilder.class,""String_Node_Str""),partition.getColumn());
  this.partition=partition;
  addProperty(Range.class,""String_Node_Str"");
}",0.8855721393034826
189802,"public void setup(EqualNumberFilter f){
  this.filter=f;
  new Thread(new Runnable(){
    public void run(){
      setToolTipText(filter.getName() + ""String_Node_Str"" + filter.getColumn().getTitle()+ ""String_Node_Str"");
      Number match=filter.getMatch();
      Number stepSize=null;
      final Comparable min=(Comparable)filter.getMinimun();
      final Comparable max=(Comparable)filter.getMaximum();
switch (filter.getColumn().getType()) {
case DOUBLE:
        match=(match != null ? match : new Double((Double)min));
      stepSize=new Double(.1);
    break;
case FLOAT:
  match=(match != null ? match : new Float((Float)min));
stepSize=new Float(.1f);
break;
case LONG:
match=(match != null ? match : new Long((Long)min));
stepSize=new Long(1l);
break;
case INT:
match=(match != null ? match : new Integer((Integer)min));
stepSize=1;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
Number minNumber=(Number)min;
Number maxNumber=(Number)max;
if (match.doubleValue() < minNumber.doubleValue()) {
match=minNumber;
filter.getProperties()[1].setValue(minNumber);
}
 else if (match.doubleValue() > maxNumber.doubleValue()) {
match=maxNumber;
filter.getProperties()[1].setValue(maxNumber);
}
final SpinnerNumberModel model=new SpinnerNumberModel(match,min,max,stepSize);
SwingUtilities.invokeLater(new Runnable(){
public void run(){
if (min.equals(Double.NEGATIVE_INFINITY) || min.equals(Integer.MIN_VALUE)) {
minLabel.setText(""String_Node_Str"");
maxLabel.setText(""String_Node_Str"");
}
 else {
DecimalFormat df=new DecimalFormat();
df.setMaximumFractionDigits(5);
minLabel.setText(df.format(min));
maxLabel.setText(df.format(max));
}
valueSpinner.setModel(model);
model.addChangeListener(WeakListeners.change(EqualNumberPanel.this,model));
}
}
);
}
}
).start();
}","public void setup(EqualNumberFilter f){
  this.filter=f;
  new Thread(new Runnable(){
    public void run(){
      setToolTipText(filter.getName() + ""String_Node_Str"" + filter.getColumn().getTitle()+ ""String_Node_Str"");
      Number match=filter.getMatch();
      Number stepSize=null;
      final Comparable min=(Comparable)filter.getRange().getMinimum();
      final Comparable max=(Comparable)filter.getRange().getMaximum();
switch (filter.getColumn().getType()) {
case DOUBLE:
        match=(match != null ? match : new Double((Double)min));
      stepSize=new Double(.1);
    break;
case FLOAT:
  match=(match != null ? match : new Float((Float)min));
stepSize=new Float(.1f);
break;
case LONG:
match=(match != null ? match : new Long((Long)min));
stepSize=new Long(1l);
break;
case INT:
match=(match != null ? match : new Integer((Integer)min));
stepSize=1;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
Number minNumber=(Number)min;
Number maxNumber=(Number)max;
if (match.doubleValue() < minNumber.doubleValue()) {
match=minNumber;
filter.getProperties()[1].setValue(minNumber);
}
 else if (match.doubleValue() > maxNumber.doubleValue()) {
match=maxNumber;
filter.getProperties()[1].setValue(maxNumber);
}
final SpinnerNumberModel model=new SpinnerNumberModel(match,min,max,stepSize);
SwingUtilities.invokeLater(new Runnable(){
public void run(){
if (min.equals(Double.NEGATIVE_INFINITY) || min.equals(Integer.MIN_VALUE)) {
minLabel.setText(""String_Node_Str"");
maxLabel.setText(""String_Node_Str"");
}
 else {
DecimalFormat df=new DecimalFormat();
df.setMaximumFractionDigits(5);
minLabel.setText(df.format(min));
maxLabel.setText(df.format(max));
}
valueSpinner.setModel(model);
model.addChangeListener(WeakListeners.change(EqualNumberPanel.this,model));
}
}
);
}
}
).start();
}",0.9933407325194228
189803,"public AbstractAttributeFilter(String name,AttributeColumn column){
  super(name);
  this.column=column;
  this.type=AttributeUtils.getDefault().isNodeColumn(column) ? Type.NODE : Type.EDGE;
  addProperty(AttributeColumn.class,""String_Node_Str"");
}","public AbstractAttributeFilter(String name,AttributeColumn column){
  super(name + ""String_Node_Str"" + column.getTitle()+ ""String_Node_Str"");
  this.column=column;
  this.type=AttributeUtils.getDefault().isNodeColumn(column) ? Type.NODE : Type.EDGE;
  addProperty(AttributeColumn.class,""String_Node_Str"");
}",0.8936936936936937
189804,"@Override public String getName(){
  return NbBundle.getMessage(InterEdgesBuilder.class,""String_Node_Str"");
}","@Override public String getName(){
  return NbBundle.getMessage(IntraEdgesBuilder.class,""String_Node_Str"") + ""String_Node_Str"" + partition.getColumn().getTitle()+ ""String_Node_Str"";
}",0.7397260273972602
189805,"@Override public String getName(){
  return NbBundle.getMessage(IntraEdgesBuilder.class,""String_Node_Str"");
}","@Override public String getName(){
  return NbBundle.getMessage(IntraEdgesBuilder.class,""String_Node_Str"") + ""String_Node_Str"" + partition.getColumn().getTitle()+ ""String_Node_Str"";
}",0.7465753424657534
189806,"public String getName(){
  return NbBundle.getMessage(PartitionBuilder.class,""String_Node_Str"");
}","public String getName(){
  return NbBundle.getMessage(PartitionBuilder.class,""String_Node_Str"") + ""String_Node_Str"" + partition.getColumn().getTitle()+ ""String_Node_Str"";
}",0.725925925925926
189807,"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value == null) {
    return super.getTableCellRendererComponent(table,null,isSelected,hasFocus,row,column);
  }
  TimeInterval timeInterval=(TimeInterval)value;
  String stringRepresentation=timeInterval.toString(timeFormat == TimeFormat.DOUBLE);
  if (drawGraphics) {
    JLabel label=new JLabel();
    Color background;
    if (isSelected) {
      background=SELECTED_BACKGROUND;
    }
 else {
      background=UNSELECTED_BACKGROUND;
    }
    final BufferedImage i=timeIntervalGraphics.createTimeIntervalImage(timeInterval.getLow(),timeInterval.getHigh(),table.getColumnModel().getColumn(column).getWidth() - 1,table.getRowHeight(row) - 1,FILL_COLOR,BORDER_COLOR,background);
    label.setIcon(new ImageIcon(i));
    label.setToolTipText(stringRepresentation);
    return label;
  }
 else {
    return super.getTableCellRendererComponent(table,stringRepresentation,isSelected,hasFocus,row,column);
  }
}","@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  if (value == null) {
    return super.getTableCellRendererComponent(table,null,isSelected,hasFocus,row,column);
  }
  TimeInterval timeInterval=(TimeInterval)value;
  String stringRepresentation=timeInterval.toString(timeFormat == TimeFormat.DOUBLE);
  if (drawGraphics) {
    JLabel label=new JLabel();
    Color background;
    if (isSelected) {
      background=SELECTED_BACKGROUND;
    }
 else {
      background=UNSELECTED_BACKGROUND;
    }
    List<Interval<Double[]>> intervals=timeInterval.getIntervals();
    double starts[]=new double[intervals.size()];
    double ends[]=new double[intervals.size()];
    for (int i=0; i < intervals.size(); i++) {
      starts[i]=intervals.get(i).getLow();
      ends[i]=intervals.get(i).getHigh();
    }
    final BufferedImage i=timeIntervalGraphics.createTimeIntervalImage(starts,ends,table.getColumnModel().getColumn(column).getWidth() - 1,table.getRowHeight(row) - 1,FILL_COLOR,BORDER_COLOR,background);
    label.setIcon(new ImageIcon(i));
    label.setToolTipText(stringRepresentation);
    return label;
  }
 else {
    return super.getTableCellRendererComponent(table,stringRepresentation,isSelected,hasFocus,row,column);
  }
}",0.8488421052631578
189808,"public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < N; i++) {
    Double d=nodeClustering[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createScatterPlot(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  chart.removeLegend();
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,false);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ ""String_Node_Str""+ totalTriangles+ ""String_Node_Str""+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}","public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < N; i++) {
    Double d=nodeClustering[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createScatterPlot(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  chart.removeLegend();
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,false);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  if (isDirected) {
    return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ ""String_Node_Str""+ totalTriangles+ ""String_Node_Str""+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  }
}",0.8537656197230665
189809,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph);
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,nodeClustering[v]);
      row.setValue(triCount,triangles[v]);
    }
  }
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  if (isDirected)   bruteForce(hgraph,attributeModel);
 else   triangles(hgraph);
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=null;
  if (!isDirected) {
    triCount=nodeTable.getColumn(""String_Node_Str"");
    if (triCount == null) {
      triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
    }
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,nodeClustering[v]);
      if (!isDirected)       row.setValue(triCount,triangles[v]);
    }
  }
}",0.9306418219461696
189810,"private void exportEdgeData(Graph graph) throws IOException {
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (exportEdgeWeight) {
    writer.write(""String_Node_Str"");
  }
  if (exportAttributes) {
    for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
      if (!attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
        writer.write(""String_Node_Str"" + attributeModel.getEdgeTable().getColumn(i).getTitle());
      }
    }
  }
  writer.write(""String_Node_Str"");
  for (EdgeIterator edgeIterator=graph.getEdges().iterator(); edgeIterator.hasNext(); ) {
    Edge edge=edgeIterator.next();
    writer.write(edge.getSource().getNodeData().getId());
    writer.write(""String_Node_Str"" + edge.getTarget().getNodeData().getId());
    if (exportEdgeWeight) {
      writer.write(""String_Node_Str"" + edge.getWeight());
    }
    if (exportAttributes) {
      for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
        if (!attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
          if (edge.getEdgeData().getAttributes().getValue(i) != null) {
            writer.write(""String_Node_Str"" + edge.getEdgeData().getAttributes().getValue(i));
          }
 else {
            writer.write(""String_Node_Str"" + valueForEmptyAttributes);
          }
        }
      }
    }
    writer.write(""String_Node_Str"");
  }
}","private void exportEdgeData(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  if (exportEdgeWeight) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportAttributes) {
    for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
      if (!attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")&& !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
        stringBuilder.append(""String_Node_Str"").append(printParameter(attributeModel.getEdgeTable().getColumn(i).getTitle()).replace(' ','_'));
      }
    }
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Edge edge : graph.getEdges()) {
    progressTicket.progress();
    stringBuilder.append(printParameter(edge.getSource().getNodeData().getId()));
    stringBuilder.append(""String_Node_Str"").append(printParameter(edge.getTarget().getNodeData().getId()));
    if (exportEdgeWeight) {
      stringBuilder.append(""String_Node_Str"").append(edge.getWeight());
    }
    if (exportAttributes) {
      for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
        if (!attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")&& !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
          if (edge.getEdgeData().getAttributes().getValue(i) != null) {
            stringBuilder.append(""String_Node_Str"").append(printParameter(edge.getEdgeData().getAttributes().getValue(i)));
          }
 else {
            stringBuilder.append(""String_Node_Str"" + valueForEmptyAttributes);
          }
        }
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}",0.71280276816609
189811,"private void exportData(Graph graph) throws IOException {
  if (normalize) {
    calculateMinMaxForNormalization(graph);
  }
  if (exportAttributes) {
    exportNodeData(graph);
  }
  exportNodeProperties(graph);
  exportEdgeData(graph);
}","private void exportData(Graph graph) throws IOException {
  if (normalize) {
    calculateMinMaxForNormalization(graph);
  }
  if (exportAttributes) {
    exportNodeData(graph);
  }
  exportNodeProperties(graph);
  exportEdgeData(graph);
  writer.write(stringBuilder.toString());
  writer.flush();
  progressTicket.finish();
}",0.8460176991150442
189812,"private void calculateMinMaxForNormalization(Graph graph){
  minX=Double.POSITIVE_INFINITY;
  maxX=Double.NEGATIVE_INFINITY;
  minY=Double.POSITIVE_INFINITY;
  maxY=Double.NEGATIVE_INFINITY;
  minSize=Double.POSITIVE_INFINITY;
  maxSize=Double.NEGATIVE_INFINITY;
  for (NodeIterator nodeIterator=graph.getNodes().iterator(); nodeIterator.hasNext(); ) {
    Node node=nodeIterator.next();
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
    minSize=Math.min(minSize,node.getNodeData().r());
    maxSize=Math.max(maxSize,node.getNodeData().r());
  }
}","private void calculateMinMaxForNormalization(Graph graph){
  minX=Double.POSITIVE_INFINITY;
  maxX=Double.NEGATIVE_INFINITY;
  minY=Double.POSITIVE_INFINITY;
  maxY=Double.NEGATIVE_INFINITY;
  minSize=Double.POSITIVE_INFINITY;
  maxSize=Double.NEGATIVE_INFINITY;
  for (  Node node : graph.getNodes()) {
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
    minSize=Math.min(minSize,node.getNodeData().r());
    maxSize=Math.max(maxSize,node.getNodeData().r());
  }
}",0.913978494623656
189813,"private void exportNodeProperties(Graph graph) throws IOException {
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  if (exportCoords) {
    writer.write(""String_Node_Str"");
  }
  if (exportSize) {
    writer.write(""String_Node_Str"");
  }
  if (exportColor) {
    writer.write(""String_Node_Str"");
  }
  if (exportShortLabel) {
    writer.write(""String_Node_Str"");
  }
  writer.write(""String_Node_Str"");
  for (NodeIterator nodeIterator=graph.getNodes().iterator(); nodeIterator.hasNext(); ) {
    Node node=nodeIterator.next();
    writer.write(node.getNodeData().getId());
    if (exportCoords) {
      if (!normalize) {
        writer.write(""String_Node_Str"" + node.getNodeData().x() + ""String_Node_Str""+ node.getNodeData().y());
      }
 else {
        writer.write(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX) + ""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
      }
    }
    if (exportSize) {
      if (!normalize) {
        writer.write(""String_Node_Str"" + node.getNodeData().getRadius());
      }
 else {
        writer.write(""String_Node_Str"" + (node.getNodeData().getRadius() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      writer.write(""String_Node_Str"" + ((int)(node.getNodeData().r() * 255)));
    }
    if (exportShortLabel) {
      if (node.getNodeData().getLabel() != null)       writer.write(""String_Node_Str"" + node.getNodeData().getLabel());
 else       writer.write(""String_Node_Str"" + node.getNodeData().getId());
    }
    writer.write(""String_Node_Str"");
  }
}","private void exportNodeProperties(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  if (exportCoords) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportSize) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportColor) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportShortLabel) {
    stringBuilder.append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    progressTicket.progress();
    stringBuilder.append(node.getNodeData().getId());
    if (exportCoords) {
      if (!normalize) {
        stringBuilder.append(""String_Node_Str"").append(node.getNodeData().x()).append(""String_Node_Str"").append(node.getNodeData().y());
      }
 else {
        stringBuilder.append(""String_Node_Str"").append((node.getNodeData().x() - minX) / (maxX - minX)).append(""String_Node_Str"").append((node.getNodeData().y() - minY) / (maxY - minY));
      }
    }
    if (exportSize) {
      if (!normalize) {
        stringBuilder.append(""String_Node_Str"").append(node.getNodeData().getRadius());
      }
 else {
        stringBuilder.append(""String_Node_Str"").append((node.getNodeData().getRadius() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      stringBuilder.append(""String_Node_Str"").append((int)(node.getNodeData().r() * 255f));
    }
    if (exportShortLabel) {
      if (node.getNodeData().getLabel() != null) {
        stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getLabel()));
      }
 else {
        stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getId()));
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}",0.5444808092829515
189814,"private void exportNodeData(Graph graph) throws IOException {
  writer.write(""String_Node_Str"");
  writer.write(""String_Node_Str"");
  for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
    if (!attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
      writer.write(""String_Node_Str"" + attributeModel.getNodeTable().getColumn(i).getTitle().replace(' ','_'));
    }
  }
  writer.write(""String_Node_Str"");
  for (NodeIterator nodeIterator=graph.getNodes().iterator(); nodeIterator.hasNext(); ) {
    Node node=nodeIterator.next();
    writer.write(node.getNodeData().getId());
    for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
      if (!attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
        if (node.getNodeData().getAttributes().getValue(i) != null) {
          writer.write(""String_Node_Str"" + node.getNodeData().getAttributes().getValue(i));
        }
 else {
          writer.write(""String_Node_Str"" + valueForEmptyAttributes);
        }
      }
    }
    writer.write(""String_Node_Str"");
  }
}","private void exportNodeData(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
    if (!attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
      stringBuilder.append(""String_Node_Str"").append(attributeModel.getNodeTable().getColumn(i).getTitle().replace(' ','_').toString());
    }
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    progressTicket.progress();
    stringBuilder.append(printParameter(node.getNodeData().getId()));
    for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
      if (!attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
        if (node.getNodeData().getAttributes().getValue(i) != null) {
          stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getAttributes().getValue(i)));
        }
 else {
          stringBuilder.append(""String_Node_Str"").append(valueForEmptyAttributes);
        }
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}",0.701766304347826
189815,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph=null;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  graph.readLock();
  try {
    exportData(graph);
    writer.flush();
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    throw new RuntimeException(e);
  }
  graph.readUnlockAll();
  return !cancel;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph=null;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  dynamicModel=workspace.getLookup().lookup(DynamicModel.class);
  visibleInterval=dynamicModel != null && exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval();
  graph.readLock();
  progressTicket.start(graph.getNodeCount() * 2 + graph.getEdgeCount());
  stringBuilder=new StringBuilder();
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    throw new RuntimeException(e);
  }
  graph.readUnlockAll();
  return !cancel;
}",0.7288267288267288
189816,"private String printParameter(Object s){
  Object val=DynamicUtilities.getDynamicValue(s,visibleInterval.getLow(),visibleInterval.getHigh());
  if (val == null) {
    return valueForEmptyAttributes;
  }
  String res=val.toString().replace('\n',' ').replace('\""',' ');
  System.err.println(visibleInterval.getLow() + ""String_Node_Str"" + visibleInterval.getHigh());
  System.err.println(s.getClass().toString() + ""String_Node_Str"" + (s instanceof DynamicType)+ ""String_Node_Str""+ res);
  System.err.println(s.toString() + ""String_Node_Str"" + val.toString()+ ""String_Node_Str"");
  if (res.contains(""String_Node_Str"")) {
    return ""String_Node_Str"" + res + ""String_Node_Str"";
  }
 else {
    return res;
  }
}","private String printParameter(Object s){
  Object val=DynamicUtilities.getDynamicValue(s,visibleInterval.getLow(),visibleInterval.getHigh());
  if (val == null) {
    return valueForEmptyAttributes;
  }
  String res=val.toString().replaceAll(""String_Node_Str"",""String_Node_Str"").replace('\""',' ');
  if (res.contains(""String_Node_Str"")) {
    return ""String_Node_Str"" + res + ""String_Node_Str"";
  }
 else {
    return res;
  }
}",0.4973544973544973
189817,"private void exportEdgeData(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  if (exportEdgeWeight) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportAttributes) {
    for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
      if (!attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")&& !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
        stringBuilder.append(""String_Node_Str"").append(printParameter(attributeModel.getEdgeTable().getColumn(i).getTitle()).replace(' ','_'));
      }
    }
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Edge edge : graph.getEdges()) {
    progressTicket.progress();
    stringBuilder.append(printParameter(edge.getSource().getNodeData().getId()));
    stringBuilder.append(""String_Node_Str"").append(printParameter(edge.getTarget().getNodeData().getId()));
    if (exportEdgeWeight) {
      stringBuilder.append(""String_Node_Str"").append(edge.getWeight());
    }
    if (exportAttributes) {
      for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
        if (!attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")&& !attributeModel.getEdgeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
          if (edge.getEdgeData().getAttributes().getValue(i) != null) {
            stringBuilder.append(""String_Node_Str"").append(printParameter(edge.getEdgeData().getAttributes().getValue(i)));
          }
 else {
            stringBuilder.append(""String_Node_Str"" + valueForEmptyAttributes);
          }
        }
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}","private void exportEdgeData(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  if (exportEdgeWeight) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportAttributes) {
    for (int i=0; i < attributeModel.getEdgeTable().getColumns().length; i++) {
      if (Arrays.binarySearch(standartEdgeAttributes,attributeModel.getEdgeTable().getColumn(i).getTitle()) < 0) {
        stringBuilder.append(""String_Node_Str"").append(printParameter(attributeModel.getEdgeTable().getColumn(i).getTitle()).replace(' ','_'));
      }
    }
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    progressTicket.progress();
    printEdgeData(edge,edge.getSource(),edge.getTarget());
    if (!edge.isDirected() && !edge.isSelfLoop())     printEdgeData(edge,edge.getTarget(),edge.getSource());
  }
}",0.4480769230769231
189818,"private void exportData(Graph graph) throws IOException {
  if (normalize) {
    calculateMinMaxForNormalization(graph);
  }
  if (exportAttributes) {
    exportNodeData(graph);
  }
  exportNodeProperties(graph);
  exportEdgeData(graph);
  writer.write(stringBuilder.toString());
  writer.flush();
  progressTicket.finish();
}","private void exportData(Graph graph) throws IOException {
  if (normalize) {
    calculateMinMaxForNormalization(graph);
  }
  if (exportAttributes && atLeastOneNonStandartAttribute()) {
    exportNodeData(graph);
  }
  exportNodeProperties(graph);
  exportEdgeData(graph);
  writer.write(stringBuilder.toString());
  writer.flush();
  progressTicket.finish();
}",0.9476744186046512
189819,"private void calculateMinMaxForNormalization(Graph graph){
  minX=Double.POSITIVE_INFINITY;
  maxX=Double.NEGATIVE_INFINITY;
  minY=Double.POSITIVE_INFINITY;
  maxY=Double.NEGATIVE_INFINITY;
  minSize=Double.POSITIVE_INFINITY;
  maxSize=Double.NEGATIVE_INFINITY;
  for (  Node node : graph.getNodes()) {
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
    minSize=Math.min(minSize,node.getNodeData().r());
    maxSize=Math.max(maxSize,node.getNodeData().r());
  }
}","private void calculateMinMaxForNormalization(Graph graph){
  minX=Double.POSITIVE_INFINITY;
  maxX=Double.NEGATIVE_INFINITY;
  minY=Double.POSITIVE_INFINITY;
  maxY=Double.NEGATIVE_INFINITY;
  minSize=Double.POSITIVE_INFINITY;
  maxSize=Double.NEGATIVE_INFINITY;
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
    minSize=Math.min(minSize,node.getNodeData().r());
    maxSize=Math.max(maxSize,node.getNodeData().r());
  }
}",0.9705179282868526
189820,"private void exportNodeProperties(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  if (exportCoords) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportSize) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportColor) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportShortLabel) {
    stringBuilder.append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    progressTicket.progress();
    stringBuilder.append(node.getNodeData().getId());
    if (exportCoords) {
      if (!normalize) {
        stringBuilder.append(""String_Node_Str"").append(node.getNodeData().x()).append(""String_Node_Str"").append(node.getNodeData().y());
      }
 else {
        stringBuilder.append(""String_Node_Str"").append((node.getNodeData().x() - minX) / (maxX - minX)).append(""String_Node_Str"").append((node.getNodeData().y() - minY) / (maxY - minY));
      }
    }
    if (exportSize) {
      if (!normalize) {
        stringBuilder.append(""String_Node_Str"").append(node.getNodeData().getRadius());
      }
 else {
        stringBuilder.append(""String_Node_Str"").append((node.getNodeData().getRadius() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      stringBuilder.append(""String_Node_Str"").append((int)(node.getNodeData().r() * 255f));
    }
    if (exportShortLabel) {
      if (node.getNodeData().getLabel() != null) {
        stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getLabel()));
      }
 else {
        stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getId()));
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}","private void exportNodeProperties(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  if (exportCoords) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportSize) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportColor) {
    stringBuilder.append(""String_Node_Str"");
  }
  if (exportShortLabel) {
    stringBuilder.append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    progressTicket.progress();
    if (cancel) {
      break;
    }
    stringBuilder.append(node.getNodeData().getId());
    if (exportCoords) {
      if (!normalize) {
        stringBuilder.append(""String_Node_Str"").append(node.getNodeData().x()).append(""String_Node_Str"").append(node.getNodeData().y());
      }
 else {
        stringBuilder.append(""String_Node_Str"").append((node.getNodeData().x() - minX) / (maxX - minX)).append(""String_Node_Str"").append((node.getNodeData().y() - minY) / (maxY - minY));
      }
    }
    if (exportSize) {
      if (!normalize) {
        stringBuilder.append(""String_Node_Str"").append(node.getNodeData().getRadius());
      }
 else {
        stringBuilder.append(""String_Node_Str"").append((node.getNodeData().getRadius() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      stringBuilder.append(""String_Node_Str"").append((int)(node.getNodeData().r() * 255f));
    }
    if (exportShortLabel) {
      if (node.getNodeData().getLabel() != null) {
        stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getLabel()));
      }
 else {
        stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getId()));
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}",0.9897079276773296
189821,"private void exportNodeData(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
    if (!attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
      stringBuilder.append(""String_Node_Str"").append(attributeModel.getNodeTable().getColumn(i).getTitle().replace(' ','_').toString());
    }
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    progressTicket.progress();
    stringBuilder.append(printParameter(node.getNodeData().getId()));
    for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
      if (!attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"") && !attributeModel.getNodeTable().getColumns()[i].getTitle().equalsIgnoreCase(""String_Node_Str"")) {
        if (node.getNodeData().getAttributes().getValue(i) != null) {
          stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getAttributes().getValue(i)));
        }
 else {
          stringBuilder.append(""String_Node_Str"").append(valueForEmptyAttributes);
        }
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}","private void exportNodeData(Graph graph) throws IOException {
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
    if (Arrays.binarySearch(standartNodeAttributes,attributeModel.getNodeTable().getColumn(i).getTitle()) < 0) {
      stringBuilder.append(""String_Node_Str"").append(attributeModel.getNodeTable().getColumn(i).getTitle().replace(' ','_').toString());
    }
  }
  stringBuilder.append(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    progressTicket.progress();
    if (cancel) {
      break;
    }
    stringBuilder.append(printParameter(node.getNodeData().getId()));
    for (int i=0; i < attributeModel.getNodeTable().getColumns().length; i++) {
      if (Arrays.binarySearch(standartNodeAttributes,attributeModel.getNodeTable().getColumn(i).getTitle()) < 0) {
        if (node.getNodeData().getAttributes().getValue(i) != null) {
          stringBuilder.append(""String_Node_Str"").append(printParameter(node.getNodeData().getAttributes().getValue(i)));
        }
 else {
          stringBuilder.append(""String_Node_Str"").append(valueForEmptyAttributes);
        }
      }
    }
    stringBuilder.append(""String_Node_Str"");
  }
}",0.7867826086956522
189822,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph=null;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  dynamicModel=workspace.getLookup().lookup(DynamicModel.class);
  visibleInterval=dynamicModel != null && exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval();
  graph.readLock();
  progressTicket.start(graph.getNodeCount() * 2 + graph.getEdgeCount());
  stringBuilder=new StringBuilder();
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    throw new RuntimeException(e);
  }
  graph.readUnlockAll();
  return !cancel;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  dynamicModel=workspace.getLookup().lookup(DynamicModel.class);
  visibleInterval=dynamicModel != null && exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval();
  graph.readLock();
  progressTicket.start(graph.getNodeCount() * 2 + graph.getEdgeCount());
  stringBuilder=new StringBuilder();
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    throw new RuntimeException(e);
  }
  graph.readUnlockAll();
  return !cancel;
}",0.996776273372018
189823,"private void computeNormalizeValues(DirectedGraph graph){
  minX=Double.MAX_VALUE;
  minY=Double.MAX_VALUE;
  minZ=Double.MAX_VALUE;
  maxX=Double.MIN_VALUE;
  maxY=Double.MIN_VALUE;
  maxZ=Double.MIN_VALUE;
  minSize=Double.MAX_VALUE;
  maxSize=Double.MIN_VALUE;
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    minX=Math.min(minX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    minZ=Math.min(minZ,node.getNodeData().z());
    maxX=Math.max(maxX,node.getNodeData().x());
    maxY=Math.max(maxY,node.getNodeData().y());
    maxZ=Math.max(maxZ,node.getNodeData().z());
    minSize=Math.min(minSize,node.getNodeData().getSize());
    maxSize=Math.max(maxSize,node.getNodeData().getSize());
  }
}","private void computeNormalizeValues(Graph graph){
  minX=Double.MAX_VALUE;
  minY=Double.MAX_VALUE;
  minZ=Double.MAX_VALUE;
  maxX=Double.MIN_VALUE;
  maxY=Double.MIN_VALUE;
  maxZ=Double.MIN_VALUE;
  minSize=Double.MAX_VALUE;
  maxSize=Double.MIN_VALUE;
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    minX=Math.min(minX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    minZ=Math.min(minZ,node.getNodeData().z());
    maxX=Math.max(maxX,node.getNodeData().x());
    maxY=Math.max(maxY,node.getNodeData().y());
    maxZ=Math.max(maxZ,node.getNodeData().z());
    minSize=Math.min(minSize,node.getNodeData().getSize());
    maxSize=Math.max(maxSize,node.getNodeData().getSize());
  }
}",0.9946737683089214
189824,"void exportData(DirectedGraph graph) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    printNode(node);
  }
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    printEdge(edge);
  }
  printClose();
}","void exportData(Graph graph) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"");
  if (graph.getGraphModel().isDirected()) {
    printTag(""String_Node_Str"");
  }
 else   if (graph.getGraphModel().isUndirected()) {
    printTag(""String_Node_Str"");
  }
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    printNode(node);
  }
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    printEdge(edge,graph.getGraphModel().isMixed());
  }
  printClose();
}",0.7619047619047619
189825,"private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getId());
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (edge.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(formatString(s) + ""String_Node_Str"" + edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printEdge(Edge edge,boolean graphMixed) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getEdgeData().getId() + ""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getSource().getNodeData().getId() + ""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getTarget().getNodeData().getId() + ""String_Node_Str"");
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (graphMixed) {
    if (edge.isDirected()) {
      printTag(""String_Node_Str"");
    }
 else     if (!edge.isDirected()) {
      printTag(""String_Node_Str"");
    }
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (edge.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && DynamicUtilities.getDynamicValue(edge.getAttributes().getValue(i),visibleInterval.getLow(),visibleInterval.getHigh()) != null) {
        printTag(formatTitle(s) + ""String_Node_Str"" + formatValue(edge.getAttributes().getValue(i))+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.7971076137813696
189826,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return !cancel;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  DynamicModel dynamicModel=workspace.getLookup().lookup(DynamicModel.class);
  visibleInterval=dynamicModel != null && exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval();
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return !cancel;
}",0.6038270729978739
189827,"private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(formatString(s) + ""String_Node_Str"" + node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getNodeData().getId() + ""String_Node_Str"");
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      if (node.getAttributes().getValue(i) != null) {
        String s=attributeModel.getNodeTable().getColumn(i).getTitle();
        if (!s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")&& !s.equals(""String_Node_Str"")&& DynamicUtilities.getDynamicValue(node.getAttributes().getValue(i),visibleInterval.getLow(),visibleInterval.getHigh()) != null) {
          printTag(formatTitle(s) + ""String_Node_Str"" + formatValue(node.getAttributes().getValue(i))+ ""String_Node_Str"");
        }
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.8830299225779452
189828,"public DrawerSettings(){
  background.top=UIManager.getColor(""String_Node_Str"");
  background.bottom=new Color(97,95,93,0);
  background.paint=new GradientPaint(0,0,background.top,0,20,background.bottom,true);
  selection.top=new Color(108,151,194,50);
  selection.bottom=new Color(57,97,131,50);
  selection.paint=new GradientPaint(0,0,selection.top,0,20,selection.bottom,true);
  selection.visibleHookWidth=6;
  selection.invisibleHookMargin=1;
  selection.minimalWidth=16;
  selection.mouseOverTopColor=new Color(102,195,145,50);
  selection.activatedTopColor=new Color(188,118,114,50);
  selection.mouseOverBottomColor=new Color(60,143,96,50);
  selection.activatedBottomColor=new Color(151,79,79,50);
  selection.mouseOverPaint=new GradientPaint(0,0,selection.mouseOverTopColor,0,20,selection.mouseOverBottomColor,true);
  selection.activatedPaint=new GradientPaint(0,0,selection.activatedTopColor,0,20,selection.activatedBottomColor,true);
  shadowColor=new Color(35,35,35,105);
  defaultStroke=new BasicStroke(1.0f);
  defaultStrokeColor=Color.black;
  hookLength=8;
  tmMarginTop=0;
  tmMarginBottom=0;
  topChartMargin=16;
  Map<Key,Object> map=new HashMap<Key,Object>();
  map.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  map.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  map.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  map.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  renderingHints=new RenderingHints(map);
}","public DrawerSettings(){
  background.top=UIManager.getColor(""String_Node_Str"");
  background.bottom=new Color(97,95,93,0);
  selection.top=new Color(108,151,194,50);
  selection.bottom=new Color(57,97,131,50);
  selection.paint=new GradientPaint(0,0,selection.top,0,20,selection.bottom,true);
  selection.visibleHookWidth=6;
  selection.invisibleHookMargin=1;
  selection.minimalWidth=16;
  selection.mouseOverTopColor=new Color(102,195,145,50);
  selection.activatedTopColor=new Color(188,118,114,50);
  selection.mouseOverBottomColor=new Color(60,143,96,50);
  selection.activatedBottomColor=new Color(151,79,79,50);
  selection.mouseOverPaint=new GradientPaint(0,0,selection.mouseOverTopColor,0,20,selection.mouseOverBottomColor,true);
  selection.activatedPaint=new GradientPaint(0,0,selection.activatedTopColor,0,20,selection.activatedBottomColor,true);
  shadowColor=new Color(35,35,35,105);
  defaultStroke=new BasicStroke(1.0f);
  defaultStrokeColor=Color.black;
  hookLength=8;
  tmMarginTop=0;
  tmMarginBottom=0;
  topChartMargin=16;
  Map<Key,Object> map=new HashMap<Key,Object>();
  map.put(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
  map.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  map.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  map.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  renderingHints=new RenderingHints(map);
}",0.9715796430931924
189829,"void update(int width,int height){
  if (lastWidth == width && lastHeight == height) {
    return;
  }
  lastWidth=width;
  lastHeight=height;
  background.paint=new GradientPaint(0,0,background.top,0,height,background.bottom,true);
  selection.paint=new GradientPaint(0,0,selection.top,0,height,selection.bottom,true);
  selection.mouseOverPaint=new GradientPaint(0,0,selection.mouseOverTopColor,0,height,selection.mouseOverBottomColor,true);
  selection.activatedPaint=new GradientPaint(0,0,selection.activatedTopColor,0,height,selection.activatedBottomColor,true);
}","void update(int width,int height){
  if (lastWidth == width && lastHeight == height) {
    return;
  }
  lastWidth=width;
  lastHeight=height;
  selection.paint=new GradientPaint(0,0,selection.top,0,height,selection.bottom,true);
  selection.mouseOverPaint=new GradientPaint(0,0,selection.mouseOverTopColor,0,height,selection.mouseOverBottomColor,true);
  selection.activatedPaint=new GradientPaint(0,0,selection.activatedTopColor,0,height,selection.activatedBottomColor,true);
}",0.91412213740458
189830,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  int innerWidth=width - 1;
  int innerHeight=height - settings.tmMarginBottom - 2;
  int innerY=settings.tmMarginTop + 1;
  g2d.setBackground(settings.background.top);
  g2d.setColor(settings.background.top);
  g2d.fillRect(0,innerY,innerWidth,innerHeight);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  double min=model.getCustomMin();
  double max=model.getCustomMax();
  double intervalStart=model.getIntervalStart();
  double intervalEnd=model.getIntervalEnd();
  int intervalStartPixel=Math.max(0,getPixelPosition(intervalStart,max - min,min,width));
  int intervalEndPixel=Math.min(width,getPixelPosition(intervalEnd,max - min,min,width));
  g2d.setRenderingHints(settings.renderingHints);
  g2d.drawImage(tickGraph.getImage(model,innerWidth,innerHeight),0,innerY,null);
  if (model.getChart() != null) {
    BufferedImage spImage=sparkline.getImage(model,innerWidth,innerHeight - settings.topChartMargin);
    g2d.drawImage(spImage,0,innerY + settings.topChartMargin,null);
  }
  int vhw=settings.selection.visibleHookWidth;
  int sw=intervalEndPixel - intervalStartPixel;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect(intervalStartPixel,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect(intervalStartPixel + vhw,settings.tmMarginTop,sw - vhw,height - settings.tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalStartPixel,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(intervalStartPixel + vhw,settings.tmMarginTop,sw - vhw * 2,height - settings.tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalEndPixel - vhw,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalStartPixel,settings.tmMarginTop,sw - vhw,height - settings.tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(intervalEndPixel - vhw,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalStartPixel,settings.tmMarginTop,sw,height - settings.tmMarginBottom - 1);
}
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect(intervalStartPixel,settings.tmMarginTop,sw - 1,height - settings.tmMarginBottom - 1);
double v=getReal(currentMousePositionX,max - min,min,width);
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  int innerWidth=width - 1;
  int innerHeight=height - settings.tmMarginBottom - 2;
  int innerY=settings.tmMarginTop + 1;
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  double min=model.getCustomMin();
  double max=model.getCustomMax();
  double intervalStart=model.getIntervalStart();
  double intervalEnd=model.getIntervalEnd();
  int intervalStartPixel=Math.max(0,getPixelPosition(intervalStart,max - min,min,width));
  int intervalEndPixel=Math.min(width,getPixelPosition(intervalEnd,max - min,min,width));
  g2d.setRenderingHints(settings.renderingHints);
  g2d.drawImage(tickGraph.getImage(model,innerWidth,innerHeight),0,innerY,null);
  if (model.getChart() != null) {
    BufferedImage spImage=sparkline.getImage(model,innerWidth,innerHeight - settings.topChartMargin);
    g2d.drawImage(spImage,0,innerY + settings.topChartMargin,null);
  }
  int vhw=settings.selection.visibleHookWidth;
  int sw=intervalEndPixel - intervalStartPixel;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect(intervalStartPixel,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect(intervalStartPixel + vhw,settings.tmMarginTop,sw - vhw,height - settings.tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalStartPixel,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(intervalStartPixel + vhw,settings.tmMarginTop,sw - vhw * 2,height - settings.tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalEndPixel - vhw,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalStartPixel,settings.tmMarginTop,sw - vhw,height - settings.tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(intervalEndPixel - vhw,settings.tmMarginTop,vhw,height - settings.tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect(intervalStartPixel,settings.tmMarginTop,sw,height - settings.tmMarginBottom - 1);
}
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect(intervalStartPixel,settings.tmMarginTop,sw - 1,height - settings.tmMarginBottom - 1);
double v=getReal(currentMousePositionX,max - min,min,width);
}",0.975653419262442
189831,"public boolean isRendererForitem(Item item,PreviewProperties properties){
  return item instanceof EdgeItem && properties.getBooleanValue(PreviewProperty.DIRECTED) && (Boolean)item.getData(EdgeItem.DIRECTED)&& !(Boolean)item.getData(EdgeItem.SELF_LOOP)&& !properties.getBooleanValue(PreviewProperty.MOVING);
}","public boolean isRendererForitem(Item item,PreviewProperties properties){
  return item instanceof EdgeItem && properties.getBooleanValue(PreviewProperty.SHOW_EDGES) && properties.getBooleanValue(PreviewProperty.DIRECTED)&& (Boolean)item.getData(EdgeItem.DIRECTED)&& !(Boolean)item.getData(EdgeItem.SELF_LOOP)&& !properties.getBooleanValue(PreviewProperty.MOVING);
}",0.9125925925925926
189832,"public AttributeModel getModel(Workspace workspace){
  AttributeModel model=workspace.getLookup().lookup(AttributeModel.class);
  if (model != null) {
    return model;
  }
  model=new IndexedAttributeModel();
  workspace.add(model);
  return model;
}","public synchronized AttributeModel getModel(Workspace workspace){
  AttributeModel model=workspace.getLookup().lookup(AttributeModel.class);
  if (model != null) {
    return model;
  }
  model=new IndexedAttributeModel();
  workspace.add(model);
  return model;
}",0.974757281553398
189833,"public void clearMetaEdgesOutOfRange(AbstractNode enabledNode,AbstractNode rangeNode){
  int rangeStart=rangeNode.getPre();
  int rangeLimit=rangeStart + rangeNode.size;
  if (enabledNode.getMetaEdgesOutTree().getCount() > 0) {
    edgeIterator.setNode(enabledNode.getMetaEdgesOutTree());
    while (edgeIterator.hasNext()) {
      MetaEdgeImpl metaEdge=(MetaEdgeImpl)edgeIterator.next();
      AbstractNode target=metaEdge.getTarget(viewId);
      int targetPre=target.getPre();
      if (targetPre >= rangeStart && targetPre <= rangeLimit) {
        if (!metaEdge.isSelfLoop() && target.getEdgesInTree().hasNeighbour(enabledNode)) {
          enabledNode.decMutualMetaEdgeDegree();
          target.decMutualMetaEdgeDegree();
          view.decMutualMetaEdgesTotal(1);
        }
        edgeIterator.remove();
        target.getMetaEdgesInTree().remove(metaEdge);
        view.decMetaEdgesCount(1);
      }
    }
  }
  if (enabledNode.getMetaEdgesInTree().getCount() > 0) {
    edgeIterator.setNode(enabledNode.getMetaEdgesInTree());
    while (edgeIterator.hasNext()) {
      MetaEdgeImpl metaEdge=(MetaEdgeImpl)edgeIterator.next();
      int sourcePre=metaEdge.getSource(viewId).getPre();
      if (sourcePre >= rangeStart && sourcePre <= rangeLimit) {
        edgeIterator.remove();
        metaEdge.getSource(viewId).getMetaEdgesOutTree().remove(metaEdge);
        view.decMetaEdgesCount(1);
      }
    }
  }
}","public void clearMetaEdgesOutOfRange(AbstractNode enabledNode,AbstractNode rangeNode){
  int rangeStart=rangeNode.getPre();
  int rangeLimit=rangeStart + rangeNode.size;
  if (enabledNode.getMetaEdgesOutTree().getCount() > 0) {
    edgeIterator.setNode(enabledNode.getMetaEdgesOutTree());
    while (edgeIterator.hasNext()) {
      MetaEdgeImpl metaEdge=(MetaEdgeImpl)edgeIterator.next();
      AbstractNode target=metaEdge.getTarget(viewId);
      int targetPre=target.getPre();
      if (targetPre >= rangeStart && targetPre <= rangeLimit) {
        if (!metaEdge.isSelfLoop() && target.getMetaEdgesOutTree().hasNeighbour(enabledNode)) {
          enabledNode.decMutualMetaEdgeDegree();
          target.decMutualMetaEdgeDegree();
          view.decMutualMetaEdgesTotal(1);
        }
        edgeIterator.remove();
        target.getMetaEdgesInTree().remove(metaEdge);
        view.decMetaEdgesCount(1);
      }
    }
  }
  if (enabledNode.getMetaEdgesInTree().getCount() > 0) {
    edgeIterator.setNode(enabledNode.getMetaEdgesInTree());
    while (edgeIterator.hasNext()) {
      MetaEdgeImpl metaEdge=(MetaEdgeImpl)edgeIterator.next();
      int sourcePre=metaEdge.getSource(viewId).getPre();
      if (sourcePre >= rangeStart && sourcePre <= rangeLimit) {
        edgeIterator.remove();
        metaEdge.getSource(viewId).getMetaEdgesOutTree().remove(metaEdge);
        view.decMetaEdgesCount(1);
      }
    }
  }
}",0.9933075026417753
189834,"public AbstractEdge[] flattenNode(AbstractNode node){
  AbstractEdge[] newEdges=null;
  if (!node.getMetaEdgesInTree().isEmpty() || !node.getMetaEdgesOutTree().isEmpty()) {
    newEdges=new AbstractEdge[node.getMetaEdgesInTree().getCount() + node.getMetaEdgesOutTree().getCount()];
  }
  int i=0;
  if (!node.getMetaEdgesInTree().isEmpty()) {
    for (edgeIterator.setNode(node.getMetaEdgesInTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      AbstractNode source=edge.getSource(viewId);
      edgeIterator.remove();
      source.getMetaEdgesOutTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
      if (!node.getEdgesInTree().hasNeighbour(source)) {
        AbstractEdge realEdge=dhns.factory().newEdge(source,node,edge.getWeight(),edge.isDirected());
        realEdge.getEdgeData().moveFrom(edge.getEdgeData());
        realEdge.setWeight(edge.getWeight());
        newEdges[i]=realEdge;
        source.getEdgesOutTree().add(realEdge);
        node.getEdgesInTree().add(realEdge);
        source.incEnabledOutDegree();
        node.incEnabledInDegree();
        view.incEdgesCountEnabled(1);
        view.incEdgesCountTotal(1);
        if (source.getEdgesInTree().hasNeighbour(node)) {
          source.incEnabledMutualDegree();
          node.incEnabledMutualDegree();
          view.incMutualEdgesEnabled(1);
          view.incMutualEdgesTotal(1);
        }
      }
      i++;
    }
  }
  if (!node.getMetaEdgesOutTree().isEmpty()) {
    for (edgeIterator.setNode(node.getMetaEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      AbstractNode target=edge.getTarget(viewId);
      edgeIterator.remove();
      target.getMetaEdgesInTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
      if (!node.getEdgesOutTree().hasNeighbour(target)) {
        AbstractEdge realEdge=dhns.factory().newEdge(node,target,edge.getWeight(),edge.isDirected());
        realEdge.getEdgeData().moveFrom(edge.getEdgeData());
        realEdge.setWeight(edge.getWeight());
        newEdges[i]=realEdge;
        node.getEdgesOutTree().add(realEdge);
        target.getEdgesInTree().add(realEdge);
        node.incEnabledOutDegree();
        target.incEnabledInDegree();
        view.incEdgesCountEnabled(1);
        view.incEdgesCountTotal(1);
        if (target.getEdgesOutTree().hasNeighbour(node)) {
          node.incEnabledMutualDegree();
          target.incEnabledMutualDegree();
          view.incMutualEdgesEnabled(1);
          view.incMutualEdgesTotal(1);
        }
      }
      i++;
    }
  }
  view.decMutualMetaEdgesTotal(node.getMutualMetaEdgeDegree());
  node.setMutualMetaEdgeDegree(0);
  return newEdges;
}","public AbstractEdge[] flattenNode(AbstractNode node){
  AbstractEdge[] newEdges=null;
  if (!node.getMetaEdgesInTree().isEmpty() || !node.getMetaEdgesOutTree().isEmpty()) {
    newEdges=new AbstractEdge[node.getMetaEdgesInTree().getCount() + node.getMetaEdgesOutTree().getCount()];
  }
  int i=0;
  if (!node.getMetaEdgesInTree().isEmpty()) {
    for (edgeIterator.setNode(node.getMetaEdgesInTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      AbstractNode source=edge.getSource(viewId);
      edgeIterator.remove();
      source.getMetaEdgesOutTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
      if (node.getMetaEdgesOutTree().hasNeighbour(source)) {
        source.decMutualMetaEdgeDegree();
      }
      if (!node.getEdgesInTree().hasNeighbour(source)) {
        AbstractEdge realEdge=dhns.factory().newEdge(source,node,edge.getWeight(),edge.isDirected());
        realEdge.getEdgeData().moveFrom(edge.getEdgeData());
        realEdge.setWeight(edge.getWeight());
        newEdges[i]=realEdge;
        source.getEdgesOutTree().add(realEdge);
        node.getEdgesInTree().add(realEdge);
        source.incEnabledOutDegree();
        node.incEnabledInDegree();
        view.incEdgesCountEnabled(1);
        view.incEdgesCountTotal(1);
        if (source.getEdgesInTree().hasNeighbour(node)) {
          source.incEnabledMutualDegree();
          node.incEnabledMutualDegree();
          view.incMutualEdgesEnabled(1);
          view.incMutualEdgesTotal(1);
        }
      }
      i++;
    }
  }
  if (!node.getMetaEdgesOutTree().isEmpty()) {
    for (edgeIterator.setNode(node.getMetaEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      AbstractNode target=edge.getTarget(viewId);
      edgeIterator.remove();
      target.getMetaEdgesInTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
      if (!node.getEdgesOutTree().hasNeighbour(target)) {
        AbstractEdge realEdge=dhns.factory().newEdge(node,target,edge.getWeight(),edge.isDirected());
        realEdge.getEdgeData().moveFrom(edge.getEdgeData());
        realEdge.setWeight(edge.getWeight());
        newEdges[i]=realEdge;
        node.getEdgesOutTree().add(realEdge);
        target.getEdgesInTree().add(realEdge);
        node.incEnabledOutDegree();
        target.incEnabledInDegree();
        view.incEdgesCountEnabled(1);
        view.incEdgesCountTotal(1);
        if (target.getEdgesOutTree().hasNeighbour(node)) {
          node.incEnabledMutualDegree();
          target.incEnabledMutualDegree();
          view.incMutualEdgesEnabled(1);
          view.incMutualEdgesTotal(1);
        }
      }
      i++;
    }
  }
  view.decMutualMetaEdgesTotal(node.getMutualMetaEdgeDegree());
  node.setMutualMetaEdgeDegree(0);
  return newEdges;
}",0.9799819657348964
189835,"public void decrementEdgesCouting(AbstractNode disabledNode,AbstractNode parent){
  for (edgeIterator.setNode(disabledNode.getEdgesOutTree()); edgeIterator.hasNext(); ) {
    AbstractEdge edge=edgeIterator.next();
    AbstractNode target=edge.getTarget(view.getViewId());
    if (target.isEnabled() || (parent != null && target.parent == parent)) {
      target.decEnabledInDegree();
      disabledNode.decEnabledOutDegree();
      view.decEdgesCountEnabled(1);
      if (target.getEdgesOutTree().hasNeighbour(disabledNode) && (parent == null || (parent != null && target.parent == parent && target.getId() < disabledNode.getId()))) {
        target.decEnabledMutualDegree();
        disabledNode.decEnabledMutualDegree();
        view.decMutualEdgesEnabled(1);
      }
    }
  }
  for (edgeIterator.setNode(disabledNode.getEdgesInTree()); edgeIterator.hasNext(); ) {
    AbstractEdge edge=edgeIterator.next();
    AbstractNode source=edge.getSource(view.getViewId());
    if (source.isEnabled()) {
      view.decEdgesCountEnabled(1);
      disabledNode.decEnabledInDegree();
      source.decEnabledOutDegree();
    }
  }
}","public void decrementEdgesCouting(AbstractNode disabledNode,AbstractNode parent){
  for (edgeIterator.setNode(disabledNode.getEdgesOutTree()); edgeIterator.hasNext(); ) {
    AbstractEdge edge=edgeIterator.next();
    AbstractNode target=edge.getTarget(view.getViewId());
    if (target.isEnabled() || (parent != null && target.parent == parent) || edge.isSelfLoop()) {
      target.decEnabledInDegree();
      disabledNode.decEnabledOutDegree();
      view.decEdgesCountEnabled(1);
      if (target.getEdgesOutTree().hasNeighbour(disabledNode) && (parent == null || (parent != null && target.parent == parent && target.getId() < disabledNode.getId())) && !edge.isSelfLoop()) {
        target.decEnabledMutualDegree();
        disabledNode.decEnabledMutualDegree();
        view.decMutualEdgesEnabled(1);
      }
    }
  }
  for (edgeIterator.setNode(disabledNode.getEdgesInTree()); edgeIterator.hasNext(); ) {
    AbstractEdge edge=edgeIterator.next();
    AbstractNode source=edge.getSource(view.getViewId());
    if (source.isEnabled()) {
      view.decEdgesCountEnabled(1);
      disabledNode.decEnabledInDegree();
      source.decEnabledOutDegree();
    }
  }
}",0.981214504150284
189836,"public void clearMetaEdges(AbstractNode node){
  if (node.getMetaEdgesInTree().getCount() > 0) {
    edgeIterator.setNode(node.getMetaEdgesInTree());
    while (edgeIterator.hasNext()) {
      AbstractEdge edge=edgeIterator.next();
      AbstractNode source=edge.getSource(viewId);
      if (!edge.isSelfLoop() && node.getEdgesOutTree().hasNeighbour(source)) {
        node.decMutualMetaEdgeDegree();
        source.decMutualMetaEdgeDegree();
        view.decMutualMetaEdgesTotal(1);
      }
      source.getMetaEdgesOutTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
    }
    node.getMetaEdgesInTree().clear();
  }
  if (node.getMetaEdgesOutTree().getCount() > 0) {
    edgeIterator.setNode(node.getMetaEdgesOutTree());
    while (edgeIterator.hasNext()) {
      AbstractEdge edge=edgeIterator.next();
      edge.getTarget(viewId).getMetaEdgesInTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
    }
    node.getMetaEdgesOutTree().clear();
  }
}","public void clearMetaEdges(AbstractNode node){
  if (node.getMetaEdgesInTree().getCount() > 0) {
    edgeIterator.setNode(node.getMetaEdgesInTree());
    while (edgeIterator.hasNext()) {
      AbstractEdge edge=edgeIterator.next();
      AbstractNode source=edge.getSource(viewId);
      if (!edge.isSelfLoop() && node.getMetaEdgesOutTree().hasNeighbour(source)) {
        node.decMutualMetaEdgeDegree();
        source.decMutualMetaEdgeDegree();
        view.decMutualMetaEdgesTotal(1);
      }
      source.getMetaEdgesOutTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
    }
    node.getMetaEdgesInTree().clear();
  }
  if (node.getMetaEdgesOutTree().getCount() > 0) {
    edgeIterator.setNode(node.getMetaEdgesOutTree());
    while (edgeIterator.hasNext()) {
      AbstractEdge edge=edgeIterator.next();
      edge.getTarget(viewId).getMetaEdgesInTree().remove((MetaEdgeImpl)edge);
      view.decMetaEdgesCount(1);
    }
    node.getMetaEdgesOutTree().clear();
  }
}",0.9979757085020244
189837,"public EdgeIterable getEdgesTree(){
  readLock();
  return dhns.newEdgeIterable(new EdgeIterator(structure,new TreeIterator(structure,true,Tautology.instance),false,Tautology.instance,Tautology.instance));
}","public EdgeIterable getEdgesTree(){
  readLock();
  return dhns.newEdgeIterable(new EdgeIterator(structure,new TreeIterator(structure,false,Tautology.instance),false,Tautology.instance,Tautology.instance));
}",0.983132530120482
189838,"public EdgeIterable getEdgesTree(){
  readLock();
  return dhns.newEdgeIterable(new EdgeIterator(structure,new TreeIterator(structure,true,Tautology.instance),false,Tautology.instance,Tautology.instance));
}","public EdgeIterable getEdgesTree(){
  readLock();
  return dhns.newEdgeIterable(new EdgeIterator(structure,new TreeIterator(structure,false,Tautology.instance),false,Tautology.instance,Tautology.instance));
}",0.983132530120482
189839,"public EdgeIterable getEdgesTree(){
  readLock();
  return dhns.newEdgeIterable(new EdgeIterator(structure,new TreeIterator(structure,true,Tautology.instance),true,Tautology.instance,Tautology.instance));
}","public EdgeIterable getEdgesTree(){
  readLock();
  return dhns.newEdgeIterable(new EdgeIterator(structure,new TreeIterator(structure,false,Tautology.instance),true,Tautology.instance,Tautology.instance));
}",0.9830508474576272
189840,"public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    timeIntervalCellEditor.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  outlineTable.setModel(mdl);
  NodeDataTable.this.dataTablesModel=dataTablesModel;
  setNodesSelection(selectedNodes);
  selectedNodes=null;
  refreshingTable=false;
}","public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    timeIntervalCellEditor.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  ((ETableColumnModel)outlineTable.getColumnModel()).clearSortedColumns();
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  outlineTable.setModel(mdl);
  NodeDataTable.this.dataTablesModel=dataTablesModel;
  setNodesSelection(selectedNodes);
  selectedNodes=null;
  refreshingTable=false;
}",0.968044311887516
189841,"public void readRow(XMLStreamReader reader,AbstractAttributeModel model,AttributeTableImpl table,AttributeRowImpl row) throws XMLStreamException {
  row.setRowVersion(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  AttributeColumnImpl col=null;
  String value=""String_Node_Str"";
  boolean end=false;
  while (reader.hasNext() && !end) {
    int t=reader.next();
switch (t) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VALUE.equalsIgnoreCase(name)) {
      col=(AttributeColumnImpl)table.getColumn(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
    }
  break;
case XMLStreamReader.CHARACTERS:
if (!reader.isWhiteSpace() && col != null) {
  value+=reader.getText();
}
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_NODE_ROW.equalsIgnoreCase(reader.getLocalName()) || ELEMENT_EDGE_ROW.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
if (!value.isEmpty() && col != null) {
AttributeType type=col.getType();
Object v=type.parse(value);
v=model.getManagedValue(v,type);
row.setValue(col,value);
}
value=""String_Node_Str"";
col=null;
break;
}
}
}","public void readRow(XMLStreamReader reader,AbstractAttributeModel model,AttributeTableImpl table,AttributeRowImpl row) throws XMLStreamException {
  row.setRowVersion(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  AttributeColumnImpl col=null;
  String value=""String_Node_Str"";
  boolean end=false;
  while (reader.hasNext() && !end) {
    int t=reader.next();
switch (t) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VALUE.equalsIgnoreCase(name)) {
      col=(AttributeColumnImpl)table.getColumn(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
    }
  break;
case XMLStreamReader.CHARACTERS:
if (!reader.isWhiteSpace() && col != null) {
  value+=reader.getText();
}
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_NODE_ROW.equalsIgnoreCase(reader.getLocalName()) || ELEMENT_EDGE_ROW.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
if (!value.isEmpty() && col != null) {
AttributeType type=col.getType();
Object v=type.parse(value);
v=model.getManagedValue(v,type);
row.setValue(col,v);
}
value=""String_Node_Str"";
col=null;
break;
}
}
}",0.9982517482517482
189842,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph,attributeModel);
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,nodeClustering[v]);
      row.setValue(triCount,triangles[v]);
    }
  }
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph);
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,nodeClustering[v]);
      row.setValue(triCount,triangles[v]);
    }
  }
}",0.9917264202978489
189843,"private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}","public void triangles(HierarchicalGraph hgraph){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s.getNodeData().getRootNode(),index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  totalTriangles=0;
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}",0.9854143292194262
189844,"public Color getColor(Color parentColor){
  if (customColor == null) {
    return parentColor;
  }
  return customColor;
}","public Color getColor(Color parentColor){
  if (mode.equals(Mode.CUSTOM) && customColor != null) {
    return customColor;
  }
  return parentColor;
}",0.6985294117647058
189845,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  HierarchicalDirectedGraph directedGraph=null;
  if (isDirected) {
    directedGraph=graph.getGraphModel().getHierarchicalDirectedGraphVisible();
  }
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      int inDegree=directedGraph.getTotalInDegree(n);
      int outDegree=directedGraph.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  HierarchicalDirectedGraph directedGraph=null;
  if (isDirected) {
    directedGraph=graph.getGraphModel().getHierarchicalDirectedGraphVisible();
  }
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      int inDegree=directedGraph.getTotalInDegree(n);
      int outDegree=directedGraph.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=(isDirected) ? 2 * graph.getNodeCount() : graph.getNodeCount();
  graph.readUnlockAll();
}",0.9905277401894452
189846,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  degreeDist=new HashMap<Float,Integer>();
  inDegreeDist=new HashMap<Float,Integer>();
  outDegreeDist=new HashMap<Float,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn degCol=nodeTable.getColumn(WDEGREE);
  AttributeColumn inCol=nodeTable.getColumn(WINDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(WOUTDEGREE);
  if (degCol == null) {
    degCol=nodeTable.addColumn(WDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(WINDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(WOUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  int i=0;
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    float totalWeight=0;
    for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
      Edge e=(Edge)it.next();
      totalWeight+=e.getWeight();
    }
    if (isDirected) {
      HierarchicalDirectedGraph hdg=graph.getGraphModel().getHierarchicalDirectedGraph();
      float totalInWeight=0;
      float totalOutWeight=0;
      for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
        Edge e=(Edge)it.next();
        if (e.getSource().equals(n)) {
          totalOutWeight+=e.getWeight();
        }
        if (e.getTarget().equals(n)) {
          totalInWeight+=e.getWeight();
        }
      }
      row.setValue(inCol,totalInWeight);
      row.setValue(outCol,totalOutWeight);
      if (!inDegreeDist.containsKey(totalInWeight)) {
        inDegreeDist.put(totalInWeight,0);
      }
      inDegreeDist.put(totalInWeight,inDegreeDist.get(totalInWeight) + 1);
      if (!outDegreeDist.containsKey(totalOutWeight)) {
        outDegreeDist.put(totalOutWeight,0);
      }
      outDegreeDist.put(totalOutWeight,outDegreeDist.get(totalOutWeight) + 1);
    }
    row.setValue(degCol,totalWeight);
    avgWDegree+=totalWeight;
    if (!degreeDist.containsKey(totalWeight)) {
      degreeDist.put(totalWeight,0);
    }
    degreeDist.put(totalWeight,degreeDist.get(totalWeight) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgWDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  degreeDist=new HashMap<Float,Integer>();
  inDegreeDist=new HashMap<Float,Integer>();
  outDegreeDist=new HashMap<Float,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn degCol=nodeTable.getColumn(WDEGREE);
  AttributeColumn inCol=nodeTable.getColumn(WINDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(WOUTDEGREE);
  if (degCol == null) {
    degCol=nodeTable.addColumn(WDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(WINDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(WOUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  int i=0;
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    float totalWeight=0;
    if (isDirected) {
      HierarchicalDirectedGraph hdg=graph.getGraphModel().getHierarchicalDirectedGraph();
      float totalInWeight=0;
      float totalOutWeight=0;
      for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
        Edge e=(Edge)it.next();
        if (e.getSource().equals(n)) {
          totalOutWeight+=e.getWeight();
        }
        if (e.getTarget().equals(n)) {
          totalInWeight+=e.getWeight();
        }
      }
      totalWeight=totalInWeight + totalOutWeight;
      row.setValue(inCol,totalInWeight);
      row.setValue(outCol,totalOutWeight);
      if (!inDegreeDist.containsKey(totalInWeight)) {
        inDegreeDist.put(totalInWeight,0);
      }
      inDegreeDist.put(totalInWeight,inDegreeDist.get(totalInWeight) + 1);
      if (!outDegreeDist.containsKey(totalOutWeight)) {
        outDegreeDist.put(totalOutWeight,0);
      }
      outDegreeDist.put(totalOutWeight,outDegreeDist.get(totalOutWeight) + 1);
    }
 else {
      for (Iterator it=graph.getEdgesAndMetaEdges(n).iterator(); it.hasNext(); ) {
        Edge e=(Edge)it.next();
        totalWeight+=e.getWeight();
      }
    }
    row.setValue(degCol,totalWeight);
    avgWDegree+=totalWeight;
    if (!degreeDist.containsKey(totalWeight)) {
      degreeDist.put(totalWeight,0);
    }
    degreeDist.put(totalWeight,degreeDist.get(totalWeight) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgWDegree/=(isDirected) ? 2 * graph.getNodeCount() : graph.getNodeCount();
  graph.readUnlockAll();
}",0.8154829011649756
189847,"private void refreshChooser(){
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  if (model != null) {
    for (    LayoutBuilder builder : Lookup.getDefault().lookupAll(LayoutBuilder.class)) {
      LayoutBuilderWrapper item=new LayoutBuilderWrapper(builder);
      comboBoxModel.addElement(item);
      if (model.getSelectedLayout() != null && builder == model.getSelectedBuilder()) {
        comboBoxModel.setSelectedItem(item);
      }
    }
  }
  layoutCombobox.setModel(comboBoxModel);
  if (model != null) {
    layoutCombobox.setEnabled(!model.isRunning());
  }
}","private void refreshChooser(){
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  if (model != null) {
    List<LayoutBuilder> builders=new ArrayList<LayoutBuilder>(Lookup.getDefault().lookupAll(LayoutBuilder.class));
    Collections.sort(builders,new Comparator(){
      public int compare(      Object o1,      Object o2){
        return ((LayoutBuilder)o1).getName().compareTo(((LayoutBuilder)o2).getName());
      }
    }
);
    for (    LayoutBuilder builder : builders) {
      LayoutBuilderWrapper item=new LayoutBuilderWrapper(builder);
      comboBoxModel.addElement(item);
      if (model.getSelectedLayout() != null && builder == model.getSelectedBuilder()) {
        comboBoxModel.setSelectedItem(item);
      }
    }
  }
  layoutCombobox.setModel(comboBoxModel);
  if (model != null) {
    layoutCombobox.setEnabled(!model.isRunning());
  }
}",0.7652811735941321
189848,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      HierarchicalDirectedGraph hdg=graph.getGraphModel().getHierarchicalDirectedGraph();
      int inDegree=hdg.getTotalInDegree(n);
      int outDegree=hdg.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isDirected=graph instanceof DirectedGraph;
  isCanceled=false;
  inDegreeDist=new HashMap<Integer,Integer>();
  outDegreeDist=new HashMap<Integer,Integer>();
  degreeDist=new HashMap<Integer,Integer>();
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (isDirected) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  int i=0;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  HierarchicalDirectedGraph directedGraph=null;
  if (isDirected) {
    directedGraph=graph.getGraphModel().getHierarchicalDirectedGraphVisible();
  }
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (isDirected) {
      int inDegree=directedGraph.getTotalInDegree(n);
      int outDegree=directedGraph.getTotalOutDegree(n);
      row.setValue(inCol,inDegree);
      row.setValue(outCol,outDegree);
      if (!inDegreeDist.containsKey(inDegree)) {
        inDegreeDist.put(inDegree,0);
      }
      inDegreeDist.put(inDegree,inDegreeDist.get(inDegree) + 1);
      if (!outDegreeDist.containsKey(outDegree)) {
        outDegreeDist.put(outDegree,0);
      }
      outDegreeDist.put(outDegree,outDegreeDist.get(outDegree) + 1);
    }
    int degree=graph.getTotalDegree(n);
    row.setValue(degCol,degree);
    avgDegree+=degree;
    if (!degreeDist.containsKey(degree)) {
      degreeDist.put(degree,0);
    }
    degreeDist.put(degree,degreeDist.get(degree) + 1);
    if (isCanceled) {
      break;
    }
    i++;
    Progress.progress(progress,i);
  }
  avgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.9190443052655995
189849,"public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          String weight=reader.get(edges.getColumn(PropertiesColumn.EDGE_WEIGHT.getIndex()).getTitle());
          if (weight != null) {
            try {
              Float weightFloat=Float.parseFloat(weight);
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + weightFloat);
            }
 catch (            NumberFormatException numberFormatException) {
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
            }
          }
 else {
            edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.setTrimWhitespace(false);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          String weight=reader.get(edges.getColumn(PropertiesColumn.EDGE_WEIGHT.getIndex()).getTitle());
          if (weight != null) {
            try {
              Float weightFloat=Float.parseFloat(weight);
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + weightFloat);
            }
 catch (            NumberFormatException numberFormatException) {
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
            }
          }
 else {
            edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9960925124089132
189850,"public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          graph.readLock();
          node=graph.getNode(id);
          graph.readUnlock();
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.setTrimWhitespace(false);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          graph.readLock();
          node=graph.getNode(id);
          graph.readUnlock();
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9921259842519684
189851,"private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getId());
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (edge.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getEdgeTable().getColumn(i).getTitle().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getId());
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (edge.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(formatString(s) + ""String_Node_Str"" + edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.9446419502285424
189852,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return true;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return !cancel;
}",0.9910786699107867
189853,"private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getNodeTable().getColumn(i).getTitle().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"") && !s.equals(""String_Node_Str"")) {
        printTag(formatString(s) + ""String_Node_Str"" + node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.9617793133232564
189854,"private void importData(LineNumberReader reader) throws Exception {
  Progress.start(progressTicket);
  ArrayList list;
  StreamTokenizer tokenizer=new StreamTokenizer(reader);
  tokenizer.ordinaryChar('[');
  tokenizer.ordinaryChar(']');
  tokenizer.wordChars('_','_');
  list=parseList(tokenizer);
  boolean ret=false;
  for (int i=0; i < list.size(); i++) {
    if (""String_Node_Str"".equals(list.get(i)) && list.size() >= i + 2 && list.get(i + 1) instanceof ArrayList) {
      ret=parseGraph((ArrayList)list.get(i + 1));
    }
  }
  if (!ret) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str""),Issue.Level.SEVERE));
  }
  Progress.finish(progressTicket);
}","private void importData(LineNumberReader reader) throws Exception {
  Progress.start(progressTicket);
  ArrayList list;
  StreamTokenizer tokenizer=new StreamTokenizer(reader);
  tokenizer.ordinaryChar('[');
  tokenizer.ordinaryChar(']');
  tokenizer.wordChars('_','_');
  String allowed=""String_Node_Str"";
  for (int i=0; i < allowed.length(); i++)   tokenizer.wordChars(allowed.charAt(i),allowed.charAt(i));
  list=parseList(tokenizer);
  boolean ret=false;
  for (int i=0; i < list.size(); i++) {
    if (""String_Node_Str"".equals(list.get(i)) && list.size() >= i + 2 && list.get(i + 1) instanceof ArrayList) {
      ret=parseGraph((ArrayList)list.get(i + 1));
    }
  }
  if (!ret) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str""),Issue.Level.SEVERE));
  }
  Progress.finish(progressTicket);
}",0.9093281148075668
189855,"private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (s.charAt(0) >= 'a' && s.charAt(0) <= 'z' && edge.getAttributes().getValue(i) != null) {
        printTag(attributeModel.getEdgeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)edge.getAttributes().getValue(i));
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printEdge(Edge edge) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + edge.getSource().getId());
  printTag(""String_Node_Str"" + edge.getTarget().getId());
  if (exportLabel && edge.getEdgeData().getLabel() != null) {
    printTag(""String_Node_Str"" + edge.getEdgeData().getLabel() + ""String_Node_Str"");
  }
  if (exportEdgeSize) {
    printTag(""String_Node_Str"" + edge.getWeight());
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < edge.getAttributes().countValues(); i++) {
      String s=attributeModel.getEdgeTable().getColumn(i).getTitle();
      if (!(s.charAt(0) >= 'A' && s.charAt(0) <= 'Z') && edge.getAttributes().getValue(i) != null) {
        printTag(attributeModel.getEdgeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)edge.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.985792349726776
189856,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  if (normalize) {
    computeNormalizeValues(graph);
  }
  graph.readLock();
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return true;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  DirectedGraph graph;
  if (exportVisible) {
    graph=graphModel.getDirectedGraph();
  }
 else {
    graph=graphModel.getDirectedGraph();
  }
  progressTicket.start(graph.getNodeCount() + graph.getEdgeCount());
  graph.readLock();
  if (normalize) {
    computeNormalizeValues(graph);
  }
  try {
    exportData(graph);
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  progressTicket.finish();
  graph.readUnlock();
  return true;
}",0.967479674796748
189857,"private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (s.charAt(0) >= 'a' && s.charAt(0) <= 'z' && node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getNodeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)node.getAttributes().getValue(i));
      }
    }
  }
  printClose();
  progressTicket.progress();
}","private void printNode(Node node) throws IOException {
  printOpen(""String_Node_Str"");
  printTag(""String_Node_Str"" + node.getId());
  if (exportLabel && node.getNodeData().getLabel() != null) {
    printTag(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
  }
  if (exportCoordinates || exportNodeSize || exportColor) {
    printOpen(""String_Node_Str"");
    if (exportCoordinates) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().x());
        printTag(""String_Node_Str"" + node.getNodeData().y());
        printTag(""String_Node_Str"" + node.getNodeData().z());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().x() - minX) / (maxX - minX));
        printTag(""String_Node_Str"" + (node.getNodeData().y() - minY) / (maxY - minY));
        printTag(""String_Node_Str"" + (node.getNodeData().z() - minZ) / (maxZ - minZ));
      }
    }
    if (exportNodeSize) {
      if (!normalize) {
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
        printTag(""String_Node_Str"" + node.getNodeData().getSize());
      }
 else {
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
        printTag(""String_Node_Str"" + (node.getNodeData().getSize() - minSize) / (maxSize - minSize));
      }
    }
    if (exportColor) {
      printTag(""String_Node_Str"" + Integer.toString((int)(node.getNodeData().r() * 255),16) + Integer.toString((int)(node.getNodeData().g() * 255),16)+ Integer.toString((int)(node.getNodeData().b() * 255),16)+ ""String_Node_Str"");
    }
    printClose();
  }
  if (exportNotRecognizedElements) {
    for (int i=0; i < node.getAttributes().countValues(); i++) {
      String s=attributeModel.getNodeTable().getColumn(i).getTitle();
      if (!(s.charAt(0) >= 'A' && s.charAt(0) <= 'Z') && node.getAttributes().getValue(i) != null && !s.equals(""String_Node_Str"")) {
        printTag(attributeModel.getNodeTable().getColumn(i).getTitle() + ""String_Node_Str"" + (String)node.getAttributes().getValue(i)+ ""String_Node_Str"");
      }
    }
  }
  printClose();
  progressTicket.progress();
}",0.9943280977312392
189858,"private void initTransformersUI(){
  for (  ButtonGroup bg : buttonGroups) {
    for (Enumeration<AbstractButton> btns=bg.getElements(); btns.hasMoreElements(); ) {
      AbstractButton btn=btns.nextElement();
      remove(btn);
    }
  }
  if (model != null) {
    for (    String elmtType : controller.getElementTypes()) {
      ButtonGroup buttonGroup=new ButtonGroup();
      for (      final Transformer t : model.getTransformers(elmtType)) {
        TransformerUI u=controller.getUI(t);
        if (u != null) {
          JToggleButton btn=new JToggleButton(u.getIcon());
          btn.setToolTipText(u.getDisplayName());
          btn.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              model.setCurrentTransformer(t);
            }
          }
);
          btn.setName(u.getDisplayName());
          btn.setFocusPainted(false);
          buttonGroup.add(btn);
          add(btn);
        }
      }
      buttonGroups.add(buttonGroup);
    }
  }
}","private void initTransformersUI(){
  for (  ButtonGroup bg : buttonGroups) {
    for (Enumeration<AbstractButton> btns=bg.getElements(); btns.hasMoreElements(); ) {
      AbstractButton btn=btns.nextElement();
      remove(btn);
    }
  }
  buttonGroups.clear();
  if (model != null) {
    for (    String elmtType : controller.getElementTypes()) {
      ButtonGroup buttonGroup=new ButtonGroup();
      for (      final Transformer t : model.getTransformers(elmtType)) {
        TransformerUI u=controller.getUI(t);
        if (u != null) {
          JToggleButton btn=new JToggleButton(u.getIcon());
          btn.setToolTipText(u.getDisplayName());
          btn.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              model.setCurrentTransformer(t);
            }
          }
);
          btn.setName(u.getDisplayName());
          btn.setFocusPainted(false);
          buttonGroup.add(btn);
          add(btn);
        }
      }
      buttonGroups.add(buttonGroup);
    }
  }
}",0.9884169884169884
189859,"public void exportCurrentTable(ExportMode exportMode){
  JTable table;
  if (classDisplayed == classDisplayed.NODE) {
    table=nodeTable.getOutlineTable();
  }
 else {
    table=edgeTable.getTable();
  }
switch (exportMode) {
case CSV:
    showCSVExportUI(table);
  break;
}
}","public void exportCurrentTable(ExportMode exportMode){
  JTable table;
  String fileName=prepareTableExportFileName();
  if (classDisplayed == classDisplayed.NODE) {
    table=nodeTable.getOutlineTable();
    fileName+=""String_Node_Str"";
  }
 else {
    table=edgeTable.getTable();
    fileName+=""String_Node_Str"";
  }
  fileName+=""String_Node_Str"";
switch (exportMode) {
case CSV:
    showCSVExportUI(table,fileName);
  break;
}
}",0.7824858757062146
189860,"/** 
 * <p>Exports a JTable to a CSV file showing first a dialog to select the file to write.</p>
 * @param parent Parent window
 * @param table Table to export
 * @param separator Separator to use for separating values of a row in the CSV file. If null ',' will be used.
 * @param charset Charset encoding for the file
 * @param columnsToExport Indicates the indexes of the columns to export. All columns will be exported if null
 */
public static void exportTableAsCSV(JComponent parent,JTable table,Character separator,Charset charset,Integer[] columnsToExport){
  String lastPath=NbPreferences.forModule(TableCSVExporter.class).get(LAST_PATH,null);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.setAcceptAllFileFilterUsed(false);
  DialogFileFilter dialogFileFilter=new DialogFileFilter(NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  dialogFileFilter.addExtension(""String_Node_Str"");
  chooser.addChoosableFileFilter(dialogFileFilter);
  File selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"");
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile != JFileChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  if (!file.getPath().endsWith(""String_Node_Str"")) {
    file=new File(file.getPath() + ""String_Node_Str"");
  }
  String defaultDirectory=file.getParentFile().getAbsolutePath();
  NbPreferences.forModule(TableCSVExporter.class).put(LAST_PATH,defaultDirectory);
  try {
    TableCSVExporter.writeCSVFile(table,file,separator,charset,columnsToExport);
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
  }
}","/** 
 * <p>Exports a JTable to a CSV file showing first a dialog to select the file to write.</p>
 * @param parent Parent window
 * @param table Table to export
 * @param separator Separator to use for separating values of a row in the CSV file. If null ',' will be used.
 * @param charset Charset encoding for the file
 * @param columnsToExport Indicates the indexes of the columns to export. All columns will be exported if null
 */
public static void exportTableAsCSV(JComponent parent,JTable table,Character separator,Charset charset,Integer[] columnsToExport,String fileName){
  String lastPath=NbPreferences.forModule(TableCSVExporter.class).get(LAST_PATH,null);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.setAcceptAllFileFilterUsed(false);
  DialogFileFilter dialogFileFilter=new DialogFileFilter(NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  dialogFileFilter.addExtension(""String_Node_Str"");
  chooser.addChoosableFileFilter(dialogFileFilter);
  File selectedFile=new File(chooser.getCurrentDirectory(),fileName);
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile != JFileChooser.APPROVE_OPTION) {
    return;
  }
  File file=chooser.getSelectedFile();
  if (!file.getPath().endsWith(""String_Node_Str"")) {
    file=new File(file.getPath() + ""String_Node_Str"");
  }
  String defaultDirectory=file.getParentFile().getAbsolutePath();
  NbPreferences.forModule(TableCSVExporter.class).put(LAST_PATH,defaultDirectory);
  try {
    TableCSVExporter.writeCSVFile(table,file,separator,charset,columnsToExport);
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""));
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(parent,NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),NbBundle.getMessage(TableCSVExporter.class,""String_Node_Str""),JOptionPane.ERROR_MESSAGE);
  }
}",0.9899562194179758
189861,"private void showCSVExportUI(JTable table){
  CSVExportUI csvUI=new CSVExportUI(table);
  DialogDescriptor dd=new DialogDescriptor(csvUI,csvUI.getDisplayName());
  if (DialogDisplayer.getDefault().notify(dd).equals(DialogDescriptor.OK_OPTION)) {
    DataTableTopComponent.exportTableAsCSV(this,table,csvUI.getSelectedSeparator(),csvUI.getSelectedCharset(),csvUI.getSelectedColumnsIndexes());
  }
  csvUI.unSetup();
}","private void showCSVExportUI(JTable table,String fileName){
  CSVExportUI csvUI=new CSVExportUI(table);
  DialogDescriptor dd=new DialogDescriptor(csvUI,csvUI.getDisplayName());
  if (DialogDisplayer.getDefault().notify(dd).equals(DialogDescriptor.OK_OPTION)) {
    DataTableTopComponent.exportTableAsCSV(this,table,csvUI.getSelectedSeparator(),csvUI.getSelectedCharset(),csvUI.getSelectedColumnsIndexes(),fileName);
  }
  csvUI.unSetup();
}",0.970828471411902
189862,"public void readTreeStructure(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  graphStructure.getMainView().setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_TREESTRUCTURE_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode absNode=new AbstractNode(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")),0,0,0,0,parentNode);
      absNode.setEnabled(enabled);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      absNode.setEnabledInDegree(inDegree);
      absNode.setEnabledOutDegree(outDegree);
      absNode.setEnabledMutualDegree(mutualDegree);
      absNode.getNodeData().setAttributes(factory.newNodeAttributes(absNode.getNodeData()));
      absNode.getNodeData().setTextData(factory.newTextData());
      treeStructure.insertAsChild(absNode,parentNode);
      graphStructure.addToDictionnary(absNode);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_TREESTRUCTURE.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
}","public void readTreeStructure(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  graphStructure.getMainView().setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphStructure.getMainView().setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_TREESTRUCTURE_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode absNode=new AbstractNode(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")),0,0,0,0,parentNode);
      absNode.setEnabled(enabled);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      absNode.setEnabledInDegree(inDegree);
      absNode.setEnabledOutDegree(outDegree);
      absNode.setEnabledMutualDegree(mutualDegree);
      absNode.getNodeData().setAttributes(factory.newNodeAttributes(absNode.getNodeData()));
      absNode.getNodeData().setId(String.valueOf(absNode.getId()));
      absNode.getNodeData().setTextData(factory.newTextData());
      treeStructure.insertAsChild(absNode,parentNode);
      graphStructure.addToDictionnary(absNode);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_TREESTRUCTURE.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
}",0.9851657940663175
189863,"public void readEdges(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    Integer source=0;
  Integer target=0;
Integer id=0;
Boolean directed=false;
Float weight=0f;
for (int i=0; i < reader.getAttributeCount(); i++) {
String attName=reader.getAttributeName(i).getLocalPart();
if (""String_Node_Str"".equalsIgnoreCase(attName)) {
id=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
source=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
target=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
directed=Boolean.parseBoolean(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
weight=Float.parseFloat(reader.getAttributeValue(i));
}
}
AbstractNode srcNode=treeStructure.getNodeAt(source);
AbstractNode destNode=treeStructure.getNodeAt(target);
AbstractEdge edge;
if (ELEMENT_EDGES_PROPER.equalsIgnoreCase(name)) {
edge=new ProperEdgeImpl(id,srcNode,destNode);
}
 else if (ELEMENT_EDGES_MIXED.equalsIgnoreCase(name)) {
edge=new MixedEdgeImpl(id,srcNode,destNode,directed);
}
 else {
edge=new SelfLoopImpl(id,srcNode);
}
edge.setWeight(weight);
edge.getEdgeData().setAttributes(factory.newEdgeAttributes(edge.getEdgeData()));
edge.getEdgeData().setTextData(factory.newTextData());
srcNode.getEdgesOutTree().add(edge);
destNode.getEdgesInTree().add(edge);
graphStructure.addToDictionnary(edge);
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_EDGES.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
break;
}
}
graphStructure.getMainView().getStructureModifier().getEdgeProcessor().computeMetaEdges();
}","public void readEdges(XMLStreamReader reader,GraphStructure graphStructure,GraphFactoryImpl factory) throws XMLStreamException {
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    Integer source=0;
  Integer target=0;
Integer id=0;
Boolean directed=false;
Float weight=0f;
for (int i=0; i < reader.getAttributeCount(); i++) {
String attName=reader.getAttributeName(i).getLocalPart();
if (""String_Node_Str"".equalsIgnoreCase(attName)) {
id=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
source=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
target=Integer.parseInt(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
directed=Boolean.parseBoolean(reader.getAttributeValue(i));
}
 else if (""String_Node_Str"".equalsIgnoreCase(attName)) {
weight=Float.parseFloat(reader.getAttributeValue(i));
}
}
AbstractNode srcNode=treeStructure.getNodeAt(source);
AbstractNode destNode=treeStructure.getNodeAt(target);
AbstractEdge edge;
if (ELEMENT_EDGES_PROPER.equalsIgnoreCase(name)) {
edge=new ProperEdgeImpl(id,srcNode,destNode);
}
 else if (ELEMENT_EDGES_MIXED.equalsIgnoreCase(name)) {
edge=new MixedEdgeImpl(id,srcNode,destNode,directed);
}
 else {
edge=new SelfLoopImpl(id,srcNode);
}
edge.setWeight(weight);
edge.getEdgeData().setAttributes(factory.newEdgeAttributes(edge.getEdgeData()));
edge.getEdgeData().setId(String.valueOf(edge.getId()));
edge.getEdgeData().setTextData(factory.newTextData());
srcNode.getEdgesOutTree().add(edge);
destNode.getEdgesInTree().add(edge);
graphStructure.addToDictionnary(edge);
break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_EDGES.equalsIgnoreCase(reader.getLocalName())) {
end=true;
}
break;
}
}
graphStructure.getMainView().getStructureModifier().getEdgeProcessor().computeMetaEdges();
}",0.9863813229571984
189864,"public void writeNodeData(XMLStreamWriter writer,NodeDataImpl nodeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_NODEDATA);
  AbstractNode node=nodeData.getRootNode();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getPre()));
  if (nodeData.getId() != null && !nodeData.getId().equals(""String_Node_Str"" + node.getId())) {
    writer.writeAttribute(""String_Node_Str"",nodeData.getId());
  }
  writer.writeStartElement(ELEMENT_NODEDATA_POSITION);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.x()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.y()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.z()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.alpha()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_SIZE);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.getSize()));
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeNodeData(XMLStreamWriter writer,NodeDataImpl nodeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_NODEDATA);
  AbstractNode node=nodeData.getRootNode();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getPre()));
  if (nodeData.getId() != null && !nodeData.getId().equals(String.valueOf(node.getId()))) {
    writer.writeAttribute(""String_Node_Str"",nodeData.getId());
  }
  writer.writeStartElement(ELEMENT_NODEDATA_POSITION);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.x()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.y()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.z()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.alpha()));
  writer.writeEndElement();
  writer.writeStartElement(ELEMENT_NODEDATA_SIZE);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(nodeData.getSize()));
  writer.writeEndElement();
  writer.writeEndElement();
}",0.986046511627907
189865,"public void writeEdgeData(XMLStreamWriter writer,EdgeDataImpl edgeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_EDGEDATA);
  AbstractEdge edge=edgeData.getEdge();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getSource().getPre()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getTarget().getPre()));
  if (edgeData.getId() != null && !edgeData.getId().equals(""String_Node_Str"" + edge.getId())) {
    writer.writeAttribute(""String_Node_Str"",edgeData.getId());
  }
  writer.writeStartElement(ELEMENT_EDGEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.alpha()));
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeEdgeData(XMLStreamWriter writer,EdgeDataImpl edgeData) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_EDGEDATA);
  AbstractEdge edge=edgeData.getEdge();
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getSource().getPre()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getTarget().getPre()));
  if (edgeData.getId() != null && !edgeData.getId().equals(String.valueOf(edge.getId()))) {
    writer.writeAttribute(""String_Node_Str"",edgeData.getId());
  }
  writer.writeStartElement(ELEMENT_EDGEDATA_COLOR);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.r()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.g()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.b()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(edgeData.alpha()));
  writer.writeEndElement();
  writer.writeEndElement();
}",0.9805194805194806
189866,"private synchronized AttributeColumnImpl addColumn(String id,String title,AttributeType type,AttributeOrigin origin,Object defaultValue,AttributeValueDelegateProvider attributeValueDelegateProvider){
  if (title == null || title.isEmpty() || hasColumn(title)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (defaultValue != null) {
    if (defaultValue.getClass() != type.getType()) {
      if (defaultValue.getClass() == String.class) {
        defaultValue=type.parse((String)defaultValue);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    defaultValue=model.getManagedValue(defaultValue,type);
  }
  AttributeColumnImpl column=new AttributeColumnImpl(this,columns.size(),id,title,type,origin,defaultValue,attributeValueDelegateProvider);
  columns.add(column);
  columnsMap.put(id,column);
  if (title != null && !title.equals(id)) {
    columnsMap.put(title.toLowerCase(),column);
  }
  columnsSet.put(column,column);
  version++;
  model.fireAttributeEvent(new ColumnEvent(AttributeEvent.EventType.ADD_COLUMN,column));
  return column;
}","private synchronized AttributeColumnImpl addColumn(String id,String title,AttributeType type,AttributeOrigin origin,Object defaultValue,AttributeValueDelegateProvider attributeValueDelegateProvider){
  if (title == null || title.isEmpty() || hasColumn(title)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (defaultValue != null) {
    if (defaultValue.getClass() != type.getType()) {
      if (defaultValue.getClass() == String.class) {
        defaultValue=type.parse((String)defaultValue);
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    defaultValue=model.getManagedValue(defaultValue,type);
  }
  AttributeColumnImpl column=new AttributeColumnImpl(this,columns.size(),id,title,type,origin,defaultValue,attributeValueDelegateProvider);
  columns.add(column);
  columnsMap.put(id,column);
  if (title != null && !title.equals(id)) {
    columnsMap.put(title,column);
  }
  columnsSet.put(column,column);
  version++;
  model.fireAttributeEvent(new ColumnEvent(AttributeEvent.EventType.ADD_COLUMN,column));
  return column;
}",0.9936708860759492
189867,"public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
 else {
        edge=graph.getEdge(source,target);
        if (edge != null) {
          String weight=reader.get(edges.getColumn(PropertiesColumn.EDGE_WEIGHT.getIndex()).getTitle());
          if (weight != null) {
            try {
              Float weightFloat=Float.parseFloat(weight);
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + weightFloat);
            }
 catch (            NumberFormatException numberFormatException) {
              edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
            }
          }
 else {
            edge.getEdgeData().getAttributes().setValue(PropertiesColumn.EDGE_WEIGHT.getIndex(),edge.getWeight() + 1);
          }
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9230595157275402
189868,"private void readDataTablesModel(XMLStreamReader reader,Workspace workspace) throws XMLStreamException {
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  AttributeTable nodesTable=attributeModel.getNodeTable();
  AttributeTable edgesTable=attributeModel.getEdgeTable();
  DataTablesModel dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel());
  }
  AvailableColumnsModel nodeColumns=dataTablesModel.getNodeAvailableColumnsModel();
  nodeColumns.removeAllColumns();
  AvailableColumnsModel edgeColumns=dataTablesModel.getEdgeAvailableColumnsModel();
  edgeColumns.removeAllColumns();
  boolean end=false;
  while (reader.hasNext() && !end) {
    Integer eventType=reader.next();
    if (eventType.equals(XMLEvent.START_ELEMENT)) {
      String name=reader.getLocalName();
      if (NODE_COLUMN.equalsIgnoreCase(name)) {
        Integer id=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
        AttributeColumn column=nodesTable.getColumn(id);
        if (column != null) {
          nodeColumns.addAvailableColumn(column);
        }
      }
 else       if (EDGE_COLUMN.equalsIgnoreCase(name)) {
        String id=reader.getAttributeValue(null,""String_Node_Str"");
        AttributeColumn column=edgesTable.getColumn(id);
        if (column != null) {
          edgeColumns.addAvailableColumn(column);
        }
      }
    }
 else     if (eventType.equals(XMLStreamReader.END_ELEMENT)) {
      if (AVAILABLE_COLUMNS.equalsIgnoreCase(reader.getLocalName())) {
        end=true;
      }
    }
  }
}","private void readDataTablesModel(XMLStreamReader reader,Workspace workspace) throws XMLStreamException {
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  AttributeTable nodesTable=attributeModel.getNodeTable();
  AttributeTable edgesTable=attributeModel.getEdgeTable();
  DataTablesModel dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel());
  }
  AvailableColumnsModel nodeColumns=dataTablesModel.getNodeAvailableColumnsModel();
  nodeColumns.removeAllColumns();
  AvailableColumnsModel edgeColumns=dataTablesModel.getEdgeAvailableColumnsModel();
  edgeColumns.removeAllColumns();
  boolean end=false;
  while (reader.hasNext() && !end) {
    Integer eventType=reader.next();
    if (eventType.equals(XMLEvent.START_ELEMENT)) {
      String name=reader.getLocalName();
      if (NODE_COLUMN.equalsIgnoreCase(name)) {
        Integer id=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
        AttributeColumn column=nodesTable.getColumn(id);
        if (column != null) {
          nodeColumns.addAvailableColumn(column);
        }
      }
 else       if (EDGE_COLUMN.equalsIgnoreCase(name)) {
        Integer id=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
        AttributeColumn column=edgesTable.getColumn(id);
        if (column != null) {
          edgeColumns.addAvailableColumn(column);
        }
      }
    }
 else     if (eventType.equals(XMLStreamReader.END_ELEMENT)) {
      if (AVAILABLE_COLUMNS.equalsIgnoreCase(reader.getLocalName())) {
        end=true;
      }
    }
  }
}",0.9882988298829884
189869,"public boolean add(int node){
  nodes.addLast(new Integer(node));
  weightSum+=structure.weights[node];
  if (!isRandomized) {
    min=Math.min(node,min);
  }
  return true;
}","public boolean add(int node){
  nodes.addLast(new Integer(node));
  weightSum+=structure.weights[node];
  return true;
}",0.8135593220338984
189870,"public void seed(int node){
  nodes.add(node);
  weightSum+=structure.weights[node];
  min=node;
}","public void seed(int node){
  nodes.add(node);
  weightSum+=structure.weights[node];
}",0.9347826086956522
189871,"private void zoomOut(){
  int M=communities.size();
  LinkedList<ModEdge>[] newTopology=new LinkedList[M];
  int index=0;
  nodeCommunities=new Community[M];
  nodeConnections=new HashMap[M];
  HashMap<Integer,Community> newInvMap=new HashMap<Integer,Community>();
  for (int i=0; i < communities.size(); i++) {
    Community com=communities.get(i);
    nodeConnections[index]=new HashMap<Community,Integer>();
    newTopology[index]=new LinkedList<ModEdge>();
    nodeCommunities[index]=new Community(com);
    Set<Community> iter=com.connections.keySet();
    double weightSum=0;
    Community hidden=new Community(structure);
    for (    Integer nodeInt : com.nodes) {
      Community oldHidden=invMap.get(nodeInt);
      hidden.nodes.addAll(oldHidden.nodes);
    }
    newInvMap.put(index,hidden);
    for (    Community adjCom : iter) {
      int target=communities.indexOf(adjCom);
      int weight=com.connections.get(adjCom);
      weightSum+=weight;
      ModEdge e=new ModEdge(index,target,weight);
      newTopology[index].add(e);
    }
    weights[index]=weightSum;
    nodeCommunities[index].seed(index);
    index++;
  }
  communities.clear();
  for (int i=0; i < M; i++) {
    Community com=nodeCommunities[i];
    communities.add(com);
    for (    ModEdge e : newTopology[i]) {
      nodeConnections[i].put(nodeCommunities[e.target],e.weight);
      com.connections.put(nodeCommunities[e.target],e.weight);
    }
  }
  N=M;
  topology=newTopology;
  invMap=newInvMap;
}","private void zoomOut(){
  int M=communities.size();
  LinkedList<ModEdge>[] newTopology=new LinkedList[M];
  int index=0;
  nodeCommunities=new Community[M];
  nodeConnections=new HashMap[M];
  HashMap<Integer,Community> newInvMap=new HashMap<Integer,Community>();
  for (int i=0; i < communities.size(); i++) {
    Community com=communities.get(i);
    nodeConnections[index]=new HashMap<Community,Integer>();
    newTopology[index]=new LinkedList<ModEdge>();
    nodeCommunities[index]=new Community(com);
    Set<Community> iter=com.connections.keySet();
    double weightSum=0;
    Community hidden=new Community(structure);
    for (    Integer nodeInt : com.nodes) {
      Community oldHidden=invMap.get(nodeInt);
      hidden.nodes.addAll(oldHidden.nodes);
    }
    newInvMap.put(index,hidden);
    for (    Community adjCom : iter) {
      int target=communities.indexOf(adjCom);
      int weight=com.connections.get(adjCom);
      if (target == index)       weightSum+=2 * weight;
 else       weightSum+=weight;
      ModEdge e=new ModEdge(index,target,weight);
      newTopology[index].add(e);
    }
    weights[index]=weightSum;
    nodeCommunities[index].seed(index);
    index++;
  }
  communities.clear();
  for (int i=0; i < M; i++) {
    Community com=nodeCommunities[i];
    communities.add(com);
    for (    ModEdge e : newTopology[i]) {
      nodeConnections[i].put(nodeCommunities[e.target],e.weight);
      com.connections.put(nodeCommunities[e.target],e.weight);
    }
  }
  N=M;
  topology=newTopology;
  invMap=newInvMap;
}",0.9795783926218709
189872,"public void execute(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  Progress.start(progress);
  Random rand=new Random();
  hgraph.readLock();
  structure=new CommunityStructure(hgraph);
  if (isCanceled) {
    hgraph.readUnlockAll();
    return;
  }
  boolean someChange=true;
  while (someChange) {
    someChange=false;
    boolean localChange=true;
    while (localChange) {
      localChange=false;
      int start=0;
      if (isRandomized) {
        start=Math.abs(rand.nextInt()) % structure.N;
      }
      int step=0;
      for (int i=start; step < structure.N; i=(i + 1) % structure.N) {
        step++;
        double best=0;
        double current=q(i,structure.nodeCommunities[i]);
        Community bestCommunity=null;
        int smallest=Integer.MAX_VALUE;
        Set<Community> iter=structure.nodeConnections[i].keySet();
        for (        Community com : iter) {
          double qValue=q(i,com) - current;
          if (qValue > best) {
            best=qValue;
            bestCommunity=com;
            smallest=com.getMin();
          }
 else           if ((qValue == best) && (com.getMin() < smallest)) {
            best=qValue;
            bestCommunity=com;
            smallest=com.getMin();
          }
        }
        if ((structure.nodeCommunities[i] != bestCommunity) && (bestCommunity != null)) {
          structure.moveNodeTo(i,bestCommunity);
          localChange=true;
        }
        if (isCanceled) {
          hgraph.readUnlockAll();
          return;
        }
      }
      someChange=localChange || someChange;
      if (isCanceled) {
        hgraph.readUnlockAll();
        return;
      }
    }
    if (someChange) {
      structure.zoomOut();
    }
  }
  int[] comStructure=new int[hgraph.getNodeCount()];
  int count=0;
  double[] degreeCount=new double[structure.communities.size()];
  for (  Community com : structure.communities) {
    for (    Integer node : com.nodes) {
      Community hidden=structure.invMap.get(node);
      for (      Integer nodeInt : hidden.nodes) {
        comStructure[nodeInt]=count;
      }
    }
    count++;
  }
  for (  Node node : hgraph.getNodes()) {
    int index=structure.map.get(node);
    degreeCount[comStructure[index]]+=hgraph.getTotalDegree(node);
  }
  modularity=finalQ(comStructure,degreeCount,hgraph,attributeModel);
  hgraph.readUnlock();
}","public void execute(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  Progress.start(progress);
  Random rand=new Random();
  hgraph.readLock();
  structure=new CommunityStructure(hgraph);
  if (isCanceled) {
    hgraph.readUnlockAll();
    return;
  }
  boolean someChange=true;
  while (someChange) {
    someChange=false;
    boolean localChange=true;
    while (localChange) {
      localChange=false;
      int start=0;
      if (isRandomized) {
        start=Math.abs(rand.nextInt()) % structure.N;
      }
      int step=0;
      for (int i=start; step < structure.N; i=(i + 1) % structure.N) {
        step++;
        double best=0.;
        Community bestCommunity=null;
        Community nodecom=structure.nodeCommunities[i];
        Set<Community> iter=structure.nodeConnections[i].keySet();
        for (        Community com : iter) {
          double qValue=q(i,com);
          if (qValue > best) {
            best=qValue;
            bestCommunity=com;
          }
        }
        if ((structure.nodeCommunities[i] != bestCommunity) && (bestCommunity != null)) {
          structure.moveNodeTo(i,bestCommunity);
          localChange=true;
        }
        if (isCanceled) {
          hgraph.readUnlockAll();
          return;
        }
      }
      someChange=localChange || someChange;
      if (isCanceled) {
        hgraph.readUnlockAll();
        return;
      }
    }
    if (someChange) {
      structure.zoomOut();
    }
  }
  int[] comStructure=new int[hgraph.getNodeCount()];
  int count=0;
  double[] degreeCount=new double[structure.communities.size()];
  for (  Community com : structure.communities) {
    for (    Integer node : com.nodes) {
      Community hidden=structure.invMap.get(node);
      for (      Integer nodeInt : hidden.nodes) {
        comStructure[nodeInt]=count;
      }
    }
    count++;
  }
  for (  Node node : hgraph.getNodes()) {
    int index=structure.map.get(node);
    degreeCount[comStructure[index]]+=hgraph.getTotalDegree(node);
  }
  modularity=finalQ(comStructure,degreeCount,hgraph,attributeModel);
  hgraph.readUnlock();
}",0.913716814159292
189873,"public boolean remove(int node){
  boolean result=nodes.remove(new Integer(node));
  weightSum-=structure.weights[node];
  if (nodes.size() == 0) {
    structure.communities.remove(this);
  }
  if (!isRandomized) {
    if (node == min.intValue()) {
      min=Integer.MAX_VALUE;
      for (      Integer other : nodes) {
        min=Math.min(other,min);
      }
    }
  }
  return result;
}","public boolean remove(int node){
  boolean result=nodes.remove(new Integer(node));
  weightSum-=structure.weights[node];
  if (nodes.size() == 0) {
    structure.communities.remove(this);
  }
  return result;
}",0.6510851419031719
189874,"private double q(int node,Community community){
  Integer edgesToInt=structure.nodeConnections[node].get(community);
  double edgesTo=0;
  if (edgesToInt != null) {
    edgesTo=edgesToInt.doubleValue();
  }
  double weightSum=community.weightSum;
  double nodeWeight=structure.weights[node];
  double qValue=edgesTo - (nodeWeight * weightSum) / (2.0 * structure.graphWeightSum);
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() > 1)) {
    qValue=edgesTo - (nodeWeight * (weightSum - nodeWeight)) / (2.0 * structure.graphWeightSum);
  }
  return qValue;
}","private double q(int node,Community community){
  Integer edgesToInt=structure.nodeConnections[node].get(community);
  double edgesTo=0;
  if (edgesToInt != null) {
    edgesTo=edgesToInt.doubleValue();
  }
  double weightSum=community.weightSum;
  double nodeWeight=structure.weights[node];
  double qValue=edgesTo - (nodeWeight * weightSum) / (2.0 * structure.graphWeightSum);
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() > 1)) {
    qValue=edgesTo - (nodeWeight * (weightSum - nodeWeight)) / (2.0 * structure.graphWeightSum);
  }
  if ((structure.nodeCommunities[node] == community) && (structure.nodeCommunities[node].size() == 1)) {
    qValue=0.;
  }
  return qValue;
}",0.8945783132530121
189875,"public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < N; i++) {
    Double d=nodeClustering[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createScatterPlot(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,false);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str"";
}","public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < N; i++) {
    Double d=nodeClustering[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createScatterPlot(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,false);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(avgClusteringCoeff)+ ""String_Node_Str""+ ""String_Node_Str""+ totalTriangles+ ""String_Node_Str""+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.953144786829886
189876,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  bruteForce(hgraph,attributeModel);
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph,attributeModel);
}",0.9442379182156134
189877,"private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  for (  Node s : hgraph.getNodes()) {
    int v=indicies.get(s);
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}","private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  AttributeColumn triCount=nodeTable.getColumn(""String_Node_Str"");
  if (triCount == null) {
    triCount=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  for (int v=0; v < N; v++) {
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)network[v].node.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      row.setValue(triCount,triangles[v]);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}",0.9522773623385452
189878,"public String getReport(){
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ componentCount+ ""String_Node_Str""+ (isDirected ? ""String_Node_Str"" + stronglyCount + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"";
  return report;
}","public String getReport(){
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ componentCount+ ""String_Node_Str""+ (isDirected ? ""String_Node_Str"" + stronglyCount + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.935738444193912
189879,"/** 
 * @return
 */
public String getReport(){
  String htmlIMG1=""String_Node_Str"";
  String htmlIMG2=""String_Node_Str"";
  String htmlIMG3=""String_Node_Str"";
  try {
    TempDir tempDir=TempDirUtils.createTempDir();
    htmlIMG1=createImageFile(tempDir,betweenness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG2=createImageFile(tempDir,closeness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG3=createImageFile(tempDir,eccentricity,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ diameter+ ""String_Node_Str""+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ avgDist+ ""String_Node_Str""+ ""String_Node_Str""+ shortestPaths+ ""String_Node_Str""+ htmlIMG1+ ""String_Node_Str""+ htmlIMG2+ ""String_Node_Str""+ htmlIMG3+ ""String_Node_Str"";
  return report;
}","/** 
 * @return
 */
public String getReport(){
  String htmlIMG1=""String_Node_Str"";
  String htmlIMG2=""String_Node_Str"";
  String htmlIMG3=""String_Node_Str"";
  try {
    TempDir tempDir=TempDirUtils.createTempDir();
    htmlIMG1=createImageFile(tempDir,betweenness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG2=createImageFile(tempDir,closeness,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    htmlIMG3=createImageFile(tempDir,eccentricity,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (isDirected ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ diameter+ ""String_Node_Str""+ ""String_Node_Str""+ radius+ ""String_Node_Str""+ ""String_Node_Str""+ avgDist+ ""String_Node_Str""+ ""String_Node_Str""+ shortestPaths+ ""String_Node_Str""+ htmlIMG1+ ""String_Node_Str""+ htmlIMG2+ ""String_Node_Str""+ htmlIMG3+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.9749230092388912
189880,"/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> distHubs=new HashMap<Double,Integer>();
  for (  Node node : hub_list) {
    int n_index=indicies.get(node);
    Double d=hubs[n_index];
    if (distHubs.containsKey(d)) {
      Integer v=distHubs.get(d);
      distHubs.put(d,v + 1);
    }
 else {
      distHubs.put(d,1);
    }
  }
  Map<Double,Integer> distAuthorities=new HashMap<Double,Integer>();
  for (  Node node : auth_list) {
    int n_index=indicies.get(node);
    Double d=authority[n_index];
    if (distAuthorities.containsKey(d)) {
      Integer v=distAuthorities.get(d);
      distAuthorities.put(d,v + 1);
    }
 else {
      distAuthorities.put(d,1);
    }
  }
  XYSeries dHubsSeries=ChartUtils.createXYSeries(distHubs,""String_Node_Str"");
  XYSeries dAuthsSeries=ChartUtils.createXYSeries(distAuthorities,""String_Node_Str"");
  XYSeriesCollection datasetHubs=new XYSeriesCollection();
  datasetHubs.addSeries(dHubsSeries);
  XYSeriesCollection datasetAuths=new XYSeriesCollection();
  datasetAuths.addSeries(dAuthsSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetHubs,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dHubsSeries,true);
  String imageFile1=ChartUtils.renderChart(chart,""String_Node_Str"");
  JFreeChart chart2=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetAuths,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart2);
  ChartUtils.scaleChart(chart,dAuthsSeries,true);
  String imageFile2=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.epsilon + ""String_Node_Str""+ imageFile1+ ""String_Node_Str""+ imageFile2+ ""String_Node_Str"";
  return report;
}","/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> distHubs=new HashMap<Double,Integer>();
  for (  Node node : hub_list) {
    int n_index=indicies.get(node);
    Double d=hubs[n_index];
    if (distHubs.containsKey(d)) {
      Integer v=distHubs.get(d);
      distHubs.put(d,v + 1);
    }
 else {
      distHubs.put(d,1);
    }
  }
  Map<Double,Integer> distAuthorities=new HashMap<Double,Integer>();
  for (  Node node : auth_list) {
    int n_index=indicies.get(node);
    Double d=authority[n_index];
    if (distAuthorities.containsKey(d)) {
      Integer v=distAuthorities.get(d);
      distAuthorities.put(d,v + 1);
    }
 else {
      distAuthorities.put(d,1);
    }
  }
  XYSeries dHubsSeries=ChartUtils.createXYSeries(distHubs,""String_Node_Str"");
  XYSeries dAuthsSeries=ChartUtils.createXYSeries(distAuthorities,""String_Node_Str"");
  XYSeriesCollection datasetHubs=new XYSeriesCollection();
  datasetHubs.addSeries(dHubsSeries);
  XYSeriesCollection datasetAuths=new XYSeriesCollection();
  datasetAuths.addSeries(dAuthsSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetHubs,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dHubsSeries,true);
  String imageFile1=ChartUtils.renderChart(chart,""String_Node_Str"");
  JFreeChart chart2=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",datasetAuths,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart2);
  ChartUtils.scaleChart(chart,dAuthsSeries,true);
  String imageFile2=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + this.epsilon + ""String_Node_Str""+ imageFile1+ ""String_Node_Str""+ imageFile2+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.9852063327277446
189881,"public String getReport(){
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + (isRandomized ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(modularity)+ ""String_Node_Str""+ ""String_Node_Str""+ structure.communities.size()+ ""String_Node_Str"";
  return report;
}","public String getReport(){
  NumberFormat f=new DecimalFormat(""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + (isRandomized ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ f.format(modularity)+ ""String_Node_Str""+ ""String_Node_Str""+ structure.communities.size()+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.9361702127659576
189882,"/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < pageranks.length; i++) {
    Double d=pageranks[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,true);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + epsilon + ""String_Node_Str""+ ""String_Node_Str""+ probability+ ""String_Node_Str""+ imageFile+ ""String_Node_Str"";
  return report;
}","/** 
 * @return
 */
public String getReport(){
  Map<Double,Integer> dist=new HashMap<Double,Integer>();
  for (int i=0; i < pageranks.length; i++) {
    Double d=pageranks[i];
    if (dist.containsKey(d)) {
      Integer v=dist.get(d);
      dist.put(d,v + 1);
    }
 else {
      dist.put(d,1);
    }
  }
  XYSeries dSeries=ChartUtils.createXYSeries(dist,""String_Node_Str"");
  XYSeriesCollection dataset=new XYSeriesCollection();
  dataset.addSeries(dSeries);
  JFreeChart chart=ChartFactory.createXYLineChart(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  ChartUtils.decorateChart(chart);
  ChartUtils.scaleChart(chart,dSeries,true);
  String imageFile=ChartUtils.renderChart(chart,""String_Node_Str"");
  String report=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + epsilon + ""String_Node_Str""+ ""String_Node_Str""+ probability+ ""String_Node_Str""+ imageFile+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  return report;
}",0.971990171990172
189883,"private PreviewTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    previewPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  if (UIUtils.isAquaLookAndFeel()) {
    southToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  bannerPanel.setVisible(false);
  sketch=new ProcessingPreview();
  sketchPanel.add(sketch,BorderLayout.CENTER);
  Thread initProcessing=new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          sketch.init();
          sketch.registerPost(processingListener);
          sketch.registerPre(processingListener);
        }
      }
);
    }
  }
);
  initProcessing.start();
  PreviewUIController.findInstance();
  ((JColorButton)backgroundButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
      controller.setBackgroundColor((Color)evt.getNewValue());
    }
  }
);
  southBusyLabel.setVisible(false);
  resetZoomButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      sketch.resetZoom();
    }
  }
);
}","private PreviewTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    previewPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  if (UIUtils.isAquaLookAndFeel()) {
    southToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  bannerPanel.setVisible(false);
  sketch=new ProcessingPreview();
  sketch.init();
  sketch.registerPost(processingListener);
  sketch.registerPre(processingListener);
  sketchPanel.add(sketch,BorderLayout.CENTER);
  PreviewUIController.findInstance();
  ((JColorButton)backgroundButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
      controller.setBackgroundColor((Color)evt.getNewValue());
    }
  }
);
  southBusyLabel.setVisible(false);
  resetZoomButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      sketch.resetZoom();
    }
  }
);
}",0.7898975109809663
189884,"private void refreshSharedConfig(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  setEnable(!vizModel.isDefaultModel());
  if (vizModel.isDefaultModel()) {
    return;
  }
  if (showEdgesCheckbox.isSelected() != vizModel.isShowEdges()) {
    showEdgesCheckbox.setSelected(vizModel.isShowEdges());
  }
  float[] edgeCol=vizModel.getEdgeUniColor();
  ((JColorButton)edgeColorButton).setColor(new Color(edgeCol[0],edgeCol[1],edgeCol[2],edgeCol[3]));
  if (sourceNodeColorCheckbox.isSelected() != !vizModel.isEdgeHasUniColor()) {
    sourceNodeColorCheckbox.setSelected(!vizModel.isEdgeHasUniColor());
  }
  if (selectionColorCheckbox.isSelected() != vizModel.isEdgeSelectionColor()) {
    selectionColorCheckbox.setSelected(vizModel.isEdgeSelectionColor());
  }
  Color in=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeInSelectionColor(),1f);
  Color out=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeOutSelectionColor(),1f);
  Color both=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeBothSelectionColor(),1f);
  if (!edgeInSelectionColorChooser.getColor().equals(in)) {
    edgeInSelectionColorChooser.setColor(in);
  }
  if (!edgeBothSelectionColorChooser.getColor().equals(out)) {
    edgeBothSelectionColorChooser.setColor(out);
  }
  if (!edgeOutSelectionColorChooser.getColor().equals(both)) {
    edgeOutSelectionColorChooser.setColor(both);
  }
  if (scaleSlider.getValue() / 10f + 0.1f != vizModel.getEdgeScale()) {
    scaleSlider.setValue((int)((vizModel.getEdgeScale() - 0.1f) * 10));
  }
  if (metaScaleSlider.getValue() / 50f + 0.0001f != vizModel.getMetaEdgeScale()) {
    metaScaleSlider.setValue((int)((vizModel.getMetaEdgeScale() - 0.0001f) * 50));
  }
}","private void refreshSharedConfig(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  setEnable(!vizModel.isDefaultModel());
  if (vizModel.isDefaultModel()) {
    return;
  }
  if (showEdgesCheckbox.isSelected() != vizModel.isShowEdges()) {
    showEdgesCheckbox.setSelected(vizModel.isShowEdges());
  }
  float[] edgeCol=vizModel.getEdgeUniColor();
  ((JColorButton)edgeColorButton).setColor(new Color(edgeCol[0],edgeCol[1],edgeCol[2],edgeCol[3]));
  if (sourceNodeColorCheckbox.isSelected() != !vizModel.isEdgeHasUniColor()) {
    sourceNodeColorCheckbox.setSelected(!vizModel.isEdgeHasUniColor());
  }
  if (selectionColorCheckbox.isSelected() != vizModel.isEdgeSelectionColor()) {
    selectionColorCheckbox.setSelected(vizModel.isEdgeSelectionColor());
  }
  Color in=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeInSelectionColor(),1f);
  Color out=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeOutSelectionColor(),1f);
  Color both=new Color(ColorSpace.getInstance(ColorSpace.CS_sRGB),vizModel.getEdgeBothSelectionColor(),1f);
  if (!edgeInSelectionColorChooser.getColor().equals(in)) {
    edgeInSelectionColorChooser.setColor(in);
  }
  if (!edgeBothSelectionColorChooser.getColor().equals(both)) {
    edgeBothSelectionColorChooser.setColor(both);
  }
  if (!edgeOutSelectionColorChooser.getColor().equals(out)) {
    edgeOutSelectionColorChooser.setColor(out);
  }
  if (scaleSlider.getValue() / 10f + 0.1f != vizModel.getEdgeScale()) {
    scaleSlider.setValue((int)((vizModel.getEdgeScale() - 0.1f) * 10));
  }
  if (metaScaleSlider.getValue() / 50f + 0.0001f != vizModel.getMetaEdgeScale()) {
    metaScaleSlider.setValue((int)((vizModel.getMetaEdgeScale() - 0.0001f) * 50));
  }
}",0.9920318725099602
189885,"public boolean execute(){
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  Graph graph=null;
  if (exportVisible) {
    graph=graphModel.getGraphVisible();
  }
 else {
    graph=graphModel.getGraph();
  }
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return !cancel;
}","public boolean execute(){
  GraphModel graphModel=workspace.getLookup().lookup(GraphModel.class);
  HierarchicalGraph graph=null;
  if (exportVisible) {
    graph=graphModel.getHierarchicalGraphVisible();
  }
 else {
    graph=graphModel.getHierarchicalGraph();
  }
  try {
    exportData(graph);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return !cancel;
}",0.9508196721311476
189886,"private void exportData(Graph graph) throws Exception {
  int max=graph.getNodeCount(), i=1;
  HashMap<Integer,Integer> idx=new HashMap<Integer,Integer>(3 * max / 2 + 1);
  Progress.start(progressTicket,max);
  writer.append(""String_Node_Str"" + max + ""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    writer.append(Integer.toString(i));
    writer.append(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
    if (nodeCoords) {
      writer.append(""String_Node_Str"" + node.getNodeData().x() + ""String_Node_Str""+ node.getNodeData().y()+ ""String_Node_Str""+ node.getNodeData().z());
    }
    writer.append(""String_Node_Str"");
    idx.put(node.getId(),i++);
  }
  if (graph instanceof UndirectedGraph) {
    writer.append(""String_Node_Str"");
  }
 else {
    writer.append(""String_Node_Str"");
  }
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    if (edge != null) {
      writer.append(Integer.toString(idx.get(edge.getSource().getId())) + ""String_Node_Str"");
      writer.append(Integer.toString(idx.get(edge.getTarget().getId())));
      if (edgeWeight) {
        writer.append(""String_Node_Str"" + edge.getWeight());
      }
      writer.append(""String_Node_Str"");
    }
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}","private void exportData(HierarchicalGraph graph) throws Exception {
  int max=graph.getNodeCount(), i=1;
  HashMap<String,Integer> idx=new HashMap<String,Integer>(3 * max / 2 + 1);
  Progress.start(progressTicket,max);
  graph.readLock();
  writer.append(""String_Node_Str"" + max + ""String_Node_Str"");
  for (  Node node : graph.getNodes()) {
    writer.append(Integer.toString(i));
    writer.append(""String_Node_Str"" + node.getNodeData().getLabel() + ""String_Node_Str"");
    if (nodeCoords) {
      writer.append(""String_Node_Str"" + node.getNodeData().x() + ""String_Node_Str""+ node.getNodeData().y()+ ""String_Node_Str""+ node.getNodeData().z());
    }
    writer.append(""String_Node_Str"");
    idx.put(node.getNodeData().getId(),i++);
  }
  if (graph instanceof UndirectedGraph) {
    writer.append(""String_Node_Str"");
  }
 else {
    writer.append(""String_Node_Str"");
  }
  for (  Edge edge : graph.getEdges()) {
    if (cancel) {
      break;
    }
    if (edge != null) {
      writer.append(Integer.toString(idx.get(edge.getSource().getNodeData().getId())) + ""String_Node_Str"");
      writer.append(Integer.toString(idx.get(edge.getTarget().getNodeData().getId())));
      if (edgeWeight) {
        writer.append(""String_Node_Str"" + edge.getWeight());
      }
      writer.append(""String_Node_Str"");
    }
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}",0.9637155297532656
189887,"public void actionPerformed(ActionEvent e){
  ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
  if (exporterUI != null) {
    JPanel panel=exporterUI.getPanel();
    exporterUI.setup(selectedExporter);
    DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
    Object result=DialogDisplayer.getDefault().notify(dd);
    exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
  }
}","public void actionPerformed(ActionEvent e){
  ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
  if (exporterUI != null) {
    JPanel panel=exporterUI.getPanel();
    exporterUI.setup(selectedExporter);
    DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
    TopDialog topDialog=new TopDialog(dialog,dd.getTitle(),dd.isModal(),dd,dd.getClosingOptions(),dd.getButtonListener());
    topDialog.setVisible(true);
    Object result=(dd.getValue() != null) ? dd.getValue() : NotifyDescriptor.CLOSED_OPTION;
    exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
  }
}",0.7880794701986755
189888,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      dialog.setSize(640,480);
      dialog.setResizable(true);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        TopDialog topDialog=new TopDialog(dialog,dd.getTitle(),dd.isModal(),dd,dd.getClosingOptions(),dd.getButtonListener());
        topDialog.setVisible(true);
        Object result=(dd.getValue() != null) ? dd.getValue() : NotifyDescriptor.CLOSED_OPTION;
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      dialog=super.createDialog(parent);
      dialog.setSize(640,480);
      dialog.setResizable(true);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
  dialog=null;
}",0.9721826640083548
189889,"@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  JDialog dialog=super.createDialog(parent);
  dialog.setSize(640,480);
  dialog.setResizable(true);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}","@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  dialog=super.createDialog(parent);
  dialog.setSize(640,480);
  dialog.setResizable(true);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}",0.9923809523809524
189890,"private void initEvents(){
  resetButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      for (      Query query : filterModel.getQueries()) {
        controller.remove(query);
      }
      uiModel.setSelectedQuery(null);
      controller.selectVisible(null);
      controller.filterVisible(null);
      ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
    }
  }
);
  filterButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(null);
      }
    }
  }
);
  selectButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(null);
      }
    }
  }
);
  exportColumnButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        NotifyDescriptor.InputLine question=new NotifyDescriptor.InputLine(NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""),NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""));
        if (DialogDisplayer.getDefault().notify(question) == NotifyDescriptor.OK_OPTION) {
          String input=question.getInputText();
          if (input != null && !input.isEmpty()) {
            controller.exportToColumn(input,uiModel.getSelectedRoot());
          }
        }
      }
    }
  }
);
  exportWorkspaceButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToNewWorkspace(uiModel.getSelectedRoot());
      }
    }
  }
);
  exportLabelVisible.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToLabelVisible(uiModel.getSelectedRoot());
      }
    }
  }
);
  updateEnabled(false);
}","private void initEvents(){
  resetButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      for (      Query query : filterModel.getQueries()) {
        controller.remove(query);
      }
      controller.selectVisible(null);
      controller.filterVisible(null);
      ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
    }
  }
);
  filterButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.filterVisible(null);
      }
    }
  }
);
  selectButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(uiModel.getSelectedRoot());
      }
 else {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.selectVisible(null);
      }
    }
  }
);
  exportColumnButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        NotifyDescriptor.InputLine question=new NotifyDescriptor.InputLine(NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""),NbBundle.getMessage(FiltersPanel.class,""String_Node_Str""));
        if (DialogDisplayer.getDefault().notify(question) == NotifyDescriptor.OK_OPTION) {
          String input=question.getInputText();
          if (input != null && !input.isEmpty()) {
            controller.exportToColumn(input,uiModel.getSelectedRoot());
          }
        }
      }
    }
  }
);
  exportWorkspaceButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToNewWorkspace(uiModel.getSelectedRoot());
      }
    }
  }
);
  exportLabelVisible.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (uiModel.getSelectedQuery() != null) {
        FilterController controller=Lookup.getDefault().lookup(FilterController.class);
        controller.exportToLabelVisible(uiModel.getSelectedRoot());
      }
    }
  }
);
  updateEnabled(false);
}",0.9935549525101764
189891,"public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filterVisible(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.selectVisible(uiModel.getSelectedRoot());
    }
  }
  updateControls();
  updateEnabled(true);
}","public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filterVisible(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.selectVisible(uiModel.getSelectedRoot());
    }
  }
 else   if (e.getSource() instanceof FilterModel) {
    if (uiModel.getSelectedQuery() != null && filterModel.getCurrentQuery() == null) {
      uiModel.setSelectedQuery(null);
    }
 else     if (filterModel.getCurrentQuery() != null && filterModel.getCurrentQuery() != uiModel.getSelectedQuery()) {
      uiModel.setSelectedQuery(filterModel.getCurrentQuery());
    }
  }
  updateControls();
  updateEnabled(true);
}",0.7608695652173914
189892,"public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().equals(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}","public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().equals(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
 else {
    result.removeAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}",0.9819462791721708
189893,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      dialog.setSize(640,480);
      dialog.setResizable(true);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9937658289499318
189894,"@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  JDialog dialog=super.createDialog(parent);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}","@Override protected JDialog createDialog(Component parent) throws HeadlessException {
  JDialog dialog=super.createDialog(parent);
  dialog.setSize(640,480);
  dialog.setResizable(true);
  Component c=dialog.getContentPane().getComponent(0);
  if (c != null && c instanceof JComponent) {
    Insets insets=((JComponent)c).getInsets();
    southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
  }
  dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
  return dialog;
}",0.9441117764471058
189895,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
  int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta) >= (st - s)) {
      sf=st - s;
    }
 else {
      if (sf + delta <= 0) {
        sf=0;
      }
 else {
        sf+=delta;
      }
    }
  break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
  st=sf + s;
}
 else {
  if ((st + delta >= w)) {
    st=w;
  }
 else {
    st+=delta;
  }
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    int position=inPosition(x,r);
switch (position) {
case LOC_RESIZE_FROM:
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
    currentState=TimelineState.RESIZE_FROM;
  break;
case LOC_RESIZE_CENTER:
highlightedComponent=HighlightedComponent.CENTER_HOOK;
currentState=TimelineState.MOVING;
break;
case LOC_RESIZE_TO:
highlightedComponent=HighlightedComponent.RIGHT_HOOK;
currentState=TimelineState.RESIZE_TO;
break;
default :
break;
}
}
double delta=0;
if (latestMousePositionX != null) {
delta=x - latestMousePositionX;
}
latestMousePositionX=x;
int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
if ((sf + delta) >= (st - s)) {
sf=st - s;
}
 else {
if (sf + delta <= 0) {
sf=0;
}
 else {
sf+=delta;
}
}
break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
st=sf + s;
}
 else {
if ((st + delta >= w)) {
st=w;
}
 else {
st+=delta;
}
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.84098051539912
189896,"public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}","public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    int position=inPosition(x,r);
switch (position) {
case LOC_RESIZE_FROM:
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
    currentState=TimelineState.RESIZE_FROM;
  break;
case LOC_RESIZE_CENTER:
highlightedComponent=HighlightedComponent.CENTER_HOOK;
currentState=TimelineState.MOVING;
break;
case LOC_RESIZE_TO:
highlightedComponent=HighlightedComponent.RIGHT_HOOK;
currentState=TimelineState.RESIZE_TO;
break;
default :
break;
}
}
}",0.7614942528735632
189897,"public void mouseMoved(MouseEvent evt){
  if (model == null) {
    return;
  }
  currentMousePositionX=evt.getX();
  int x=currentMousePositionX;
  float w=getWidth();
  int r=settings.selection.visibleHookWidth;
  HighlightedComponent old=highlightedComponent;
  Cursor newCursor=null;
  int a=0;
  if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
    newCursor=CURSOR_LEFT_HOOK;
    highlightedComponent=HighlightedComponent.LEFT_HOOK;
  }
 else   if (inRange(x,(int)sf + r,(int)st - r)) {
    highlightedComponent=HighlightedComponent.CENTER_HOOK;
    newCursor=CURSOR_CENTRAL_HOOK;
  }
 else   if (inRange(x,(int)st - r - 1,(int)st + 1)) {
    highlightedComponent=HighlightedComponent.RIGHT_HOOK;
    newCursor=CURSOR_RIGHT_HOOK;
  }
 else {
    highlightedComponent=HighlightedComponent.NONE;
    newCursor=CURSOR_DEFAULT;
  }
  if (newCursor != getCursor()) {
    setCursor(newCursor);
  }
  repaint();
}","public void mouseMoved(MouseEvent evt){
  if (model == null) {
    return;
  }
  currentMousePositionX=evt.getX();
  int x=currentMousePositionX;
  float w=getWidth();
  int r=settings.selection.visibleHookWidth;
  HighlightedComponent old=highlightedComponent;
  Cursor newCursor=null;
  int a=0;
  int position=inPosition(x,r);
switch (position) {
case LOC_RESIZE_FROM:
    newCursor=CURSOR_LEFT_HOOK;
  highlightedComponent=HighlightedComponent.LEFT_HOOK;
break;
case LOC_RESIZE_CENTER:
highlightedComponent=HighlightedComponent.CENTER_HOOK;
newCursor=CURSOR_CENTRAL_HOOK;
break;
case LOC_RESIZE_TO:
highlightedComponent=HighlightedComponent.RIGHT_HOOK;
newCursor=CURSOR_RIGHT_HOOK;
break;
default :
highlightedComponent=HighlightedComponent.NONE;
newCursor=CURSOR_DEFAULT;
break;
}
if (newCursor != getCursor()) {
setCursor(newCursor);
}
repaint();
}",0.7287173666288309
189898,"@Override public Connection getConnection(String connectionUrl,String username,String passwd) throws SQLException {
  return DriverManager.getConnection(connectionUrl,username,passwd);
}","@Override public Connection getConnection(String connectionUrl,String username,String passwd) throws SQLException {
  if (!connectionUrl.contains(""String_Node_Str"")) {
    String dbname=connectionUrl.substring(connectionUrl.lastIndexOf('/') + 1);
    String url=connectionUrl.substring(0,connectionUrl.lastIndexOf('/'));
    connectionUrl=url + ""String_Node_Str"" + dbname;
  }
  return DriverManager.getConnection(connectionUrl,username,passwd);
}",0.5876777251184834
189899,"/** 
 * Hack to have a current workpace when opening workspace
 * @param temporaryOpeningWorkspace the opening workspace or null
 */
public void setTemporaryOpeningWorkspace(WorkspaceImpl temporaryOpeningWorkspace){
  this.temporaryOpeningWorkspace=temporaryOpeningWorkspace;
}","/** 
 * Hack to have a current workpace when opening workspace
 * @param temporaryOpeningWorkspace the opening workspace or null
 */
public void setTemporaryOpeningWorkspace(WorkspaceImpl temporaryOpeningWorkspace){
  this.temporaryOpeningWorkspace=temporaryOpeningWorkspace;
  if (temporaryOpeningWorkspace != null) {
    fireWorkspaceEvent(EventType.INITIALIZE,temporaryOpeningWorkspace);
  }
}",0.8231797919762258
189900,"public Float getUpperFloat(){
  return upperFloat;
}","public Float getUpperFloat(){
  return (Float)upperNumber;
}",0.8392857142857143
189901,"public boolean isInRange(Object value){
  if (rangeType == Double.class) {
    return isInRange((Double)value);
  }
 else   if (rangeType == Float.class) {
    return isInRange((Float)value);
  }
 else   if (rangeType == Integer.class) {
    return isInRange((Integer)value);
  }
 else   if (rangeType == Long.class) {
    return isInRange((Long)value);
  }
  return false;
}","public boolean isInRange(Number value){
  if (rangeType == Double.class) {
    return isInRange((Double)value);
  }
 else   if (rangeType == Float.class) {
    return isInRange((Float)value);
  }
 else   if (rangeType == Integer.class) {
    return isInRange((Integer)value);
  }
 else   if (rangeType == Long.class) {
    return isInRange((Long)value);
  }
 else   if (rangeType == Byte.class) {
    return isInRange((Byte)value);
  }
 else   if (rangeType == Short.class) {
    return isInRange((Short)value);
  }
  return false;
}",0.7797356828193832
189902,"public Object getUpperBound(){
  if (rangeType == Double.class) {
    return upperDouble;
  }
 else   if (rangeType == Float.class) {
    return upperFloat;
  }
 else   if (rangeType == Integer.class) {
    return upperInteger;
  }
 else   if (rangeType == Long.class) {
    return upperLong;
  }
  return null;
}","public Object getUpperBound(){
  return upperNumber;
}",0.2833787465940054
189903,"public Range(Object lowerBound,Object upperBound){
  if (lowerBound instanceof Double) {
    lowerDouble=(Double)lowerBound;
    upperDouble=(Double)upperBound;
    rangeType=Double.class;
  }
 else   if (lowerBound instanceof Float) {
    lowerFloat=(Float)lowerBound;
    upperFloat=(Float)upperBound;
    rangeType=Float.class;
  }
 else   if (lowerBound instanceof Integer) {
    lowerInteger=(Integer)lowerBound;
    upperInteger=(Integer)upperBound;
    rangeType=Integer.class;
  }
 else   if (lowerBound instanceof Long) {
    lowerLong=(Long)lowerBound;
    upperLong=(Long)upperBound;
    rangeType=Long.class;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public Range(Number lowerBound,Number upperBound,Number min,Number max){
  this(lowerBound,upperBound);
  if (!min.getClass().equals(lowerBound.getClass()) || !min.getClass().equals(max.getClass())) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.min=min;
  this.max=max;
}",0.1790744466800805
189904,"public Double getLowerDouble(){
  return lowerDouble;
}","public Double getLowerDouble(){
  return (Double)lowerNumber;
}",0.847457627118644
189905,"public Float getLowerFloat(){
  return lowerFloat;
}","public Float getLowerFloat(){
  return (Float)lowerNumber;
}",0.8392857142857143
189906,"public Integer getUpperInteger(){
  return upperInteger;
}","public Integer getUpperInteger(){
  return (Integer)upperNumber;
}",0.8548387096774194
189907,"public Integer getLowerInteger(){
  return lowerInteger;
}","public Integer getLowerInteger(){
  return (Integer)lowerNumber;
}",0.8548387096774194
189908,"public Double getUpperDouble(){
  return upperDouble;
}","public Double getUpperDouble(){
  return (Double)upperNumber;
}",0.847457627118644
189909,"@Override public String toString(){
  if (rangeType == Double.class) {
    return lowerDouble.toString() + ""String_Node_Str"" + upperDouble.toString();
  }
 else   if (rangeType == Float.class) {
    return lowerFloat.toString() + ""String_Node_Str"" + upperFloat.toString();
  }
 else   if (rangeType == Integer.class) {
    return lowerInteger.toString() + ""String_Node_Str"" + upperInteger.toString();
  }
 else   if (rangeType == Long.class) {
    return lowerLong.toString() + ""String_Node_Str"" + upperLong.toString();
  }
  return ""String_Node_Str"";
}","@Override public String toString(){
  return lowerNumber + ""String_Node_Str"" + upperNumber;
}",0.2755417956656347
189910,"public Object getLowerBound(){
  if (rangeType == Double.class) {
    return lowerDouble;
  }
 else   if (rangeType == Float.class) {
    return lowerFloat;
  }
 else   if (rangeType == Integer.class) {
    return lowerInteger;
  }
 else   if (rangeType == Long.class) {
    return lowerLong;
  }
  return null;
}","public Number getLowerBound(){
  return lowerNumber;
}",0.2615803814713896
189911,"public Long getUpperLong(){
  return upperLong;
}","public Long getUpperLong(){
  return (Long)upperNumber;
}",0.8490566037735849
189912,"public Long getLowerLong(){
  return lowerLong;
}","public Long getLowerLong(){
  return (Long)lowerNumber;
}",0.8490566037735849
189913,"private boolean isDynamic(Filter filter){
  Query filterQuery=null;
  for (  Query q : filterModel.getCurrentQuery().getQueries(filter.getClass())) {
    if (q.getFilter() == filter) {
      filterQuery=q;
      break;
    }
  }
  if (filterQuery != null) {
    for (    Query query : filterQuery.getDescendantsAndSelf()) {
      if (query.getFilter().getClass().equals(DynamicRangeFilter.class)) {
        return true;
      }
    }
  }
  return false;
}","private boolean isDynamic(Filter filter){
  if (filterModel.getCurrentQuery() == null) {
    return false;
  }
  Query filterQuery=null;
  for (  Query q : filterModel.getCurrentQuery().getQueries(filter.getClass())) {
    if (q.getFilter() == filter) {
      filterQuery=q;
      break;
    }
  }
  if (filterQuery != null) {
    for (    Query query : filterQuery.getDescendantsAndSelf()) {
      if (query.getFilter().getClass().equals(DynamicRangeFilter.class)) {
        return true;
      }
    }
  }
  return false;
}",0.8416751787538305
189914,"public void finish(){
  refreshRange();
}","public void finish(){
}",0.71875
189915,"public boolean init(Graph graph){
  HierarchicalGraph hg=graph.getGraphModel().getHierarchicalGraphVisible();
  dynamicHelper=new DynamicAttributesHelper(this,hg);
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Object>();
  return true;
}","public boolean init(Graph graph){
  HierarchicalGraph hg=graph.getGraphModel().getHierarchicalGraphVisible();
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    if (graph.getNodeCount() == 0) {
      return false;
    }
  }
 else   if (AttributeUtils.getDefault().isEdgeColumn(column)) {
    if (hg.getTotalEdgeCount() == 0) {
      return false;
    }
  }
  dynamicHelper=new DynamicAttributesHelper(this,hg);
  refreshValues(hg);
  return true;
}",0.4721845318860244
189916,"public Object[] getValues(){
  if (values == null) {
    GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel();
    HierarchicalGraph hgraph=gm.getHierarchicalGraphVisible();
    List<Object> vals=new ArrayList<Object>();
    if (AttributeUtils.getDefault().isNodeColumn(column)) {
      for (      Node n : hgraph.getNodes()) {
        Object val=n.getNodeData().getAttributes().getValue(column.getIndex());
        val=dynamicHelper.getDynamicValue(val);
        if (val != null) {
          vals.add(val);
        }
      }
    }
 else {
      for (      Edge e : hgraph.getEdgesAndMetaEdges()) {
        Object val=e.getEdgeData().getAttributes().getValue(column.getIndex());
        val=dynamicHelper.getDynamicValue(val);
        if (val != null) {
          vals.add(val);
        }
      }
    }
    if (vals.isEmpty()) {
      vals.add(0);
    }
    Comparable[] comparableArray=ComparableArrayConverter.convert(vals);
    min=AttributeUtils.getDefault().getMin(column,comparableArray);
    max=AttributeUtils.getDefault().getMax(column,comparableArray);
    refreshRange();
    return comparableArray;
  }
 else {
    Comparable[] comparableArray=ComparableArrayConverter.convert(values);
    min=AttributeUtils.getDefault().getMin(column,comparableArray);
    max=AttributeUtils.getDefault().getMax(column,comparableArray);
    return comparableArray;
  }
}","public Object[] getValues(){
  return values;
}",0.0654596100278551
189917,"public boolean evaluate(Graph graph,Edge edge){
  Object val=edge.getEdgeData().getAttributes().getValue(column.getIndex());
  val=dynamicHelper.getDynamicValue(val);
  if (val != null) {
    values.add(val);
    return range.isInRange(val);
  }
  return false;
}","public boolean evaluate(Graph graph,Edge edge){
  Object val=edge.getEdgeData().getAttributes().getValue(column.getIndex());
  val=dynamicHelper.getDynamicValue(val);
  if (val != null) {
    return range.isInRange((Number)val);
  }
  return false;
}",0.9434697855750488
189918,"public boolean init(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  dynamicHelper=new DynamicAttributesHelper(this,hgraph);
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Float>(hgraph.getTotalEdgeCount());
  min=Float.POSITIVE_INFINITY;
  max=Float.NEGATIVE_INFINITY;
  return true;
}","public boolean init(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  if (hgraph.getTotalEdgeCount() == 0) {
    return false;
  }
  dynamicHelper=new DynamicAttributesHelper(this,hgraph);
  refreshValues(graph);
  return true;
}",0.5252525252525253
189919,"public Object[] getValues(){
  if (values == null) {
    GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel();
    HierarchicalGraph hgraph=gm.getHierarchicalGraphVisible();
    Float[] weights=new Float[hgraph.getTotalEdgeCount()];
    int i=0;
    min=Float.MAX_VALUE;
    max=Float.MIN_VALUE;
    for (    Edge e : hgraph.getEdgesAndMetaEdges()) {
      float weight=dynamicHelper.getEdgeWeight(e);
      min=Math.min(min,weight);
      max=Math.max(max,weight);
      weights[i++]=weight;
    }
    refreshRange();
    return weights;
  }
 else {
    return values.toArray(new Float[0]);
  }
}","public Object[] getValues(){
  return values.toArray(new Float[0]);
}",0.2005813953488372
189920,"public void finish(){
  refreshRange();
}","public void finish(){
}",0.71875
189921,"public boolean evaluate(Graph graph,Edge edge){
  float weight=dynamicHelper.getEdgeWeight(edge);
  min=Math.min(min,weight);
  max=Math.max(max,weight);
  values.add(new Float(weight));
  return range.isInRange(weight);
}","public boolean evaluate(Graph graph,Edge edge){
  float weight=dynamicHelper.getEdgeWeight(edge);
  return range.isInRange(weight);
}",0.7492957746478873
189922,"private void attributesEdgeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!isEdgeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  edgeColumns=cols.toArray(new AttributeColumn[0]);
}","private void attributesEdgeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (exportAttributes && attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!isEdgeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  edgeColumns=cols.toArray(new AttributeColumn[0]);
}",0.9751861042183624
189923,"private void attributesNodeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!isNodeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  nodeColumns=cols.toArray(new AttributeColumn[0]);
}","private void attributesNodeColumns(AttributeModel attributeModel){
  List<AttributeColumn> cols=new ArrayList<AttributeColumn>();
  if (exportAttributes && attributeModel != null) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!isNodeDefaultColumn(column.getId())) {
        cols.add(column);
      }
    }
  }
  nodeColumns=cols.toArray(new AttributeColumn[0]);
}",0.9751861042183624
189924,"private void createDefaultGroups(){
  groups=new VizToolbarGroup[4];
  groups[0]=new GlobalGroupBar();
  groups[1]=new NodeGroupBar();
  groups[2]=new EdgeGroupBar();
  groups[3]=new LabelGroupBar();
  VizModel model=VizController.getInstance().getVizModel();
  model.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        VizModel model=VizController.getInstance().getVizModel();
        toolbar.setEnable(!model.isDefaultModel());
      }
    }
  }
);
}","private void createDefaultGroups(){
  groups=new VizToolbarGroup[4];
  groups[0]=new GlobalGroupBar();
  groups[1]=new NodeGroupBar();
  groups[2]=new EdgeGroupBar();
  groups[3]=new LabelGroupBar();
  VizModel model=VizController.getInstance().getVizModel();
  model.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        VizModel model=VizController.getInstance().getVizModel();
        toolbar.setEnable(!model.isDefaultModel());
        ((NodeGroupBar)groups[1]).setModelValues(model);
        ((EdgeGroupBar)groups[2]).setModelValues(model);
        ((LabelGroupBar)groups[3]).setModelValues(model);
      }
    }
  }
);
}",0.8720238095238095
189925,"public JComponent[] getToolbarComponents(){
  JComponent[] components=new JComponent[6];
  TextModel model=VizController.getInstance().getVizModel().getTextModel();
  final JPopupButton labelSizeModeButton=new JPopupButton();
  TextManager textManager=VizController.getInstance().getTextManager();
  for (  final SizeMode sm : textManager.getSizeModes()) {
    labelSizeModeButton.addItem(sm,sm.getIcon());
  }
  labelSizeModeButton.setSelectedItem(model.getSizeMode());
  labelSizeModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SizeMode sm=(SizeMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setSizeMode(sm);
    }
  }
);
  labelSizeModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelSizeModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getSizeMode() != labelSizeModeButton.getSelectedItem()) {
        labelSizeModeButton.setSelectedItem(model.getSizeMode());
      }
    }
  }
);
  components[0]=labelSizeModeButton;
  final JPopupButton labelColorModeButton=new JPopupButton();
  for (  final ColorMode cm : textManager.getColorModes()) {
    labelColorModeButton.addItem(cm,cm.getIcon());
  }
  labelColorModeButton.setSelectedItem(textManager.getModel().getColorMode());
  labelColorModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      ColorMode cm=(ColorMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setColorMode(cm);
    }
  }
);
  labelColorModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelColorModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getColorMode() != labelColorModeButton.getSelectedItem()) {
        labelColorModeButton.setSelectedItem(model.getColorMode());
      }
    }
  }
);
  components[1]=labelColorModeButton;
  final JButton fontButton=new JButton(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
  fontButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      Font font=JFontChooser.showDialog(WindowManager.getDefault().getMainWindow(),model.getNodeFont());
      if (font != null && font != model.getNodeFont()) {
        model.setNodeFont(font);
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      fontButton.setText(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
    }
  }
);
  components[2]=fontButton;
  final JSlider fontSizeSlider=new JSlider(0,100,(int)(model.getNodeSizeFactor() * 100f));
  fontSizeSlider.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontSizeSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setNodeSizeFactor(fontSizeSlider.getValue() / 100f);
    }
  }
);
  fontSizeSlider.setPreferredSize(new Dimension(100,20));
  fontSizeSlider.setMaximumSize(new Dimension(100,20));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (((int)(model.getNodeSizeFactor() * 100f)) != fontSizeSlider.getValue()) {
        fontSizeSlider.setValue((int)(model.getNodeSizeFactor() * 100f));
      }
    }
  }
);
  components[3]=fontSizeSlider;
  final ColorChooser colorChooser=new ColorChooser(model.getNodeColor());
  colorChooser.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  colorChooser.setPreferredSize(new Dimension(16,16));
  colorChooser.setMaximumSize(new Dimension(16,16));
  colorChooser.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(ColorChooser.PROP_COLOR)) {
        TextModel model=VizController.getInstance().getVizModel().getTextModel();
        model.setNodeColor(colorChooser.getColor());
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (!model.getNodeColor().equals(colorChooser.getColor())) {
        colorChooser.setColor(model.getNodeColor());
      }
    }
  }
);
  components[4]=colorChooser;
  final JButton attributesButton=new JButton();
  attributesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  attributesButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  attributesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      LabelAttributesPanel panel=new LabelAttributesPanel();
      panel.setup(model);
      DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VizBarController.class,""String_Node_Str""),true,NotifyDescriptor.OK_CANCEL_OPTION,null,null);
      if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
        panel.unsetup();
        return;
      }
    }
  }
);
  components[5]=attributesButton;
  return components;
}","public JComponent[] getToolbarComponents(){
  TextModel model=VizController.getInstance().getVizModel().getTextModel();
  final JPopupButton labelSizeModeButton=new JPopupButton();
  TextManager textManager=VizController.getInstance().getTextManager();
  for (  final SizeMode sm : textManager.getSizeModes()) {
    labelSizeModeButton.addItem(sm,sm.getIcon());
  }
  labelSizeModeButton.setSelectedItem(model.getSizeMode());
  labelSizeModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SizeMode sm=(SizeMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setSizeMode(sm);
    }
  }
);
  labelSizeModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelSizeModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getSizeMode() != labelSizeModeButton.getSelectedItem()) {
        labelSizeModeButton.setSelectedItem(model.getSizeMode());
      }
    }
  }
);
  components[0]=labelSizeModeButton;
  final JPopupButton labelColorModeButton=new JPopupButton();
  for (  final ColorMode cm : textManager.getColorModes()) {
    labelColorModeButton.addItem(cm,cm.getIcon());
  }
  labelColorModeButton.setSelectedItem(textManager.getModel().getColorMode());
  labelColorModeButton.setChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      ColorMode cm=(ColorMode)e.getSource();
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setColorMode(cm);
    }
  }
);
  labelColorModeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  labelColorModeButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (model.getColorMode() != labelColorModeButton.getSelectedItem()) {
        labelColorModeButton.setSelectedItem(model.getColorMode());
      }
    }
  }
);
  components[1]=labelColorModeButton;
  final JButton fontButton=new JButton(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
  fontButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      Font font=JFontChooser.showDialog(WindowManager.getDefault().getMainWindow(),model.getNodeFont());
      if (font != null && font != model.getNodeFont()) {
        model.setNodeFont(font);
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      fontButton.setText(model.getNodeFont().getFontName() + ""String_Node_Str"" + model.getNodeFont().getSize());
    }
  }
);
  components[2]=fontButton;
  final JSlider fontSizeSlider=new JSlider(0,100,(int)(model.getNodeSizeFactor() * 100f));
  fontSizeSlider.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  fontSizeSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      model.setNodeSizeFactor(fontSizeSlider.getValue() / 100f);
    }
  }
);
  fontSizeSlider.setPreferredSize(new Dimension(100,20));
  fontSizeSlider.setMaximumSize(new Dimension(100,20));
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (((int)(model.getNodeSizeFactor() * 100f)) != fontSizeSlider.getValue()) {
        fontSizeSlider.setValue((int)(model.getNodeSizeFactor() * 100f));
      }
    }
  }
);
  components[3]=fontSizeSlider;
  final ColorChooser colorChooser=new ColorChooser(model.getNodeColor());
  colorChooser.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  colorChooser.setPreferredSize(new Dimension(16,16));
  colorChooser.setMaximumSize(new Dimension(16,16));
  colorChooser.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(ColorChooser.PROP_COLOR)) {
        TextModel model=VizController.getInstance().getVizModel().getTextModel();
        model.setNodeColor(colorChooser.getColor());
      }
    }
  }
);
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      if (!model.getNodeColor().equals(colorChooser.getColor())) {
        colorChooser.setColor(model.getNodeColor());
      }
    }
  }
);
  components[4]=colorChooser;
  final JButton attributesButton=new JButton();
  attributesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(""String_Node_Str"")));
  attributesButton.setToolTipText(NbBundle.getMessage(VizBarController.class,""String_Node_Str""));
  attributesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TextModel model=VizController.getInstance().getVizModel().getTextModel();
      LabelAttributesPanel panel=new LabelAttributesPanel();
      panel.setup(model);
      DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VizBarController.class,""String_Node_Str""),true,NotifyDescriptor.OK_CANCEL_OPTION,null,null);
      if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
        panel.unsetup();
        return;
      }
    }
  }
);
  components[5]=attributesButton;
  return components;
}",0.9963765198486192
189926,"public void setNodeFixed(Node node,boolean fixed){
  if (isNodeInGraph(node)) {
    node.getNodeData().setFixed(fixed);
  }
}","public void setNodeFixed(Node node,boolean fixed){
  node.getNodeData().setFixed(fixed);
}",0.8372093023255814
189927,"private void removeEdge(Edge edge,Graph graph){
  if (isEdgeInGraph(edge)) {
    graph.removeEdge(edge);
  }
}","private void removeEdge(Edge edge,Graph graph){
  graph.removeEdge(edge);
}",0.8108108108108109
189928,"public Node duplicateNode(Node node){
  if (isNodeInGraph(node)) {
    HierarchicalGraph hg=getHierarchicalGraph();
    Node copy=copyNodeRecursively(node,hg.getParent(node),hg);
    return copy;
  }
 else {
    return null;
  }
}","public Node duplicateNode(Node node){
  HierarchicalGraph hg=getHierarchicalGraph();
  Node copy=copyNodeRecursively(node,hg.getParent(node),hg);
  return copy;
}",0.826530612244898
189929,"private void removeNode(Node node,Graph graph){
  if (isNodeInGraph(node)) {
    graph.removeNode(node);
  }
}","private void removeNode(Node node,Graph graph){
  graph.removeNode(node);
}",0.8108108108108109
189930,"public void createEdges(Node source,Node[] allNodes,boolean directed){
  if (isNodeInGraph(source) && areNodesInGraph(allNodes)) {
    for (    Node n : allNodes) {
      if (n != source) {
        createEdge(source,n,directed);
      }
    }
  }
}","public void createEdges(Node source,Node[] allNodes,boolean directed){
  for (  Node n : allNodes) {
    if (n != source) {
      createEdge(source,n,directed);
    }
  }
}",0.819047619047619
189931,"public boolean canMoveNodeToGroup(Node node,Node group){
  HierarchicalGraph hg=getHierarchicalGraph();
  return node != group && hg.getParent(node) == hg.getParent(group) && canUngroupNode(group) && isNodeInGraph(node);
}","public boolean canMoveNodeToGroup(Node node,Node group){
  HierarchicalGraph hg=getHierarchicalGraph();
  return node != group && hg.getParent(node) == hg.getParent(group) && canUngroupNode(group);
}",0.9453681710213776
189932,"public boolean canUngroupNode(Node node){
  if (!isNodeInGraph(node)) {
    return false;
  }
  boolean canUngroup;
  HierarchicalGraph hg=getHierarchicalGraph();
  canUngroup=getNodeChildrenCount(hg,node) > 0;
  return canUngroup;
}","public boolean canUngroupNode(Node node){
  boolean canUngroup;
  HierarchicalGraph hg=getHierarchicalGraph();
  canUngroup=getNodeChildrenCount(hg,node) > 0;
  return canUngroup;
}",0.8743961352657005
189933,"public boolean canGroupNodes(Node[] nodes){
  if (!areNodesInGraph(nodes)) {
    return false;
  }
  HierarchicalGraph hg=getHierarchicalGraph();
  Node parent=hg.getParent(nodes[0]);
  for (  Node n : nodes) {
    if (hg.getParent(n) != parent) {
      return false;
    }
  }
  return true;
}","public boolean canGroupNodes(Node[] nodes){
  HierarchicalGraph hg=getHierarchicalGraph();
  Node parent=hg.getParent(nodes[0]);
  for (  Node n : nodes) {
    if (hg.getParent(n) != parent) {
      return false;
    }
  }
  return true;
}",0.8968105065666041
189934,"public boolean isNodeInGroup(Node node){
  if (!isNodeInGraph(node)) {
    return false;
  }
  HierarchicalGraph hg=getHierarchicalGraph();
  return hg.getParent(node) != null;
}","public boolean isNodeInGroup(Node node){
  HierarchicalGraph hg=getHierarchicalGraph();
  return hg.getParent(node) != null;
}",0.8289473684210527
189935,"public void run(){
  JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
  String title=frame.getTitle() + ""String_Node_Str"" + project.getLookup().lookup(ProjectInformation.class).getName();
  frame.setTitle(title);
}","public void run(){
  JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
  String title=frame.getTitle();
  title=title.substring(0,title.indexOf('-') - 1);
  frame.setTitle(title);
}",0.7370892018779343
189936,"public void deleteWorkspace(){
  controller.deleteWorkspace(controller.getCurrentWorkspace());
}","public void deleteWorkspace(){
  if (controller.getCurrentProject().getLookup().lookup(WorkspaceProvider.class).getWorkspaces().length == 1) {
    saveProject=false;
    saveAsProject=false;
    projectProperties=false;
    closeProject=false;
    newWorkspace=false;
    deleteWorkspace=false;
    cleanWorkspace=false;
    duplicateWorkspace=false;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
        String title=frame.getTitle();
        title=title.substring(0,title.indexOf('-') - 1);
        frame.setTitle(title);
      }
    }
);
  }
  controller.deleteWorkspace(controller.getCurrentWorkspace());
}",0.1391304347826087
189937,"public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().contains(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().contains(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}","public Graph filter(Graph graph){
  HierarchicalGraph hgraph=(HierarchicalGraph)graph;
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : hgraph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().equals(str)) {
      nodes.add(n);
    }
 else     if ((n.getNodeData().getLabel() != null) && n.getNodeData().getLabel().toLowerCase().equals(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : hgraph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : hgraph.getNodes().toArray()) {
    if (!result.contains(node)) {
      hgraph.removeNode(node);
    }
  }
  return hgraph;
}",0.9892569382273948
189938,"public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
  }
  mouseInside=false;
  repaint();
}","public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=false;
  repaint();
}",0.8074245939675174
189939,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
  int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta) >= (st - s)) {
      sf=st - s;
    }
 else {
      if (sf + delta <= 0) {
        sf=0;
      }
 else {
        sf+=delta;
      }
    }
  break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
  st=sf + s;
}
 else {
  if ((st + delta >= w)) {
    st=w;
  }
 else {
    st+=delta;
  }
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.8516687268232386
189940,"public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  float w=getWidth();
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}","public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}",0.9378612716763006
189941,"public void mouseReleased(MouseEvent evt){
  latestMousePositionX=null;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}","public void mouseReleased(MouseEvent evt){
  latestMousePositionX=evt.getX();
  currentMousePositionX=latestMousePositionX;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}",0.8353658536585366
189942,"public void mouseEntered(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
  mouseInside=true;
}","public void mouseEntered(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=true;
}",0.8433734939759037
189943,"public void mouseClicked(MouseEvent e){
}","public void mouseClicked(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
}",0.5093167701863354
189944,"public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}","public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
    unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}",0.8218111002921129
189945,"public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) ? DateTime.class : null;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}","public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}",0.9371980676328504
189946,"public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equals(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}","public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATETIME);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}",0.9116161616161615
189947,"public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}",0.8183520599250936
189948,"public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}",0.9676425269645608
189949,"public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}",0.9676425269645608
189950,"private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}","private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equalsIgnoreCase(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}",0.98677831643896
189951,"public void writeGraphView(XMLStreamWriter writer,GraphViewImpl graphView) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_VIEW);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    writer.writeStartElement(ELEMENT_TREESTRUCTURE_NODE);
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
    writer.writeEndElement();
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      writer.writeStartElement(ELEMENT_VIEW_EDGE);
      writer.writeAttribute(""String_Node_Str"",String.valueOf(node.pre));
      writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getTarget(graphView.getViewId()).pre));
      writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}","public void writeGraphView(XMLStreamWriter writer,GraphViewImpl graphView) throws XMLStreamException {
  writer.writeStartElement(ELEMENT_VIEW);
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  writer.writeAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    writer.writeStartElement(ELEMENT_VIEW_NODE);
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    writer.writeAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
    writer.writeEndElement();
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      writer.writeStartElement(ELEMENT_VIEW_EDGE);
      writer.writeAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
      writer.writeEndElement();
    }
  }
  writer.writeEndElement();
}",0.950374531835206
189952,"public void readGraphView(XMLStreamReader reader,GraphStructure graphStructure) throws XMLStreamException {
  GraphViewImpl graphView=graphStructure.createView(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure mainStructure=graphStructure.getMainView().getStructure();
  TreeStructure treeStructure=graphView.getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VIEW_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode mainNode=mainStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode node=new AbstractNode(mainNode.getNodeData(),graphView.getViewId(),0,0,0,parentNode);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      node.setEnabledInDegree(inDegree);
      node.setEnabledOutDegree(outDegree);
      node.setEnabledMutualDegree(mutualDegree);
      node.setEnabled(enabled);
      treeStructure.insertAsChild(node,parentNode);
    }
 else     if (ELEMENT_VIEW_EDGE.equalsIgnoreCase(name)) {
      AbstractEdge edge=graphStructure.getEdgeFromDictionnary(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode source=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode target=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_VIEW.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
graphView.getStructureModifier().getEdgeProcessor().computeMetaEdges();
}","public void readGraphView(XMLStreamReader reader,GraphStructure graphStructure) throws XMLStreamException {
  GraphViewImpl graphView=graphStructure.createView(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setEdgesCountTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setMutualEdgesTotal(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  graphView.setNodesEnabled(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
  TreeStructure mainStructure=graphStructure.getMainView().getStructure();
  TreeStructure treeStructure=graphView.getStructure();
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      String name=reader.getLocalName();
    if (ELEMENT_VIEW_NODE.equalsIgnoreCase(name)) {
      Boolean enabled=Boolean.parseBoolean(reader.getAttributeValue(null,""String_Node_Str""));
      AbstractNode mainNode=mainStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode parentNode=treeStructure.getNodeAt(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode node=new AbstractNode(mainNode.getNodeData(),graphView.getViewId(),0,0,0,parentNode);
      Integer inDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer outDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      Integer mutualDegree=Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str""));
      node.setEnabledInDegree(inDegree);
      node.setEnabledOutDegree(outDegree);
      node.setEnabledMutualDegree(mutualDegree);
      node.setEnabled(enabled);
      treeStructure.insertAsChild(node,parentNode);
    }
 else     if (ELEMENT_VIEW_EDGE.equalsIgnoreCase(name)) {
      AbstractEdge edge=graphStructure.getEdgeFromDictionnary(Integer.parseInt(reader.getAttributeValue(null,""String_Node_Str"")));
      AbstractNode source=edge.getSource(graphView.getViewId());
      AbstractNode target=edge.getTarget(graphView.getViewId());
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ELEMENT_VIEW.equalsIgnoreCase(reader.getLocalName())) {
  end=true;
}
break;
}
}
graphView.getStructureModifier().getEdgeProcessor().computeMetaEdges();
}",0.9503887449092928
189953,"public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
  }
  mouseInside=false;
  repaint();
}","public void mouseExited(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    highlightedComponent=HighlightedComponent.NONE;
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=false;
  repaint();
}",0.8074245939675174
189954,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
  int s=settings.selection.minimalWidth;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta) >= (st - s)) {
      sf=st - s;
    }
 else {
      if (sf + delta <= 0) {
        sf=0;
      }
 else {
        sf+=delta;
      }
    }
  break;
case RESIZE_TO:
if ((st + delta) <= (sf + s)) {
  st=sf + s;
}
 else {
  if ((st + delta >= w)) {
    st=w;
  }
 else {
    st+=delta;
  }
}
break;
case MOVING:
if ((sf + delta) < 0) {
st=(st - sf);
sf=0;
}
 else if ((st + delta) >= w) {
sf=w - (st - sf);
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.8516687268232386
189955,"public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  float w=getWidth();
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}","public void mousePressed(MouseEvent e){
  if (model == null) {
    return;
  }
  int x=e.getX();
  latestMousePositionX=x;
  currentMousePositionX=latestMousePositionX;
  int r=16;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
}",0.9378612716763006
189956,"public void mouseReleased(MouseEvent evt){
  latestMousePositionX=null;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}","public void mouseReleased(MouseEvent evt){
  latestMousePositionX=evt.getX();
  currentMousePositionX=latestMousePositionX;
  currentState=TimelineState.IDLE;
  this.getParent().repaint();
}",0.8353658536585366
189957,"public void mouseEntered(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
  mouseInside=true;
}","public void mouseEntered(MouseEvent e){
  if (currentState == TimelineState.IDLE) {
    latestMousePositionX=e.getX();
    currentMousePositionX=latestMousePositionX;
  }
  mouseInside=true;
}",0.8433734939759037
189958,"public void mouseClicked(MouseEvent e){
}","public void mouseClicked(MouseEvent e){
  latestMousePositionX=e.getX();
  currentMousePositionX=latestMousePositionX;
}",0.5093167701863354
189959,"public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}","public void dynamicModelChanged(DynamicModelEvent event){
  if (event.getSource() == dynamicModel) {
    unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
switch (event.getEventType()) {
case VISIBLE_INTERVAL:
      fireTimelineModelEvent(new TimelineModelEvent(TimelineModelEvent.EventType.VISIBLE_INTERVAL,this,event.getData()));
    break;
case MIN_CHANGED:
  setModelMin((Double)event.getData());
break;
case MAX_CHANGED:
setModelMax((Double)event.getData());
break;
}
}
}",0.8218111002921129
189960,"public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) ? DateTime.class : null;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}","public void setup(DynamicModel dynamicModel){
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  this.dynamicModel=dynamicModel;
  enabled=!Double.isInfinite(dynamicModel.getVisibleInterval().getLow()) && !Double.isInfinite(dynamicModel.getVisibleInterval().getHigh());
  dynamicController.addModelListener(this);
  unit=(dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATE) || dynamicModel.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) ? DateTime.class : Double.class;
  customMin=Double.NEGATIVE_INFINITY;
  customMax=Double.POSITIVE_INFINITY;
  modelMin=Double.NEGATIVE_INFINITY;
  modelMax=Double.POSITIVE_INFINITY;
  setModelMin(dynamicModel.getMin());
  setModelMax(dynamicModel.getMax());
  refreshEnabled();
}",0.9371980676328504
189961,"public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equals(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}","public void readModel(XMLStreamReader reader,DynamicModelImpl model) throws XMLStreamException {
  boolean end=false;
  while (reader.hasNext() && !end) {
    int type=reader.next();
switch (type) {
case XMLStreamReader.START_ELEMENT:
      if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
        String val=reader.getAttributeValue(null,""String_Node_Str"");
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATE);
        }
        if (val.equalsIgnoreCase(""String_Node_Str"")) {
          model.setTimeFormat(DynamicModel.TimeFormat.DATETIME);
        }
 else {
          model.setTimeFormat(DynamicModel.TimeFormat.DOUBLE);
        }
      }
    break;
case XMLStreamReader.END_ELEMENT:
  if (""String_Node_Str"".equalsIgnoreCase(reader.getLocalName())) {
    end=true;
  }
break;
}
}
}",0.9116161616161615
189962,"public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}","public void writeModel(XMLStreamWriter writer,DynamicModelImpl model) throws XMLStreamException {
  writer.writeStartElement(""String_Node_Str"");
  writer.writeStartElement(""String_Node_Str"");
  if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATETIME)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (model.getTimeFormat().equals(DynamicModel.TimeFormat.DATE)) {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.writeEndElement();
  writer.writeEndElement();
}",0.8183520599250936
189963,"public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}",0.9676425269645608
189964,"public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}","public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE) || timeFormat.equals(TimeFormat.DATETIME)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}",0.9676425269645608
189965,"private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equals(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}","private void readGraph(XMLStreamReader reader) throws Exception {
  String mode=""String_Node_Str"";
  String defaultEdgeType=""String_Node_Str"";
  String start=""String_Node_Str"";
  String end=""String_Node_Str"";
  String timeFormat=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (GRAPH_DEFAULT_EDGETYPE.equalsIgnoreCase(attName)) {
      defaultEdgeType=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTES_TYPE2.equalsIgnoreCase(attName)) {
      mode=reader.getAttributeValue(i);
    }
 else     if (START.equalsIgnoreCase(attName)) {
      start=reader.getAttributeValue(i);
    }
 else     if (END.equalsIgnoreCase(attName)) {
      end=reader.getAttributeValue(i);
    }
 else     if (GRAPH_TIMEFORMAT.equalsIgnoreCase(attName) || GRAPH_TIMEFORMAT2.equalsIgnoreCase(attName)) {
      timeFormat=reader.getAttributeValue(i);
    }
  }
  if (!defaultEdgeType.isEmpty()) {
    if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.UNDIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      container.setEdgeDefault(EdgeDefault.DIRECTED);
    }
 else     if (defaultEdgeType.equalsIgnoreCase(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
 else {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultEdgeType),Issue.Level.SEVERE));
    }
  }
  if (!timeFormat.isEmpty()) {
    if (""String_Node_Str"".equalsIgnoreCase(timeFormat) || ""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DOUBLE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATE);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(timeFormat)) {
      container.setTimeFormat(TimeFormat.DATETIME);
    }
  }
 else   if (mode.equalsIgnoreCase(""String_Node_Str"")) {
    container.setTimeFormat(TimeFormat.DOUBLE);
  }
  if (!start.isEmpty()) {
    container.setTimeIntervalMin(start);
  }
  if (!end.isEmpty()) {
    container.setTimeIntervalMax(end);
  }
}",0.98677831643896
189966,"protected GLCapabilities getCaps(){
  GLCapabilities caps=new GLCapabilities();
  caps.setAlphaBits(8);
  caps.setDoubleBuffered(true);
  caps.setHardwareAccelerated(true);
  int antialisaing=vizController.getVizConfig().getAntialiasing();
  if (antialisaing == 0) {
    caps.setSampleBuffers(false);
  }
 else   if (antialisaing == 2) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(2);
  }
 else   if (antialisaing == 4) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(4);
  }
 else   if (antialisaing == 8) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(8);
  }
 else   if (antialisaing == 16) {
    caps.setSampleBuffers(true);
    caps.setNumSamples(16);
  }
  return caps;
}","protected GLCapabilities getCaps(){
  GLCapabilities caps=new GLCapabilities();
  try {
    caps.setAlphaBits(8);
    caps.setDoubleBuffered(true);
    caps.setHardwareAccelerated(true);
    int antialisaing=vizController.getVizConfig().getAntialiasing();
    if (antialisaing == 0) {
      caps.setSampleBuffers(false);
    }
 else     if (antialisaing == 2) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(2);
    }
 else     if (antialisaing == 4) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(4);
    }
 else     if (antialisaing == 8) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(8);
    }
 else     if (antialisaing == 16) {
      caps.setSampleBuffers(true);
      caps.setNumSamples(16);
    }
  }
 catch (  javax.media.opengl.GLException ex) {
    Exceptions.printStackTrace(ex);
  }
  return caps;
}",0.8908742820676452
189967,"public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (attributeUtils.isNumberListColumn(column) || attributeUtils.isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}","public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (attributeUtils.isNumberListColumn(column) || attributeUtils.isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return value;
  }
 else   if (column.getType() == AttributeType.BOOLEAN) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}",0.9532820816085156
189968,"public Class getColumnClass(){
  if (useSparklines && attributeUtils.isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && attributeUtils.isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return column.getType().getType();
  }
 else {
    return String.class;
  }
}","public Class getColumnClass(){
  if (useSparklines && attributeUtils.isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && attributeUtils.isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.BOOLEAN) {
    return Boolean.class;
  }
 else {
    return String.class;
  }
}",0.9175355450236968
189969,"public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn eigenCol=nodeTable.getColumn(EIGENVECTOR);
  if (eigenCol == null) {
    eigenCol=nodeTable.addColumn(EIGENVECTOR,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  int N=hgraph.getNodeCount();
  hgraph.readLock();
  double[] tmp=new double[N];
  centralities=new double[N];
  Progress.start(progress,numRuns);
  HashMap<Integer,Node> indicies=new HashMap<Integer,Node>();
  HashMap<Node,Integer> invIndicies=new HashMap<Node,Integer>();
  int count=0;
  for (  Node u : hgraph.getNodes()) {
    indicies.put(count,u);
    invIndicies.put(u,count);
    centralities[count]=1;
    count++;
  }
  for (int s=0; s < numRuns; s++) {
    double max=0;
    for (int i=0; i < N; i++) {
      Node u=indicies.get(i);
      EdgeIterable iter=null;
      if (isDirected) {
        iter=((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(u);
      }
 else {
        iter=hgraph.getEdges(u);
      }
      for (      Edge e : iter) {
        Node v=hgraph.getOpposite(u,e);
        Integer id=invIndicies.get(v);
        tmp[i]+=centralities[id];
      }
      max=Math.max(max,tmp[i]);
      if (isCanceled) {
        return;
      }
    }
    sumChange=0;
    for (int k=0; k < N; k++) {
      if (max != 0) {
        sumChange+=Math.abs(centralities[k] - (tmp[k] / max));
        centralities[k]=tmp[k] / max;
      }
      if (isCanceled) {
        return;
      }
    }
    if (isCanceled) {
      return;
    }
    Progress.progress(progress);
  }
  for (int i=0; i < N; i++) {
    Node s=indicies.get(i);
    AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
    row.setValue(eigenCol,centralities[i]);
    if (isCanceled) {
      return;
    }
  }
  hgraph.readUnlock();
  Progress.finish(progress);
}","public void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn eigenCol=nodeTable.getColumn(EIGENVECTOR);
  if (eigenCol == null) {
    eigenCol=nodeTable.addColumn(EIGENVECTOR,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  int N=hgraph.getNodeCount();
  hgraph.readLock();
  double[] tmp=new double[N];
  centralities=new double[N];
  Progress.start(progress,numRuns);
  HashMap<Integer,Node> indicies=new HashMap<Integer,Node>();
  HashMap<Node,Integer> invIndicies=new HashMap<Node,Integer>();
  int count=0;
  for (  Node u : hgraph.getNodes()) {
    indicies.put(count,u);
    invIndicies.put(u,count);
    centralities[count]=1;
    count++;
  }
  for (int s=0; s < numRuns; s++) {
    double max=0;
    for (int i=0; i < N; i++) {
      Node u=indicies.get(i);
      EdgeIterable iter=null;
      if (isDirected) {
        iter=((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(u);
      }
 else {
        iter=((HierarchicalUndirectedGraph)hgraph).getEdgesAndMetaEdges(u);
      }
      for (      Edge e : iter) {
        Node v=hgraph.getOpposite(u,e);
        Integer id=invIndicies.get(v);
        tmp[i]+=centralities[id];
      }
      max=Math.max(max,tmp[i]);
      if (isCanceled) {
        return;
      }
    }
    sumChange=0;
    for (int k=0; k < N; k++) {
      if (max != 0) {
        sumChange+=Math.abs(centralities[k] - (tmp[k] / max));
        centralities[k]=tmp[k] / max;
      }
      if (isCanceled) {
        return;
      }
    }
    if (isCanceled) {
      return;
    }
    Progress.progress(progress);
  }
  for (int i=0; i < N; i++) {
    Node s=indicies.get(i);
    AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
    row.setValue(eigenCol,centralities[i]);
    if (isCanceled) {
      return;
    }
  }
  hgraph.readUnlock();
  Progress.finish(progress);
}",0.9836829836829836
189970,"/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
  }
  model.setRunning(pStatistics,true);
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        model.setRunning(pStatistics,false);
        for (        StatisticsUI s : uis) {
          model.addResult(s);
          s.unsetup();
        }
        model.addReport(pStatistics);
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    if (listener != null) {
      listener.taskFinished(null);
    }
    model.setRunning(pStatistics,false);
    for (    StatisticsUI s : uis) {
      model.addResult(s);
      s.unsetup();
    }
    model.addReport(pStatistics);
  }
}","/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
  }
  model.setRunning(pStatistics,true);
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        model.setRunning(pStatistics,false);
        for (        StatisticsUI s : uis) {
          model.addResult(s);
          s.unsetup();
        }
        model.addReport(pStatistics);
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    model.setRunning(pStatistics,false);
    for (    StatisticsUI s : uis) {
      model.addResult(s);
      s.unsetup();
    }
    model.addReport(pStatistics);
    if (listener != null) {
      listener.taskFinished(null);
    }
  }
}",0.8871191135734072
189971,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  double edgesCount=graph.getEdgeCount();
  double nodesCount=graph.getNodeCount();
  double multiplier=1;
  if (!isDirected) {
    multiplier=2;
  }
  density=(multiplier * edgesCount) / (nodesCount * nodesCount - nodesCount);
}","public void execute(GraphModel graphModel,AttributeModel attributeModel){
  HierarchicalGraph hgraph;
  if (isDirected) {
    hgraph=graphModel.getHierarchicalDirectedGraphVisible();
  }
 else {
    hgraph=graphModel.getHierarchicalUndirectedGraphVisible();
  }
  double edgesCount=hgraph.getTotalEdgeCount();
  double nodesCount=hgraph.getNodeCount();
  double multiplier=1;
  if (!isDirected) {
    multiplier=2;
  }
  density=(multiplier * edgesCount) / (nodesCount * nodesCount - nodesCount);
}",0.6575342465753424
189972,"/** 
 * @param struct
 * @param degrees
 * @param graph
 * @return
 */
public double finalQ(int[] struct,double[] degrees,HierarchicalUndirectedGraph graph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn modCol=nodeTable.getColumn(MODULARITY_CLASS);
  if (modCol == null) {
    modCol=nodeTable.addColumn(MODULARITY_CLASS,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  double res=0;
  double[] internal=new double[degrees.length];
  for (  Node n : graph.getNodes()) {
    int n_index=structure.map.get(n);
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(modCol,struct[n_index]);
    for (    Node neighbor : graph.getNeighbors(n)) {
      if (n == neighbor) {
        continue;
      }
      int neigh_index=structure.map.get(neighbor);
      if (struct[neigh_index] == struct[n_index]) {
        internal[struct[neigh_index]]++;
      }
    }
  }
  for (int i=0; i < degrees.length; i++) {
    internal[i]/=2.0;
    res+=(internal[i] / graph.getEdgeCount()) - Math.pow(degrees[i] / (2 * graph.getEdgeCount()),2);
  }
  return res;
}","/** 
 * @param struct
 * @param degrees
 * @param hgraph
 * @return
 */
public double finalQ(int[] struct,double[] degrees,HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn modCol=nodeTable.getColumn(MODULARITY_CLASS);
  if (modCol == null) {
    modCol=nodeTable.addColumn(MODULARITY_CLASS,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  double res=0;
  double[] internal=new double[degrees.length];
  for (  Node n : hgraph.getNodes()) {
    int n_index=structure.map.get(n);
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(modCol,struct[n_index]);
    for (    Node neighbor : hgraph.getNeighbors(n)) {
      if (n == neighbor) {
        continue;
      }
      int neigh_index=structure.map.get(neighbor);
      if (struct[neigh_index] == struct[n_index]) {
        internal[struct[neigh_index]]++;
      }
    }
  }
  for (int i=0; i < degrees.length; i++) {
    internal[i]/=2.0;
    res+=(internal[i] / hgraph.getTotalEdgeCount()) - Math.pow(degrees[i] / (2 * hgraph.getTotalEdgeCount()),2);
  }
  return res;
}",0.9778911564625852
189973,"private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 1 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    if (initial_split.length > 1) {
      label=initial_split[1].trim();
    }
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
for (int i=firstParts; i < parts.length; i++) {
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}
}","private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 1 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    if (initial_split.length > 1) {
      label=initial_split[1].trim();
    }
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
int i=firstParts;
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",lineReader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}",0.9906542056074766
189974,"public void select(Workspace workspace){
  Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
  }
  nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
  edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
  hideTable();
  enableTableControls();
  bannerPanel.setVisible(false);
  attributeModel.addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  refreshAll();
}","public void select(Workspace workspace){
  Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  if (dataTablesModel == null) {
    workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
  }
  nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
  edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
  hideTable();
  enableTableControls();
  attributeModel.addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  refreshAllOnce();
}",0.978450786255096
189975,"private void clearAll(){
  clearTableControls();
  clearColumnManipulators();
  clearGeneralActionsButtons();
}","private void clearAll(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      clearTableControls();
      clearColumnManipulators();
      clearGeneralActionsButtons();
    }
  }
);
}",0.7047619047619048
189976,"private void hideTable(){
  tableScrollPane.setViewportView(null);
}","private void hideTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      tableScrollPane.setViewportView(null);
    }
  }
);
}",0.6153846153846154
189977,"private void refreshAll(){
  if (nodesButton.isEnabled()) {
    refreshTable();
    refreshColumnManipulators();
    refreshGeneralActionsButtons();
  }
}","private synchronized void refreshAll(){
  if (nodesButton.isEnabled()) {
    refreshTable();
    refreshColumnManipulators();
    refreshGeneralActionsButtons();
  }
}",0.9595015576323987
189978,"public void selectEdgesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.EDGE;
      refreshAll();
    }
  }
);
}","public void selectEdgesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.EDGE;
      refreshAllOnce();
    }
  }
);
}",0.9887640449438202
189979,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  visibleOnly=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false);
  useSparklines=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_SPARKLINES,false);
  timeIntervalGraphics=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_TIME_INTERVAL_GRAPHICS,false);
  showEdgesNodesLabels=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_EDGES_NODES_LABELS,false);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  if (UIUtils.isAquaLookAndFeel()) {
    columnManipulatorsPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  columnManipulatorsPanel.setLayout(new WrapLayout(WrapLayout.CENTER,25,20));
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  nodeTable.setUseSparklines(useSparklines);
  nodeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setUseSparklines(useSparklines);
  edgeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setShowEdgesNodesLabels(showEdgesNodesLabels);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  Workspace workspace=pc.getCurrentWorkspace();
  if (workspace == null) {
    clearAll();
  }
 else {
    AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
    dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
    if (dataTablesModel == null) {
      workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
    }
    nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
    edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
    refreshAll();
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  visibleOnly=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_ONLY_VISIBLE,false);
  useSparklines=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_SPARKLINES,false);
  timeIntervalGraphics=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_TIME_INTERVAL_GRAPHICS,false);
  showEdgesNodesLabels=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_EDGES_NODES_LABELS,false);
  initComponents();
  if (UIUtils.isAquaLookAndFeel()) {
    columnManipulatorsPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  columnManipulatorsPanel.setLayout(new WrapLayout(WrapLayout.CENTER,25,20));
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  nodeTable.setUseSparklines(useSparklines);
  nodeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setUseSparklines(useSparklines);
  edgeTable.setTimeIntervalGraphics(timeIntervalGraphics);
  edgeTable.setShowEdgesNodesLabels(showEdgesNodesLabels);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  Workspace workspace=pc.getCurrentWorkspace();
  if (workspace == null) {
    clearAll();
  }
 else {
    AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
    dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
    if (dataTablesModel == null) {
      workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
    }
    nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
    edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
    refreshAllOnce();
  }
  bannerPanel.setVisible(false);
}",0.9517819706498952
189980,"public void selectNodesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.NODE;
      refreshAll();
    }
  }
);
}","public void selectNodesTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      classDisplayed=ClassDisplayed.NODE;
      refreshAllOnce();
    }
  }
);
}",0.9887640449438202
189981,"private void initNodesView(){
  Runnable initNodesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,nodeTable.getOutlineTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=nodeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        nodeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        nodeTable.scrollToFirstNodeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  Future future=taskExecutor.submit(initNodesRunnable);
}","private void initNodesView(){
  Runnable initNodesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,nodeTable.getOutlineTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=nodeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        nodeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        nodeTable.scrollToFirstNodeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  SwingUtilities.invokeLater(initNodesRunnable);
}",0.977245508982036
189982,"private void refreshOnce(boolean refreshTableOnly){
  if (refreshOnceHelperThread == null || !refreshOnceHelperThread.isAlive() || (refreshOnceHelperThread.refreshTableOnly && !refreshTableOnly)) {
    refreshOnceHelperThread=new RefreshOnceHelperThread(refreshTableOnly);
    refreshOnceHelperThread.start();
  }
 else {
    refreshOnceHelperThread.eventAttended();
  }
}","/** 
 * This method ensures that the refreshing of all Data laboratory or table only happens once in a short time period.
 * @param refreshTableOnly True to refresh only table values, false to refresh all UI including manipulators
 */
private void refreshOnce(boolean refreshTableOnly){
  if (refreshOnceHelperThread == null || !refreshOnceHelperThread.isAlive() || (refreshOnceHelperThread.refreshTableOnly && !refreshTableOnly)) {
    refreshOnceHelperThread=new RefreshOnceHelperThread(refreshTableOnly);
    refreshOnceHelperThread.start();
  }
 else {
    refreshOnceHelperThread.eventAttended();
  }
}",0.7599591419816139
189983,"@Override public void componentOpened(){
  refreshAll();
}","@Override public void componentOpened(){
  refreshAllOnce();
}",0.9666666666666668
189984,"private void availableColumnsButtonActionPerformed(java.awt.event.ActionEvent evt){
  AttributeTable table;
  AvailableColumnsModel availableColumnsModel;
  if (classDisplayed == classDisplayed.NODE) {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
  }
 else {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
  }
  availableColumnsModel=getTableAvailableColumnsModel(table);
  DialogDescriptor dd=new DialogDescriptor(new AvailableColumnsPanel(table,availableColumnsModel).getValidationPanel(),NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  dd.setOptions(new Object[]{DialogDescriptor.OK_OPTION});
  DialogDisplayer.getDefault().notify(dd);
  refreshAll();
  availableColumnsButton.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",true));
}","private void availableColumnsButtonActionPerformed(java.awt.event.ActionEvent evt){
  AttributeTable table;
  AvailableColumnsModel availableColumnsModel;
  if (classDisplayed == classDisplayed.NODE) {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
  }
 else {
    table=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
  }
  availableColumnsModel=getTableAvailableColumnsModel(table);
  DialogDescriptor dd=new DialogDescriptor(new AvailableColumnsPanel(table,availableColumnsModel).getValidationPanel(),NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  dd.setOptions(new Object[]{DialogDescriptor.OK_OPTION});
  DialogDisplayer.getDefault().notify(dd);
  refreshAllOnce();
  availableColumnsButton.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",true));
}",0.9976717112922002
189985,"/** 
 * Column manipulators related methods:
 */
private void refreshColumnManipulators(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      clearColumnManipulators();
      prepareAddColumnButton();
      prepareMergeColumnsButton();
      prepareColumnManipulatorsButtons();
      columnManipulatorsPanel.updateUI();
    }
  }
);
}","/** 
 * Column manipulators related methods:
 */
private void refreshColumnManipulators(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      clearColumnManipulators();
      prepareAddColumnButton();
      prepareMergeColumnsButton();
      prepareColumnManipulatorsButtons();
    }
  }
);
}",0.9375
189986,"public void refreshCurrentTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      refreshTable();
    }
  }
);
}","public void refreshCurrentTable(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      refreshOnce(true);
    }
  }
);
}",0.9608540925266904
189987,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      if (dataTablesModel == null) {
        workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
      }
      nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
      edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      attributeModel.addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      nodeAvailableColumnsModel=null;
      edgeAvailableColumnsModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  columnComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      refreshFilter();
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      if (dataTablesModel == null) {
        workspace.add(dataTablesModel=new DataTablesModel(attributeModel.getNodeTable(),attributeModel.getEdgeTable()));
      }
      nodeAvailableColumnsModel=dataTablesModel.getNodeAvailableColumnsModel();
      edgeAvailableColumnsModel=dataTablesModel.getEdgeAvailableColumnsModel();
      hideTable();
      enableTableControls();
      attributeModel.addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      refreshAllOnce();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      nodeAvailableColumnsModel=null;
      edgeAvailableColumnsModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  columnComboBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      refreshFilter();
    }
  }
);
}",0.9935075217735552
189988,"private void initEdgesView(){
  Runnable initEdgesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,edgeTable.getTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=edgeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        edgeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        edgeTable.scrollToFirstEdgeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  Future future=taskExecutor.submit(initEdgesRunnable);
}","private void initEdgesView(){
  Runnable initEdgesRunnable=new Runnable(){
    public void run(){
      try {
        String busyMsg=NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str"");
        BusyUtils.BusyLabel busylabel=BusyUtils.createCenteredBusyLabel(tableScrollPane,busyMsg,edgeTable.getTable());
        busylabel.setBusy(true);
        final AttributeColumn[] cols=edgeAvailableColumnsModel.getAvailableColumns();
        HierarchicalGraph graph;
        if (visibleOnly) {
          graph=graphModel.getHierarchicalGraphVisible();
        }
 else {
          graph=graphModel.getHierarchicalGraph();
        }
        if (graph == null) {
          tableScrollPane.setViewportView(null);
          return;
        }
        edgeTable.refreshModel(graph,cols,dataTablesModel);
        refreshFilterColumns();
        busylabel.setBusy(false);
        edgeTable.scrollToFirstEdgeSelected();
      }
 catch (      Exception e) {
        Exceptions.printStackTrace(e);
        JLabel errorLabel=new JLabel(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""),SwingConstants.CENTER);
        tableScrollPane.setViewportView(errorLabel);
      }
    }
  }
;
  SwingUtilities.invokeLater(initEdgesRunnable);
}",0.9731031714171016
189989,"private void enableTableControls(){
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  configurationButton.setEnabled(true);
  availableColumnsButton.setEnabled(true);
  filterTextField.setEnabled(true);
  columnComboBox.setEnabled(true);
  labelFilter.setEnabled(true);
}","private void enableTableControls(){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      configurationButton.setEnabled(true);
      availableColumnsButton.setEnabled(true);
      filterTextField.setEnabled(true);
      columnComboBox.setEnabled(true);
      labelFilter.setEnabled(true);
    }
  }
);
}",0.6559297218155198
189990,"public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  try {
    SwingUtilities.invokeAndWait(new Runnable(){
      public void run(){
        outlineTable.setModel(mdl);
        NodeDataTable.this.dataTablesModel=dataTablesModel;
        setNodesSelection(selectedNodes);
        selectedNodes=null;
      }
    }
);
  }
 catch (  InterruptedException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  InvocationTargetException ex) {
    Exceptions.printStackTrace(ex);
  }
  refreshingTable=false;
}","public void refreshModel(HierarchicalGraph graph,AttributeColumn[] cols,final DataTablesModel dataTablesModel){
  showingColumns=cols;
  DynamicModel dm=Lookup.getDefault().lookup(DynamicController.class).getModel();
  if (dm != null) {
    timeIntervalsRenderer.setMinMax(dm.getMin(),dm.getMax());
    currentTimeFormat=dm.getTimeFormat();
    timeIntervalsRenderer.setTimeFormat(currentTimeFormat);
    sparkLinesRenderer.setTimeFormat(currentTimeFormat);
  }
  timeIntervalsRenderer.setDrawGraphics(timeIntervalGraphics);
  refreshingTable=true;
  if (selectedNodes == null) {
    selectedNodes=getNodesFromSelectedRows();
  }
  NodeTreeModel nodeTreeModel=new NodeTreeModel(graph.wrapToTreeNode());
  final OutlineModel mdl=DefaultOutlineModel.createOutlineModel(nodeTreeModel,new NodeRowModel(cols),true);
  outlineTable.setRootVisible(false);
  outlineTable.setRenderDataProvider(new NodeRenderer());
  outlineTable.setModel(mdl);
  NodeDataTable.this.dataTablesModel=dataTablesModel;
  setNodesSelection(selectedNodes);
  selectedNodes=null;
  refreshingTable=false;
}",0.7507186858316222
189991,"public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  graph.readLock();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    NodeData n1=e.getSource().getNodeData();
    NodeData n2=e.getTarget().getNodeData();
    ForceVector f1=n1.getLayoutData();
    ForceVector f2=n2.getLayoutData();
    ForceVector f=getEdgeForce().calculateForce(n1,n2);
    f1.add(f);
    f2.subtract(f);
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    if (!data.isFixed()) {
      ForceVector force=data.getLayoutData();
      force.multiply((float)(1.0 / maxForce));
      getDisplacement().moveNode(data,force);
    }
  }
  postAlgo();
  graph.readUnlock();
}","public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  graph.readLock();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    if (!e.getSource().equals(e.getTarget())) {
      NodeData n1=e.getSource().getNodeData();
      NodeData n2=e.getTarget().getNodeData();
      ForceVector f1=n1.getLayoutData();
      ForceVector f2=n2.getLayoutData();
      ForceVector f=getEdgeForce().calculateForce(n1,n2);
      f1.add(f);
      f2.subtract(f);
    }
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    if (!data.isFixed()) {
      ForceVector force=data.getLayoutData();
      force.multiply((float)(1.0 / maxForce));
      getDisplacement().moveNode(data,force);
    }
  }
  postAlgo();
  System.out.println(""String_Node_Str"" + energy0 + ""String_Node_Str""+ energy);
  graph.readUnlock();
}",0.9538171536286524
189992,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(graph,attributeModel);
}","private void execute(HierarchicalGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  triangles(hgraph,attributeModel);
}",0.9588014981273408
189993,"/** 
 * @param v - The specific node to count the triangles on.
 */
public void newVertex(int v){
  int[] A=new int[N];
  for (int i=network[v].length() - 1; (i >= 0) && (network[v].get(i) > v); i--) {
    int neighbor=network[v].get(i);
    A[neighbor]=network[v].getCount(i);
  }
  for (int i=network[v].length() - 1; i >= 0; i--) {
    int neighbor=network[v].get(i);
    for (int j=closest_in_array(neighbor); j >= 0; j--) {
      int next=network[neighbor].get(j);
      if (A[next] > 0) {
        triangles[next]+=network[v].getCount(i);
        triangles[v]+=network[v].getCount(i);
        triangles[neighbor]+=A[next];
      }
    }
  }
}","/** 
 * @param v - The specific node to count the triangles on.
 */
private void newVertex(int v){
  int[] A=new int[N];
  for (int i=network[v].length() - 1; (i >= 0) && (network[v].get(i) > v); i--) {
    int neighbor=network[v].get(i);
    A[neighbor]=network[v].getCount(i);
  }
  for (int i=network[v].length() - 1; i >= 0; i--) {
    int neighbor=network[v].get(i);
    for (int j=closest_in_array(neighbor); j >= 0; j--) {
      int next=network[neighbor].get(j);
      if (A[next] > 0) {
        triangles[next]+=network[v].getCount(i);
        triangles[v]+=network[v].getCount(i);
        triangles[neighbor]+=A[next];
      }
    }
  }
}",0.9915057915057915
189994,"/** 
 * @param u
 * @param v
 */
public void tr_link_nohigh(int u,int v,int count){
  int iu=0, iv=0, w;
  while ((iu < network[u].length()) && (iv < network[v].length())) {
    if (network[u].get(iu) < network[v].get(iv)) {
      iu++;
    }
 else     if (network[u].get(iu) > network[v].get(iv)) {
      iv++;
    }
 else {
      w=network[u].get(iu);
      if (w >= K) {
        triangles[w]+=count;
      }
      iu++;
      iv++;
    }
  }
}","private void tr_link_nohigh(int u,int v,int count){
  int iu=0, iv=0, w;
  while ((iu < network[u].length()) && (iv < network[v].length())) {
    if (network[u].get(iu) < network[v].get(iv)) {
      iu++;
    }
 else     if (network[u].get(iu) > network[v].get(iv)) {
      iv++;
    }
 else {
      w=network[u].get(iu);
      if (w >= K) {
        triangles[w]+=count;
      }
      iu++;
      iv++;
    }
  }
}",0.9511627906976744
189995,"public void triangles(HierarchicalGraph graph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * graph.getNodeCount());
  graph.readLock();
  N=graph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : graph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : graph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : graph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)graph).getInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)graph).getOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  for (  Node s : graph.getNodes()) {
    int v=indicies.get(s);
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  graph.readUnlock();
}","private void triangles(HierarchicalGraph hgraph,AttributeModel attributeModel){
  int ProgressCount=0;
  Progress.start(progress,7 * hgraph.getNodeCount());
  hgraph.readLock();
  N=hgraph.getNodeCount();
  nodeClustering=new double[N];
  network=new ArrayWrapper[N];
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    network[index]=new ArrayWrapper();
    index++;
    Progress.progress(progress,++ProgressCount);
  }
  index=0;
  for (  Node node : hgraph.getNodes()) {
    HashMap<Node,EdgeWrapper> neighborTable=new HashMap<Node,EdgeWrapper>();
    if (!isDirected) {
      for (      Node neighbor : hgraph.getNeighbors(node)) {
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
    }
 else {
      for (      Edge in : ((HierarchicalDirectedGraph)hgraph).getInEdgesAndMetaInEdges(node)) {
        Node neighbor=in.getSource();
        neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
      }
      for (      Edge out : ((HierarchicalDirectedGraph)hgraph).getOutEdgesAndMetaOutEdges(node)) {
        Node neighbor=out.getTarget();
        EdgeWrapper ew=neighborTable.get(neighbor);
        if (ew == null) {
          neighborTable.put(neighbor,new EdgeWrapper(1,network[indicies.get(neighbor)]));
        }
 else {
          ew.count++;
        }
      }
    }
    EdgeWrapper[] edges=new EdgeWrapper[neighborTable.size()];
    int i=0;
    for (    EdgeWrapper e : neighborTable.values()) {
      edges[i]=e;
      i++;
    }
    network[index].node=node;
    network[index].setArray(edges);
    index++;
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  Arrays.sort(network);
  for (int j=0; j < N; j++) {
    network[j].setID(j);
    Progress.progress(progress,++ProgressCount);
  }
  for (int j=0; j < N; j++) {
    Arrays.sort(network[j].getArray(),new Renumbering());
    Progress.progress(progress,++ProgressCount);
  }
  triangles=new int[N];
  K=(int)Math.sqrt(N);
  for (int v=0; v < K && v < N; v++) {
    newVertex(v);
    Progress.progress(progress,++ProgressCount);
  }
  for (int v=N - 1; (v >= 0) && (v >= K); v--) {
    for (int i=closest_in_array(v); i >= 0; i--) {
      int u=network[v].get(i);
      if (u >= K) {
        tr_link_nohigh(u,v,network[v].getCount(i));
      }
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  avgClusteringCoeff=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn clusteringCol=nodeTable.getColumn(CLUSTERING_COEFF);
  if (clusteringCol == null) {
    clusteringCol=nodeTable.addColumn(CLUSTERING_COEFF,""String_Node_Str"",AttributeType.DOUBLE,AttributeOrigin.COMPUTED,new Double(0));
  }
  for (  Node s : hgraph.getNodes()) {
    int v=indicies.get(s);
    if (network[v].length() > 1) {
      double cc=triangles[v];
      totalTriangles+=triangles[v];
      cc/=(network[v].length() * (network[v].length() - 1));
      if (!isDirected) {
        cc*=2.0f;
      }
      nodeClustering[v]=cc;
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(clusteringCol,cc);
      avgClusteringCoeff+=cc;
    }
    Progress.progress(progress,++ProgressCount);
    if (isCanceled) {
      hgraph.readUnlockAll();
      return;
    }
  }
  totalTriangles/=3;
  avgClusteringCoeff/=N;
  hgraph.readUnlock();
}",0.986409966024915
189996,"/** 
 * @param v
 * @return
 */
public int closest_in_array(int v){
  int right=network[v].length() - 1;
  if (right < 0) {
    return (-1);
  }
  if (network[v].get(0) >= v) {
    return (-1);
  }
  if (network[v].get(right) < v) {
    return (right);
  }
  if (network[v].get(right) == v) {
    return (right - 1);
  }
  int left=0, mid;
  while (right > left) {
    mid=(left + right) / 2;
    if (v < network[v].get(mid)) {
      right=mid - 1;
    }
 else     if (v > network[v].get(mid)) {
      left=mid + 1;
    }
 else {
      return (mid - 1);
    }
  }
  if (v > network[v].get(right)) {
    return (right);
  }
 else {
    return right - 1;
  }
}","private int closest_in_array(int v){
  int right=network[v].length() - 1;
  if (right < 0) {
    return (-1);
  }
  if (network[v].get(0) >= v) {
    return (-1);
  }
  if (network[v].get(right) < v) {
    return (right);
  }
  if (network[v].get(right) == v) {
    return (right - 1);
  }
  int left=0, mid;
  while (right > left) {
    mid=(left + right) / 2;
    if (v < network[v].get(mid)) {
      right=mid - 1;
    }
 else     if (v > network[v].get(mid)) {
      left=mid + 1;
    }
 else {
      return (mid - 1);
    }
  }
  if (v > network[v].get(right)) {
    return (right);
  }
 else {
    return right - 1;
  }
}",0.9680933852140078
189997,"public void weaklyConnected(HierarchicalUndirectedGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  componentCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(WEAKLY);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(WEAKLY,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  List<Integer> sizeList=new ArrayList<Integer>();
  graph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : graph.getNodes()) {
    indicies.put(s,index);
    index++;
  }
  int N=graph.getNodeCount();
  int[] color=new int[N];
  Progress.start(progress,graph.getNodeCount());
  int seenCount=0;
  while (seenCount < N) {
    LinkedList<Node> Q=new LinkedList<Node>();
    LinkedList<Node> component=new LinkedList<Node>();
    NodeIterable iter=graph.getNodes();
    for (    Node first : iter) {
      if (color[indicies.get(first)] == 0) {
        Q.add(first);
        iter.doBreak();
        break;
      }
    }
    while (!Q.isEmpty()) {
      if (isCanceled) {
        graph.readUnlock();
        return;
      }
      Node u=Q.removeFirst();
      component.add(u);
      EdgeIterable edgeIter=graph.getEdges(u);
      for (      Edge edge : edgeIter) {
        Node reachable=graph.getOpposite(u,edge);
        int id=indicies.get(reachable);
        if (color[id] == 0) {
          color[id]=1;
          Q.addLast(reachable);
          Progress.progress(progress,seenCount);
        }
      }
      color[indicies.get(u)]=2;
      seenCount++;
    }
    for (    Node s : component) {
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(componentCol,componentCount);
    }
    sizeList.add(component.size());
    componentCount++;
  }
  graph.readUnlock();
  componentsSize=new int[sizeList.size()];
  for (int i=0; i < sizeList.size(); i++) {
    componentsSize[i]=sizeList.get(i);
  }
}","public void weaklyConnected(HierarchicalUndirectedGraph hgraph,AttributeModel attributeModel){
  isCanceled=false;
  componentCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(WEAKLY);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(WEAKLY,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  List<Integer> sizeList=new ArrayList<Integer>();
  hgraph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int index=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,index);
    index++;
  }
  int N=hgraph.getNodeCount();
  int[] color=new int[N];
  Progress.start(progress,hgraph.getNodeCount());
  int seenCount=0;
  while (seenCount < N) {
    LinkedList<Node> Q=new LinkedList<Node>();
    LinkedList<Node> component=new LinkedList<Node>();
    NodeIterable iter=hgraph.getNodes();
    for (    Node first : iter) {
      if (color[indicies.get(first)] == 0) {
        Q.add(first);
        iter.doBreak();
        break;
      }
    }
    while (!Q.isEmpty()) {
      if (isCanceled) {
        hgraph.readUnlock();
        return;
      }
      Node u=Q.removeFirst();
      component.add(u);
      EdgeIterable edgeIter=hgraph.getEdgesAndMetaEdges(u);
      for (      Edge edge : edgeIter) {
        Node reachable=hgraph.getOpposite(u,edge);
        int id=indicies.get(reachable);
        if (color[id] == 0) {
          color[id]=1;
          Q.addLast(reachable);
          Progress.progress(progress,seenCount);
        }
      }
      color[indicies.get(u)]=2;
      seenCount++;
    }
    for (    Node s : component) {
      AttributeRow row=(AttributeRow)s.getNodeData().getAttributes();
      row.setValue(componentCol,componentCount);
    }
    sizeList.add(component.size());
    componentCount++;
  }
  hgraph.readUnlock();
  componentsSize=new int[sizeList.size()];
  for (int i=0; i < sizeList.size(); i++) {
    componentsSize[i]=sizeList.get(i);
  }
}",0.9945382323733865
189998,"/** 
 * @param col
 * @param S
 * @param graph
 * @param f
 * @param index
 * @param low_index
 * @param indicies
 */
private void tarjans(AttributeColumn col,LinkedList<Node> S,HierarchicalDirectedGraph graph,Node f,int[] index,int[] low_index,HashMap<Node,Integer> indicies){
  int id=indicies.get(f);
  index[id]=count;
  low_index[id]=count;
  count++;
  S.addFirst(f);
  EdgeIterable edgeIter=graph.getOutEdges(f);
  for (  Edge e : edgeIter) {
    Node u=graph.getOpposite(f,e);
    int x=indicies.get(u);
    if (index[x] == 0) {
      tarjans(col,S,graph,u,index,low_index,indicies);
      low_index[id]=Math.min(low_index[x],low_index[id]);
    }
 else     if (S.contains(u)) {
      low_index[id]=Math.min(low_index[id],index[x]);
    }
  }
  if (low_index[id] == index[id]) {
    Node v=null;
    while (v != f) {
      v=S.removeFirst();
      AttributeRow row=(AttributeRow)v.getNodeData().getAttributes();
      row.setValue(col,stronglyCount);
    }
    stronglyCount++;
  }
}","private void tarjans(AttributeColumn col,LinkedList<Node> S,HierarchicalDirectedGraph hgraph,Node f,int[] index,int[] low_index,HashMap<Node,Integer> indicies){
  int id=indicies.get(f);
  index[id]=count;
  low_index[id]=count;
  count++;
  S.addFirst(f);
  EdgeIterable edgeIter=hgraph.getOutEdgesAndMetaOutEdges(f);
  for (  Edge e : edgeIter) {
    Node u=hgraph.getOpposite(f,e);
    int x=indicies.get(u);
    if (index[x] == 0) {
      tarjans(col,S,hgraph,u,index,low_index,indicies);
      low_index[id]=Math.min(low_index[x],low_index[id]);
    }
 else     if (S.contains(u)) {
      low_index[id]=Math.min(low_index[id],index[x]);
    }
  }
  if (low_index[id] == index[id]) {
    Node v=null;
    while (v != f) {
      v=S.removeFirst();
      AttributeRow row=(AttributeRow)v.getNodeData().getAttributes();
      row.setValue(col,stronglyCount);
    }
    stronglyCount++;
  }
}",0.912373871481678
189999,"public void top_tarjans(HierarchicalDirectedGraph graph,AttributeModel attributeModel){
  count=1;
  stronglyCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(STRONG);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(STRONG,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  graph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int v=0;
  for (  Node s : graph.getNodes()) {
    indicies.put(s,v);
    v++;
  }
  int N=graph.getNodeCount();
  int[] index=new int[N];
  int[] low_index=new int[N];
  while (true) {
    LinkedList<Node> S=new LinkedList<Node>();
    Node first=null;
    NodeIterable iter=graph.getNodes();
    for (    Node u : iter) {
      if (index[indicies.get(u)] == 0) {
        first=u;
        iter.doBreak();
        break;
      }
    }
    if (first == null) {
      graph.readUnlockAll();
      return;
    }
    tarjans(componentCol,S,graph,first,index,low_index,indicies);
  }
}","private void top_tarjans(HierarchicalDirectedGraph hgraph,AttributeModel attributeModel){
  count=1;
  stronglyCount=0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn componentCol=nodeTable.getColumn(STRONG);
  if (componentCol == null) {
    componentCol=nodeTable.addColumn(STRONG,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,new Integer(0));
  }
  hgraph.readLock();
  HashMap<Node,Integer> indicies=new HashMap<Node,Integer>();
  int v=0;
  for (  Node s : hgraph.getNodes()) {
    indicies.put(s,v);
    v++;
  }
  int N=hgraph.getNodeCount();
  int[] index=new int[N];
  int[] low_index=new int[N];
  while (true) {
    LinkedList<Node> S=new LinkedList<Node>();
    Node first=null;
    NodeIterable iter=hgraph.getNodes();
    for (    Node u : iter) {
      if (index[indicies.get(u)] == 0) {
        first=u;
        iter.doBreak();
        break;
      }
    }
    if (first == null) {
      hgraph.readUnlockAll();
      return;
    }
    tarjans(componentCol,S,hgraph,first,index,low_index,indicies);
  }
}",0.9905660377358492
190000,"public void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  if (isDirected) {
    inDistribution=new double[2][2 * graph.getNodeCount()];
    outDistribution=new double[2][2 * graph.getNodeCount()];
  }
 else {
    combinedDistribution=new double[2][2 * graph.getNodeCount()];
  }
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    if (isDirected) {
      int inDegree=((HierarchicalDirectedGraph)graph).getTotalInDegree(node);
      int outDegree=((HierarchicalDirectedGraph)graph).getTotalOutDegree(node);
      inDistribution[1][inDegree]++;
      outDistribution[1][outDegree]++;
      inDistribution[0][inDegree]=inDegree;
      outDistribution[0][outDegree]=outDegree;
    }
 else {
      int combinedDegree=((HierarchicalUndirectedGraph)graph).getTotalDegree(node);
      combinedDistribution[1][combinedDegree]++;
      combinedDistribution[0][combinedDegree]=combinedDegree;
    }
    Progress.progress(progress,nodeCount);
    nodeCount++;
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  if (isDirected) {
    double[] inFit=new double[2];
    double[] outFit=new double[2];
    leastSquares(inDistribution[1],inFit);
    leastSquares(outDistribution[1],outFit);
    inAlpha=inFit[1];
    inBeta=inFit[0];
    outAlpha=outFit[1];
    outBeta=outFit[0];
  }
 else {
    double[] fit=new double[2];
    leastSquares(combinedDistribution[1],fit);
    combinedAlpha=fit[1];
    combinedBeta=fit[0];
  }
}","private void execute(HierarchicalGraph graph,AttributeModel attributeModel){
  isCanceled=false;
  graph.readLock();
  Progress.start(progress,graph.getNodeCount());
  if (isDirected) {
    inDistribution=new double[2][2 * graph.getNodeCount()];
    outDistribution=new double[2][2 * graph.getNodeCount()];
  }
 else {
    combinedDistribution=new double[2][2 * graph.getNodeCount()];
  }
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    if (isDirected) {
      int inDegree=((HierarchicalDirectedGraph)graph).getTotalInDegree(node);
      int outDegree=((HierarchicalDirectedGraph)graph).getTotalOutDegree(node);
      inDistribution[1][inDegree]++;
      outDistribution[1][outDegree]++;
      inDistribution[0][inDegree]=inDegree;
      outDistribution[0][outDegree]=outDegree;
    }
 else {
      int combinedDegree=((HierarchicalUndirectedGraph)graph).getTotalDegree(node);
      combinedDistribution[1][combinedDegree]++;
      combinedDistribution[0][combinedDegree]=combinedDegree;
    }
    Progress.progress(progress,nodeCount);
    nodeCount++;
    if (isCanceled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  if (isDirected) {
    double[] inFit=new double[2];
    double[] outFit=new double[2];
    leastSquares(inDistribution[1],inFit);
    leastSquares(outDistribution[1],outFit);
    inAlpha=inFit[1];
    inBeta=inFit[0];
    outAlpha=outFit[1];
    outBeta=outFit[0];
  }
 else {
    double[] fit=new double[2];
    leastSquares(combinedDistribution[1],fit);
    combinedAlpha=fit[1];
    combinedBeta=fit[0];
  }
}",0.9965222889661712
