record_number,buggy_code,fixed_code,code_similarity
75001,"public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    this.callStat.execute();
    if (this.callStat.getResultSet() != null)     return new ResultSet(this.callStat.getResultSet());
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}","public IResultSet executeQuery() throws OdaException {
  logger.logp(java.util.logging.Level.FINE,CallStatement.class.getName(),""String_Node_Str"",""String_Node_Str"");
  if (this.cachedResultSet != null) {
    IResultSet ret=this.cachedResultSet;
    this.cachedResultSet=null;
    return ret;
  }
  try {
    if (!maxRowsUpToDate) {
      try {
        assertNotNull(callStat);
        callStat.setMaxRows(maxrows);
      }
 catch (      SQLException e1) {
      }
      maxRowsUpToDate=true;
    }
    registerOutputParameter();
    java.sql.ResultSet rs=this.callStat.executeQuery();
    if (rs != null)     return new ResultSet(rs);
    java.sql.ResultSet resultSet=getOutputParamResultSet();
    if (resultSet != null)     return new ResultSet(resultSet);
 else     return new SPResultSet(null);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_RETURN,e);
  }
}",0.9528455284552846
75002,"/** 
 * Init context.
 * @param request incoming http request
 * @param response http response
 * @exception BirtException
 * @return IContext
 */
protected IContext __getContext(HttpServletRequest request,HttpServletResponse response) throws BirtException {
  BirtReportServiceFactory.getReportService().setContext(getServletContext(),null);
  return new BirtContext(request,response);
}","/** 
 * Init context.
 * @param request incoming http request
 * @param response http response
 * @exception BirtException
 * @return IContext
 */
protected IContext __getContext(HttpServletRequest request,HttpServletResponse response) throws BirtException {
  try {
    request.setCharacterEncoding(ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  BirtReportServiceFactory.getReportService().setContext(getServletContext(),null);
  return new BirtContext(request,response);
}",0.837108953613808
75003,"/** 
 * Init context.
 * @param request incoming http request
 * @param response http response
 * @exception BirtException
 * @return IContext
 */
protected IContext __getContext(HttpServletRequest request,HttpServletResponse response) throws BirtException {
  BirtReportServiceFactory.getReportService().setContext(getServletContext(),null);
  return new BirtContext(request,response);
}","/** 
 * Init context.
 * @param request incoming http request
 * @param response http response
 * @exception BirtException
 * @return IContext
 */
protected IContext __getContext(HttpServletRequest request,HttpServletResponse response) throws BirtException {
  try {
    request.setCharacterEncoding(ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
  BirtReportServiceFactory.getReportService().setContext(getServletContext(),null);
  return new BirtContext(request,response);
}",0.837108953613808
75004,"/** 
 * Build fragment by adding sidebar fragment root.
 */
protected void build(){
  addChild(new TocFragment());
  addChild(new DialogContainerFragment(new SimpleExportDataDialogFragment()));
  addChild(new DialogContainerFragment(new ExceptionDialogFragment()));
  addChild(new DialogContainerFragment(new ParameterDialogFragment()));
  addChild(new DialogContainerFragment(new ExportReportDialogFragment()));
  addChild(new DialogContainerFragment(new PrintReportDialogFragment()));
  addChild(new DialogContainerFragment(new ConfirmationDialogFragment()));
}","/** 
 * Build fragment by adding sidebar fragment root.
 */
protected void build(){
  addChild(new TocFragment());
  addChild(new DialogContainerFragment(new SimpleExportDataDialogFragment()));
  addChild(new DialogContainerFragment(new ExceptionDialogFragment()));
  addChild(new DialogContainerFragment(new ParameterDialogFragment()));
  addChild(new DialogContainerFragment(new ExportReportDialogFragment()));
  addChild(new DialogContainerFragment(new PrintReportDialogFragment()));
  addChild(new DialogContainerFragment(new PrintReportServerDialogFragment()));
  addChild(new DialogContainerFragment(new ConfirmationDialogFragment()));
}",0.933665008291874
75005,"public void startContent(IContent content,IContentEmitter emitter){
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
    ContentEmitterUtil.endContent(content,emitter);
  }
}","public void startContent(IContent content,IContentEmitter emitter){
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
    ContentEmitterUtil.endContent(content,emitter);
  }
}",0.8275862068965517
75006,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter){
  if (emitter != null) {
    ContentEmitterUtil.endContent(content,emitter);
  }
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter){
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}",0.7031578947368421
75007,"public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter){
  if (emitter != null) {
    ContentEmitterUtil.startContent(content,emitter);
  }
}","public void startContainer(IContent content,boolean isFirst,IContentEmitter emitter){
  if (content.getContentType() == IContent.PAGE_CONTENT) {
    isFirstContent=true;
    pageContent=content;
    pageEmitter=emitter;
  }
 else {
    if (isFirstContent) {
      startPageContent(content);
      isFirstContent=false;
    }
    if (emitter != null) {
      ContentEmitterUtil.startContent(content,emitter);
    }
  }
}",0.5772495755517827
75008,"/** 
 * Checks out-of-range of each data point. If outside data is visible, adjust the coordinates; otherwise, clip the plot area. Note that coordinates array may be modified.
 * @param ipr renderer
 * @param srh SeriesRenderingHints
 * @param faX X coordinates
 * @param faY Y coordinates
 * @param bShowAsTape indicates if it's 2d+ chart
 */
protected final void handleOutsideDataPoints(final IPrimitiveRenderer ipr,final SeriesRenderingHints srh,final double[] faX,final double[] faY,final boolean bShowAsTape){
  final AutoScale scaleOrth=getInternalOrthogonalAxis().getScale();
  final Bounds boClientArea=srh.getClientAreaBounds(true);
  if (bShowAsTape) {
    final double dSeriesThickness=srh.getSeriesThickness();
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  renderClipping(ipr,boClientArea);
  if ((scaleOrth.getType() & IConstants.PERCENT) == IConstants.PERCENT) {
    return;
  }
  final boolean bHideOutside=!isShowOutside();
  final DataPointHints[] dpha=srh.getDataPoints();
  final boolean isCategory=srh.isCategoryScale();
  final boolean bTransposed=isTransposed();
  for (int i=0; i < dpha.length; i++) {
    if (!isCategory && dpha[i].getBaseValue() == null) {
      dpha[i].markOutside();
      continue;
    }
    int iOutside=0;
    if (dpha[i].getStackOrthogonalValue() != null) {
      double value=dpha[i].getStackOrthogonalValue().doubleValue();
      double min=Methods.asDouble(scaleOrth.getMinimum()).doubleValue();
      double max=Methods.asDouble(scaleOrth.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else {
      iOutside=checkEntryByType(scaleOrth,dpha[i].getOrthogonalValue());
    }
    final OneAxis axisBase=getInternalBaseAxis();
    if (iOutside == 0 && !srh.isCategoryScale()) {
      iOutside=checkEntryByType(axisBase.getScale(),dpha[i].getBaseValue());
    }
    if (iOutside > 0) {
      if (bHideOutside) {
        dpha[i].markOutside();
      }
 else {
        if (bTransposed) {
          if (!Double.isNaN(faX[i])) {
            faX[i]=iOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
          }
        }
 else {
          if (!Double.isNaN(faY[i])) {
            faY[i]=iOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
          }
        }
      }
    }
  }
}","/** 
 * Checks out-of-range of each data point. If outside data is visible, adjust the coordinates; otherwise, clip the plot area. Note that coordinates array may be modified.
 * @param ipr renderer
 * @param srh SeriesRenderingHints
 * @param faX X coordinates
 * @param faY Y coordinates
 * @param bShowAsTape indicates if it's 2d+ chart
 */
protected final void handleOutsideDataPoints(final IPrimitiveRenderer ipr,final SeriesRenderingHints srh,final double[] faX,final double[] faY,final boolean bShowAsTape){
  final AutoScale scaleOrth=getInternalOrthogonalAxis().getScale();
  final Bounds boClientArea=srh.getClientAreaBounds(true);
  if (bShowAsTape) {
    final double dSeriesThickness=srh.getSeriesThickness();
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  renderClipping(ipr,boClientArea);
  if ((scaleOrth.getType() & IConstants.PERCENT) == IConstants.PERCENT) {
    return;
  }
  final boolean bHideOutside=!isShowOutside();
  final DataPointHints[] dpha=srh.getDataPoints();
  final boolean isCategory=srh.isCategoryScale();
  final boolean bTransposed=isTransposed();
  for (int i=0; i < dpha.length; i++) {
    if (!isCategory && dpha[i].getBaseValue() == null) {
      dpha[i].markOutside();
      continue;
    }
    int iYOutside=0;
    if (dpha[i].getStackOrthogonalValue() != null) {
      double value=dpha[i].getStackOrthogonalValue().doubleValue();
      double min=Methods.asDouble(scaleOrth.getMinimum()).doubleValue();
      double max=Methods.asDouble(scaleOrth.getMaximum()).doubleValue();
      if (value < min) {
        iYOutside=1;
      }
 else       if (value > max) {
        iYOutside=2;
      }
    }
 else {
      iYOutside=checkEntryByType(scaleOrth,dpha[i].getOrthogonalValue());
    }
    final OneAxis axisBase=getInternalBaseAxis();
    int iXOutside=0;
    if (!srh.isCategoryScale()) {
      iXOutside=checkEntryByType(axisBase.getScale(),dpha[i].getBaseValue());
    }
    if (iXOutside > 0) {
      if (!baseIsShowOutside()) {
        dpha[i].markOutside();
        continue;
      }
 else {
        if (bTransposed) {
          if (!Double.isNaN(faY[i])) {
            faY[i]=iXOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
          }
        }
 else {
          if (!Double.isNaN(faX[i])) {
            faX[i]=iXOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
          }
        }
      }
    }
    if (iYOutside > 0) {
      if (bHideOutside) {
        dpha[i].markOutside();
        continue;
      }
 else {
        if (bTransposed) {
          if (!Double.isNaN(faX[i])) {
            faX[i]=iYOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
          }
        }
 else {
          if (!Double.isNaN(faY[i])) {
            faY[i]=iYOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
          }
        }
      }
    }
  }
}",0.8910303928836175
75009,"/** 
 * Clips the renderer. Need to restore the clipping after the use.
 * @param ipr
 * @param boClientArea
 */
protected final void renderClipping(final IPrimitiveRenderer ipr,final Bounds boClientArea){
  final boolean bFirstInSequence=(iSeriesIndex == 1);
  if (bFirstInSequence && !isDimension3D() && !isShowOutside()) {
    ClipRenderEvent clip=new ClipRenderEvent(this);
    Location[] locations=new Location[4];
    locations[0]=LocationImpl.create(boClientArea.getLeft(),boClientArea.getTop());
    locations[1]=LocationImpl.create(boClientArea.getLeft(),boClientArea.getTop() + boClientArea.getHeight());
    locations[2]=LocationImpl.create(boClientArea.getLeft() + boClientArea.getWidth(),boClientArea.getTop() + boClientArea.getHeight());
    locations[3]=LocationImpl.create(boClientArea.getLeft() + boClientArea.getWidth(),boClientArea.getTop());
    clip.setVertices(locations);
    ipr.setClip(clip);
  }
}","/** 
 * Clips the renderer. Need to restore the clipping after the use.
 * @param ipr
 * @param boClientArea
 */
protected final void renderClipping(final IPrimitiveRenderer ipr,final Bounds boClientArea){
  final boolean bFirstInSequence=(iSeriesIndex == 1);
  if (bFirstInSequence && !isDimension3D() && (!isShowOutside() || !baseIsShowOutside())) {
    ClipRenderEvent clip=new ClipRenderEvent(this);
    Location[] locations=new Location[4];
    locations[0]=LocationImpl.create(boClientArea.getLeft(),boClientArea.getTop());
    locations[1]=LocationImpl.create(boClientArea.getLeft(),boClientArea.getTop() + boClientArea.getHeight());
    locations[2]=LocationImpl.create(boClientArea.getLeft() + boClientArea.getWidth(),boClientArea.getTop() + boClientArea.getHeight());
    locations[3]=LocationImpl.create(boClientArea.getLeft() + boClientArea.getWidth(),boClientArea.getTop());
    clip.setVertices(locations);
    ipr.setClip(clip);
  }
}",0.9861111111111112
75010,"/** 
 * Flushes render event of all Series before clipping
 * @throws ChartException
 */
protected void flushClipping() throws ChartException {
  getDeferredCache().flushOptions(DeferredCache.FLUSH_LINE | DeferredCache.FLUSH_PLANE);
}","/** 
 * Flushes render event of all Series before clipping
 * @throws ChartException
 */
protected void flushClipping() throws ChartException {
  getDeferredCacheManager().flushOptions(DeferredCache.FLUSH_LINE | DeferredCache.FLUSH_PLANE);
}",0.9852631578947368
75011,"/** 
 * Restores the clipping
 * @param ipr
 * @throws ChartException
 */
protected void restoreClipping(final IPrimitiveRenderer ipr) throws ChartException {
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  if (bLastInSequence && !isDimension3D() && !isShowOutside()) {
    flushClipping();
    ClipRenderEvent clip=new ClipRenderEvent(this);
    clip.setVertices(null);
    ipr.setClip(clip);
  }
}","/** 
 * Restores the clipping
 * @param ipr
 * @throws ChartException
 */
protected void restoreClipping(final IPrimitiveRenderer ipr) throws ChartException {
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  if (bLastInSequence && !isDimension3D() && (!isShowOutside() || !baseIsShowOutside())) {
    flushClipping();
    ClipRenderEvent clip=new ClipRenderEvent(this);
    clip.setVertices(null);
    ipr.setClip(clip);
  }
}",0.9700460829493088
75012,"/** 
 * Flush all <code>DeferredCache</code> in the mananger.
 * @throws ChartException
 */
public void flushAll() throws ChartException {
  fFirstDC.flushOptions(DeferredCache.FLUSH_PLANE_SHADOW | DeferredCache.FLUSH_PLANE | DeferredCache.FLUSH_LINE| DeferredCache.FLUSH_3D);
  for (java.util.Iterator iter=fDeferredCacheList.iterator(); iter.hasNext(); ) {
    Object obj=iter.next();
    if (obj instanceof DeferredCache) {
      ((DeferredCache)obj).flushOptions(DeferredCache.FLUSH_PLANE_SHADOW | DeferredCache.FLUSH_PLANE | DeferredCache.FLUSH_LINE| DeferredCache.FLUSH_3D);
    }
  }
  fLastDC.flushOptions(DeferredCache.FLUSH_PLANE_SHADOW | DeferredCache.FLUSH_PLANE | DeferredCache.FLUSH_LINE| DeferredCache.FLUSH_3D);
  flushMarkersNLabels();
  clearDC();
}","/** 
 * Flush all <code>DeferredCache</code> in the mananger.
 * @throws ChartException
 */
public void flushAll() throws ChartException {
  int options=DeferredCache.FLUSH_PLANE_SHADOW | DeferredCache.FLUSH_PLANE | DeferredCache.FLUSH_LINE| DeferredCache.FLUSH_3D;
  flushOptions(options);
  flushMarkersNLabels();
  clearDC();
}",0.4831358249772106
75013,"/** 
 * Updates the current selected entry with the specified fill
 * @param cdi
 */
public final void updateSelectionFill(Fill f){
  if (iSelectedIndex == -1) {
    return;
  }
  elPaletteEntries1.set(iSelectedIndex,f);
  if (vSeriesDefns != null) {
    int size=elPaletteEntries1.size();
    for (int i=0; i < vSeriesDefns.length; i++) {
      if ((iSelectedIndex - i) >= 0) {
        vSeriesDefns[i].getSeriesPalette().getEntries().set(iSelectedIndex - i,EcoreUtil.copy(f));
      }
 else {
        int index=size - i + iSelectedIndex;
        while (index < 0) {
          index+=size;
        }
        vSeriesDefns[i].getSeriesPalette().getEntries().set(index,EcoreUtil.copy(f));
      }
    }
  }
  coPaletteEntries.redraw();
}","/** 
 * Updates the current selected entry with the specified fill
 * @param cdi
 */
public final void updateSelectionFill(Fill f){
  if (iSelectedIndex == -1) {
    return;
  }
  elPaletteEntries1.set(iSelectedIndex,f);
  if (vSeriesDefns != null) {
    int size=elPaletteEntries1.size();
    for (int i=0; i < vSeriesDefns.length; i++) {
      if ((iSelectedIndex - i) >= 0) {
        vSeriesDefns[i].getSeriesPalette().getEntries().set(iSelectedIndex - i,EcoreUtil.copy(f));
      }
 else {
        int index=size - i + iSelectedIndex;
        while (index < 0) {
          index+=size;
        }
        if (index < vSeriesDefns[i].getSeriesPalette().getEntries().size()) {
          vSeriesDefns[i].getSeriesPalette().getEntries().set(index,EcoreUtil.copy(f));
        }
      }
    }
  }
  coPaletteEntries.redraw();
}",0.9422336328626444
75014,"protected void setState(){
  boolean bEnabled=!(getAxisForProcessing().isCategoryAxis() || getAxisForProcessing().getType() == AxisType.TEXT_LITERAL);
  setState(bEnabled);
  if (axisAngleType != AngleType.Y) {
    btnShowOutside.setEnabled(false);
  }
}","protected void setState(){
  boolean bEnabled=!(getAxisForProcessing().isCategoryAxis() || getAxisForProcessing().getType() == AxisType.TEXT_LITERAL);
  setState(bEnabled);
  if (axisAngleType != AngleType.Y) {
    btnShowOutside.setEnabled(false);
    btnShowOutside.setSelection(false);
    getScale().setShowOutside(false);
  }
}",0.8668941979522184
75015,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.getTitle(request);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.979683972911964
75016,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.getTitle(request);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.98032154340836
75017,"public IReportItemExecutor getNextChild(){
  if (childIterator.hasNext()) {
    IContent child=(IContent)childIterator.next();
    return manager.createExecutor(child);
  }
  return null;
}","public IReportItemExecutor getNextChild(){
  if (null != childIterator && childIterator.hasNext()) {
    IContent child=(IContent)childIterator.next();
    return manager.createExecutor(child);
  }
  return null;
}",0.9379652605459056
75018,"public IContent execute(){
  childIterator=content.getChildren().iterator();
  return content;
}","public IContent execute(){
  if (null == content) {
    return null;
  }
  childIterator=content.getChildren().iterator();
  return content;
}",0.8067226890756303
75019,"public boolean hasNextChild(){
  return childIterator.hasNext();
}","public boolean hasNextChild(){
  if (null == childIterator) {
    return false;
  }
  return childIterator.hasNext();
}",0.7135135135135136
75020,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.getTitle(request);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9961109670728544
75021,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.getTitle(request);
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_OUTPUT.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  String reportTitle=ParameterAccessor.htmlDecode(ParameterAccessor.getTitle(request));
  if (reportTitle != null)   renderOption.setOption(IHTMLRenderOption.HTML_TITLE,reportTitle);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9962302085951243
75022,"public void endContainer(IContent content,boolean finished,IContentEmitter emitter){
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}","public void endContainer(IContent content,boolean finished,IContentEmitter emitter){
  if (isFirstContent) {
    startPageContent(content);
    isFirstContent=false;
  }
  if (emitter != null) {
    if (content.getContentType() == IContent.PAGE_CONTENT) {
      ContentEmitterUtil.endContent(pageContent,emitter);
    }
 else {
      ContentEmitterUtil.endContent(content,emitter);
    }
  }
}",0.8787446504992867
75023,"/** 
 * @throws Exception
 */
public void testEstablishDataGroup() throws Exception {
  openDesign(""String_Node_Str"");
  TableHandle table2=(TableHandle)designHandle.findElement(""String_Node_Str"");
  TableHandle table1=(TableHandle)designHandle.findElement(""String_Node_Str"");
  table2.setDataBindingReference(table1);
  save();
  compareFile(""String_Node_Str"");
  designHandle.getCommandStack().undo();
  save();
  compareFile(""String_Node_Str"");
  designHandle.getCommandStack().redo();
  save();
  compareFile(""String_Node_Str"");
}","/** 
 * @throws Exception
 */
public void testEstablishDataGroup() throws Exception {
  openDesign(""String_Node_Str"");
  TableHandle table2=(TableHandle)designHandle.findElement(""String_Node_Str"");
  TableHandle table1=(TableHandle)designHandle.findElement(""String_Node_Str"");
  table2.setDataBindingReference(table1);
  save();
  compareFile(""String_Node_Str"");
  designHandle.getCommandStack().undo();
  save();
  compareFile(""String_Node_Str"");
  designHandle.getCommandStack().redo();
  save();
  compareFile(""String_Node_Str"");
  table2.setDataBindingReference(null);
  save();
  compareFile(""String_Node_Str"");
  designHandle.getCommandStack().undo();
  save();
  compareFile(""String_Node_Str"");
  table2.setDataBindingReference(designHandle.getElementFactory().newTableItem(""String_Node_Str""));
  save();
  compareFile(""String_Node_Str"");
}",0.7733526430123099
75024,"/** 
 * Handle HTTP POST method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  StringBuffer builder=new StringBuffer();
  Iterator it=request.getParameterMap().keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    if (paramName != null && paramName.startsWith(""String_Node_Str"")) {
      String paramValue=ParameterAccessor.urlEncode(ParameterAccessor.getParameter(request,paramName),ParameterAccessor.UTF_8_ENCODE);
      builder.append(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramValue);
    }
  }
  String soapURL=request.getRequestURL().toString();
  if (request.getQueryString() != null) {
    soapURL+=""String_Node_Str"" + request.getQueryString() + builder.toString();
  }
 else {
    builder.deleteCharAt(0);
    soapURL+=""String_Node_Str"" + builder.toString();
  }
  request.setAttribute(""String_Node_Str"",soapURL);
  IContext context=null;
  try {
    context=__getContext(request,response);
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
    return;
  }
  try {
    __doPost(context);
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
      super.doPost(request,response);
    }
 else {
      doGet(request,response);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","/** 
 * Handle HTTP POST method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  StringBuffer builder=new StringBuffer();
  Iterator it=request.getParameterMap().keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    if (paramName != null && paramName.startsWith(""String_Node_Str"")) {
      String paramValue=ParameterAccessor.urlEncode(ParameterAccessor.getParameter(request,paramName),ParameterAccessor.UTF_8_ENCODE);
      builder.append(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramValue);
    }
  }
  String soapURL=request.getRequestURL().toString();
  if (ParameterAccessor.getBaseURL() != null)   soapURL=ParameterAccessor.getBaseURL() + request.getContextPath() + request.getServletPath();
  if (request.getQueryString() != null) {
    soapURL+=""String_Node_Str"" + request.getQueryString() + builder.toString();
  }
 else {
    builder.deleteCharAt(0);
    soapURL+=""String_Node_Str"" + builder.toString();
  }
  request.setAttribute(""String_Node_Str"",soapURL);
  IContext context=null;
  try {
    context=__getContext(request,response);
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
    return;
  }
  try {
    __doPost(context);
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
      super.doPost(request,response);
    }
 else {
      doGet(request,response);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}",0.9592422502870264
75025,"public void writeText(String txt){
  writer.openTag(""String_Node_Str"");
  try {
    Integer.parseInt(txt);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}","public void writeText(String txt){
  writer.openTag(""String_Node_Str"");
  try {
    new java.math.BigDecimal(txt);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  Exception e) {
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
  }
  writer.text(txt);
  writer.closeTag(""String_Node_Str"");
}",0.9376947040498442
75026,"protected boolean isRootEmpty(){
  if (isLast) {
    return false;
  }
  return super.isRootEmpty();
}","protected boolean isRootEmpty(){
  if (isLast) {
    return false;
  }
  if (parent.root != null && parent.root.getChildrenCount() > 0) {
    return false;
  }
  return super.isRootEmpty();
}",0.6962457337883959
75027,"/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(QueryDefinition queryDefn) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
      }
    }
    defineDataSet(handle);
  }
}","/** 
 * @param queryDefn
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSourceDataSet(QueryDefinition queryDefn) throws AdapterException, BirtException {
  String dataSetName=queryDefn.getDataSetName();
  ModuleHandle module=sessionContext.getModuleHandle();
  if (module != null) {
    List l=module.getAllDataSets();
    DataSetHandle handle=null;
    for (int i=0; i < l.size(); i++) {
      if (((DataSetHandle)l.get(i)).getQualifiedName() != null && ((DataSetHandle)l.get(i)).getQualifiedName().equals(dataSetName)) {
        handle=(DataSetHandle)l.get(i);
      }
    }
    major=handle;
    defineDataSet(handle);
  }
}",0.9646697388632872
75028,"/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle) throws AdapterException, BirtException {
  if (handle == null)   throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false)   baseDS.getResultSetHints().clear();
  dataEngine.defineDataSet(baseDS);
}","/** 
 * @param dataSetName
 * @throws AdapterException
 * @throws BirtException
 */
private void defineDataSet(DataSetHandle handle) throws AdapterException, BirtException {
  if (handle == null)   throw new AdapterException(ResourceConstants.DATASETHANDLE_NULL_ERROR);
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=this.modelAdaptor.adaptDataSource(dataSourceHandle);
    dataEngine.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    defineSourceDataSets((JointDataSetHandle)handle);
  }
  BaseDataSetDesign baseDS=this.modelAdaptor.adaptDataSet(handle);
  if (useResultHints == false && handle.equals(major)) {
    baseDS.getResultSetHints().clear();
  }
  dataEngine.defineDataSet(baseDS);
}",0.9788029925187032
75029,"private void refreshDataPointButtons(){
  btnFormatSpecifier.setEnabled(lstComponents.getSelectionIndex() != -1);
  btnRemoveComponent.setEnabled(lstComponents.getSelectionIndex() != -1);
  if (btnFormatSpecifier.isEnabled()) {
    DataPointComponentType dpct=DataPointComponentType.getByName(LiteralHelper.dataPointComponentTypeSet.getNameByDisplayName(lstComponents.getItem(lstComponents.getSelectionIndex())));
    btnFormatSpecifier.setEnabled(dpct != DataPointComponentType.SERIES_VALUE_LITERAL);
  }
}","private void refreshDataPointButtons(){
  btnRemoveComponent.setEnabled(lstComponents.getSelectionIndex() != -1);
  boolean formatEnable=(lstComponents.getSelectionIndex() != -1);
  if (formatEnable) {
    DataPointComponentType dpct=DataPointComponentType.getByName(LiteralHelper.dataPointComponentTypeSet.getNameByDisplayName(lstComponents.getItem(lstComponents.getSelectionIndex())));
    if (dpct == DataPointComponentType.SERIES_VALUE_LITERAL) {
      formatEnable=false;
    }
 else     if (getAxisType(dpct) == AxisType.TEXT_LITERAL) {
      formatEnable=false;
    }
  }
  btnFormatSpecifier.setEnabled(formatEnable);
}",0.3721340388007054
75030,"private void setDataPointComponentFormatSpecifier(int iComponentIndex){
  DataPointComponent dpc=(DataPointComponent)getSeriesForProcessing().getDataPoint().getComponents().get(getIndexOfListItem(iComponentIndex));
  FormatSpecifier formatspecifier=dpc.getFormatSpecifier();
  String sContext=new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{dpc.getType().getName()});
  if (sContext == null) {
    sContext=Messages.getString(""String_Node_Str"");
  }
  FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,sContext);
  if (editor.open() == Window.OK) {
    if (editor.getFormatSpecifier() == null) {
      dpc.eUnset(AttributePackage.eINSTANCE.getDataPointComponent_FormatSpecifier());
      return;
    }
    dpc.setFormatSpecifier(editor.getFormatSpecifier());
  }
}","private void setDataPointComponentFormatSpecifier(int iComponentIndex){
  DataPointComponent dpc=(DataPointComponent)getSeriesForProcessing().getDataPoint().getComponents().get(getIndexOfListItem(iComponentIndex));
  FormatSpecifier formatspecifier=dpc.getFormatSpecifier();
  String sContext=new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{dpc.getType().getName()});
  if (sContext == null) {
    sContext=Messages.getString(""String_Node_Str"");
  }
  FormatSpecifierDialog editor=null;
  if (getAxisType(dpc.getType()) == AxisType.DATE_TIME_LITERAL) {
    editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,AxisType.DATE_TIME_LITERAL,sContext);
  }
 else {
    editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,sContext);
  }
  if (editor.open() == Window.OK) {
    if (editor.getFormatSpecifier() == null) {
      dpc.eUnset(AttributePackage.eINSTANCE.getDataPointComponent_FormatSpecifier());
      return;
    }
    dpc.setFormatSpecifier(editor.getFormatSpecifier());
  }
}",0.881104033970276
75031,"/** 
 * Convert IGroupDefn to IQuery.GroupSpec
 * @param cx
 * @param src
 * @return
 * @throws DataException
 */
static IQuery.GroupSpec groupDefnToSpec(Context cx,IGroupDefinition src,String expr,String columnName,int index) throws DataException {
  ColumnInfo groupKeyInfo=new ColumnInfo(index,columnName);
  int groupIndex=groupKeyInfo.getColumnIndex();
  String groupKey=groupKeyInfo.getColumnName();
  boolean isComplexExpression=true;
  IQuery.GroupSpec dest=new IQuery.GroupSpec(groupIndex,groupKey);
  dest.setName(src.getName());
  dest.setInterval(src.getInterval());
  dest.setIntervalRange(src.getIntervalRange());
  dest.setIntervalStart(src.getIntervalStart());
  dest.setFilters(src.getFilters());
  if (src.getSorts().size() == 0) {
    List sorts=new ArrayList();
    SortDefinition sd=new SortDefinition();
    sd.setExpression(expr);
    sd.setSortDirection(src.getSortDirection() != ISortDefinition.SORT_DESC ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
    sorts.add(sd);
    dest.setSorts(sorts);
  }
 else {
    dest.setSorts(src.getSorts());
  }
  dest.setIsComplexExpression(isComplexExpression);
  return dest;
}","/** 
 * Convert IGroupDefn to IQuery.GroupSpec
 * @param cx
 * @param src
 * @return
 * @throws DataException
 */
static IQuery.GroupSpec groupDefnToSpec(Context cx,IGroupDefinition src,String expr,String columnName,int index) throws DataException {
  ColumnInfo groupKeyInfo=new ColumnInfo(index,columnName);
  int groupIndex=groupKeyInfo.getColumnIndex();
  String groupKey=groupKeyInfo.getColumnName();
  boolean isComplexExpression=true;
  IQuery.GroupSpec dest=new IQuery.GroupSpec(groupIndex,groupKey);
  dest.setName(src.getName());
  dest.setInterval(src.getInterval());
  dest.setIntervalRange(src.getIntervalRange());
  dest.setIntervalStart(src.getIntervalStart());
  dest.setSortDirection(src.getSortDirection() != ISortDefinition.SORT_DESC ? ISortDefinition.SORT_ASC : ISortDefinition.SORT_DESC);
  dest.setFilters(src.getFilters());
  if (src.getSorts().size() != 0) {
    dest.setSorts(src.getSorts());
  }
  dest.setIsComplexExpression(isComplexExpression);
  return dest;
}",0.7669313404950957
75032,"public boolean layoutChildren(){
  if (root == null) {
    return false;
  }
  assert(parent instanceof ILineStackingLayoutManager);
  ILineStackingLayoutManager lineParent=(ILineStackingLayoutManager)parent;
  if (root.getAllocatedHeight() > lineParent.getCurrentMaxContentHeight()) {
    if (!parent.isPageEmpty()) {
      return true;
    }
 else {
      root.setAllocatedHeight(lineParent.getCurrentMaxContentHeight());
      parent.addArea(root,false,false);
      return false;
    }
  }
 else {
    if (parent.getCurrentIP() + root.getAllocatedWidth() > maxWidth) {
      if (!lineParent.isEmptyLine()) {
        boolean ret=lineParent.endLine();
        assert(ret);
        return layoutChildren();
      }
 else {
        parent.addArea(root,false,false);
        return false;
      }
    }
 else {
      parent.addArea(root,false,false);
      return false;
    }
  }
}","public boolean layoutChildren(){
  if (root == null) {
    return false;
  }
  assert(parent instanceof ILineStackingLayoutManager);
  ILineStackingLayoutManager lineParent=(ILineStackingLayoutManager)parent;
  if (root.getAllocatedHeight() > lineParent.getCurrentMaxContentHeight()) {
    if (!parent.isPageEmpty()) {
      context.setAutoPageBreak(true);
      return true;
    }
 else {
      root.setAllocatedHeight(lineParent.getCurrentMaxContentHeight());
      parent.addArea(root,false,false);
      return false;
    }
  }
 else {
    if (parent.getCurrentIP() + root.getAllocatedWidth() > maxWidth) {
      if (!lineParent.isEmptyLine()) {
        boolean ret=lineParent.endLine();
        assert(ret);
        return layoutChildren();
      }
 else {
        parent.addArea(root,false,false);
        return false;
      }
    }
 else {
      parent.addArea(root,false,false);
      return false;
    }
  }
}",0.9788888888888888
75033,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontWeight(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getTextLineThrough(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getTextUnderline(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  return entry;
}",0.9906542056074766
75034,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.postscript.PostScriptRenderTest.class);
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.postscript.util.BackgroundImageLayoutTest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.report.engine.emitter.postscript.PostScriptRenderTest.class);
  return suite;
}",0.7817460317460317
75035,"/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,double x,double y,double width,double height,double positionX,double positionY,String repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  byte[] imageData=null;
  try {
    InputStream imageStream=new URL(imageURI).openStream();
    imageData=new byte[imageStream.available()];
    imageStream.read(imageData);
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
  String imageTitle=""String_Node_Str"" + currentPageNum + ""String_Node_Str""+ (++shapeCount);
  imageTitles.add(imageTitle);
  String imageName;
  if (imageNames.containsKey(imageURI)) {
    imageName=(String)imageNames.get(imageURI);
  }
 else {
    String extension=getImageExtension(imageURI);
    imageName=imageTitle + ""String_Node_Str"" + extension;
    imageNames.put(imageTitle,imageName);
    imageExtensions.put(imageTitle,extension);
    recordFileLists(imageName);
    currentImageData.put(imageTitle,imageData);
  }
  exportImageDefn(imageName,imageTitle,width,height,x,y);
}","/** 
 * Draws the background image at the contentByteUnder of the PPT with the given offset
 * @param imageURI the URI referring the image
 * @param x the start X coordinate at the PPT where the image is positioned
 * @param y the start Y coordinate at the PPT where the image is positioned
 * @param width the width of the background dimension
 * @param height the height of the background dimension
 * @param positionX the offset X percentage relating to start X
 * @param positionY the offset Y percentage relating to start Y
 * @param repeat the background-repeat property
 * @param xMode whether the horizontal position is a percentage value or not
 * @param yMode whether the vertical position is a percentage value or not
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float positionX,float positionY,String repeat){
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  float imageWidth=0;
  float imageHeight=0;
  byte[] imageData=null;
  InputStream imageStream=null;
  try {
    URL url=new URL(imageURI);
    imageStream=url.openStream();
    imageData=new byte[imageStream.available()];
    imageStream.read(imageData);
    imageStream.close();
    imageStream=url.openStream();
    Image image=ImageIO.read(imageStream);
    ImageIcon imageIcon=new ImageIcon(image);
    imageWidth=imageIcon.getIconWidth();
    imageHeight=imageIcon.getIconHeight();
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
 finally {
    if (imageStream != null) {
      try {
        imageStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String imageTitle=""String_Node_Str"" + currentPageNum + ""String_Node_Str""+ (++shapeCount);
  imageTitles.add(imageTitle);
  String imageName;
  if (imageNames.containsKey(imageURI)) {
    imageName=(String)imageNames.get(imageURI);
  }
 else {
    String extension=getImageExtension(imageURI);
    imageName=imageTitle + ""String_Node_Str"" + extension;
    imageNames.put(imageTitle,imageName);
    imageExtensions.put(imageTitle,extension);
    recordFileLists(imageName);
    currentImageData.put(imageTitle,imageData);
  }
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  Position imageSize=new Position(imageWidth,imageHeight);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    exportImageDefn(imageName,imageTitle,imageWidth,imageHeight,position.getX(),position.getY());
  }
}",0.7301310043668122
75036,"/** 
 * Cancel the current engine task by task id
 * @param request
 * @param taskid
 * @throws Exception
 */
public static void cancelTask(HttpServletRequest request,String taskid) throws Exception {
  if (taskid == null)   return;
  HttpSession session=request.getSession();
  if (session == null)   return;
  Map map=(Map)session.getAttribute(IBirtConstants.TASK_MAP);
  if (map != null && map.containsKey(taskid)) {
    BaseTaskBean bean=(BaseTaskBean)map.get(taskid);
    if (bean == null)     return;
    IEngineTask task=bean.getTask();
    if (task != null) {
      task.cancel();
      task.close();
    }
synchronized (map) {
      map.remove(taskid);
    }
  }
}","/** 
 * Cancel the current engine task by task id
 * @param request
 * @param taskid
 * @throws Exception
 */
public static void cancelTask(HttpServletRequest request,String taskid) throws Exception {
  if (taskid == null)   return;
  HttpSession session=request.getSession();
  if (session == null)   return;
  Map map=(Map)session.getAttribute(IBirtConstants.TASK_MAP);
  if (map != null && map.containsKey(taskid)) {
    BaseTaskBean bean=(BaseTaskBean)map.get(taskid);
    if (bean == null)     return;
    IEngineTask task=bean.getTask();
    if (task != null) {
      task.cancel();
    }
synchronized (map) {
      map.remove(taskid);
    }
  }
}",0.9849170437405732
75037,"/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  style=getElementStyle(foreign);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
}","/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(foreign);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.823583180987203
75038,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.819626168224299
75039,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  IStyle textComputedStyle=text.getComputedStyle();
  if (null != textComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,textComputedStyle);
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  IStyle textComputedStyle=text.getComputedStyle();
  if (null != textComputedStyle) {
    AttributeBuilder.buildTextDecoration(styleBuffer,textComputedStyle);
  }
  String textAlign=style.getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(text);
  if (style == null) {
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildBox(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
}",0.8357446808510638
75040,"/** 
 * end output the content
 */
protected void end(){
  if (emitter != null) {
    ContentEmitterUtil.endContent(content,emitter);
  }
}",protected abstract void end(boolean finished);,0.2702702702702703
75041,"/** 
 * output the content.
 */
protected abstract void start();",protected abstract void start(boolean isFirst);,0.5765765765765766
75042,"/** 
 * layout the content and its children. It can be called in three status: 1. start, the first time it is called, in this status, it first check if it need page-break-before, 2. inprogress, the second or more time it is called. In this status, it tries to layout the content and its children to the current page. 3. end, the last time it is called. In this status, it means all the content has been layout, it is the time to handle the page-break-after.
 */
public boolean layout(){
switch (status) {
case STATUS_INTIALIZE:
    if (handleVisibility()) {
      status=STATUS_END;
      return false;
    }
  if (isPageBreakBefore()) {
    status=STATUS_START;
    context.endContentWithPageBreak(null);
    return true;
  }
case STATUS_START:
context.startContent(content);
case STATUS_INPROGRESS:
if (status == STATUS_INPROGRESS) {
context.continueContent(content);
}
start();
boolean hasNext=layoutChildren();
end();
if (isChildrenFinished()) {
status=STATUS_END;
}
 else {
status=STATUS_INPROGRESS;
}
if (hasNext) {
context.endContentWithPageBreak(content);
return true;
}
context.endContent(content);
if (isPageBreakAfter()) {
return true;
}
return false;
}
return false;
}","/** 
 * layout the content and its children. It can be called in three status: 1. start, the first time it is called, in this status, it first check if it need page-break-before, 2. inprogress, the second or more time it is called. In this status, it tries to layout the content and its children to the current page. 3. end, the last time it is called. In this status, it means all the content has been layout, it is the time to handle the page-break-after.
 */
public boolean layout(){
switch (status) {
case STATUS_INTIALIZE:
    if (handleVisibility()) {
      status=STATUS_END;
      return false;
    }
  if (isPageBreakBefore()) {
    status=STATUS_START;
    return true;
  }
case STATUS_START:
case STATUS_INPROGRESS:
start(status == STATUS_START || status == STATUS_INTIALIZE);
boolean hasNext=layoutChildren();
end(!hasNext);
if (isChildrenFinished()) {
status=STATUS_END;
}
 else {
status=STATUS_INPROGRESS;
}
if (hasNext) {
return true;
}
if (isPageBreakAfter()) {
return true;
}
return false;
}
return false;
}",0.7087114337568058
75043,"protected boolean layoutChildren(){
  repeatHeader();
  boolean hasNext=super.layoutChildren();
  if (hasNext) {
    context.addLayoutHint(content,!hasNext);
  }
  return hasNext;
}","protected boolean layoutChildren(){
  repeatHeader();
  boolean hasNext=super.layoutChildren();
  return hasNext;
}",0.777027027027027
75044,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean isEmpty=context.isPageEmpty();
      context.setPageEmpty(true);
      context.setAllowPageBreak(false);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setPageEmpty(isEmpty);
      context.continueContent(null);
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      context.setAllowPageBreak(false);
      IPageBuffer buffer=context.getPageBufferManager();
      boolean isRepeated=buffer.isRepeated();
      buffer.setRepeated(true);
      engine.layout(this,header,emitter);
      buffer.setRepeated(isRepeated);
      context.setAllowPageBreak(pageBreak);
    }
  }
  isFirstLayout=false;
}",0.6654991243432574
75045,"/** 
 * layout the children, return if it should create a  new page after this layout.
 * @return
 */
protected boolean resumeLayout(){
  boolean hasNextPage=false;
  for (int i=0; i < childrenLayouts.size(); i++) {
    boolean childFinished=((Boolean)childrenFinished.get(i)).booleanValue();
    if (!childFinished) {
      ILayoutManager childLayout=(ILayoutManager)childrenLayouts.get(i);
      boolean childHasNewPage=childLayout.layout();
      if (childHasNewPage) {
        hasNextPage=true;
      }
      childFinished=childLayout.isFinished();
      if (childFinished) {
        childLayout.close();
        IReportItemExecutor childExecutor=(IReportItemExecutor)childrenExecutors.get(i);
        childExecutor.close();
      }
      childrenFinished.set(i,Boolean.valueOf(childFinished));
    }
 else {
      context.skipContent(null);
    }
  }
  return hasNextPage;
}","/** 
 * layout the children, return if it should create a  new page after this layout.
 * @return
 */
protected boolean resumeLayout(){
  boolean hasNextPage=false;
  for (int i=0; i < childrenLayouts.size(); i++) {
    boolean childFinished=((Boolean)childrenFinished.get(i)).booleanValue();
    if (!childFinished) {
      ILayoutManager childLayout=(ILayoutManager)childrenLayouts.get(i);
      boolean childHasNewPage=childLayout.layout();
      if (childHasNewPage) {
        hasNextPage=true;
      }
      childFinished=childLayout.isFinished();
      if (childFinished) {
        childLayout.close();
        IReportItemExecutor childExecutor=(IReportItemExecutor)childrenExecutors.get(i);
        childExecutor.close();
      }
      childrenFinished.set(i,Boolean.valueOf(childFinished));
    }
  }
  return hasNextPage;
}",0.9468147282291058
75046,"public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null && this.isLeafLevel(cubeDefn,target)) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9888654829972916
75047,"/** 
 * Returns oda type name
 * @param odaTypeCode
 * @return
 */
public static String getOdaTypeName(int odaTypeCode){
switch (odaTypeCode) {
case Types.INTEGER:
    return ""String_Node_Str"";
case Types.DOUBLE:
  return ""String_Node_Str"";
case Types.VARCHAR:
return ""String_Node_Str"";
case Types.DATE:
return ""String_Node_Str"";
case Types.TIME:
return ""String_Node_Str"";
case Types.TIMESTAMP:
return ""String_Node_Str"";
case Types.NUMERIC:
return ""String_Node_Str"";
case Types.BLOB:
return ""String_Node_Str"";
case Types.CLOB:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","/** 
 * Returns oda type name
 * @param odaTypeCode
 * @return
 */
public static String getOdaTypeName(int odaTypeCode){
switch (odaTypeCode) {
case Types.INTEGER:
    return ""String_Node_Str"";
case Types.DOUBLE:
case Types.FLOAT:
  return ""String_Node_Str"";
case Types.VARCHAR:
return ""String_Node_Str"";
case Types.DATE:
return ""String_Node_Str"";
case Types.TIME:
return ""String_Node_Str"";
case Types.TIMESTAMP:
return ""String_Node_Str"";
case Types.NUMERIC:
case Types.DECIMAL:
return ""String_Node_Str"";
case Types.BLOB:
return ""String_Node_Str"";
case Types.CLOB:
return ""String_Node_Str"";
case Types.BOOLEAN:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9337539432176656
75048,"/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws JDBCException
 */
private Driver findDriver(String className) throws JDBCException {
  Class driverClass=null;
  boolean driverInClassPath=false;
  try {
    Class.forName(className);
    logger.info(""String_Node_Str"" + className);
    driverInClassPath=true;
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=(Driver)driverClass.newInstance();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}","/** 
 * Look for the Driver from drivers directory if it not in plugin class path
 * @param className
 * @return Driver instance
 * @throws JDBCException
 */
private Driver findDriver(String className) throws JDBCException {
  Class driverClass=null;
  boolean driverInClassPath=false;
  try {
    driverClass=Class.forName(className);
    logger.info(""String_Node_Str"" + className);
    driverInClassPath=true;
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  Driver driver=null;
  try {
    driver=(Driver)driverClass.newInstance();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,""String_Node_Str"" + className,e);
    throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
  }
  return driver;
}",0.9943977591036416
75049,"protected Object getRenderContext(IReportContext context){
  Map appContext=context.getAppContext();
  if (appContext != null) {
    String renderContextKey=EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT;
    String format=context.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      renderContextKey=EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT;
    }
    return appContext.get(renderContextKey);
  }
  return null;
}","protected Object getRenderContext(IReportContext context){
  if (context == null) {
    return null;
  }
  Map appContext=context.getAppContext();
  if (appContext != null) {
    String renderContextKey=EngineConstants.APPCONTEXT_HTML_RENDER_CONTEXT;
    String format=context.getOutputFormat();
    if (""String_Node_Str"".equalsIgnoreCase(format)) {
      renderContextKey=EngineConstants.APPCONTEXT_PDF_RENDER_CONTEXT;
    }
    return appContext.get(renderContextKey);
  }
  return null;
}",0.9508547008547008
75050,"/** 
 * Get BindingColumn object with specified name.
 * @param name
 * @return
 * @throws DataException there is no BindingColumn in manualBindingExprs
 */
private BindingColumn getBindingFromManualBinding(IBaseExpression expr,String name) throws DataException {
  BindingColumn bindingColumn=null;
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      bindingColumn=(BindingColumn)it.next();
      if (bindingColumn.columnName.equals(name)) {
        return bindingColumn;
      }
    }
  }
  if (expr != null) {
    bindingColumn=new BindingColumn(name,expr,ExpressionCompilerUtil.hasAggregationInExpr(expr),expr.getDataType());
    return bindingColumn;
  }
  throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name);
}","/** 
 * Get BindingColumn object with specified name.
 * @param name
 * @return
 * @throws DataException there is no BindingColumn in manualBindingExprs
 */
private BindingColumn getBindingFromManualBinding(String name) throws DataException {
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      BindingColumn bindingColumn=(BindingColumn)it.next();
      if (bindingColumn.columnName.equals(name))       return bindingColumn;
    }
  }
  throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name);
}",0.7991967871485943
75051,"/** 
 * Evaluate the specified binding column in MANUAL_BINDING mode.
 * @param baseExpr
 * @param exprType
 * @param valueMap
 * @throws DataException
 */
Object evaluateValue(IBaseExpression expr,String bindingName) throws DataException {
  return this.evaluateValue(getBindingFromManualBinding(expr,bindingName),MANUAL_BINDING);
}","/** 
 * Evaluate the specified binding column in MANUAL_BINDING mode.
 * @param baseExpr
 * @param exprType
 * @param valueMap
 * @throws DataException
 */
Object evaluateValue(String bindingName) throws DataException {
  return this.evaluateValue(getBindingFromManualBinding(bindingName),MANUAL_BINDING);
}",0.80625
75052,"/** 
 * An exprManager object is to manipulate all available column bindings for specified query definition.
 * @param baseQueryDefn
 */
public ExprManager(IBaseQueryDefinition baseQueryDefn){
  this(baseQueryDefn,null);
}","/** 
 * An exprManager object is to manipulate all available column bindings for specified query definition.
 */
public ExprManager(IBaseQueryDefinition baseQueryDefn){
  bindingExprs=new ArrayList();
  autoBindingExprMap=new HashMap();
  entryLevel=OVERALL_GROUP;
  this.baseQueryDefn=baseQueryDefn;
  this.autoBindingMap=new HashMap();
}",0.6773618538324421
75053,"/** 
 * @param name
 * @return
 * @throws DataException
 */
public IBinding getBinding(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    if (gcb.getBinding(name) != null)     return gcb.getBinding(name);
  }
  if (this.autoBindingMap.containsKey(name)) {
    return (IBinding)this.autoBindingMap.get(name);
  }
  if (this.parent != null) {
    return parent.getBinding(name);
  }
  return null;
}","/** 
 * @param name
 * @return
 * @throws DataException
 */
public IBinding getBinding(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    if (gcb.getBinding(name) != null)     return gcb.getBinding(name);
  }
  if (this.autoBindingMap.containsKey(name)) {
    return (IBinding)this.autoBindingMap.get(name);
  }
  return null;
}",0.9170305676855895
75054,"/** 
 * @param name
 * @return
 * @throws DataException 
 */
private IBaseExpression getBindingExpr(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    Object o=gcb.getExpression(name);
    if (o != null)     return (IBaseExpression)o;
  }
  if (this.parent != null) {
    return this.parent.getBindingExpr(name);
  }
  return null;
}","/** 
 * @param name
 * @return
 * @throws DataException 
 */
private IBaseExpression getBindingExpr(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    Object o=gcb.getExpression(name);
    if (o != null)     return (IBaseExpression)o;
  }
  return null;
}",0.8968253968253969
75055,"/** 
 * @return
 */
private List getColumnNames(){
  List bindingExprs=exprManager.getBindingExprs();
  Map autoBindingExprMap=exprManager.getAutoBindingExprMap();
  List l=new ArrayList();
  l.addAll(autoBindingExprMap.keySet());
  for (int i=0; i < bindingExprs.size(); i++) {
    l.addAll(((GroupBindingColumn)bindingExprs.get(i)).getColumnNames());
  }
  ExprManager exprManager1=exprManager;
  while (exprManager1.getParentExprManager() != null) {
    bindingExprs=exprManager1.getParentExprManager().getBindingExprs();
    autoBindingExprMap=exprManager1.getParentExprManager().getAutoBindingExprMap();
    l.addAll(autoBindingExprMap.keySet());
    for (int i=0; i < bindingExprs.size(); i++) {
      l.addAll(((GroupBindingColumn)bindingExprs.get(i)).getColumnNames());
    }
    exprManager1=exprManager1.getParentExprManager();
  }
  return l;
}","/** 
 * @return
 */
private List getColumnNames(){
  List bindingExprs=exprManager.getBindingExprs();
  Map autoBindingExprMap=exprManager.getAutoBindingExprMap();
  List l=new ArrayList();
  l.addAll(autoBindingExprMap.keySet());
  for (int i=0; i < bindingExprs.size(); i++) {
    l.addAll(((GroupBindingColumn)bindingExprs.get(i)).getColumnNames());
  }
  return l;
}",0.5877551020408164
75056,"/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  Context cx=Context.enter();
  try {
    if (this.baseQueryDefn.getBindings() != null && this.baseQueryDefn.getBindings().size() > 0) {
      this.expressionCompiler.setDataSetMode(false);
    }
    List groups=baseQueryDefn.getGroups();
    Set groupNameSet=new HashSet();
    IGroupDefinition group;
    for (int i=0; i < groups.size(); i++) {
      group=(IGroupDefinition)groups.get(i);
      if (group.getName() == null || group.getName().trim().length() == 0)       continue;
      for (int j=0; j < groups.size(); j++) {
        if (group.getName().equals(((IGroupDefinition)groups.get(j)).getName() == null ? ""String_Node_Str"" : ((IGroupDefinition)groups.get(j)).getName()) && j != i)         throw new DataException(ResourceConstants.DUPLICATE_GROUP_NAME);
      }
      groupNameSet.add(group.getName());
    }
    Map map=baseQueryDefn.getBindings();
    if (map != null) {
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        Object key=it.next();
        IBinding binding=(IBinding)map.get(key);
        String groupName=null;
        if (binding.getExpression() != null)         groupName=binding.getExpression().getGroupName();
        if (groupName == null) {
          if (binding.getAggregatOns().size() == 0)           continue;
          groupName=binding.getAggregatOns().get(0).toString();
        }
        if ((!groupName.equals(IBaseExpression.GROUP_OVERALL)) && !groupNameSet.contains(groupName)) {
          throw new DataException(ResourceConstants.GROUP_NOT_EXIST,new Object[]{groupName,key});
        }
      }
    }
    for (int i=0; i <= groups.size(); i++) {
      prepareGroup(baseQueryDefn,i,cx);
    }
  }
  finally {
    Context.exit();
  }
}","/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  Context cx=Context.enter();
  try {
    if (this.baseQueryDefn.getBindings() != null && this.baseQueryDefn.getBindings().size() > 0) {
      this.expressionCompiler.setDataSetMode(false);
    }
    List groups=baseQueryDefn.getGroups();
    Set groupNameSet=new HashSet();
    IGroupDefinition group;
    for (int i=0; i < groups.size(); i++) {
      group=(IGroupDefinition)groups.get(i);
      if (group.getName() == null || group.getName().trim().length() == 0)       continue;
      for (int j=0; j < groups.size(); j++) {
        if (group.getName().equals(((IGroupDefinition)groups.get(j)).getName() == null ? ""String_Node_Str"" : ((IGroupDefinition)groups.get(j)).getName()) && j != i)         throw new DataException(ResourceConstants.DUPLICATE_GROUP_NAME);
      }
      groupNameSet.add(group.getName());
    }
    Map map=baseQueryDefn.getBindings();
    if (map != null) {
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        Object key=it.next();
        IBinding binding=(IBinding)map.get(key);
        String groupName=null;
        if (binding.getExpression() != null)         groupName=binding.getExpression().getGroupName();
        if (groupName == null) {
          if (binding.getAggregatOns().size() == 0)           continue;
          groupName=binding.getAggregatOns().get(0).toString();
        }
        if ((!groupName.equals(IBaseExpression.GROUP_OVERALL)) && !groupNameSet.contains(groupName)) {
          throw new DataException(ResourceConstants.GROUP_NOT_EXIST,new Object[]{groupName,key});
        }
      }
    }
    mappingParentColumnBinding();
    for (int i=0; i <= groups.size(); i++) {
      prepareGroup(baseQueryDefn,i,cx);
    }
  }
  finally {
    Context.exit();
  }
}",0.9905764966740576
75057,"/** 
 * @param session
 * @param deContext
 * @param queryDefn
 * @param queryService
 * @param appContext
 * @param parentExprManager
 * @throws DataException
 */
PreparedQuery(DataEngineSession session,DataEngineContext deContext,IBaseQueryDefinition queryDefn,IPreparedQueryService queryService,Map appContext) throws DataException {
  this(session,deContext,queryDefn,queryService,appContext,null);
}","/** 
 * @param deContext
 * @param scope
 * @param queryDefn
 * @param queryService
 * @param appContext
 * @throws DataException
 */
PreparedQuery(DataEngineSession session,DataEngineContext deContext,IBaseQueryDefinition queryDefn,IPreparedQueryService queryService,Map appContext) throws DataException {
}",0.8202247191011236
75058,"/** 
 * @param trans
 * @param groupLevel
 * @param cx
 * @throws DataException
 */
private void prepareGroup(IBaseQueryDefinition baseQuery,int groupLevel,Context cx) throws DataException {
  IBaseTransform trans=baseQuery;
  String groupName=IBaseExpression.GROUP_OVERALL;
  if (groupLevel != 0) {
    IGroupDefinition igd=(IGroupDefinition)((IBaseQueryDefinition)trans).getGroups().get(groupLevel - 1);
    trans=igd;
    groupName=igd.getName();
  }
  Collection exprCol=new ArrayList();
  Map resultSetExpressions=new HashMap();
  Map map=baseQuery.getBindings();
  if (map != null) {
    Iterator it=map.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      IBinding icbe=((IBinding)map.get(key));
      if (icbe.getExpression() != null && icbe.getExpression().getGroupName().equals(groupName) && groupLevel != 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel == 0 && icbe.getAggregatOns().size() == 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel != 0 && icbe.getAggregatOns().contains(groupName)) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
    }
  }
  prepareExpressions(exprCol,groupLevel,false,true,cx);
  String key=null;
  if (trans instanceof IGroupDefinition) {
    IGroupDefinition gd=(IGroupDefinition)trans;
    key=gd.getKeyColumn() != null ? gd.getKeyColumn() : gd.getKeyExpression();
  }
  this.exprManager.addBindingExpr(key,resultSetExpressions,groupLevel);
  Collection subQueries=trans.getSubqueries();
  Iterator subIt=subQueries.iterator();
  while (subIt.hasNext()) {
    ISubqueryDefinition subquery=(ISubqueryDefinition)subIt.next();
    PreparedSubquery pq=new PreparedSubquery(this.session,this.dataEngineContext,subquery,queryService,groupLevel,this.exprManager);
    subQueryMap.put(subquery.getName(),pq);
    subQueryDefnMap.put(subquery.getName(),new Object[]{subquery,new Integer(groupLevel)});
  }
}","/** 
 * @param trans
 * @param groupLevel
 * @param cx
 * @throws DataException
 */
private void prepareGroup(IBaseQueryDefinition baseQuery,int groupLevel,Context cx) throws DataException {
  IBaseTransform trans=baseQuery;
  String groupName=IBaseExpression.GROUP_OVERALL;
  if (groupLevel != 0) {
    IGroupDefinition igd=(IGroupDefinition)((IBaseQueryDefinition)trans).getGroups().get(groupLevel - 1);
    trans=igd;
    groupName=igd.getName();
  }
  Collection exprCol=new ArrayList();
  Map resultSetExpressions=new HashMap();
  Map map=baseQuery.getBindings();
  if (map != null) {
    Iterator it=map.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      IBinding icbe=((IBinding)map.get(key));
      if (icbe.getExpression() != null && icbe.getExpression().getGroupName().equals(groupName) && groupLevel != 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel == 0 && icbe.getAggregatOns().size() == 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel != 0 && icbe.getAggregatOns().contains(groupName)) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
    }
  }
  prepareExpressions(exprCol,groupLevel,false,true,cx);
  String key=null;
  if (trans instanceof IGroupDefinition) {
    IGroupDefinition gd=(IGroupDefinition)trans;
    key=gd.getKeyColumn() != null ? gd.getKeyColumn() : gd.getKeyExpression();
  }
  this.exprManager.addBindingExpr(key,resultSetExpressions,groupLevel);
  Collection subQueries=trans.getSubqueries();
  Iterator subIt=subQueries.iterator();
  while (subIt.hasNext()) {
    ISubqueryDefinition subquery=(ISubqueryDefinition)subIt.next();
    PreparedSubquery pq=new PreparedSubquery(this.session,this.dataEngineContext,subquery,queryService,groupLevel);
    subQueryMap.put(subquery.getName(),pq);
    subQueryDefnMap.put(subquery.getName(),new Object[]{subquery,new Integer(groupLevel)});
  }
}",0.995888754534462
75059,"/** 
 * @param subquery Subquery definition
 * @param parentQuery Parent query (which can be a subquery itself, or a PreparedReportQuery)
 * @param groupLevel Index of group in which this subquery is defined within the parent query. If 0, subquery is defined outside of any groups.
 * @param parentExprManager Parent query's expression manager
 * @throws DataException
 */
PreparedSubquery(DataEngineSession session,DataEngineContext context,ISubqueryDefinition subquery,IPreparedQueryService queryService,int groupLevel,ExprManager parentExprManager) throws DataException {
  Object[] params={session,context,subquery,queryService,new Integer(groupLevel)};
  logger.entering(PreparedSubquery.class.getName(),""String_Node_Str"",params);
  this.groupLevel=groupLevel;
  this.queryService=queryService;
  this.subQueryOnGroup=subquery.applyOnGroup();
  logger.logp(Level.FINER,PreparedSubquery.class.getName(),""String_Node_Str"",""String_Node_Str"");
  this.session=session;
  this.preparedQuery=new PreparedQuery(session,context,subquery,this,null,parentExprManager);
  logger.exiting(PreparedSubquery.class.getName(),""String_Node_Str"");
}","/** 
 * @param subquery Subquery definition
 * @param parentQuery Parent query (which can be a subquery itself, or a PreparedReportQuery)
 * @param groupLevel Index of group in which this subquery is defined within the parent query. If 0, subquery is defined outside of any groups.
 * @throws DataException
 */
PreparedSubquery(DataEngineSession session,DataEngineContext context,ISubqueryDefinition subquery,IPreparedQueryService queryService,int groupLevel) throws DataException {
  Object[] params={session,context,subquery,queryService,new Integer(groupLevel)};
  logger.entering(PreparedSubquery.class.getName(),""String_Node_Str"",params);
  this.groupLevel=groupLevel;
  this.queryService=queryService;
  this.subQueryOnGroup=subquery.applyOnGroup();
  logger.logp(Level.FINER,PreparedSubquery.class.getName(),""String_Node_Str"",""String_Node_Str"");
  this.session=session;
  this.preparedQuery=new PreparedQuery(session,context,subquery,this,null);
  logger.exiting(PreparedSubquery.class.getName(),""String_Node_Str"");
}",0.938832252085264
75060,"/** 
 * Evaluate the specified column binding in case of its value still not calculate yet.
 * @param exprName
 * @return
 * @throws DataException
 */
private Object prepareBindingColumn(IBaseExpression expr,String bindingName) throws DataException {
}","/** 
 * Evaluate the specified column binding in case of its value still not calculate yet.
 * @param exprName
 * @return
 * @throws DataException
 */
private Object prepareBindingColumn(String exprName) throws DataException {
}",0.8333333333333334
75061,"public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.isFirstRowPepared)   this.prepareCurrentRow();
  if (!this.boundColumnValueMap.containsKey(exprName)) {
    if (this.resultService.getBindingExpr(exprName) != null) {
      return prepareBindingColumn(this.resultService.getBindingExpr(exprName),exprName);
    }
    throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}","public Object getValue(String exprName) throws BirtException {
  checkStarted();
  logger.logp(Level.FINER,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(exprName));
  if (this.isFirstRowPepared)   this.prepareCurrentRow();
  if (!this.boundColumnValueMap.containsKey(exprName)) {
    if (this.resultService.getBindingExpr(exprName) != null) {
      return prepareBindingColumn(exprName);
    }
    throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,exprName);
  }
  Object exprValue=boundColumnValueMap.get(exprName);
  if (exprValue instanceof BirtException)   throw (BirtException)exprValue;
  return exprValue;
}",0.968299711815562
75062,"/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,exprNameSet.size());
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object key=it.next();
      Object value=valueMap.get(key);
      if (value instanceof DataException)       value=EXCEPTION_INDICATOR;
      IOUtil.writeObject(tempDos,value);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param currIndex
 * @param exprID
 * @param exprValue
 * @throws DataException
 */
private int saveExprValue(Map valueMap) throws DataException {
  ByteArrayOutputStream tempBaos=new ByteArrayOutputStream();
  BufferedOutputStream tempBos=new BufferedOutputStream(tempBaos);
  DataOutputStream tempDos=new DataOutputStream(tempBos);
  try {
    IOUtil.writeInt(tempDos,valueMap.size());
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object key=it.next();
      Object value=valueMap.get(key);
      if (value instanceof DataException)       value=EXCEPTION_INDICATOR;
      IOUtil.writeObject(tempDos,value);
    }
    tempDos.flush();
    tempBos.flush();
    tempBaos.flush();
    byte[] bytes=tempBaos.toByteArray();
    int rowBytes=bytes.length;
    IOUtil.writeRawBytes(this.rowExprsDos,bytes);
    tempBaos=null;
    tempBos=null;
    tempDos=null;
    return rowBytes;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.990790111488124
75063,"public int canDrag(Object object){
  if (object instanceof MeasureHandle)   return DNDService.LOGIC_TRUE;
  return DNDService.LOGIC_UNKNOW;
}","public int canDrag(Object object){
  if (object instanceof MeasureHandle || object instanceof MeasureGroupHandle)   return DNDService.LOGIC_TRUE;
  return DNDService.LOGIC_UNKNOW;
}",0.8757763975155279
75064,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
    Object[] objects=(Object[])transfer;
    for (int i=0; i < objects.length; i++) {
      if (!performDrop(objects[i],target,operation,location))       return false;
    }
    return true;
  }
  if (target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    if (editPart != null) {
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,transfer);
      request.setLocation(location.getPoint());
      Command command=editPart.getCommand(request);
      if (command != null && command.canExecute()) {
        editPart.getViewer().getEditDomain().getCommandStack().execute(command);
        return true;
      }
 else       return false;
    }
    return false;
  }
  return false;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target instanceof EditPart) {
    EditPart editPart=(EditPart)target;
    if (editPart != null) {
      CreateRequest request=new CreateRequest();
      request.getExtendedData().put(DesignerConstants.KEY_NEWOBJECT,transfer);
      request.setLocation(location.getPoint());
      Command command=editPart.getCommand(request);
      if (command != null && command.canExecute()) {
        editPart.getViewer().getEditDomain().getCommandStack().execute(command);
        return true;
      }
 else       return false;
    }
    return false;
  }
  return false;
}",0.849967804249839
75065,"public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len != 1) {
      return false;
    }
    return handleValidate(objects[0]);
  }
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof LevelHandle) {
    return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len == 0) {
      return false;
    }
    if (len == 1) {
      return handleValidate(objects[0]);
    }
 else {
      for (int i=0; i < len; i++) {
        Object temp=objects[i];
        if (temp instanceof MeasureHandle || temp instanceof MeasureGroupHandle) {
          if (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)temp)) {
            continue;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof LevelHandle) {
    return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof MeasureGroupHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)obj)) {
      return true;
    }
  }
  return false;
}",0.655724892536147
75066,"public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len != 1) {
      return false;
    }
    return handleValidate(objects[0]);
  }
  if (getType() == ICrosstabConstants.ROW_AXIS_TYPE || getType() == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    if (obj instanceof DimensionHandle && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
    if (obj instanceof LevelHandle) {
      return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
    }
  }
  if (getType() == MEASURE_TYPE) {
    if (obj instanceof MeasureHandle && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len == 0) {
      return false;
    }
    if (len == 1) {
      return handleValidate(objects[0]);
    }
 else {
      for (int i=0; i < len; i++) {
        Object temp=objects[i];
        if (temp instanceof MeasureHandle || temp instanceof MeasureGroupHandle) {
          if (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)temp) || crosstab.getCube() == null) {
            continue;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (getType() == ICrosstabConstants.ROW_AXIS_TYPE || getType() == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    if (obj instanceof DimensionHandle && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
    if (obj instanceof LevelHandle) {
      return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
    }
  }
  if (getType() == MEASURE_TYPE) {
    if (obj instanceof MeasureHandle && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
    if (obj instanceof MeasureGroupHandle && (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)obj) || crosstab.getCube() == null)) {
      return true;
    }
  }
  return false;
}",0.6588128681468056
75067,"public boolean handleValidate(Object obj){
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len == 0) {
      return false;
    }
    if (len == 1) {
      return handleValidate(objects[0]);
    }
 else {
      for (int i=0; i < len; i++) {
        Object temp=objects[i];
        if (temp instanceof MeasureHandle || temp instanceof MeasureGroupHandle) {
          if (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)temp)) {
            continue;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof LevelHandle) {
    return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof MeasureGroupHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)obj)) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  CrosstabReportItemHandle crosstab=getCrosstabCellHandle().getCrosstab();
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len == 0) {
      return false;
    }
    if (len == 1) {
      return handleValidate(objects[0]);
    }
 else {
      for (int i=0; i < len; i++) {
        Object temp=objects[i];
        if (temp instanceof MeasureHandle || temp instanceof MeasureGroupHandle) {
          if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)temp)) {
            continue;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (obj instanceof DimensionHandle) {
    if ((getPositionType().equals(ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE) || getPositionType().equals(ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE)) && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof LevelHandle) {
    return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
  }
  if (obj instanceof MeasureHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
  }
  if (obj instanceof MeasureGroupHandle) {
    if (getPositionType().equals(ICrosstabCellAdapterFactory.CELL_MEASURE) && crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)obj)) {
      return true;
    }
  }
  return false;
}",0.9788647342995168
75068,"public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len == 0) {
      return false;
    }
    if (len == 1) {
      return handleValidate(objects[0]);
    }
 else {
      for (int i=0; i < len; i++) {
        Object temp=objects[i];
        if (temp instanceof MeasureHandle || temp instanceof MeasureGroupHandle) {
          if (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)temp) || crosstab.getCube() == null) {
            continue;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (getType() == ICrosstabConstants.ROW_AXIS_TYPE || getType() == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    if (obj instanceof DimensionHandle && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
    if (obj instanceof LevelHandle) {
      return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
    }
  }
  if (getType() == MEASURE_TYPE) {
    if (obj instanceof MeasureHandle && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
    if (obj instanceof MeasureGroupHandle && (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)obj) || crosstab.getCube() == null)) {
      return true;
    }
  }
  return false;
}","public boolean handleValidate(Object obj){
  if (obj instanceof Object[]) {
    Object[] objects=(Object[])obj;
    int len=objects.length;
    if (len == 0) {
      return false;
    }
    if (len == 1) {
      return handleValidate(objects[0]);
    }
 else {
      for (int i=0; i < len; i++) {
        Object temp=objects[i];
        if (temp instanceof MeasureHandle || temp instanceof MeasureGroupHandle) {
          if ((getType() == MEASURE_TYPE) && (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)temp) || crosstab.getCube() == null)) {
            continue;
          }
 else {
            return false;
          }
        }
 else {
          return false;
        }
      }
      return true;
    }
  }
  if (getType() == ICrosstabConstants.ROW_AXIS_TYPE || getType() == ICrosstabConstants.COLUMN_AXIS_TYPE) {
    if (obj instanceof DimensionHandle && CrosstabUtil.canContain(crosstab,(DimensionHandle)obj)) {
      return true;
    }
    if (obj instanceof LevelHandle) {
      return handleValidate(CrosstabAdaptUtil.getDimensionHandle((LevelHandle)obj));
    }
  }
  if (getType() == MEASURE_TYPE) {
    if (obj instanceof MeasureHandle && CrosstabUtil.canContain(crosstab,(MeasureHandle)obj)) {
      return true;
    }
    if (obj instanceof MeasureGroupHandle && (crosstab.getCube() == CrosstabAdaptUtil.getCubeHandle((DesignElementHandle)obj) || crosstab.getCube() == null)) {
      return true;
    }
  }
  return false;
}",0.9886402753872632
75069,"public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    StringBuffer styleBuffer=new StringBuffer();
    if (pageNo > 1) {
      styleBuffer.append(""String_Node_Str"");
    }
    boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
    if (fixedReport || outputMasterPageContent) {
      htmlEmitter.buildPageStyle(page,styleBuffer);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    writer.openTag(HTMLTags.TAG_TABLE);
    styleBuffer.setLength(0);
    styleBuffer.append(""String_Node_Str"");
    boolean outputPageHeight=fixedReport || (outputMasterPageContent && !pageFooterFloatFlag);
    if (outputPageHeight) {
      htmlEmitter.buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,page.getPageHeight());
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    boolean implementMargins=fixedReport || (outputMasterPageContent && outputMasterPageMargins);
    if (implementMargins) {
      writer.openTag(HTMLTags.TAG_COL);
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      DimensionType leftMargin=page.getMarginLeft();
      if (null != leftMargin) {
        styleBuffer.append(leftMargin.toString());
      }
 else {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      writer.closeNoEndTag();
      writer.openTag(HTMLTags.TAG_COL);
      writer.closeNoEndTag();
      writer.openTag(HTMLTags.TAG_COL);
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      DimensionType rightMargin=page.getMarginRight();
      if (null != rightMargin) {
        styleBuffer.append(rightMargin.toString());
      }
 else {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      writer.closeNoEndTag();
      DimensionType topMargin=page.getMarginTop();
      if (null != topMargin) {
        writer.openTag(HTMLTags.TAG_TR);
        styleBuffer.setLength(0);
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(topMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.openTag(HTMLTags.TAG_TD);
        writer.attribute(HTMLTags.ATTR_COLSPAN,3);
        writer.closeTag(HTMLTags.TAG_TD);
        writer.closeTag(HTMLTags.TAG_TR);
      }
    }
    writer.openTag(HTMLTags.TAG_TR);
    if (implementMargins) {
      writer.openTag(HTMLTags.TAG_TD);
      writer.attribute(HTMLTags.ATTR_ROWSPAN,3);
      DimensionType leftMargin=page.getMarginLeft();
      if (null != leftMargin) {
        writer.openTag(HTMLTags.TAG_DIV);
        styleBuffer.setLength(0);
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(leftMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.closeTag(HTMLTags.TAG_DIV);
      }
      writer.closeTag(HTMLTags.TAG_TD);
    }
    writer.openTag(HTMLTags.TAG_TD);
    if (fixedReport) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_VALIGN,""String_Node_Str"");
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
    }
    if (page != null) {
      if (outputMasterPageContent) {
        boolean showHeader=true;
        Object genBy=page.getGenerateBy();
        if (genBy instanceof SimpleMasterPageDesign) {
          SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
          if (!masterPage.isShowHeaderOnFirst()) {
            if (page.getPageNumber() == 1) {
              showHeader=false;
            }
          }
        }
        if (showHeader) {
          writer.openTag(HTMLTags.TAG_DIV);
          styleBuffer.setLength(0);
          htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
          writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
          contentVisitor.visitChildren(page.getPageHeader(),null);
          writer.closeTag(HTMLTags.TAG_DIV);
        }
      }
    }
    writer.closeTag(HTMLTags.TAG_TD);
    if (implementMargins) {
      writer.openTag(HTMLTags.TAG_TD);
      writer.attribute(HTMLTags.ATTR_ROWSPAN,3);
      DimensionType rightMargin=page.getMarginRight();
      if (null != rightMargin) {
        writer.openTag(HTMLTags.TAG_DIV);
        styleBuffer.setLength(0);
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(rightMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.closeTag(HTMLTags.TAG_DIV);
      }
      writer.closeTag(HTMLTags.TAG_TD);
    }
    writer.closeTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TR);
    if (outputPageHeight && !pageFooterFloatFlag) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.openTag(HTMLTags.TAG_TD);
    if (fixedReport) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_VALIGN,""String_Node_Str"");
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
}","public void startPage(IPageContent page){
  pageNo++;
  if (pageNo > 1 && outputMasterPageContent == false) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(HTMLTags.TAG_DIV);
  if (page != null) {
    StringBuffer styleBuffer=new StringBuffer();
    if (pageNo > 1) {
      styleBuffer.append(""String_Node_Str"");
    }
    boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
    if (fixedReport || outputMasterPageContent) {
      htmlEmitter.buildPageStyle(page,styleBuffer);
    }
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    writer.openTag(HTMLTags.TAG_TABLE);
    writer.attribute(""String_Node_Str"",""String_Node_Str"");
    styleBuffer.setLength(0);
    styleBuffer.append(""String_Node_Str"");
    boolean outputPageHeight=fixedReport || (outputMasterPageContent && !pageFooterFloatFlag);
    if (outputPageHeight) {
      htmlEmitter.buildSize(styleBuffer,HTMLTags.ATTR_HEIGHT,page.getPageHeight());
    }
    if (fixedReport) {
      styleBuffer.append(""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    boolean implementMargins=fixedReport || (outputMasterPageContent && outputMasterPageMargins);
    if (implementMargins) {
      writer.openTag(HTMLTags.TAG_COL);
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      DimensionType leftMargin=page.getMarginLeft();
      if (null != leftMargin) {
        styleBuffer.append(leftMargin.toString());
      }
 else {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      writer.closeNoEndTag();
      writer.openTag(HTMLTags.TAG_COL);
      writer.closeNoEndTag();
      writer.openTag(HTMLTags.TAG_COL);
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      DimensionType rightMargin=page.getMarginRight();
      if (null != rightMargin) {
        styleBuffer.append(rightMargin.toString());
      }
 else {
        styleBuffer.append(""String_Node_Str"");
      }
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
      writer.closeNoEndTag();
      DimensionType topMargin=page.getMarginTop();
      if (null != topMargin) {
        writer.openTag(HTMLTags.TAG_TR);
        styleBuffer.setLength(0);
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(topMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.openTag(HTMLTags.TAG_TD);
        writer.attribute(HTMLTags.ATTR_COLSPAN,3);
        writer.closeTag(HTMLTags.TAG_TD);
        writer.closeTag(HTMLTags.TAG_TR);
      }
    }
    writer.openTag(HTMLTags.TAG_TR);
    if (outputPageHeight && !pageFooterFloatFlag) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    if (implementMargins) {
      writer.openTag(HTMLTags.TAG_TD);
      writer.attribute(HTMLTags.ATTR_ROWSPAN,2);
      DimensionType leftMargin=page.getMarginLeft();
      if (null != leftMargin) {
        writer.openTag(HTMLTags.TAG_DIV);
        styleBuffer.setLength(0);
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(leftMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.closeTag(HTMLTags.TAG_DIV);
      }
      writer.closeTag(HTMLTags.TAG_TD);
    }
    writer.openTag(HTMLTags.TAG_TD);
    if (fixedReport) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_VALIGN,""String_Node_Str"");
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
    }
    if (outputMasterPageContent) {
      boolean showHeader=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowHeaderOnFirst()) {
          if (page.getPageNumber() == 1) {
            showHeader=false;
          }
        }
      }
      if (showHeader) {
        writer.openTag(HTMLTags.TAG_DIV);
        styleBuffer.setLength(0);
        htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        contentVisitor.visitChildren(page.getPageHeader(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
  }
  writer.openTag(HTMLTags.TAG_DIV);
}",0.8637899411140072
75070,"public void endPage(IPageContent page){
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_DIV);
  if (page != null) {
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TR);
    boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
    boolean outputPageHeight=fixedReport || (outputMasterPageContent && !pageFooterFloatFlag);
    if (outputPageHeight && pageFooterFloatFlag) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.openTag(HTMLTags.TAG_TD);
    if (fixedReport) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_VALIGN,""String_Node_Str"");
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
    }
    if (outputMasterPageContent) {
      boolean showFooter=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowFooterOnLast()) {
          long totalPage=page.getPageNumber();
          IReportContent report=page.getReportContent();
          if (report != null) {
            totalPage=report.getTotalPage();
          }
          if (page.getPageNumber() == totalPage) {
            showFooter=false;
          }
        }
      }
      if (showFooter) {
        writer.openTag(HTMLTags.TAG_DIV);
        StringBuffer styleBuffer=new StringBuffer();
        htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        contentVisitor.visitChildren(page.getPageFooter(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    boolean implementMargins=fixedReport || (outputMasterPageContent && outputMasterPageMargins);
    if (implementMargins) {
      DimensionType bottomMargin=page.getMarginBottom();
      if (null != bottomMargin) {
        writer.openTag(HTMLTags.TAG_TR);
        StringBuffer styleBuffer=new StringBuffer();
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(bottomMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.openTag(HTMLTags.TAG_TD);
        writer.attribute(HTMLTags.ATTR_COLSPAN,3);
        writer.closeTag(HTMLTags.TAG_TD);
        writer.closeTag(HTMLTags.TAG_TR);
      }
    }
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
  writer.closeTag(HTMLTags.TAG_DIV);
}","public void endPage(IPageContent page){
  logger.log(Level.FINE,""String_Node_Str"");
  writer.closeTag(HTMLTags.TAG_DIV);
  if (page != null) {
    writer.closeTag(HTMLTags.TAG_TD);
    boolean fixedReport=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
    boolean implementMargins=fixedReport || (outputMasterPageContent && outputMasterPageMargins);
    if (implementMargins) {
      writer.openTag(HTMLTags.TAG_TD);
      writer.attribute(HTMLTags.ATTR_ROWSPAN,2);
      DimensionType rightMargin=page.getMarginRight();
      if (null != rightMargin) {
        writer.openTag(HTMLTags.TAG_DIV);
        StringBuffer styleBuffer=new StringBuffer();
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(rightMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.closeTag(HTMLTags.TAG_DIV);
      }
      writer.closeTag(HTMLTags.TAG_TD);
    }
    writer.closeTag(HTMLTags.TAG_TR);
    writer.openTag(HTMLTags.TAG_TR);
    boolean outputPageHeight=fixedReport || (outputMasterPageContent && !pageFooterFloatFlag);
    if (outputPageHeight && pageFooterFloatFlag) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.openTag(HTMLTags.TAG_TD);
    if (fixedReport) {
      writer.attribute(HTMLTags.ATTR_STYLE,""String_Node_Str"");
    }
    writer.attribute(HTMLTags.ATTR_VALIGN,""String_Node_Str"");
    if (htmlRtLFlag) {
      writer.attribute(HTMLTags.ATTR_HTML_DIR,""String_Node_Str"");
    }
    if (outputMasterPageContent) {
      boolean showFooter=true;
      Object genBy=page.getGenerateBy();
      if (genBy instanceof SimpleMasterPageDesign) {
        SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)genBy;
        if (!masterPage.isShowFooterOnLast()) {
          long totalPage=page.getPageNumber();
          IReportContent report=page.getReportContent();
          if (report != null) {
            totalPage=report.getTotalPage();
          }
          if (page.getPageNumber() == totalPage) {
            showFooter=false;
          }
        }
      }
      if (showFooter) {
        writer.openTag(HTMLTags.TAG_DIV);
        StringBuffer styleBuffer=new StringBuffer();
        htmlEmitter.buildPageBandStyle(styleBuffer,page.getStyle());
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        contentVisitor.visitChildren(page.getPageFooter(),null);
        writer.closeTag(HTMLTags.TAG_DIV);
      }
    }
    writer.closeTag(HTMLTags.TAG_TD);
    writer.closeTag(HTMLTags.TAG_TR);
    if (implementMargins) {
      DimensionType bottomMargin=page.getMarginBottom();
      if (null != bottomMargin) {
        writer.openTag(HTMLTags.TAG_TR);
        StringBuffer styleBuffer=new StringBuffer();
        styleBuffer.append(""String_Node_Str"");
        styleBuffer.append(bottomMargin.toString());
        styleBuffer.append(""String_Node_Str"");
        writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
        writer.openTag(HTMLTags.TAG_TD);
        writer.attribute(HTMLTags.ATTR_COLSPAN,3);
        writer.closeTag(HTMLTags.TAG_TD);
        writer.closeTag(HTMLTags.TAG_TR);
      }
    }
    writer.closeTag(HTMLTags.TAG_TABLE);
  }
  writer.closeTag(HTMLTags.TAG_DIV);
}",0.8401201602136181
75071,"/** 
 * When export property binding , should change 'id' property. See bugzilla 198076
 * @throws Exception
 */
public void testExportPropertyBinding() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  ElementExportUtil.exportDesign(designHandle,libraryHandle,false,false);
  DataSetHandle dsHandle=(DataSetHandle)libraryHandle.getDataSets().get(0);
  long id=dsHandle.getID();
  List propertyBindings=libraryHandle.getListProperty(ReportDesignHandle.PROPERTY_BINDINGS_PROP);
  PropertyBinding propBinding=(PropertyBinding)propertyBindings.get(0);
  assertEquals(id,propBinding.getID().longValue());
  DataSetHandle designDsHandle=(DataSetHandle)designHandle.getDataSets().get(0);
  System.out.println(""String_Node_Str"" + designDsHandle.getID() + ""String_Node_Str""+ id);
  assertNotSame(designDsHandle.getID(),id);
}","/** 
 * When export property binding , should change 'id' property. See bugzilla 198076
 * @throws Exception
 */
public void testExportPropertyBinding() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  ElementExportUtil.exportDesign(designHandle,libraryHandle,false,false);
  DataSetHandle dsHandle=(DataSetHandle)libraryHandle.getDataSets().get(0);
  long id=dsHandle.getID();
  List propertyBindings=libraryHandle.getListProperty(ReportDesignHandle.PROPERTY_BINDINGS_PROP);
  PropertyBinding propBinding=(PropertyBinding)propertyBindings.get(0);
  assertEquals(id,propBinding.getID().longValue());
  DataSetHandle designDsHandle=(DataSetHandle)designHandle.getDataSets().get(0);
  assertNotSame(designDsHandle.getID(),id);
}",0.928395061728395
75072,"/** 
 * When export property binding , should change 'id' property. See bugzilla 198076
 * @throws Exception
 */
public void testExportPropertyBinding() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  ElementExportUtil.exportDesign(designHandle,libraryHandle,false,false);
  DataSetHandle dsHandle=(DataSetHandle)libraryHandle.getDataSets().get(0);
  long id=dsHandle.getID();
  List propertyBindings=libraryHandle.getListProperty(ReportDesignHandle.PROPERTY_BINDINGS_PROP);
  PropertyBinding propBinding=(PropertyBinding)propertyBindings.get(0);
  assertEquals(id,propBinding.getID().longValue());
  DataSetHandle designDsHandle=(DataSetHandle)designHandle.getDataSets().get(0);
  assertNotSame(designDsHandle.getID(),id);
}","/** 
 * When export property binding , should change 'id' property. See bugzilla 198076
 * @throws Exception
 */
public void testExportPropertyBinding() throws Exception {
  openDesign(""String_Node_Str"");
  openLibrary(""String_Node_Str"");
  ElementExportUtil.exportDesign(designHandle,libraryHandle,false,false);
  DataSetHandle dsHandle=(DataSetHandle)libraryHandle.getDataSets().get(0);
  long id=dsHandle.getID();
  List propertyBindings=libraryHandle.getListProperty(ReportDesignHandle.PROPERTY_BINDINGS_PROP);
  PropertyBinding propBinding=(PropertyBinding)propertyBindings.get(0);
  assertEquals(id,propBinding.getID().longValue());
  DataSetHandle designDsHandle=(DataSetHandle)designHandle.getDataSets().get(0);
  assertFalse(designDsHandle.getID() == id);
}",0.9902024820378836
75073,"/** 
 * Build the style of the page
 */
public void buildPageStyle(IPageContent page,StringBuffer styleBuffer){
  IStyle style=page.getStyle();
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  DimensionType width=page.getPageWidth();
  if (width != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(width.toString());
    styleBuffer.append(""String_Node_Str"");
  }
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    styleBuffer.append(""String_Node_Str"");
  }
}","/** 
 * Build the style of the page
 */
public void buildPageStyle(IPageContent page,StringBuffer styleBuffer){
  IStyle style=page.getStyle();
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  if (HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference)) {
    DimensionType width=page.getPageWidth();
    if (width != null) {
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(width.toString());
      styleBuffer.append(""String_Node_Str"");
    }
    styleBuffer.append(""String_Node_Str"");
  }
}",0.6222222222222222
75074,"protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  int maxContentWidth=root.getContentWidth();
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
}","protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
}",0.9727488151658767
75075,"private void createImageMap(String imageMapObject,IImageArea imageArea){
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(imageMapObject);
  String url=null;
  String targetWindow=null;
  ArrayList areas=new ArrayList();
  while (matcher.find()) {
    try {
      areas.add(getArea(matcher.group(1)));
      if (url == null)       url=matcher.group(2);
      if (targetWindow == null)       targetWindow=matcher.group(3);
    }
 catch (    NumberFormatException e) {
      logger.log(Level.WARNING,e.getMessage(),e);
    }
  }
  if (url == null) {
    return;
  }
  ActionContent link=new ActionContent();
  if (isBookmark(url)) {
    String bookmark=getBookmark(url);
    link.setBookmark(bookmark);
  }
 else {
    link.setHyperlink(url,targetWindow);
  }
  createImageMaps(areas,imageArea,link);
}","private void createImageMap(int[] area,IImageArea imageArea,String url,String targetWindow){
  if (url == null) {
    return;
  }
  ActionContent link=new ActionContent();
  if (isBookmark(url)) {
    String bookmark=getBookmark(url);
    link.setBookmark(bookmark);
  }
 else {
    link.setHyperlink(url,targetWindow);
  }
  area=getAbsoluteArea(area,imageArea);
  createImageMapContainer(area[0],area[1],area[2],area[3],link);
}",0.4854215918045705
75076,"/** 
 * processes after pressing ok button
 */
private void okPressedProcess(){
  Utility.setPreferenceStoredMap(JdbcPlugin.JAR_MAP_PREFERENCE_KEY,jarMap);
  Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
  Iterator jarsCopyIterator=jarsToBeCopied.values().iterator();
  while (jarsCopyIterator.hasNext()) {
    JarFile jar=(JarFile)jarsCopyIterator.next();
    jar.copyJarToODADir();
    Utility.removeMapEntryFromPreferenceStoredMap(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName());
  }
  Iterator jarsDeleteIterator=jarsToBeDeleted.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    JarFile jar=(JarFile)jarsDeleteIterator.next();
    jar.deleteJarFromODADir();
    Utility.putPreferenceStoredMapValue(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName(),jar);
  }
  refreshDriverPage();
  super.okPressed();
}","/** 
 * processes after pressing ok button
 */
private void okPressedProcess(){
  Utility.setPreferenceStoredMap(JdbcPlugin.JAR_MAP_PREFERENCE_KEY,jarMap);
  Utility.setPreferenceStoredMap(JdbcPlugin.DRIVER_MAP_PREFERENCE_KEY,driverMap);
  Iterator jarsCopyIterator=jarsToBeCopied.values().iterator();
  JDBCDriverManager manager=JDBCDriverManager.getInstance();
  JDBCDriverInformation info;
  List drivers=new ArrayList();
  while (jarsCopyIterator.hasNext()) {
    JarFile jar=(JarFile)jarsCopyIterator.next();
    jar.copyJarToODADir();
    Utility.removeMapEntryFromPreferenceStoredMap(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName());
    drivers.addAll(JdbcToolKit.getDriverByJar(jar));
  }
  for (int i=0; i < drivers.size(); i++) {
    info=(JDBCDriverInformation)drivers.get(i);
    manager.updateStatus(info.getDriverClassName());
  }
  drivers.clear();
  Iterator jarsDeleteIterator=jarsToBeDeleted.values().iterator();
  while (jarsDeleteIterator.hasNext()) {
    JarFile jar=(JarFile)jarsDeleteIterator.next();
    jar.deleteJarFromODADir();
    Utility.putPreferenceStoredMapValue(JdbcPlugin.DELETED_JAR_MAP_PREFERENCE_KEY,jar.getFileName(),jar);
    drivers.addAll(JdbcToolKit.getDriverByJar(jar));
  }
  for (int i=0; i < drivers.size(); i++) {
    info=(JDBCDriverInformation)drivers.get(i);
    try {
      manager.deregisterDriver(info.getDriverClassName());
    }
 catch (    OdaException e) {
      MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + info.getDriverClassName());
    }
  }
  refreshDriverPage();
  super.okPressed();
}",0.6958993097848153
75077,"/** 
 * remove driver(s) from runtime driver list
 * @param fileList
 */
public static void removeFromDriverList(List fileList){
  for (int i=0; i < fileList.size(); i++) {
    String fileName=((File)fileList.get(i)).getName();
    jdbcDriverInfos.removeAll((List)file2Drivers.get(fileName));
    file2Drivers.remove(fileName);
    if (failLoadFileList.contains(fileList.get(i)))     failLoadFileList.remove(fileList.get(i));
  }
}","/** 
 * remove driver(s) from runtime driver list
 * @param fileList
 */
public static void removeFromDriverList(List fileList){
  for (int i=0; i < fileList.size(); i++) {
    String fileName=((File)fileList.get(i)).getName();
    List driverNames=(List)file2Drivers.get(fileName);
    for (int j=0; j < jdbcDriverInfos.size(); j++) {
      for (int k=0; k < driverNames.size(); k++)       if (((JDBCDriverInformation)jdbcDriverInfos.get(j)).getDriverClassName().equals(((JDBCDriverInformation)driverNames.get(k)).getDriverClassName())) {
        jdbcDriverInfos.remove(j);
      }
    }
    if (failLoadFileList.contains(fileList.get(i)))     failLoadFileList.remove(fileList.get(i));
  }
}",0.6268922528940338
75078,"private void loadAndRegisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return;
  Class driverClass=null;
  if (registeredDrivers.contains(className))   return;
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  boolean driverInClassPath=false;
  try {
    Class.forName(className);
    logger.info(""String_Node_Str"" + className);
    driverInClassPath=true;
  }
 catch (  ClassNotFoundException e) {
    if (logger.isLoggable(Level.FINE)) {
      logger.info(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    driverClass=loadExtraDriver(className,true);
    if (driverClass == null) {
      logger.warning(""String_Node_Str"" + className);
      throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
    }
  }
  if (!driverInClassPath) {
    Driver driver=null;
    try {
      driver=(Driver)driverClass.newInstance();
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""String_Node_Str"" + className,e);
      throw new JDBCException(ResourceConstants.CANNOT_INSTANTIATE_DRIVER,null,className);
    }
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.add(className);
}","private void loadAndRegisterDriver(String className) throws OdaException {
  if (className == null || className.length() == 0)   return;
  if (isDeregistered(className)) {
    throw new JDBCException(ResourceConstants.CANNOT_LOAD_DRIVER,null,className);
  }
 else   if (this.registeredDrivers.containsKey(className)) {
    return;
  }
  if (logger.isLoggable(Level.INFO)) {
    logger.info(""String_Node_Str"" + className);
  }
  Driver driver=findDriver(className);
  if (driver != null) {
    try {
      if (logger.isLoggable(Level.FINER))       logger.finer(""String_Node_Str"" + className);
      DriverManager.registerDriver(new WrappedDriver(driver,className));
    }
 catch (    SQLException e) {
      logger.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
  registeredDrivers.put(className,DRIVER_REGISTERED);
}",0.5157894736842106
75079,"public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (PDFTableLM.this.isColumnHidden(column)) {
      columns[i]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
 else {
      if (w == null) {
        columns[i]=null;
      }
 else {
        columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
      }
    }
  }
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  formalize(columns,tableWidth);
  return resolve(tableWidth,columns);
}","public int[] resolveFixedLayout(int maxWidth){
  int columnNumber=table.getColumnCount();
  DimensionType[] columns=new DimensionType[columnNumber];
  for (int i=0; i < columnNumber; i++) {
    IColumn column=table.getColumn(i);
    DimensionType w=column.getWidth();
    if (PDFTableLM.this.isColumnHidden(column)) {
      columns[i]=new DimensionType(0d,EngineIRConstants.UNITS_PT);
    }
 else {
      if (startCol < 0) {
        startCol=i;
      }
      endCol=i;
      if (w == null) {
        columns[i]=null;
      }
 else {
        columns[i]=new DimensionType(w.getMeasure(),w.getUnits());
      }
    }
  }
  if (startCol < 0)   startCol=0;
  if (endCol < 0)   endCol=0;
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),maxWidth);
  int tableWidth;
  if (specifiedWidth > 0) {
    tableWidth=specifiedWidth;
  }
 else {
    tableWidth=maxWidth;
  }
  formalize(columns,tableWidth);
  return resolve(tableWidth,columns);
}",0.9237770193401592
75080,"public PDFTableRegionLM getTableRegionLayout(){
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setMaxWidth(context.getMaxWidth());
  con.setAllowPageBreak(false);
  if (regionLayout == null) {
    regionLayout=new TableAreaLayout(tableContent,layoutInfo,0,columnNumber);
  }
  return new PDFTableRegionLM(con,tableContent,layoutInfo,regionLayout);
}","public PDFTableRegionLM getTableRegionLayout(){
  PDFReportLayoutEngine engine=context.getLayoutEngine();
  PDFLayoutEngineContext con=new PDFLayoutEngineContext(engine);
  con.setFactory(new PDFLayoutManagerFactory(con));
  con.setFormat(context.getFormat());
  con.setReport(context.getReport());
  con.setMaxHeight(context.getMaxHeight());
  con.setMaxWidth(context.getMaxWidth());
  con.setAllowPageBreak(false);
  if (regionLayout == null) {
    regionLayout=new TableAreaLayout(tableContent,layoutInfo,startCol,endCol);
  }
  return new PDFTableRegionLM(con,tableContent,layoutInfo,regionLayout);
}",0.9776304888152444
75081,"protected void initialize(){
  if (root == null) {
    isNewArea=true;
    createRoot();
    buildTableLayoutInfo();
    root.setWidth(layoutInfo.getTableWidth());
    maxAvaWidth=layoutInfo.getTableWidth();
    setCurrentIP(0);
    setCurrentBP(0);
    repeatRowCount=0;
    rowCount=0;
  }
  if (layout == null) {
    layout=new TableAreaLayout(tableContent,layoutInfo,0,columnNumber);
    layout.initTableLayout(context.getUnresolvedRowHint(tableContent));
  }
  if (parent != null) {
    root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  }
 else {
    root.setAllocatedHeight(context.getMaxHeight());
  }
  maxAvaHeight=root.getContentHeight() - getBottomBorderWidth();
}","protected void initialize(){
  if (root == null) {
    isNewArea=true;
    createRoot();
    buildTableLayoutInfo();
    root.setWidth(layoutInfo.getTableWidth());
    maxAvaWidth=layoutInfo.getTableWidth();
    setCurrentIP(0);
    setCurrentBP(0);
    repeatRowCount=0;
    rowCount=0;
  }
  if (layout == null) {
    layout=new TableAreaLayout(tableContent,layoutInfo,startCol,endCol);
    layout.initTableLayout(context.getUnresolvedRowHint(tableContent));
  }
  if (parent != null) {
    root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  }
 else {
    root.setAllocatedHeight(context.getMaxHeight());
  }
  maxAvaHeight=root.getContentHeight() - getBottomBorderWidth();
}",0.9804205946337926
75082,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      log.log(Level.SEVERE,""String_Node_Str"",source);
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      log.log(Level.SEVERE,""String_Node_Str"",source);
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{paramName,type,""String_Node_Str""});
  }
  return true;
}",0.9896265560165975
75083,"protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  int maxContentWidth=root.getContentWidth();
  if (contentDimension.getWidth() > maxContentWidth) {
    contentDimension.setDimension(maxContentWidth,(int)(maxContentWidth / contentDimension.getRatio()));
  }
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
}","protected void init(){
  assert(content instanceof IImageContent);
  image=(IImageContent)content;
  maxWidth=parent.getCurrentMaxContentWidth();
  Dimension contentDimension=getSpecifiedDimension(image);
  root=(ContainerArea)createInlineContainer(image,true,true);
  validateBoxProperty(root.getStyle(),maxWidth,context.getMaxHeight());
  root.setAllocatedWidth(maxWidth);
  int maxContentWidth=root.getContentWidth();
  ImageArea imageArea=(ImageArea)AreaFactory.createImageArea(image);
  imageArea.setWidth(contentDimension.getWidth());
  imageArea.setHeight(contentDimension.getHeight());
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  processChartLegend(image,imageArea);
  root.setContentWidth(contentDimension.getWidth());
  root.setContentHeight(Math.min(context.getMaxHeight(),contentDimension.getHeight()));
}",0.5268703898840885
75084,"protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
      }
 else       if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      assert(spacing >= 0);
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign) || CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}","protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (spacing > 0) {
        if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
        }
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      assert(spacing >= 0);
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign) || CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}",0.9878608038845428
75085,"/** 
 * @param fieldType
 * @return
 */
private Object createNullValueReplacer(int fieldType){
switch (fieldType) {
case DataType.DATE_TYPE:
    return new java.util.Date(nullTime);
case DataType.SQL_DATE_TYPE:
  return new java.sql.Date(nullTime);
case DataType.SQL_TIME_TYPE:
return new Time(nullTime);
case DataType.BOOLEAN_TYPE:
return new Boolean(false);
case DataType.DECIMAL_TYPE:
return new Double(0);
case DataType.DOUBLE_TYPE:
return new Double(0);
case DataType.INTEGER_TYPE:
return new Integer(0);
case DataType.STRING_TYPE:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}","/** 
 * @param fieldType
 * @return
 */
private Object createNullValueReplacer(int fieldType){
switch (fieldType) {
case DataType.DATE_TYPE:
    return new java.util.Date(nullTime);
case DataType.SQL_DATE_TYPE:
  return new java.sql.Date(nullTime);
case DataType.SQL_TIME_TYPE:
return new Time(nullTime);
case DataType.BOOLEAN_TYPE:
return new Boolean(false);
case DataType.DECIMAL_TYPE:
return new BigDecimal(0);
case DataType.DOUBLE_TYPE:
return new Double(0);
case DataType.INTEGER_TYPE:
return new Integer(0);
case DataType.STRING_TYPE:
return ""String_Node_Str"";
default :
return ""String_Node_Str"";
}
}",0.9867549668874172
75086,"/** 
 * @param engine the report engine
 * @param runnable the report runnable object
 * @param reportDoc the report document instance
 */
public RenderTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reportDoc){
  super(engine,runnable,IEngineTask.TASK_RENDER);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  openReportDocument(reportDoc);
  loadDesign();
  innerRender=new PageRangeRender(new long[]{1,this.reportDoc.getPageCount()});
}","/** 
 * @param engine the report engine
 * @param runnable the report runnable object
 * @param reportDoc the report document instance
 */
public RenderTask(IReportEngine engine,IReportRunnable runnable,IReportDocument reportDoc){
  super(engine,runnable,IEngineTask.TASK_RENDER);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  openReportDocument(reportDoc);
  loadDesign();
  innerRender=new AllPageRender(new long[]{1,this.reportDoc.getPageCount()});
}",0.9919678714859438
75087,"protected boolean isPagedExecutor(){
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    return false;
  }
  boolean paged=true;
  IRenderOption renderOption=executionContext.getRenderOption();
  HTMLRenderOption htmlRenderOption=new HTMLRenderOption(renderOption);
  boolean htmlPagination=htmlRenderOption.getHtmlPagination();
  if (!htmlPagination) {
    paged=false;
  }
  return paged;
}","protected boolean isPagedExecutor(){
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    return !needPaginate();
  }
  boolean paged=true;
  IRenderOption renderOption=executionContext.getRenderOption();
  HTMLRenderOption htmlRenderOption=new HTMLRenderOption(renderOption);
  boolean htmlPagination=htmlRenderOption.getHtmlPagination();
  if (!htmlPagination) {
    paged=false;
  }
  return paged;
}",0.9759615384615384
75088,"protected boolean needPaginate(){
  return false;
}","protected boolean needPaginate(){
  return true;
}",0.9306930693069309
75089,"public void setPageRange(String pageRange) throws EngineException {
  innerRender=new PageRangeRender(parsePageSequence(pageRange,reportDoc.getPageCount()));
}","public void setPageRange(String pageRange) throws EngineException {
  if (null == pageRange || ""String_Node_Str"".equals(pageRange) || pageRange.toUpperCase().indexOf(""String_Node_Str"") >= 0) {
    innerRender=new AllPageRender(new long[]{1,reportDoc.getPageCount()});
  }
 else {
    innerRender=new PageRangeRender(parsePageSequence(pageRange,reportDoc.getPageCount()));
  }
}",0.5932835820895522
75090,"CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
}","CellArea(ICellContent cell){
  super(cell);
  removeBorder();
  setDefaultPadding();
  needClip=true;
}",0.91005291005291
75091,"InlineContainerArea(IContent content){
  super(content);
}","InlineContainerArea(IContent content){
  super(content);
  needClip=true;
}",0.8721804511278195
75092,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (needClip(container)) {
      pageGraphic.clipRestore();
    }
  }
  if (!containerStack.isEmpty()) {
    containerStack.pop();
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (container.needClip()) {
      pageGraphic.clipRestore();
    }
  }
  if (!containerStack.isEmpty()) {
    containerStack.pop();
  }
}",0.9763387297633872
75093,"/** 
 * If the container is a PageArea, this method creates a pdf page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container instanceof PageArea) {
    scale=container.getScale();
    hTextSpace=(int)(H_TEXT_SPACE * scale);
    vTextSpace=(int)(V_TEXT_SPACE * scale);
    newPage(container);
    containerStack.push(new ContainerPosition(0,0));
  }
 else {
    if (needClip(container)) {
      pageGraphic.clipSave();
      clip(container);
    }
    drawContainer(container);
    ContainerPosition pos;
    if (!containerStack.isEmpty()) {
      pos=(ContainerPosition)containerStack.peek();
      ContainerPosition current=new ContainerPosition(pos.x + getX(container),pos.y + getY(container));
      containerStack.push(current);
    }
 else {
      containerStack.push(new ContainerPosition(getX(container),getY(container)));
    }
  }
}","/** 
 * If the container is a PageArea, this method creates a pdf page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container instanceof PageArea) {
    scale=container.getScale();
    hTextSpace=(int)(H_TEXT_SPACE * scale);
    vTextSpace=(int)(V_TEXT_SPACE * scale);
    newPage(container);
    containerStack.push(new ContainerPosition(0,0));
  }
 else {
    if (container.needClip()) {
      pageGraphic.clipSave();
      clip(container);
    }
    drawContainer(container);
    ContainerPosition pos;
    if (!containerStack.isEmpty()) {
      pos=(ContainerPosition)containerStack.peek();
      ContainerPosition current=new ContainerPosition(pos.x + getX(container),pos.y + getY(container));
      containerStack.push(current);
    }
 else {
      containerStack.push(new ContainerPosition(getX(container),getY(container)));
    }
  }
}",0.9913597089586176
75094,"protected void createRoot(){
  root=new PageArea(pageContent);
  page=(PageArea)root;
  int pageWidth=getDimensionValue(pageContent.getPageWidth());
  int pageHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageWidth <= 0) {
    pageWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageHeight <= 0) {
    pageHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageWidth);
  page.setHeight(pageHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  int rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageWidth);
  int rootTop=getDimensionValue(pageContent.getMarginTop(),pageWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageHeight) {
    rootBottom=0;
  }
  pageRoot.setWidth(pageWidth - rootLeft - rootRight);
  pageRoot.setHeight(pageHeight - rootTop - rootBottom);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
}","protected void createRoot(){
  root=new PageArea(pageContent);
  page=(PageArea)root;
  int pageWidth=getDimensionValue(pageContent.getPageWidth());
  int pageHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageWidth <= 0) {
    pageWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageHeight <= 0) {
    pageHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageWidth);
  page.setHeight(pageHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  pageRoot.setClip(true);
  int rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageWidth);
  int rootTop=getDimensionValue(pageContent.getMarginTop(),pageWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageHeight) {
    rootBottom=0;
  }
  pageRoot.setWidth(pageWidth - rootLeft - rootRight);
  pageRoot.setHeight(pageHeight - rootTop - rootBottom);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
}",0.9954079830448604
75095,"/** 
 * Get BindingColumn object with specified name.
 * @param name
 * @return
 * @throws DataException there is no BindingColumn in manualBindingExprs
 */
private BindingColumn getBindingFromManualBinding(String name) throws DataException {
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      BindingColumn bindingColumn=(BindingColumn)it.next();
      if (bindingColumn.columnName.equals(name))       return bindingColumn;
    }
  }
  throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name);
}","/** 
 * Get BindingColumn object with specified name.
 * @param name
 * @return
 * @throws DataException there is no BindingColumn in manualBindingExprs
 */
private BindingColumn getBindingFromManualBinding(IBaseExpression expr,String name) throws DataException {
  BindingColumn bindingColumn=null;
  for (int i=0; i < allManualBindingExprs.size(); i++) {
    List list=(List)allManualBindingExprs.get(i);
    Iterator it=list.iterator();
    while (it.hasNext()) {
      bindingColumn=(BindingColumn)it.next();
      if (bindingColumn.columnName.equals(name)) {
        return bindingColumn;
      }
    }
  }
  if (expr != null) {
    bindingColumn=new BindingColumn(name,expr,ExpressionCompilerUtil.hasAggregationInExpr(expr),expr.getDataType());
    return bindingColumn;
  }
  throw new DataException(ResourceConstants.INVALID_BOUND_COLUMN_NAME,name);
}",0.8313253012048193
75096,"/** 
 * Evaluate the specified binding column in MANUAL_BINDING mode.
 * @param baseExpr
 * @param exprType
 * @param valueMap
 * @throws DataException
 */
Object evaluateValue(String bindingName) throws DataException {
  return this.evaluateValue(getBindingFromManualBinding(bindingName),MANUAL_BINDING);
}","/** 
 * Evaluate the specified binding column in MANUAL_BINDING mode.
 * @param baseExpr
 * @param exprType
 * @param valueMap
 * @throws DataException
 */
Object evaluateValue(IBaseExpression expr,String bindingName) throws DataException {
  return this.evaluateValue(getBindingFromManualBinding(expr,bindingName),MANUAL_BINDING);
}",0.959375
75097,"/** 
 */
public ExprManager(IBaseQueryDefinition baseQueryDefn){
  bindingExprs=new ArrayList();
  autoBindingExprMap=new HashMap();
  entryLevel=OVERALL_GROUP;
  this.baseQueryDefn=baseQueryDefn;
  this.autoBindingMap=new HashMap();
}","/** 
 * An exprManager object is to manipulate all available column bindings for specified query definition.
 * @param baseQueryDefn
 */
public ExprManager(IBaseQueryDefinition baseQueryDefn){
  this(baseQueryDefn,null);
}",0.3150984682713348
75098,"/** 
 * @param name
 * @return
 * @throws DataException
 */
public IBinding getBinding(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    if (gcb.getBinding(name) != null)     return gcb.getBinding(name);
  }
  if (this.autoBindingMap.containsKey(name)) {
    return (IBinding)this.autoBindingMap.get(name);
  }
  return null;
}","/** 
 * @param name
 * @return
 * @throws DataException
 */
public IBinding getBinding(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    if (gcb.getBinding(name) != null)     return gcb.getBinding(name);
  }
  if (this.autoBindingMap.containsKey(name)) {
    return (IBinding)this.autoBindingMap.get(name);
  }
  if (this.parent != null) {
    return parent.getBinding(name);
  }
  return null;
}",0.9170305676855895
75099,"/** 
 * @param name
 * @return
 * @throws DataException 
 */
private IBaseExpression getBindingExpr(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    Object o=gcb.getExpression(name);
    if (o != null)     return (IBaseExpression)o;
  }
  return null;
}","/** 
 * @param name
 * @return
 * @throws DataException 
 */
private IBaseExpression getBindingExpr(String name) throws DataException {
  for (int i=0; i < bindingExprs.size(); i++) {
    GroupBindingColumn gcb=(GroupBindingColumn)bindingExprs.get(i);
    if (entryLevel != OVERALL_GROUP) {
      if (gcb.getGroupLevel() > entryLevel)       continue;
    }
    Object o=gcb.getExpression(name);
    if (o != null)     return (IBaseExpression)o;
  }
  if (this.parent != null) {
    return this.parent.getBindingExpr(name);
  }
  return null;
}",0.8968253968253969
75100,"/** 
 * @return
 */
private List getColumnNames(){
  List bindingExprs=exprManager.getBindingExprs();
  Map autoBindingExprMap=exprManager.getAutoBindingExprMap();
  List l=new ArrayList();
  l.addAll(autoBindingExprMap.keySet());
  for (int i=0; i < bindingExprs.size(); i++) {
    l.addAll(((GroupBindingColumn)bindingExprs.get(i)).getColumnNames());
  }
  return l;
}","/** 
 * @return
 */
private List getColumnNames(){
  List bindingExprs=exprManager.getBindingExprs();
  Map autoBindingExprMap=exprManager.getAutoBindingExprMap();
  List l=new ArrayList();
  l.addAll(autoBindingExprMap.keySet());
  for (int i=0; i < bindingExprs.size(); i++) {
    l.addAll(((GroupBindingColumn)bindingExprs.get(i)).getColumnNames());
  }
  ExprManager exprManager1=exprManager;
  while (exprManager1.getParentExprManager() != null) {
    bindingExprs=exprManager1.getParentExprManager().getBindingExprs();
    autoBindingExprMap=exprManager1.getParentExprManager().getAutoBindingExprMap();
    l.addAll(autoBindingExprMap.keySet());
    for (int i=0; i < bindingExprs.size(); i++) {
      l.addAll(((GroupBindingColumn)bindingExprs.get(i)).getColumnNames());
    }
    exprManager1=exprManager1.getParentExprManager();
  }
  return l;
}",0.5877551020408164
75101,"/** 
 * @param columnBindingName
 * @param queryDefn
 * @return
 */
private String findExpression(String columnBindingName,IBaseQueryDefinition queryDefn){
  if (queryDefn == null) {
    return null;
  }
  if (queryDefn.getBindings().get(columnBindingName) == null) {
    return findExpression(columnBindingName,queryDefn.getParentQuery());
  }
  IBaseExpression expr=(IBaseExpression)((IBinding)queryDefn.getBindings().get(columnBindingName));
  if (expr instanceof IScriptExpression)   return ((IScriptExpression)expr).getText();
 else   return null;
}","/** 
 * @param columnBindingName
 * @param queryDefn
 * @return
 * @throws DataException 
 */
private String findExpression(String columnBindingName,IBaseQueryDefinition queryDefn) throws DataException {
  if (queryDefn == null) {
    return null;
  }
  if (queryDefn.getBindings().get(columnBindingName) == null) {
    return findExpression(columnBindingName,queryDefn.getParentQuery());
  }
  IBaseExpression expr=((IBinding)queryDefn.getBindings().get(columnBindingName)).getExpression();
  if (expr instanceof IScriptExpression)   return ((IScriptExpression)expr).getText();
 else   return null;
}",0.9281385281385282
75102,"/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  Context cx=Context.enter();
  try {
    if (this.baseQueryDefn.getBindings() != null && this.baseQueryDefn.getBindings().size() > 0) {
      this.expressionCompiler.setDataSetMode(false);
    }
    List groups=baseQueryDefn.getGroups();
    Set groupNameSet=new HashSet();
    IGroupDefinition group;
    for (int i=0; i < groups.size(); i++) {
      group=(IGroupDefinition)groups.get(i);
      if (group.getName() == null || group.getName().trim().length() == 0)       continue;
      for (int j=0; j < groups.size(); j++) {
        if (group.getName().equals(((IGroupDefinition)groups.get(j)).getName() == null ? ""String_Node_Str"" : ((IGroupDefinition)groups.get(j)).getName()) && j != i)         throw new DataException(ResourceConstants.DUPLICATE_GROUP_NAME);
      }
      groupNameSet.add(group.getName());
    }
    Map map=baseQueryDefn.getBindings();
    if (map != null) {
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        Object key=it.next();
        IBinding binding=(IBinding)map.get(key);
        String groupName=null;
        if (binding.getExpression() != null)         groupName=binding.getExpression().getGroupName();
        if (groupName == null) {
          if (binding.getAggregatOns().size() == 0)           continue;
          groupName=binding.getAggregatOns().get(0).toString();
        }
        if ((!groupName.equals(IBaseExpression.GROUP_OVERALL)) && !groupNameSet.contains(groupName)) {
          throw new DataException(ResourceConstants.GROUP_NOT_EXIST,new Object[]{groupName,key});
        }
      }
    }
    mappingParentColumnBinding();
    for (int i=0; i <= groups.size(); i++) {
      prepareGroup(baseQueryDefn,i,cx);
    }
  }
  finally {
    Context.exit();
  }
}","/** 
 * @throws DataException
 */
private void prepare() throws DataException {
  Context cx=Context.enter();
  try {
    if (this.baseQueryDefn.getBindings() != null && this.baseQueryDefn.getBindings().size() > 0) {
      this.expressionCompiler.setDataSetMode(false);
    }
    List groups=baseQueryDefn.getGroups();
    Set groupNameSet=new HashSet();
    IGroupDefinition group;
    for (int i=0; i < groups.size(); i++) {
      group=(IGroupDefinition)groups.get(i);
      if (group.getName() == null || group.getName().trim().length() == 0)       continue;
      for (int j=0; j < groups.size(); j++) {
        if (group.getName().equals(((IGroupDefinition)groups.get(j)).getName() == null ? ""String_Node_Str"" : ((IGroupDefinition)groups.get(j)).getName()) && j != i)         throw new DataException(ResourceConstants.DUPLICATE_GROUP_NAME);
      }
      groupNameSet.add(group.getName());
    }
    Map map=baseQueryDefn.getBindings();
    if (map != null) {
      Iterator it=map.keySet().iterator();
      while (it.hasNext()) {
        Object key=it.next();
        IBinding binding=(IBinding)map.get(key);
        String groupName=null;
        if (binding.getExpression() != null)         groupName=binding.getExpression().getGroupName();
        if (groupName == null) {
          if (binding.getAggregatOns().size() == 0)           continue;
          groupName=binding.getAggregatOns().get(0).toString();
        }
        if ((!groupName.equals(IBaseExpression.GROUP_OVERALL)) && !groupNameSet.contains(groupName)) {
          throw new DataException(ResourceConstants.GROUP_NOT_EXIST,new Object[]{groupName,key});
        }
      }
    }
    for (int i=0; i <= groups.size(); i++) {
      prepareGroup(baseQueryDefn,i,cx);
    }
  }
  finally {
    Context.exit();
  }
}",0.9905764966740576
75103,"/** 
 * @param deContext
 * @param scope
 * @param queryDefn
 * @param queryService
 * @param appContext
 * @throws DataException
 */
PreparedQuery(DataEngineSession session,DataEngineContext deContext,IBaseQueryDefinition queryDefn,IPreparedQueryService queryService,Map appContext) throws DataException {
}","/** 
 * @param session
 * @param deContext
 * @param queryDefn
 * @param queryService
 * @param appContext
 * @param parentExprManager
 * @throws DataException
 */
PreparedQuery(DataEngineSession session,DataEngineContext deContext,IBaseQueryDefinition queryDefn,IPreparedQueryService queryService,Map appContext) throws DataException {
  this(session,deContext,queryDefn,queryService,appContext,null);
}",0.8202247191011236
75104,"/** 
 * @param trans
 * @param groupLevel
 * @param cx
 * @throws DataException
 */
private void prepareGroup(IBaseQueryDefinition baseQuery,int groupLevel,Context cx) throws DataException {
  IBaseTransform trans=baseQuery;
  String groupName=IBaseExpression.GROUP_OVERALL;
  if (groupLevel != 0) {
    IGroupDefinition igd=(IGroupDefinition)((IBaseQueryDefinition)trans).getGroups().get(groupLevel - 1);
    trans=igd;
    groupName=igd.getName();
  }
  Collection exprCol=new ArrayList();
  Map resultSetExpressions=new HashMap();
  Map map=baseQuery.getBindings();
  if (map != null) {
    Iterator it=map.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      IBinding icbe=((IBinding)map.get(key));
      if (icbe.getExpression() != null && icbe.getExpression().getGroupName().equals(groupName) && groupLevel != 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel == 0 && icbe.getAggregatOns().size() == 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel != 0 && icbe.getAggregatOns().contains(groupName)) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
    }
  }
  prepareExpressions(exprCol,groupLevel,false,true,cx);
  String key=null;
  if (trans instanceof IGroupDefinition) {
    IGroupDefinition gd=(IGroupDefinition)trans;
    key=gd.getKeyColumn() != null ? gd.getKeyColumn() : gd.getKeyExpression();
  }
  this.exprManager.addBindingExpr(key,resultSetExpressions,groupLevel);
  Collection subQueries=trans.getSubqueries();
  Iterator subIt=subQueries.iterator();
  while (subIt.hasNext()) {
    ISubqueryDefinition subquery=(ISubqueryDefinition)subIt.next();
    PreparedSubquery pq=new PreparedSubquery(this.session,this.dataEngineContext,subquery,queryService,groupLevel);
    subQueryMap.put(subquery.getName(),pq);
    subQueryDefnMap.put(subquery.getName(),new Object[]{subquery,new Integer(groupLevel)});
  }
}","/** 
 * @param trans
 * @param groupLevel
 * @param cx
 * @throws DataException
 */
private void prepareGroup(IBaseQueryDefinition baseQuery,int groupLevel,Context cx) throws DataException {
  IBaseTransform trans=baseQuery;
  String groupName=IBaseExpression.GROUP_OVERALL;
  if (groupLevel != 0) {
    IGroupDefinition igd=(IGroupDefinition)((IBaseQueryDefinition)trans).getGroups().get(groupLevel - 1);
    trans=igd;
    groupName=igd.getName();
  }
  Collection exprCol=new ArrayList();
  Map resultSetExpressions=new HashMap();
  Map map=baseQuery.getBindings();
  if (map != null) {
    Iterator it=map.keySet().iterator();
    while (it.hasNext()) {
      Object key=it.next();
      IBinding icbe=((IBinding)map.get(key));
      if (icbe.getExpression() != null && icbe.getExpression().getGroupName().equals(groupName) && groupLevel != 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel == 0 && icbe.getAggregatOns().size() == 0) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
 else       if (groupLevel != 0 && icbe.getAggregatOns().contains(groupName)) {
        exprCol.add(icbe.getExpression());
        resultSetExpressions.put(key,icbe);
      }
    }
  }
  prepareExpressions(exprCol,groupLevel,false,true,cx);
  String key=null;
  if (trans instanceof IGroupDefinition) {
    IGroupDefinition gd=(IGroupDefinition)trans;
    key=gd.getKeyColumn() != null ? gd.getKeyColumn() : gd.getKeyExpression();
  }
  this.exprManager.addBindingExpr(key,resultSetExpressions,groupLevel);
  Collection subQueries=trans.getSubqueries();
  Iterator subIt=subQueries.iterator();
  while (subIt.hasNext()) {
    ISubqueryDefinition subquery=(ISubqueryDefinition)subIt.next();
    PreparedSubquery pq=new PreparedSubquery(this.session,this.dataEngineContext,subquery,queryService,groupLevel,this.exprManager);
    subQueryMap.put(subquery.getName(),pq);
    subQueryDefnMap.put(subquery.getName(),new Object[]{subquery,new Integer(groupLevel)});
  }
}",0.995888754534462
75105,"/** 
 * @param subquery Subquery definition
 * @param parentQuery Parent query (which can be a subquery itself, or a PreparedReportQuery)
 * @param groupLevel Index of group in which this subquery is defined within the parent query. If 0, subquery is defined outside of any groups.
 * @throws DataException
 */
PreparedSubquery(DataEngineSession session,DataEngineContext context,ISubqueryDefinition subquery,IPreparedQueryService queryService,int groupLevel) throws DataException {
  Object[] params={session,context,subquery,queryService,new Integer(groupLevel)};
  logger.entering(PreparedSubquery.class.getName(),""String_Node_Str"",params);
  this.groupLevel=groupLevel;
  this.queryService=queryService;
  this.subQueryOnGroup=subquery.applyOnGroup();
  logger.logp(Level.FINER,PreparedSubquery.class.getName(),""String_Node_Str"",""String_Node_Str"");
  this.session=session;
  this.preparedQuery=new PreparedQuery(session,context,subquery,this,null);
  logger.exiting(PreparedSubquery.class.getName(),""String_Node_Str"");
}","/** 
 * @param subquery Subquery definition
 * @param parentQuery Parent query (which can be a subquery itself, or a PreparedReportQuery)
 * @param groupLevel Index of group in which this subquery is defined within the parent query. If 0, subquery is defined outside of any groups.
 * @param parentExprManager Parent query's expression manager
 * @throws DataException
 */
PreparedSubquery(DataEngineSession session,DataEngineContext context,ISubqueryDefinition subquery,IPreparedQueryService queryService,int groupLevel,ExprManager parentExprManager) throws DataException {
  Object[] params={session,context,subquery,queryService,new Integer(groupLevel)};
  logger.entering(PreparedSubquery.class.getName(),""String_Node_Str"",params);
  this.groupLevel=groupLevel;
  this.queryService=queryService;
  this.subQueryOnGroup=subquery.applyOnGroup();
  logger.logp(Level.FINER,PreparedSubquery.class.getName(),""String_Node_Str"",""String_Node_Str"");
  this.session=session;
  this.preparedQuery=new PreparedQuery(session,context,subquery,this,null,parentExprManager);
  logger.exiting(PreparedSubquery.class.getName(),""String_Node_Str"");
}",0.94902687673772
75106,"/** 
 * @return session temp dir
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir){
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdir()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
    }
    sessionFile.deleteOnExit();
  }
  System.out.println(""String_Node_Str"" + sessionFile.getAbsolutePath());
  return getCanonicalPath(sessionFile);
}","/** 
 * @return session temp dir
 * @throws IOException 
 */
public static String createSessionTempDir(String tempRootDir){
  final String prefix=""String_Node_Str"";
  File sessionFile=null;
synchronized (cacheCounter2) {
    String sessionTempDir=tempRootDir + File.separator + prefix+ System.currentTimeMillis()+ cacheCounter2.intValue();
    cacheCounter2=new Integer(cacheCounter2.intValue() + 1);
    sessionFile=new File(sessionTempDir);
    int i=0;
    while (sessionFile.exists() || !sessionFile.mkdir()) {
      i++;
      sessionTempDir=sessionTempDir + ""String_Node_Str"" + i;
      sessionFile=new File(sessionTempDir);
    }
    sessionFile.deleteOnExit();
  }
  return getCanonicalPath(sessionFile);
}",0.927381745502998
75107,"public IResultObject next() throws DataException {
  if (this.rowFetchLimit <= 0 || this.rowCount < this.rowFetchLimit) {
    IResultObject result=doNext();
    if (result != null)     this.rowCount++;
    return result;
  }
  return null;
}","public IResultObject next() throws DataException {
  if (this.rowFetchLimit <= 0 || this.rowCount < this.rowFetchLimit) {
    IResultObject result=doNext();
    while (this.shouldContinueSeek) {
      result=doNext();
    }
    if (result != null)     this.rowCount++;
    return result;
  }
  return null;
}",0.8779599271402551
75108,"/** 
 * Return the IResultObject instance of a data set when curComparedResult is less than 0;
 * @return
 * @throws DataException
 */
private IResultObject lessNext() throws DataException {
  if (curPrimaryMatchValues == null) {
    return null;
  }
  if (joinType == IJointDataSetDesign.INNER_JOIN && curSecondaryMatchValues == null) {
    return null;
  }
  IResultObject resultObject=null;
  if (joinType != IJointDataSetDesign.INNER_JOIN)   resultObject=createResultObject(curPrimaryResultObject,null);
  fetchPrimaryObject();
  curComparedResult=getCompartorResult();
  if (joinType != IJointDataSetDesign.INNER_JOIN) {
    return resultObject;
  }
 else {
    return doNext();
  }
}","/** 
 * Return the IResultObject instance of a data set when curComparedResult is less than 0;
 * @return
 * @throws DataException
 */
private IResultObject lessNext() throws DataException {
  if (curPrimaryMatchValues == null) {
    return null;
  }
  if (joinType == IJointDataSetDesign.INNER_JOIN && curSecondaryMatchValues == null) {
    return null;
  }
  IResultObject resultObject=null;
  if (joinType != IJointDataSetDesign.INNER_JOIN)   resultObject=createResultObject(curPrimaryResultObject,null);
  fetchPrimaryObject();
  curComparedResult=getCompartorResult();
  if (joinType != IJointDataSetDesign.INNER_JOIN) {
    return resultObject;
  }
 else {
    this.shouldContinueSeek=true;
    return null;
  }
}",0.9588068181818182
75109,"/** 
 * Return the IResultObject instance of a data set when curComparedResult is greater than 0;
 * @return
 * @throws DataException
 */
private IResultObject greaterNext() throws DataException {
  if (curPrimaryMatchValues == null && joinType != IJointDataSetDesign.FULL_OUTER_JOIN) {
    return null;
  }
  if (joinType == IJointDataSetDesign.FULL_OUTER_JOIN && curSecondaryResultObjects.next() && !beSecondaryUsed) {
    return createResultObject(null,curSecondaryResultObjects.getCurrentResult());
  }
  fetchSecondaryObjects();
  curComparedResult=getCompartorResult();
  return doNext();
}","/** 
 * Return the IResultObject instance of a data set when curComparedResult is greater than 0;
 * @return
 * @throws DataException
 */
private IResultObject greaterNext() throws DataException {
  if (curPrimaryMatchValues == null && joinType != IJointDataSetDesign.FULL_OUTER_JOIN) {
    return null;
  }
  if (joinType == IJointDataSetDesign.FULL_OUTER_JOIN && curSecondaryResultObjects.next() && !beSecondaryUsed) {
    return createResultObject(null,curSecondaryResultObjects.getCurrentResult());
  }
  fetchSecondaryObjects();
  curComparedResult=getCompartorResult();
  this.shouldContinueSeek=true;
  return null;
}",0.9524590163934428
75110,"/** 
 * Constructor.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @param seeker
 * @throws DataException
 */
public BaseJointDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,IMatchResultObjectSeeker seeker,DataEngineSession session,int rowFetchLimit) throws DataException {
  this.meta=meta;
  this.joinType=joinType;
  this.jcm=jcm;
  this.session=session;
  if (isPrimaryLeft()) {
    this.primaryIterator=left;
    this.secondaryIterator=right;
  }
 else {
    this.primaryIterator=right;
    this.secondaryIterator=left;
  }
  beInitialized=false;
  this.rowFetchLimit=rowFetchLimit;
  this.rowCount=0;
}","/** 
 * Constructor.
 * @param left
 * @param right
 * @param meta
 * @param jcm
 * @param joinType
 * @param seeker
 * @throws DataException
 */
public BaseJointDataSetPopulator(IResultIterator left,IResultIterator right,JointResultMetadata meta,IJoinConditionMatcher jcm,int joinType,IMatchResultObjectSeeker seeker,DataEngineSession session,int rowFetchLimit) throws DataException {
  this.meta=meta;
  this.joinType=joinType;
  this.jcm=jcm;
  this.session=session;
  if (isPrimaryLeft()) {
    this.primaryIterator=left;
    this.secondaryIterator=right;
  }
 else {
    this.primaryIterator=right;
    this.secondaryIterator=left;
  }
  beInitialized=false;
  this.rowFetchLimit=rowFetchLimit;
  this.rowCount=0;
  this.shouldContinueSeek=false;
}",0.9775967413441956
75111,"/** 
 * @return
 * @throws DataException
 */
private IResultObject doNext() throws DataException {
  if (!beInitialized) {
    initialize();
    beInitialized=true;
  }
  if (curComparedResult == 0) {
    return equalNext();
  }
  if (curComparedResult < 0) {
    return lessNext();
  }
  if (curComparedResult > 0) {
    return greaterNext();
  }
  return null;
}","/** 
 * @return
 * @throws DataException
 */
private IResultObject doNext() throws DataException {
  this.shouldContinueSeek=false;
  if (!beInitialized) {
    initialize();
    beInitialized=true;
  }
  if (curComparedResult == 0) {
    return equalNext();
  }
  if (curComparedResult < 0) {
    return lessNext();
  }
  if (curComparedResult > 0) {
    return greaterNext();
  }
  return null;
}",0.9566360052562418
75112,"/** 
 * Return the IResultObject instance of a data set when curComparedResult is equal to 0;
 * @return
 * @throws DataException
 */
private IResultObject equalNext() throws DataException {
  if (curSecondaryResultObjects.next()) {
    beSecondaryUsed=true;
    return createResultObject(curPrimaryResultObject,(IResultObject)(curSecondaryResultObjects.getCurrentResult()));
  }
 else {
    fetchPrimaryObject();
    curComparedResult=getCompartorResult();
    return doNext();
  }
}","/** 
 * Return the IResultObject instance of a data set when curComparedResult is equal to 0;
 * @return
 * @throws DataException
 */
private IResultObject equalNext() throws DataException {
  if (curSecondaryResultObjects.next()) {
    beSecondaryUsed=true;
    return createResultObject(curPrimaryResultObject,(IResultObject)(curSecondaryResultObjects.getCurrentResult()));
  }
 else {
    fetchPrimaryObject();
    curComparedResult=getCompartorResult();
    this.shouldContinueSeek=true;
    return null;
  }
}",0.939879759519038
75113,"public void startNode(Node node,HashMap cssStyles){
  String nodeName=node.getNodeName();
  HashMap cssStyle=(HashMap)cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    Iterator ite=cssStyle.entrySet().iterator();
    while (ite.hasNext()) {
      Map.Entry entry=(Map.Entry)ite.next();
      Object keyObj=entry.getKey();
      Object valueObj=entry.getValue();
      if (keyObj == null || valueObj == null) {
        continue;
      }
      String key=keyObj.toString();
      String value=valueObj.toString();
      buffer.append(key);
      buffer.append(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(key)) {
        String valueTrue=handleStyleImage(value);
        if (valueTrue != null) {
          value=valueTrue;
        }
        buffer.append(""String_Node_Str"");
        buffer.append(value);
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(value.replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      buffer.append(""String_Node_Str"");
    }
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}","public void startNode(Node node,HashMap cssStyles){
  String nodeName=node.getNodeName();
  HashMap cssStyle=(HashMap)cssStyles.get(node);
  writer.openTag(nodeName);
  NamedNodeMap attributes=node.getAttributes();
  if (attributes != null) {
    for (int i=0; i < attributes.getLength(); i++) {
      Node attribute=attributes.item(i);
      String attrName=attribute.getNodeName();
      String attrValue=attribute.getNodeValue();
      if (attrValue != null) {
        if (""String_Node_Str"".equalsIgnoreCase(nodeName) && ""String_Node_Str"".equalsIgnoreCase(attrName)) {
          String attrValueTrue=handleStyleImage(attrValue);
          if (attrValueTrue != null) {
            attrValue=attrValueTrue;
          }
        }
        writer.attribute(attrName,attrValue);
      }
    }
  }
  if (cssStyle != null) {
    StringBuffer buffer=new StringBuffer();
    Iterator ite=cssStyle.entrySet().iterator();
    while (ite.hasNext()) {
      Map.Entry entry=(Map.Entry)ite.next();
      Object keyObj=entry.getKey();
      Object valueObj=entry.getValue();
      if (keyObj == null || valueObj == null) {
        continue;
      }
      String key=keyObj.toString();
      String value=valueObj.toString();
      buffer.append(key);
      buffer.append(""String_Node_Str"");
      if (""String_Node_Str"".equalsIgnoreCase(key)) {
        String valueTrue=handleStyleImage(value);
        if (valueTrue != null) {
          value=valueTrue;
        }
        buffer.append(""String_Node_Str"");
        buffer.append(value);
        buffer.append(""String_Node_Str"");
      }
 else {
        buffer.append(value);
      }
      buffer.append(""String_Node_Str"");
    }
    if (buffer.length() != 0) {
      writer.attribute(""String_Node_Str"",buffer.toString());
    }
  }
}",0.913552704963748
75114,"private void drawImage(ImageSource imageSource,float x,float y,float width,float height,Color bgcolor){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  y=transformY(y);
  gSave();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth * 3);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(x);
  out.print(""String_Node_Str"");
  out.print(y);
  out.println(""String_Node_Str"");
  if (height == 0 || width == 0) {
    height=originalHeight;
    width=originalWidth;
  }
  out.println(""String_Node_Str"");
  out.print(width);
  out.print(""String_Node_Str"");
  out.print(height);
  out.println(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.print(""String_Node_Str"");
  out.print(0);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  byte[] sb=new byte[originalHeight * originalWidth * 6];
  int offset=0;
  for (int i=0; i < originalHeight; i++) {
    if (bgcolor == null) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int red=(pixel & 0xff0000) >> 16;
        int green=(pixel & 0xff00) >> 8;
        int blue=pixel & 0xff;
        offset=toBytes(offset,sb,red);
        offset=toBytes(offset,sb,green);
        offset=toBytes(offset,sb,blue);
      }
    }
 else {
    }
  }
  out.println(new String(sb));
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  gRestore();
}","private void drawImage(ImageSource imageSource,float x,float y,float width,float height,Color bgcolor){
  int originalWidth=imageSource.getWidth();
  int originalHeight=imageSource.getHeight();
  y=transformY(y);
  gSave();
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth * 3);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.print(x);
  out.print(""String_Node_Str"");
  out.print(y);
  out.println(""String_Node_Str"");
  if (height == 0 || width == 0) {
    height=originalHeight;
    width=originalWidth;
  }
  out.println(""String_Node_Str"");
  out.print(width);
  out.print(""String_Node_Str"");
  out.print(height);
  out.println(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  out.print(originalWidth);
  out.print(""String_Node_Str"");
  out.print(originalHeight);
  out.print(""String_Node_Str"");
  out.print(0);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  byte[] sb=new byte[originalHeight * originalWidth * 6];
  int offset=0;
  for (int i=0; i < originalHeight; i++) {
    if (bgcolor == null) {
      for (int j=0; j < originalWidth; j++) {
        int pixel=imageSource.getRGB(j,i);
        int alpha=(pixel >> 24) & 0xff;
        int red=(pixel >> 16) & 0xff;
        int green=(pixel >> 8) & 0xff;
        int blue=pixel & 0xff;
        red=transferColor(alpha,red);
        green=transferColor(alpha,green);
        blue=transferColor(alpha,blue);
        offset=toBytes(offset,sb,red);
        offset=toBytes(offset,sb,green);
        offset=toBytes(offset,sb,blue);
      }
    }
 else {
    }
  }
  out.println(new String(sb));
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  gRestore();
}",0.931
75115,"public static TableInfo createTable(ITableContent table,int width){
  int colcount=table.getColumnCount();
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left < 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}","public static TableInfo createTable(ITableContent table,int width){
  int colcount=table.getColumnCount();
  if (colcount == 0) {
    return null;
  }
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      try {
        index[i]=ExcelUtil.covertDimensionType(value,width);
        know+=index[i];
      }
 catch (      IllegalArgumentException ex) {
        unmount.add(new Integer(i));
      }
    }
  }
  int left=width - know;
  if (left > 0 && unmount.size() == 0) {
    index[index.length - 1]=index[index.length - 1] + left;
    return new DefaultTableInfo(index);
  }
 else   if (left < 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    return new DefaultTableInfo(index);
  }
}",0.9815281276238456
75116,"public void endTable(){
  tables.pop();
  endContainer();
}","public void endTable(){
  if (!tables.isEmpty()) {
    tables.pop();
    endContainer();
  }
}",0.7712418300653595
75117,"/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner,String resourceFolder,String maxrows){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  return getBaseURL() + servletName + ""String_Node_Str""+ ""String_Node_Str""+ encodedReportName+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder;
}","/** 
 * Create web viewer url to run the report.
 * @param servletName servlet name to viewer report
 * @param report report file name
 * @param format report format
 * @param resourceFolder the resource folder
 * @param maxrows max rows limited
 * @return valid web viewer url
 */
private static String createURL(String servletName,String report,String format,boolean inDesigner,String resourceFolder,String maxrows){
  String encodedReportName=null;
  try {
    encodedReportName=URLEncoder.encode(report,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  String locale=ViewerPlugin.getDefault().getPluginPreferences().getString(USER_LOCALE);
  String svgFlag=ViewerPlugin.getDefault().getPluginPreferences().getString(SVG_FLAG);
  boolean bSVGFlag=false;
  boolean rtl=false;
  String eclipseCommands=System.getProperty(""String_Node_Str"");
  if (eclipseCommands != null) {
    String[] options=eclipseCommands.split(""String_Node_Str"");
    String regex=""String_Node_Str"";
    Pattern pattern=Pattern.compile(regex);
    for (int i=0; i < options.length; i++) {
      String option=options[i];
      if (pattern.matcher(option).matches()) {
        rtl=true;
        break;
      }
    }
  }
  if (""String_Node_Str"".equalsIgnoreCase(svgFlag)) {
    bSVGFlag=true;
  }
  String masterPageContent=ViewerPlugin.getDefault().getPluginPreferences().getString(MASTER_PAGE_CONTENT);
  boolean bMasterPageContent=true;
  if (""String_Node_Str"".equalsIgnoreCase(masterPageContent)) {
    bMasterPageContent=false;
  }
  String encodedResourceFolder=null;
  try {
    if (resourceFolder != null)     encodedResourceFolder=URLEncoder.encode(resourceFolder,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (encodedResourceFolder == null)   encodedResourceFolder=""String_Node_Str"";
  String reportParam=""String_Node_Str"";
  if (encodedReportName.endsWith(REPORT_DOCUMENT_FILE))   reportParam=""String_Node_Str"";
  reportParam+=""String_Node_Str"" + encodedReportName;
  return getBaseURL() + servletName + ""String_Node_Str""+ reportParam+ ""String_Node_Str""+ format+ ""String_Node_Str""+ String.valueOf(bSVGFlag)+ (LocaleTable.containsKey(locale) ? ""String_Node_Str"" + LocaleTable.get(locale) : ""String_Node_Str"")+ ""String_Node_Str""+ String.valueOf(inDesigner)+ ""String_Node_Str""+ String.valueOf(bMasterPageContent)+ ""String_Node_Str""+ String.valueOf(rtl)+ (maxrows != null && maxrows.trim().length() > 0 ? ""String_Node_Str"" + maxrows : ""String_Node_Str"")+ ""String_Node_Str""+ encodedResourceFolder;
}",0.953118630248675
75118,"public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  cubeQueryExcutorHelper.addComputedMeasure(new ComputedMeasureHelper());
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[2];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitons[1]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[3];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[1]=new AggregationFunctionDefinition(null,""String_Node_Str"",new DimLevel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelsForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(10));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(26));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(dimLevel31),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[3].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}","public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  cubeQueryExcutorHelper.setComputedMeasure(new ComputedMeasureHelper());
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[2];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitons[1]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[3];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[1]=new AggregationFunctionDefinition(null,""String_Node_Str"",new DimLevel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelsForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(10));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[0].getAggregationValue(1),new Double(26));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(dimLevel31),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[3].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}",0.999507631708518
75119,"/** 
 * @param measurename
 * @param functionName
 */
public AggregationFunctionDefinition(String measurename,String functionName){
  Object[] params={measurename,functionName};
  logger.entering(AggregationFunctionDefinition.class.getName(),""String_Node_Str"",params);
  this.measureName=measurename;
  this.functionName=functionName;
  logger.exiting(AggregationFunctionDefinition.class.getName(),""String_Node_Str"");
}","/** 
 * @param measurename
 * @param functionName
 */
public AggregationFunctionDefinition(String measureName,String functionName){
  this(null,measureName,null,null,functionName,null);
}",0.5412541254125413
75120,"/** 
 * @param key1
 * @param key2
 * @return
 */
private static int compare(Object[] key1,Object[] key2){
  for (int i=0; i < key1.length; i++) {
    int result=((Comparable)key1[i]).compareTo(key2[i]);
    if (result < 0) {
      return result;
    }
 else     if (result > 0) {
      return result;
    }
  }
  return 0;
}","/** 
 * @param key1
 * @param key2
 * @return
 */
private int compare(Object[] key1,Object[] key2){
  for (int i=0; i < aggregation.getLevels().length; i++) {
    int result=((Comparable)key1[i]).compareTo(key2[i]);
    if (result < 0) {
      return result;
    }
 else     if (result > 0) {
      return result;
    }
  }
  return 0;
}",0.9486404833836858
75121,"/** 
 * @param row
 * @throws IOException
 * @throws DataException
 */
void onRow(Row4Aggregation row) throws IOException, DataException {
  if (currentResultObj == null) {
    newAggregationResultRow(row);
  }
 else {
    if (currentResultObj.getLevelMembers() == null || compare(row.getLevelMembers(),currentResultObj.getLevelMembers()) == 0) {
      if (accumulators != null) {
        for (int i=0; i < accumulators.length; i++) {
          accumulators[i].onRow(getAccumulatorParameter(row,i));
        }
      }
    }
 else {
      if (accumulators != null) {
        currentResultObj.setAggregationValues(new Object[accumulators.length]);
        for (int i=0; i < accumulators.length; i++) {
          accumulators[i].finish();
          currentResultObj.getAggregationValues()[i]=accumulators[i].getValue();
          accumulators[i].start();
        }
      }
      result.add(currentResultObj);
      newAggregationResultRow(row);
    }
  }
}","/** 
 * @param row
 * @throws IOException
 * @throws DataException
 */
void onRow(Row4Aggregation row) throws IOException, DataException {
  if (currentResultObj == null) {
    newAggregationResultRow(row);
  }
 else {
    if (currentResultObj.getLevelMembers() == null || compare(row.getLevelMembers(),currentResultObj.getLevelMembers()) == 0) {
      if (accumulators != null) {
        for (int i=0; i < accumulators.length; i++) {
          if (!getFilterResult(row,i)) {
            continue;
          }
          accumulators[i].onRow(getAccumulatorParameter(row,i));
        }
      }
    }
 else {
      if (accumulators != null) {
        currentResultObj.setAggregationValues(new Object[accumulators.length]);
        for (int i=0; i < accumulators.length; i++) {
          accumulators[i].finish();
          currentResultObj.getAggregationValues()[i]=accumulators[i].getValue();
          accumulators[i].start();
        }
      }
      result.add(currentResultObj);
      newAggregationResultRow(row);
    }
  }
}",0.9621403331650682
75122,"/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] paramterColNames,IFactTableRowIterator facttableRowIterator) throws DataException {
  Object[] params={aggregationDef,facttableRowIterator};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndex=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggregation aggregation=BuiltInAggregationFactory.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation.getParameterDefn() != null && aggregation.getParameterDefn().length > 1) {
        this.parameterColIndex[i]=find(paramterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndex[i]=facttableRowIterator.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if (this.measureIndex[i] == -1) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] paramterColNames,IFactTableRowIterator facttableRowIterator) throws DataException {
  Object[] params={aggregationDef,facttableRowIterator};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndex=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggregation aggregation=BuiltInAggregationFactory.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation.getParameterDefn() != null && aggregation.getParameterDefn().length > 1) {
        this.parameterColIndex[i]=find(paramterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndex[i]=facttableRowIterator.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if (this.measureIndex[i] == -1) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  measureInfo=facttableRowIterator.getMeasureInfo();
  facttableRow=new FacttableRow(measureInfo);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}",0.973967920063108
75123,"/** 
 * @param row
 * @throws DataException
 */
private void newAggregationResultRow(Row4Aggregation row) throws DataException {
  currentResultObj=new AggregationResultRow();
  if (levelCount > 0) {
    currentResultObj.setLevelMembers(new Member[levelCount]);
    System.arraycopy(row.getLevelMembers(),0,currentResultObj.getLevelMembers(),0,currentResultObj.getLevelMembers().length);
  }
  if (accumulators != null) {
    for (int i=0; i < accumulators.length; i++) {
      accumulators[i].onRow(getAccumulatorParameter(row,i));
    }
  }
}","/** 
 * @param row
 * @throws DataException
 */
private void newAggregationResultRow(Row4Aggregation row) throws DataException {
  currentResultObj=new AggregationResultRow();
  if (levelCount > 0) {
    currentResultObj.setLevelMembers(new Member[levelCount]);
    System.arraycopy(row.getLevelMembers(),0,currentResultObj.getLevelMembers(),0,currentResultObj.getLevelMembers().length);
  }
  if (accumulators != null) {
    for (int i=0; i < accumulators.length; i++) {
      if (!getFilterResult(row,i)) {
        continue;
      }
      accumulators[i].onRow(getAccumulatorParameter(row,i));
    }
  }
}",0.945264986967854
75124,"/** 
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IAggregationResultSet[] execute(StopSign stopSign) throws IOException, BirtException {
  populateSortedFactRows(stopSign);
  for (int i=0; i < allSortedFactRows.size(); i++) {
    DiskSortedStackWrapper diskSortedStackWrapper=(DiskSortedStackWrapper)allSortedFactRows.get(i);
    int[] calculatorIndexs=new int[sortedFactRows.length];
    int pos=0;
    for (int j=0; j < calculatorIndexs.length; j++) {
      if (sortedFactRows[j] == diskSortedStackWrapper) {
        calculatorIndexs[pos]=j;
        pos++;
      }
    }
    while (diskSortedStackWrapper.pop() != null && !stopSign.isStopped()) {
      Row4Aggregation row=(Row4Aggregation)diskSortedStackWrapper.getCurrentObject();
      for (int j=0; j < pos; j++) {
        aggregationCalculators[calculatorIndexs[j]].onRow(cut(row,levelIndex[calculatorIndexs[j]].length / 2));
      }
    }
  }
  IAggregationResultSet[] resultSets=new IAggregationResultSet[aggregationCalculators.length];
  for (int i=0; i < aggregationCalculators.length; i++) {
    resultSets[i]=new AggregationResultSet(aggregationCalculators[i].aggregation,aggregationCalculators[i].getResult(),getKeyNames(i),getAttributeNames(i));
  }
  return resultSets;
}","/** 
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public IAggregationResultSet[] execute(StopSign stopSign) throws IOException, BirtException {
  populateSortedFactRows(stopSign);
  for (int i=0; i < allSortedFactRows.size(); i++) {
    DiskSortedStackWrapper diskSortedStackWrapper=(DiskSortedStackWrapper)allSortedFactRows.get(i);
    int[] calculatorIndexs=new int[sortedFactRows.length];
    int pos=0;
    for (int j=0; j < calculatorIndexs.length; j++) {
      if (sortedFactRows[j] == diskSortedStackWrapper) {
        calculatorIndexs[pos]=j;
        pos++;
      }
    }
    while (diskSortedStackWrapper.pop() != null && !stopSign.isStopped()) {
      Row4Aggregation row=(Row4Aggregation)diskSortedStackWrapper.getCurrentObject();
      for (int j=0; j < pos; j++) {
        aggregationCalculators[calculatorIndexs[j]].onRow(row);
      }
    }
  }
  IAggregationResultSet[] resultSets=new IAggregationResultSet[aggregationCalculators.length];
  for (int i=0; i < aggregationCalculators.length; i++) {
    resultSets[i]=new AggregationResultSet(aggregationCalculators[i].aggregation,aggregationCalculators[i].getResult(),getKeyNames(i),getAttributeNames(i));
  }
  return resultSets;
}",0.781225139220366
75125,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,hierhandle,appContext),levelInHier));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelKeys.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,hierhandle,appContext),levelInHier));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}",0.9812194494468742
75126,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.9929881855729517
75127,"public void testVisionOptimize() throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setEnableAgentStyleEngine(false);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  List instanceIDs=new ArrayList();
  options.setInstanceIDs(instanceIDs);
  options.setOutputStream(output);
  options.setEnableMetadata(true);
  IRenderTask task=createRenderTask(designFile);
  task.setRenderOption(options);
  task.render();
  task.close();
  String content=new String(output.toByteArray());
  output.close();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String regex=""String_Node_Str"";
  Matcher matcher=Pattern.compile(regex).matcher(content);
  assertEquals(true,matcher.find());
}","public void testVisionOptimize() throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setEnableAgentStyleEngine(false);
  options.setEmbeddable(true);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  List instanceIDs=new ArrayList();
  options.setInstanceIDs(instanceIDs);
  options.setOutputStream(output);
  options.setEnableMetadata(true);
  IRenderTask task=createRenderTask(designFile);
  task.setRenderOption(options);
  task.render();
  task.close();
  String content=new String(output.toByteArray());
  output.close();
  String regex=""String_Node_Str"";
  Matcher matcher=Pattern.compile(regex).matcher(content);
  assertEquals(true,matcher.find());
}",0.9333333333333332
75128,"public void testPerformanceOptimize() throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setEnableAgentStyleEngine(true);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  List instanceIDs=new ArrayList();
  options.setInstanceIDs(instanceIDs);
  options.setOutputStream(output);
  options.setEnableMetadata(true);
  IRenderTask task=createRenderTask(designFile);
  task.setRenderOption(options);
  task.render();
  task.close();
  String content=new String(output.toByteArray());
  output.close();
  content=content.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String regex=""String_Node_Str"";
  Matcher matcher=Pattern.compile(regex).matcher(content);
  assertEquals(false,matcher.find());
}","public void testPerformanceOptimize() throws EngineException, IOException {
  HTMLRenderOption options=new HTMLRenderOption();
  options.setEnableAgentStyleEngine(true);
  options.setEmbeddable(true);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  List instanceIDs=new ArrayList();
  options.setInstanceIDs(instanceIDs);
  options.setOutputStream(output);
  options.setEnableMetadata(true);
  IRenderTask task=createRenderTask(designFile);
  task.setRenderOption(options);
  task.render();
  task.close();
  String content=new String(output.toByteArray());
  output.close();
  String regex=""String_Node_Str"";
  Matcher matcher=Pattern.compile(regex).matcher(content);
  assertEquals(true,matcher.find());
  regex=""String_Node_Str"";
  matcher=Pattern.compile(regex).matcher(content);
  assertEquals(false,matcher.find());
}",0.8664576802507837
75129,"static void handleStyle(Element ele,Map cssStyles,IContent content){
  String tagName=ele.getTagName();
  StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
  if (""String_Node_Str"".equals(tagName)) {
    String attr=ele.getAttribute(""String_Node_Str"");
    if (null != attr && !""String_Node_Str"".equals(attr)) {
      style.setFontSize(attr);
    }
    attr=ele.getAttribute(""String_Node_Str"");
    if (null != attr && !""String_Node_Str"".equals(attr)) {
      style.setColor(attr);
    }
    attr=ele.getAttribute(""String_Node_Str"");
    if (null != attr && !""String_Node_Str"".equals(attr)) {
      style.setFontFamily(attr);
    }
  }
  if (htmlDisplayMode.contains(tagName)) {
    style.setDisplay(""String_Node_Str"");
  }
 else {
    style.setDisplay(""String_Node_Str"");
  }
  IStyle inlineStyle=(IStyle)cssStyles.get(ele);
  if (inlineStyle != null) {
    style.setProperties(inlineStyle);
  }
  if (tag2Style.containsKey(ele.getTagName())) {
    StyleDeclaration tagStyle=(StyleDeclaration)content.getCSSEngine().parseStyleDeclaration((String)tag2Style.get(ele.getTagName()));
    if (tagStyle != null) {
      style.setProperties(tagStyle);
    }
  }
  content.setInlineStyle(style);
}","static void handleStyle(Element ele,Map cssStyles,IContent content){
  String tagName=ele.getTagName();
  StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
  if (""String_Node_Str"".equals(tagName)) {
    String attr=ele.getAttribute(""String_Node_Str"");
    if (null != attr && !""String_Node_Str"".equals(attr)) {
      style.setFontSize(attr);
    }
    attr=ele.getAttribute(""String_Node_Str"");
    if (null != attr && !""String_Node_Str"".equals(attr)) {
      style.setColor(attr);
    }
    attr=ele.getAttribute(""String_Node_Str"");
    if (null != attr && !""String_Node_Str"".equals(attr)) {
      style.setFontFamily(attr);
    }
  }
  if (htmlDisplayMode.contains(tagName)) {
    style.setDisplay(""String_Node_Str"");
  }
 else {
    style.setDisplay(""String_Node_Str"");
  }
  IStyle inlineStyle=(IStyle)cssStyles.get(ele);
  if (inlineStyle != null) {
    style.setProperties(inlineStyle);
  }
  StyleProcessor tag2Style=StyleProcessor.getStyleProcess(tagName);
  if (tag2Style != null) {
    tag2Style.process(style);
  }
  content.setInlineStyle(style);
}",0.8285214348206474
75130,"/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
static void processNodes(Element ele,Map cssStyles,IContent content,IContent inlineParent,ActionContent action){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,inlineParent,action);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,inlineParent,action);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label,inlineParent);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_UNDERLINE,IStyle.UNDERLINE_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_LINETHROUGH,IStyle.LINE_THROUGH_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.BOTTOM_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.TOP_VALUE);
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,cssStyles,content,inlineParent,action,++level);
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
static void processNodes(Element ele,Map cssStyles,IContent content,IContent inlineParent,ActionContent action){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,inlineParent,action);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),cssStyles,content,inlineParent,action);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label,inlineParent);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,cssStyles,content,inlineParent,action,++level);
    }
  }
}",0.7255956956187548
75131,"/** 
 * Gets the BaseFont object to display the given character. It will <li> traverse the customer defined font list by the specified order, try to display the character with the BaseFont using the font family name. If the font family name is a generic font, or an alias of another font family, the font family name will be replaced according to the mapping defined in the fontMapping object. </li> <li> If the above fails, the unicode block containing the given character will be retrived. Then we will try each font defined for this block to display the character. </li> <li> If the above also fails, we can not find a font to display the given character. null will be returned. </li>
 * @param c the given character.
 * @param fontFamilies the customer defined font list.
 * @param fontStyle the style of the font.
 * @return the BaseFont. If we fail to find one, return null.
 */
BaseFont getMappedFont(char c,FontMappingManager fontManager,CSSValueList fontFamilies,int fontStyle){
  for (int i=0; i < fontFamilies.getLength(); i++) {
    String fontFamilyName=fontFamilies.item(i).getCssText();
    String logicalFont=fontManager.getLogicalFont(fontFamilyName);
    String physicalFont=fontManager.getPhysicalFont(c,logicalFont,logicalFont);
    BaseFont font=getPhysicalFont(fontManager,physicalFont,fontStyle);
    if (isCharDefinedInFont(c,font)) {
      return font;
    }
  }
  String physicalFont=fontManager.getDefaultPhysicalFont(c);
  return getPhysicalFont(fontManager,physicalFont,fontStyle);
}","/** 
 * Gets the BaseFont object to display the given character. It will <li> traverse the customer defined font list by the specified order, try to display the character with the BaseFont using the font family name. If the font family name is a generic font, or an alias of another font family, the font family name will be replaced according to the mapping defined in the fontMapping object. </li> <li> If the above fails, the unicode block containing the given character will be retrived. Then we will try each font defined for this block to display the character. </li> <li> If the above also fails, we can not find a font to display the given character. null will be returned. </li>
 * @param c the given character.
 * @param fontFamilies the customer defined font list.
 * @param fontStyle the style of the font.
 * @return the BaseFont. If we fail to find one, return null.
 */
BaseFont getMappedFont(char c,FontMappingManager fontManager,CSSValueList fontFamilies,int fontStyle){
  for (int i=0; i < fontFamilies.getLength(); i++) {
    String fontFamilyName=fontFamilies.item(i).getCssText();
    String logicalFont=fontManager.getLogicalFont(fontFamilyName);
    String physicalFont=fontManager.getPhysicalFont(c,logicalFont,logicalFont);
    BaseFont font=getPhysicalFont(fontManager,physicalFont,fontStyle);
    if (isCharDefinedInFont(c,font)) {
      return font;
    }
  }
  String physicalFont=fontManager.getDefaultPhysicalFont(c);
  BaseFont defaultFont=getPhysicalFont(fontManager,physicalFont,fontStyle);
  if (defaultFont == null) {
    defaultFont=fontManager.createFont(FontMappingManager.DEFAULT_FONT,fontStyle);
  }
  return defaultFont;
}",0.9477329974811084
75132,"private BaseFont getPhysicalFont(FontMappingManager fontManager,String physicalFont,int fontStyle){
  BaseFont font=(BaseFont)fonts.get(physicalFont);
  if (font == null) {
    font=fontManager.createFont(physicalFont,fontStyle);
    fonts.put(physicalFont,font);
  }
  return font;
}","private BaseFont getPhysicalFont(FontMappingManager fontManager,String physicalFont,int fontStyle){
  BaseFont font=(BaseFont)fonts.get(physicalFont);
  if (font == null) {
    font=fontManager.createFont(physicalFont,fontStyle);
    if (font != null) {
      fonts.put(physicalFont,font);
    }
  }
  return font;
}",0.9466666666666668
75133,"private String getEncoding(String fontFamilyName){
  String encoding=(String)fontEncodings.get(fontFamilyName);
  return (null == encoding) ? BaseFont.IDENTITY_H : encoding;
}","public String getEncoding(String fontFamilyName){
  String encoding=(String)fontEncodings.get(fontFamilyName);
  return (null == encoding) ? BaseFont.IDENTITY_H : encoding;
}",0.9742120343839542
75134,"/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @param encoding the encoding for the font.
 * @return the created BaseFont.
 */
public BaseFont createFont(String ffn,int fontStyle){
  String key=ffn + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      String encoding=getEncoding(ffn);
      Font f=null;
      try {
        f=FontFactory.getFont(ffn,encoding,BaseFont.NOT_EMBEDDED,14,fontStyle);
      }
 catch (      Throwable de) {
        logger.log(Level.WARNING,de.getLocalizedMessage());
        return null;
      }
      font=f.getBaseFont();
      if (font != null) {
        baseFonts.put(key,font);
      }
    }
    return font;
  }
}","/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @param encoding the encoding for the font.
 * @return the created BaseFont.
 */
public BaseFont createFont(String ffn,int fontStyle){
  String key=ffn + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      String encoding=getEncoding(ffn);
      Font f=null;
      try {
        f=FontFactory.getFont(ffn,encoding,BaseFont.NOT_EMBEDDED,14,fontStyle);
        font=f.getBaseFont();
        if (font != null) {
          baseFonts.put(key,font);
        }
      }
 catch (      Throwable de) {
        logger.log(Level.WARNING,de.getLocalizedMessage());
      }
    }
    return font;
  }
}",0.8371187540558079
75135,"private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return new HyperlinkDef(linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str""),IHyperlinkAction.ACTION_BOOKMARK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(RenderOptionBase.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        actionHandler.getURL(act,null);
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
 else   if (getBookMark(content) != null) {
    return getBookMark(content);
  }
  return null;
}","private HyperlinkDef parseHyperLink(IContent content){
  IHyperlinkAction linkaction=content.getHyperlinkAction();
  if (linkaction != null) {
    if (linkaction.getType() == IHyperlinkAction.ACTION_BOOKMARK) {
      return new HyperlinkDef(linkaction.getBookmark().replaceAll(""String_Node_Str"",""String_Node_Str""),IHyperlinkAction.ACTION_BOOKMARK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_HYPERLINK) {
      return new HyperlinkDef(linkaction.getHyperlink(),IHyperlinkAction.ACTION_HYPERLINK,null);
    }
 else     if (linkaction.getType() == IHyperlinkAction.ACTION_DRILLTHROUGH) {
      Action act=new Action(linkaction);
      IHTMLActionHandler actionHandler=null;
      Object ac=service.getOption(RenderOptionBase.ACTION_HANDLER);
      if (ac != null && ac instanceof IHTMLActionHandler) {
        actionHandler=(IHTMLActionHandler)ac;
        return new HyperlinkDef(actionHandler.getURL(act,service.getReportContext()),IHyperlinkAction.ACTION_DRILLTHROUGH,null);
      }
    }
  }
 else   if (getBookMark(content) != null) {
    return getBookMark(content);
  }
  return null;
}",0.9824561403508772
75136,"/** 
 * Tests cases for cube1 extends another cube2. <ul> <li>if one new access control is added to the cube1. Access controls on cube2 will be copies to cube1 first. <li>if one new value access control is added to the level in the cube1. Value access controls on the level cube2 will be copies to the level of cube1 first. </ul>
 * @throws Exception
 */
public void testExtends() throws Exception {
  openDesign(FILE_NAME_EXTENDS);
  assertNotNull(designHandle);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  TabularCubeHandle cube=(TabularCubeHandle)libraryHandle.findCube(""String_Node_Str"");
  TabularCubeHandle newCube=(TabularCubeHandle)designHandle.getElementFactory().newElementFrom(cube,null);
  designHandle.getCubes().add(newCube);
  save();
  assertTrue(compareFile(""String_Node_Str""));
  AccessControlHandle control=designHandle.getElementFactory().newAccessControl();
  control.addUserName(""String_Node_Str"");
  newCube.add(ICubeModel.ACCESS_CONTROLS_PROP,control);
  save();
  assertTrue(compareFile(""String_Node_Str""));
  designHandle.getCommandStack().undo();
  LevelHandle level=designHandle.findLevel(""String_Node_Str"");
  ValueAccessControlHandle valueAccess=designHandle.getElementFactory().newValueAccessControl();
  valueAccess.addValue(""String_Node_Str"");
  level.add(ILevelModel.VALUE_ACCESS_CONTROLS_PROP,valueAccess);
  save();
  assertTrue(compareFile(""String_Node_Str""));
  valueAccess.setPermission(DesignChoiceConstants.ACCESS_PERMISSION_ALLOW);
}","/** 
 * Tests cases for cube1 extends another cube2. <ul> <li>if one new access control is added to the cube1. Access controls on cube2 will be copies to cube1 first. <li>if one new value access control is added to the level in the cube1. Value access controls on the level cube2 will be copies to the level of cube1 first. </ul>
 * @throws Exception
 */
public void testExtends() throws Exception {
  openDesign(FILE_NAME_EXTENDS);
  assertNotNull(designHandle);
  libraryHandle=designHandle.getLibrary(""String_Node_Str"");
  TabularCubeHandle cube=(TabularCubeHandle)libraryHandle.findCube(""String_Node_Str"");
  TabularCubeHandle newCube=(TabularCubeHandle)designHandle.getElementFactory().newElementFrom(cube,""String_Node_Str"");
  designHandle.getCubes().add(newCube);
  save();
  assertTrue(compareFile(""String_Node_Str""));
  AccessControlHandle control=designHandle.getElementFactory().newAccessControl();
  control.addUserName(""String_Node_Str"");
  newCube.add(ICubeModel.ACCESS_CONTROLS_PROP,control);
  save();
  assertTrue(compareFile(""String_Node_Str""));
  designHandle.getCommandStack().undo();
  LevelHandle level=designHandle.findLevel(""String_Node_Str"");
  ValueAccessControlHandle valueAccess=designHandle.getElementFactory().newValueAccessControl();
  valueAccess.addValue(""String_Node_Str"");
  level.add(ILevelModel.VALUE_ACCESS_CONTROLS_PROP,valueAccess);
  save();
  assertTrue(compareFile(""String_Node_Str""));
  valueAccess.setPermission(DesignChoiceConstants.ACCESS_PERMISSION_ALLOW);
}",0.9929976658886296
75137,"/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    vm.setVersion(vm.getLatestVersion());
    this.version=vm.getLatestVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}","/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    vm.setVersion(VersionManager.getLatestVersion());
    this.version=VersionManager.getLatestVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}",0.9250559284116332
75138,"/** 
 * @return
 */
int getVersion(){
  int version=this.getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
    is.close();
  }
 catch (  DataException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return version;
}","/** 
 * @return
 */
public int getVersion(){
  int version=getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
    is.close();
  }
 catch (  DataException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return version;
}",0.9897084048027444
75139,"VersionManager(DataEngineContext context){
  this.dataEngineContext=context;
}","public VersionManager(DataEngineContext context){
  this.dataEngineContext=context;
}",0.9570552147239264
75140,"/** 
 * @return
 */
int getLatestVersion(){
  return VERSION_2_2_1;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_2_1_1;
}",0.8961038961038961
75141,"/** 
 * @param pathName
 * @param name
 * @return
 * @throws IOException
 */
public static IAggregationResultSet[] loadAggregationResultSet(String pathName,String name) throws IOException {
  IDocArchiveReader reader=new FileArchiveReader(getTmpFileName(pathName,name));
  IAggregationResultSet[] result=AggregationResultSetSaveUtil.load(name,reader);
  reader.close();
  return result;
}","/** 
 * @param pathName
 * @param name
 * @return
 * @throws IOException
 */
public static IAggregationResultSet[] loadAggregationResultSet(String pathName,String name) throws IOException {
  IDocArchiveReader reader=new FileArchiveReader(getTmpFileName(pathName,name));
  IAggregationResultSet[] result=AggregationResultSetSaveUtil.load(name,reader,VersionManager.getLatestVersion());
  reader.close();
  return result;
}",0.9580246913580248
75142,"/** 
 * @param name
 * @param reader
 * @throws IOException
 */
public static IAggregationResultSet[] load(String name,IDocArchiveReader reader) throws IOException {
  RAInputStream inputStream=reader.getStream(name);
  DataInputStream dataInputStream=new DataInputStream(inputStream);
  int size=dataInputStream.readInt();
  inputStream.close();
  if (size <= 0) {
    return null;
  }
  IAggregationResultSet[] result=new IAggregationResultSet[size];
  for (int i=0; i < size; i++) {
    inputStream=reader.getStream(name + PREFIX_RESULTSET + i);
    dataInputStream=new DataInputStream(inputStream);
    result[i]=loadOneResultSet(dataInputStream);
    dataInputStream.close();
  }
  return result;
}","/** 
 * @param name
 * @param reader
 * @throws IOException
 */
public static IAggregationResultSet[] load(String name,IDocArchiveReader reader,int version) throws IOException {
  RAInputStream inputStream=reader.getStream(name);
  DataInputStream dataInputStream=new DataInputStream(inputStream);
  int size=dataInputStream.readInt();
  inputStream.close();
  if (size <= 0) {
    return null;
  }
  IAggregationResultSet[] result=new IAggregationResultSet[size];
  for (int i=0; i < size; i++) {
    if (version != VersionManager.VERSION_2_2_1)     inputStream=reader.getStream(name + PREFIX_RESULTSET + i);
 else     inputStream=reader.getStream(name + i);
    dataInputStream=new DataInputStream(inputStream);
    result[i]=loadOneResultSet(dataInputStream);
    dataInputStream.close();
  }
  return result;
}",0.926829268292683
75143,"/** 
 * Populate the Result Set, either by re-execution ( If it has not been executed yet ) or  get it from local time folder.
 * @param executor
 * @param aggrDefns
 * @param cubeQueryExcutorHelper
 * @return
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] populateRs(CubeQueryExecutor executor,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExcutorHelper.execute(aggrDefns,new StopSign());
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=QueryResultIDUtil.nextID();
      FileArchiveWriter writer=new FileArchiveWriter(executor.getContext().getTmpdir() + ""String_Node_Str"");
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=QueryResultIDUtil.nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getContext().getTmpdir() + ""String_Node_Str""));
  }
  executor.setQueryResultsId(id);
  return rs;
}","/** 
 * Populate the Result Set, either by re-execution ( If it has not been executed yet ) or  get it from local time folder.
 * @param executor
 * @param aggrDefns
 * @param cubeQueryExcutorHelper
 * @return
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet[] populateRs(CubeQueryExecutor executor,AggregationDefinition[] aggrDefns,CubeQueryExecutorHelper cubeQueryExcutorHelper,boolean saveToRD) throws IOException, BirtException {
  IAggregationResultSet[] rs;
  String id=null;
  if (executor.getCubeQueryDefinition().getQueryResultsID() == null) {
    rs=cubeQueryExcutorHelper.execute(aggrDefns,new StopSign());
    if (executor.getCubeQueryDefinition().cacheQueryResults()) {
      id=QueryResultIDUtil.nextID();
      FileArchiveWriter writer=new FileArchiveWriter(executor.getContext().getTmpdir() + ""String_Node_Str"");
      AggregationResultSetSaveUtil.save(id,rs,writer);
      writer.finish();
    }
    if (saveToRD) {
      if (id != null) {
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
 else {
        id=QueryResultIDUtil.nextID();
        AggregationResultSetSaveUtil.save(id,rs,executor.getContext().getDocWriter());
      }
    }
  }
 else {
    id=executor.getCubeQueryDefinition().getQueryResultsID();
    rs=AggregationResultSetSaveUtil.load(id,new FileArchiveReader(executor.getContext().getTmpdir() + ""String_Node_Str""),VersionManager.getLatestVersion());
  }
  executor.setQueryResultsId(id);
  return rs;
}",0.9886591060707138
75144,"private Collection getParameterSelectionListForCascadingGroup(IViewerReportDesignHandle design,IViewerReportService service,Map paramValues,InputOptions options) throws ReportServiceException {
  ParameterGroupDefinition group=(ParameterGroupDefinition)parameter.getGroup();
  int index=group.getParameters().indexOf(parameter);
  Object[] groupKeys=new Object[index];
  for (int i=0; i < index; i++) {
    ParameterDefinition def=(ParameterDefinition)group.getParameters().get(i);
    String parameterName=def.getName();
    groupKeys[i]=paramValues.get(parameterName);
    if (def.isRequired() && DataUtil.trimString((String)groupKeys[i]).length() <= 0) {
      groupKeys[i]=service.getParameterDefaultValue(design,parameterName,options);
    }
  }
  return service.getSelectionListForCascadingGroup(design,group.getName(),groupKeys,options);
}","private Collection getParameterSelectionListForCascadingGroup(IViewerReportDesignHandle design,IViewerReportService service,Map paramValues,InputOptions options) throws ReportServiceException {
  ParameterGroupDefinition group=(ParameterGroupDefinition)parameter.getGroup();
  int index=group.getParameters().indexOf(parameter);
  Object[] groupKeys=new Object[index];
  for (int i=0; i < index; i++) {
    ParameterDefinition def=(ParameterDefinition)group.getParameters().get(i);
    groupKeys[i]=paramValues.get(def.getName());
  }
  return service.getSelectionListForCascadingGroup(design,group.getName(),groupKeys,options);
}",0.7195121951219512
75145,"private Collection getParameterSelectionListForCascadingGroup(IViewerReportDesignHandle design,IViewerReportService service,Map paramValues,InputOptions options) throws ReportServiceException {
  ParameterGroupDefinition group=(ParameterGroupDefinition)parameter.getGroup();
  int index=group.getParameters().indexOf(parameter);
  Object[] groupKeys=new Object[index];
  for (int i=0; i < index; i++) {
    ParameterDefinition def=(ParameterDefinition)group.getParameters().get(i);
    String parameterName=def.getName();
    groupKeys[i]=paramValues.get(parameterName);
    if (groupKeys[i] == null) {
      groupKeys[i]=service.getParameterDefaultValue(design,parameterName,options);
    }
  }
  return service.getSelectionListForCascadingGroup(design,group.getName(),groupKeys,options);
}","private Collection getParameterSelectionListForCascadingGroup(IViewerReportDesignHandle design,IViewerReportService service,Map paramValues,InputOptions options) throws ReportServiceException {
  ParameterGroupDefinition group=(ParameterGroupDefinition)parameter.getGroup();
  int index=group.getParameters().indexOf(parameter);
  Object[] groupKeys=new Object[index];
  for (int i=0; i < index; i++) {
    ParameterDefinition def=(ParameterDefinition)group.getParameters().get(i);
    String parameterName=def.getName();
    groupKeys[i]=paramValues.get(parameterName);
    if (def.isRequired() && DataUtil.trimString((String)groupKeys[i]).length() <= 0) {
      groupKeys[i]=service.getParameterDefaultValue(design,parameterName,options);
    }
  }
  return service.getSelectionListForCascadingGroup(design,group.getName(),groupKeys,options);
}",0.9578497251069028
75146,"/** 
 * @param time
 * @return
 */
private String parseQuery(long time){
  SimpleDateFormat formater=new SimpleDateFormat(formatPattern);
  String timestamp=formater.format(new Timestamp(time));
  if (queryForUpdate == null) {
    queryForUpdate=replace(queryTemplate,TS_COLUMN,timestampColumn);
    queryForUpdate=replace(queryForUpdate,TS_FORMAT,formatPattern);
  }
  return replace(queryForUpdate,DATE,timestamp);
}","/** 
 * @param time
 * @return
 */
private String parseQuery(long time){
  SimpleDateFormat formater=new SimpleDateFormat(formatPattern);
  String timestamp=formater.format(new Timestamp(time));
  if (queryForUpdate == null) {
    queryForUpdate=replaceIgnoreCase(queryTemplate,TS_COLUMN,timestampColumn);
    queryForUpdate=replaceIgnoreCase(queryForUpdate,TS_FORMAT,formatPattern);
  }
  return replaceIgnoreCase(queryForUpdate,DATE,timestamp);
}",0.9653579676674364
75147,"/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}","/** 
 * @return
 */
public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.FinanceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.aggregation.TotalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.GroupLevelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptedDSTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.ScriptTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.api.UsesDetailFalseTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ColumnHintTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.ComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DataSetCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DefineDataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.DistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.FilterByRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.GroupOnRowTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.InputParameterTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MaxRowsTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.NestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.SubQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.MultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.binding.newbinding.ColumnBindingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheClobAndBlobTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheComputedColumnTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CachedMultiplePassTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheNestedQueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.CacheSubqueryTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.cache.MemoryCacheTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.CachedResultSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByDistinctValueTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByNumberRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByPositionRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.executor.transform.group.GroupByStringRangeTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ComplexExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.expression.ExpressionCompilerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ExprManagerUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.JointDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ResultMetaDataTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ScriptEvalTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.ConfigFileParserTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.IncreCacheDataSetTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.binding.AggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.document.GroupInfoUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ReportDocumentTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.impl.rd.ViewingTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.DataSourceTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.FeatureTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.regre.SortTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeFeaturesTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.api.CubeIVTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.BufferedRandomAccessObjectTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.CachedDocumentObjectManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.DocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.document.FileDocumentManagerTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.CubeAggregationTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.DimensionKeyTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.LevelMemberTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.TraversalorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.impl.dimension.DimensionTest2.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedPrimitiveDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedRandomAccessFileTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.BufferedStructureArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskIndexTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.DiskSortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.ObjectArrayUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimaryDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.PrimarySortedStackTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.SetUtilTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.data.util.StructureDiskArrayTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.CursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorModelTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.cursor.MirrorCursorNavigatorTest.class);
  suite.addTestSuite(org.eclipse.birt.data.engine.olap.util.OlapExpressionUtilTest.class);
  return suite;
}",0.9885741329186668
75148,"/** 
 * @throws FileNotFoundException
 */
private void createCacheInputStream() throws FileNotFoundException {
  metaInputStream=new BufferedInputStream(new FileInputStream(getMetaCacheFile()),1024);
  rowInputStream=new DataInputStream(new BufferedInputStream(new FileInputStream(getRowCacheFile()),1024));
}","/** 
 * @throws FileNotFoundException
 */
private void createCacheInputStream() throws FileNotFoundException {
  metaInputStream=new BufferedInputStream(new FileInputStream(ResultSetCacheUtil.getMetaFile(context.getTmpdir(),queryResultID)),1024);
  rowInputStream=new DataInputStream(new BufferedInputStream(new FileInputStream(ResultSetCacheUtil.getDataFile(context.getTmpdir(),queryResultID)),1024));
}",0.8050490883590463
75149,"/** 
 * @throws FileNotFoundException
 */
private void createCacheOutputStream() throws FileNotFoundException {
  metaOutputStream=new BufferedOutputStream(new FileOutputStream(getMetaCacheFile()),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(getRowCacheFile()),1024));
  File file=getRowCacheFile();
  file.deleteOnExit();
  file=getMetaCacheFile();
  file.deleteOnExit();
}","/** 
 * @throws FileNotFoundException
 */
private void createCacheOutputStream() throws FileNotFoundException {
  metaOutputStream=new BufferedOutputStream(new FileOutputStream(ResultSetCacheUtil.getMetaFile(context.getTmpdir(),resultService.getQueryResults().getID())),1024);
  rowOutputStream=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(ResultSetCacheUtil.getDataFile(context.getTmpdir(),resultService.getQueryResults().getID())),1024));
  File file=ResultSetCacheUtil.getDataFile(context.getTmpdir(),resultService.getQueryResults().getID());
  file.deleteOnExit();
  file=ResultSetCacheUtil.getMetaFile(context.getTmpdir(),resultService.getQueryResults().getID());
  file.deleteOnExit();
}",0.670774647887324
75150,"HyperlinkInfo(int type,String url){
  this.type=type;
  this.url=url;
}","HyperlinkInfo(int type,String url,String bookmark){
  this.type=type;
  this.url=url;
  this.mark=bookmark;
}",0.7888888888888889
75151,"protected void createRoot(){
  root=new PageArea(pageContent);
  page=(PageArea)root;
  int pageWidth=getDimensionValue(pageContent.getPageWidth());
  int pageHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageWidth <= 0 || pageHeight <= 0) {
    pageWidth=DEFAULT_PAGE_WIDTH;
    pageHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageWidth);
  page.setHeight(pageHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  int rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageWidth);
  int rootTop=getDimensionValue(pageContent.getMarginTop(),pageWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageHeight) {
    rootBottom=0;
  }
  pageRoot.setWidth(pageWidth - rootLeft - rootRight);
  pageRoot.setHeight(pageHeight - rootTop - rootBottom);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
}","protected void createRoot(){
  root=new PageArea(pageContent);
  page=(PageArea)root;
  int pageWidth=getDimensionValue(pageContent.getPageWidth());
  int pageHeight=getDimensionValue(pageContent.getPageHeight());
  if (pageWidth <= 0) {
    pageWidth=DEFAULT_PAGE_WIDTH;
  }
  if (pageHeight <= 0) {
    pageHeight=DEFAULT_PAGE_HEIGHT;
  }
  page.setWidth(pageWidth);
  page.setHeight(pageHeight);
  ContainerArea pageRoot=new LogicContainerArea(report);
  int rootLeft=getDimensionValue(pageContent.getMarginLeft(),pageWidth);
  int rootTop=getDimensionValue(pageContent.getMarginTop(),pageWidth);
  rootLeft=Math.max(0,rootLeft);
  rootLeft=Math.min(pageWidth,rootLeft);
  rootTop=Math.max(0,rootTop);
  rootTop=Math.min(pageHeight,rootTop);
  pageRoot.setPosition(rootLeft,rootTop);
  int rootRight=getDimensionValue(pageContent.getMarginRight(),pageWidth);
  int rootBottom=getDimensionValue(pageContent.getMarginBottom(),pageWidth);
  rootRight=Math.max(0,rootRight);
  rootBottom=Math.max(0,rootBottom);
  if (rootLeft + rootRight > pageWidth) {
    rootRight=0;
  }
  if (rootTop + rootBottom > pageHeight) {
    rootBottom=0;
  }
  pageRoot.setWidth(pageWidth - rootLeft - rootRight);
  pageRoot.setHeight(pageHeight - rootTop - rootBottom);
  page.setRoot(pageRoot);
  int headerHeight=getDimensionValue(pageContent.getHeaderHeight(),pageRoot.getHeight());
  int headerWidth=pageRoot.getWidth();
  headerHeight=Math.max(0,headerHeight);
  headerHeight=Math.min(pageRoot.getHeight(),headerHeight);
  ContainerArea header=new LogicContainerArea(report);
  header.setHeight(headerHeight);
  header.setWidth(headerWidth);
  header.setPosition(0,0);
  pageRoot.addChild(header);
  page.setHeader(header);
  int footerHeight=getDimensionValue(pageContent.getFooterHeight(),pageRoot.getHeight());
  int footerWidth=pageRoot.getWidth();
  footerHeight=Math.max(0,footerHeight);
  footerHeight=Math.min(pageRoot.getHeight() - headerHeight,footerHeight);
  ContainerArea footer=new LogicContainerArea(report);
  footer.setHeight(footerHeight);
  footer.setWidth(footerWidth);
  footer.setPosition(0,pageRoot.getHeight() - footerHeight);
  pageRoot.addChild(footer);
  page.setFooter(footer);
  ContainerArea body=new LogicContainerArea(report);
  int bodyLeft=getDimensionValue(pageContent.getLeftWidth(),pageRoot.getWidth());
  bodyLeft=Math.max(0,bodyLeft);
  bodyLeft=Math.min(pageRoot.getWidth(),bodyLeft);
  body.setPosition(bodyLeft,headerHeight);
  int bodyRight=getDimensionValue(pageContent.getRightWidth(),pageRoot.getWidth());
  bodyRight=Math.max(0,bodyRight);
  bodyRight=Math.min(pageRoot.getWidth() - bodyLeft,bodyRight);
  body.setWidth(pageRoot.getWidth() - bodyLeft - bodyRight);
  body.setHeight(pageRoot.getHeight() - headerHeight - footerHeight);
  page.setBody(body);
  pageRoot.addChild(body);
}",0.9914681834340562
75152,"/** 
 * Save the current list in memory to disk.
 * @throws FileNotFoundException
 * @throws IOException
 */
private void saveToDisk(){
  try {
    File cacheFile=null;
    if (currentCacheNo < fileList.size()) {
      cacheFile=(File)(fileList.get(currentCacheNo));
    }
 else {
      cacheFile=getCacheFile(this.currentCacheNo);
      fileList.add(cacheFile);
    }
    FileOutputStream fos=new FileOutputStream(cacheFile);
    DataOutputStream oos=new DataOutputStream(new BufferedOutputStream(fos));
    writeList(oos,currentCache);
    oos.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
}","/** 
 * Save the current list in memory to disk.
 * @throws FileNotFoundException
 * @throws IOException
 */
private void saveToDisk(){
  try {
    File cacheFile=null;
    if (currentCacheNo < fileList.size()) {
      cacheFile=(File)(fileList.get(currentCacheNo));
    }
 else {
      cacheFile=getCacheFile(this.currentCacheNo);
      fileList.add(cacheFile);
    }
    FileOutputStream fos=new FileOutputStream(cacheFile);
    DataOutputStream oos=new DataOutputStream(new BufferedOutputStream(fos));
    writeList(oos,currentCache);
    oos.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
}",0.9671916010498688
75153,"/** 
 * Load the data of currect no from disk.
 */
private void loadFromDisk(){
  try {
    FileInputStream fis=new FileInputStream(getCacheFile(this.currentCacheNo));
    DataInputStream ois=new DataInputStream(new BufferedInputStream(fis));
    this.currentCache=readList(ois);
    ois.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
    e.printStackTrace();
  }
}","/** 
 * Load the data of currect no from disk.
 */
private void loadFromDisk(){
  try {
    FileInputStream fis=new FileInputStream(getCacheFile(this.currentCacheNo));
    DataInputStream ois=new DataInputStream(new BufferedInputStream(fis));
    this.currentCache=readList(ois);
    ois.close();
  }
 catch (  FileNotFoundException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
catch (  IOException e) {
    logger.severe(""String_Node_Str"" + e.toString());
  }
}",0.9503968253968254
75154,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
    }
 catch (    IOException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
}",0.9706190975865688
75155,"/** 
 * @param streamType
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public OutputStream getOutStream(int streamType,int streamPos,int streamScope) throws DataException {
  StreamID streamID=getStreamID(streamType,streamPos,streamScope);
  if (!useTempStream(streamType)) {
    RAOutputStream outputStream=context.getOutputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        outputStream.seek(outputStream.length());
        outputStream.writeInt(0);
        outputStream.writeInt(0);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    return outputStream;
  }
 else {
    int sType=DataEngineContext.META_STREAM;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM || streamType == DataEngineContext.DATASET_META_STREAM)     sType=DataEngineContext.DATASET_DATA_STREAM;
    return this.getTempStreamManager(getStreamID(sType,streamPos,streamScope)).getOutputStream(streamType);
  }
}","/** 
 * @param streamType
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public OutputStream getOutStream(int streamType,int streamPos,int streamScope) throws DataException {
  StreamID streamID=getStreamID(streamType,streamPos,streamScope);
  if (!useTempStream(streamType)) {
    RAOutputStream outputStream=context.getOutputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        outputStream.seek(outputStream.length());
        outputStream.writeInt(0);
        outputStream.writeInt(0);
      }
 catch (      IOException e) {
        logger.log(Level.FINE,e.getMessage(),e);
      }
    }
    return outputStream;
  }
 else {
    int sType=DataEngineContext.META_STREAM;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM || streamType == DataEngineContext.DATASET_META_STREAM)     sType=DataEngineContext.DATASET_DATA_STREAM;
    return this.getTempStreamManager(getStreamID(sType,streamPos,streamScope)).getOutputStream(streamType);
  }
}",0.9752212389380532
75156,"private RAInputStream createInputStream(StreamID streamID,int streamType) throws DataException {
  if (!useTempStream(streamType)) {
    RAInputStream stream=(RAInputStream)context.getInputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        stream.readInt();
        int size=stream.readInt();
        stream.skip(size);
        stream.readInt();
        stream.readInt();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    return stream;
  }
 else {
    return this.getMetaManager(streamID,streamType).getRAInputStream(streamType);
  }
}","private RAInputStream createInputStream(StreamID streamID,int streamType) throws DataException {
  if (!useTempStream(streamType)) {
    RAInputStream stream=(RAInputStream)context.getInputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        stream.readInt();
        int size=stream.readInt();
        stream.skip(size);
        stream.readInt();
        stream.readInt();
      }
 catch (      IOException e) {
        logger.log(Level.FINE,e.getMessage(),e);
      }
    }
    return stream;
  }
 else {
    return this.getMetaManager(streamID,streamType).getRAInputStream(streamType);
  }
}",0.9620081411126188
75157,"/** 
 * @return
 */
int getVersion(){
  int version=this.getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
    is.close();
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return version;
}","/** 
 * @return
 */
int getVersion(){
  int version=this.getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
    is.close();
  }
 catch (  DataException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return version;
}",0.8042704626334519
75158,"/** 
 * @param rowId
 * @param filterHint
 */
public void write(int rowId){
  try {
    IOUtil.writeInt(rowDos,rowId);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * @param rowId
 * @param filterHint
 */
public void write(int rowId){
  try {
    IOUtil.writeInt(rowDos,rowId);
  }
 catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.8526315789473684
75159,"public long getFilePointer(){
  try {
    return delegate.getFilePointer();
  }
 catch (  IOException e) {
    e.printStackTrace();
    return -1;
  }
}","public long getFilePointer(){
  try {
    return delegate.getFilePointer();
  }
 catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
    return -1;
  }
}",0.8641975308641975
75160,"/** 
 * Gets the FilePointer attribute of the BufferedRandomAccessFile object
 * @return The FilePointer value
 */
public long getFilePointer(){
  try {
    return delegate.getFilePointer();
  }
 catch (  IOException e) {
    e.printStackTrace();
    return -1;
  }
}","/** 
 * Gets the FilePointer attribute of the BufferedRandomAccessFile object
 * @return The FilePointer value
 */
public long getFilePointer(){
  try {
    return delegate.getFilePointer();
  }
 catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
    return -1;
  }
}",0.8989169675090253
75161,"public void finalize(){
  try {
    clearDiskFile();
  }
 catch (  IOException e) {
    e.printStackTrace();
    logger.log(Level.SEVERE,e.toString(),e);
  }
}","public void finalize(){
  try {
    clearDiskFile();
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,e.toString(),e);
  }
}",0.9146757679180888
75162,"public void finalize(){
  try {
    clearDiskFile();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void finalize(){
  try {
    clearDiskFile();
  }
 catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.8225806451612904
75163,"public void finalize(){
  try {
    clearTempDir();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void finalize(){
  try {
    clearTempDir();
  }
 catch (  IOException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.8211382113821138
75164,"public void write(BufferedRandomAccessFile file,Object obj) throws IOException {
  try {
    file.writeBigDecimal((BigDecimal)obj);
  }
 catch (  ClassCastException ce) {
    ce.printStackTrace();
  }
}","public void write(BufferedRandomAccessFile file,Object obj) throws IOException {
  try {
    file.writeBigDecimal((BigDecimal)obj);
  }
 catch (  ClassCastException ce) {
    logger.log(Level.FINE,ce.getMessage(),ce);
  }
}",0.8611764705882353
75165,"/** 
 * @param schemaRs:The ResultSet containing the List of schema
 * @return A List of schema names
 */
private ArrayList getAllSchemaList(ResultSet schemaRs){
  if (schemaRs == null) {
    return null;
  }
  ArrayList allSchemas=new ArrayList();
  try {
    while (schemaRs.next()) {
      allSchemas.add(schemaRs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
  return allSchemas;
}","/** 
 * @param schemaRs:The ResultSet containing the List of schema
 * @return A List of schema names
 */
private ArrayList getAllSchemaList(ResultSet schemaRs){
  if (schemaRs == null) {
    return null;
  }
  ArrayList allSchemas=new ArrayList();
  try {
    while (schemaRs.next()) {
      allSchemas.add(schemaRs.getString(""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return allSchemas;
}",0.9373601789709172
75166,"/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  tableList=new ArrayList();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=SQLUtility.getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      int numberOfTable;
      Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
      if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA)) {
        numberOfTable=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
      }
 else {
        numberOfTable=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA;
        preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,numberOfTable);
      }
      int count=0;
      while (tablesRs.next() && count < numberOfTable) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(getTableNameWithSchema(null,tableName),tableName,dbType,image);
        tableList.add(dbObject);
        count++;
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * if the schema is not support, populate the table list
 */
protected void populateTableList(){
  if (rootNode != null) {
    removeTreeItem(rootNode);
  }
  ResultSet tablesRs=null;
  ArrayList procedureRs=null;
  String catalogName=metaDataProvider.getCatalog();
  tableList=new ArrayList();
  String namePattern=null;
  String[] tableType=null;
  cachedSearchTxt=searchTxt.getText();
  namePattern=SQLUtility.getTailoredSearchText(searchTxt.getText());
  String dbtype=getSelectedDbType();
  cachedDbType=dbtype;
  if (dbtype != null) {
    if (DbType.TABLE_STRING.equalsIgnoreCase(dbtype) || DbType.VIEW_STRING.equalsIgnoreCase(dbtype)) {
      tableType=new String[]{dbtype};
    }
  }
  if (metaDataProvider.isProcedureSupported())   procedureRs=metaDataProvider.getAllProcedure(catalogName,null,namePattern);
  if (!DbType.PROCEDURE_STRING.equalsIgnoreCase(dbtype))   tablesRs=metaDataProvider.getAlltables(catalogName,null,namePattern,tableType);
  if (tablesRs == null && procedureRs == null) {
    return;
  }
  try {
    Image image=tableImage;
    if (tablesRs != null) {
      int numberOfTable;
      Preferences preferences=JdbcPlugin.getDefault().getPluginPreferences();
      if (preferences.contains(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA)) {
        numberOfTable=preferences.getInt(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA);
      }
 else {
        numberOfTable=DateSetPreferencePage.DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA;
        preferences.setValue(DateSetPreferencePage.USER_MAX_NUM_OF_TABLE_EACH_SCHEMA,numberOfTable);
      }
      int count=0;
      while (tablesRs.next() && count < numberOfTable) {
        String tableName=tablesRs.getString(""String_Node_Str"");
        String type=tablesRs.getString(""String_Node_Str"");
        if (type.equalsIgnoreCase(""String_Node_Str""))         continue;
        int dbType=DbObject.TABLE_TYPE;
        if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=tableImage;
          dbType=DbObject.TABLE_TYPE;
        }
 else         if (type.equalsIgnoreCase(""String_Node_Str"")) {
          image=viewImage;
          dbType=DbObject.VIEW_TYPE;
        }
        DbObject dbObject=new DbObject(getTableNameWithSchema(null,tableName),tableName,dbType,image);
        tableList.add(dbObject);
        count++;
      }
    }
    if (needToCreateProcedureNode(dbtype,procedureRs)) {
      String fullyQualifiedTableName=""String_Node_Str"";
      DbObject dbObject=new DbObject(fullyQualifiedTableName,""String_Node_Str"",DbObject.PROCEDURE_TYPE,tableImage);
      tableList.add(dbObject);
    }
    TreeItem item[]=Utility.createTreeItems(rootNode,tableList,SWT.NONE,null);
    if (item != null && item.length > 0)     availableDbObjectsTree.showItem(item[0]);
  }
 catch (  Exception e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
}",0.9901304194571732
75167,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=null;
      try {
        meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      }
 catch (      SQLException e) {
        try {
          meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).executeQuery().getMetaData();
        }
 catch (        Exception ex) {
          meta=null;
        }
      }
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=null;
      try {
        meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      }
 catch (      SQLException e) {
        try {
          meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).executeQuery().getMetaData();
        }
 catch (        Exception ex) {
          meta=null;
        }
      }
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
}",0.986328125
75168,"/** 
 * @param schemaName
 * @return
 */
private boolean containsTableInSchema(String schemaName){
  ResultSet rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaName,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  boolean hasNonSystemTable=false;
  if (rs != null) {
    try {
      while (rs.next()) {
        if (!""String_Node_Str"".equalsIgnoreCase(rs.getString(""String_Node_Str""))) {
          hasNonSystemTable=true;
          break;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  if (hasNonSystemTable) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * @param schemaName
 * @return
 */
private boolean containsTableInSchema(String schemaName){
  ResultSet rs=metaDataProvider.getAlltables(metaDataProvider.getCatalog(),schemaName,""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""});
  boolean hasNonSystemTable=false;
  if (rs != null) {
    try {
      while (rs.next()) {
        if (!""String_Node_Str"".equalsIgnoreCase(rs.getString(""String_Node_Str""))) {
          hasNonSystemTable=true;
          break;
        }
      }
    }
 catch (    SQLException e) {
      logger.log(Level.FINE,e.getMessage(),e);
    }
  }
  if (hasNonSystemTable) {
    return true;
  }
 else {
    return false;
  }
}",0.8381240544629349
75169,"protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width,height,textStyle.getFontInfo(),textStyle.getColor());
}","protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width + 1f,height,textStyle.getFontInfo(),textStyle.getColor());
}",0.9886621315192744
75170,"public void onPage(long pageNumber,Object context){
  if (context instanceof HTMLLayoutContext) {
    HTMLLayoutContext htmlContext=(HTMLLayoutContext)context;
    document.setPageCount(pageNumber);
    boolean reportFinished=htmlContext.isFinished();
    if (reportFinished) {
      writeTotalPage(pageNumber);
      close();
      return;
    }
    boolean checkpoint=false;
    if (pageNumber == 1 || pageNumber == 10 || pageNumber == 50 || pageNumber % 100 == 0) {
      checkpoint=true;
    }
    ArrayList pageHint=htmlContext.getPageHint();
    PageHint hint=new PageHint(pageNumber,pageOffset);
    for (int i=0; i < pageHint.size(); i++) {
      IContent[] range=(IContent[])pageHint.get(i);
      PageSection section=createPageSection(range[0],range[1]);
      hint.addSection(section);
    }
    hint.addUnresolvedRowHints(htmlContext.getUnresolvedRowHints());
    writePageHint(hint);
    if (checkpoint) {
      try {
        IDocArchiveWriter archive=document.getArchive();
        document.saveCoreStreams();
        archive.flush();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (pageHandler != null) {
      if (!htmlContext.getCancelFlag()) {
        IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,pageNumber,false);
        pageHandler.onPage((int)pageNumber,checkpoint,docInfo);
      }
    }
  }
}","public void onPage(long pageNumber,Object context){
  if (context instanceof HTMLLayoutContext) {
    HTMLLayoutContext htmlContext=(HTMLLayoutContext)context;
    document.setPageCount(pageNumber);
    boolean reportFinished=htmlContext.isFinished();
    if (reportFinished) {
      writeTotalPage(pageNumber);
      close();
      return;
    }
    boolean checkpoint=false;
    if (pageNumber == 1 || pageNumber == 10 || pageNumber == 50 || pageNumber % 100 == 0) {
      checkpoint=true;
    }
    ArrayList pageHint=htmlContext.getPageHint();
    PageHint hint=new PageHint(pageNumber,pageOffset);
    for (int i=0; i < pageHint.size(); i++) {
      IContent[] range=(IContent[])pageHint.get(i);
      PageSection section=createPageSection(range[0],range[1]);
      hint.addSection(section);
    }
    hint.addUnresolvedRowHints(htmlContext.getUnresolvedRowHints());
    writePageHint(hint);
    if (checkpoint) {
      try {
        IDocArchiveWriter archive=document.getArchive();
        writeTotalPage(pageNumber);
        document.saveCoreStreams();
        archive.flush();
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,""String_Node_Str"",e);
      }
    }
    if (pageHandler != null) {
      if (!htmlContext.getCancelFlag()) {
        IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,pageNumber,false);
        pageHandler.onPage((int)pageNumber,checkpoint,docInfo);
      }
    }
  }
}",0.9873595505617978
75171,"private void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (null == color) {
    return;
  }
  y=transformY(y,height);
  cbUnder.saveState();
  cbUnder.setColorFill(color);
  cbUnder.rectangle(x,y,width,height);
  cbUnder.fill();
  cbUnder.restoreState();
}","protected void drawBackgroundColor(Color color,float x,float y,float width,float height){
  if (null == color) {
    return;
  }
  y=transformY(y,height);
  cbUnder.saveState();
  cbUnder.setColorFill(color);
  cbUnder.rectangle(x,y,width,height);
  cbUnder.fill();
  cbUnder.restoreState();
}",0.9794520547945206
75172,"private void drawTotalPage(String text,float textX,float textY,float width,float height,TextStyle textInfo){
  drawText(text,textX,textY,width,height,textInfo.getFontInfo(),textInfo.getLetterSpacing(),textInfo.getWordSpacing(),textInfo.getColor(),textInfo.isLinethrough(),textInfo.isOverline(),textInfo.isUnderline(),textInfo.getAlign(),true);
}","public void drawTotalPage(String text,int textX,int textY,int width,int height,TextStyle textInfo){
  if (totalPageTemplate != null) {
    isTotalPage=true;
    drawText(text,textX,textY,width,height,textInfo);
  }
}",0.4420677361853832
75173,"public void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  cbUnder.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=cbUnder.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      cbUnder.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=cbUnder.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          cbUnder.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          cbUnder.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=cbUnder.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=cbUnder.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              cbUnder.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              cbUnder.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  cbUnder.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,String repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  cbUnder.saveState();
  Image img=null;
  try {
    img=Image.getInstance(imageUrl);
    if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,img.scaledWidth());
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,img.scaledHeight());
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=cbUnder.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),translationX,translationY);
      cbUnder.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > img.scaledWidth()) {
        if (height - absPosY > img.scaledHeight()) {
          template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
        }
 else {
          template=cbUnder.createTemplate(img.scaledWidth(),height);
          template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height);
        }
      }
      while (remainX > 0) {
        if (remainX < img.scaledWidth()) {
          if (height - absPosY > img.scaledHeight()) {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - img.scaledHeight());
          }
 else {
            PdfTemplate templateX=cbUnder.createTemplate(remainX,height);
            templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + height - absPosY);
            cbUnder.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > img.scaledHeight())           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - img.scaledHeight());
 else           cbUnder.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=img.scaledWidth();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > img.scaledHeight()) {
        template=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        if (remainY < img.scaledHeight()) {
          PdfTemplate templateY=cbUnder.createTemplate(width - absPosX > img.scaledWidth() ? img.scaledWidth() : width - absPosX,remainY);
          templateY.addImage(img,width > img.scaledWidth() ? img.scaledWidth() : width - absPosX,0,0,img.scaledHeight(),0,-(img.scaledHeight() - remainY));
          cbUnder.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          cbUnder.addTemplate(template,x + absPosX,y - height + remainY - img.scaledHeight());
          remainY-=img.scaledHeight();
        }
      }
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(repeat)) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width > img.scaledWidth() && height > img.scaledHeight()) {
        template=cbUnder.createTemplate(img.scaledWidth(),img.scaledHeight());
        template.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < img.scaledHeight()) {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateXY=cbUnder.createTemplate(remainX,remainY);
              templateXY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=cbUnder.createTemplate(img.scaledWidth(),remainY);
              templateY.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,-img.scaledHeight() + remainY);
              cbUnder.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=img.scaledWidth();
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < img.scaledWidth()) {
              PdfTemplate templateX=cbUnder.createTemplate(remainX,img.scaledHeight());
              templateX.addImage(img,img.scaledWidth(),0,0,img.scaledHeight(),0,0);
              cbUnder.addTemplate(templateX,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX=0;
            }
 else {
              cbUnder.addTemplate(template,x + width - remainX,y - height + remainY - img.scaledHeight());
              remainX-=img.scaledWidth();
            }
          }
          remainY-=img.scaledHeight();
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  cbUnder.restoreState();
}",0.9989021197533992
75174,"private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align,boolean isTotalPage){
  PdfContentByte currentContentByte=isTotalPage ? totalPageTemplate : contentByte;
  float containerHeight=isTotalPage ? totalPageTemplate.getHeight() : pageHeight;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  currentContentByte.setCharacterSpacing(characterSpacing);
  currentContentByte.setWordSpacing(wordSpacing);
  float baseline=convertToPoint(fontInfo.getBaseline());
  float transformedY=transformY(textY,baseline,containerHeight);
  placeText(currentContentByte,fontInfo,textX,transformedY);
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}","private void drawText(String text,float textX,float textY,FontInfo fontInfo,float characterSpacing,float wordSpacing,Color color,CSSValue align){
  PdfContentByte currentContentByte=isTotalPage ? totalPageTemplate : contentByte;
  float containerHeight=isTotalPage ? totalPageTemplate.getHeight() : pageHeight;
  isTotalPage=false;
  currentContentByte.saveState();
  currentContentByte.beginText();
  if (null != color) {
    currentContentByte.setColorFill(color);
    currentContentByte.setColorStroke(color);
  }
  BaseFont font=fontInfo.getBaseFont();
  float fontSize=fontInfo.getFontSize();
  currentContentByte.setFontAndSize(font,fontSize);
  currentContentByte.setCharacterSpacing(characterSpacing);
  currentContentByte.setWordSpacing(wordSpacing);
  placeText(currentContentByte,fontInfo,textX,transformY(textY,0,containerHeight));
  if ((font.getFontType() == BaseFont.FONT_TYPE_TTUNI) && IStyle.JUSTIFY_VALUE.equals(align) && wordSpacing > 0) {
    int idx=text.indexOf(' ');
    if (idx >= 0) {
      float spaceCorrection=-wordSpacing * 1000 / fontSize;
      PdfTextArray textArray=new PdfTextArray(text.substring(0,idx));
      int lastIdx=idx;
      while ((idx=text.indexOf(' ',lastIdx + 1)) >= 0) {
        textArray.add(spaceCorrection);
        textArray.add(text.substring(lastIdx,idx));
        lastIdx=idx;
      }
      textArray.add(spaceCorrection);
      textArray.add(text.substring(lastIdx));
      currentContentByte.showText(textArray);
    }
 else {
      currentContentByte.showText(text);
    }
  }
 else {
    currentContentByte.showText(text);
  }
  currentContentByte.endText();
  currentContentByte.restoreState();
}",0.9372801875732708
75175,"/** 
 * Draws a line from the start position to the end position with the given linewidth, color, and style at the given pdf layer.
 * @param startX the start X coordinate of the line
 * @param startY the start Y coordinate of the line
 * @param endX the end X coordinate of the line
 * @param endY the end Y coordinate of the line
 * @param width the lineWidth
 * @param color the color of the line
 * @param lineStyle the given line style
 * @param contentByte the given pdf layer
 */
private void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle,PdfContentByte contentByte){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}","/** 
 * Draws a line with the line-style specified in advance from the start position to the end position with the given linewidth, color, and style at the given pdf layer. If the line-style is NOT set before invoking this method, ""solid"" will be used as the default line-style.
 * @param startX the start X coordinate of the line.
 * @param startY the start Y coordinate of the line.
 * @param endX the end X coordinate of the line.
 * @param endY the end Y coordinate of the line.
 * @param width the lineWidth
 * @param color the color of the line.
 * @param lineStyle the style of the line.
 */
protected void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  contentByte.saveState();
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(3 * width,2 * width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    contentByte.setLineDash(width,width,0f);
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
 else {
    drawRawLine(startX,startY,endX,endY,width,color,contentByte);
  }
  contentByte.restoreState();
}",0.9082224496758784
75176,"public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer){
  float ratio=PDFConstants.LAYOUT_TO_PDF_RATIO;
  this.pageHeight=pageHeight / ratio;
  this.writer=writer;
  try {
    Rectangle pageSize=new Rectangle(pageWidth / ratio,pageHeight / ratio);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPage(int pageWidth,int pageHeight,Document document,PdfWriter writer){
  super(pageWidth,pageHeight);
  this.writer=writer;
  try {
    Rectangle pageSize=new Rectangle(this.pageWidth,this.pageHeight);
    document.setPageSize(pageSize);
    if (!document.isOpen())     document.open();
 else     document.newPage();
    this.contentByte=writer.getDirectContent();
    this.cbUnder=writer.getDirectContentUnder();
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.7447392497712717
75177,"private void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
  cbUnder.clip();
  cbUnder.rectangle(startX,startY,width,height);
  cbUnder.newPath();
}","protected void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
  cbUnder.clip();
  cbUnder.rectangle(startX,startY,width,height);
  cbUnder.newPath();
}",0.9797979797979798
75178,"private String capitalize(String text){
  HashSet splitChar=new HashSet();
  splitChar.add(new Character(' '));
  splitChar.add(new Character((char)0x0A));
  char[] array=text.toCharArray();
  int index=0;
  while (index < array.length) {
    Character c=new Character(text.charAt(index));
    while (splitChar.contains(c)) {
      index++;
      if (index == array.length)       return new String(array);
      c=new Character(text.charAt(index));
    }
    array[index]=Character.toUpperCase(array[index]);
    while (!splitChar.contains(c)) {
      index++;
      if (index == array.length)       break;
      c=new Character(text.charAt(index));
    }
  }
  return new String(array);
}","private String capitalize(String text){
  boolean capitalizeNextChar=true;
  char[] array=text.toCharArray();
  for (int i=0; i < array.length; i++) {
    Character c=new Character(text.charAt(i));
    if (splitChar.contains(c))     capitalizeNextChar=true;
 else     if (capitalizeNextChar) {
      array[i]=Character.toUpperCase(array[i]);
      capitalizeNextChar=false;
    }
  }
  return new String(array);
}",0.20508166969147
75179,"private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        AbstractArea con=(AbstractArea)createInlineContainer(content,false,false);
        con.setWidth(0);
        if (null == chunk.getFontInfo()) {
          IStyle style=content.getComputedStyle();
          con.setHeight(getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE)) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
 else {
          con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      Dimension d=new Dimension(0,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      IArea builtArea=buildArea(""String_Node_Str"",content,chunk.getFontInfo(),d);
      PDFTextLM.this.addTextLine(builtArea);
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm;
    if (ENABLE_HYPHENATION) {
      hm=new DefaultHyphenationManager();
    }
 else {
      hm=new DummyHyphenationManager();
    }
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}","private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        AbstractArea con=(AbstractArea)createInlineContainer(content,false,false);
        con.setWidth(0);
        if (null == chunk.getFontInfo()) {
          IStyle style=content.getComputedStyle();
          con.setHeight(getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE)) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
 else {
          con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm;
    if (ENABLE_HYPHENATION) {
      hm=new DefaultHyphenationManager();
    }
 else {
      hm=new DummyHyphenationManager();
    }
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}",0.8214429665457477
75180,"public InputStream getBinaryStream() throws SQLException {
  init();
  return new ByteArrayInputStream(this.blobContent);
}","public InputStream getBinaryStream(long pos,long length) throws SQLException {
  throw new SQLException(""String_Node_Str"");
}",0.6370967741935484
75181,"private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        AbstractArea con=(AbstractArea)createInlineContainer(content,false,false);
        con.setWidth(0);
        if (null == chunk.getFontInfo()) {
          IStyle style=content.getComputedStyle();
          con.setHeight(getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE)) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
 else {
          con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm;
    if (ENABLE_HYPHENATION) {
      hm=new DefaultHyphenationManager();
    }
 else {
      hm=new DummyHyphenationManager();
    }
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}","private void handleNext(){
  int freeSpace=PDFTextLM.this.getFreeSpace();
  if (isNew || currentPos == chunk.getText().length()) {
    if (cg.hasMore()) {
      chunk=cg.getNext();
      if (chunk == Chunk.HARD_LINE_BREAK) {
        currentPos=chunk.getText().length();
        AbstractArea con=(AbstractArea)createInlineContainer(content,false,false);
        con.setWidth(0);
        if (null == chunk.getFontInfo()) {
          IStyle style=content.getComputedStyle();
          con.setHeight(getDimensionValue(style.getProperty(StyleConstants.STYLE_FONT_SIZE)) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
 else {
          con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
        }
        PDFTextLM.this.addSpaceHolder(con);
        PDFTextLM.this.newLine();
        vestigeIndex=-1;
        return;
      }
      currentPos=0;
      vestigeIndex=-1;
      vestigeLength=0;
      wr=new ICUWordRecognizer(chunk.getText(),context.getLocale());
    }
 else {
      return;
    }
  }
  if (isNew) {
    isNew=false;
    if (isInline) {
      AbstractArea con=(AbstractArea)createInlineContainer(content,true,false);
      con.setWidth(leftBorder + leftPadding);
      con.setHeight((int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO) + topBorder + topPadding+ bottomBorder+ bottomPadding);
      PDFTextLM.this.addSpaceHolder(con);
      leftSpaceHolder=leftMargin + leftBorder + leftPadding;
      freeSpace-=leftSpaceHolder;
    }
  }
  String str=null;
  Word currentWord=null;
  if (-1 == vestigeIndex) {
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      return;
    }
    str=currentWord.getValue();
    areaStartPos=chunk.getOffset() + currentWord.getStart();
  }
 else {
    str=chunk.getText().substring(vestigeIndex,vestigeIndex + vestigeLength);
    areaStartPos=chunk.getOffset() + vestigeIndex;
  }
  int prevAreaWidth=0;
  int areaWidth=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
  if (isInline) {
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  while (freeSpace >= areaWidth) {
    currentPos+=str.length();
    currentWord=wr.getNextWord();
    if (null == currentWord) {
      str=null;
      break;
    }
    str=currentWord.getValue();
    prevAreaWidth=areaWidth;
    areaWidth+=(int)(chunk.getFontInfo().getWordWidth(chunk.getText().substring(currentPos,currentPos + str.length())) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length() + wordSpacing;
    if (isAtLast(chunk.getOffset() + currentPos + str.length())) {
      rightSpaceHolder=rightMargin + rightBorder + rightPadding;
      freeSpace-=rightSpaceHolder;
    }
  }
  int length=chunk.getText().length();
  if (currentPos == length) {
    Dimension d=new Dimension(areaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),chunk.getText().length());
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    vestigeIndex=-1;
    vestigeLength=0;
    return;
  }
  if (maxLineSpace < chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO + letterSpacing * str.length() + wordSpacing) {
    if (0 == str.length()) {
      vestigeIndex=-1;
      vestigeLength=0;
      return;
    }
    IHyphenationManager hm;
    if (ENABLE_HYPHENATION) {
      hm=new DefaultHyphenationManager();
    }
 else {
      hm=new DummyHyphenationManager();
    }
    Hyphenation hyph=hm.getHyphenation(str);
    int endHyphenIndex=hyphen(0,freeSpace - prevAreaWidth,hyph,chunk.getFontInfo());
    if (endHyphenIndex == 0) {
      if (nothingSplitted) {
        str=hyph.getHyphenText(0,endHyphenIndex + 1);
        addByForce=true;
        nothingSplitted=false;
      }
 else {
        nothingSplitted=true;
        vestigeIndex=currentPos;
        vestigeLength=(null == currentWord) ? vestigeLength : currentWord.getLength();
        if (0 == prevAreaWidth)         return;
        Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
        String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
        IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
        PDFTextLM.this.addTextLine(builtArea);
        PDFTextLM.this.newLine();
        return;
      }
    }
 else {
      str=hyph.getHyphenText(0,endHyphenIndex);
    }
    currentPos+=str.length();
    vestigeIndex=currentPos;
    vestigeLength=(null == currentWord) ? vestigeLength - str.length() : currentWord.getLength() - str.length();
    Dimension d=null;
    if (addByForce) {
      d=new Dimension(freeSpace,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      addByForce=false;
    }
 else {
      d=new Dimension(prevAreaWidth + (int)(chunk.getFontInfo().getWordWidth(str) * PDFConstants.LAYOUT_TO_PDF_RATIO) + letterSpacing * str.length(),(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    }
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),vestigeIndex);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    return;
  }
 else {
    Dimension d=new Dimension(prevAreaWidth,(int)(chunk.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
    String originalText=chunk.getText().substring(areaStartPos - chunk.getOffset(),currentPos);
    IArea builtArea=buildArea(getReverseText(originalText),content,chunk.getFontInfo(),d);
    PDFTextLM.this.addTextLine(builtArea);
    PDFTextLM.this.newLine();
    vestigeIndex=(null == currentWord) ? -1 : currentWord.getStart();
    vestigeLength=(null == currentWord) ? 0 : currentWord.getLength();
    return;
  }
}",0.9961953075459734
75182,"/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  ParameterAccessor.setClean(request);
  __initParameters(request);
}","/** 
 * Init the bean.
 * @param request
 * @throws Exception
 */
protected void __init(HttpServletRequest request) throws Exception {
  if (ParameterAccessor.isGetImageOperator(request)) {
    return;
  }
  this.category=""String_Node_Str"";
  this.masterPageContent=ParameterAccessor.isMasterPageContent(request);
  this.isDesigner=ParameterAccessor.isDesigner(request);
  this.bookmark=ParameterAccessor.getBookmark(request);
  this.isToc=ParameterAccessor.isToc(request);
  this.reportPage=ParameterAccessor.getPage(request);
  this.reportPageRange=ParameterAccessor.getPageRange(request);
  this.action=ParameterAccessor.getAction(request);
  if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(request.getServletPath()) || IBirtConstants.SERVLET_PATH_DOWNLOAD.equalsIgnoreCase(request.getServletPath())) {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,true);
  }
 else {
    this.reportDocumentName=ParameterAccessor.getReportDocument(request,null,false);
  }
  this.reportDesignName=ParameterAccessor.getReport(request,null);
  this.format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.ACTION_PRINT.equalsIgnoreCase(action)) {
    if (ParameterAccessor.isSupportedPrintOnServer)     this.format=IBirtConstants.POSTSCRIPT_RENDER_FORMAT;
 else     this.action=null;
  }
  this.maxRows=ParameterAccessor.getMaxRows(request);
  BirtResources.setLocale(ParameterAccessor.getLocale(request));
  ReportEngineService.getInstance().setMaxRows(this.maxRows);
  this.requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
  processReport(request);
  this.reportTitle=ParameterAccessor.getTitle(request);
  this.isShowTitle=ParameterAccessor.isShowTitle(request);
  this.isShowToolbar=ParameterAccessor.isShowToolbar(request);
  this.isShowNavigationbar=ParameterAccessor.isShowNavigationbar(request);
  this.moduleOptions=BirtUtility.getModuleOptions(request);
  this.reportDesignHandle=getDesignHandle(request);
  if (this.reportDesignHandle == null)   return;
  ParameterAccessor.setClean(request);
  __initParameters(request);
}",0.9886281151705782
75183,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
          link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
        }
 else {
          bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
          link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
          if (!action.isBookmark())           link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
        }
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9466192170818504
75184,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
    if (!action.isBookmark())     link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_ISTOC,""String_Node_Str""));
  }
  return link.toString();
}",0.9794287405653396
75185,"protected void __execute() throws Exception {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
  if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
    InputOptions options=new InputOptions();
    bookmark=getBookmark(operation.getOprand(),attrBean);
    if (bookmark != null && bookmark.length() > 0) {
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,attrBean.getLocale());
      pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        bookmark=(getReportService()).findTocByName(docName,bookmark,options);
        pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
      }
      useBookmark=true;
    }
    if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
      pageNumber=1;
      useBookmark=false;
    }
  }
  doRenderPage(docName,pageNumber,attrBean.getFormat(),svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
}","protected void __execute() throws Exception {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
  if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
    bookmark=getBookmark(operation.getOprand(),attrBean);
    if (bookmark != null && bookmark.length() > 0) {
      InputOptions options=new InputOptions();
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,attrBean.getLocale());
      if (attrBean.isToc()) {
        bookmark=(getReportService()).findTocByName(docName,bookmark,options);
      }
      pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),attrBean)}));
        throw fault;
      }
      useBookmark=true;
    }
  }
  doRenderPage(docName,pageNumber,attrBean.getFormat(),svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
}",0.6070671378091873
75186,"protected void prepareResponse() throws ReportServiceException, RemoteException {
  UpdateContent content=new UpdateContent();
  content.setContent(DataUtil.toUTF8(__page.toByteArray()));
  content.setTarget(""String_Node_Str"");
  content.setInitializationId(parseReportId(__activeIds));
  if (__useBookmark) {
    content.setBookmark(__bookmark);
  }
  Update updateDocument=new Update();
  updateDocument.setUpdateContent(content);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  Page pageObj=new Page();
  pageObj.setPageNumber(String.valueOf(__pageNumber));
  pageObj.setTotalPage(String.valueOf(__totalPageNumber));
  Data data=new Data();
  data.setPage(pageObj);
  updateData.setData(data);
  Update updateNavbar=new Update();
  updateNavbar.setUpdateData(updateData);
  response.setUpdate(new Update[]{updateDocument,updateNavbar});
}","/** 
 * Prepare response
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void prepareResponse() throws ReportServiceException, RemoteException {
  UpdateContent content=new UpdateContent();
  content.setContent(DataUtil.toUTF8(__page.toByteArray()));
  content.setTarget(""String_Node_Str"");
  content.setInitializationId(parseReportId(__activeIds));
  if (__useBookmark) {
    content.setBookmark(__bookmark);
  }
  Update updateDocument=new Update();
  updateDocument.setUpdateContent(content);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  Page pageObj=new Page();
  pageObj.setPageNumber(String.valueOf(__pageNumber));
  pageObj.setTotalPage(String.valueOf(__totalPageNumber));
  Data data=new Data();
  data.setPage(pageObj);
  updateData.setData(data);
  Update updateNavbar=new Update();
  updateNavbar.setUpdateData(updateData);
  response.setUpdate(new Update[]{updateDocument,updateNavbar});
}",0.9513513513513514
75187,"/** 
 * @param context
 * @param operation
 * @param response
 */
public AbstractGetPageActionHandler(IContext context,Operation operation,GetUpdatedObjectsResponse response){
  super(context,operation,response);
}","/** 
 * default constructor
 * @param context
 * @param operation
 * @param response
 */
public AbstractGetPageActionHandler(IContext context,Operation operation,GetUpdatedObjectsResponse response){
  super(context,operation,response);
}",0.9490022172949002
75188,"protected void doExecution() throws ReportServiceException, RemoteException {
}","/** 
 * Execution process
 * @throws ReportServiceException
 * @throws RemoteException
 */
protected void doExecution() throws ReportServiceException, RemoteException {
}",0.6345381526104418
75189,"protected void prepareParameters() throws Exception, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
    options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
    __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
    if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
      __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),__bean)}));
        throw fault;
      }
    }
    __useBookmark=true;
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}","/** 
 * Prepare parameters
 * @throws Exception
 * @throws RemoteException
 */
protected void prepareParameters() throws Exception, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    if (__bookmark != null && __bookmark.length() > 0) {
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
      if (__bean.isToc()) {
        __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      }
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),__bean)}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}",0.8951016635859519
75190,"protected void __execute() throws Exception {
  prepareParameters();
  doExecution();
  prepareResponse();
}","/** 
 * execute action hanlder
 */
protected void __execute() throws Exception {
  prepareParameters();
  doExecution();
  prepareResponse();
}",0.8605577689243028
75191,"/** 
 * @param docName
 * @throws RemoteException
 */
abstract protected void __checkDocumentExists() throws Exception ;","/** 
 * Check whether report document file existed.
 * @param docName
 * @throws RemoteException
 */
abstract protected void __checkDocumentExists() throws Exception ;",0.8362369337979094
75192,"/** 
 * @param bean
 * @return
 */
abstract protected String __getReportDocument();","/** 
 * Returns report document file name.
 * @param bean
 * @return
 */
abstract protected String __getReportDocument();",0.8137254901960784
75193,"static public IDocumentManager loadFileDocumentManager(String dirName,String managerName) throws DataException, IOException {
  return FileDocumentManager.loadManager(dirName,managerName);
}","/** 
 * @param dirName
 * @param managerName
 * @return
 * @throws DataException
 * @throws IOException
 */
static public IDocumentManager loadFileDocumentManager(String dirName,String managerName) throws DataException, IOException {
  return FileDocumentManager.loadManager(dirName,managerName);
}",0.7786885245901639
75194,"/** 
 * @return
 * @throws DataException 
 * @throws IOException 
 */
static public IDocumentManager createFileDocumentManager(String dirName,String managerName) throws DataException, IOException {
  return FileDocumentManager.createManager(dirName,managerName);
}","/** 
 * @param dirName
 * @param managerName
 * @param cacheSize
 * @return
 * @throws DataException
 * @throws IOException
 */
static public IDocumentManager createFileDocumentManager(String dirName,String managerName,int cacheSize) throws DataException, IOException {
  return FileDocumentManager.createManager(dirName,managerName,cacheSize);
}",0.8590163934426229
75195,"/** 
 * @param dirName
 * @param managerName
 * @return
 * @throws DataException
 * @throws IOException
 */
static FileDocumentManager createManager(String dirName,String managerName) throws DataException, IOException {
  FileDocumentManager manager=new FileDocumentManager();
  manager.create(dirName,managerName);
  return manager;
}","/** 
 * @param dirName
 * @param managerName
 * @return
 * @throws DataException
 * @throws IOException
 */
static FileDocumentManager createManager(String dirName,String managerName,int cacheSize) throws DataException, IOException {
  FileDocumentManager manager=new FileDocumentManager(cacheSize);
  manager.create(dirName,managerName);
  return manager;
}",0.9668109668109668
75196,"private FileDocumentManager(){
}","/** 
 * @param fileCacheSize
 */
private FileDocumentManager(int fileCacheSize){
  this.dataFileCacheSize=fileCacheSize;
}",0.4155844155844156
75197,"/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void load(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  objectAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  oatAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  dataAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectAccessFile.seek(0);
  while (true) {
    try {
      ObjectStructure structure=readObjectStructure();
      if (structure.firstBlock >= 0)       documentObjectMap.put(structure.name,structure);
    }
 catch (    EOFException e) {
      return;
    }
  }
}","/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void load(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  objectAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024,dataFileCacheSize / 5);
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  oatAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024,dataFileCacheSize / 10);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  dataAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024,dataFileCacheSize);
  objectAccessFile.seek(0);
  while (true) {
    try {
      ObjectStructure structure=readObjectStructure();
      if (structure.firstBlock >= 0)       documentObjectMap.put(structure.name,structure);
    }
 catch (    EOFException e) {
      return;
    }
  }
}",0.9765537774469668
75198,"/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  objectFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!objectFile.exists()) {
    if (!new File(dirName).exists()) {
      new File(dirName).mkdirs();
    }
    try {
      if (!objectFile.createNewFile()) {
        throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,objectFile.getAbsolutePath());
      }
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,e,objectFile.getAbsolutePath());
    }
  }
  objectAccessFile=new BufferedRandomAccessFile(objectFile,""String_Node_Str"",1024);
  objectAccessFile.setLength(0);
  oatFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!oatFile.exists()) {
    if (!oatFile.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,oatFile.getAbsolutePath());
    }
  }
  oatAccessFile=new BufferedRandomAccessFile(oatFile,""String_Node_Str"",1024);
  oatAccessFile.setLength(0);
  dataFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!dataFile.exists()) {
    if (!dataFile.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,dataFile.getAbsolutePath());
    }
  }
  dataAccessFile=new BufferedRandomAccessFile(dataFile,""String_Node_Str"",1024);
  dataAccessFile.setLength(0);
}","/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  if (!new File(dirName).exists()) {
    new File(dirName).mkdirs();
  }
  objectFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  objectAccessFile=new BufferedRandomAccessFile(objectFile,""String_Node_Str"",1024,dataFileCacheSize / 5);
  objectAccessFile.setLength(0);
  oatFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  oatAccessFile=new BufferedRandomAccessFile(oatFile,""String_Node_Str"",1024,dataFileCacheSize / 10);
  oatAccessFile.setLength(0);
  dataFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  dataAccessFile=new BufferedRandomAccessFile(dataFile,""String_Node_Str"",1024,dataFileCacheSize);
  dataAccessFile.setLength(0);
}",0.6447264076130056
75199,"protected void delegateClose() throws IOException {
  delegate.close();
}","protected void delegateClose() throws IOException {
  if (delegate == null) {
    return;
  }
  delegate.close();
}",0.776595744680851
75200,"protected int delegateRead(byte[] b) throws IOException {
  return delegate.read(b);
}","protected int delegateRead(byte[] b) throws IOException {
  return delegateRead(b,0,b.length);
}",0.9230769230769232
75201,"/** 
 * Constructor for the BufferedRandomAccessFile object
 * @param file Description of Parameter
 * @param mode Description of Parameter
 * @param bufferSize Description of Parameter
 * @exception IOException Description of Exception
 */
public BufferedRandomAccessFile(File file,String mode,int bufferSize) throws IOException {
  super(bufferSize);
  delegate=new RandomAccessFile(file,mode);
  fillBuffer();
}","/** 
 * @param file
 * @param mode
 * @param bufferSize
 * @throws IOException
 */
public BufferedRandomAccessFile(File file,String mode,int bufferSize) throws IOException {
  this(file,mode,bufferSize,0);
}",0.4347826086956521
75202,"protected void delegateSetLength(long newLength) throws IOException {
  delegate.setLength(newLength);
}","protected void delegateSetLength(long newLength) throws IOException {
  if (delegate == null) {
    if (newLength > memoryDelegate.length) {
      createRandomAccessFile();
    }
 else {
      length=(int)newLength;
    }
    return;
  }
  delegate.setLength(newLength);
}",0.425531914893617
75203,"protected void delegateSeek(long pos) throws IOException {
  delegate.seek(pos);
}","protected void delegateSeek(long pos) throws IOException {
  if (delegate == null) {
    if (pos > memoryDelegate.length) {
      createRandomAccessFile();
    }
 else {
      pointer=(int)pos;
      return;
    }
  }
  delegate.seek(pos);
}",0.5015479876160991
75204,"protected long delegateGetFilePointer() throws IOException {
  return delegate.getFilePointer();
}","protected long delegateGetFilePointer() throws IOException {
  if (delegate == null) {
    return pointer;
  }
  return delegate.getFilePointer();
}",0.7967479674796748
75205,"protected long delegateLength() throws IOException {
  return delegate.length();
}","protected long delegateLength() throws IOException {
  if (delegate == null) {
    return length;
  }
  return delegate.length();
}",0.7699530516431925
75206,"protected void delegateWrite(byte[] b,int pos,int len) throws IOException {
  delegate.write(b,pos,len);
}","protected void delegateWrite(byte[] b,int pos,int len) throws IOException {
  if (delegate == null) {
    if (pointer + len > memoryDelegate.length) {
      createRandomAccessFile();
    }
 else {
      System.arraycopy(b,pos,memoryDelegate,pointer,len);
      if (pointer + len > length) {
        length=pointer + len;
      }
      pointer+=len;
      return;
    }
  }
  delegate.write(b,pos,len);
}",0.4165029469548134
75207,"/** 
 * Get page number by bookmark.
 * @param params
 * @param bean
 * @param document
 * @return
 * @throws RemoteException
 */
protected String getBookmark(Oprand[] params,BaseAttributeBean bean){
}","/** 
 * Get bookmark name from SOAP params and request.
 * @param params
 * @param bean
 * @return
 */
protected String getBookmark(Oprand[] params,BaseAttributeBean bean){
}",0.7466666666666667
75208,"/** 
 * Get page number from incoming soap request.
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        InputOptions options=new InputOptions();
        options.setOption(InputOptions.OPT_REQUEST,request);
        if (pageNumber <= 0 || pageNumber > getReportService().getPageCount(documentName,options,new OutputOptions())) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(""String_Node_Str"");
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}","/** 
 * Get page number from incoming soap request.
 * @param request
 * @param params
 * @param document
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
protected long getPageNumber(HttpServletRequest request,Oprand[] params,String documentName) throws RemoteException, ReportServiceException {
  long pageNumber=-1;
  if (params != null && params.length > 0) {
    for (int i=0; i < params.length; i++) {
      if (IBirtConstants.OPRAND_PAGENO.equalsIgnoreCase(params[i].getName())) {
        try {
          pageNumber=Integer.parseInt(params[i].getValue());
        }
 catch (        NumberFormatException e) {
          pageNumber=-1;
        }
        InputOptions options=new InputOptions();
        options.setOption(InputOptions.OPT_REQUEST,request);
        if (pageNumber <= 0 || pageNumber > getReportService().getPageCount(documentName,options,new OutputOptions())) {
          AxisFault fault=new AxisFault();
          fault.setFaultCode(new QName(""String_Node_Str""));
          fault.setFaultString(""String_Node_Str"");
          throw fault;
        }
        break;
      }
    }
  }
  return pageNumber;
}",0.9921190893169878
75209,"protected void __execute() throws Exception {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
  if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
    bookmark=getBookmark(operation.getOprand(),attrBean);
    if (bookmark != null && bookmark.length() > 0) {
      InputOptions options=new InputOptions();
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,attrBean.getLocale());
      if (attrBean.isToc()) {
        bookmark=(getReportService()).findTocByName(docName,bookmark,options);
      }
      pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),attrBean)}));
        throw fault;
      }
      useBookmark=true;
    }
  }
  doRenderPage(docName,pageNumber,attrBean.getFormat(),svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
}","protected void __execute() throws Exception {
  BaseAttributeBean attrBean=(BaseAttributeBean)context.getBean();
  boolean svgFlag=getSVGFlag(operation.getOprand());
  runReport();
  String bookmark=null;
  boolean useBookmark=false;
  String docName=attrBean.getReportDocumentName();
  long pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),docName);
  if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
    bookmark=getBookmark(operation.getOprand(),attrBean);
    if (bookmark != null && bookmark.length() > 0) {
      InputOptions options=new InputOptions();
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,attrBean.getLocale());
      if (isToc(operation.getOprand(),attrBean)) {
        bookmark=(getReportService()).findTocByName(docName,bookmark,options);
      }
      pageNumber=getReportService().getPageNumberByBookmark(docName,bookmark,options);
      if (!isValidPageNumber(context.getRequest(),pageNumber,docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),attrBean)}));
        throw fault;
      }
      useBookmark=true;
    }
  }
  doRenderPage(docName,pageNumber,attrBean.getFormat(),svgFlag,attrBean.isMasterPageContent(),useBookmark,bookmark,attrBean.getLocale(),attrBean.isRtl());
}",0.9865933310415952
75210,"/** 
 * Prepare parameters
 * @throws Exception
 * @throws RemoteException
 */
protected void prepareParameters() throws Exception, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    if (__bookmark != null && __bookmark.length() > 0) {
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
      if (__bean.isToc()) {
        __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      }
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),__bean)}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}","/** 
 * Prepare parameters
 * @throws Exception
 * @throws RemoteException
 */
protected void prepareParameters() throws Exception, RemoteException {
  __bean=context.getBean();
  __docName=__getReportDocument();
  __checkDocumentExists();
  InputOptions getPageCountOptions=new InputOptions();
  getPageCountOptions.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  getPageCountOptions.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  getPageCountOptions.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  OutputOptions outputOptions=new OutputOptions();
  InputOptions options=new InputOptions();
  __totalPageNumber=getReportService().getPageCount(__docName,getPageCountOptions,outputOptions);
  Boolean isCompleted=(Boolean)outputOptions.getOption(OutputOptions.OPT_REPORT_GENERATION_COMPLETED);
  if (isCompleted != null) {
    __isCompleted=isCompleted.booleanValue();
  }
  __pageNumber=getPageNumber(context.getRequest(),operation.getOprand(),__docName);
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    __bookmark=getBookmark(operation.getOprand(),__bean);
    if (__bookmark != null && __bookmark.length() > 0) {
      options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
      options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
      if (isToc(operation.getOprand(),__bean)) {
        __bookmark=(getReportService()).findTocByName(__docName,__bookmark,options);
      }
      __pageNumber=getReportService().getPageNumberByBookmark(__docName,__bookmark,options);
      if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
        AxisFault fault=new AxisFault();
        fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_BOOKMARK,new String[]{getBookmark(operation.getOprand(),__bean)}));
        throw fault;
      }
      __useBookmark=true;
    }
  }
  if (!isValidPageNumber(context.getRequest(),__pageNumber,__docName)) {
    AxisFault fault=new AxisFault();
    fault.setFaultReason(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_INVALID_PAGE_NUMBER));
    throw fault;
  }
  __svgFlag=getSVGFlag(operation.getOprand());
}",0.9919779967911988
75211,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean linethrough,boolean overline,boolean underline){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  Charset charset=Charset.forName(""String_Node_Str"");
  ByteBuffer encodedText=charset.encode(text);
  try {
    pptOutput.write((""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + shapeCount + ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"").getBytes());
    if (fontInfo != null && fontInfo.getFontStyle() == Font.ITALIC) {
      pptOutput.write((""String_Node_Str"").getBytes());
      pptOutput.write(encodedText.array());
      pptOutput.write((""String_Node_Str"").getBytes());
    }
 else {
      pptOutput.write(encodedText.array());
    }
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
  if (linethrough) {
    drawLine(textX,textY + fontInfo.getLineThroughPosition(),textX + width,textY + fontInfo.getLineThroughPosition(),width,color,""String_Node_Str"");
  }
  if (overline) {
    drawLine(textX,textY + fontInfo.getOverlinePosition(),textX + width,textY + fontInfo.getOverlinePosition(),width,color,""String_Node_Str"");
  }
  if (underline) {
    drawLine(textX,textY + fontInfo.getUnderlinePosition(),textX + width,textY + fontInfo.getUnderlinePosition(),width,color,""String_Node_Str"");
  }
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean linethrough,boolean overline,boolean underline){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  String red=Integer.toHexString(color.getRed());
  String green=Integer.toHexString(color.getGreen());
  String blue=Integer.toHexString(color.getBlue());
  red=red.length() == 1 ? ""String_Node_Str"" + red : red;
  green=green.length() == 1 ? ""String_Node_Str"" + green : green;
  blue=blue.length() == 1 ? ""String_Node_Str"" + blue : blue;
  Charset charset=Charset.forName(""String_Node_Str"");
  ByteBuffer encodedText=charset.encode(text);
  try {
    pptOutput.write((""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + shapeCount + ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ red+ green+ blue+ ""String_Node_Str"").getBytes());
    if (fontInfo != null && fontInfo.getFontStyle() == Font.ITALIC) {
      pptOutput.write((""String_Node_Str"").getBytes());
      pptOutput.write(encodedText.array());
      pptOutput.write((""String_Node_Str"").getBytes());
    }
 else {
      pptOutput.write(encodedText.array());
    }
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
  float lineWidth=fontInfo.getLineWidth();
  if (linethrough) {
    drawDecoration(textX,textY,width,color,lineWidth,fontInfo.getLineThroughPosition());
  }
  if (overline) {
    drawDecoration(textX,textY,width,color,lineWidth,fontInfo.getOverlinePosition());
  }
  if (underline) {
    drawDecoration(textX,textY,width,color,lineWidth,fontInfo.getUnderlinePosition());
  }
}",0.8931639895405304
75212,"protected void loggerParamters(){
  if (log.isLoggable(Level.FINE)) {
    final StringBuffer buffer=new StringBuffer();
    new ParameterVisitor(){
      boolean visitScalarParameter(      ScalarParameterHandle param,      Object value){
        String paramName=param.getName();
        Object paramValue=runValues.get(paramName);
        buffer.append(paramName);
        buffer.append(""String_Node_Str"");
        buffer.append(paramValue);
        buffer.append(""String_Node_Str"");
        return validateScalarParameter(param);
      }
      boolean visitParameterGroup(      ParameterGroupHandle group,      Object value){
        return visitParametersInGroup(group,value);
      }
    }
.visit((ReportDesignHandle)runnable.getDesignHandle(),null);
    log.log(Level.FINE,""String_Node_Str"",buffer);
  }
}","protected void loggerParamters(){
  if (log.isLoggable(Level.FINE)) {
    final StringBuffer buffer=new StringBuffer();
    new ParameterVisitor(){
      boolean visitScalarParameter(      ScalarParameterHandle param,      Object value){
        String paramName=param.getName();
        Object paramValue=runValues.get(paramName);
        buffer.append(paramName);
        buffer.append(""String_Node_Str"");
        buffer.append(paramValue);
        buffer.append(""String_Node_Str"");
        return true;
      }
      boolean visitParameterGroup(      ParameterGroupHandle group,      Object value){
        return visitParametersInGroup(group,value);
      }
    }
.visit((ReportDesignHandle)runnable.getDesignHandle(),null);
    log.log(Level.FINE,""String_Node_Str"",buffer);
  }
}",0.9786700125470514
75213,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      log.log(Level.SEVERE,""String_Node_Str"",source);
      return false;
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle) throws ParameterValidationException {
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName});
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      log.log(Level.SEVERE,""String_Node_Str"",source);
      throw new ParameterValidationException(MessageConstants.NULL_PARAMETER_EXCEPTION,new String[]{paramName,source});
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    throw new ParameterValidationException(MessageConstants.INVALID_PARAMETER_TYPE_EXCEPTION,new String[]{type,""String_Node_Str""});
  }
  return true;
}",0.6884629838406614
75214,"public boolean validateParameters(){
  if (runnable == null) {
    return false;
  }
  usingParameterValues();
  if (log.isLoggable(Level.FINE)) {
    loggerParamters();
  }
  return new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object value){
      return validateScalarParameter(param);
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object value){
      return visitParametersInGroup(group,value);
    }
  }
.visit((ReportDesignHandle)runnable.getDesignHandle(),null);
}","public boolean validateParameters(){
  if (runnable == null) {
    return false;
  }
  try {
    doValidateParameters();
    return true;
  }
 catch (  ParameterValidationException ex) {
    log.log(Level.SEVERE,ex.getMessage(),ex);
  }
  return false;
}",0.25
75215,"void doRun() throws EngineException {
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    ex.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    err.printStackTrace();
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
}",0.9804979253112032
75216,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (!validateParameters()) {
    throw new EngineException(MessageConstants.INVALID_PARAMETER_EXCEPTION);
  }
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  doValidateParameters();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable report=executionContext.getRunnable();
    writer.saveDesign(report);
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(""String_Node_Str"",ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(""String_Node_Str"",t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
  }
}",0.9761421319796956
75217,"public IReportItemExecutor getNextChild(){
  if (childContent != null) {
    IReportItemExecutor ret=new ItemExecutorWrapper(childExecutor,childContent);
    childContent=null;
    childExecutor=null;
    needUpdate=true;
    return ret;
  }
  if (currentRunIn != null) {
    needUpdate=true;
    IReportItemExecutor runInChild=currentRunIn.getNextChild();
    if (runInChild != null) {
      IContent runInContent=runInChild.execute();
      if (runInContent != null && (runInContent.getChildren() == null || runInContent.getChildren().size() == 0)) {
        execute(runInChild,runInContent);
        runInChild.close();
        runInChild=new DOMReportItemExecutor(runInContent);
      }
    }
    return runInChild;
  }
  assert(false);
  return null;
}","public IReportItemExecutor getNextChild(){
  if (childContent != null) {
    IReportItemExecutor ret=new ItemExecutorWrapper(childExecutor,childContent);
    childContent=null;
    childExecutor=null;
    needUpdate=true;
    return ret;
  }
  if (currentRunIn != null) {
    needUpdate=true;
    IReportItemExecutor runInChild=currentRunIn.getNextChild();
    if (runInChild != null) {
      IContent runInContent=runInChild.execute();
      if (firstChild) {
        transferPageBreak(currentRunInContent,runInContent);
        firstChild=false;
      }
      if (runInContent != null && (runInContent.getChildren() == null || runInContent.getChildren().size() == 0)) {
        execute(runInChild,runInContent);
        runInChild.close();
        runInChild=new DOMReportItemExecutor(runInContent);
      }
    }
    return runInChild;
  }
  assert(false);
  return null;
}",0.9271279853031232
75218,"public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        add(nextContent.getParent().getChildren(),nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}","public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        add(nextContent.getParent().getChildren(),nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        currentRunInContent=nextContent;
        firstChild=true;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}",0.9729950900163666
75219,"/** 
 * fill empty cells in the table.
 * @param rowId row index
 * @param colId col index
 * @param rowSize fill area size
 * @param colSize fill area size
 */
protected void fillEmptyCells(int rowId,int colId,int rowSize,int colSize){
  int lastRowId=rowId + rowSize;
  int lastColId=colId + colSize;
  if (lastRowId > rowCount)   lastRowId=rowCount;
  if (lastColId > colCount)   lastColId=colCount;
  for (int i=rowId; i < lastRowId; i++) {
    Cell[] cells=rows[i].cells;
    for (int j=colId; j < lastColId; j++) {
      cells[j]=Cell.EMPTY_CELL;
    }
  }
}","/** 
 * fill empty cells in the table.
 * @param rowId row index
 * @param colId col index
 * @param rowSize fill area size
 * @param colSize fill area size
 */
protected void fillEmptyCells(int rowId,int colId,int rowSize,int colSize){
  int lastRowId=rowId + rowSize;
  int lastColId=colId + colSize;
  if (lastRowId > rowCount)   lastRowId=rowCount;
  if (lastColId > colCount)   lastColId=colCount;
  if (lastRowId > 0 && rows[lastRowId - 1] != null) {
    lastRow=new Row(rows[lastRowId - 1].rowId);
    lastRow.content=rows[lastRowId - 1].content;
    lastRow.cells=new Cell[lastColId - colId];
    for (int i=colId; i < lastColId; i++) {
      lastRow.cells[i]=rows[lastRowId - 1].cells[i];
    }
  }
  for (int i=rowId; i < lastRowId; i++) {
    Cell[] cells=rows[i].cells;
    for (int j=colId; j < lastColId; j++) {
      cells[j]=Cell.EMPTY_CELL;
    }
  }
}",0.7871598046057222
75220,"protected void keepUnresolvedCells(){
  if (rowCount <= 0) {
    return;
  }
  if (rowHint == null) {
    Row row=rows[rowCount - 1];
    Cell[] cells=rows[rowCount - 1].cells;
    IRowContent rowContent=(IRowContent)row.getContent();
    ITableContent table=rowContent.getTable();
    InstanceID tableId=table.getInstanceID();
    InstanceID rowId=rowContent.getInstanceID();
    UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
    for (int cellId=0; cellId < realColCount; cellId++) {
      if (cells[cellId] != null) {
        String style=null;
        CellContent cellContent=(CellContent)cells[cellId].getContent();
        if (cellContent != null) {
          ICellContent cc=cellContent.getContent();
          if (cc != null) {
            style=cc.getStyle().getCssText();
          }
        }
        hint.addUnresolvedCell(style,cells[cellId].getColId(),cells[cellId].getColSpan(),cells[cellId].getRowSpan());
      }
    }
    this.rowHint=hint;
  }
}","protected void keepUnresolvedCells(){
  if (rowHint == null) {
    Row row=null;
    if (rowCount > 0) {
      row=rows[rowCount - 1];
    }
 else     if (lastRow != null) {
      row=lastRow;
    }
 else {
      return;
    }
    Cell[] cells=row.cells;
    IRowContent rowContent=(IRowContent)row.getContent();
    ITableContent table=rowContent.getTable();
    InstanceID tableId=table.getInstanceID();
    InstanceID rowId=rowContent.getInstanceID();
    UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
    for (int cellId=0; cellId < realColCount; cellId++) {
      if (cells[cellId] != null) {
        String style=null;
        CellContent cellContent=(CellContent)cells[cellId].getContent();
        if (cellContent != null) {
          ICellContent cc=cellContent.getContent();
          if (cc != null) {
            style=cc.getStyle().getCssText();
          }
        }
        hint.addUnresolvedCell(style,cells[cellId].getColId(),cells[cellId].getColSpan(),cells[cellId].getRowSpan());
      }
    }
    this.rowHint=hint;
  }
}",0.8991436726926736
75221,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null)       resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    if (resourceFolder != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null) {
        String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
      }
    }
 catch (    UnsupportedEncodingException e) {
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.972644376899696
75222,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null)     resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (resourceFolder != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null) {
      String res=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,res));
    }
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.9702791954368056
75223,"private TableLayoutInfo resolveTableLayoutInfo(TableArea area){
  assert(parent != null);
  int avaWidth=parent.getCurrentMaxContentWidth() - parent.getCurrentIP();
  int parentMaxWidth=parent.getCurrentMaxContentWidth();
  IStyle style=area.getStyle();
  validateBoxProperty(style);
  int marginWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_RIGHT));
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),parentMaxWidth);
  if (specifiedWidth + marginWidth > parentMaxWidth) {
    specifiedWidth=0;
  }
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (specifiedWidth == 0) {
    if (isInline) {
      if (avaWidth - marginWidth > parentMaxWidth / 4) {
        tableWidth=avaWidth - marginWidth;
      }
 else {
        tableWidth=parentMaxWidth - marginWidth;
      }
    }
 else {
      tableWidth=avaWidth - marginWidth;
    }
    return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,tableWidth)));
  }
 else {
    if (!isInline) {
      tableWidth=Math.min(specifiedWidth,avaWidth - marginWidth);
      return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,avaWidth - marginWidth)));
    }
 else {
      tableWidth=Math.min(specifiedWidth,parentMaxWidth - marginWidth);
      return new TableLayoutInfo(handleColummVisibity(columnWidthResolver.resolve(tableWidth,parentMaxWidth - marginWidth)));
    }
  }
}","private TableLayoutInfo resolveTableLayoutInfo(TableArea area){
  assert(parent != null);
  int avaWidth=parent.getCurrentMaxContentWidth() - parent.getCurrentIP();
  int parentMaxWidth=parent.getCurrentMaxContentWidth();
  IStyle style=area.getStyle();
  validateBoxProperty(style);
  int marginWidth=getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_LEFT)) + getDimensionValue(style.getProperty(StyleConstants.STYLE_MARGIN_RIGHT));
  int specifiedWidth=getDimensionValue(tableContent.getWidth(),parentMaxWidth);
  if (specifiedWidth + marginWidth > parentMaxWidth) {
    specifiedWidth=0;
  }
  boolean isInline=PropertyUtil.isInlineElement(content);
  if (specifiedWidth == 0) {
    if (isInline) {
      if (avaWidth - marginWidth > parentMaxWidth / 4) {
        tableWidth=avaWidth - marginWidth;
      }
 else {
        tableWidth=parentMaxWidth - marginWidth;
      }
    }
 else {
      tableWidth=avaWidth - marginWidth;
    }
    return new TableLayoutInfo(handleColumnVisibility(columnWidthResolver.resolve(tableWidth,tableWidth)));
  }
 else {
    if (!isInline) {
      tableWidth=Math.min(specifiedWidth,avaWidth - marginWidth);
      return new TableLayoutInfo(handleColumnVisibility(columnWidthResolver.resolve(tableWidth,avaWidth - marginWidth)));
    }
 else {
      tableWidth=Math.min(specifiedWidth,parentMaxWidth - marginWidth);
      return new TableLayoutInfo(handleColumnVisibility(columnWidthResolver.resolve(tableWidth,parentMaxWidth - marginWidth)));
    }
  }
}",0.9960026648900732
75224,"protected void mergeDropCell(RowArea row){
  if (unresolvedRow == null) {
    return;
  }
  CellArea[] cells=new CellArea[columnNumber];
  Iterator iter=row.getChildren();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colStart=cell.getColumnID();
    int colEnd=colStart + cell.getColSpan();
    for (int i=colStart; i < colEnd; i++) {
      int index=colStart - start;
      if (index >= 0 && index < columnNumber) {
        cells[colStart - start]=cell;
      }
    }
  }
  for (int i=0; i < columnNumber; i++) {
    if (cells[i] == null) {
      ICellContent cellContent=null;
      CellArea ca=unresolvedRow.getCell(start + i);
      if (ca != null) {
        ICellContent cc=(ICellContent)ca.getContent();
        cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)row.getContent(),ca,unresolvedRow.row));
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        emptyCell.setRowSpan(cellContent.getRowSpan());
        resolveBorderConflict(emptyCell,false);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        emptyCell.setHeight(row.getHeight());
        row.addChild(emptyCell);
      }
    }
  }
}","protected void mergeDropCell(RowArea row){
  if (unresolvedRow == null) {
    return;
  }
  CellArea[] cells=new CellArea[columnNumber];
  Iterator iter=row.getChildren();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colStart=cell.getColumnID();
    int colEnd=colStart + cell.getColSpan();
    for (int i=colStart; i < colEnd; i++) {
      int index=colStart - start;
      if (index >= 0 && index < columnNumber) {
        cells[colStart - start]=cell;
      }
    }
  }
  for (int i=0; i < columnNumber; i++) {
    if (cells[i] == null) {
      ICellContent cellContent=null;
      CellArea ca=unresolvedRow.getCell(start + i);
      if (ca != null) {
        ICellContent cc=(ICellContent)ca.getContent();
        cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)row.getContent(),ca,unresolvedRow.row));
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        emptyCell.setRowSpan(cellContent.getRowSpan());
        resolveBorderConflict(emptyCell,true);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        emptyCell.setHeight(row.getHeight());
        row.addChild(emptyCell);
      }
    }
  }
}",0.9974217311233886
75225,"/** 
 * Get styles
 * @param comparator
 * @return return styles list sortted with given comparator.
 */
public static Iterator getStyles(Comparator comparator){
  List styles=null;
  if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof ReportDesignHandle) {
    styles=SessionHandleAdapter.getInstance().getReportDesignHandle().getAllStyles();
  }
 else   if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    styles=new ArrayList();
    ThemeHandle theme=((LibraryHandle)SessionHandleAdapter.getInstance().getReportDesignHandle()).getTheme();
    if (theme != null) {
      styles.addAll(theme.getAllStyles());
    }
  }
  Object[] stylesArray=(styles == null ? new Object[0] : styles.toArray());
  if (comparator != null) {
    Arrays.sort(stylesArray,comparator);
  }
  return Arrays.asList(stylesArray).iterator();
}","/** 
 * Get styles
 * @param comparator
 * @return return styles list sortted with given comparator.
 */
public static Iterator getStyles(ThemeHandle theme,Comparator comparator){
  List styles=new ArrayList();
  if (theme != null) {
    styles.addAll(theme.getAllStyles());
  }
 else   if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    styles=new ArrayList();
    theme=((LibraryHandle)SessionHandleAdapter.getInstance().getReportDesignHandle()).getTheme();
    if (theme != null) {
      styles.addAll(theme.getAllStyles());
    }
  }
  Object[] stylesArray=styles.toArray(new Object[styles.size()]);
  if (comparator != null) {
    Arrays.sort(stylesArray,comparator);
  }
  return Arrays.asList(stylesArray).iterator();
}",0.7477313974591652
75226,"protected DesignElementHandle createElement(SlotHandle slotHandle,String type) throws Exception {
  DesignElementFactory factory=DesignElementFactory.getInstance();
  DesignElementHandle handle=factory.newStyle((ThemeHandle)slotHandle.getElementHandle(),null);
  if (ProviderFactory.createProvider(handle).performRequest(handle,new Request(IRequestConstants.REQUEST_TYPE_EDIT))) {
    return handle;
  }
  return null;
}","protected DesignElementHandle createElement(SlotHandle slotHandle,String type) throws Exception {
  ThemeHandle theme=(ThemeHandle)slotHandle.getElementHandle();
  DesignElementFactory factory=DesignElementFactory.getInstance();
  SharedStyleHandle handle=factory.newStyle(theme,null);
  StyleBuilder builder=new StyleBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),handle,theme,StyleBuilder.DLG_TITLE_NEW);
  if (builder.open() == Dialog.CANCEL) {
    return null;
  }
  return handle;
}",0.5367965367965368
75227,"public Object execute(ExecutionEvent event) throws ExecutionException {
  super.execute(event);
  boolean retBoolean=true;
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  CommandStack stack=getActiveCommandStack();
  stack.startTrans(STACK_MSG_ADD_STYLE);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME);
  if (obj instanceof ThemeHandle) {
    themeHandle=(ThemeHandle)obj;
  }
 else {
    themeHandle=null;
  }
  ModuleHandle reportDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  StyleHandle styleHandle=themeHandle != null ? DesignElementFactory.getInstance(reportDesignHandle).newStyle(themeHandle,null) : DesignElementFactory.getInstance(reportDesignHandle).newStyle(null);
  try {
    StyleBuilder dialog=new StyleBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),styleHandle,StyleBuilder.DLG_TITLE_NEW);
    if (dialog.open() == Window.OK) {
      if (themeHandle != null) {
        themeHandle.getStyles().add(styleHandle);
      }
 else {
        reportDesignHandle.getStyles().add(styleHandle);
        if (!styleHandle.isPredefined()) {
          applyStyle((SharedStyleHandle)styleHandle);
        }
      }
      stack.commit();
    }
 else {
      stack.rollbackAll();
      retBoolean=false;
    }
  }
 catch (  Exception e) {
    stack.rollbackAll();
    ExceptionHandler.handle(e);
    retBoolean=false;
  }
  return new Boolean(retBoolean);
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  super.execute(event);
  boolean retBoolean=true;
  if (Policy.TRACING_ACTIONS) {
    System.out.println(""String_Node_Str"");
  }
  CommandStack stack=getActiveCommandStack();
  stack.startTrans(STACK_MSG_ADD_STYLE);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME);
  if (obj instanceof ThemeHandle) {
    themeHandle=(ThemeHandle)obj;
  }
 else {
    themeHandle=null;
  }
  ModuleHandle reportDesignHandle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  StyleHandle styleHandle=themeHandle != null ? DesignElementFactory.getInstance(reportDesignHandle).newStyle(themeHandle,null) : DesignElementFactory.getInstance(reportDesignHandle).newStyle(null);
  try {
    StyleBuilder dialog=new StyleBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),styleHandle,themeHandle,StyleBuilder.DLG_TITLE_NEW);
    if (dialog.open() == Window.OK) {
      if (themeHandle != null) {
        themeHandle.getStyles().add(styleHandle);
      }
 else {
        reportDesignHandle.getStyles().add(styleHandle);
        if (!styleHandle.isPredefined()) {
          applyStyle((SharedStyleHandle)styleHandle);
        }
      }
      stack.commit();
    }
 else {
      stack.rollbackAll();
      retBoolean=false;
    }
  }
 catch (  Exception e) {
    stack.rollbackAll();
    ExceptionHandler.handle(e);
    retBoolean=false;
  }
  return new Boolean(retBoolean);
}",0.99616368286445
75228,"/** 
 * Default constructor.
 * @param model,the model of preference page.
 */
public GeneralPreferencePage(Object model){
  super(model);
  this.model=model;
}","/** 
 * Constructor with theme.
 * @param model
 * @param theme
 */
public GeneralPreferencePage(Object model,ThemeHandle theme){
  super(model);
  this.model=model;
  this.theme=theme;
}",0.7262247838616714
75229,"private boolean checkName(String name,boolean showError){
  String trimName=name.trim();
  Iterator iterator=DEUtil.getStyles();
  while (iterator.hasNext()) {
    SharedStyleHandle handle=(SharedStyleHandle)iterator.next();
    if ((handle.getName() != null) && handle.getName().equals(trimName) && (handle != model)) {
      if (showError) {
        ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new String[]{name}));
      }
      return false;
    }
  }
  return true;
}","private boolean checkName(String name,boolean showError){
  String trimName=name.trim();
  Iterator iterator=null;
  if (theme != null) {
    iterator=DEUtil.getStyles(theme);
  }
 else {
    iterator=DEUtil.getLocalStyles();
  }
  while (iterator.hasNext()) {
    SharedStyleHandle handle=(SharedStyleHandle)iterator.next();
    if ((handle.getName() != null) && handle.getName().equals(trimName) && (handle != model)) {
      if (showError) {
        ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getFormattedString(""String_Node_Str"",new String[]{name}));
      }
      return false;
    }
  }
  return true;
}",0.9124270225187656
75230,"/** 
 * Runs action.
 */
public void run(){
  if (themeHandle != null) {
    CommandUtils.setVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME,themeHandle);
  }
  try {
    CommandUtils.executeCommand(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (themeHandle != null) {
      CommandUtils.removeVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME);
    }
  }
}","/** 
 * Runs action.
 */
public void run(){
  boolean hasTheme=false;
  if (themeHandle != null) {
    hasTheme=true;
    CommandUtils.setVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME,themeHandle);
  }
 else   if (SessionHandleAdapter.getInstance().getReportDesignHandle() instanceof LibraryHandle) {
    ThemeHandle theme=((LibraryHandle)SessionHandleAdapter.getInstance().getReportDesignHandle()).getTheme();
    if (theme != null) {
      hasTheme=true;
      CommandUtils.setVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME,theme);
    }
  }
  try {
    CommandUtils.executeCommand(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    if (hasTheme) {
      CommandUtils.removeVariable(ICommandParameterNameContants.NEW_STYLE_THEME_HANDLE_NAME);
    }
  }
}",0.6614664586583463
75231,"/** 
 * Constructor
 * @param parentShell
 * @param handle
 */
public StyleBuilder(Shell parentShell,ReportElementHandle handle,String title){
  super(parentShell,createPreferenceManager(handle));
  this.title=title;
}","/** 
 * Constructor
 * @param parentShell
 * @param handle
 */
public StyleBuilder(Shell parentShell,ReportElementHandle handle,ThemeHandle theme,String title){
  super(parentShell,createPreferenceManager(handle,theme));
  this.title=title;
}",0.9478260869565216
75232,"private static PreferenceManager createPreferenceManager(ReportElementHandle handle){
  PreferenceManager preferenceManager=new PreferenceManager('/');
  List pageContributions=new ArrayList();
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new GeneralPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FontPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BackgroundPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BlockPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BoxPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BorderPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FormatNumberPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FormatDateTimePreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FormatStringPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new PageBreakPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new MapPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new HighlightsPreferencePage(handle)));
  Iterator it=pageContributions.iterator();
  while (it.hasNext()) {
    preferenceManager.addToRoot((IPreferenceNode)it.next());
  }
  return preferenceManager;
}","private static PreferenceManager createPreferenceManager(ReportElementHandle handle,ThemeHandle theme){
  PreferenceManager preferenceManager=new PreferenceManager('/');
  List pageContributions=new ArrayList();
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new GeneralPreferencePage(handle,theme)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FontPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BackgroundPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BlockPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BoxPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new BorderPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FormatNumberPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FormatDateTimePreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new FormatStringPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new PageBreakPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new MapPreferencePage(handle)));
  pageContributions.add(new PreferenceNode(""String_Node_Str"",new HighlightsPreferencePage(handle)));
  Iterator it=pageContributions.iterator();
  while (it.hasNext()) {
    preferenceManager.addToRoot((IPreferenceNode)it.next());
  }
  return preferenceManager;
}",0.9922879177377892
75233,"/** 
 * @param groupLevel
 * @throws DataException
 * @throws BirtException
 */
protected void goThroughGapRows(int groupLevel) throws DataException, BirtException {
  while (groupLevel < odiResult.getEndingGroupLevel() && odiResult.getEndingGroupLevel() != 0 && odiResult.next()) {
    this.prepareCurrentRow();
  }
}","/** 
 * @param groupLevel
 * @throws DataException
 * @throws BirtException
 */
protected void goThroughGapRows(int groupLevel) throws DataException, BirtException {
  while (groupLevel < odiResult.getEndingGroupLevel() && odiResult.getEndingGroupLevel() != 0 && odiResult.next()) {
    clear();
    this.prepareCurrentRow();
  }
}",0.9799691833590138
75234,"public void moveTo(int rowIndex) throws BirtException {
  checkStarted();
  if (state == BEFORE_FIRST_ROW) {
    this.prepareCurrentRow();
    state=ON_ROW;
  }
  int currRowIndex=odiResult.getCurrentResultIndex();
  if (rowIndex < 0 || rowIndex >= this.odiResult.getRowCount())   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,new Integer(rowIndex));
 else   if (rowIndex < currRowIndex)   throw new DataException(ResourceConstants.BACKWARD_SEEK_ERROR);
 else   if (rowIndex == currRowIndex)   return;
  int gapRows=rowIndex - currRowIndex;
  for (int i=0; i < gapRows; i++)   this.next();
}","public void moveTo(int rowIndex) throws BirtException {
  checkStarted();
  if (state == BEFORE_FIRST_ROW) {
    clear();
    this.prepareCurrentRow();
    state=ON_ROW;
  }
  int currRowIndex=odiResult.getCurrentResultIndex();
  if (rowIndex < 0 || rowIndex >= this.odiResult.getRowCount())   throw new DataException(ResourceConstants.INVALID_ROW_INDEX,new Integer(rowIndex));
 else   if (rowIndex < currRowIndex)   throw new DataException(ResourceConstants.BACKWARD_SEEK_ERROR);
 else   if (rowIndex == currRowIndex)   return;
  int gapRows=rowIndex - currRowIndex;
  for (int i=0; i < gapRows; i++)   this.next();
}",0.9893704006541292
75235,"private void testPriority(final String testDir){
  FontConfigReader reader=new FontConfigReader(){
    protected URL getURL(    String configFile){
      URL fileURL=getClass().getResource(""String_Node_Str"" + testDir + ""String_Node_Str""+ configFile);
      return fileURL;
    }
  }
;
  reader.initialize();
  FontMappingManager manager=reader.getFontMappingManager();
  testMergedProperty(manager.getFontAliases(),8);
  testMergedProperty(manager.getFontEncodings(),9);
  Map compositeFonts=manager.getCompositeFonts();
  assertEquals(3,compositeFonts.size());
  String fontName=""String_Node_Str"";
  compositeFonts.get(fontName);
  Map compositeFont1=(Map)compositeFonts.get(fontName);
  assertEquals(1,compositeFont1.size());
  assertTrue(compositeFonts.containsKey(""String_Node_Str""));
  assertTrue(compositeFonts.containsKey(""String_Node_Str""));
}","private void testPriority(final String testDir,String format){
  FontConfigReader reader=new FontConfigReader(){
    protected URL getURL(    String configFile){
      URL fileURL=getClass().getResource(""String_Node_Str"" + testDir + ""String_Node_Str""+ configFile);
      return fileURL;
    }
  }
;
  reader.initialize();
  FontMappingManager manager=null;
  if (format == null) {
    manager=reader.getFontMappingManager();
  }
 else {
    reader.parseFormatRelatedConfigFile(format);
    manager=reader.getFontMappingManager();
  }
  testMergedProperty(manager.getFontAliases(),8);
  testMergedProperty(manager.getFontEncodings(),9);
  Map compositeFonts=manager.getCompositeFonts();
  assertEquals(3,compositeFonts.size());
  String fontName=""String_Node_Str"";
  compositeFonts.get(fontName);
  Map compositeFont1=(Map)compositeFonts.get(fontName);
  assertEquals(1,compositeFont1.size());
  assertTrue(compositeFonts.containsKey(""String_Node_Str""));
  assertTrue(compositeFonts.containsKey(""String_Node_Str""));
}",0.9116229244777718
75236,"/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
      }
 catch (      OdaException e1) {
        MessageDialog.openError(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e1.getLocalizedMessage());
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}","/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),null);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(e1.getLocalizedMessage()),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}",0.9579326923076924
75237,"public void buildUI(Composite parent){
  super.buildUI(parent);
  ComboPropertyDescriptorProvider layoutProvider=new ComboPropertyDescriptorProvider(ReportDesignHandle.LAYOUT_PREFERENCE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  ComboSection layoutSection=new ComboSection(layoutProvider.getDisplayName(),container,true);
  layoutSection.setProvider(layoutProvider);
  layoutSection.setWidth(500);
  layoutSection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_LAYOUT_PREFERENCE,layoutSection);
  TextPropertyDescriptorProvider displayProvider=new TextPropertyDescriptorProvider(ModuleHandle.DISPLAY_NAME_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  TextSection displaySection=new TextSection(displayProvider.getDisplayName(),container,true);
  displaySection.setProvider(displayProvider);
  displaySection.setWidth(500);
  displaySection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_DISPLAY,displaySection);
  TextPropertyDescriptorProvider prvImageProvider=new TextPropertyDescriptorProvider(ReportDesignHandle.ICON_FILE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  prvImageSection=new TextAndTwoButtonSection(prvImageProvider.getDisplayName(),container,true);
  prvImageSection.setProvider(prvImageProvider);
  prvImageSection.addSecondSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ThumbnailBuilder dialog=new ThumbnailBuilder();
      dialog.setImageName(prvImageSection.getTextControl().getText());
      ReportDesignHandle handle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
      dialog.setReportDesignHandle(handle);
      if (dialog.open() != Dialog.OK) {
        Image image=dialog.getImage();
        if (image != null) {
          image.dispose();
          image=null;
        }
        return;
      }
      if (dialog.shouldSetThumbnail()) {
        Image image=dialog.getImage();
        ImageData imageData=image.getImageData();
        ImageLoader imageLoader=new ImageLoader();
        imageLoader.data=new ImageData[1];
        imageLoader.data[0]=imageData;
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        imageLoader.save(outputStream,SWT.IMAGE_BMP);
        try {
          handle.setThumbnail(outputStream.toByteArray());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
        if (image != null) {
          image.dispose();
          image=null;
        }
        prvImageSection.setStringValue(dialog.getImageName());
        prvImageSection.forceFocus();
      }
 else {
        if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
          try {
            handle.deleteThumbnail();
          }
 catch (          SemanticException e1) {
            ExceptionHandler.handle(e1);
          }
        }
        prvImageSection.setStringValue(""String_Node_Str"");
        prvImageSection.forceFocus();
      }
    }
  }
);
  prvImageSection.setWidth(500);
  prvImageSection.setSecondButtonText(Messages.getString(""String_Node_Str""));
  prvImageSection.setSecondButtonTooltipText(Messages.getString(""String_Node_Str""));
  addSection(PageSectionId.REPORT_PRVIMAGE,prvImageSection);
  createSections();
  layoutSections();
}","public void buildUI(Composite parent){
  super.buildUI(parent);
  ComboPropertyDescriptorProvider layoutProvider=new ComboPropertyDescriptorProvider(ReportDesignHandle.LAYOUT_PREFERENCE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  ComboSection layoutSection=new ComboSection(layoutProvider.getDisplayName(),container,true);
  layoutSection.setProvider(layoutProvider);
  layoutSection.setWidth(500);
  layoutSection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_LAYOUT_PREFERENCE,layoutSection);
  TextPropertyDescriptorProvider displayProvider=new TextPropertyDescriptorProvider(ModuleHandle.DISPLAY_NAME_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  TextSection displaySection=new TextSection(displayProvider.getDisplayName(),container,true);
  displaySection.setProvider(displayProvider);
  displaySection.setWidth(500);
  displaySection.setGridPlaceholder(2,true);
  addSection(PageSectionId.REPORT_DISPLAY,displaySection);
  TextPropertyDescriptorProvider prvImageProvider=new TextPropertyDescriptorProvider(ReportDesignHandle.ICON_FILE_PROP,ReportDesignConstants.REPORT_DESIGN_ELEMENT);
  prvImageSection=new TextAndTwoButtonSection(prvImageProvider.getDisplayName(),container,true);
  prvImageSection.setProvider(prvImageProvider);
  prvImageSection.addSecondSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      ThumbnailBuilder dialog=new ThumbnailBuilder();
      dialog.setImageName(prvImageSection.getTextControl().getText());
      ReportDesignHandle handle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
      dialog.setReportDesignHandle(handle);
      if (dialog.open() != Dialog.OK) {
        Image image=dialog.getImage();
        if (image != null) {
          image.dispose();
          image=null;
        }
        return;
      }
      if (dialog.shouldSetThumbnail()) {
        Image image=dialog.getImage();
        ImageData imageData=image.getImageData();
        ImageLoader imageLoader=new ImageLoader();
        imageLoader.data=new ImageData[1];
        imageLoader.data[0]=imageData;
        ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
        imageLoader.save(outputStream,SWT.IMAGE_BMP);
        try {
          handle.setThumbnail(outputStream.toByteArray());
        }
 catch (        SemanticException e1) {
          ExceptionHandler.handle(e1);
        }
        if (image != null) {
          image.dispose();
          image=null;
        }
        prvImageSection.setStringValue(dialog.getImageName());
        prvImageSection.forceFocus();
      }
 else {
        if (handle.getThumbnail() != null && handle.getThumbnail().length != 0) {
          try {
            handle.deleteThumbnail();
          }
 catch (          SemanticException e1) {
            ExceptionHandler.handle(e1);
          }
        }
        prvImageSection.setStringValue(""String_Node_Str"");
        prvImageSection.forceFocus();
      }
    }
  }
);
  prvImageSection.setWidth(500);
  prvImageSection.setSecondButtonText(""String_Node_Str"");
  prvImageSection.setSecondButtonTooltipText(Messages.getString(""String_Node_Str""));
  addSection(PageSectionId.REPORT_PRVIMAGE,prvImageSection);
  createSections();
  layoutSections();
}",0.9969604863221884
75238,"/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),null);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(e1.getLocalizedMessage()),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}","/** 
 * Adds event listeners
 */
private void addControlListeners(){
  jdbcUrl.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!jdbcUrl.isFocusControl() && jdbcUrl.getText().trim().length() == 0) {
        return;
      }
      verifyJDBCProperties();
      updateTestButton();
    }
  }
);
  testButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      testButton.setEnabled(false);
      try {
        if (testConnection()) {
          MessageDialog.openInformation(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""));
        }
 else {
          OdaException ex=new OdaException(JdbcPlugin.getResourceString(""String_Node_Str""));
          ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(""String_Node_Str""),ex);
        }
      }
 catch (      OdaException e1) {
        ExceptionHandler.showException(getShell(),JdbcPlugin.getResourceString(""String_Node_Str""),JdbcPlugin.getResourceString(e1.getLocalizedMessage()),e1);
      }
      testButton.setEnabled(true);
    }
  }
);
  manageButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      JdbcDriverManagerDialog dlg=new JdbcDriverManagerDialog(getShell());
      manageButton.setEnabled(false);
      testButton.setEnabled(false);
      if (dlg.open() == Window.OK) {
        BusyIndicator.showWhile(getShell() == null ? null : getShell().getDisplay(),new Runnable(){
          public void run(){
            okPressedProcess();
          }
        }
);
      }
      updateTestButton();
      manageButton.setEnabled(true);
    }
  }
);
}",0.9714779602420052
75239,"protected String handleTempImage(IImage image,String prefix,boolean needMap){
  try {
    File imageFile=File.createTempFile(prefix,""String_Node_Str"");
    image.writeImage(imageFile);
    String fileName=imageFile.getAbsolutePath();
    if (needMap) {
      String mapID=getImageMapID(image);
      map.put(mapID,fileName);
    }
    return fileName;
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,e.getMessage(),e);
  }
  return ""String_Node_Str"";
}","protected String handleTempImage(IImage image,String prefix,boolean needMap){
  try {
    File imageFile=File.createTempFile(prefix,""String_Node_Str"");
    image.writeImage(imageFile);
    String fileName=imageFile.getAbsolutePath();
    if (needMap) {
      String mapID=getImageMapID(image);
synchronized (map) {
        map.put(mapID,fileName);
      }
    }
    return fileName;
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,e.getMessage(),e);
  }
  return ""String_Node_Str"";
}",0.967402733964248
75240,"/** 
 * handles an image report item and returns an image URL
 * @param image represents the image design information
 * @param context context information
 * @param prefix image prefix in URL
 * @param needMap whether image map is needed
 * @return URL for the image
 */
protected String handleImage(IImage image,Object context,String prefix,boolean needMap){
  String mapID=null;
  if (needMap) {
    mapID=getImageMapID(image);
    if (map.containsKey(mapID)) {
      return (String)map.get(mapID);
    }
  }
  String ret=null;
  if (context != null && (context instanceof HTMLRenderContext)) {
    HTMLRenderContext myContext=(HTMLRenderContext)context;
    String imageURL=myContext.getBaseImageURL();
    String imageDir=myContext.getImageDirectory();
    if (imageURL == null || imageURL.length() == 0 || imageDir == null || imageDir.length() == 0) {
      log.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    String fileName;
    File file;
    String extension=image.getExtension();
    if (extension != null && extension.length() > 0) {
      fileName=createUniqueFileName(imageDir,prefix,extension);
    }
 else {
      fileName=createUniqueFileName(imageDir,prefix);
    }
    file=new File(imageDir,fileName);
    try {
      image.writeImage(file);
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,e.getMessage(),e);
    }
    if (imageURL.indexOf(""String_Node_Str"") > 0) {
      ret=imageURL + fileName;
    }
 else     if (imageURL.endsWith(""String_Node_Str"")) {
      ret=imageURL + fileName;
    }
 else {
      ret=imageURL + ""String_Node_Str"" + fileName;
    }
    if (needMap) {
      map.put(mapID,ret);
    }
  }
 else {
    ret=handleTempImage(image,prefix,needMap);
  }
  return ret;
}","/** 
 * handles an image report item and returns an image URL
 * @param image represents the image design information
 * @param context context information
 * @param prefix image prefix in URL
 * @param needMap whether image map is needed
 * @return URL for the image
 */
protected String handleImage(IImage image,Object context,String prefix,boolean needMap){
  String mapID=null;
  if (needMap) {
    mapID=getImageMapID(image);
    if (map.containsKey(mapID)) {
synchronized (map) {
        return (String)map.get(mapID);
      }
    }
  }
  String ret=null;
  if (context != null && (context instanceof HTMLRenderContext)) {
    HTMLRenderContext myContext=(HTMLRenderContext)context;
    String imageURL=myContext.getBaseImageURL();
    String imageDir=myContext.getImageDirectory();
    if (imageURL == null || imageURL.length() == 0 || imageDir == null || imageDir.length() == 0) {
      log.log(Level.SEVERE,""String_Node_Str"");
      return null;
    }
    String fileName;
    File file;
    String extension=image.getExtension();
    if (extension != null && extension.length() > 0) {
      fileName=createUniqueFileName(imageDir,prefix,extension);
    }
 else {
      fileName=createUniqueFileName(imageDir,prefix);
    }
    file=new File(imageDir,fileName);
    try {
      image.writeImage(file);
    }
 catch (    IOException e) {
      log.log(Level.SEVERE,e.getMessage(),e);
    }
    if (imageURL.indexOf(""String_Node_Str"") > 0) {
      ret=imageURL + fileName;
    }
 else     if (imageURL.endsWith(""String_Node_Str"")) {
      ret=imageURL + fileName;
    }
 else {
      ret=imageURL + ""String_Node_Str"" + fileName;
    }
    if (needMap) {
synchronized (map) {
        map.put(mapID,ret);
      }
    }
  }
 else {
    ret=handleTempImage(image,prefix,needMap);
  }
  return ret;
}",0.9824957651044608
75241,"/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  HashMap cssStyle=null;
  if (!ele.hasAttribute(""String_Node_Str"")) {
    cssStyle=new HashMap();
  }
 else {
    cssParser.ReInit(new StringReader(ele.getAttribute(""String_Node_Str"")));
    cssParser.setCssStatement(ele.getAttribute(""String_Node_Str""));
    try {
      cssParser.parse();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
    }
    cssStyle=cssParser.getCssProperties();
    ele.removeAttribute(""String_Node_Str"");
    String src=(String)cssStyle.get(""String_Node_Str"");
    if (src != null) {
      if (src.startsWith(""String_Node_Str"") && src.length() > 5) {
        src=src.substring(4,src.length() - 1);
      }
 else       if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
        src=src.substring(1,src.length() - 1);
      }
      if (design != null) {
        URL url=design.findResource(src,IResourceLocator.IMAGE);
        if (url != null) {
          src=url.toExternalForm();
        }
      }
      if (rootPath != null) {
        if (FileUtil.isLocalResource(src)) {
          src=FileUtil.getAbsolutePath(rootPath,src);
        }
      }
      if (src != null) {
        cssStyle.put(""String_Node_Str"",src);
      }
 else {
        cssStyle.remove(""String_Node_Str"");
      }
    }
  }
  if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    if (ele.hasAttribute(""String_Node_Str"")) {
      try {
        int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
        addToStyle(cssStyle,""String_Node_Str"",FONT_SIZE[size - 1]);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    String decoration=(String)cssStyle.get(""String_Node_Str"");
    if (decoration != null && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1) {
      decoration=decoration + ""String_Node_Str"";
    }
 else     if (decoration == null) {
      decoration=""String_Node_Str"";
    }
    cssStyle.put(""String_Node_Str"",decoration);
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    String src=ele.getAttribute(""String_Node_Str"");
    if (src != null) {
      if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
        src=src.substring(1,src.length() - 1);
      }
      if (design != null) {
        URL url=design.findResource(src,IResourceLocator.IMAGE);
        if (url != null) {
          src=url.toExternalForm();
        }
      }
      if (rootPath != null) {
        if (FileUtil.isLocalResource(src)) {
          src=FileUtil.getAbsolutePath(rootPath,src);
        }
      }
      if (src != null) {
        ele.removeAttribute(""String_Node_Str"");
        ele.setAttribute(""String_Node_Str"",src);
      }
    }
  }
  styles.put(ele,cssStyle);
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}","/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  HashMap cssStyle=null;
  if (!ele.hasAttribute(""String_Node_Str"")) {
    cssStyle=new HashMap();
  }
 else {
    cssParser.ReInit(new StringReader(ele.getAttribute(""String_Node_Str"")));
    cssParser.setCssStatement(ele.getAttribute(""String_Node_Str""));
    try {
      cssParser.parse();
    }
 catch (    Exception e) {
      logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
    }
    cssStyle=cssParser.getCssProperties();
    ele.removeAttribute(""String_Node_Str"");
    String src=(String)cssStyle.get(""String_Node_Str"");
    if (src != null) {
      if (src.startsWith(""String_Node_Str"") && src.length() > 5) {
        src=src.substring(4,src.length() - 1);
      }
 else       if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
        src=src.substring(1,src.length() - 1);
      }
      if (design != null) {
        URL url=design.findResource(src,IResourceLocator.IMAGE);
        if (url != null) {
          src=url.toExternalForm();
        }
      }
      if (rootPath != null) {
        if (FileUtil.isLocalResource(src)) {
          src=FileUtil.getAbsolutePath(rootPath,src);
        }
      }
      if (src != null) {
        cssStyle.put(""String_Node_Str"",src);
      }
 else {
        cssStyle.remove(""String_Node_Str"");
      }
    }
  }
  if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    addToStyle(cssStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    if (ele.hasAttribute(""String_Node_Str"")) {
      try {
        int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
        addToStyle(cssStyle,""String_Node_Str"",FONT_SIZE[size + 7]);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    addToStyle(cssStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    String decoration=(String)cssStyle.get(""String_Node_Str"");
    if (decoration != null && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1 && decoration.indexOf(""String_Node_Str"") == -1) {
      decoration=decoration + ""String_Node_Str"";
    }
 else     if (decoration == null) {
      decoration=""String_Node_Str"";
    }
    cssStyle.put(""String_Node_Str"",decoration);
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    String src=ele.getAttribute(""String_Node_Str"");
    if (src != null) {
      if ((src.startsWith(""String_Node_Str"") || src.startsWith(""String_Node_Str"")) && src.length() > 2) {
        src=src.substring(1,src.length() - 1);
      }
      if (design != null) {
        URL url=design.findResource(src,IResourceLocator.IMAGE);
        if (url != null) {
          src=url.toExternalForm();
        }
      }
      if (rootPath != null) {
        if (FileUtil.isLocalResource(src)) {
          src=FileUtil.getAbsolutePath(rootPath,src);
        }
      }
      if (src != null) {
        ele.removeAttribute(""String_Node_Str"");
        ele.setAttribute(""String_Node_Str"",src);
      }
    }
  }
  styles.put(ele,cssStyle);
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}",0.9993133440146488
75242,"/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  StyleDeclaration style=null;
  StringBuffer strStyle=new StringBuffer();
  if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    if (ele.hasAttribute(""String_Node_Str"")) {
      try {
        int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
        appendStyle(strStyle,""String_Node_Str"",FONT_SIZE[size - 1]);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
  try {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      strStyle.append(inlineStyle);
    }
    if (strStyle.length() > 0) {
      style=(StyleDeclaration)cssEngine.parseStyleDeclaration(strStyle.toString());
      styles.put(ele,style);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
  }
  ele.removeAttribute(""String_Node_Str"");
  if (style != null) {
    CSSValue value=(CSSValue)style.getProperty(StyleConstants.STYLE_BACKGROUND_IMAGE);
    if (value != null && value instanceof URIValue) {
      String bgi=((URIValue)value).getStringValue();
      if ((null != bgi) && (!""String_Node_Str"".equals(bgi))) {
        if (report != null) {
          if (FileUtil.isLocalResource(bgi)) {
            URL url=report.findResource(bgi,IResourceLocator.IMAGE);
            if (url != null) {
              String fileName=url.getFile();
              if (fileName != null) {
                bgi=fileName;
              }
            }
          }
 else {
            bgi=""String_Node_Str"" + bgi + ""String_Node_Str"";
          }
        }
        if (bgi != null) {
          style.setBackgroundImage(bgi);
        }
 else {
          style.removeProperty(""String_Node_Str"");
        }
      }
    }
  }
  if (style != null) {
    styles.put(ele,style);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}","/** 
 * Parses the style attribute of the element node and converts the deprecated element node in HTML 4.0, and calls it on its children element nodes recursively
 * @param ele the element node in the DOM tree
 * @param text the text content object
 */
public void execute(Element ele,HashMap styles){
  StyleDeclaration style=null;
  StringBuffer strStyle=new StringBuffer();
  if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
 else   if (""String_Node_Str"".equals(ele.getTagName())) {
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    appendStyle(strStyle,""String_Node_Str"",ele.getAttribute(""String_Node_Str""));
    if (ele.hasAttribute(""String_Node_Str"")) {
      try {
        int size=Integer.parseInt(ele.getAttribute(""String_Node_Str""));
        appendStyle(strStyle,""String_Node_Str"",FONT_SIZE[size + 7]);
      }
 catch (      Exception e) {
        logger.log(Level.SEVERE,""String_Node_Str"");
      }
    }
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele.removeAttribute(""String_Node_Str"");
    ele=replaceElement(ele,""String_Node_Str"");
  }
  try {
    String inlineStyle=ele.getAttribute(""String_Node_Str"");
    if (null != inlineStyle && !""String_Node_Str"".equals(inlineStyle)) {
      strStyle.append(inlineStyle);
    }
    if (strStyle.length() > 0) {
      style=(StyleDeclaration)cssEngine.parseStyleDeclaration(strStyle.toString());
      styles.put(ele,style);
    }
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,""String_Node_Str"" + ele.getAttribute(""String_Node_Str""),e);
  }
  ele.removeAttribute(""String_Node_Str"");
  if (style != null) {
    CSSValue value=(CSSValue)style.getProperty(StyleConstants.STYLE_BACKGROUND_IMAGE);
    if (value != null && value instanceof URIValue) {
      String bgi=((URIValue)value).getStringValue();
      if ((null != bgi) && (!""String_Node_Str"".equals(bgi))) {
        if (report != null) {
          if (FileUtil.isLocalResource(bgi)) {
            URL url=report.findResource(bgi,IResourceLocator.IMAGE);
            if (url != null) {
              String fileName=url.getFile();
              if (fileName != null) {
                bgi=fileName;
              }
            }
          }
 else {
            bgi=""String_Node_Str"" + bgi + ""String_Node_Str"";
          }
        }
        if (bgi != null) {
          style.setBackgroundImage(bgi);
        }
 else {
          style.removeProperty(""String_Node_Str"");
        }
      }
    }
  }
  if (style != null) {
    styles.put(ele,style);
  }
  for (int i=0; i < ele.getChildNodes().getLength(); i++) {
    Node child=ele.getChildNodes().item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      execute((Element)child,styles);
    }
  }
}",0.9990154250082048
75243,"public void testRWLongString(){
  String begin=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer(begin);
  for (int i=1; i < 65537; i++) {
    buffer.append(i);
  }
  DataOutputStream dos=null;
  DataInputStream dis=null;
  try {
    boolean correct=true;
    final int size=600000;
    byte[] content=null;
    ByteArrayOutputStream bos=new ByteArrayOutputStream(size);
    dos=new DataOutputStream(bos);
    IOUtil.writeString(dos,buffer.toString());
    content=bos.toByteArray();
    ByteArrayInputStream bis=new ByteArrayInputStream(content);
    dis=new DataInputStream(bis);
    String ret=IOUtil.readString(dis);
    StringBuffer buf=new StringBuffer(ret);
    if (buf.length() != buffer.length())     correct=false;
 else {
      for (int i=1; i < buf.length(); i++) {
        if (buffer.charAt(i) != buf.charAt(i)) {
          correct=false;
          break;
        }
      }
    }
    assertTrue(""String_Node_Str"",correct);
    final int size2=600005;
    bos=new ByteArrayOutputStream(size2);
    dos=new DataOutputStream(bos);
    IOUtil.writeObject(dos,ret);
    content=bos.toByteArray();
    bis=new ByteArrayInputStream(content);
    dis=new DataInputStream(bis);
    Object obj=IOUtil.readObject(dis);
    assertTrue(""String_Node_Str"",((String)obj).startsWith(begin));
    buf=new StringBuffer((String)obj);
    if (buf.length() != buffer.length())     correct=false;
 else {
      for (int i=1; i < buf.length(); i++) {
        if (buffer.charAt(i) != buf.charAt(i)) {
          correct=false;
          break;
        }
      }
    }
    assertTrue(""String_Node_Str"",correct);
  }
 catch (  FileNotFoundException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
}","public void testRWLongString() throws IOException, FileNotFoundException {
  String begin=""String_Node_Str"";
  StringBuffer buffer=new StringBuffer(begin);
  for (int i=1; i < 65537; i++) {
    buffer.append(i);
  }
  DataOutputStream dos=null;
  DataInputStream dis=null;
  boolean correct=true;
  final int size=600000;
  byte[] content=null;
  ByteArrayOutputStream bos=new ByteArrayOutputStream(size);
  dos=new DataOutputStream(bos);
  IOUtil.writeString(dos,buffer.toString());
  content=bos.toByteArray();
  ByteArrayInputStream bis=new ByteArrayInputStream(content);
  dis=new DataInputStream(bis);
  String ret=IOUtil.readString(dis);
  StringBuffer buf=new StringBuffer(ret);
  if (buf.length() != buffer.length())   correct=false;
 else {
    for (int i=1; i < buf.length(); i++) {
      if (buffer.charAt(i) != buf.charAt(i)) {
        correct=false;
        break;
      }
    }
  }
  assertTrue(""String_Node_Str"",correct);
  final int size2=600005;
  bos=new ByteArrayOutputStream(size2);
  dos=new DataOutputStream(bos);
  IOUtil.writeObject(dos,ret);
  content=bos.toByteArray();
  bis=new ByteArrayInputStream(content);
  dis=new DataInputStream(bis);
  Object obj=IOUtil.readObject(dis);
  assertTrue(""String_Node_Str"",((String)obj).startsWith(begin));
  buf=new StringBuffer((String)obj);
  if (buf.length() != buffer.length())   correct=false;
 else {
    for (int i=1; i < buf.length(); i++) {
      if (buffer.charAt(i) != buf.charAt(i)) {
        correct=false;
        break;
      }
    }
  }
  assertTrue(""String_Node_Str"",correct);
}",0.8673771462403789
75244,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle cellAreaStyle=cellArea.getStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  if (lastCellContent != null && lastCellContent.getColumn() < columnID) {
    leftCellContentStyle=lastCellContent.getComputedStyle();
  }
  Row lastRow=null;
  if (rows.size() > 0) {
    lastRow=(Row)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
 else {
    if (isFirst) {
      bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
  lastCellContent=(ICellContent)cellContent;
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle cellAreaStyle=cellArea.getStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  Row lastRow=null;
  if (rows.size() > 0) {
    lastRow=(Row)rows.getCurrent();
  }
  leftCellContentStyle=getLeftCellContentStyle(lastRow,columnID);
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
 else {
    if (isFirst) {
      bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null,cellAreaStyle);
    }
    if (columnID == 0) {
      bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
 else {
      bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle,cellAreaStyle);
    }
    if (columnID + colSpan == columnNumber) {
      bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle,cellAreaStyle);
    }
  }
  lastCellContent=(ICellContent)cellContent;
}",0.4997991161108879
75245,"public void startForeign(IForeignContent foreign){
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    HTML2Content convert=new HTML2Content(foreign.getReportContent().getDesign().getReportDesign());
    convert.html2Content(foreign);
    HyperlinkDef link=parseHyperLink(foreign);
    engine.addContainer(foreign.getComputedStyle(),link);
    contentVisitor.visitChildren(foreign,null);
    engine.endContainer();
  }
}","public void startForeign(IForeignContent foreign){
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    HyperlinkDef link=parseHyperLink(foreign);
    engine.addContainer(foreign.getComputedStyle(),link);
    contentVisitor.visitChildren(foreign,null);
    engine.endContainer();
  }
}",0.8793969849246231
75246,"public Object visitForeign(IForeignContent foreign,Object value){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    if (converter == null) {
      converter=new HTML2Content(foreign.getReportContent().getDesign().getReportDesign());
    }
    converter.html2Content(foreign);
    executor=new DOMReportItemExecutor(foreign);
    executor.execute();
    return visitContent(foreign,value);
  }
  LabelContent label=new LabelContent(foreign);
  return handleText(label);
}","public Object visitForeign(IForeignContent foreign,Object value){
  if (IForeignContent.HTML_TYPE.equals(foreign.getRawType())) {
    HTML2Content.html2Content(foreign);
    executor=new DOMReportItemExecutor(foreign);
    executor.execute();
    return visitContent(foreign,value);
  }
  LabelContent label=new LabelContent(foreign);
  return handleText(label);
}",0.8544600938967136
75247,"/** 
 * private utility method to check whether it is a long string 
 * @param str
 * @return true if it is a long string
 */
private static boolean isLongString(String str){
  int strlen=str.length();
  int utflen=0;
  int c=0;
  for (int i=0; i < strlen; i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      utflen++;
    }
 else     if (c > 0x07FF) {
      utflen+=3;
    }
 else {
      utflen+=2;
    }
  }
  if (utflen > 65535) {
    return true;
  }
 else {
    return false;
  }
}","/** 
 * private utility method to check whether it is a long string 
 * @param str
 * @return true if it is a long string
 */
private static boolean isLongString(String str){
  int strlen=str.length();
  if (strlen > 65535) {
    return true;
  }
 else   if (strlen < 21845) {
    return false;
  }
  int utflen=getBytesSize(str);
  if (utflen > 65535) {
    return true;
  }
 else {
    return false;
  }
}",0.5119825708061002
75248,"/** 
 * private utility method to write a UTF String to a DataOutputStream
 * @param str
 * @throws UTFDataFormatException
 */
private static void writeUTF(DataOutputStream dos,String str) throws IOException {
  byte[] longBytes=convertString2Bytes(str);
  dos.writeInt(longBytes.length);
  dos.write(longBytes,0,longBytes.length);
}","/** 
 * private utility method to write a UTF String to a DataOutputStream
 * @param str
 * @throws UTFDataFormatException
 */
private static void writeUTF(DataOutputStream dos,String str) throws IOException {
  int strlen=str.length();
  int c=0;
  int utflen=getBytesSize(str);
  dos.writeInt(utflen);
  int i=0;
  for (; i < strlen; i++) {
    c=str.charAt(i);
    if (!((c >= 0x0001) && (c <= 0x007F)))     break;
    dos.writeByte((byte)c);
  }
  for (; i < strlen; i++) {
    c=str.charAt(i);
    if ((c >= 0x0001) && (c <= 0x007F)) {
      dos.writeByte((byte)c);
    }
 else     if (c > 0x07FF) {
      dos.writeByte((byte)(0xE0 | ((c >> 12) & 0x0F)));
      dos.writeByte((byte)(0x80 | ((c >> 6) & 0x3F)));
      dos.writeByte((byte)(0x80 | ((c >> 0) & 0x3F)));
    }
 else {
      dos.writeByte((byte)(0xC0 | ((c >> 6) & 0x1F)));
      dos.writeByte((byte)(0x80 | ((c >> 0) & 0x3F)));
    }
  }
}",0.3761097659402744
75249,"/** 
 * private utility method to convert a byte[] to String
 * @param bytearre
 * @throws UTFDataFormatException
 */
private static String convertBytes2String(byte[] bytearr) throws UTFDataFormatException {
  int utflen=bytearr.length;
  char[] chararr=new char[utflen];
  int c, char2, char3;
  int count=0;
  int chararr_count=0;
  while (count < utflen) {
    c=(int)bytearr[count] & 0xff;
    if (c > 127)     break;
    count++;
    chararr[chararr_count++]=(char)c;
  }
  while (count < utflen) {
    c=(int)bytearr[count] & 0xff;
switch (c >> 4) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
      count++;
    chararr[chararr_count++]=(char)c;
  break;
case 12:
case 13:
count+=2;
if (count > utflen) throw new UTFDataFormatException(""String_Node_Str"");
char2=(int)bytearr[count - 1];
if ((char2 & 0xC0) != 0x80) throw new UTFDataFormatException(""String_Node_Str"" + count);
chararr[chararr_count++]=(char)(((c & 0x1F) << 6) | (char2 & 0x3F));
break;
case 14:
count+=3;
if (count > utflen) throw new UTFDataFormatException(""String_Node_Str"");
char2=(int)bytearr[count - 2];
char3=(int)bytearr[count - 1];
if (((char2 & 0xC0) != 0x80) || ((char3 & 0xC0) != 0x80)) throw new UTFDataFormatException(""String_Node_Str"" + (count - 1));
chararr[chararr_count++]=(char)(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
break;
default :
throw new UTFDataFormatException(""String_Node_Str"" + count);
}
}
return new String(chararr,0,chararr_count);
}","/** 
 * private utility method to convert a byte[] to String
 * @param bytearre
 * @throws UTFDataFormatException
 */
private static String convertBytes2String(byte[] bytearr) throws UTFDataFormatException {
  int utflen=bytearr.length;
  char[] chararr=new char[utflen];
  int c;
  int chararr_count=0;
  int count=0;
  while (count < utflen) {
    c=(int)bytearr[count] & 0xff;
    if (c > 127)     break;
    count++;
    chararr[chararr_count++]=(char)c;
  }
  chararr_count=generateCharArray(chararr,bytearr,count,chararr_count);
  return new String(chararr,0,chararr_count);
}",0.4922630560928433
75250,"/** 
 * This method is used to validate the column binding to see if it contains aggregations. If so then return true, else return false;
 * @param columnBindings
 * @param boundColumnName
 * @throws BirtException
 */
private boolean referToAggregation(List bindings,String boundColumnName) throws BirtException {
  if (boundColumnName == null)   return true;
  Iterator columnBindings=bindings.iterator();
  while (columnBindings != null && columnBindings.hasNext()) {
    IComputedColumn column=this.modelAdaptor.adaptComputedColumn((ComputedColumnHandle)columnBindings.next());
    if (column.getName().equals(boundColumnName)) {
      ScriptExpression sxp=(ScriptExpression)column.getExpression();
      if (ExpressionUtil.hasAggregation(sxp.getText())) {
        return true;
      }
 else {
        Iterator columnBindingNameIt=ExpressionUtil.extractColumnExpressions(sxp.getText()).iterator();
        while (columnBindingNameIt.hasNext()) {
          IColumnBinding columnBinding=(IColumnBinding)columnBindingNameIt.next();
          if (referToAggregation(bindings,columnBinding.getResultSetColumnName()))           return true;
        }
      }
    }
  }
  return false;
}","/** 
 * This method is used to validate the column binding to see if it contains aggregations. If so then return true, else return false;
 * @param columnBindings
 * @param boundColumnName
 * @throws BirtException
 */
private boolean referToAggregation(List bindings,String boundColumnName) throws BirtException {
  if (boundColumnName == null)   return true;
  Iterator columnBindings=bindings.iterator();
  while (columnBindings != null && columnBindings.hasNext()) {
    IComputedColumn column=this.modelAdaptor.adaptComputedColumn((ComputedColumnHandle)columnBindings.next());
    if (column.getName().equals(boundColumnName)) {
      ScriptExpression sxp=(ScriptExpression)column.getExpression();
      if (column.getAggregateFunction() != null || ExpressionUtil.hasAggregation(sxp.getText())) {
        return true;
      }
 else {
        Iterator columnBindingNameIt=ExpressionUtil.extractColumnExpressions(sxp.getText()).iterator();
        while (columnBindingNameIt.hasNext()) {
          IColumnBinding columnBinding=(IColumnBinding)columnBindingNameIt.next();
          if (referToAggregation(bindings,columnBinding.getResultSetColumnName()))           return true;
        }
      }
    }
  }
  return false;
}",0.9829663481512256
75251,"protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  composite.setLayout(layout);
  SashForm sashForm=new SashForm(composite,SWT.NONE);
  sashForm.setOrientation(SWT.HORIZONTAL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTreeViewer(sashForm);
  createPropertyPane(sashForm);
  sashForm.setWeights(new int[]{20,80});
  Label label=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  initTreeSelection();
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.marginWidth=convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);
  layout.marginHeight=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);
  layout.verticalSpacing=convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
  composite.setLayout(layout);
  sashForm=new SashForm(composite,SWT.NONE);
  sashForm.setOrientation(SWT.HORIZONTAL);
  sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
  createTreeViewer(sashForm);
  createPropertyPane(sashForm);
  Label label=new Label(composite,SWT.HORIZONTAL | SWT.SEPARATOR);
  label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  initTreeSelection();
  return composite;
}",0.973175965665236
75252,"public void dispose(){
  if (getCommandStack() != null) {
    WrapperCommandStack stack=(WrapperCommandStack)getCommandStack();
    stack.removeCommandStackListener(getCommandStackListener());
  }
  super.dispose();
}","public void dispose(){
  if (getCommandStack() != null && getCommandStack() instanceof WrapperCommandStack) {
    WrapperCommandStack stack=(WrapperCommandStack)getCommandStack();
    stack.removeCommandStackListener(getCommandStackListener());
  }
  super.dispose();
}",0.8930041152263375
75253,"/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#findTocByName(java.lang.String,java.lang.String,org.eclipse.birt.report.service.api.InputOptions)
 */
public String findTocByName(String docName,String name,InputOptions options){
}","/** 
 * @see org.eclipse.birt.report.service.api.IViewerReportService#findTocByName(java.lang.String,java.lang.String,org.eclipse.birt.report.service.api.InputOptions)
 */
public String findTocByName(String docName,String name,InputOptions options){
  IReportDocument doc=ReportEngineService.getInstance().openReportDocument(getReportDesignName(options),docName,getModuleOptions(options));
  if (doc == null)   return null;
  try {
    return BirtUtility.findTocByName(doc,name,options);
  }
  finally {
    doc.close();
  }
}",0.646074646074646
75254,"/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null)       resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    if (resourceFolder != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
    }
    if (action.getBookmark() != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(action.getBookmark(),ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}","/** 
 * builds URL for drillthrough action
 * @param action instance of the IAction instance
 * @param context the context for building the action string
 * @return a URL
 */
protected String buildDrillAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   baseURL=IBirtConstants.VIEWER_PREVIEW;
  StringBuffer link=new StringBuffer();
  String reportName=getReportName(context,action);
  if (reportName != null && !reportName.equals(""String_Node_Str"")) {
    link.append(baseURL);
    link.append(reportName.toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
    try {
      link.append(URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE));
    }
 catch (    UnsupportedEncodingException e1) {
    }
    String format=action.getFormat();
    if (format == null || format.length() == 0)     format=hostFormat;
    if (format != null && format.length() > 0) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_FORMAT,format));
    }
    if (action.getParameterBindings() != null) {
      Iterator paramsIte=action.getParameterBindings().entrySet().iterator();
      while (paramsIte.hasNext()) {
        Map.Entry entry=(Map.Entry)paramsIte.next();
        try {
          String key=(String)entry.getKey();
          Object valueObj=entry.getValue();
          if (valueObj != null) {
            String value=DataUtil.getDisplayValue(valueObj);
            link.append(ParameterAccessor.getQueryParameterString(URLEncoder.encode(key,ParameterAccessor.UTF_8_ENCODE),URLEncoder.encode(value,ParameterAccessor.UTF_8_ENCODE)));
          }
        }
 catch (        UnsupportedEncodingException e) {
        }
      }
      if (!reportName.toLowerCase().endsWith(ParameterAccessor.SUFFIX_REPORT_DOCUMENT) && baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
        link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_OVERWRITE,String.valueOf(true)));
      }
    }
    if (locale != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
    }
    if (isRtl) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
    }
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
    try {
      if (resourceFolder != null)       resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    if (resourceFolder != null) {
      link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
    }
    String bookmark=action.getBookmark();
    if (bookmark != null) {
      try {
        if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_PREVIEW) > 0 || IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format)) {
          link.append(""String_Node_Str"");
          if (!action.isBookmark() && reportName.toLowerCase().endsWith(""String_Node_Str"")) {
            InputOptions options=new InputOptions();
            options.setOption(InputOptions.OPT_LOCALE,locale);
            bookmark=BirtReportServiceFactory.getReportService().findTocByName(reportName,bookmark,options);
          }
        }
 else {
          link.append(""String_Node_Str"");
        }
        link.append(URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE));
      }
 catch (      UnsupportedEncodingException e) {
      }
    }
  }
  return link.toString();
}",0.9471881996575794
75255,"public Object get(String arg0,Scriptable scope){
  try {
    if (this.currentIterator == null)     return null;
    if (""String_Node_Str"".equalsIgnoreCase(arg0) || ""String_Node_Str"".equalsIgnoreCase(arg0)) {
      return new Integer(this.currentIterator.getRowIndex());
    }
    if (""String_Node_Str"".equalsIgnoreCase(arg0)) {
      return new JSResultIteratorObject(it.getParent());
    }
    return this.currentIterator.getValue(arg0);
  }
 catch (  BirtException e) {
    return null;
  }
}","public Object get(int index,Scriptable start){
  return this.get(String.valueOf(index),start);
}",0.2203389830508474
75256,"/** 
 * @deprecated
 * @return wrapped report design handle.
 */
public ModuleHandle getReportDesignHandle(){
  return model;
}","/** 
 * @deprecated
 * @return wrapped report design handle.
 */
public ModuleHandle getReportDesignHandle(){
  if (model == null) {
    IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    model=(ModuleHandle)reportHandleMap.get(activeWindow);
  }
  return model;
}",0.5607476635514018
75257,"/** 
 * Sets report design.
 * @param handle the model
 */
public void setReportDesignHandle(ModuleHandle handle){
  model=handle;
}","/** 
 * Sets report design.
 * @param handle the model
 */
public void setReportDesignHandle(ModuleHandle handle){
  PlatformUI.getWorkbench().removeWindowListener(pageListener);
  IWorkbenchWindow activeWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (handle == null) {
    reportHandleMap.remove(activeWindow);
  }
 else {
    PlatformUI.getWorkbench().addWindowListener(pageListener);
  }
  if (activeWindow != null) {
    reportHandleMap.put(activeWindow,handle);
  }
  model=handle;
}",0.378716744913928
75258,"public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=null;
  if (model instanceof LibraryHandle) {
    return new LibraryReportDesignEditPart(model);
  }
  if (ignoreModel(model)) {
    editPart=new EmptyEditPart(model);
  }
  if (editPart != null) {
    return editPart;
  }
  editPart=super.createEditPart(context,model);
  if (editPart == null || editPart instanceof DummyEditpart) {
    editPart=new EmptyEditPart(model);
  }
  return editPart;
}","public EditPart createEditPart(EditPart context,Object model){
  EditPart editPart=null;
  if (model instanceof LibraryHandle) {
    return new LibraryReportDesignEditPart(model);
  }
  if (ignoreModel(model)) {
    editPart=new EmptyEditPart(model);
  }
  if (editPart != null) {
    return editPart;
  }
  editPart=super.createEditPart(context,model);
  if (!(editPart instanceof DestroyEditPart) && (editPart == null || editPart instanceof DummyEditpart)) {
    editPart=new EmptyEditPart(model);
  }
  return editPart;
}",0.9561752988047808
75259,"public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle);
      CrosstabAdaptUtil.processInvaildBindings(reportHandle,isLevelRemoved);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle);
      if (isLevelRemoved) {
        CrosstabAdaptUtil.processInvaildBindings(reportHandle);
      }
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.9725829725829724
75260,"public static void processInvaildBindings(CrosstabReportItemHandle handle,boolean isLevelRemoved){
  if (CrosstabPlugin.getDefault().getPluginPreferences().getBoolean(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS) && isLevelRemoved) {
    MessageDialogWithToggle msgDlg=MessageDialogWithToggle.openYesNoQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),!CrosstabPlugin.getDefault().getPluginPreferences().getBoolean(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS),null,null);
    if (msgDlg.getReturnCode() == IDialogConstants.YES_ID) {
      removeInvalidBindings(handle);
    }
 else     if (msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
    }
    if (msgDlg.getReturnCode() == IDialogConstants.YES_ID || msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
      CrosstabPlugin.getDefault().getPluginPreferences().setValue(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS,!msgDlg.getToggleState());
    }
  }
 else {
    removeInvalidBindings(handle);
  }
}","public static void processInvaildBindings(CrosstabReportItemHandle handle){
  if (CrosstabPlugin.getDefault().getPluginPreferences().getBoolean(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS)) {
    MessageDialogWithToggle msgDlg=MessageDialogWithToggle.openYesNoQuestion(UIUtil.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),!CrosstabPlugin.getDefault().getPluginPreferences().getBoolean(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS),null,null);
    if (msgDlg.getReturnCode() == IDialogConstants.YES_ID) {
      removeInvalidBindings(handle);
    }
 else     if (msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
    }
    if (msgDlg.getReturnCode() == IDialogConstants.YES_ID || msgDlg.getReturnCode() == IDialogConstants.NO_ID) {
      CrosstabPlugin.getDefault().getPluginPreferences().setValue(CrosstabPlugin.PREFERENCE_AUTO_DEL_BINDINGS,!msgDlg.getToggleState());
    }
  }
 else {
    removeInvalidBindings(handle);
  }
}",0.9801452784503633
75261,"public void refreshFigure(){
}","public void refreshFigure(){
  List list=controlFigure.getChildren();
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof ListControlDisplayNameFigure) {
      ((ListControlDisplayNameFigure)list.get(i)).setText(((ListBandProxy)getModel()).getDisplayName());
    }
  }
}",0.1880877742946708
75262,"/** 
 * Start web application.
 */
private static void startWebApp(){
  try {
    WebappAccessor.start(ViewerPlugin.WEBAPP_CONTEXT,WebAppPlugin,Path.EMPTY);
  }
 catch (  CoreException e) {
  }
}","/** 
 * Start web application.
 */
private static void startWebApp(){
  try {
    String debugMode=System.getProperty(REPORT_DEBUT_MODE);
    if (debugMode == null) {
      ViewerClassPathHelper.setWorkspaceClassPath();
    }
    WebappAccessor.start(ViewerPlugin.WEBAPP_CONTEXT,WebAppPlugin,Path.EMPTY);
  }
 catch (  CoreException e) {
  }
}",0.724907063197026
75263,"/** 
 * Runs a webapp on the server. The webapp is defined in a plugin and the path is relative to the plugin directory. <p> It is assumed that webapp names are unique. It is suggested to create unique web app names by prefixing them with the plugin id. </p>
 * @param webappName the name of the web app (also knowns as application context)
 * @param pluginId plugin that defines the webapp
 * @param path webapp relative path to the plugin directory
 * @exception CoreException
 */
public synchronized static void start(String webappName,String pluginId,IPath path) throws CoreException {
  if (applicationsStarted)   return;
  String projectClassPaths=WorkspaceClasspathManager.getClassPath();
  if (projectClassPaths == null) {
    projectClassPaths=""String_Node_Str"";
  }
  System.setProperty(WORKSPACE_CLASSPATH_KEY,projectClassPaths);
  IPath webappPath=getWebappPath(pluginId,path);
  IWebappServer server=AppServerWrapper.getInstance().getAppServer();
  PluginClassLoaderWrapper loader=new PluginClassLoaderWrapper(pluginId);
  server.start(webappName,webappPath,loader);
  applicationsStarted=true;
}","/** 
 * Runs a webapp on the server. The webapp is defined in a plugin and the path is relative to the plugin directory. <p> It is assumed that webapp names are unique. It is suggested to create unique web app names by prefixing them with the plugin id. </p>
 * @param webappName the name of the web app (also knowns as application context)
 * @param pluginId plugin that defines the webapp
 * @param path webapp relative path to the plugin directory
 * @exception CoreException
 */
public synchronized static void start(String webappName,String pluginId,IPath path) throws CoreException {
  if (applicationsStarted)   return;
  IPath webappPath=getWebappPath(pluginId,path);
  IWebappServer server=AppServerWrapper.getInstance().getAppServer();
  PluginClassLoaderWrapper loader=new PluginClassLoaderWrapper(pluginId);
  server.start(webappName,webappPath,loader);
  applicationsStarted=true;
}",0.6646706586826348
75264,"/** 
 * Initializes a report element with ""name"" and ""extends"" property.
 * @param attrs the SAX attributes object
 * @param nameRequired true if this element requires a name, false if the name is optional.
 * @see #initSimpleElement(Attributes)
 */
protected void initElement(Attributes attrs,boolean nameRequired){
  DesignElement element=getElement();
  String name=attrs.getValue(IDesignElementModel.NAME_PROP);
  PropertyDefn propDefn=element.getPropertyDefn(IDesignElementModel.NAME_PROP);
  if (propDefn == null) {
    handler.getErrorHandler().semanticWarning(new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN));
  }
 else {
    boolean isValidName=true;
    try {
      name=(String)propDefn.validateValue(this.handler.getModule(),name);
    }
 catch (    PropertyValueException e) {
      handler.getErrorHandler().semanticError(new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_NAME));
      isValidName=false;
      element.setName(name);
    }
    if (isValidName) {
      if (StringUtil.isBlank(name)) {
        if (nameRequired) {
          if (handler.versionNumber <= VersionUtil.VERSION_3_2_12 && element instanceof ExtendedItem) {
            handler.addUnnamedReportItem(element);
          }
        }
      }
 else       element.setName(name);
    }
  }
  String extendsName=attrs.getValue(DesignSchemaConstants.EXTENDS_ATTRIB);
  if (!StringUtil.isBlank(extendsName) && element.getDefn().canExtend()) {
    element.setExtendsName(extendsName);
    resolveExtendsElement();
  }
 else {
    if (!StringUtil.isBlank(attrs.getValue(DesignSchemaConstants.EXTENDS_ATTRIB)))     handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_ILLEGAL_EXTENDS));
  }
  initSimpleElement(attrs);
}","/** 
 * Initializes a report element with ""name"" and ""extends"" property.
 * @param attrs the SAX attributes object
 * @param nameRequired true if this element requires a name, false if the name is optional.
 * @see #initSimpleElement(Attributes)
 */
protected void initElement(Attributes attrs,boolean nameRequired){
  DesignElement element=getElement();
  String name=attrs.getValue(IDesignElementModel.NAME_PROP);
  PropertyDefn propDefn=element.getPropertyDefn(IDesignElementModel.NAME_PROP);
  if (!StringUtil.isBlank(name) && propDefn == null) {
    handler.getErrorHandler().semanticWarning(new NameException(element,name,NameException.DESIGN_EXCEPTION_NAME_FORBIDDEN));
  }
 else   if (propDefn != null) {
    boolean isValidName=true;
    try {
      name=(String)propDefn.validateValue(this.handler.getModule(),name);
    }
 catch (    PropertyValueException e) {
      handler.getErrorHandler().semanticError(new NameException(element,name,NameException.DESIGN_EXCEPTION_INVALID_NAME));
      isValidName=false;
      element.setName(name);
    }
    if (isValidName) {
      if (StringUtil.isBlank(name)) {
        if (nameRequired) {
          if (handler.versionNumber <= VersionUtil.VERSION_3_2_12 && element instanceof ExtendedItem) {
            handler.addUnnamedReportItem(element);
          }
        }
      }
 else       element.setName(name);
    }
  }
  String extendsName=attrs.getValue(DesignSchemaConstants.EXTENDS_ATTRIB);
  if (!StringUtil.isBlank(extendsName) && element.getDefn().canExtend()) {
    element.setExtendsName(extendsName);
    resolveExtendsElement();
  }
 else {
    if (!StringUtil.isBlank(attrs.getValue(DesignSchemaConstants.EXTENDS_ATTRIB)))     handler.getErrorHandler().semanticError(new DesignParserException(DesignParserException.DESIGN_EXCEPTION_ILLEGAL_EXTENDS));
  }
  initSimpleElement(attrs);
}",0.98548342919748
75265,"public static void resetViewSelection(final EditPartViewer viewer,final boolean notofyToMedia){
  final List list=new ArrayList(((StructuredSelection)viewer.getSelection()).toList());
  boolean hasColumnOrRow=false;
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof TableEditPart.DummyRowEditPart || list.get(i) instanceof TableEditPart.DummyColumnEditPart) {
      hasColumnOrRow=true;
      break;
    }
  }
  if (hasColumnOrRow) {
    int selectionType=0;
    TableEditPart part=null;
    int[] selectContents=new int[0];
    for (int i=0; i < list.size(); i++) {
      Object obj=list.get(i);
      int number=-1;
      if (obj instanceof TableEditPart.DummyRowEditPart) {
        selectionType=0;
        number=((TableEditPart.DummyRowEditPart)obj).getRowNumber();
      }
 else       if (obj instanceof TableEditPart.DummyColumnEditPart) {
        selectionType=1;
        number=((TableEditPart.DummyColumnEditPart)obj).getColumnNumber();
      }
 else       if (obj instanceof TableCellEditPart) {
        part=(TableEditPart)((TableCellEditPart)obj).getParent();
      }
      if (number != -1) {
        int lenegth=selectContents.length;
        int[] temp=new int[lenegth + 1];
        System.arraycopy(selectContents,0,temp,0,lenegth);
        temp[lenegth]=number;
        selectContents=temp;
      }
    }
    if (part == null || selectContents.length == 0 || !viewer.getControl().isVisible()) {
      return;
    }
    if (selectionType == 0) {
      part.selectRow(selectContents,notofyToMedia);
    }
 else     if (selectionType == 1) {
      part.selectColumn(selectContents,notofyToMedia);
    }
  }
 else {
    if (viewer.getControl().isVisible()) {
      if (viewer instanceof DeferredGraphicalViewer)       ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),notofyToMedia);
    }
  }
}","public static void resetViewSelection(final EditPartViewer viewer,final boolean notofyToMedia){
  final List list=new ArrayList(((StructuredSelection)viewer.getSelection()).toList());
  boolean hasColumnOrRow=false;
  for (int i=0; i < list.size(); i++) {
    if (list.get(i) instanceof TableEditPart.DummyRowEditPart || list.get(i) instanceof TableEditPart.DummyColumnEditPart) {
      hasColumnOrRow=true;
      break;
    }
  }
  if (hasColumnOrRow) {
    int selectionType=0;
    TableEditPart part=null;
    int[] selectContents=new int[0];
    for (int i=0; i < list.size(); i++) {
      Object obj=list.get(i);
      int number=-1;
      if (obj instanceof TableEditPart.DummyRowEditPart) {
        selectionType=0;
        number=((TableEditPart.DummyRowEditPart)obj).getRowNumber();
      }
 else       if (obj instanceof TableEditPart.DummyColumnEditPart) {
        selectionType=1;
        number=((TableEditPart.DummyColumnEditPart)obj).getColumnNumber();
      }
 else       if (obj instanceof TableCellEditPart) {
        part=(TableEditPart)((TableCellEditPart)obj).getParent();
      }
      if (number != -1) {
        int lenegth=selectContents.length;
        int[] temp=new int[lenegth + 1];
        System.arraycopy(selectContents,0,temp,0,lenegth);
        temp[lenegth]=number;
        selectContents=temp;
      }
    }
    if (part == null || selectContents.length == 0 || !viewer.getControl().isVisible()) {
      return;
    }
    if (selectionType == 0) {
      part.selectRow(selectContents,notofyToMedia);
    }
 else     if (selectionType == 1) {
      part.selectColumn(selectContents,notofyToMedia);
    }
  }
 else {
    if (!viewer.getControl().isDisposed()) {
      if (viewer instanceof DeferredGraphicalViewer)       ((DeferredGraphicalViewer)viewer).setSelection(new StructuredSelection(list),notofyToMedia);
    }
  }
}",0.9956942949407964
75266,"/** 
 * Determin aClass implements java.sql.Driver interface
 * @param aClass
 * @return
 */
private static boolean implementsSQLDriverClass(Class aClass){
  if (DriverClass.isAssignableFrom(aClass)) {
    return true;
  }
  return false;
}","/** 
 * Determine aClass implements java.sql.Driver interface
 * @param aClass
 * @return
 */
private static boolean implementsSQLDriverClass(Class aClass){
  if (DriverClass.isAssignableFrom(aClass)) {
    return true;
  }
  return false;
}",0.997920997920998
75267,"/** 
 * Get all resouces included in a jar file
 * @param jarFile
 * @return
 */
private static String[] getAllResouceNames(File jarFile){
  ArrayList jarEntries=new ArrayList();
  try {
    ZipFile zf=new ZipFile(jarFile);
    Enumeration e=zf.entries();
    while (e.hasMoreElements()) {
      ZipEntry ze=(ZipEntry)e.nextElement();
      if (!ze.isDirectory()) {
        jarEntries.add(ze.getName());
      }
    }
    zf.close();
  }
 catch (  IOException e1) {
  }
catch (  Exception e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  return (String[])jarEntries.toArray(new String[jarEntries.size()]);
}","/** 
 * Get all resources included in a jar file
 * @param jarFile
 * @return
 */
private static String[] getAllResouceNames(File jarFile){
  ArrayList jarEntries=new ArrayList();
  try {
    ZipFile zf=new ZipFile(jarFile);
    Enumeration e=zf.entries();
    while (e.hasMoreElements()) {
      ZipEntry ze=(ZipEntry)e.nextElement();
      if (!ze.isDirectory()) {
        jarEntries.add(ze.getName());
      }
    }
    zf.close();
  }
 catch (  IOException e1) {
  }
catch (  Exception e) {
    ExceptionHandler.showException(PlatformUI.getWorkbench().getDisplay().getActiveShell(),JdbcPlugin.getResourceString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  return (String[])jarEntries.toArray(new String[jarEntries.size()]);
}",0.9993211133740664
75268,"/** 
 * remove driver(s) from runtime driver list
 * @param fileList
 */
public static void removeFromDriverList(List fileList){
  for (int i=0; i < fileList.size(); i++) {
    String fileName=((File)fileList.get(i)).getName();
    jdbcDriverInfos.removeAll((List)file2Drivers.get(fileName));
    file2Drivers.remove(fileName);
  }
}","/** 
 * remove driver(s) from runtime driver list
 * @param fileList
 */
public static void removeFromDriverList(List fileList){
  for (int i=0; i < fileList.size(); i++) {
    String fileName=((File)fileList.get(i)).getName();
    jdbcDriverInfos.removeAll((List)file2Drivers.get(fileName));
    file2Drivers.remove(fileName);
    if (failLoadFileList.contains(fileList.get(i)))     failLoadFileList.remove(fileList.get(i));
  }
}",0.8717277486910995
75269,"/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}","/** 
 * Found drivers in the Jar file List
 * @param file
 * @return a List of JDBCDriverInformation
 */
public static void getJdbcDriverFromFile(List fileList){
  if (!failLoadFileList.isEmpty()) {
    fileList.addAll(failLoadFileList);
  }
  URLClassLoader urlClassLoader=createClassLoader(fileList);
  jdbcDriverInfos.addAll(getJDBCDriverInfoList(fileList,urlClassLoader));
}",0.8816568047337278
75270,"/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    return jdbcDriverInfos;
  }
  jdbcDriverInfos=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return jdbcDriverInfos;
}","/** 
 * Returns a List jdbc Drivers. The Drivers are searched from predefined directories in the DTE plug-in. Currently it is expected that the jdbc drivers are in the ""drivers"" directory of the DTE oda.jdbc plug-in.
 * @param driverName
 * @return
 */
public static List getJdbcDriversFromODADir(String driverName){
  if (jdbcDriverInfos != null) {
    if (!driverNameMap.containsValue(jdbcDriverInfos.get(0)))     jdbcDriverInfos.remove(0);
    if (JdbcDriverManagerDialog.needResetPreferences()) {
      resetPreferences();
      JdbcDriverManagerDialog.resetDriverChangedStatus();
    }
    return jdbcDriverInfos;
  }
  jdbcDriverInfos=new ArrayList();
  failLoadFileList=new ArrayList();
  driverNameMap=new HashMap();
  file2Drivers=new Hashtable();
  addDriversFromFiles();
  final String ODBCJDBCDriverName=""String_Node_Str"";
  JDBCDriverInformation ODBCJDBCInfo=null;
  JDBCDriverInformation driverInfos[]=JDBCDriverInfoManager.getDrivers();
  for (int i=0; i < driverInfos.length; i++) {
    JDBCDriverInformation newInfo=driverInfos[i];
    JDBCDriverInformation existing=(JDBCDriverInformation)driverNameMap.get(newInfo.getDriverClassName());
    if (existing == null) {
      if (newInfo.getDriverClassName().equalsIgnoreCase(ODBCJDBCDriverName)) {
        ODBCJDBCInfo=newInfo;
        continue;
      }
      jdbcDriverInfos.add(newInfo);
      driverNameMap.put(newInfo.getDriverClassName(),newInfo);
    }
 else {
      existing.setDisplayName(newInfo.getDisplayName());
      existing.setUrlFormat(newInfo.getUrlFormat());
    }
  }
  if (ODBCJDBCInfo != null) {
    jdbcDriverInfos.add(ODBCJDBCInfo);
    driverNameMap.put(ODBCJDBCInfo.getDriverClassName(),ODBCJDBCInfo);
  }
  resetPreferences();
  return jdbcDriverInfos;
}",0.9895773016792124
75271,"/** 
 * Resets cached jdbc driver list to null, force reget the infomation when required next time.
 */
public static void resetJdbcDriverNames(){
  jdbcDriverInfos=null;
  driverNameMap=null;
  file2Drivers=null;
}","/** 
 * Resets cached jdbc driver list to null, force reget the information when required next time.
 */
public static void resetJdbcDriverNames(){
  jdbcDriverInfos=null;
  failLoadFileList=null;
  driverNameMap=null;
  file2Drivers=null;
}",0.9429824561403508
75272,"/** 
 * modify resourceName,perpare for loadClass()
 * @param resourceName
 * @return
 */
private static String modifyResourceName(String resourceName){
  resourceName=(resourceName.replaceAll(""String_Node_Str"",""String_Node_Str"")).substring(0,resourceName.length() - 6);
  return resourceName;
}","/** 
 * modify resourceName,prepare for loadClass()
 * @param resourceName
 * @return
 */
private static String modifyResourceName(String resourceName){
  resourceName=(resourceName.replaceAll(""String_Node_Str"",""String_Node_Str"")).substring(0,resourceName.length() - 6);
  return resourceName;
}",0.9932203389830508
75273,"/** 
 * Get a List of JDBCDriverInformations loaded from the given fileList
 * @param fileList the File List
 * @param urlClassLoader
 * @return List of JDBCDriverInformation
 */
private static List getJDBCDriverInfoList(List fileList,URLClassLoader urlClassLoader){
  List driverList=new ArrayList();
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  return driverList;
}","/** 
 * Get a List of JDBCDriverInformations loaded from the given fileList
 * @param fileList the File List
 * @param urlClassLoader
 * @return List of JDBCDriverInformation
 */
private static List getJDBCDriverInfoList(List fileList,URLClassLoader urlClassLoader){
  List driverList=new ArrayList();
  for (int i=0; i < fileList.size(); i++) {
    String[] resourceNames=getAllResouceNames((File)fileList.get(i));
    List subDriverList=new ArrayList();
    for (int j=0; j < resourceNames.length; j++) {
      String resourceName=resourceNames[j];
      if (resourceName.endsWith(""String_Node_Str"")) {
        resourceName=modifyResourceName(resourceName);
        Class aClass=loadClass(urlClassLoader,resourceName);
        if (isImplementedDriver(aClass)) {
          JDBCDriverInformation info=JDBCDriverInformation.newInstance(aClass);
          if (info != null) {
            driverList.add(info);
            subDriverList.add(info);
          }
        }
      }
    }
    if (subDriverList.isEmpty()) {
      if (!failLoadFileList.contains(fileList.get(i)))       failLoadFileList.add(fileList.get(i));
    }
 else {
      if (failLoadFileList.contains(fileList.get(i)))       failLoadFileList.remove(fileList.get(i));
    }
    file2Drivers.put(((File)fileList.get(i)).getName(),subDriverList);
  }
  return driverList;
}",0.8934935764608372
75274,"protected String getText(){
  String text=((DataItemHandle)getModel()).getResultSetColumn();
  if (text == null || text.length() == 0) {
    text=FIGURE_DEFAULT_TEXT;
  }
 else {
    if (text.length() > TRUNCATE_LENGTH) {
      text=text.substring(0,TRUNCATE_LENGTH - 2) + ELLIPSIS;
    }
    text=""String_Node_Str"" + text + ""String_Node_Str"";
  }
  if (hasBindingFunction()) {
    text=PREFIX + text;
  }
  return text;
}","protected String getText(){
  String text=((DataItemHandle)getModel()).getResultSetColumn();
  if (text == null || text.length() == 0) {
    text=FIGURE_DEFAULT_TEXT;
  }
 else {
    if (text.length() > TRUNCATE_LENGTH) {
      text=text.substring(0,TRUNCATE_LENGTH - 2) + ELLIPSIS;
    }
    text=""String_Node_Str"" + text + ""String_Node_Str"";
  }
  if (hasBindingFunction()) {
    ((LabelFigure)getFigure()).setSpecialPREFIX(PREFIX);
    text=PREFIX + text;
  }
  return text;
}",0.925638179800222
75275,"protected String getText(){
  if (!hasBindingFunction()) {
    return super.getText();
  }
  String retValue=getMeasureName();
  if (retValue == null) {
    return super.getText();
  }
  return PREFIX + ""String_Node_Str"" + retValue+ ""String_Node_Str"";
}","protected String getText(){
  if (!hasBindingFunction()) {
    return super.getText();
  }
  String retValue=getMeasureName();
  if (retValue == null) {
    return super.getText();
  }
  ((LabelFigure)getFigure()).setSpecialPREFIX(PREFIX);
  return PREFIX + ""String_Node_Str"" + retValue+ ""String_Node_Str"";
}",0.9019607843137256
75276,"/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
  }
}","/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + PREFIX_RESULTSET + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
    dataOutputStream.close();
  }
}",0.9671361502347418
75277,"/** 
 * @param name
 * @param reader
 * @throws IOException
 */
public static IAggregationResultSet[] load(String name,IDocArchiveReader reader) throws IOException {
  RAInputStream inputStream=reader.getStream(name);
  DataInputStream dataInputStream=new DataInputStream(inputStream);
  int size=dataInputStream.readInt();
  inputStream.close();
  if (size <= 0) {
    return null;
  }
  IAggregationResultSet[] result=new IAggregationResultSet[size];
  for (int i=0; i < size; i++) {
    inputStream=reader.getStream(name + i);
    dataInputStream=new DataInputStream(inputStream);
    result[i]=loadOneResultSet(dataInputStream);
  }
  return result;
}","/** 
 * @param name
 * @param reader
 * @throws IOException
 */
public static IAggregationResultSet[] load(String name,IDocArchiveReader reader) throws IOException {
  RAInputStream inputStream=reader.getStream(name);
  DataInputStream dataInputStream=new DataInputStream(inputStream);
  int size=dataInputStream.readInt();
  inputStream.close();
  if (size <= 0) {
    return null;
  }
  IAggregationResultSet[] result=new IAggregationResultSet[size];
  for (int i=0; i < size; i++) {
    inputStream=reader.getStream(name + PREFIX_RESULTSET + i);
    dataInputStream=new DataInputStream(inputStream);
    result[i]=loadOneResultSet(dataInputStream);
    dataInputStream.close();
  }
  return result;
}",0.9646539027982328
75278,"/** 
 * if the Node is row Node, return true
 * @param refNode
 * @return
 */
private static boolean getDirectColRefExpr(Node refNode){
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME)   return false;
  String str=rowName.getString();
  assert(str != null);
  if (!str.equals(STRING_ROW))   return false;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    return true;
  }
 else   if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER || rowColumn.getType() == Token.STRING)     return true;
  }
  return false;
}","/** 
 * if the Node is row Node, return true
 * @param refNode
 * @return
 */
private static boolean getDirectColRefExpr(Node refNode,boolean mode){
  assert(refNode.getType() == Token.GETPROP || refNode.getType() == Token.GETELEM);
  Node rowName=refNode.getFirstChild();
  assert(rowName != null);
  if (rowName.getType() != Token.NAME)   return false;
  String str=rowName.getString();
  assert(str != null);
  if (mode && !str.equals(STRING_ROW))   return false;
 else   if (!mode && !str.equals(STRING_DATASET_ROW))   return false;
  Node rowColumn=rowName.getNext();
  assert(rowColumn != null);
  if (refNode.getType() == Token.GETPROP && rowColumn.getType() == Token.STRING) {
    return true;
  }
 else   if (refNode.getType() == Token.GETELEM) {
    if (rowColumn.getType() == Token.NUMBER || rowColumn.getType() == Token.STRING)     return true;
  }
  return false;
}",0.9453453453453452
75279,"/** 
 * whether the expression is column reference
 * @param expression
 * @return
 */
public static boolean isColumnExpression(String expression){
  boolean isColumn=false;
  if (expression == null || expression.trim().length() == 0)   return isColumn;
  if (compiledExprCache.containsKey(expression))   return ((Boolean)compiledExprCache.get(expression)).booleanValue();
  Context context=Context.enter();
  ScriptOrFnNode tree;
  try {
    CompilerEnvirons m_compilerEnv=new CompilerEnvirons();
    m_compilerEnv.initFromContext(context);
    Parser p=new Parser(m_compilerEnv,context.getErrorReporter());
    tree=p.parse(expression,null,0);
  }
 catch (  Exception e) {
    compiledExprCache.put(expression,Boolean.valueOf(false));
    return false;
  }
 finally {
    Context.exit();
  }
  if (tree.getFirstChild() == tree.getLastChild()) {
    if (tree.getFirstChild().getType() != Token.EXPR_RESULT && tree.getFirstChild().getType() != Token.EXPR_VOID && tree.getFirstChild().getType() != Token.BLOCK) {
      isColumn=false;
    }
    Node exprNode=tree.getFirstChild();
    Node child=exprNode.getFirstChild();
    assert(child != null);
    if (child.getType() == Token.GETELEM || child.getType() == Token.GETPROP)     isColumn=getDirectColRefExpr(child);
 else     isColumn=false;
  }
 else {
    isColumn=false;
  }
  compiledExprCache.put(expression,Boolean.valueOf(isColumn));
  return isColumn;
}","/** 
 * whether the expression is column reference
 * @param expression
 * @return
 */
public static boolean isColumnExpression(String expression,boolean mode){
  boolean isColumn=false;
  if (expression == null || expression.trim().length() == 0)   return isColumn;
  if (getCompiledExpCacheMap(mode).containsKey(expression)) {
    return ((Boolean)getCompiledExpCacheMap(mode).get(expression)).booleanValue();
  }
  Context context=Context.enter();
  ScriptOrFnNode tree;
  try {
    CompilerEnvirons m_compilerEnv=new CompilerEnvirons();
    m_compilerEnv.initFromContext(context);
    Parser p=new Parser(m_compilerEnv,context.getErrorReporter());
    tree=p.parse(expression,null,0);
  }
 catch (  Exception e) {
    getCompiledExpCacheMap(mode).put(expression,Boolean.valueOf(false));
    return false;
  }
 finally {
    Context.exit();
  }
  if (tree.getFirstChild() == tree.getLastChild()) {
    if (tree.getFirstChild().getType() != Token.EXPR_RESULT && tree.getFirstChild().getType() != Token.EXPR_VOID && tree.getFirstChild().getType() != Token.BLOCK) {
      isColumn=false;
    }
    Node exprNode=tree.getFirstChild();
    Node child=exprNode.getFirstChild();
    assert(child != null);
    if (child.getType() == Token.GETELEM || child.getType() == Token.GETPROP)     isColumn=getDirectColRefExpr(child,mode);
 else     isColumn=false;
  }
 else {
    isColumn=false;
  }
  getCompiledExpCacheMap(mode).put(expression,Boolean.valueOf(isColumn));
  return isColumn;
}",0.9288182446440912
75280,"/** 
 * replace the row[], row.xx with dataSetRow[],dataSetRow.xx
 * @param refNode
 * @return
 */
public static String getReplacedColRefExpr(String columnStr){
  if (isColumnExpression(columnStr)) {
    return columnStr.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   return columnStr;
}","/** 
 * replace the row[], row.xx with dataSetRow[],dataSetRow.xx
 * @param refNode
 * @return
 */
public static String getReplacedColRefExpr(String columnStr){
  if (isColumnExpression(columnStr,true)) {
    return columnStr.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  }
 else   return columnStr;
}",0.9918166939443536
75281,"public ICubeQueryResults execute(Scriptable scope){
  return new CubeQueryResults(this,this.session,scope == null ? this.session.getSharedScope() : scope,this.context);
}","public ICubeQueryResults execute(Scriptable scope){
  Scriptable cubeScope;
  Context cx=Context.enter();
  try {
    cubeScope=cx.newObject(scope == null ? this.session.getSharedScope() : scope);
    cubeScope.setParentScope(scope == null ? this.session.getSharedScope() : scope);
    cubeScope.setPrototype(scope == null ? this.session.getSharedScope() : scope);
  }
  finally {
    Context.exit();
  }
  return new CubeQueryResults(this,this.session,cubeScope,this.context);
}",0.3728813559322034
75282,"public void setFontSize(float fontSize){
  this.fontSize=fontSize;
}","public void setFontSize(float fontSize){
  this.fontSize=fontSize;
  this.fontPadding=this.fontSize / 5f;
  this.lineWidth=this.fontSize / 20f;
}",0.6384976525821596
75283,"/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    return ""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    return ""String_Node_Str"" + bookmark + ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null)     resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (resourceFolder != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}","/** 
 * Build URL for bookmark.
 * @param action
 * @param context
 * @return the bookmark url
 */
protected String buildBookmarkAction(IAction action,IReportContext context){
  if (action == null || context == null)   return null;
  String baseURL=null;
  Object renderContext=getRenderContext(context);
  if (renderContext instanceof HTMLRenderContext) {
    baseURL=((HTMLRenderContext)renderContext).getBaseURL();
  }
  if (renderContext instanceof PDFRenderContext) {
    baseURL=((PDFRenderContext)renderContext).getBaseURL();
  }
  if (baseURL == null)   return null;
  String bookmark=action.getBookmark();
  if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_FRAMESET) > 0) {
    String func=""String_Node_Str"" + ParameterAccessor.htmlEncode(bookmark) + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
 else   if (baseURL.lastIndexOf(IBirtConstants.SERVLET_PATH_RUN) > 0) {
    String func=""String_Node_Str"" + bookmark + ""String_Node_Str"";
    return ""String_Node_Str"" + func + ""String_Node_Str""+ func+ ""String_Node_Str"";
  }
  StringBuffer link=new StringBuffer();
  boolean realBookmark=false;
  if (this.document != null) {
    long pageNumber=this.document.getPageNumber(action.getBookmark());
    realBookmark=(pageNumber == this.page && !isEmbeddable);
  }
  try {
    bookmark=URLEncoder.encode(bookmark,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  link.append(baseURL);
  link.append(ParameterAccessor.QUERY_CHAR);
  if (document != null) {
    link.append(ParameterAccessor.PARAM_REPORT_DOCUMENT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String documentName=document.getName();
    try {
      documentName=URLEncoder.encode(documentName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(documentName);
  }
 else   if (action.getReportName() != null && action.getReportName().length() > 0) {
    link.append(ParameterAccessor.PARAM_REPORT);
    link.append(ParameterAccessor.EQUALS_OPERATOR);
    String reportName=getReportName(context,action);
    try {
      reportName=URLEncoder.encode(reportName,ParameterAccessor.UTF_8_ENCODE);
    }
 catch (    UnsupportedEncodingException e) {
    }
    link.append(reportName);
  }
 else {
    return ""String_Node_Str"" + action.getActionString();
  }
  if (locale != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_LOCALE,locale.toString()));
  }
  if (isRtl) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RTL,String.valueOf(isRtl)));
  }
  link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_MASTERPAGE,String.valueOf(this.isMasterPageContent)));
  try {
    if (resourceFolder != null)     resourceFolder=URLEncoder.encode(resourceFolder,ParameterAccessor.UTF_8_ENCODE);
  }
 catch (  UnsupportedEncodingException e) {
  }
  if (resourceFolder != null) {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_RESOURCE_FOLDER,this.resourceFolder));
  }
  if (realBookmark) {
    link.append(""String_Node_Str"");
    link.append(bookmark);
  }
 else {
    link.append(ParameterAccessor.getQueryParameterString(ParameterAccessor.PARAM_BOOKMARK,bookmark));
  }
  return link.toString();
}",0.9690753214941824
75284,"private boolean isMappedTo(char c,String from,String to){
  BaseFont font=fontMappingManager.getMappedFont(c,createCssValueList(from),Font.NORMAL);
  return isIn(to,font.getFullFontName());
}","private boolean isMappedTo(char c,String from,String to){
  BaseFont font=FontHandlerUtil.getMappedFont(handler,c,fontMappingManager,createCssValueList(from),Font.NORMAL);
  return isIn(to,font.getFullFontName());
}",0.8472906403940886
75285,"/** 
 * Selects a proper font for a character.
 */
public boolean selectFont(char character){
  assert(fontManager != null);
  BaseFont candidateFont=fontManager.getMappedFont(character,fontFamilies,fontStyle);
  assert(candidateFont != null);
  checkFontStatus(candidateFont);
  return candidateFont.charExists(character);
}","/** 
 * Selects a proper font for a character.
 */
public boolean selectFont(char character){
  assert(fontManager != null);
  BaseFont candidateFont=getMappedFont(character);
  assert(candidateFont != null);
  checkFontStatus(candidateFont);
  return candidateFont.charExists(character);
}",0.8780487804878049
75286,"private boolean isCharDefinedInFont(char c,String fontName,int fontStyle){
  BaseFont bf=createFont(fontName,fontStyle);
  return null != bf && bf.charExists(c);
}","public boolean isCharDefinedInFont(char c,String fontName,int fontStyle){
  BaseFont bf=createFont(fontName,fontStyle);
  return null != bf && bf.charExists(c);
}",0.9723076923076924
75287,"private String getLogicalFont(String fontFamilyName){
  String fontName=getMappedFontName(fontFamilyName,fontAliases);
  return fontName == null ? fontFamilyName : fontName;
}","public String getLogicalFont(String fontFamilyName){
  String fontName=getMappedFontName(fontFamilyName,fontAliases);
  return fontName == null ? fontFamilyName : fontName;
}",0.9742120343839542
75288,"private String getPhysicalFont(char c,String logicalFont,String defaultFont){
  if (isCompositeFont(logicalFont)) {
    Map compositeFont=(Map)compositeFonts.get(logicalFont);
    String blockFont=getBlockFont(compositeFont,c);
    if (blockFont != null) {
      return blockFont;
    }
  }
  return defaultFont;
}","public String getPhysicalFont(char c,String logicalFont,String defaultFont){
  if (isCompositeFont(logicalFont)) {
    Map compositeFont=(Map)compositeFonts.get(logicalFont);
    String blockFont=getBlockFont(compositeFont,c);
    if (blockFont != null) {
      return blockFont;
    }
  }
  return defaultFont;
}",0.9824561403508772
75289,"/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @param encoding the encoding for the font.
 * @return the created BaseFont.
 */
private BaseFont createFont(String ffn,int fontStyle){
  String key=ffn + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      String encoding=getEncoding(ffn);
      Font f=null;
      try {
        f=FontFactory.getFont(ffn,encoding,BaseFont.NOT_EMBEDDED,14,fontStyle);
      }
 catch (      Throwable de) {
        logger.log(Level.WARNING,de.getLocalizedMessage());
        return null;
      }
      font=f.getBaseFont();
      if (font != null) {
        baseFonts.put(key,font);
      }
    }
    return font;
  }
}","/** 
 * Creates iText BaseFont with the given font family name.
 * @param ffn the specified font family name.
 * @param encoding the encoding for the font.
 * @return the created BaseFont.
 */
public BaseFont createFont(String ffn,int fontStyle){
  String key=ffn + fontStyle;
synchronized (baseFonts) {
    BaseFont font=(BaseFont)baseFonts.get(key);
    if (font == null) {
      String encoding=getEncoding(ffn);
      Font f=null;
      try {
        f=FontFactory.getFont(ffn,encoding,BaseFont.NOT_EMBEDDED,14,fontStyle);
      }
 catch (      Throwable de) {
        logger.log(Level.WARNING,de.getLocalizedMessage());
        return null;
      }
      font=f.getBaseFont();
      if (font != null) {
        baseFonts.put(key,font);
      }
    }
    return font;
  }
}",0.9929260450160772
75290,"public Image(IImageContent content){
  String imgUri=content.getURI();
  byte[] imgData=content.getData();
  this.imageMap=(String)content.getImageMap();
  this.mimeType=content.getMIMEType();
  this.extension=content.getExtension();
  if (extension == null) {
    if (mimeType != null) {
      extension=FileUtil.getExtFromType(mimeType);
    }
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    if (imgUri != null) {
      this.id=imgUri;
      this.source=IImage.FILE_IMAGE;
    }
  break;
case IImageContent.IMAGE_NAME:
if (imgData != null) {
  this.data=imgData;
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case IImageContent.IMAGE_EXPRESSION:
if (imgData != null) {
this.data=imgData;
this.source=IImage.CUSTOM_IMAGE;
this.id=content.getInstanceID().toString();
}
break;
case IImageContent.IMAGE_URL:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}","public Image(IImageContent content){
  String imgUri=content.getURI();
  byte[] imgData=content.getData();
  this.imageMap=(String)content.getImageMap();
  this.mimeType=content.getMIMEType();
  this.extension=content.getExtension();
  if (extension == null) {
    if (mimeType != null) {
      extension=FileUtil.getExtFromType(mimeType);
    }
  }
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
    if (imgUri != null) {
      this.id=imgUri;
      this.source=IImage.FILE_IMAGE;
    }
  break;
case IImageContent.IMAGE_NAME:
if (imgData != null) {
  this.data=imgData;
  this.source=IImage.DESIGN_IMAGE;
  this.id=imgUri;
}
break;
case IImageContent.IMAGE_EXPRESSION:
if (imgData != null) {
this.data=imgData;
this.source=IImage.CUSTOM_IMAGE;
this.id=content.getInstanceID().toUniqueString();
}
break;
case IImageContent.IMAGE_URL:
if (imgUri != null) {
this.id=imgUri;
this.source=IImage.URL_IMAGE;
}
break;
default :
assert(false);
}
}",0.9968652037617556
75291,"/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.975846751804553
75292,"/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    if (IBirtConstants.DOC_RENDER_FORMAT.equalsIgnoreCase(format)) {
      ((IHTMLRenderOption)renderOption).setOption(IHTMLRenderOption.HTML_PAGINATION,Boolean.TRUE);
    }
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.9766505636070854
75293,"private void simulateItalic(PdfContentByte cb,float x,float y){
  float alpha=(float)Math.tan(0f * Math.PI / 180);
  float beta=(float)Math.tan(15f * Math.PI / 180);
  cb.setTextMatrix(1,alpha,beta,1,x,y);
}","private void simulateItalic(PdfContentByte cb,float x,float y){
  float alpha=(float)Math.tan(0f * Math.PI / 180);
  float beta=EmitterUtil.getItalicHorizontalCoefficient();
  cb.setTextMatrix(1,alpha,beta,1,x,y);
}",0.6540284360189573
75294,"public void drawString(String str,float x,float y,FontInfo fontInfo,float letterSpacing,float wordSpacing,Color color,boolean linethrough,boolean overline,boolean underline,CSSValue align){
  y=transformY(y);
  gSave();
  String text=str;
  if (fontInfo != null) {
    BaseFont baseFont=fontInfo.getBaseFont();
    String fontName=getFontName(baseFont);
    text=applyFont(fontName,fontInfo.getFontStyle(),fontInfo.getFontSize(),text);
  }
  color=color == null ? Color.black : color;
  setColor(color);
  out.print(x);
  out.print(""String_Node_Str"");
  out.print(y);
  out.print(""String_Node_Str"");
  out.print(overline ? ""String_Node_Str"" : ""String_Node_Str"");
  out.print(linethrough ? ""String_Node_Str"" : ""String_Node_Str"");
  out.print(underline ? ""String_Node_Str"" : ""String_Node_Str"");
  out.print(wordSpacing);
  out.print(""String_Node_Str"");
  out.print(letterSpacing);
  out.print(""String_Node_Str"");
  out.print(text);
  out.println(""String_Node_Str"");
  gRestore();
}","public void drawString(String str,float x,float y,FontInfo fontInfo,float letterSpacing,float wordSpacing,Color color,boolean linethrough,boolean overline,boolean underline,CSSValue align){
  y=transformY(y);
  gSave();
  String text=str;
  if (fontInfo != null) {
    BaseFont baseFont=fontInfo.getBaseFont();
    String fontName=baseFont.getPostscriptFontName();
    text=applyFont(fontName,fontInfo.getFontStyle(),fontInfo.getFontSize(),text);
  }
  color=color == null ? Color.black : color;
  setColor(color);
  out.print(x);
  out.print(""String_Node_Str"");
  out.print(y);
  out.print(""String_Node_Str"");
  out.print(overline ? ""String_Node_Str"" : ""String_Node_Str"");
  out.print(linethrough ? ""String_Node_Str"" : ""String_Node_Str"");
  out.print(underline ? ""String_Node_Str"" : ""String_Node_Str"");
  out.print(wordSpacing);
  out.print(""String_Node_Str"");
  out.print(letterSpacing);
  out.print(""String_Node_Str"");
  out.print(text);
  out.println(""String_Node_Str"");
  gRestore();
}",0.9832402234636872
75295,"private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String searchName=fontName + getFontSuffix(fontStyle);
      String fontPath=getFontPath(searchName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=searchName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return toHexString(text);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}","private String applyFont(String fontName,int fontStyle,float fontSize,String text){
  if (isIntrinsicFont(fontName)) {
    return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
  }
 else {
    try {
      String fontPath=getFontPath(fontName);
      if (fontPath == null) {
        return applyIntrinsicFont(fontName,fontStyle,fontSize,text);
      }
      ITrueTypeWriter trueTypeWriter=getTrueTypeFontWriter(fontPath);
      String displayName=fontName.replace(' ','_');
      trueTypeWriter.useDisplayName(displayName);
      trueTypeWriter.ensureGlyphsAvailable(text);
      setFont(displayName,fontSize);
      return toHexString(text);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}",0.9473684210526316
75296,"private String getFontPath(String fontName){
  try {
    Object fontImpl=getField(FontFactory.class,""String_Node_Str"",null);
    Properties trueTypeFonts=(Properties)getField(FontFactoryImp.class,""String_Node_Str"",fontImpl);
    String fontPath=trueTypeFonts.getProperty(fontName.toLowerCase());
    return fontPath;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","private String getFontPath(String fontName){
  try {
    FontFactoryImp fontImpl=FontFactory.getFontImp();
    Properties trueTypeFonts=(Properties)getField(FontFactoryImp.class,""String_Node_Str"",fontImpl);
    String fontPath=trueTypeFonts.getProperty(fontName.toLowerCase());
    return fontPath;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.756544502617801
75297,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  boolean[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    if (!isFunctionCount(aggrInfo)) {
      if (aggrInfo.getArgument() == null || aggrInfo.getArgument().length != argDefs.length)       throw new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
    }
    try {
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i] || newGroup) {
          IBaseExpression argExpr=aggrInfo.getArgument()[i];
          checkExpression(aggrInfo,argExpr);
          try {
            aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
          }
 catch (          BirtException e) {
            throw DataException.wrap(e);
          }
        }
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggregation.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  boolean[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    if (!isFunctionCount(aggrInfo)) {
      if (aggrInfo.getArgument() == null || aggrInfo.getArgument().length != argDefs.length) {
        DataException e=new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
        wrapException(aggrIndex,e);
        return false;
      }
    }
    try {
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i] || newGroup) {
          IBaseExpression argExpr=aggrInfo.getArgument()[i];
          checkExpression(aggrInfo,argExpr);
          try {
            aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
          }
 catch (          BirtException e) {
            throw DataException.wrap(e);
          }
        }
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      wrapException(aggrIndex,e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggregation.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.959366391184573
75298,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  boolean[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    if (argDefs.length != aggrArgs[aggrIndex].length) {
      throw new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
    }
    try {
      if (aggrInfo.getArgument().length > argDefs.length && !isFunctionCount(aggrInfo))       throw new DataException(""String_Node_Str"");
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i] || newGroup) {
          IBaseExpression argExpr=aggrInfo.getArgument()[i];
          checkExpression(aggrInfo,argExpr);
          try {
            aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
          }
 catch (          BirtException e) {
            throw DataException.wrap(e);
          }
        }
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggregation.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.1839853300733496
75299,"/** 
 * Create HTML render option.
 * @param svgFlag
 * @param servletPath
 * @param request
 * @return HTML render option from the given arguments
 */
private HTMLRenderOption createHTMLRenderOption(boolean svgFlag,String servletPath,HttpServletRequest request){
  String baseURL=null;
  boolean isDesigner=ParameterAccessor.isDesigner(request);
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null)   baseURL=""String_Node_Str"";
  baseURL+=request.getContextPath();
  HTMLRenderOption renderOption=new HTMLRenderOption();
  renderOption.setImageDirectory(ParameterAccessor.getImageTempFolder(request));
  renderOption.setBaseImageURL(baseURL + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setEnableAgentStyleEngine(ParameterAccessor.isAgentStyle(request));
  renderOption.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderOption;
}","/** 
 * Create HTML render option.
 * @param svgFlag
 * @param servletPath
 * @param request
 * @return HTML render option from the given arguments
 */
private HTMLRenderOption createHTMLRenderOption(boolean svgFlag,String servletPath,HttpServletRequest request){
  String baseURL=null;
  boolean isDesigner=ParameterAccessor.isDesigner(request);
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(ParameterAccessor.getFormat(request))) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  HTMLRenderOption renderOption=new HTMLRenderOption();
  renderOption.setImageDirectory(ParameterAccessor.getImageTempFolder(request));
  renderOption.setBaseImageURL(baseURL + imageBaseUrl);
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setEnableAgentStyleEngine(ParameterAccessor.isAgentStyle(request));
  renderOption.setSupportedImageFormats(svgFlag ? ""String_Node_Str"" : ""String_Node_Str"");
  return renderOption;
}",0.8
75300,"/** 
 * Create PDF render option.
 * @param servletPath
 * @param request
 * @param isDesigner
 * @return the PDF render option
 */
private PDFRenderOption createPDFRenderOption(String servletPath,HttpServletRequest request,boolean isDesigner){
  String baseURL=null;
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null)   baseURL=""String_Node_Str"";
  baseURL+=request.getContextPath();
  PDFRenderOption renderOption=new PDFRenderOption();
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setSupportedImageFormats(""String_Node_Str"");
  renderOption.setOption(PDFRenderOption.FIT_TO_PAGE,new Boolean(ParameterAccessor.isFitToPage(request)));
  renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY,new Boolean(ParameterAccessor.isPagebreakOnly(request)));
  return renderOption;
}","/** 
 * Create PDF render option.
 * @param servletPath
 * @param request
 * @param isDesigner
 * @return the PDF render option
 */
private PDFRenderOption createPDFRenderOption(String servletPath,HttpServletRequest request,boolean isDesigner){
  String baseURL=null;
  if (!isDesigner)   baseURL=ParameterAccessor.getBaseURL();
  if (baseURL == null) {
    if (ParameterAccessor.isOpenAsAttachment(request)) {
      baseURL=request.getScheme() + ""String_Node_Str"" + request.getServerName()+ ""String_Node_Str""+ request.getServerPort();
    }
 else {
      baseURL=""String_Node_Str"";
    }
  }
  baseURL+=request.getContextPath();
  PDFRenderOption renderOption=new PDFRenderOption();
  if (servletPath != null && servletPath.length() > 0) {
    renderOption.setBaseURL(baseURL + servletPath);
  }
 else {
    renderOption.setBaseURL(baseURL + IBirtConstants.SERVLET_PATH_RUN);
  }
  renderOption.setSupportedImageFormats(""String_Node_Str"");
  renderOption.setOption(PDFRenderOption.FIT_TO_PAGE,new Boolean(ParameterAccessor.isFitToPage(request)));
  renderOption.setOption(PDFRenderOption.PAGEBREAK_PAGINATION_ONLY,new Boolean(ParameterAccessor.isPagebreakOnly(request)));
  return renderOption;
}",0.9028414298808431
75301,"/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (bConsiderStartLabel) {
      dStart+=dStartShift * iDirection;
    }
    if (bConsiderEndLabel) {
      dEnd+=dEndShift * -iDirection;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!bCategoryScale && (iType & NUMERICAL) == NUMERICAL && (iType & LINEAR) == LINEAR) {
    double dMax=asDouble(oMaximum).doubleValue();
    double dMin=asDouble(oMinimum).doubleValue();
    if (bStepFixed && oStepNumber != null) {
      dTickGap=dLength / (oStepNumber.intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(oStep).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    dTickGap=dLength / (nTicks - 1) * iDirection;
  }
  if (nTicks > TICKS_MAX && bStepFixed && !bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap);
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  baTickLabelVisible=checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}","/** 
 * @param la
 * @param iLabelLocation
 * @param iOrientation
 * @param dStart
 * @param dEnd
 * @param bConsiderStartEndLabels
 * @param aax
 */
public final int computeTicks(IDisplayServer xs,Label la,int iLabelLocation,int iOrientation,double dStart,double dEnd,boolean bConsiderStartLabel,boolean bConsiderEndLabel,AllAxes aax) throws ChartException {
  int nTicks=0;
  double dLength=0;
  double dTickGap=0;
  int iDirection=(iScaleDirection == AUTO) ? ((iOrientation == HORIZONTAL) ? FORWARD : BACKWARD) : iScaleDirection;
  if (bConsiderStartLabel || bConsiderEndLabel) {
    computeAxisStartEndShifts(xs,la,iOrientation,iLabelLocation,aax);
    if (bConsiderStartLabel) {
      dStart+=dStartShift * iDirection;
    }
    if (bConsiderEndLabel) {
      dEnd+=dEndShift * -iDirection;
    }
  }
  this.dStart=dStart;
  this.dEnd=dEnd;
  nTicks=getTickCount();
  dLength=Math.abs(dStart - dEnd);
  if (!bCategoryScale && (iType & NUMERICAL) == NUMERICAL && (iType & LINEAR) == LINEAR) {
    double dMax=asDouble(oMaximum).doubleValue();
    double dMin=asDouble(oMinimum).doubleValue();
    if (bStepFixed && oStepNumber != null) {
      dTickGap=dLength / (oStepNumber.intValue()) * iDirection;
    }
 else {
      double dStepSize=asDouble(oStep).doubleValue();
      dTickGap=Math.min(Math.abs(dStepSize / (dMax - dMin) * dLength),dLength) * iDirection;
    }
  }
 else {
    if (isTickBetweenCategories()) {
      dTickGap=dLength / (nTicks - 1) * iDirection;
    }
 else {
      dTickGap=dLength / (nTicks - 2) * iDirection;
    }
  }
  if (nTicks > TICKS_MAX && bStepFixed && !bCategoryScale) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  AxisTickCoordinates atc=new AxisTickCoordinates(nTicks,dStart,dEnd,dTickGap,!bCategoryScale || isTickBetweenCategories());
  setTickCordinates(null);
  setEndPoints(dStart,dEnd);
  setTickCordinates(atc);
  baTickLabelVisible=checkTickLabelsVisibility(xs,la,iLabelLocation);
  return nTicks;
}",0.9604662949822604
75302,"/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected boolean[] checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  boolean[] ba=new boolean[atcTickCoordinates.size()];
  boolean vis=la.isSetVisible() && la.isVisible();
  Arrays.fill(ba,vis);
  baTickLabelStaggered=new boolean[atcTickCoordinates.size()];
  boolean staggerEnabled=isAxisLabelStaggered();
  if (!vis) {
    return ba;
  }
  if (iLabelShowingInterval >= 2) {
    for (int i=0, c=0; i < ba.length; i++) {
      ba[i]=(i % iLabelShowingInterval == 0);
      if (staggerEnabled && ba[i]) {
        c++;
        baTickLabelStaggered[i]=(c % 2 == 0);
      }
    }
  }
 else {
    if (staggerEnabled) {
      for (int i=0; i < ba.length; i++) {
        baTickLabelStaggered[i]=(i % 2 != 0);
      }
    }
  }
  if (!isCategoryScale()) {
    return ba;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iNewPointToCheck=0, iPrevPointToCheck=0;
  boolean isNegativeRotation=(dAngleInDegrees < 0 && dAngleInDegrees > -90);
switch (iLabelLocation) {
case ABOVE:
    iNewPointToCheck=isNegativeRotation ? 3 : 0;
  iPrevPointToCheck=isNegativeRotation ? 1 : 3;
break;
case BELOW:
iNewPointToCheck=isNegativeRotation ? (iScaleDirection == BACKWARD ? 1 : 3) : (iScaleDirection == BACKWARD ? 2 : 0);
iPrevPointToCheck=isNegativeRotation ? (iScaleDirection == BACKWARD ? 2 : 0) : (iScaleDirection == BACKWARD ? 0 : 2);
break;
case LEFT:
iNewPointToCheck=iScaleDirection == FORWARD ? 1 : 2;
iPrevPointToCheck=iScaleDirection == FORWARD ? 2 : 1;
break;
case RIGHT:
iNewPointToCheck=iScaleDirection == FORWARD ? 0 : 3;
iPrevPointToCheck=iScaleDirection == FORWARD ? 3 : 0;
break;
}
RotatedRectangle rrPrev[]=new RotatedRectangle[2];
DataSetIterator dsi=getData();
dsi.reset();
final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
String sText=null;
dsi.reset();
for (int i=0; i < atcTickCoordinates.size() - 1; i++) {
Object oValue=null;
if (dsi.hasNext()) {
oValue=dsi.next();
}
if (ba[i]) {
sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
}
 else if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
}
la.getCaption().setValue(sText);
if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
ba[i]=checkOneTickLabelVisibility(rrPrev,1,iLabelLocation,x,y,iNewPointToCheck,iPrevPointToCheck,la,xs,i);
}
 else {
ba[i]=checkOneTickLabelVisibility(rrPrev,0,iLabelLocation,x,y,iNewPointToCheck,iPrevPointToCheck,la,xs,i);
}
}
}
return ba;
}","/** 
 * Calculates visibility for axis labels.
 * @param xs
 * @param la
 * @param iLabelLocation
 * @return
 * @throws ChartException
 */
final protected boolean[] checkTickLabelsVisibility(IDisplayServer xs,Label la,int iLabelLocation) throws ChartException {
  boolean[] ba=new boolean[atcTickCoordinates.size()];
  boolean vis=la.isSetVisible() && la.isVisible();
  Arrays.fill(ba,vis);
  baTickLabelStaggered=new boolean[atcTickCoordinates.size()];
  boolean staggerEnabled=isAxisLabelStaggered();
  if (!vis) {
    return ba;
  }
  if (iLabelShowingInterval >= 2) {
    for (int i=0, c=0; i < ba.length; i++) {
      ba[i]=(i % iLabelShowingInterval == 0);
      if (staggerEnabled && ba[i]) {
        c++;
        baTickLabelStaggered[i]=(c % 2 == 0);
      }
    }
  }
 else {
    if (staggerEnabled) {
      for (int i=0; i < ba.length; i++) {
        baTickLabelStaggered[i]=(i % 2 != 0);
      }
    }
  }
  if (!isCategoryScale()) {
    return ba;
  }
  final double dAngleInDegrees=la.getCaption().getFont().getRotation();
  double x=0, y=0;
  int iNewPointToCheck=0, iPrevPointToCheck=0;
  boolean isNegativeRotation=(dAngleInDegrees < 0 && dAngleInDegrees > -90);
switch (iLabelLocation) {
case ABOVE:
    iNewPointToCheck=isNegativeRotation ? 3 : 0;
  iPrevPointToCheck=isNegativeRotation ? 1 : 3;
break;
case BELOW:
iNewPointToCheck=isNegativeRotation ? (iScaleDirection == BACKWARD ? 1 : 3) : (iScaleDirection == BACKWARD ? 2 : 0);
iPrevPointToCheck=isNegativeRotation ? (iScaleDirection == BACKWARD ? 2 : 0) : (iScaleDirection == BACKWARD ? 0 : 2);
break;
case LEFT:
iNewPointToCheck=iScaleDirection == FORWARD ? 1 : 2;
iPrevPointToCheck=iScaleDirection == FORWARD ? 2 : 1;
break;
case RIGHT:
iNewPointToCheck=iScaleDirection == FORWARD ? 0 : 3;
iPrevPointToCheck=iScaleDirection == FORWARD ? 3 : 0;
break;
}
RotatedRectangle rrPrev[]=new RotatedRectangle[2];
DataSetIterator dsi=getData();
dsi.reset();
final int iDateTimeUnit=(iType == IConstants.DATE_TIME) ? CDateTime.computeUnit(dsi) : IConstants.UNDEFINED;
String sText=null;
dsi.reset();
for (int i=0; i < atcTickCoordinates.size() - 1; i++) {
if (!isTickBetweenCategories() && i == 0) {
continue;
}
Object oValue=null;
if (dsi.hasNext()) {
oValue=dsi.next();
}
if (ba[i]) {
sText=formatCategoryValue(iType,oValue,iDateTimeUnit);
if (iLabelLocation == ABOVE || iLabelLocation == BELOW) {
x=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
}
 else if (iLabelLocation == LEFT || iLabelLocation == RIGHT) {
y=this.atcTickCoordinates.getCoordinate(i) * dZoomFactor;
}
la.getCaption().setValue(sText);
if (isAxisLabelStaggered() && baTickLabelStaggered[i]) {
ba[i]=checkOneTickLabelVisibility(rrPrev,1,iLabelLocation,x,y,iNewPointToCheck,iPrevPointToCheck,la,xs,i);
}
 else {
ba[i]=checkOneTickLabelVisibility(rrPrev,0,iLabelLocation,x,y,iNewPointToCheck,iPrevPointToCheck,la,xs,i);
}
}
}
return ba;
}",0.990178884601894
75303,"/** 
 * Returns the coordinates of specified ticks. For the sake of performance, invokers need to ensure the index correct.
 * @param index tick index
 * @return
 */
public double getCoordinate(int index){
  if (index == size - 1) {
    return dEnd;
  }
  return dStart + index * dStep;
}","/** 
 * Returns the coordinates of specified ticks. For the sake of performance, invokers need to ensure the index correct.
 * @param index tick index
 * @return
 */
public double getCoordinate(int index){
  if (index == 0) {
    return dStart;
  }
 else   if (index == size - 1) {
    return dEnd;
  }
  return dStart + index * dStep - (isTickBetweenCategory ? 0 : dStep / 2);
}",0.863568215892054
75304,"public Object clone(){
  return new AxisTickCoordinates(size,dStart,dEnd,dStep);
}","public Object clone(){
  return new AxisTickCoordinates(size,dStart,dEnd,dStep,isTickBetweenCategory);
}",0.8817204301075269
75305,"AxisTickCoordinates(int size,double dStart,double dEnd,double dStep){
  this.size=size;
  this.dStart=dStart;
  this.dEnd=dEnd;
  this.dStep=dStep;
}","AxisTickCoordinates(int size,double dStart,double dEnd,double dStep){
  this(size,dStart,dEnd,dStep,true);
}",0.7782101167315175
75306,"/** 
 * Returns the normalized tick coordinates. that means the start point is always zero, and the array lines forward. For the sake of performance, invokers need to ensure the index correct.
 * @param index tick index
 * @return
 */
public double getNormalizedCoordinate(int index){
  if (index == size - 1) {
    return dEnd - dStart;
  }
  return index * dStep;
}","/** 
 * Returns the normalized tick coordinates. that means the start point is always zero, and the array lines forward. For the sake of performance, invokers need to ensure the index correct.
 * @param index tick index
 * @return
 */
public double getNormalizedCoordinate(int index){
  return getCoordinate(index) - dStart;
}",0.8802308802308803
75307,"/** 
 * Resets the start and end coordinates.
 * @param dStart
 * @param dEnd
 */
void setEndPoints(double dStart,double dEnd){
  this.dStart=dStart;
  this.dEnd=dEnd;
  this.dStep=(dEnd - dStart) / size;
}","/** 
 * Resets the start and end coordinates.
 * @param dStart
 * @param dEnd
 */
void setEndPoints(double dStart,double dEnd){
  this.dStart=dStart;
  this.dEnd=dEnd;
  if (isTickBetweenCategory) {
    this.dStep=(dEnd - dStart) / size;
  }
 else {
    this.dStep=(dEnd - dStart) / (size - 1);
  }
}",0.8142292490118577
75308,"public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  AxisTickCoordinates daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates.getStart() + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dY+=dUnitSize / 2;
          }
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates.getStart() + dUnitSize * i;
          if (!oaxBase.isTickBwtweenCategories()) {
            dX+=dUnitSize / 2;
          }
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      for (int j=0; j < iTickCount - 1; j++) {
        if (aax.areAxesSwapped()) {
          if ((dY <= daTickCoordinates.getCoordinate(j) && dY >= daTickCoordinates.getCoordinate(j + 1)) || (dY <= daTickCoordinates.getCoordinate(j + 1) && dY >= daTickCoordinates.getCoordinate(j))) {
            dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
            break;
          }
        }
 else {
          if ((dX <= daTickCoordinates.getCoordinate(j + 1) && dX >= daTickCoordinates.getCoordinate(j)) || (dX <= daTickCoordinates.getCoordinate(j) && dX >= daTickCoordinates.getCoordinate(j + 1))) {
            dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
            break;
          }
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}","public final ISeriesRenderingHints getSeriesRenderingHints(SeriesDefinition sdOrthogonal,Series seOrthogonal) throws ChartException, IllegalArgumentException {
  if (seOrthogonal == null || seOrthogonal.getClass() == SeriesImpl.class) {
    return null;
  }
  OneAxis oaxOrthogonal=findOrthogonalAxis(seOrthogonal);
  if (oaxOrthogonal == null) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.NOT_FOUND,""String_Node_Str"",new Object[]{seOrthogonal},Messages.getResourceBundle(rtc.getULocale()));
  }
  final OneAxis oaxBase=aax.getPrimaryBase();
  final SeriesDefinition sdBase=(SeriesDefinition)oaxBase.getModelAxis().getSeriesDefinitions().get(0);
  final AutoScale scBase=oaxBase.getScale();
  final AutoScale scOrthogonal=oaxOrthogonal.getScale();
  final int iTickCount=scBase.getTickCount();
  int iUnitCount=iTickCount;
  final int iDirection=scBase.getDirection();
  final double dUnitSize=(iDirection == BACKWARD || (iDirection == AUTO && aax.areAxesSwapped())) ? -scBase.getUnitSize() : scBase.getUnitSize();
  if (scBase.getType() == IConstants.DATE_TIME) {
  }
  AxisTickCoordinates daTickCoordinates=scBase.getTickCordinates();
  Object oDataBase=null;
  DataSetIterator dsiDataBase=scBase.getData();
  Object oDataOrthogonal;
  DataSetIterator dsiDataOrthogonal=getTypedDataSet(seOrthogonal,oaxOrthogonal.getScale().getType());
  double dOrthogonalZero=0;
  if ((scOrthogonal.getType() & NUMERICAL) == NUMERICAL) {
    dOrthogonalZero=getLocation(scOrthogonal,0);
  }
 else {
    dOrthogonalZero=scOrthogonal.getStart();
  }
  double dBaseZero=0;
  if ((scBase.getType() & NUMERICAL) == IConstants.NUMERICAL && !oaxBase.isCategoryScale()) {
    dBaseZero=getLocation(scBase,0);
  }
 else   if (oaxBase.isTickBwtweenCategories()) {
    dBaseZero=scBase.getStart();
  }
 else {
    dBaseZero=scBase.getStart() + scBase.getStartShift();
  }
  if (scBase.getType() == TEXT || oaxBase.isCategoryScale()) {
    iUnitCount--;
    if (oaxBase.isTickBwtweenCategories()) {
      iUnitCount--;
    }
  }
  double dX=0, dY=0;
  Location lo;
  final int iBaseCount=dsiDataBase.size();
  final int iOrthogonalCount=dsiDataOrthogonal.size();
  DataPointHints[] dpa=null;
  if (iBaseCount != iOrthogonalCount) {
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{new Integer(iBaseCount),new Integer(iOrthogonalCount)},rtc.getULocale()));
  }
 else {
    dpa=new DataPointHints[iBaseCount];
    final boolean bScatter=(oaxBase.getScale().getType() != IConstants.TEXT && !oaxBase.isCategoryScale());
    final DataPoint dp=seOrthogonal.getDataPoint();
    final EList el=dp.getComponents();
    DataPointComponent dpc;
    DataPointComponentType dpct;
    FormatSpecifier fsBase=null, fsOrthogonal=null, fsSeries=null, fsPercentile=null;
    for (int i=0; i < el.size(); i++) {
      dpc=(DataPointComponent)el.get(i);
      dpct=dpc.getType();
      if (DataPointComponentType.BASE_VALUE_LITERAL.equals(dpct)) {
        fsBase=dpc.getFormatSpecifier();
        if (fsBase == null) {
          fsBase=sdBase.getFormatSpecifier();
        }
      }
      if (DataPointComponentType.ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsOrthogonal=dpc.getFormatSpecifier();
        if (fsOrthogonal == null && seOrthogonal.eContainer() instanceof SeriesDefinition) {
          fsOrthogonal=((SeriesDefinition)seOrthogonal.eContainer()).getFormatSpecifier();
        }
      }
      if (DataPointComponentType.SERIES_VALUE_LITERAL.equals(dpct)) {
        fsSeries=dpc.getFormatSpecifier();
      }
      if (DataPointComponentType.PERCENTILE_ORTHOGONAL_VALUE_LITERAL.equals(dpct)) {
        fsPercentile=dpc.getFormatSpecifier();
      }
    }
    dsiDataBase.reset();
    dsiDataOrthogonal.reset();
    UserDataSetHints udsh=new UserDataSetHints(seOrthogonal.getDataSets());
    udsh.reset();
    double total=0;
    boolean isZeroValue=true;
    for (int i=0; i < iOrthogonalCount; i++) {
      Object v=dsiDataOrthogonal.next();
      if (v instanceof Number) {
        if (((Number)v).doubleValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((Number)v).doubleValue();
      }
 else       if (v instanceof NumberDataElement) {
        if (((NumberDataElement)v).getValue() != 0.0) {
          isZeroValue=false;
        }
        total+=((NumberDataElement)v).getValue();
      }
    }
    dsiDataOrthogonal.reset();
    for (int i=0; i < iBaseCount; i++) {
      oDataBase=dsiDataBase.next();
      oDataOrthogonal=dsiDataOrthogonal.next();
      if (!bScatter) {
        if (aax.areAxesSwapped()) {
          dY=daTickCoordinates.getStart() + dUnitSize * i;
          try {
            dX=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dX=Double.NaN;
          }
catch (          ChartException dfex) {
            dX=dOrthogonalZero;
          }
        }
 else {
          dX=daTickCoordinates.getStart() + dUnitSize * i;
          try {
            dY=getLocation(scOrthogonal,oDataOrthogonal);
          }
 catch (          IllegalArgumentException nvex) {
            dY=Double.NaN;
          }
catch (          ChartException dfex) {
            dY=dOrthogonalZero;
          }
        }
      }
 else {
        try {
          dX=getLocation(scBase,oDataBase);
        }
 catch (        IllegalArgumentException nvex) {
          dX=dBaseZero;
        }
catch (        ChartException dfex) {
          dX=dBaseZero;
        }
        try {
          dY=getLocation(scOrthogonal,oDataOrthogonal);
        }
 catch (        IllegalArgumentException nvex) {
          dX=Double.NaN;
        }
catch (        ChartException dfex) {
          dY=dOrthogonalZero;
        }
        if (aax.areAxesSwapped()) {
          final double dTemp=dX;
          dX=dY;
          dY=dTemp;
        }
      }
      lo=LocationImpl.create(dX,dY);
      double dLength=0;
      if (!bScatter) {
        dLength=dUnitSize;
      }
 else {
        for (int j=0; j < iTickCount - 1; j++) {
          if (aax.areAxesSwapped()) {
            if ((dY <= daTickCoordinates.getCoordinate(j) && dY >= daTickCoordinates.getCoordinate(j + 1)) || (dY <= daTickCoordinates.getCoordinate(j + 1) && dY >= daTickCoordinates.getCoordinate(j))) {
              dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
              break;
            }
          }
 else {
            if ((dX <= daTickCoordinates.getCoordinate(j + 1) && dX >= daTickCoordinates.getCoordinate(j)) || (dX <= daTickCoordinates.getCoordinate(j) && dX >= daTickCoordinates.getCoordinate(j + 1))) {
              dLength=daTickCoordinates.getCoordinate(j + 1) - daTickCoordinates.getCoordinate(j);
              break;
            }
          }
        }
      }
      Object percentileValue=null;
      if (total != 0) {
        if (oDataOrthogonal instanceof Number) {
          percentileValue=new Double(((Number)oDataOrthogonal).doubleValue() / total);
        }
 else         if (oDataOrthogonal instanceof NumberDataElement) {
          percentileValue=new Double(((NumberDataElement)oDataOrthogonal).getValue() / total);
        }
      }
 else       if (isZeroValue == true) {
        percentileValue=new Double(1.0 / iOrthogonalCount);
      }
      dpa[i]=new DataPointHints(oDataBase,oDataOrthogonal,seOrthogonal.getSeriesIdentifier(),percentileValue,seOrthogonal.getDataPoint(),fsBase,fsOrthogonal,fsSeries,fsPercentile,i,lo,dLength,rtc);
      udsh.next(dpa[i]);
    }
  }
  return new SeriesRenderingHints(this,oaxBase.getAxisCoordinate(),scOrthogonal.getStart(),dOrthogonalZero,dSeriesThickness,daTickCoordinates,dpa,scBase,scOrthogonal,ssl,dsiDataBase,dsiDataOrthogonal);
}",0.9812951496388028
75309,"/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  boolean[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    if (argDefs.length != aggrArgs[aggrIndex].length) {
      throw new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
    }
    try {
      if (aggrInfo.getArgument().length > argDefs.length && !isFunctionCount(aggrInfo))       throw new DataException(""String_Node_Str"");
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i] || newGroup) {
          IBaseExpression argExpr=aggrInfo.getArgument()[i];
          checkExpression(aggrInfo,argExpr);
          try {
            aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
          }
 catch (          BirtException e) {
            throw DataException.wrap(e);
          }
        }
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggregation.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}","/** 
 * Calculate the value by row
 * @param aggrIndex
 * @param startingGroupLevel
 * @param endingGroupLevel
 * @param context
 * @param scope
 * @throws DataException
 */
private boolean onRow(int aggrIndex,int startingGroupLevel,int endingGroupLevel,boolean populateValue) throws DataException {
  IAggrInfo aggrInfo=getAggrInfo(aggrIndex);
  Accumulator acc=null;
  boolean newGroup=false;
  boolean[] argDefs=aggrInfo.getAggregation().getParameterDefn();
  if (startingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc=accumulatorManagers[aggrIndex].next();
    acc.start();
    newGroup=true;
  }
 else {
    acc=accumulatorManagers[aggrIndex].getCurrentAccumulator();
  }
  boolean accepted=true;
  if (aggrInfo.getFilter() != null) {
    try {
      Object filterResult=ExprEvaluateUtil.evaluateValue(aggrInfo.getFilter(),this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
      if (filterResult == null)       accepted=true;
 else       accepted=DataTypeUtil.toBoolean(filterResult).booleanValue();
    }
 catch (    BirtException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  if (aggrInfo.getCalcualteLevel() > 0) {
    if (startingGroupLevel > aggrInfo.getCalcualteLevel())     accepted=false;
  }
  if (accepted) {
    if (!isFunctionCount(aggrInfo)) {
      if (aggrInfo.getArgument() == null || aggrInfo.getArgument().length != argDefs.length)       throw new DataException(ResourceConstants.INVALID_AGGR_PARAMETER,aggrInfo.getName());
    }
    try {
      for (int i=0; i < argDefs.length; i++) {
        if (argDefs[i] || newGroup) {
          IBaseExpression argExpr=aggrInfo.getArgument()[i];
          checkExpression(aggrInfo,argExpr);
          try {
            aggrArgs[aggrIndex][i]=ExprEvaluateUtil.evaluateValue(argExpr,this.populator.getCache().getCurrentIndex(),this.populator.getCache().getCurrentResult(),this.populator.getQuery().getExprProcessor().getScope());
          }
 catch (          BirtException e) {
            throw DataException.wrap(e);
          }
        }
      }
      acc.onRow(aggrArgs[aggrIndex]);
      newGroup=false;
    }
 catch (    DataException e) {
      if (invalidAggrMsg == null)       invalidAggrMsg=new HashMap();
      invalidAggrMsg.put(new Integer(aggrIndex),e);
      return false;
    }
  }
  boolean isRunning=(aggrInfo.getAggregation().getType() == IAggregation.RUNNING_AGGR);
  if (isRunning && populateValue) {
    Object value=acc.getValue();
    currentRoundAggrValue[aggrIndex].add(value);
  }
  if (endingGroupLevel <= aggrInfo.getGroupLevel()) {
    acc.finish();
    if ((!isRunning) && populateValue) {
      Object value=acc.getValue();
      currentRoundAggrValue[aggrIndex].add(value);
    }
  }
  return true;
}",0.9522027555706752
75310,"/** 
 */
public void test_regression_118178(){
  DesignEngine engine=new DesignEngine(new DesignConfig());
  SessionHandle session=engine.newSessionHandle(ULocale.ENGLISH);
  ReportDesignHandle designHandle=session.createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  OdaDataSetHandle dataset=factory.newOdaDataSet(""String_Node_Str"",null);
  try {
    designHandle.getDataSets().add(dataset);
    fail();
  }
 catch (  Exception e) {
    assertTrue(e instanceof org.eclipse.birt.report.model.api.command.NameException);
  }
}","/** 
 */
public void test_regression_118178(){
  DesignEngine engine=new DesignEngine(new DesignConfig());
  SessionHandle session=engine.newSessionHandle(ULocale.ENGLISH);
  ReportDesignHandle designHandle=session.createDesign();
  ElementFactory factory=designHandle.getElementFactory();
  OdaDataSetHandle dataset=factory.newOdaDataSet(""String_Node_Str"",null);
  try {
    designHandle.getDataSets().add(dataset);
  }
 catch (  Exception e) {
    assertTrue(e instanceof org.eclipse.birt.report.model.api.command.NameException);
  }
}",0.988950276243094
75311,"/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
public void test_regression_155943() throws DesignFileException, SemanticException, IOException {
  String report=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT;
  String libA=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY;
  openDesign(INPUT);
  ExtendedItemHandle chart=(ExtendedItemHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(chart);
  assertEquals(""String_Node_Str"",chart.getName());
  List elements=new ArrayList();
  elements.add(chart);
  GroupElementHandle group=new SimpleGroupElementHandle(designHandle,elements);
  assertEquals(""String_Node_Str"",chart.getProperty(ReportItemHandle.WIDTH_PROP).toString());
  assertFalse(group.hasLocalPropertiesForExtendedElements());
  chart.setProperty(ReportItemHandle.WIDTH_PROP,""String_Node_Str"");
  assertFalse(group.hasLocalPropertiesForExtendedElements());
  group.clearLocalProperties();
  assertFalse(group.hasLocalPropertiesForExtendedElements());
}","/** 
 * @throws DesignFileException
 * @throws SemanticException
 * @throws IOException
 */
public void test_regression_155943() throws DesignFileException, SemanticException, IOException {
  String report=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ INPUT;
  String libA=getTempFolder() + ""String_Node_Str"" + INPUT_FOLDER+ ""String_Node_Str""+ LIBRARY;
  openDesign(INPUT);
  ExtendedItemHandle chart=(ExtendedItemHandle)designHandle.findElement(""String_Node_Str"");
  assertNotNull(chart);
  assertEquals(""String_Node_Str"",chart.getName());
  List elements=new ArrayList();
  elements.add(chart);
  GroupElementHandle group=new SimpleGroupElementHandle(designHandle,elements);
  chart.setProperty(ReportItemHandle.WIDTH_PROP,""String_Node_Str"");
  assertTrue(group.hasLocalPropertiesForExtendedElements());
  group.clearLocalProperties();
  elements.clear();
  assertFalse(group.hasLocalPropertiesForExtendedElements());
}",0.8136094674556213
75312,"private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontStyle,fontSize);
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}","private String applyIntrinsicFont(String fontName,int fontStyle,float fontSize,String text){
  setFont(fontName,fontSize);
  return (""String_Node_Str"" + text + ""String_Node_Str"");
}",0.9731182795698924
75313,"public void refreshFigure(){
  refreshBorder(getCrosstabHandleAdapter().getDesignElementHandle(),(BaseBorder)getFigure().getBorder());
  refreshBackground(getCrosstabHandleAdapter().getDesignElementHandle());
  refreshMargin();
}","public void refreshFigure(){
  refreshBorder(getCrosstabHandleAdapter().getDesignElementHandle(),(BaseBorder)getFigure().getBorder());
  refreshBackground(getCrosstabHandleAdapter().getDesignElementHandle());
  refreshMargin();
  ((TableLayout)getContentPane().getLayoutManager()).markDirty();
}",0.8740458015267175
75314,"protected void mergeDropCell(RowArea row){
  if (unresolvedRow == null) {
    return;
  }
  CellArea[] cells=new CellArea[columnNumber];
  Iterator iter=row.getChildren();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colStart=cell.getColumnID();
    int colEnd=colStart + cell.getColSpan();
    for (int i=colStart; i < colEnd; i++) {
      int index=colStart - start;
      if (index >= 0 && index < columnNumber) {
        cells[colStart - start]=cell;
      }
    }
  }
  for (int i=0; i < columnNumber; i++) {
    if (cells[i] == null) {
      ICellContent cellContent=null;
      CellArea ca=unresolvedRow.getCell(start + i);
      if (ca != null) {
        ICellContent cc=(ICellContent)ca.getContent();
        cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)row.getContent(),ca));
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        emptyCell.setRowSpan(ca.getRowSpan());
        resolveBorderConflict(emptyCell,false);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        emptyCell.setHeight(row.getHeight());
        row.addChild(emptyCell);
      }
    }
  }
}","protected void mergeDropCell(RowArea row){
  if (unresolvedRow == null) {
    return;
  }
  CellArea[] cells=new CellArea[columnNumber];
  Iterator iter=row.getChildren();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colStart=cell.getColumnID();
    int colEnd=colStart + cell.getColSpan();
    for (int i=colStart; i < colEnd; i++) {
      int index=colStart - start;
      if (index >= 0 && index < columnNumber) {
        cells[colStart - start]=cell;
      }
    }
  }
  for (int i=0; i < columnNumber; i++) {
    if (cells[i] == null) {
      ICellContent cellContent=null;
      CellArea ca=unresolvedRow.getCell(start + i);
      if (ca != null) {
        ICellContent cc=(ICellContent)ca.getContent();
        cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)row.getContent(),ca));
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        emptyCell.setRowSpan(cellContent.getRowSpan());
        resolveBorderConflict(emptyCell,false);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        emptyCell.setHeight(row.getHeight());
        row.addChild(emptyCell);
      }
    }
  }
}",0.9958816922500936
75315,"/** 
 * Set state of stacked CheckBox by type of series.
 */
private void setStackedBoxState(){
  if (btnStack == null) {
    return;
  }
  ChartDimension cd=getChart().getDimension();
  if ((cd == ChartDimension.TWO_DIMENSIONAL_LITERAL || cd == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    List seriesDefns=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChart());
    Series s=((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries();
    if (s.getDisplayName().equals(seriesDefn.getDesignTimeSeries().getDisplayName())) {
      btnStack.setEnabled(true);
    }
 else {
      btnStack.setEnabled(false);
      cmbTypes.setEnabled(true);
    }
  }
}","/** 
 * Set state of stacked CheckBox by type of series.
 */
private void setStackedBoxState(){
  if (btnStack == null) {
    return;
  }
  ChartDimension cd=getChart().getDimension();
  if ((cd == ChartDimension.TWO_DIMENSIONAL_LITERAL || cd == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL)) {
    List seriesDefns=ChartUIUtil.getAllOrthogonalSeriesDefinitions(getChart());
    Series s=((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries();
    if (s.getDisplayName().equals(seriesDefn.getDesignTimeSeries().getDisplayName())) {
      if (canStack && seriesDefn.getDesignTimeSeries().canBeStacked()) {
        btnStack.setEnabled(true);
      }
    }
 else {
      btnStack.setEnabled(false);
      cmbTypes.setEnabled(true);
    }
  }
}",0.941508104298802
75316,"/** 
 * Gets position of css style sheet in all sheets. Compare two absolute path of file.
 * @param module module
 * @param csses list each item is <code>CssStyleSheet</code>
 * @param location absolute location
 * @return css style sheet.
 */
public static int getPositionOfCssStyleSheet(Module module,List csses,String location){
  if (location == null || csses == null)   return -1;
  URL url=module.findResource(location,IResourceLocator.CASCADING_STYLE_SHEET);
  if (url == null)   return -1;
  String fileLocation=url.getFile();
  for (int i=0; i < csses.size(); ++i) {
    CssStyleSheet css=(CssStyleSheet)csses.get(i);
    String tmpFileName=css.getFileName();
    url=module.findResource(tmpFileName,IResourceLocator.CASCADING_STYLE_SHEET);
    if (url == null)     continue;
    tmpFileName=url.getFile();
    if (fileLocation.equalsIgnoreCase(tmpFileName))     return i;
  }
  return -1;
}","/** 
 * Gets position of css style sheet in all sheets. Compare two absolute path of file.
 * @param module module
 * @param csses list each item is <code>CssStyleSheet</code>
 * @param location absolute location
 * @return css style sheet.
 */
public static int getPositionOfCssStyleSheet(Module module,List csses,String location){
  if (location == null || csses == null)   return -1;
  URL targetUrl=module.findResource(location,IResourceLocator.CASCADING_STYLE_SHEET);
  String fileLocation=location;
  if (targetUrl != null)   fileLocation=targetUrl.getFile();
  for (int i=0; i < csses.size(); ++i) {
    CssStyleSheet css=(CssStyleSheet)csses.get(i);
    String tmpFileName=css.getFileName();
    if (targetUrl != null) {
      URL url=module.findResource(tmpFileName,IResourceLocator.CASCADING_STYLE_SHEET);
      if (url != null)       tmpFileName=url.getFile();
    }
    if (fileLocation.equalsIgnoreCase(tmpFileName))     return i;
  }
  return -1;
}",0.8974771873322598
75317,"/** 
 * Check style sheet can be droped or not.
 * @param sheetHandle
 * @return <code>true</code> can be dropped.else return <code>false</code>
 */
public final boolean canDropCssStyleSheet(CssStyleSheetHandle sheetHandle){
  if (!element.canEdit(module)) {
    return false;
  }
  if (sheetHandle == null)   return false;
  String fileName=sheetHandle.getFileName();
  CssStyleSheet sheet=CssStyleSheetAdapter.getCssStyleSheetByLocation(module,((ICssStyleSheetOperation)element).getCsses(),fileName);
  ;
  if (sheet == null) {
    return false;
  }
  return true;
}","/** 
 * Check style sheet can be droped or not.
 * @param sheetHandle
 * @return <code>true</code> can be dropped.else return <code>false</code>
 */
public final boolean canDropCssStyleSheet(CssStyleSheetHandle sheetHandle){
  if (!element.canEdit(module)) {
    return false;
  }
  if (sheetHandle == null)   return false;
  String fileName=sheetHandle.getFileName();
  int position=CssStyleSheetAdapter.getPositionOfCssStyleSheet(module,((ICssStyleSheetOperation)element).getCsses(),fileName);
  ;
  if (position == -1) {
    return false;
  }
  return true;
}",0.9380530973451328
75318,"public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    item.setForeground(gray);
  }
 else {
    Color black=Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
    item.setForeground(black);
  }
}","public void handleEvent(Event event){
  TreeItem item=(TreeItem)event.item;
  if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
    Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
    if (!item.getForeground().equals(gray)) {
      item.setForeground(gray);
    }
  }
 else {
    Color black=Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
    if (!item.getForeground().equals(black)) {
      item.setForeground(black);
    }
  }
}",0.8623265741728922
75319,"/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        item.setForeground(gray);
      }
 else {
        Color black=Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
        item.setForeground(black);
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator().addColleague(getSelectionSynchronizer());
}","/** 
 * Creates the SWT control for this page under the given parent control. <p> Clients should not call this method (the workbench calls this method when it needs to, which may be never). </p>
 * @param parent the parent control
 */
public void createControl(Composite parent){
  super.createControl(parent);
  createContextMenu();
  ViewsTreeProvider provider=new ViewsTreeProvider();
  getTreeViewer().setContentProvider(provider);
  getTreeViewer().setLabelProvider(provider);
  getSelectionSynchronizer().setTreeViewer(getTreeViewer());
  new RenameListener(getTreeViewer()).apply();
  getTreeViewer().setSorter(new ItemSorter());
  addDragAndDropListener();
  init(reportHandle);
  getTreeViewer().expandToLevel(2);
  final Tree tree=getTreeViewer().getTree();
  tree.addListener(SWT.PaintItem,new Listener(){
    public void handleEvent(    Event event){
      TreeItem item=(TreeItem)event.item;
      if (event.item.getData() instanceof CssStyleSheetHandle || event.item.getData() instanceof CssSharedStyleHandle) {
        Color gray=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
        if (!item.getForeground().equals(gray)) {
          item.setForeground(gray);
        }
      }
 else {
        Color black=Display.getCurrent().getSystemColor(SWT.COLOR_BLACK);
        if (!item.getForeground().equals(black)) {
          item.setForeground(black);
        }
      }
    }
  }
);
  tree.addMouseListener(new MouseAdapter(){
    public void mouseDown(    MouseEvent e){
      if ((e.stateMask & SWT.CTRL) != 0 || (e.stateMask & SWT.SHIFT) != 0) {
        setSingleSelection(e);
      }
    }
    private void setSingleSelection(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)getSelection();
      if (!selection.isEmpty() && selection.size() > 1) {
        boolean includeCell=false;
        for (Iterator iterator=selection.iterator(); iterator.hasNext(); ) {
          Object obj=iterator.next();
          if (obj instanceof CellHandle) {
            if (includeCell) {
              TreeItem item=getTreeViewer().getTree().getItem(new Point(e.x,e.y));
              if (item != null)               getTreeViewer().getTree().setSelection(new TreeItem[]{item});
              break;
            }
            includeCell=true;
          }
        }
      }
    }
  }
);
  tree.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      if (getSelection() instanceof StructuredSelection) {
        List list=new ArrayList();
        Object selectedObject=((StructuredSelection)getSelection()).getFirstElement();
        list.add(selectedObject);
        ReportRequest r=new ReportRequest();
        r.setType(ReportRequest.OPEN_EDITOR);
        r.setRequestConvert(new IRequestConvert(){
          public List convertSelectionToModelLisr(          List list){
            List lst=new ArrayList();
            for (Iterator itr=list.iterator(); itr.hasNext(); ) {
              Object obj=itr.next();
              lst.add(obj);
            }
            return lst;
          }
        }
);
        r.setSelectionObject(list);
        SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
        try {
          Tree tree=(Tree)e.getSource();
          TreeItem[] selectedItems=tree.getSelection();
          if (selectedItems.length > 0) {
            if (selectedItems[0].getExpanded()) {
              selectedItems[0].setExpanded(false);
            }
 else {
              getTreeViewer().expandToLevel(selectedObject,selectedItems[0].getExpanded() ? 0 : 1);
            }
          }
        }
 catch (        Exception e2) {
        }
      }
    }
  }
);
  tree.addMouseTrackListener(new MouseTrackAdapter(){
    public void mouseHover(    MouseEvent event){
      Widget widget=event.widget;
      if (widget == tree) {
        Point pt=new Point(event.x,event.y);
        TreeItem item=tree.getItem(pt);
        if (item == null || item.getData() == null) {
          tree.setToolTipText(null);
        }
 else {
          tree.setToolTipText(getTooltip(item.getData()));
        }
      }
    }
  }
);
  SessionHandleAdapter.getInstance().getMediator().addColleague(getSelectionSynchronizer());
}",0.9842882457176608
75320,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.9964753272910372
75321,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=null;
      try {
        meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      }
 catch (      SQLException e) {
        try {
          meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).executeQuery().getMetaData();
        }
 catch (        Exception ex) {
          meta=null;
        }
      }
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}",0.4838196286472148
75322,"public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      processor(showLevels,result,nullLevelHandle);
      CrosstabAdaptUtil.processInvaildBindings(reportHandle);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      boolean isLevelRemoved=processor(showLevels,result,nullLevelHandle);
      CrosstabAdaptUtil.processInvaildBindings(reportHandle,isLevelRemoved);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.981169474727453
75323,"private void processor(List ori,List newList,List nullLevelHandle) throws SemanticException {
  for (int i=nullLevelHandle.size() - 1; i >= 0; i--) {
    int index=((Integer)nullLevelHandle.get(i)).intValue();
    viewHandle.removeLevel(index);
  }
  for (int i=0; i < ori.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)ori.get(i);
    if (!newList.contains(tempHandle)) {
      viewHandle.removeLevel(tempHandle.getQualifiedName());
    }
  }
  Collections.sort(newList,new LevelComparator());
  for (int i=0; i < newList.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)newList.get(i);
    if (viewHandle.getLevel(tempHandle.getQualifiedName()) == null) {
      insertLevelHandle(tempHandle,i);
    }
  }
}","private boolean processor(List ori,List newList,List nullLevelHandle) throws SemanticException {
  boolean isLevelRemoved=false;
  for (int i=nullLevelHandle.size() - 1; i >= 0; i--) {
    int index=((Integer)nullLevelHandle.get(i)).intValue();
    viewHandle.removeLevel(index);
    isLevelRemoved=true;
  }
  for (int i=0; i < ori.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)ori.get(i);
    if (!newList.contains(tempHandle)) {
      viewHandle.removeLevel(tempHandle.getQualifiedName());
      isLevelRemoved=true;
    }
  }
  Collections.sort(newList,new LevelComparator());
  for (int i=0; i < newList.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)newList.get(i);
    if (viewHandle.getLevel(tempHandle.getQualifiedName()) == null) {
      insertLevelHandle(tempHandle,i);
    }
  }
  return isLevelRemoved;
}",0.922879177377892
75324,"/** 
 * Most objects should already be formatted to the same type by method formatToComparable at this point if neither of them is null. This method will therefore be terminated pretty soon except for calling from method between with weird parameters like obj:String, op1:Double and op2:Date.
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws DataException
 */
public static int compare(Object obj1,Object obj2) throws DataException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  try {
    if (MiscUtil.isSameType(obj1,obj2)) {
      if (obj1 instanceof Boolean) {
        if (obj1.equals(obj2))         return 0;
        Boolean bool=(Boolean)obj1;
        if (bool.equals(Boolean.TRUE))         return 1;
 else         return -1;
      }
 else       if (obj1 instanceof Comparable) {
        return ((Comparable)obj1).compareTo(obj2);
      }
 else {
        return obj1.toString().compareTo(obj2.toString());
      }
    }
 else     if (MiscUtil.isNumericOrString(obj1) && MiscUtil.isNumericOrString(obj2)) {
      try {
        return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isDateOrString(obj1) && MiscUtil.isDateOrString(obj2)) {
      try {
        return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isBooleanOrString(obj1) && MiscUtil.isBooleanOrString(obj2)) {
      try {
        return DataTypeUtil.toBoolean(obj1).compareTo(DataTypeUtil.toBoolean(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     throw new DataException(ResourceConstants.INVALID_TYPE_IN_EXPR);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}","/** 
 * Most objects should already be formatted to the same type by method formatToComparable at this point if neither of them is null. This method will therefore be terminated pretty soon except for calling from method between with weird parameters like obj:String, op1:Double and op2:Date.
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws DataException
 */
public static int compare(Object obj1,Object obj2) throws DataException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  try {
    if (MiscUtil.isSameType(obj1,obj2)) {
      if (obj1 instanceof Boolean) {
        if (obj1.equals(obj2))         return 0;
        Boolean bool=(Boolean)obj1;
        if (bool.equals(Boolean.TRUE))         return 1;
 else         return -1;
      }
 else       if (obj1 instanceof Comparable) {
        return ((Comparable)obj1).compareTo(obj2);
      }
 else {
        return obj1.toString().compareTo(obj2.toString());
      }
    }
 else     if (MiscUtil.isNumericOrString(obj1) && MiscUtil.isNumericOrString(obj2)) {
      try {
        return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isDateOrString(obj1) && MiscUtil.isDateOrString(obj2)) {
      try {
        return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isBooleanOrString(obj1) && MiscUtil.isBooleanOrString(obj2)) {
      try {
        boolean b1=DataTypeUtil.toBoolean(obj1).booleanValue();
        boolean b2=DataTypeUtil.toBoolean(obj2).booleanValue();
        if (b1 == b2) {
          return 0;
        }
 else         if (b1 == false && b2 == true) {
          return -1;
        }
 else {
          return 1;
        }
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     throw new DataException(ResourceConstants.INVALID_TYPE_IN_EXPR);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}",0.9470070800257456
75325,"/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int iShellHeight=170;
  int iShellWidth=160;
  if (bGradientEnabled) {
    iShellHeight+=30;
  }
  if (bImageEnabled) {
    iShellHeight+=30;
  }
  if (bAutoEnabled) {
    iShellHeight+=30;
  }
  if (bTransparentEnabled) {
    iShellHeight+=30;
  }
  if (bPositiveNegativeEnabled) {
    iShellHeight+=30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NO_FOCUS);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      clearColorSelection();
    }
  }
);
  cmpDropDown=new Composite(shell,SWT.NO_FOCUS);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=4;
  cmpDropDown.setLayout(glDropDown);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.heightHint=110;
  cnv.setLayoutData(gdCnv);
  cnv.addListener(SWT.Traverse,this);
  cnv.addListener(SWT.FocusOut,this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  cmpButtons=new Composite(cmpDropDown,SWT.NO_FOCUS);
  GridLayout glButtons=new GridLayout();
  glButtons.marginHeight=3;
  glButtons.marginWidth=4;
  glButtons.horizontalSpacing=1;
  glButtons.verticalSpacing=4;
  glButtons.numColumns=2;
  cmpButtons.setLayout(glButtons);
  GridData gdButtons=new GridData(GridData.FILL_HORIZONTAL);
  cmpButtons.setLayoutData(gdButtons);
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=1;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=4;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpButtons,SWT.NONE | SWT.NO_FOCUS);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.horizontalSpan=2;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  lblTransparency=new Label(cmpTransparency,SWT.NONE);
  GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
  gdLBLTransparency.horizontalIndent=2;
  lblTransparency.setLayoutData(gdLBLTransparency);
  lblTransparency.setText(Messages.getString(""String_Node_Str""));
  srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL | SWT.NO_FOCUS);
  GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  gdTransparent.horizontalSpan=2;
  srTransparency.setLayoutData(gdTransparent);
  if (fCurrent == null) {
    srTransparency.setValues(0,0,256,1,1,10);
    srTransparency.setEnabled(false);
  }
 else {
    int iValue=0;
    if (fCurrent instanceof ColorDefinition) {
      iValue=((ColorDefinition)fCurrent).getTransparency();
      srTransparency.setValues(iValue,0,256,1,1,10);
    }
 else     if (fCurrent instanceof Gradient) {
      iValue=((Gradient)fCurrent).getTransparency();
      srTransparency.setValues(iValue,0,256,1,1,10);
    }
 else {
      srTransparency.setEnabled(false);
    }
  }
  lblTransparency.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{new Integer(srTransparency.getSelection())}));
  srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
  srTransparency.addSelectionListener(this);
  srTransparency.addListener(SWT.FocusOut,this);
  srTransparency.addListener(SWT.KeyDown,this);
  srTransparency.addListener(SWT.Traverse,this);
  if (this.bTransparentEnabled) {
    btnReset=new Button(cmpButtons,SWT.NONE);
    GridData gdReset=new GridData(GridData.FILL_BOTH);
    gdReset.heightHint=26;
    gdReset.horizontalSpan=2;
    btnReset.setLayoutData(gdReset);
    btnReset.setText(Messages.getString(""String_Node_Str""));
    btnReset.addSelectionListener(this);
    btnReset.addListener(SWT.FocusOut,this);
    btnReset.addListener(SWT.KeyDown,this);
    btnReset.addListener(SWT.Traverse,this);
  }
  if (this.bAutoEnabled) {
    btnAuto=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=26;
    gdGradient.horizontalSpan=2;
    btnAuto.setLayoutData(gdGradient);
    btnAuto.setText(Messages.getString(""String_Node_Str""));
    btnAuto.addSelectionListener(this);
    btnAuto.addListener(SWT.FocusOut,this);
    btnAuto.addListener(SWT.KeyDown,this);
    btnAuto.addListener(SWT.Traverse,this);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=26;
    gdGradient.horizontalSpan=2;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(Messages.getString(""String_Node_Str""));
    btnGradient.addSelectionListener(this);
    btnGradient.addListener(SWT.FocusOut,this);
    btnGradient.addListener(SWT.KeyDown,this);
    btnGradient.addListener(SWT.Traverse,this);
  }
  btnCustom=new Button(cmpButtons,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdCustom.heightHint=26;
  gdCustom.horizontalSpan=2;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(Messages.getString(""String_Node_Str""));
  btnCustom.addSelectionListener(this);
  btnCustom.addListener(SWT.FocusOut,this);
  btnCustom.addListener(SWT.KeyDown,this);
  btnCustom.addListener(SWT.Traverse,this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpButtons,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdImage.heightHint=26;
    gdImage.horizontalSpan=2;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(Messages.getString(""String_Node_Str""));
    btnImage.addSelectionListener(this);
    btnImage.addListener(SWT.FocusOut,this);
    btnImage.addListener(SWT.KeyDown,this);
    btnImage.addListener(SWT.Traverse,this);
  }
  if (this.bPositiveNegativeEnabled) {
    btnPN=new Button(cmpButtons,SWT.NONE);
    GridData gdPN=new GridData(GridData.FILL_BOTH);
    gdPN.heightHint=26;
    gdPN.horizontalSpan=2;
    btnPN.setLayoutData(gdPN);
    btnPN.setText(Messages.getString(""String_Node_Str""));
    btnPN.addSelectionListener(this);
    btnPN.addListener(SWT.FocusOut,this);
    btnPN.addListener(SWT.KeyDown,this);
    btnPN.addListener(SWT.Traverse,this);
  }
  shell.layout();
  shell.open();
}","/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int iShellHeight=170;
  int iShellWidth=190;
  if (bGradientEnabled) {
    iShellHeight+=30;
  }
  if (bImageEnabled) {
    iShellHeight+=30;
  }
  if (bAutoEnabled) {
    iShellHeight+=30;
  }
  if (bTransparentEnabled) {
    iShellHeight+=30;
  }
  if (bPositiveNegativeEnabled) {
    iShellHeight+=30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NO_FOCUS);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      clearColorSelection();
    }
  }
);
  cmpDropDown=new Composite(shell,SWT.NO_FOCUS);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=4;
  cmpDropDown.setLayout(glDropDown);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.heightHint=110;
  cnv.setLayoutData(gdCnv);
  cnv.addListener(SWT.Traverse,this);
  cnv.addListener(SWT.FocusOut,this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  cmpButtons=new Composite(cmpDropDown,SWT.NO_FOCUS);
  GridLayout glButtons=new GridLayout();
  glButtons.marginHeight=3;
  glButtons.marginWidth=4;
  glButtons.horizontalSpacing=1;
  glButtons.verticalSpacing=4;
  glButtons.numColumns=2;
  cmpButtons.setLayout(glButtons);
  GridData gdButtons=new GridData(GridData.FILL_HORIZONTAL);
  cmpButtons.setLayoutData(gdButtons);
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=1;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=4;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpButtons,SWT.NONE | SWT.NO_FOCUS);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.horizontalSpan=2;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  lblTransparency=new Label(cmpTransparency,SWT.NONE);
  GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
  gdLBLTransparency.horizontalIndent=2;
  lblTransparency.setLayoutData(gdLBLTransparency);
  lblTransparency.setText(Messages.getString(""String_Node_Str""));
  srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL | SWT.NO_FOCUS);
  GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
  gdTransparent.horizontalSpan=2;
  srTransparency.setLayoutData(gdTransparent);
  if (fCurrent == null) {
    srTransparency.setValues(0,0,256,1,1,10);
    srTransparency.setEnabled(false);
  }
 else {
    int iValue=0;
    if (fCurrent instanceof ColorDefinition) {
      iValue=((ColorDefinition)fCurrent).getTransparency();
      srTransparency.setValues(iValue,0,256,1,1,10);
    }
 else     if (fCurrent instanceof Gradient) {
      iValue=((Gradient)fCurrent).getTransparency();
      srTransparency.setValues(iValue,0,256,1,1,10);
    }
 else {
      srTransparency.setEnabled(false);
    }
  }
  lblTransparency.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{new Integer(srTransparency.getSelection())}));
  srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
  srTransparency.addSelectionListener(this);
  srTransparency.addListener(SWT.FocusOut,this);
  srTransparency.addListener(SWT.KeyDown,this);
  srTransparency.addListener(SWT.Traverse,this);
  if (this.bTransparentEnabled) {
    btnReset=new Button(cmpButtons,SWT.NONE);
    GridData gdReset=new GridData(GridData.FILL_BOTH);
    gdReset.heightHint=26;
    gdReset.horizontalSpan=2;
    btnReset.setLayoutData(gdReset);
    btnReset.setText(Messages.getString(""String_Node_Str""));
    btnReset.addSelectionListener(this);
    btnReset.addListener(SWT.FocusOut,this);
    btnReset.addListener(SWT.KeyDown,this);
    btnReset.addListener(SWT.Traverse,this);
  }
  if (this.bAutoEnabled) {
    btnAuto=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=26;
    gdGradient.horizontalSpan=2;
    btnAuto.setLayoutData(gdGradient);
    btnAuto.setText(Messages.getString(""String_Node_Str""));
    btnAuto.addSelectionListener(this);
    btnAuto.addListener(SWT.FocusOut,this);
    btnAuto.addListener(SWT.KeyDown,this);
    btnAuto.addListener(SWT.Traverse,this);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=26;
    gdGradient.horizontalSpan=2;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(Messages.getString(""String_Node_Str""));
    btnGradient.addSelectionListener(this);
    btnGradient.addListener(SWT.FocusOut,this);
    btnGradient.addListener(SWT.KeyDown,this);
    btnGradient.addListener(SWT.Traverse,this);
  }
  btnCustom=new Button(cmpButtons,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdCustom.heightHint=26;
  gdCustom.horizontalSpan=2;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(Messages.getString(""String_Node_Str""));
  btnCustom.addSelectionListener(this);
  btnCustom.addListener(SWT.FocusOut,this);
  btnCustom.addListener(SWT.KeyDown,this);
  btnCustom.addListener(SWT.Traverse,this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpButtons,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdImage.heightHint=26;
    gdImage.horizontalSpan=2;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(Messages.getString(""String_Node_Str""));
    btnImage.addSelectionListener(this);
    btnImage.addListener(SWT.FocusOut,this);
    btnImage.addListener(SWT.KeyDown,this);
    btnImage.addListener(SWT.Traverse,this);
  }
  if (this.bPositiveNegativeEnabled) {
    btnPN=new Button(cmpButtons,SWT.NONE);
    GridData gdPN=new GridData(GridData.FILL_BOTH);
    gdPN.heightHint=26;
    gdPN.horizontalSpan=2;
    btnPN.setLayoutData(gdPN);
    btnPN.setText(Messages.getString(""String_Node_Str""));
    btnPN.addSelectionListener(this);
    btnPN.addListener(SWT.FocusOut,this);
    btnPN.addListener(SWT.KeyDown,this);
    btnPN.addListener(SWT.Traverse,this);
  }
  shell.layout();
  shell.open();
}",0.9998516540572616
75326,"public void addAggregateOn(String levelName) throws DataException {
  if (this.aggregateOn.contains(levelName))   throw new DataException(ResourceConstants.TRY_TO_ADD_IDENTICAL_AGGR_GROUP,new Object[]{levelName,this.name});
  this.aggregateOn.add(levelName);
}","public void addAggregateOn(String levelName) throws DataException {
  if (!this.aggregateOn.contains(levelName)) {
    this.aggregateOn.add(levelName);
  }
}",0.7194244604316546
75327,"public Object getAdapter(Object adaptableObject,Class adapterType){
  if (adaptableObject instanceof NormalCrosstabCellAdapter && adapterType == IMenuListener.class) {
    return new ISchematicMenuListener(){
      private ActionRegistry actionRegistry;
      public void menuAboutToShow(      IMenuManager manager){
        MenuManager subMenu=new MenuManager(Messages.getString(""String_Node_Str""));
        IAction action=getAction(GeneralInsertMenuAction.INSERT_TEXT_ID);
        action.setText(GeneralInsertMenuAction.INSERT_TEXT_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_LABEL_ID);
        action.setText(GeneralInsertMenuAction.INSERT_LABEL_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_DATA_ID);
        action.setText(GeneralInsertMenuAction.INSERT_DATA_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_IMAGE_ID);
        action.setText(GeneralInsertMenuAction.INSERT_IMAGE_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_GRID_ID);
        action.setText(GeneralInsertMenuAction.INSERT_GRID_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_LIST_ID);
        action.setText(GeneralInsertMenuAction.INSERT_LIST_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_TABLE_ID);
        action.setText(GeneralInsertMenuAction.INSERT_TABLE_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID);
        action.setText(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_DISPLAY_TEXT);
        subMenu.add(action);
        List points=ExtensionPointManager.getInstance().getExtendedElementPoints();
        for (Iterator iter=points.iterator(); iter.hasNext(); ) {
          ExtendedElementUIPoint point=(ExtendedElementUIPoint)iter.next();
          IElementDefn extension=DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName());
          String displayName=new String();
          displayName=extension.getDisplayName();
          action=getAction(point.getExtensionName());
          if (action != null) {
            if (displayName.equalsIgnoreCase(""String_Node_Str"")) {
              action.setText(""String_Node_Str"" + displayName);
            }
 else {
              action.setText(displayName);
            }
            subMenu.add(action);
          }
        }
        PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
        for (int i=0; i < entries.length; i++) {
          action=getAction(entries[i].getItemName());
          action.setText(entries[i].getMenuLabel());
          subMenu.add(action);
        }
        manager.add(subMenu);
      }
      public void setActionRegistry(      ActionRegistry actionRegistry){
        this.actionRegistry=actionRegistry;
      }
      protected IAction getAction(      String actionID){
        IAction action=getActionRegistry().getAction(actionID);
        if (action instanceof UpdateAction) {
          ((UpdateAction)action).update();
        }
        return action;
      }
      private ActionRegistry getActionRegistry(){
        if (actionRegistry == null)         actionRegistry=new ActionRegistry();
        return actionRegistry;
      }
    }
;
  }
  return null;
}","public Object getAdapter(Object adaptableObject,Class adapterType){
  if (adaptableObject instanceof CrosstabCellAdapter && ((CrosstabCellAdapter)adaptableObject).getCrosstabCellHandle() != null && adapterType == IMenuListener.class) {
    return new ISchematicMenuListener(){
      private ActionRegistry actionRegistry;
      public void menuAboutToShow(      IMenuManager manager){
        MenuManager subMenu=new MenuManager(Messages.getString(""String_Node_Str""));
        IAction action=getAction(GeneralInsertMenuAction.INSERT_TEXT_ID);
        action.setText(GeneralInsertMenuAction.INSERT_TEXT_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_LABEL_ID);
        action.setText(GeneralInsertMenuAction.INSERT_LABEL_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_DATA_ID);
        action.setText(GeneralInsertMenuAction.INSERT_DATA_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_IMAGE_ID);
        action.setText(GeneralInsertMenuAction.INSERT_IMAGE_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_GRID_ID);
        action.setText(GeneralInsertMenuAction.INSERT_GRID_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_LIST_ID);
        action.setText(GeneralInsertMenuAction.INSERT_LIST_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_TABLE_ID);
        action.setText(GeneralInsertMenuAction.INSERT_TABLE_DISPLAY_TEXT);
        subMenu.add(action);
        action=getAction(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_ID);
        action.setText(GeneralInsertMenuAction.INSERT_DYNAMIC_TEXT_DISPLAY_TEXT);
        subMenu.add(action);
        List points=ExtensionPointManager.getInstance().getExtendedElementPoints();
        for (Iterator iter=points.iterator(); iter.hasNext(); ) {
          ExtendedElementUIPoint point=(ExtendedElementUIPoint)iter.next();
          IElementDefn extension=DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName());
          String displayName=new String();
          displayName=extension.getDisplayName();
          action=getAction(point.getExtensionName());
          if (action != null) {
            if (displayName.equalsIgnoreCase(""String_Node_Str"")) {
              action.setText(""String_Node_Str"" + displayName);
            }
 else {
              action.setText(displayName);
            }
            subMenu.add(action);
          }
        }
        PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
        for (int i=0; i < entries.length; i++) {
          action=getAction(entries[i].getItemName());
          action.setText(entries[i].getMenuLabel());
          subMenu.add(action);
        }
        manager.add(subMenu);
      }
      public void setActionRegistry(      ActionRegistry actionRegistry){
        this.actionRegistry=actionRegistry;
      }
      protected IAction getAction(      String actionID){
        IAction action=getActionRegistry().getAction(actionID);
        if (action instanceof UpdateAction) {
          ((UpdateAction)action).update();
        }
        return action;
      }
      private ActionRegistry getActionRegistry(){
        if (actionRegistry == null)         actionRegistry=new ActionRegistry();
        return actionRegistry;
      }
    }
;
  }
  return null;
}",0.9885288213363924
75328,"public CubeCursorImpl(CubeCursor cursor,Scriptable scope,ICubeQueryDefinition queryDefn) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  OlapQueryUtil.validateBinding(queryDefn,false);
  this.bindingMap=new HashMap();
  this.dataTypeMap=new HashMap();
  for (int i=0; i < this.queryDefn.getBindings().size(); i++) {
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(binding.getBindingName(),binding.getExpression());
      OLAPExpressionCompiler.compile(binding.getExpression());
    }
    dataTypeMap.put(binding.getBindingName(),Integer.valueOf(binding.getDataType()));
  }
  this.scope.put(""String_Node_Str"",this.scope,new JSCubeBindingObject(this));
}","public CubeCursorImpl(CubeCursor cursor,Scriptable scope,ICubeQueryDefinition queryDefn) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  OlapQueryUtil.validateBinding(queryDefn,false);
  this.bindingMap=new HashMap();
  this.dataTypeMap=new HashMap();
  for (int i=0; i < this.queryDefn.getBindings().size(); i++) {
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(binding.getBindingName(),binding.getExpression());
      OLAPExpressionCompiler.compile(binding.getExpression());
    }
    dataTypeMap.put(binding.getBindingName(),new Integer(binding.getDataType()));
  }
  this.scope.put(""String_Node_Str"",this.scope,new JSCubeBindingObject(this));
}",0.9923954372623576
75329,"public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
  }
  if (transfer.equals(TEMPLATE) && target instanceof TableCellEditPart) {
    CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
    int slotId=cellHandle.getContainer().getContainerSlotHandle().getSlotID();
    if (slotId == TableHandle.HEADER_SLOT || slotId == TableHandle.FOOTER_SLOT || slotId == TableHandle.GROUP_SLOT) {
      return DNDService.LOGIC_TRUE;
    }
 else {
      return DNDService.LOGIC_FALSE;
    }
  }
  return DNDService.LOGIC_UNKNOW;
}","public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
  }
  if (transfer.equals(TEMPLATE)) {
    if (target instanceof TableCellEditPart) {
      CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
      int slotId=cellHandle.getContainer().getContainerSlotHandle().getSlotID();
      if (slotId == TableHandle.HEADER_SLOT || slotId == TableHandle.FOOTER_SLOT || slotId == TableHandle.GROUP_SLOT) {
        return DNDService.LOGIC_TRUE;
      }
 else {
        return DNDService.LOGIC_FALSE;
      }
    }
 else     if (target instanceof ListBandEditPart) {
      ListBandProxy cellHandle=(ListBandProxy)((ListBandEditPart)target).getModel();
      int slotId=cellHandle.getSlotId();
      if (slotId == ListHandle.HEADER_SLOT || slotId == ListHandle.FOOTER_SLOT || slotId == ListHandle.GROUP_SLOT) {
        return DNDService.LOGIC_TRUE;
      }
 else {
        return DNDService.LOGIC_FALSE;
      }
    }
  }
  return DNDService.LOGIC_UNKNOW;
}",0.7342233009708737
75330,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
  }
  if (transfer.equals(TEMPLATE) && target instanceof TableCellEditPart) {
    SessionHandleAdapter.getInstance().getCommandStack().startTrans(TRANS_NAME);
    DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
    CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
    try {
      cellHandle.addElement(dataHandle,CellHandle.CONTENT_SLOT);
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(dataHandle);
      dialog.setAggreate(true);
      if (dialog.open() == Window.OK) {
        dataHandle.setResultSetColumn(dialog.getBindingColumn().getName());
        SessionHandleAdapter.getInstance().getCommandStack().commit();
      }
 else {
        SessionHandleAdapter.getInstance().getCommandStack().rollback();
      }
    }
 catch (    Exception e) {
      SessionHandleAdapter.getInstance().getCommandStack().rollback();
      ExceptionHandler.handle(e);
    }
  }
  return true;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
  }
  SessionHandleAdapter.getInstance().getCommandStack().startTrans(TRANS_NAME);
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  try {
    if (target instanceof TableCellEditPart) {
      CellHandle cellHandle=(CellHandle)((TableCellEditPart)target).getModel();
      cellHandle.addElement(dataHandle,CellHandle.CONTENT_SLOT);
    }
 else     if (target instanceof ListBandEditPart) {
      ListBandProxy cellHandle=(ListBandProxy)((ListBandEditPart)target).getModel();
      cellHandle.getSlotHandle().add(dataHandle);
    }
    DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
    dialog.setInput(dataHandle);
    dialog.setAggreate(true);
    if (dialog.open() == Window.OK) {
      dataHandle.setResultSetColumn(dialog.getBindingColumn().getName());
      SessionHandleAdapter.getInstance().getCommandStack().commit();
    }
 else {
      SessionHandleAdapter.getInstance().getCommandStack().rollback();
    }
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getCommandStack().rollback();
    ExceptionHandler.handle(e);
  }
  return true;
}",0.8317836010143702
75331,"public void startTable(ITableContent table){
  Rule rule=engine.getCurrentContainer().getRule();
  int width=rule.getWidth();
  TableInfo info=LayoutUtil.createTable(table,width);
  engine.addTable(info,table.getComputedStyle());
}","public void startTable(ITableContent table){
  Rule rule=engine.getCurrentContainer().getRule();
  int width=rule.getWidth();
  TableInfo info=LayoutUtil.createTable(table,width);
  if (info == null) {
    return;
  }
  engine.addTable(info,table.getComputedStyle());
}",0.924
75332,"public static TableInfo createTable(ITableContent table,int width){
  int colcount=table.getColumnCount();
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      index[i]=ExcelUtil.covertDimensionType(value,width);
      know+=index[i];
    }
  }
  int left=width - know;
  if (left >= 0 && unmount.size() == 0) {
    return new DefaultTableInfo(index);
  }
 else   if (left <= 0 && unmount.size() > 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    System.out.println(""String_Node_Str"");
    return null;
  }
}","public static TableInfo createTable(ITableContent table,int width){
  int colcount=table.getColumnCount();
  int[] index=new int[colcount];
  int know=0;
  List unmount=new ArrayList();
  for (int i=0; i < colcount; i++) {
    DimensionType value=table.getColumn(i).getWidth();
    if (value == null) {
      unmount.add(new Integer(i));
    }
 else {
      index[i]=ExcelUtil.covertDimensionType(value,width);
      know+=index[i];
    }
  }
  int left=width - know;
  if (left >= 0 && unmount.size() == 0) {
    return new DefaultTableInfo(index);
  }
 else   if (left <= 0 && unmount.size() >= 0) {
    return new DefaultTableInfo(split(width,colcount));
  }
 else   if (left > 0 && unmount.size() > 0) {
    int[] size=split(left,unmount.size());
    Iterator iter=unmount.iterator();
    int i=0;
    while (iter.hasNext()) {
      int pos=((Integer)iter.next()).intValue();
      index[pos]=size[i];
      i++;
    }
    return new DefaultTableInfo(index);
  }
 else {
    System.out.println(""String_Node_Str"");
    return null;
  }
}",0.9995189995189996
75333,"/** 
 * Initialize the instance. The method includes heavyweight operations such as ResultIterator population.
 * @param dataEngine
 * @param appContext
 * @throws DataException
 */
private void initialize(DataEngineImpl dataEngine,Map appContext) throws DataException {
  int savedCacheOption=getDataSetCacheManager().suspendCache();
  try {
    ResultIterator left=(ResultIterator)this.leftQueryResults.getResultIterator();
    ResultIterator right=(ResultIterator)this.rightQueryResults.getResultIterator();
    getDataSetCacheManager().setCacheOption(savedCacheOption);
    getDataSetCacheManager().setCacheMode(DataSetCacheUtil.getCacheMode(appContext));
    this.left=left;
    this.right=right;
    this.joinType=dataSet.getJoinType();
    this.matcher=new JoinConditionMatcher(left.getOdiResult(),right.getOdiResult(),left.getScope(),right.getScope(),dataSet.getJoinConditions());
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Initialize the instance. The method includes heavyweight operations such as ResultIterator population.
 * @param dataEngine
 * @param appContext
 * @throws DataException
 */
private void initialize(DataEngineImpl dataEngine,Map appContext){
  int savedCacheOption=getDataSetCacheManager().suspendCache();
  getDataSetCacheManager().setCacheOption(savedCacheOption);
  getDataSetCacheManager().setCacheMode(DataSetCacheUtil.getCacheMode(appContext));
  this.joinType=dataSet.getJoinType();
  this.matcher=new JoinConditionMatcher(left.getOdiResult(),right.getOdiResult(),left.getScope(),right.getScope(),dataSet.getJoinConditions());
}",0.5480649188514357
75334,"public CubeCursorImpl(CubeCursor cursor,Scriptable scope,ICubeQueryDefinition queryDefn) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  OlapQueryUtil.validateBinding(queryDefn,false);
  this.bindingMap=new HashMap();
  for (int i=0; i < this.queryDefn.getBindings().size(); i++) {
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(binding.getBindingName(),binding.getExpression());
      OLAPExpressionCompiler.compile(binding.getExpression());
    }
  }
  this.scope.put(""String_Node_Str"",this.scope,new JSCubeBindingObject(this));
}","public CubeCursorImpl(CubeCursor cursor,Scriptable scope,ICubeQueryDefinition queryDefn) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  OlapQueryUtil.validateBinding(queryDefn,false);
  this.bindingMap=new HashMap();
  this.dataTypeMap=new HashMap();
  for (int i=0; i < this.queryDefn.getBindings().size(); i++) {
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(i);
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(binding.getBindingName(),binding.getExpression());
      OLAPExpressionCompiler.compile(binding.getExpression());
    }
    dataTypeMap.put(binding.getBindingName(),Integer.valueOf(binding.getDataType()));
  }
  this.scope.put(""String_Node_Str"",this.scope,new JSCubeBindingObject(this));
}",0.9179206566347468
75335,"public Object evaluate(Context context,Scriptable scope) throws DataException {
  Object temp=this.script.exec(context,scope);
  if (temp instanceof ScriptableObject) {
    return ((ScriptableObject)temp).getDefaultValue(null);
  }
  return temp;
}","public Object evaluate(Context context,Scriptable scope) throws DataException {
  Object temp=this.script.exec(context,scope);
  temp=JavascriptEvalUtil.convertJavascriptValue(temp);
  if (temp instanceof ScriptableObject) {
    return ((ScriptableObject)temp).getDefaultValue(null);
  }
  return temp;
}",0.8985507246376812
75336,"public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  if (referToAggregation(temp,boundColumnName))   return new ArrayList();
  IQueryResults queryResults=getGroupingQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  IResultIterator resultIt=queryResults.getResultIterator();
  int maxRowCount=-1;
  if (requestInfo != null) {
    resultIt.moveTo(requestInfo.getStartRow());
    maxRowCount=requestInfo.getMaxRow();
  }
  ArrayList values=new ArrayList();
  while (resultIt.next() && maxRowCount != 0) {
    Object value=resultIt.getValue(boundColumnName);
    values.add(value);
    resultIt.skipToEnd(1);
    maxRowCount--;
  }
  resultIt.close();
  queryResults.close();
  return values;
}","public Collection getColumnValueSet(DataSetHandle dataSet,Iterator inputParamBindings,Iterator columnBindings,String boundColumnName,IRequestInfo requestInfo) throws BirtException {
  ArrayList temp=new ArrayList();
  while (columnBindings.hasNext()) {
    temp.add(columnBindings.next());
  }
  if (referToAggregation(temp,boundColumnName))   return new ArrayList();
  IQueryResults queryResults=getGroupingQueryResults(dataSet,inputParamBindings,temp.iterator(),boundColumnName);
  IResultIterator resultIt=queryResults.getResultIterator();
  int maxRowCount=-1;
  ArrayList values=new ArrayList();
  if (requestInfo != null) {
    if (requestInfo.getStartRow() >= 0) {
      resultIt.moveTo(requestInfo.getStartRow());
      Object value=resultIt.getValue(boundColumnName);
      values.add(value);
    }
    maxRowCount=requestInfo.getMaxRow();
  }
  while (resultIt.next() && maxRowCount != 0) {
    Object value=resultIt.getValue(boundColumnName);
    values.add(value);
    resultIt.skipToEnd(1);
    maxRowCount--;
  }
  resultIt.close();
  queryResults.close();
  return values;
}",0.8125
75337,"protected boolean existDropCells(){
  if (unresolvedRow != null) {
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=unresolvedRow.getCell(start + i);
      if (cell != null && isDropCell(cell)) {
        return true;
      }
    }
  }
  return false;
}","protected boolean existDropCells(){
  if (unresolvedRow != null) {
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=unresolvedRow.getCell(start + i);
      if (cell != null && (isDropCell(cell) || cell.getRowSpan() > 1)) {
        return true;
      }
    }
  }
  return false;
}",0.7370304114490162
75338,"private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    IContentType[] contentTypes=Platform.getContentTypeManager().findContentTypesFor(editor.getEditorInput().getName());
    if (contentTypes[0] != null && (contentTypes[0].getId().equals(""String_Node_Str"") || contentTypes[0].getId().equals(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}","private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    IContentType[] contentTypes=Platform.getContentTypeManager().findContentTypesFor(editor.getEditorInput().getName());
    if (contentTypes.length > 0 && contentTypes[0] != null && (contentTypes[0].getId().equals(""String_Node_Str"") || contentTypes[0].getId().equals(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}",0.9683470105509964
75339,"private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    IContentType[] contentTypes=Platform.getContentTypeManager().findContentTypesFor(editor.getEditorInput().getName());
    if (contentTypes[0] != null && (contentTypes[0].getId().equals(""String_Node_Str"") || contentTypes[0].getId().equals(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}","private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    IContentType[] contentTypes=Platform.getContentTypeManager().findContentTypesFor(editor.getEditorInput().getName());
    if (contentTypes.length > 0 && contentTypes[0] != null && (contentTypes[0].getId().equals(""String_Node_Str"") || contentTypes[0].getId().equals(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}",0.9683470105509964
75340,"/** 
 * create a row in the table model
 * @param content row content
 */
public Row createRow(Object rowContent){
  if (!isRowHidden(rowContent)) {
    isRowHidden=false;
    ensureSize(rowCount + 1,realColCount);
    Row row=rows[rowCount];
    row.rowId=rowCount;
    row.content=rowContent;
    if (rowCount > 0) {
      Cell[] cells=row.cells;
      Cell[] lastCells=rows[rowCount - 1].cells;
      ;
      for (int cellId=0; cellId < realColCount; cellId++) {
        Cell lastCell=lastCells[cellId];
        if (lastCell.status == Cell.CELL_SPANED) {
          lastCell=lastCell.getCell();
        }
        if (lastCell.status == Cell.CELL_USED) {
          if (lastCell.rowSpan < 0 || lastCell.rowId + lastCell.rowSpan > rowCount) {
            cells[cellId]=Cell.createSpanCell(rowCount,cellId,lastCell);
          }
        }
      }
    }
    rowCount++;
    return row;
  }
  isRowHidden=true;
  if (rowCount > 0) {
    Cell[] lastCells=rows[rowCount - 1].cells;
    ;
    for (int cellId=0; cellId < realColCount; cellId++) {
      Cell lastCell=lastCells[cellId];
      if (lastCell.status == Cell.CELL_SPANED) {
        lastCell=lastCell.getCell();
      }
      if (lastCell.status == Cell.CELL_USED) {
        if (lastCell.rowId + lastCell.rowSpan >= rowCount + 1) {
          lastCell.rowSpan--;
        }
      }
    }
  }
  return null;
}","/** 
 * create a row in the table model
 * @param content row content
 */
public Row createRow(Object rowContent,boolean isHidden){
  if (!isHidden) {
    isRowHidden=false;
    ensureSize(rowCount + 1,realColCount);
    Row row=rows[rowCount];
    row.rowId=rowCount;
    row.content=rowContent;
    if (rowCount > 0) {
      Cell[] cells=row.cells;
      Cell[] lastCells=rows[rowCount - 1].cells;
      ;
      for (int cellId=0; cellId < realColCount; cellId++) {
        Cell lastCell=lastCells[cellId];
        if (lastCell.status == Cell.CELL_SPANED) {
          lastCell=lastCell.getCell();
        }
        if (lastCell.status == Cell.CELL_USED) {
          if (lastCell.rowSpan < 0 || lastCell.rowId + lastCell.rowSpan > rowCount) {
            cells[cellId]=Cell.createSpanCell(rowCount,cellId,lastCell);
          }
        }
      }
    }
    rowCount++;
    return row;
  }
  isRowHidden=true;
  if (rowCount > 0) {
    Cell[] lastCells=rows[rowCount - 1].cells;
    ;
    for (int cellId=0; cellId < realColCount; cellId++) {
      Cell lastCell=lastCells[cellId];
      if (lastCell.status == Cell.CELL_SPANED) {
        lastCell=lastCell.getCell();
      }
      if (lastCell.status == Cell.CELL_USED) {
        if (lastCell.rowId + lastCell.rowSpan >= rowCount + 1) {
          lastCell.rowSpan--;
        }
      }
    }
  }
  return null;
}",0.9882352941176472
75341,"public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      processor(showLevels,result,nullLevelHandle);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
      List result=(List)dialog.getResult();
      processor(showLevels,result,nullLevelHandle);
      CrosstabAdaptUtil.processInvaildBindings(reportHandle);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.8982683982683982
75342,"public void run(){
  if (dimensionHandle == null) {
    return;
  }
  transStar(NAME);
  try {
    dimensionHandle.getCrosstab().removeDimension(dimensionHandle.getAxisType(),dimensionHandle.getIndex());
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  if (dimensionHandle == null) {
    return;
  }
  transStar(NAME);
  try {
    CrosstabReportItemHandle handle=dimensionHandle.getCrosstab();
    dimensionHandle.getCrosstab().removeDimension(dimensionHandle.getAxisType(),dimensionHandle.getIndex());
    CrosstabAdaptUtil.processInvaildBindings(handle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.8409986859395532
75343,"public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getIndex());
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}","public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getIndex());
      CrosstabAdaptUtil.processInvaildBindings(reportItem);
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}",0.921875
75344,"public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=childViewHandle.getCrosstab();
  try {
    reportHandle.pivotDimension(childViewHandle.getAxisType(),childViewHandle.getIndex(),getType(),findPosition());
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}","public void execute(){
  transStart(NAME);
  CrosstabReportItemHandle reportHandle=childViewHandle.getCrosstab();
  try {
    reportHandle.pivotDimension(childViewHandle.getAxisType(),childViewHandle.getIndex(),getType(),findPosition());
    CrosstabAdaptUtil.processInvaildBindings(reportHandle);
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
  }
  transEnd();
}",0.9193548387096774
75345,"public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(foreign);
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=getElementType(x,y,width,height,mergedStyle);
  if (foreign.getGenerateBy() instanceof TemplateDesign) {
    String bookmark=foreign.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      foreign.setBookmark(bookmark);
    }
  }
  String tagName;
  String url=validate(foreign.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(foreign.getHyperlinkAction(),url);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  }
  setStyleName(foreign.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  if (isTalbeTemplateElement(foreign)) {
    mergedStyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_FONT_FAMILY,IStyle.SANS_SERIF_VALUE);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildForeignStyle(foreign,styleBuffer,display,url);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    htmlEmitter.handleVerticalAlignBegine(foreign);
    outputHtmlText(foreign);
    htmlEmitter.handleVerticalAlignEnd(foreign);
  }
  writer.closeTag(tagName);
  if (enableMetadata) {
    metadataEmitter.endForeign(foreign);
  }
  cellFilled=true;
}","public void startForeign(IForeignContent foreign){
  IStyle mergedStyle=foreign.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  resizeTemplateElement(foreign);
  DimensionType x=foreign.getX();
  DimensionType y=foreign.getY();
  DimensionType width=foreign.getWidth();
  DimensionType height=foreign.getHeight();
  int display;
  display=getElementType(x,y,width,height,mergedStyle);
  if (foreign.getGenerateBy() instanceof TemplateDesign) {
    String bookmark=foreign.getBookmark();
    if (bookmark == null) {
      bookmark=idGenerator.generateUniqueID();
      foreign.setBookmark(bookmark);
    }
  }
  boolean isTemplate=false;
  Object genBy=foreign.getGenerateBy();
  if (genBy instanceof TemplateDesign) {
    isTemplate=true;
    writer.openTag(HTMLTags.TAG_DIV);
    writer.attribute(HTMLTags.ATTR_ALIGN,""String_Node_Str"");
  }
  String tagName;
  String url=validate(foreign.getHyperlinkAction());
  boolean metadataOutput=false;
  if (url != null) {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLTags.TAG_SPAN);
    }
    tagName=HTMLTags.TAG_A;
    outputAction(foreign.getHyperlinkAction(),url);
  }
 else {
    if (enableMetadata) {
      metadataOutput=metadataEmitter.startForeign(foreign,HTMLEmitterUtil.getTagByType(display,DISPLAY_FLAG_ALL));
    }
    tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  }
  setStyleName(foreign.getStyleClass());
  if (!metadataOutput) {
    outputBookmark(foreign,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,foreign.getHelpText());
  if (isTalbeTemplateElement(foreign)) {
    mergedStyle.setProperty(IStyle.STYLE_BORDER_TOP_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_BOTTOM_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_LEFT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_BORDER_RIGHT_STYLE,IStyle.DOTTED_VALUE);
    mergedStyle.setProperty(IStyle.STYLE_FONT_FAMILY,IStyle.SANS_SERIF_VALUE);
  }
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildForeignStyle(foreign,styleBuffer,display,url);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  String rawType=foreign.getRawType();
  boolean isHtml=IForeignContent.HTML_TYPE.equalsIgnoreCase(rawType);
  if (isHtml) {
    htmlEmitter.handleVerticalAlignBegine(foreign);
    outputHtmlText(foreign);
    htmlEmitter.handleVerticalAlignEnd(foreign);
  }
  writer.closeTag(tagName);
  if (isTemplate) {
    writer.openTag(HTMLTags.TAG_DIV);
  }
  if (enableMetadata) {
    metadataEmitter.endForeign(foreign);
  }
  cellFilled=true;
}",0.9402713099817775
75346,"public DataExtractionTaskV1(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}","public DataExtractionTaskV1(IReportEngine engine,IReportRunnable runnable,IReportDocument reader) throws EngineException {
  super(engine,runnable);
  this.report=((ReportRunnable)runnable).getReportIR();
  this.reportDocReader=reader;
  executionContext.setReportDocument(reportDocReader);
  executionContext.setFactoryMode(false);
  executionContext.setPresentationMode(true);
  setParameterValues(reportDocReader.getParameterValues());
  setParameterDisplayTexts(reportDocReader.getParameterDisplayTexts());
  usingParameterValues();
  executionContext.registerGlobalBeans(reportDocReader.getGlobalVariables(null));
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
}",0.815668202764977
75347,"/** 
 * Most objects should already be formatted to the same type by method formatToComparable at this point if neither of them is null. This method will therefore be terminated pretty soon except for calling from method between with weird parameters like obj:String, op1:Double and op2:Date.
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws DataException
 */
public static int compare(Object obj1,Object obj2) throws DataException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  try {
    if (MiscUtil.isSameType(obj1,obj2)) {
      if (obj1 instanceof Boolean) {
        if (obj1.equals(obj2))         return 0;
        Boolean bool=(Boolean)obj1;
        if (bool.equals(Boolean.TRUE))         return 1;
 else         return -1;
      }
 else       if (obj1 instanceof Comparable) {
        return ((Comparable)obj1).compareTo(obj2);
      }
 else {
        return obj1.toString().compareTo(obj2.toString());
      }
    }
 else     if (MiscUtil.isNumericOrString(obj1) && MiscUtil.isNumericOrString(obj2)) {
      try {
        return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isDateOrString(obj1) && MiscUtil.isDateOrString(obj2)) {
      try {
        return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     throw new DataException(ResourceConstants.INVALID_TYPE_IN_EXPR);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}","/** 
 * Most objects should already be formatted to the same type by method formatToComparable at this point if neither of them is null. This method will therefore be terminated pretty soon except for calling from method between with weird parameters like obj:String, op1:Double and op2:Date.
 * @param obj1
 * @param obj2
 * @return -1,0 and 1 standing for <,= and > respectively
 * @throws DataException
 */
public static int compare(Object obj1,Object obj2) throws DataException {
  if (obj1 == null || obj2 == null) {
    if (obj1 == null && obj2 != null)     return -1;
 else     if (obj1 != null && obj2 == null)     return 1;
 else     return 0;
  }
  try {
    if (MiscUtil.isSameType(obj1,obj2)) {
      if (obj1 instanceof Boolean) {
        if (obj1.equals(obj2))         return 0;
        Boolean bool=(Boolean)obj1;
        if (bool.equals(Boolean.TRUE))         return 1;
 else         return -1;
      }
 else       if (obj1 instanceof Comparable) {
        return ((Comparable)obj1).compareTo(obj2);
      }
 else {
        return obj1.toString().compareTo(obj2.toString());
      }
    }
 else     if (MiscUtil.isNumericOrString(obj1) && MiscUtil.isNumericOrString(obj2)) {
      try {
        return DataTypeUtil.toDouble(obj1).compareTo(DataTypeUtil.toDouble(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isDateOrString(obj1) && MiscUtil.isDateOrString(obj2)) {
      try {
        return DataTypeUtil.toDate(obj1).compareTo(DataTypeUtil.toDate(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     if (MiscUtil.isBooleanOrString(obj1) && MiscUtil.isBooleanOrString(obj2)) {
      try {
        return DataTypeUtil.toBoolean(obj1).compareTo(DataTypeUtil.toBoolean(obj2));
      }
 catch (      Exception e) {
        return DataTypeUtil.toString(obj1).compareTo(DataTypeUtil.toString(obj2));
      }
    }
 else     throw new DataException(ResourceConstants.INVALID_TYPE_IN_EXPR);
  }
 catch (  BirtException e) {
    throw new DataException(ResourceConstants.DATATYPEUTIL_ERROR,e);
  }
}",0.9232631324134593
75348,"/** 
 * @throws Exception
 */
public void testBlankExpression() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(null);
  for (int i=0; i < name.length; i++)   queryDefn.addResultSetExpression(name[i],se[i]);
  try {
    IResultIterator ri=executeQuery(queryDefn);
    if (ri.next()) {
      ri.getValue(name[0]);
    }
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
    assertTrue(e.getErrorCode() == ResourceConstants.INVALID_JS_EXPR);
  }
}","/** 
 * @throws Exception
 */
public void testBlankExpression() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(null);
  for (int i=0; i < name.length; i++)   queryDefn.addResultSetExpression(name[i],se[i]);
  try {
    IResultIterator ri=executeQuery(queryDefn);
    if (ri.next()) {
      ri.getValue(name[0]);
    }
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
    assertTrue(e.getErrorCode() == ResourceConstants.INVALID_EXPR_HANDLE);
  }
}",0.9918433931484504
75349,"/** 
 * @throws Exception
 */
public void testBlankExpression() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(null);
  for (int i=0; i < name.length; i++)   queryDefn.addBinding(new Binding(name[i],se[i]));
  try {
    IResultIterator ri=executeQuery(queryDefn);
    if (ri.next()) {
      ri.getValue(name[0]);
    }
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
    assertTrue(e.getErrorCode() == ResourceConstants.INVALID_JS_EXPR);
  }
}","/** 
 * @throws Exception
 */
public void testBlankExpression() throws Exception {
  QueryDefinition queryDefn=newReportQuery();
  String[] name=new String[]{""String_Node_Str""};
  ScriptExpression[] se=new ScriptExpression[name.length];
  se[0]=new ScriptExpression(null);
  for (int i=0; i < name.length; i++)   queryDefn.addBinding(new Binding(name[i],se[i]));
  try {
    IResultIterator ri=executeQuery(queryDefn);
    if (ri.next()) {
      ri.getValue(name[0]);
    }
    fail(""String_Node_Str"");
  }
 catch (  BirtException e) {
    assertTrue(e.getErrorCode() == ResourceConstants.INVALID_EXPR_HANDLE);
  }
}",0.99185667752443
75350,"/** 
 * compile the string expression
 * @param expression
 * @param context
 * @return
 * @throws DataException
 */
protected CompiledExpression compileExpression(String expression,Context context) throws DataException {
  String exp=""String_Node_Str"";
  try {
    exp=expression;
    ScriptOrFnNode tree=parse(exp,context);
    return processScriptTree(exp,tree,context);
  }
 catch (  Exception e) {
    DataException dataException=new DataException(ResourceConstants.INVALID_JS_EXPR,e,exp);
    throw dataException;
  }
}","/** 
 * compile the string expression
 * @param expression
 * @param context
 * @return
 * @throws DataException
 */
protected CompiledExpression compileExpression(String expression,Context context) throws DataException {
  String exp=""String_Node_Str"";
  try {
    exp=expression;
    if (exp == null)     return null;
    ScriptOrFnNode tree=parse(exp,context);
    return processScriptTree(exp,tree,context);
  }
 catch (  Exception e) {
    DataException dataException=new DataException(ResourceConstants.INVALID_JS_EXPR,e,exp);
    throw dataException;
  }
}",0.9650735294117648
75351,"/** 
 * Creates a new DtE API Computed Column from a model computed column. Could return null if no expression is defined.
 * @throws EngineException
 */
IComputedColumn newComputedColumn(ComputedColumnHandle modelCmptdColumn) throws EngineException {
  if (modelCmptdColumn.getExpression() == null) {
    throw new EngineException(MessageConstants.MISSING_COMPUTED_COLUMN_EXPRESSION_EXCEPTION,modelCmptdColumn.getName());
  }
  return new ComputedColumn(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),toDteDataType(modelCmptdColumn.getDataType()));
}","/** 
 * Creates a new DtE API Computed Column from a model computed column. Could return null if no expression is defined.
 * @throws EngineException
 */
IComputedColumn newComputedColumn(ComputedColumnHandle modelCmptdColumn) throws EngineException {
  if (modelCmptdColumn.getExpression() == null && modelCmptdColumn.getAggregateFunction() == null) {
    throw new EngineException(MessageConstants.MISSING_COMPUTED_COLUMN_EXPRESSION_EXCEPTION,modelCmptdColumn.getName());
  }
  List argumentList=new ArrayList();
  Iterator argumentIter=modelCmptdColumn.argumentsIterator();
  while (argumentIter.hasNext()) {
    argumentList.add(new ScriptExpression(((AggregationArgumentHandle)argumentIter.next()).getValue()));
  }
  return new ComputedColumn(modelCmptdColumn.getName(),modelCmptdColumn.getExpression(),toDteDataType(modelCmptdColumn.getDataType()),modelCmptdColumn.getAggregateFunction(),modelCmptdColumn.getFilterExpression() == null ? null : new ScriptExpression(modelCmptdColumn.getFilterExpression()),argumentList);
}",0.7085427135678392
75352,"public void startTable(int[] width){
  writer.openTag(""String_Node_Str"");
  if (width == null) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (int i=0; i < width.length; i++) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",width[i]);
    writer.closeTag(""String_Node_Str"");
  }
}","public void startTable(int[] width){
  writer.openTag(""String_Node_Str"");
  if (width == null) {
    logger.log(Level.SEVERE,""String_Node_Str"");
    return;
  }
  for (int i=0; i < width.length; i++) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",width[i]);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9207232267037552
75353,"/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.toString();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str""),DimensionType.UNITS_PX));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str""),DimensionType.UNITS_PX));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}","/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.toString();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str""),DimensionType.UNITS_PX));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setHeight(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str""),DimensionType.UNITS_PX));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}",0.9968498424921246
75354,"/** 
 * Removes bound column from the element.
 * @param bindingName the binding name to be removed
 * @throws SemanticException if bound column property is locked.
 */
public void removedColumnBinding(String bindingName) throws SemanticException {
  if (StringUtil.isEmpty(bindingName))   return;
  List columns=(List)getProperty(BOUND_DATA_COLUMNS_PROP);
  if (columns == null)   return;
  PropertyHandle propHandle=getPropertyHandle(BOUND_DATA_COLUMNS_PROP);
  for (int i=0; i < columns.size(); i++) {
    ComputedColumn column=(ComputedColumn)columns.get(i);
    if (bindingName.equals(column.getName()))     propHandle.removeItem(column);
  }
}","/** 
 * Removes bound column from the element.
 * @param bindingName the binding name to be removed
 * @throws SemanticException if bound column property is locked.
 */
public void removedColumnBinding(String bindingName) throws SemanticException {
  PropertyHandle propHandle=getPropertyHandle(BOUND_DATA_COLUMNS_PROP);
  propHandle.removeItem(findColumnBinding(bindingName).getStructure());
}",0.5714285714285714
75355,"/** 
 * Fills the drop-down menu according to all the extended report output format.
 * @param menu the menu to fill
 */
protected void fillMenu(Menu menu){
  ReportEngine engine=new ReportEngine(new EngineConfig());
  String[] supportedFormats=engine.getSupportedFormats();
  MenuItem previewWebViewer=new MenuItem(menu,SWT.PUSH);
  previewWebViewer.setText(Messages.getString(""String_Node_Str""));
  previewWebViewer.setImage(previewIcon);
  previewWebViewer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preview(""String_Node_Str"",true);
    }
  }
);
  for (int i=0; i < supportedFormats.length; i++) {
    final String format=supportedFormats[i];
    MenuItem previewOption=new MenuItem(menu,SWT.PUSH);
    previewOption.setText(Messages.getFormattedString(Messages.getString(""String_Node_Str""),new Object[]{format.toUpperCase()}));
    if (format.equals(""String_Node_Str"")) {
      previewOption.setImage(previewPDFIcon);
    }
 else {
      previewOption.setImage(previewIcon);
    }
    previewOption.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        preview(format,false);
      }
    }
);
  }
}","/** 
 * Fills the drop-down menu according to all the extended report output format.
 * @param menu the menu to fill
 */
protected void fillMenu(Menu menu){
  ReportEngine engine=new ReportEngine(new EngineConfig());
  String[] supportedFormats=engine.getSupportedFormats();
  MenuItem previewWebViewer=new MenuItem(menu,SWT.PUSH);
  previewWebViewer.setText(Messages.getString(""String_Node_Str""));
  previewWebViewer.setImage(previewIcon);
  previewWebViewer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preview(""String_Node_Str"",true);
    }
  }
);
  for (int i=0; i < supportedFormats.length; i++) {
    final String format=supportedFormats[i];
    MenuItem previewOption=new MenuItem(menu,SWT.PUSH);
    previewOption.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{format.toUpperCase()}));
    if (format.equals(""String_Node_Str"")) {
      previewOption.setImage(previewPDFIcon);
    }
 else {
      previewOption.setImage(previewIcon);
    }
    previewOption.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        preview(format,false);
      }
    }
);
  }
}",0.9917423616845582
75356,"public Menu getMenu(Control parent){
  ReportEngine engine=new ReportEngine(new EngineConfig());
  String[] supportedFormats=engine.getSupportedFormats();
  Menu menu=new Menu(parent);
  MenuItem previewWebViewer=new MenuItem(menu,SWT.PUSH);
  previewWebViewer.setText(Messages.getString(""String_Node_Str""));
  previewWebViewer.setImage(previewIcon);
  previewWebViewer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preview(""String_Node_Str"",true);
    }
  }
);
  for (int i=0; i < supportedFormats.length; i++) {
    final String format=supportedFormats[i];
    MenuItem previewOption=new MenuItem(menu,SWT.PUSH);
    previewOption.setText(Messages.getFormattedString(Messages.getString(""String_Node_Str""),new Object[]{format.toUpperCase()}));
    if (format.equals(""String_Node_Str"")) {
      previewOption.setImage(previewPDFIcon);
    }
 else     if (format.equals(""String_Node_Str"")) {
      previewOption.setImage(previewDOCIcon);
    }
 else {
      previewOption.setImage(previewIcon);
    }
    previewOption.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        preview(format,false);
      }
    }
);
  }
  return menu;
}","public Menu getMenu(Control parent){
  ReportEngine engine=new ReportEngine(new EngineConfig());
  String[] supportedFormats=engine.getSupportedFormats();
  Menu menu=new Menu(parent);
  MenuItem previewWebViewer=new MenuItem(menu,SWT.PUSH);
  previewWebViewer.setText(Messages.getString(""String_Node_Str""));
  previewWebViewer.setImage(previewIcon);
  previewWebViewer.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preview(""String_Node_Str"",true);
    }
  }
);
  for (int i=0; i < supportedFormats.length; i++) {
    final String format=supportedFormats[i];
    MenuItem previewOption=new MenuItem(menu,SWT.PUSH);
    previewOption.setText(Messages.getFormattedString(""String_Node_Str"",new Object[]{format.toUpperCase()}));
    if (format.equals(""String_Node_Str"")) {
      previewOption.setImage(previewPDFIcon);
    }
 else     if (format.equals(""String_Node_Str"")) {
      previewOption.setImage(previewDOCIcon);
    }
 else {
      previewOption.setImage(previewIcon);
    }
    previewOption.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      SelectionEvent e){
        preview(format,false);
      }
    }
);
  }
  return menu;
}",0.9919224555735056
75357,"protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFIX + ""String_Node_Str"");
  setTitle(Messages.getString(""String_Node_Str""));
  getShell().setText(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(80);
  contents.setLayoutData(data);
  createContentArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initLevelDialog();
  parent.layout();
  return contents;
}","protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.CUBE_DATE_LEVEL_DIALOG);
  setTitle(Messages.getString(""String_Node_Str""));
  getShell().setText(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(80);
  contents.setLayoutData(data);
  createContentArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initLevelDialog();
  parent.layout();
  return contents;
}",0.971316818774446
75358,"protected Control createDialogArea(Composite parent){
  Composite dialogArea=(Composite)super.createDialogArea(parent);
  Composite content=new Composite(dialogArea,SWT.NONE);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginRight=0;
  content.setLayout(layout);
  createFilterArea(content);
  init();
  return dialogArea;
}","protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.CUBE_FILTER_LIST_DIALOG);
  Composite dialogArea=(Composite)super.createDialogArea(parent);
  Composite content=new Composite(dialogArea,SWT.NONE);
  content.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginRight=0;
  content.setLayout(layout);
  createFilterArea(content);
  init();
  return dialogArea;
}",0.920332936979786
75359,"protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFIX + ""String_Node_Str"");
  setTitle(Messages.getString(""String_Node_Str""));
  getShell().setText(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(80);
  data.heightHint=300;
  contents.setLayoutData(data);
  createGroupTypeArea(contents);
  createContentArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initDialog();
  parent.layout();
  return contents;
}","protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.CUBE_BUILDER_GROUP_DIALOG);
  setTitle(Messages.getString(""String_Node_Str""));
  getShell().setText(Messages.getString(""String_Node_Str""));
  setMessage(Messages.getString(""String_Node_Str""));
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(80);
  data.heightHint=300;
  contents.setLayoutData(data);
  createGroupTypeArea(contents);
  createContentArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initDialog();
  parent.layout();
  return contents;
}",0.9713239780353874
75360,"/** 
 * Render report page.
 * @param os
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render report page.
 * @param out
 * @param request
 * @param reportDocument
 * @param format
 * @param pageNumber
 * @param pageRange
 * @param masterPage
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReport(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String format,long pageNumber,String pageRange,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  Map context=BirtUtility.getAppContext(request,ReportEngineService.class.getClassLoader());
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputStream(out);
  renderOption.setOutputFormat(format);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_RUN.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,pageNumber,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  initializeEmitterConfigs(request,renderOption.getOptions());
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (pageNumber > 0)     renderTask.setPageNumber(pageNumber);
    if (pageRange != null) {
      if (!IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || !ParameterAccessor.PARAM_FORMAT_HTML.equalsIgnoreCase(format))       renderTask.setPageRange(pageRange);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.990672696438666
75361,"/** 
 * Render reportlet page.
 * @param os
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream os,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  OutputStream out=os;
  if (out == null)   out=new ByteArrayOutputStream();
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}","/** 
 * Render reportlet page.
 * @param out
 * @param request
 * @param reportDocument
 * @param reportletId
 * @param format
 * @param masterPage
 * @param pageNumber
 * @param svgFlag
 * @param activeIds
 * @param locale
 * @param rtl
 * @param iServletPath
 * @throws RemoteException
 */
public void renderReportlet(OutputStream out,HttpServletRequest request,IReportDocument reportDocument,String reportletId,String format,boolean masterPage,boolean svgFlag,List activeIds,Locale locale,boolean rtl,String iServletPath) throws RemoteException {
  if (reportDocument == null) {
    AxisFault fault=new AxisFault(BirtResources.getMessage(ResourceConstants.ACTION_EXCEPTION_NO_REPORT_DOCUMENT));
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
  if (out == null)   return;
  String servletPath=iServletPath;
  if (servletPath == null)   servletPath=request.getServletPath();
  IRenderTask renderTask=engine.createRenderTask(reportDocument);
  BirtUtility.addTask(request,renderTask);
  HashMap context=new HashMap();
  context.put(EngineConstants.APPCONTEXT_BIRT_VIEWER_HTTPSERVET_REQUEST,request);
  context.put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,ReportEngineService.class.getClassLoader());
  context.put(EngineConstants.APPCONTEXT_CHART_RESOLUTION,ParameterAccessor.getDpi(request));
  ParameterAccessor.pushAppContext(context,request);
  renderTask.setAppContext(context);
  RenderOption renderOption=null;
  if (format == null)   format=ParameterAccessor.getFormat(request);
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    renderOption=createPDFRenderOption(servletPath,request,ParameterAccessor.isDesigner(request));
  }
 else {
    renderOption=createHTMLRenderOption(svgFlag,servletPath,request);
  }
  renderOption.setOutputFormat(format);
  renderOption.setOutputStream(out);
  ViewerHTMLActionHandler handler=null;
  if (IBirtConstants.PDF_RENDER_FORMAT.equalsIgnoreCase(format) || IBirtConstants.POSTSCRIPT_RENDER_FORMAT.equalsIgnoreCase(format)) {
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,false,rtl,masterPage,format);
  }
 else {
    boolean isEmbeddable=false;
    if (IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath) || IBirtConstants.SERVLET_PATH_FRAMESET.equalsIgnoreCase(servletPath))     isEmbeddable=true;
    if (renderOption instanceof IHTMLRenderOption)     ((IHTMLRenderOption)renderOption).setEmbeddable(isEmbeddable);
    renderOption.setOption(IHTMLRenderOption.HTML_RTL_FLAG,new Boolean(rtl));
    renderOption.setOption(IHTMLRenderOption.INSTANCE_ID_LIST,activeIds);
    renderOption.setOption(IHTMLRenderOption.MASTER_PAGE_CONTENT,new Boolean(masterPage));
    handler=new ViewerHTMLActionHandler(reportDocument,-1,locale,isEmbeddable,rtl,masterPage,format);
  }
  String resourceFolder=ParameterAccessor.getParameter(request,ParameterAccessor.PARAM_RESOURCE_FOLDER);
  handler.setResourceFolder(resourceFolder);
  renderOption.setActionHandler(handler);
  renderTask.setRenderOption(renderOption);
  renderTask.setLocale(locale);
  try {
    if (ParameterAccessor.isIidReportlet(request)) {
      InstanceID instanceId=InstanceID.parse(reportletId);
      renderTask.setInstanceID(instanceId);
    }
 else {
      renderTask.setReportlet(reportletId);
    }
    renderTask.render();
  }
 catch (  Exception e) {
    AxisFault fault=new AxisFault(e.getLocalizedMessage(),e.getCause());
    fault.setFaultCode(new QName(""String_Node_Str""));
    throw fault;
  }
 finally {
    BirtUtility.removeTask(request);
    renderTask.close();
  }
}",0.990988530857455
75362,"protected void doExecution() throws ReportServiceException, RemoteException {
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_LOCALE,__bean.getLocale());
  options.setOption(InputOptions.OPT_RTL,new Boolean(__bean.isRtl()));
  options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  options.setOption(InputOptions.OPT_FORMAT,__bean.getFormat());
  options.setOption(InputOptions.OPT_SVG_FLAG,new Boolean(__svgFlag));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,new Boolean(__bean.isMasterPageContent()));
  __activeIds=new ArrayList();
  __page=getReportService().getPage(__docName,__pageNumber + ""String_Node_Str"",options,__activeIds);
}","protected void doExecution() throws ReportServiceException, RemoteException {
}",0.2033462033462033
75363,"protected void doRenderPage(String docName,long pageNumber,String format,boolean svgFlag,boolean isMasterContent,boolean useBookmark,String bookmark,Locale locale,boolean isRtl) throws ReportServiceException, RemoteException {
  ArrayList activeIds=new ArrayList();
  InputOptions options=new InputOptions();
  options.setOption(InputOptions.OPT_REQUEST,context.getRequest());
  options.setOption(InputOptions.OPT_FORMAT,format);
  options.setOption(InputOptions.OPT_LOCALE,locale);
  options.setOption(InputOptions.OPT_RTL,new Boolean(isRtl));
  options.setOption(InputOptions.OPT_IS_MASTER_PAGE_CONTENT,new Boolean(isMasterContent));
  options.setOption(InputOptions.OPT_SVG_FLAG,new Boolean(svgFlag));
  ByteArrayOutputStream page=getReportService().getPage(docName,pageNumber + ""String_Node_Str"",options,activeIds);
  UpdateContent content=new UpdateContent();
  content.setContent(DataUtil.toUTF8(page.toByteArray()));
  content.setTarget(operation.getTarget().getId());
  content.setInitializationId(parseReportId(activeIds));
  if (useBookmark) {
    content.setBookmark(bookmark);
  }
  Update updateDocument=new Update();
  updateDocument.setUpdateContent(content);
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  Page pageObj=new Page();
  pageObj.setPageNumber(String.valueOf(pageNumber));
  pageObj.setTotalPage(String.valueOf(getReportService().getPageCount(docName,options,new OutputOptions())));
  Data data=new Data();
  data.setPage(pageObj);
  updateData.setData(data);
  Update updateNavbar=new Update();
  updateNavbar.setUpdateData(updateData);
  response.setUpdate(new Update[]{updateDocument,updateNavbar});
}","protected void doRenderPage(String docName,long pageNumber,String format,boolean svgFlag,boolean isMasterContent,boolean useBookmark,String bookmark,Locale locale,boolean isRtl) throws ReportServiceException, RemoteException {
}",0.2401263823064771
75364,"/** 
 * Render a reportlet. This is similar to getPageByObjectId. The difference is that while getPageByObjectId returns the first page containing the object, this method return all pages containing the object.
 * @param docName
 * @param objectId
 * @param renderOptions
 * @param activeIds
 * @return
 * @throws ReportServiceException
 */
void renderReportlet(String docName,String objectId,InputOptions renderOptions,List activeIds,OutputStream out) throws ReportServiceException ;","/** 
 * Render a reportlet. This is similar to getPageByObjectId. The difference is that while getPageByObjectId returns the first page containing the object, this method return all pages containing the object.
 * @param docName
 * @param objectId
 * @param renderOptions
 * @param activeIds
 * @param out
 * @return
 * @throws ReportServiceException
 */
void renderReportlet(String docName,String objectId,InputOptions renderOptions,List activeIds,OutputStream out) throws ReportServiceException ;",0.9857433808553973
75365,"private void refreshColumns(boolean onlyFilter){
  if (columnChooser == null) {
    return;
  }
  if (!onlyFilter) {
    DataSetHandle dataSetHandle=getDataSetHandle();
    try {
      columnList=DataUtil.getColumnList(dataSetHandle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    displayTextChooser.removeAll();
    displayTextChooser.add(NONE_DISPLAY_TEXT);
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      displayTextChooser.add(((ResultSetColumnHandle)iter.next()).getColumnName());
    }
    displayTextChooser.setText(NONE_DISPLAY_TEXT);
  }
  String originalSelection=columnChooser.getText();
  columnChooser.removeAll();
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    ResultSetColumnHandle cachedColumn=(ResultSetColumnHandle)iter.next();
    if (matchDataType(cachedColumn)) {
      columnChooser.add(cachedColumn.getColumnName());
    }
  }
  if (columnChooser.indexOf(originalSelection) != -1) {
    columnChooser.setText(originalSelection);
  }
  columnChooser.setEnabled(columnChooser.getItemCount() > 0);
  updateMessageLine();
}","private void refreshColumns(boolean onlyFilter){
  if (columnChooser == null) {
    return;
  }
  if (!onlyFilter) {
    DataSetHandle dataSetHandle=getDataSetHandle();
    try {
      columnList=DataUtil.getColumnList(dataSetHandle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    displayTextChooser.removeAll();
    displayTextChooser.add(NONE_DISPLAY_TEXT);
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      displayTextChooser.add(((ResultSetColumnHandle)iter.next()).getColumnName());
    }
    displayTextChooser.setText(NONE_DISPLAY_TEXT);
  }
  String originalSelection=columnChooser.getText();
  columnChooser.removeAll();
  for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
    ResultSetColumnHandle cachedColumn=(ResultSetColumnHandle)iter.next();
    if (matchDataType(cachedColumn)) {
      columnChooser.add(cachedColumn.getColumnName());
    }
  }
  if (columnChooser.indexOf(originalSelection) != -1) {
    columnChooser.setText(originalSelection);
  }
  columnChooser.setEnabled(columnChooser.getItemCount() > 0);
  valueColumnExprButton.setEnabled(columnChooser.getItemCount() > 0);
  updateMessageLine();
}",0.9689922480620154
75366,"private void switchToDynamic(){
  Composite composite=new Composite(valueArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  composite.setLayoutData(gd);
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(3,false));
  createLabel(composite,LABEL_SELECT_DATA_SET);
  dataSetChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  dataSetChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      refreshColumns(false);
    }
    public void widgetSelected(    SelectionEvent e){
      refreshColumns(false);
    }
  }
);
  createDataSet=new Button(composite,SWT.PUSH);
  createDataSet.setText(BUTTON_CREATE_DATA_SET);
  setButtonLayoutData(createDataSet);
  createDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      new NewDataSetAction().run();
      refreshDataSets();
    }
  }
);
  createLabel(composite,LABEL_SELECT_VALUE_COLUMN);
  columnChooser=new Combo(composite,SWT.BORDER | SWT.DROP_DOWN);
  columnChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  columnChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateButtons();
    }
  }
);
  Button valueColumnExprButton=new Button(composite,SWT.PUSH);
  UIUtil.setExpressionButtonImage(valueColumnExprButton);
  valueColumnExprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  valueColumnExprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getExpression(columnChooser.getText()));
      expressionBuilder.setExpressionProvier(new ParameterExpressionProvider(inputParameter,dataSetChooser.getText()));
      if (expressionBuilder.open() == OK) {
        setExpression(columnChooser,expressionBuilder.getResult().trim());
      }
    }
  }
);
  createLabel(composite,LABEL_SELECT_DISPLAY_TEXT);
  displayTextChooser=new Combo(composite,SWT.BORDER | SWT.DROP_DOWN);
  displayTextChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button displayTextExprButton=new Button(composite,SWT.PUSH);
  UIUtil.setExpressionButtonImage(displayTextExprButton);
  displayTextExprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  displayTextExprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getExpression(displayTextChooser.getText()));
      expressionBuilder.setExpressionProvier(new ParameterExpressionProvider(inputParameter,dataSetChooser.getText()));
      if (expressionBuilder.open() == OK) {
        setExpression(displayTextChooser,expressionBuilder.getResult().trim());
      }
    }
  }
);
  createDefaultEditor();
  createSortingArea(valueArea);
  createLabel(valueArea,null);
  createPromptLine(valueArea);
  listLimit.setEditable(true);
}","private void switchToDynamic(){
  Composite composite=new Composite(valueArea,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  composite.setLayoutData(gd);
  composite.setLayout(UIUtil.createGridLayoutWithoutMargin(3,false));
  createLabel(composite,LABEL_SELECT_DATA_SET);
  dataSetChooser=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  dataSetChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  dataSetChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
      refreshColumns(false);
    }
    public void widgetSelected(    SelectionEvent e){
      refreshColumns(false);
    }
  }
);
  createDataSet=new Button(composite,SWT.PUSH);
  createDataSet.setText(BUTTON_CREATE_DATA_SET);
  setButtonLayoutData(createDataSet);
  createDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      new NewDataSetAction().run();
      refreshDataSets();
    }
  }
);
  createLabel(composite,LABEL_SELECT_VALUE_COLUMN);
  columnChooser=new Combo(composite,SWT.BORDER | SWT.DROP_DOWN);
  columnChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  columnChooser.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateButtons();
    }
  }
);
  valueColumnExprButton=new Button(composite,SWT.PUSH);
  UIUtil.setExpressionButtonImage(valueColumnExprButton);
  valueColumnExprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  valueColumnExprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getExpression(columnChooser.getText()));
      expressionBuilder.setExpressionProvier(new ParameterExpressionProvider(inputParameter,dataSetChooser.getText()));
      if (expressionBuilder.open() == OK) {
        setExpression(columnChooser,expressionBuilder.getResult().trim());
      }
    }
  }
);
  createLabel(composite,LABEL_SELECT_DISPLAY_TEXT);
  displayTextChooser=new Combo(composite,SWT.BORDER | SWT.DROP_DOWN);
  displayTextChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Button displayTextExprButton=new Button(composite,SWT.PUSH);
  UIUtil.setExpressionButtonImage(displayTextExprButton);
  displayTextExprButton.setToolTipText(Messages.getString(""String_Node_Str""));
  displayTextExprButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      ExpressionBuilder expressionBuilder=new ExpressionBuilder(getExpression(displayTextChooser.getText()));
      expressionBuilder.setExpressionProvier(new ParameterExpressionProvider(inputParameter,dataSetChooser.getText()));
      if (expressionBuilder.open() == OK) {
        setExpression(displayTextChooser,expressionBuilder.getResult().trim());
      }
    }
  }
);
  createDefaultEditor();
  createSortingArea(valueArea);
  createLabel(valueArea,null);
  createPromptLine(valueArea);
  listLimit.setEditable(true);
}",0.99887441710886
75367,"private String[] getOthersVMArguments(ILaunchConfiguration configuration) throws CoreException {
  String path=configuration.getAttribute(IMPORTPROJECT,""String_Node_Str"");
  String append=""String_Node_Str"" + PROJECT_NAMES_KEY + ""String_Node_Str""+ path;
  String projectClassPaths=finder.getClassPath();
  String classPath=""String_Node_Str"";
  if (projectClassPaths != null && projectClassPaths.length() != 0) {
    classPath=""String_Node_Str"" + PROJECT_CLASSPATH_KEY + ""String_Node_Str""+ projectClassPaths;
  }
  String openFiles=""String_Node_Str"" + PROJECT_OPENFILES_KEY + ""String_Node_Str""+ configuration.getAttribute(OPENFILENAMES,""String_Node_Str"");
  return new String[]{append,classPath,openFiles};
}","private String[] getOthersVMArguments(ILaunchConfiguration configuration) throws CoreException {
  String path=configuration.getAttribute(IMPORTPROJECT,""String_Node_Str"");
  String append=""String_Node_Str"" + PROJECT_NAMES_KEY + ""String_Node_Str""+ path;
  String projectClassPaths=finder.getClassPath();
  String classPath=""String_Node_Str"";
  if (projectClassPaths != null && projectClassPaths.length() != 0) {
    classPath=""String_Node_Str"" + PROJECT_CLASSPATH_KEY + ""String_Node_Str""+ projectClassPaths;
  }
  String openFiles=""String_Node_Str"" + PROJECT_OPENFILES_KEY + ""String_Node_Str""+ configuration.getAttribute(OPENFILENAMES,""String_Node_Str"");
  String mode=""String_Node_Str"" + WebViewer.REPORT_DEBUT_MODE + ""String_Node_Str""+ ""String_Node_Str"";
  return new String[]{append,classPath,openFiles,mode};
}",0.9295589203423305
75368,"/** 
 * @param aggrLevels
 * @param aggrName
 * @param axisQualifierLevel
 * @param axisQualifierValue
 * @param targetLevel
 * @param direction
 */
public AggrSortDefinition(DimLevel[] aggrLevels,String aggrName,DimLevel[] axisQualifierLevel,Object[] axisQualifierValue,DimLevel targetLevel,boolean direction){
  Object[] params={aggrLevels,aggrName,axisQualifierLevel,axisQualifierValue,targetLevel,new Boolean(direction)};
  logger.entering(AggrSortDefinition.class.getName(),""String_Node_Str"",params);
  this.aggrLevels=aggrLevels;
  this.aggrName=aggrName;
  this.axisQualifierLevel=axisQualifierLevel;
  this.axisQualifierValue=axisQualifierValue;
  this.targetLevel=targetLevel;
  this.direction=direction;
  logger.exiting(AggrSortDefinition.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggrLevels
 * @param aggrName
 * @param axisQualifierLevel
 * @param axisQualifierValue
 * @param targetLevel
 * @param direction
 * @throws DataException 
 */
public AggrSortDefinition(DimLevel[] aggrLevels,String aggrName,DimLevel[] axisQualifierLevel,Object[] axisQualifierValue,DimLevel targetLevel,boolean direction) throws DataException {
  Object[] params={aggrLevels,aggrName,axisQualifierLevel,axisQualifierValue,targetLevel,new Boolean(direction)};
  logger.entering(AggrSortDefinition.class.getName(),""String_Node_Str"",params);
  checkAxisAgrument(axisQualifierLevel,axisQualifierValue);
  this.aggrLevels=aggrLevels;
  this.aggrName=aggrName;
  this.axisQualifierLevel=axisQualifierLevel;
  this.axisQualifierValue=axisQualifierValue;
  this.targetLevel=targetLevel;
  this.direction=direction;
  logger.exiting(AggrSortDefinition.class.getName(),""String_Node_Str"");
}",0.9357907253269916
75369,"/** 
 * register globally available script functions
 */
private void setupScriptScope(){
  if (config != null) {
    Context cx=Context.enter();
    try {
      rootScope=cx.initStandardObjects(null,true);
      registerBeans(rootScope,config.getConfigMap());
      registerBeans(rootScope,config.getScriptObjects());
      IStatusHandler handler=config.getStatusHandler();
      if (handler != null) {
        handler.initialize();
        rootScope.put(""String_Node_Str"",rootScope,handler);
        cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      }
    }
 catch (    Exception ex) {
      rootScope=null;
      logger.log(Level.INFO,""String_Node_Str"",ex);
    }
 finally {
      Context.exit();
    }
  }
}","/** 
 * register globally available script functions
 */
private void setupScriptScope(){
  if (config != null) {
    Context cx=Context.enter();
    try {
      cx.setSecurityController(ScriptUtil.createSecurityController());
    }
 catch (    Throwable throwable) {
    }
    try {
      rootScope=new ImporterTopLevel(cx);
      registerBeans(rootScope,config.getConfigMap());
      registerBeans(rootScope,config.getScriptObjects());
      IStatusHandler handler=config.getStatusHandler();
      if (handler != null) {
        handler.initialize();
        rootScope.put(""String_Node_Str"",rootScope,handler);
        cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      }
    }
 catch (    Exception ex) {
      rootScope=null;
      logger.log(Level.INFO,""String_Node_Str"",ex);
    }
 finally {
      Context.exit();
    }
  }
}",0.8855534709193246
75370,"/** 
 * create a new context. Call close to finish using the execution context
 */
public ExecutionContext(EngineTask engineTask){
  if (engineTask != null) {
    task=engineTask;
    engine=task.getEngine();
    log=task.getLogger();
  }
 else {
    log=Logger.getLogger(ExecutionContext.class.getName());
  }
  locale=Locale.getDefault();
  ScriptableObject rootScope=null;
  if (engine != null) {
    Object scope=engine.getRootScope();
    if (scope instanceof ScriptableObject) {
      rootScope=(ScriptableObject)scope;
    }
  }
  if (rootScope != null) {
    scriptContext=new ScriptContext(rootScope);
  }
 else {
    scriptContext=new ScriptContext();
  }
  scriptContext.getContext().setLocale(locale);
  initailizeScriptContext(scriptContext.getContext(),scriptContext.getRootScope());
  scriptContext.registerBean(""String_Node_Str"",new ReportObject());
  scriptContext.registerBean(""String_Node_Str"",new ScriptableParameters(params,scriptContext.getScope()));
  scriptContext.registerBean(""String_Node_Str"",configs);
  scriptContext.registerBean(""String_Node_Str"",new Long(pageNumber));
  scriptContext.registerBean(""String_Node_Str"",new Long(totalPage));
  scriptContext.registerBean(""String_Node_Str"",this);
  scriptContext.eval(""String_Node_Str"");
  scriptContext.eval(""String_Node_Str"");
  applicationClassLoader=new ApplicationClassLoader(this);
  scriptContext.getContext().setApplicationClassLoader(applicationClassLoader);
}","/** 
 * create a new context. Call close to finish using the execution context
 */
public ExecutionContext(EngineTask engineTask){
  if (engineTask != null) {
    task=engineTask;
    engine=task.getEngine();
    log=task.getLogger();
  }
 else {
    log=Logger.getLogger(ExecutionContext.class.getName());
  }
  locale=Locale.getDefault();
  ScriptableObject rootScope=null;
  if (engine != null) {
    Object scope=engine.getRootScope();
    if (scope instanceof ScriptableObject) {
      rootScope=(ScriptableObject)scope;
    }
  }
  if (rootScope != null) {
    scriptContext=new ScriptContext(rootScope);
  }
 else {
    scriptContext=new ScriptContext();
  }
  Context context=scriptContext.getContext();
  try {
    context.setSecurityController(ScriptUtil.createSecurityController());
  }
 catch (  Throwable throwable) {
  }
  context.setLocale(locale);
  initailizeScriptContext(context,scriptContext.getRootScope());
  scriptContext.registerBean(""String_Node_Str"",new ReportObject());
  scriptContext.registerBean(""String_Node_Str"",new ScriptableParameters(params,scriptContext.getScope()));
  scriptContext.registerBean(""String_Node_Str"",configs);
  scriptContext.registerBean(""String_Node_Str"",new Long(pageNumber));
  scriptContext.registerBean(""String_Node_Str"",new Long(totalPage));
  scriptContext.registerBean(""String_Node_Str"",this);
  scriptContext.eval(""String_Node_Str"");
  scriptContext.eval(""String_Node_Str"");
  applicationClassLoader=new ApplicationClassLoader(this);
  context.setApplicationClassLoader(applicationClassLoader);
}",0.91072618254497
75371,"private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    return (editor.getEditorInput().getName().endsWith(""String_Node_Str"") || editor.getEditorInput().getName().endsWith(""String_Node_Str""));
  }
  return false;
}","private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    IContentType[] contentTypes=Platform.getContentTypeManager().findContentTypesFor(editor.getEditorInput().getName());
    if (contentTypes[0] != null && (contentTypes[0].getId().equals(""String_Node_Str"") || contentTypes[0].getId().equals(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}",0.6106194690265486
75372,"private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    return (editor.getEditorInput().getName().endsWith(""String_Node_Str"") || editor.getEditorInput().getName().endsWith(""String_Node_Str""));
  }
  return false;
}","private boolean isEnable(){
  IEditorPart editor=UIUtil.getActiveEditor(true);
  if (editor != null) {
    IContentType[] contentTypes=Platform.getContentTypeManager().findContentTypesFor(editor.getEditorInput().getName());
    if (contentTypes[0] != null && (contentTypes[0].getId().equals(""String_Node_Str"") || contentTypes[0].getId().equals(""String_Node_Str""))) {
      return true;
    }
  }
  return false;
}",0.6106194690265486
75373,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName()))));
      }
      if (level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(createLevelName(dimName,level.getName()),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DateTimeAttributeProcessor(level.getDateTimeLevelType());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      String levelName=createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.8902549632167691
75374,"public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out);
  writer.writeDeclarations();
  writer.declareStyles(engine.getStyleMap());
  writer.startSheet();
  writer.startTable(engine.getCoordinates());
  int count=0;
  while (count < engine.getRowCount()) {
    outputData(engine.getRow(count),writer);
    count++;
  }
  writer.endTable();
  writer.closeSheet();
  writer.close(true);
}","public void end(IReportContent report){
  engine.complete();
  ExcelWriter writer=new ExcelWriter(out);
  writer.writeDeclarations();
  writer.declareStyles(engine.getStyleMap());
  writer.startSheet();
  writer.startTable(engine.getCoordinates());
  int count=0;
  while (count < engine.getRowCount()) {
    outputData(engine.getRow(count),writer);
    count++;
  }
  writer.endTable();
  writer.closeSheet();
  for (int i=0; i < charts.size(); i++) {
    File temp=(File)charts.get(i);
    writer.insertSheet(temp);
    temp.delete();
  }
  writer.close(true);
}",0.8296593186372746
75375,"/** 
 */
private void processSubQuery(){
  IBaseQueryDefinition queryDefn2=null;
  if (queryDefn != null)   queryDefn2=queryDefn;
 else   queryDefn2=subQueryDefn;
  subQueryMap=new HashMap();
  Collection subQueryDefns=queryDefn2.getSubqueries();
  if (subQueryDefns != null) {
    Iterator it=subQueryDefns.iterator();
    while (it.hasNext()) {
      ISubqueryDefinition subQueryDefn=(ISubqueryDefinition)it.next();
      subQueryMap.put(subQueryDefn.getName(),subQueryDefn);
    }
  }
}","/** 
 */
private void processSubQuery(){
  IBaseQueryDefinition queryDefn2=null;
  if (queryDefn != null)   queryDefn2=queryDefn;
 else   queryDefn2=subQueryDefn;
  subQueryMap=new HashMap();
  registerSubQuery(queryDefn2);
}",0.5574229691876751
75376,"private List getEdgeSort(int edgeType){
  List l=this.defn.getSorts();
  List result=new ArrayList();
  for (int i=0; i < l.size(); i++) {
    ICubeSortDefinition sort=(ICubeSortDefinition)l.get(i);
    if (this.defn.getEdge(edgeType).getDimensions().contains(sort.getTargetLevel().getHierarchy().getDimension())) {
      result.add(sort);
    }
  }
  Collections.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      int level1=((ICubeSortDefinition)arg0).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg0).getTargetLevel());
      int level2=((ICubeSortDefinition)arg1).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg1).getTargetLevel());
      if (level1 == level2)       return 0;
 else       if (level1 < level2)       return -1;
 else       return 1;
    }
  }
);
  return result;
}","private List getEdgeSort(int edgeType){
  List l=this.defn.getSorts();
  List result=new ArrayList();
  for (int i=0; i < l.size(); i++) {
    ICubeSortDefinition sort=(ICubeSortDefinition)l.get(i);
    if (this.defn.getEdge(edgeType) != null && this.defn.getEdge(edgeType).getDimensions().contains(sort.getTargetLevel().getHierarchy().getDimension())) {
      result.add(sort);
    }
  }
  Collections.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      int level1=((ICubeSortDefinition)arg0).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg0).getTargetLevel());
      int level2=((ICubeSortDefinition)arg1).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg1).getTargetLevel());
      if (level1 == level2)       return 0;
 else       if (level1 < level2)       return -1;
 else       return 1;
    }
  }
);
  return result;
}",0.9784649364991718
75377,"/** 
 * register globally available script functions
 */
private void setupScriptScope(){
  if (config != null) {
    Context cx=Context.enter();
    try {
      rootScope=cx.initStandardObjects(null,true);
      registerBeans(rootScope,config.getConfigMap());
      registerBeans(rootScope,config.getScriptObjects());
      IStatusHandler handler=config.getStatusHandler();
      if (handler != null) {
        handler.initialize();
        rootScope.put(""String_Node_Str"",rootScope,handler);
        cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      }
    }
 catch (    Exception ex) {
      rootScope=null;
      logger.log(Level.INFO,""String_Node_Str"",ex);
    }
 finally {
      Context.exit();
    }
  }
}","/** 
 * register globally available script functions
 */
private void setupScriptScope(){
  if (config != null) {
    Context cx=Context.enter();
    try {
      cx.setSecurityController(ScriptUtil.createSecurityController());
    }
 catch (    Throwable throwable) {
      throwable.printStackTrace();
    }
    try {
      rootScope=new ImporterTopLevel(cx);
      registerBeans(rootScope,config.getConfigMap());
      registerBeans(rootScope,config.getScriptObjects());
      IStatusHandler handler=config.getStatusHandler();
      if (handler != null) {
        handler.initialize();
        rootScope.put(""String_Node_Str"",rootScope,handler);
        cx.evaluateString(rootScope,""String_Node_Str"",""String_Node_Str"",0,null);
      }
    }
 catch (    Exception ex) {
      rootScope=null;
      logger.log(Level.INFO,""String_Node_Str"",ex);
    }
 finally {
      Context.exit();
    }
  }
}",0.8665850673194615
75378,"/** 
 * create a new context. Call close to finish using the execution context
 */
public ExecutionContext(EngineTask engineTask){
  if (engineTask != null) {
    task=engineTask;
    engine=task.getEngine();
    log=task.getLogger();
  }
 else {
    log=Logger.getLogger(ExecutionContext.class.getName());
  }
  locale=Locale.getDefault();
  ScriptableObject rootScope=null;
  if (engine != null) {
    Object scope=engine.getRootScope();
    if (scope instanceof ScriptableObject) {
      rootScope=(ScriptableObject)scope;
    }
  }
  if (rootScope != null) {
    scriptContext=new ScriptContext(rootScope);
  }
 else {
    scriptContext=new ScriptContext();
  }
  scriptContext.getContext().setLocale(locale);
  initailizeScriptContext(scriptContext.getContext(),scriptContext.getRootScope());
  scriptContext.registerBean(""String_Node_Str"",new ReportObject());
  scriptContext.registerBean(""String_Node_Str"",new ScriptableParameters(params,scriptContext.getScope()));
  scriptContext.registerBean(""String_Node_Str"",configs);
  scriptContext.registerBean(""String_Node_Str"",new Long(pageNumber));
  scriptContext.registerBean(""String_Node_Str"",new Long(totalPage));
  scriptContext.registerBean(""String_Node_Str"",this);
  scriptContext.eval(""String_Node_Str"");
  scriptContext.eval(""String_Node_Str"");
  applicationClassLoader=new ApplicationClassLoader(this);
  scriptContext.getContext().setApplicationClassLoader(applicationClassLoader);
}","/** 
 * create a new context. Call close to finish using the execution context
 */
public ExecutionContext(EngineTask engineTask){
  if (engineTask != null) {
    task=engineTask;
    engine=task.getEngine();
    log=task.getLogger();
  }
 else {
    log=Logger.getLogger(ExecutionContext.class.getName());
  }
  locale=Locale.getDefault();
  ScriptableObject rootScope=null;
  if (engine != null) {
    Object scope=engine.getRootScope();
    if (scope instanceof ScriptableObject) {
      rootScope=(ScriptableObject)scope;
    }
  }
  if (rootScope != null) {
    scriptContext=new ScriptContext(rootScope);
  }
 else {
    scriptContext=new ScriptContext();
  }
  Context context=scriptContext.getContext();
  try {
    context.setSecurityController(ScriptUtil.createSecurityController());
  }
 catch (  Throwable throwable) {
    throwable.printStackTrace();
  }
  context.setLocale(locale);
  initailizeScriptContext(context,scriptContext.getRootScope());
  scriptContext.registerBean(""String_Node_Str"",new ReportObject());
  scriptContext.registerBean(""String_Node_Str"",new ScriptableParameters(params,scriptContext.getScope()));
  scriptContext.registerBean(""String_Node_Str"",configs);
  scriptContext.registerBean(""String_Node_Str"",new Long(pageNumber));
  scriptContext.registerBean(""String_Node_Str"",new Long(totalPage));
  scriptContext.registerBean(""String_Node_Str"",this);
  scriptContext.eval(""String_Node_Str"");
  scriptContext.eval(""String_Node_Str"");
  applicationClassLoader=new ApplicationClassLoader(this);
  context.setApplicationClassLoader(applicationClassLoader);
}",0.9008237232289952
75379,"public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    defineDataSourceAndDataSet(hierHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=null;
    if (hierHandle.getDataSet() != cubeHandle.getDataSet())     it=new DataSetIterator(this.session,hierHandle);
 else     it=new DataSetIterator(this.session,cubeHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    defineDataSourceAndDataSet(hierHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.945924764890282
75380,"/** 
 * @param parentScope
 * @param queryDefn
 * @param cubeFilter
 * @param cx
 * @throws DataException
 */
protected void initialize(Scriptable parentScope,ICubeQueryDefinition queryDefn,IFilterDefinition cubeFilter,Context cx) throws DataException {
  this.scope=cx.initStandardObjects();
  this.scope.setParentScope(parentScope);
  this.dataObj=new DummyJSAggregationAccessor();
  this.expr=cubeFilter.getExpression();
  this.dimName=OlapExpressionUtil.getReferencedDimensionName(this.expr,queryDefn.getBindings());
  this.dimObj=new DummyJSLevels(this.dimName);
  this.queryDefn=queryDefn;
  if (cubeFilter instanceof ICubeFilterDefinition) {
    this.cubeFilter=(ICubeFilterDefinition)cubeFilter;
  }
 else {
    this.cubeFilter=new CubeFilterDefinition(this.expr);
  }
  this.aggrLevels=populateAggrLevels();
  axisLevels=this.cubeFilter.getAxisQualifierLevels();
  axisValues=this.cubeFilter.getAxisQualifierValues();
  if (axisLevels == null || axisValues == null || axisLevels.length != axisValues.length) {
    this.isAxisFilter=false;
  }
 else {
    for (int i=0; i < axisLevels.length; i++) {
      if (axisLevels[i] == null)       throw new DataException(ResourceConstants.AXIS_LEVEL_CANNOT_BE_NULL);
      if (axisValues[i] == null)       throw new DataException(ResourceConstants.AXIS_VALUE_CANNOT_BE_NULL,axisLevels[i].getName());
      try {
        axisValues[i]=JavascriptEvalUtil.evaluateRawScript(cx,scope,axisValues[i].toString(),""String_Node_Str"",0);
      }
 catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
  }
  this.isAxisFilter=(axisLevels != null && axisValues != null && axisLevels.length == axisValues.length);
  if (this.dimName != null) {
    DummyJSDimensionObject dimObj=new DummyJSDimensionObject(this.dimObj,this.getTargetDimensionLevelNames());
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDimensionAccessor(this.dimName,dimObj));
  }
  if (this.aggrLevels != null && this.aggrLevels.length > 0) {
    this.scope.put(""String_Node_Str"",this.scope,this.dataObj);
  }
 else {
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDataAccessor(queryDefn.getBindings(),this.scope));
  }
  OLAPExpressionCompiler.compile(cx,this.expr);
}","/** 
 * @param parentScope
 * @param queryDefn
 * @param cubeFilter
 * @param cx
 * @throws DataException
 */
protected void initialize(Scriptable parentScope,ICubeQueryDefinition queryDefn,IFilterDefinition cubeFilter,Context cx) throws DataException {
  this.scope=cx.initStandardObjects();
  this.scope.setParentScope(parentScope);
  this.dataObj=new DummyJSAggregationAccessor();
  this.expr=cubeFilter.getExpression();
  this.dimName=OlapExpressionUtil.getReferencedDimensionName(this.expr,queryDefn.getBindings());
  this.dimObj=new DummyJSLevels(this.dimName);
  this.queryDefn=queryDefn;
  if (cubeFilter instanceof ICubeFilterDefinition) {
    this.cubeFilter=(ICubeFilterDefinition)cubeFilter;
  }
 else {
    this.cubeFilter=new CubeFilterDefinition(this.expr);
  }
  this.aggrLevels=populateAggrLevels();
  axisLevels=this.cubeFilter.getAxisQualifierLevels();
  axisValues=this.cubeFilter.getAxisQualifierValues();
  if (axisLevels == null || axisValues == null || axisLevels.length != axisValues.length) {
    this.isAxisFilter=false;
  }
 else {
    for (int i=0; i < axisLevels.length; i++) {
      if (axisLevels[i] == null)       throw new DataException(ResourceConstants.AXIS_LEVEL_CANNOT_BE_NULL);
      if (axisValues[i] == null)       throw new DataException(ResourceConstants.AXIS_VALUE_CANNOT_BE_NULL,axisLevels[i].getName());
    }
  }
  this.isAxisFilter=(axisLevels != null && axisValues != null && axisLevels.length == axisValues.length);
  if (this.dimName != null) {
    DummyJSDimensionObject dimObj=new DummyJSDimensionObject(this.dimObj,this.getTargetDimensionLevelNames());
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDimensionAccessor(this.dimName,dimObj));
  }
  if (this.aggrLevels != null && this.aggrLevels.length > 0) {
    this.scope.put(""String_Node_Str"",this.scope,this.dataObj);
  }
 else {
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDataAccessor(queryDefn.getBindings(),this.scope));
  }
  OLAPExpressionCompiler.compile(cx,this.expr);
}",0.949728581543545
75381,"private void updateDataDefinition(){
  ISelectDataComponent newComponent=getDataDefinitionComponent(getCurrentSeriesDefinition());
  if (dateComponent != null && dateComponent.getClass() == newComponent.getClass()) {
    return;
  }
  if (cmpData != null && !cmpData.isDisposed()) {
    cmpData.dispose();
  }
  dateComponent=newComponent;
  cmpData=dateComponent.createArea(cmpTop);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpData.setLayoutData(gd);
  }
}","private void updateDataDefinition(){
  ISelectDataComponent newComponent=getDataDefinitionComponent(getCurrentSeriesDefinition());
  if (dataComponent != null && dataComponent.getClass() == newComponent.getClass()) {
    return;
  }
  if (cmpData != null && !cmpData.isDisposed()) {
    cmpData.dispose();
  }
  dataComponent=newComponent;
  cmpData=dataComponent.createArea(cmpTop);
  if (cmpData != null) {
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpData.setLayoutData(gd);
  }
}",0.9698736637512148
75382,"protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  Palette pa=((SeriesDefinition)(seriesDefns.get(0))).getSeriesPalette();
  for (int i=0; i < pa.getEntries().size(); i++) {
    int index=i + seriesDefns.size();
    int paletteSize=pa.getEntries().size();
    while (index >= pa.getEntries().size()) {
      index-=paletteSize;
    }
    sdTmp.getSeriesPalette().getEntries().add(i,EcoreUtil.copy((Fill)pa.getEntries().get(index)));
  }
  sdTmp.getSeriesPalette().getEntries().remove(pa.getEntries().size());
  sdTmp.getSeries().add(EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries()));
  sdTmp.setQuery((Query)EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getQuery()));
  cleanDataDefinition(sdTmp);
  sdTmp.eAdapters().addAll(((SeriesDefinition)seriesDefns.get(0)).eAdapters());
  int firstIndex=getFirstIndexOfSameAxis();
  EList list=getChart().getSampleData().getOrthogonalSampleData();
  OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
  if (axisIndex == -1) {
    sdOrthogonal.setSeriesDefinitionIndex(seriesDefns.size());
  }
 else {
    sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
  }
  sdOrthogonal.setDataSetRepresentation(convertDataSetRepresentation(sdOrthogonal.getDataSetRepresentation(),sdOrthogonal.getSeriesDefinitionIndex()));
  sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
  boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
  ChartAdapter.ignoreNotifications(true);
  int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
  ArrayList al=new ArrayList();
  if (sdIndex >= list.size()) {
    list.add(sdOrthogonal);
  }
 else {
    for (int i=sdIndex; i < list.size(); i++) {
      al.add(list.get(i));
    }
    list.set(sdIndex,sdOrthogonal);
    for (int i=1; i < al.size(); i++) {
      list.set(i + sdIndex,al.get(i - 1));
      ((OrthogonalSampleData)list.get(i + sdIndex)).setSeriesDefinitionIndex(i + sdIndex);
    }
    list.add(al.get(al.size() - 1));
    ((OrthogonalSampleData)list.get(list.size() - 1)).setSeriesDefinitionIndex(list.size() - 1);
  }
  ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  seriesDefns.add(sdTmp);
}","protected void addNewSeriesDefinition(){
  SeriesDefinition sdTmp=SeriesDefinitionImpl.create();
  if (!seriesDefns.isEmpty()) {
    Palette pa=((SeriesDefinition)(seriesDefns.get(0))).getSeriesPalette();
    for (int i=0; i < pa.getEntries().size(); i++) {
      int index=i + seriesDefns.size();
      int paletteSize=pa.getEntries().size();
      while (index >= pa.getEntries().size()) {
        index-=paletteSize;
      }
      sdTmp.getSeriesPalette().getEntries().add(i,EcoreUtil.copy((Fill)pa.getEntries().get(index)));
    }
    sdTmp.getSeriesPalette().getEntries().remove(pa.getEntries().size());
    sdTmp.getSeries().add(EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getDesignTimeSeries()));
    sdTmp.setQuery((Query)EcoreUtil.copy(((SeriesDefinition)seriesDefns.get(0)).getQuery()));
    cleanDataDefinition(sdTmp);
    sdTmp.eAdapters().addAll(((SeriesDefinition)seriesDefns.get(0)).eAdapters());
    int firstIndex=getFirstIndexOfSameAxis();
    EList list=getChart().getSampleData().getOrthogonalSampleData();
    OrthogonalSampleData sdOrthogonal=(OrthogonalSampleData)EcoreUtil.copy((EObject)list.get(firstIndex));
    if (axisIndex == -1) {
      sdOrthogonal.setSeriesDefinitionIndex(seriesDefns.size());
    }
 else {
      sdOrthogonal.setSeriesDefinitionIndex(ChartUIUtil.getLastSeriesIndexWithinAxis(getChart(),axisIndex) + 1);
    }
    sdOrthogonal.setDataSetRepresentation(convertDataSetRepresentation(sdOrthogonal.getDataSetRepresentation(),sdOrthogonal.getSeriesDefinitionIndex()));
    sdOrthogonal.eAdapters().addAll(getChart().getSampleData().eAdapters());
    boolean isNotificaionIgnored=ChartAdapter.isNotificationIgnored();
    ChartAdapter.ignoreNotifications(true);
    int sdIndex=sdOrthogonal.getSeriesDefinitionIndex();
    ArrayList al=new ArrayList();
    if (sdIndex >= list.size()) {
      list.add(sdOrthogonal);
    }
 else {
      for (int i=sdIndex; i < list.size(); i++) {
        al.add(list.get(i));
      }
      list.set(sdIndex,sdOrthogonal);
      for (int i=1; i < al.size(); i++) {
        list.set(i + sdIndex,al.get(i - 1));
        ((OrthogonalSampleData)list.get(i + sdIndex)).setSeriesDefinitionIndex(i + sdIndex);
      }
      list.add(al.get(al.size() - 1));
      ((OrthogonalSampleData)list.get(list.size() - 1)).setSeriesDefinitionIndex(list.size() - 1);
    }
    ChartAdapter.ignoreNotifications(isNotificaionIgnored);
  }
 else {
    sdTmp.getSeries().add(BarSeriesImpl.create());
    OrthogonalSampleData sampleData=DataFactory.eINSTANCE.createOrthogonalSampleData();
    sampleData.setDataSetRepresentation(ChartUIUtil.getNewSampleData(AxisType.LINEAR_LITERAL,0));
    sampleData.setSeriesDefinitionIndex(0);
    getChart().getSampleData().getOrthogonalSampleData().add(getFirstIndexOfSameAxis(),sampleData);
  }
  seriesDefns.add(sdTmp);
}",0.8841285296981499
75383,"private void refreshQuery(){
  Object[] data=new Object[2];
  data[0]=getCurrentSeriesDefinition();
  data[1]=ChartUIUtil.getDataQuery(getCurrentSeriesDefinition(),0);
  dateComponent.selectArea(true,data);
}","private void refreshQuery(){
  Object[] data=new Object[2];
  data[0]=getCurrentSeriesDefinition();
  data[1]=ChartUIUtil.getDataQuery(getCurrentSeriesDefinition(),0);
  dataComponent.selectArea(true,data);
}",0.9951923076923076
75384,"public void selectArea(boolean selected,Object data){
  dateComponent.selectArea(selected,data);
}","public void selectArea(boolean selected,Object data){
  dataComponent.selectArea(selected,data);
}",0.9897959183673468
75385,"private SeriesDefinition getCurrentSeriesDefinition(){
  return (SeriesDefinition)seriesDefns.get(cmbSeriesSelect.getSelectionIndex());
}","private SeriesDefinition getCurrentSeriesDefinition(){
  if (seriesDefns.isEmpty()) {
    addNewSeriesDefinition();
    refreshSeriesCombo();
    cmbSeriesSelect.select(0);
  }
  return (SeriesDefinition)seriesDefns.get(cmbSeriesSelect.getSelectionIndex());
}",0.6919191919191919
75386,"public void dispose(){
  dateComponent.dispose();
  super.dispose();
}","public void dispose(){
  if (dataComponent != null) {
    dataComponent.dispose();
  }
  super.dispose();
}",0.7909604519774012
75387,"public void widgetDisposed(DisposeEvent e){
  Iterator tasks=availableTasks.values().iterator();
  while (tasks.hasNext()) {
    ((ITask)tasks.next()).dispose();
  }
  WizardBase.this.dispose();
}","public void widgetDisposed(DisposeEvent e){
  WizardBase.this.dispose();
}",0.5481481481481482
75388,"public void switchTo(String sTaskID){
  if (sCurrentActiveTask != null) {
    this.context=getCurrentTask().getContext();
  }
  sCurrentActiveTask=sTaskID;
  if (errorHints != null) {
    getCurrentTask().setErrorHints(errorHints);
  }
  getCurrentTask().setContext(context);
  errorHints=null;
  ErrorsManager.instance().removeErrors();
  detachPopup();
  dialog.switchTask();
}","public void switchTo(String sTaskID){
  if (sCurrentActiveTask != null) {
    this.context=getCurrentTask().getContext();
  }
  sCurrentActiveTask=sTaskID;
  if (errorHints != null) {
    getCurrentTask().setErrorHints(errorHints);
  }
  getCurrentTask().setContext(context);
  errorHints=null;
  ErrorsManager.instance().removeErrors();
  detachPopup();
  try {
    dialog.switchTask();
  }
 catch (  Exception e) {
    displayException(e);
  }
}",0.9176755447941888
75389,"public void dispose(){
}","public void dispose(){
  Iterator tasks=availableTasks.values().iterator();
  while (tasks.hasNext()) {
    ((ITask)tasks.next()).dispose();
  }
}",0.2823529411764706
75390,"public void widgetSelected(SelectionEvent e){
  refreshList();
  Rectangle textBounds=expressionText.getBounds();
  Point pt=expressionText.toDisplay(textBounds.x,textBounds.y);
  Rectangle rect=new Rectangle(pt.x,pt.y,expressionText.getParent().getBounds().width,textBounds.height);
  PopupSelectionList popup=new PopupSelectionList(expressionText.getParent().getShell());
  popup.setItems(popupItems);
  String value=popup.open(rect);
  int selectionIndex=popup.getSelectionIndex();
  if (value != null) {
    String newValue=null;
    if (value.equals((actions[0]))) {
      List valueList=getSelectMemberValueList();
      if (valueList == null || valueList.size() == 0) {
        MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      }
 else {
        SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
        dialog.setSelectedValueList(valueList);
        if (dialog.open() == IDialogConstants.OK_ID) {
          newValue=dialog.getSelectedExprValue();
        }
      }
    }
 else     if (value.equals(actions[1])) {
      ExpressionBuilder dialog=new ExpressionBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(String)getValue());
      dialog.setExpressionProvier(provider);
      if (dialog.open() == IDialogConstants.OK_ID) {
        newValue=dialog.getResult();
      }
    }
 else     if (selectionIndex > 3) {
      newValue=ExpressionUtil.createJSParameterExpression(value);
    }
    if (newValue != null) {
      setValue(newValue);
    }
    expressionText.setFocus();
  }
}","public void widgetSelected(SelectionEvent e){
  refreshList();
  Rectangle textBounds=expressionText.getBounds();
  Point pt=expressionText.toDisplay(textBounds.x,textBounds.y);
  Rectangle rect=new Rectangle(pt.x,pt.y,expressionText.getParent().getBounds().width,textBounds.height);
  PopupSelectionList popup=new PopupSelectionList(expressionText.getParent().getShell());
  popup.setItems(popupItems);
  String value=popup.open(rect);
  int selectionIndex=popup.getSelectionIndex();
  if (value != null) {
    String newValue=null;
    if (value.equals((actions[0]))) {
      List valueList=getSelectMemberValueList();
      if (valueList == null || valueList.size() == 0) {
        MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
      }
 else {
        SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
        dialog.setSelectedValueList(valueList);
        if (dialog.open() == IDialogConstants.OK_ID) {
          newValue=dialog.getSelectedExprValue();
        }
      }
    }
 else     if (selectionIndex > 3) {
      newValue=ExpressionUtil.createJSParameterExpression(value);
    }
    if (newValue != null) {
      setValue(newValue);
    }
    expressionText.setFocus();
  }
}",0.8304015930965815
75391,"protected Control createControl(Composite parent){
  Composite editorComposite=new Composite(parent,getStyle());
  editorComposite.setLayout(new ExpressionCellLayout());
  expressionText=new Text(editorComposite,SWT.NONE);
  expressionText.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      keyReleaseOccured(e);
    }
  }
);
  expressionText.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  expressionText.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_ESCAPE || e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
      }
    }
  }
);
  expressionText.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      ExpressionValueCellEditor.this.focusLost();
    }
  }
);
  btnPopup=new Button(editorComposite,SWT.ARROW | SWT.DOWN);
  btnPopup.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      refreshList();
      Rectangle textBounds=expressionText.getBounds();
      Point pt=expressionText.toDisplay(textBounds.x,textBounds.y);
      Rectangle rect=new Rectangle(pt.x,pt.y,expressionText.getParent().getBounds().width,textBounds.height);
      PopupSelectionList popup=new PopupSelectionList(expressionText.getParent().getShell());
      popup.setItems(popupItems);
      String value=popup.open(rect);
      int selectionIndex=popup.getSelectionIndex();
      if (value != null) {
        String newValue=null;
        if (value.equals((actions[0]))) {
          List valueList=getSelectMemberValueList();
          if (valueList == null || valueList.size() == 0) {
            MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
 else {
            SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
            dialog.setSelectedValueList(valueList);
            if (dialog.open() == IDialogConstants.OK_ID) {
              newValue=dialog.getSelectedExprValue();
            }
          }
        }
 else         if (value.equals(actions[1])) {
          ExpressionBuilder dialog=new ExpressionBuilder(PlatformUI.getWorkbench().getDisplay().getActiveShell(),(String)getValue());
          dialog.setExpressionProvier(provider);
          if (dialog.open() == IDialogConstants.OK_ID) {
            newValue=dialog.getResult();
          }
        }
 else         if (selectionIndex > 3) {
          newValue=ExpressionUtil.createJSParameterExpression(value);
        }
        if (newValue != null) {
          setValue(newValue);
        }
        expressionText.setFocus();
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  setValueValid(true);
  return editorComposite;
}","protected Control createControl(Composite parent){
  Composite editorComposite=new Composite(parent,getStyle());
  editorComposite.setLayout(new ExpressionCellLayout());
  expressionText=new Text(editorComposite,SWT.NONE);
  expressionText.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      keyReleaseOccured(e);
    }
  }
);
  expressionText.addSelectionListener(new SelectionAdapter(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  expressionText.addTraverseListener(new TraverseListener(){
    public void keyTraversed(    TraverseEvent e){
      if (e.detail == SWT.TRAVERSE_ESCAPE || e.detail == SWT.TRAVERSE_RETURN) {
        e.doit=false;
      }
    }
  }
);
  expressionText.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      ExpressionValueCellEditor.this.focusLost();
    }
  }
);
  btnPopup=new Button(editorComposite,SWT.ARROW | SWT.DOWN);
  btnPopup.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      refreshList();
      Rectangle textBounds=expressionText.getBounds();
      Point pt=expressionText.toDisplay(textBounds.x,textBounds.y);
      Rectangle rect=new Rectangle(pt.x,pt.y,expressionText.getParent().getBounds().width,textBounds.height);
      PopupSelectionList popup=new PopupSelectionList(expressionText.getParent().getShell());
      popup.setItems(popupItems);
      String value=popup.open(rect);
      int selectionIndex=popup.getSelectionIndex();
      if (value != null) {
        String newValue=null;
        if (value.equals((actions[0]))) {
          List valueList=getSelectMemberValueList();
          if (valueList == null || valueList.size() == 0) {
            MessageDialog.openInformation(null,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
 else {
            SelectValueDialog dialog=new SelectValueDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""));
            dialog.setSelectedValueList(valueList);
            if (dialog.open() == IDialogConstants.OK_ID) {
              newValue=dialog.getSelectedExprValue();
            }
          }
        }
 else         if (selectionIndex > 3) {
          newValue=ExpressionUtil.createJSParameterExpression(value);
        }
        if (newValue != null) {
          setValue(newValue);
        }
        expressionText.setFocus();
      }
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  setValueValid(true);
  return editorComposite;
}",0.9022421524663676
75392,"private void createChoicePart(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  composite.setLayout(new GridLayout(3,true));
  new Label(composite,SWT.NONE).setText(LABEL_SELECT_DATA_SET_MODE);
  singleDataSet=new Button(composite,SWT.RADIO);
  singleDataSet.setText(RADIO_SINGLE);
  singleDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshValueTable();
      updateButtons();
    }
  }
);
  multiDataSet=new Button(composite,SWT.RADIO);
  multiDataSet.setText(RADIO_MULTIPLE);
  multiDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshValueTable();
      updateButtons();
    }
  }
);
}","private void createChoicePart(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  composite.setLayout(new GridLayout(2,true));
  Label dataSetModeLabel=new Label(composite,SWT.NONE);
  dataSetModeLabel.setText(LABEL_SELECT_DATA_SET_MODE);
  GridData gd=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  gd.verticalSpan=2;
  dataSetModeLabel.setLayoutData(gd);
  singleDataSet=new Button(composite,SWT.RADIO);
  singleDataSet.setText(RADIO_SINGLE);
  singleDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshValueTable();
      updateButtons();
    }
  }
);
  multiDataSet=new Button(composite,SWT.RADIO);
  multiDataSet.setText(RADIO_MULTIPLE);
  multiDataSet.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      refreshValueTable();
      updateButtons();
    }
  }
);
}",0.9072737368128816
75393,"/** 
 * Tests open design method. Test cases: <ul> <li>Case1:Open design with null ULocale. <li>Case2:Open design with a given ULocale. <li>Case3:Open design with a given design file. <li>Case4:Retrieve the session from the opened designs. <li>Case5:Check the number of designs which are kept in the session's design list. <li>Case6:Drop a design then check the size of the design list. </ul>
 * @throws DesignFileException
 */
public void testOpenDesign() throws DesignFileException {
  ULocale defaultULocale=ULocale.getDefault();
  ULocale.setDefault(ULocale.CHINA);
  DesignSession session=new DesignSession(null);
  assertEquals(ULocale.CHINA,CoreTestUtil.getSessionLocale(session));
  session=new DesignSession(ULocale.ENGLISH);
  assertEquals(ULocale.ENGLISH,CoreTestUtil.getSessionLocale(session));
  ReportDesign design=session.createDesign();
  assertNotNull(design);
  assertEquals(session,CoreTestUtil.getDesignSession(design));
  design=session.openDesign(getResource(""String_Node_Str"").toString());
  assertEquals(session,CoreTestUtil.getDesignSession(design));
  design=session.openDesign(getResource(""String_Node_Str"").toString());
  assertEquals(3,CoreTestUtil.getDesigns(session).size());
  session.drop(design);
  assertEquals(2,CoreTestUtil.getDesigns(session).size());
  design=session.createDesign(""String_Node_Str"");
  assertEquals(3,CoreTestUtil.getDesigns(session).size());
  ULocale.setDefault(defaultULocale);
}","/** 
 * Tests open design method. Test cases: <ul> <li>Case1:Open design with null ULocale. <li>Case2:Open design with a given ULocale. <li>Case3:Open design with a given design file. <li>Case4:Retrieve the session from the opened designs. <li>Case5:Check the number of designs which are kept in the session's design list. <li>Case6:Drop a design then check the size of the design list. </ul>
 * @throws DesignFileException
 */
public void testOpenDesign() throws DesignFileException {
  ULocale defaultULocale=ULocale.getDefault();
  ULocale.setDefault(ULocale.CHINESE);
  DesignSession session=new DesignSession(null);
  assertEquals(ULocale.CHINESE,CoreTestUtil.getSessionLocale(session));
  session=new DesignSession(ULocale.ENGLISH);
  assertEquals(ULocale.ENGLISH,CoreTestUtil.getSessionLocale(session));
  ReportDesign design=session.createDesign();
  assertNotNull(design);
  assertEquals(session,CoreTestUtil.getDesignSession(design));
  design=session.openDesign(getResource(""String_Node_Str"").toString());
  assertEquals(session,CoreTestUtil.getDesignSession(design));
  design=session.openDesign(getResource(""String_Node_Str"").toString());
  assertEquals(3,CoreTestUtil.getDesigns(session).size());
  session.drop(design);
  assertEquals(2,CoreTestUtil.getDesigns(session).size());
  design=session.createDesign(""String_Node_Str"");
  assertEquals(3,CoreTestUtil.getDesigns(session).size());
  ULocale.setDefault(defaultULocale);
}",0.9972222222222222
75394,"/** 
 * Tests set�aa� mthods. Test cases: <ul> <li>Case1:Get the default RGB and units value. <li>Case2:Set correct new value for RGB and units. <li>Case3:Set incorrect new default value for RGB and units. Exception expected. <li>Case4:Set correct default value for dimension type property.Get the value. <li>Case5:Set incorrect default value for it. Exception expected. </ul>
 * @throws PropertyValueException
 */
public void testSetValue() throws PropertyValueException {
  DesignSession session=new DesignSession(null);
  assertEquals(3,session.getColorFormat());
  session.setColorFormat(2);
  assertEquals(2,session.getColorFormat());
  try {
    session.setColorFormat(999999);
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,e.getErrorCode());
  }
  assertEquals(2,session.getColorFormat());
  assertEquals(""String_Node_Str"",session.getUnits());
  session.setUnits(""String_Node_Str"");
  assertEquals(""String_Node_Str"",session.getUnits());
  try {
    session.setUnits(""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,e.getErrorCode());
  }
  assertEquals(""String_Node_Str"",session.getUnits());
  assertNull(session.getDefaultValue(IStyleModel.FONT_SIZE_PROP));
  session.setDefaultValue(IStyleModel.FONT_SIZE_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",((DimensionValue)session.getDefaultValue(IStyleModel.FONT_SIZE_PROP)).toString());
  try {
    session.setDefaultValue(IStyleModel.FONT_SIZE_PROP,""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException pve) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,pve.getErrorCode());
  }
  session.setDefaultValue(IStyleModel.FONT_SIZE_PROP,null);
}","/** 
 * Tests setValue methods. Test cases: <ul> <li>Case1:Get the default RGB and units value. <li>Case2:Set correct new value for RGB and units. <li>Case3:Set incorrect new default value for RGB and units. Exception expected. <li>Case4:Set correct default value for dimension type property.Get the value. <li>Case5:Set incorrect default value for it. Exception expected. </ul>
 * @throws PropertyValueException
 */
public void testSetValue() throws PropertyValueException {
  DesignSession session=new DesignSession(null);
  assertEquals(3,session.getColorFormat());
  session.setColorFormat(2);
  assertEquals(2,session.getColorFormat());
  try {
    session.setColorFormat(999999);
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,e.getErrorCode());
  }
  assertEquals(2,session.getColorFormat());
  assertEquals(""String_Node_Str"",session.getUnits());
  session.setUnits(""String_Node_Str"");
  assertEquals(""String_Node_Str"",session.getUnits());
  try {
    session.setUnits(""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException e) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,e.getErrorCode());
  }
  assertEquals(""String_Node_Str"",session.getUnits());
  assertNull(session.getDefaultValue(IStyleModel.FONT_SIZE_PROP));
  session.setDefaultValue(IStyleModel.FONT_SIZE_PROP,""String_Node_Str"");
  assertEquals(""String_Node_Str"",((DimensionValue)session.getDefaultValue(IStyleModel.FONT_SIZE_PROP)).toString());
  try {
    session.setDefaultValue(IStyleModel.FONT_SIZE_PROP,""String_Node_Str"");
    fail();
  }
 catch (  PropertyValueException pve) {
    assertEquals(PropertyValueException.DESIGN_EXCEPTION_INVALID_VALUE,pve.getErrorCode());
  }
  session.setDefaultValue(IStyleModel.FONT_SIZE_PROP,null);
}",0.997263273125342
75395,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer) throws IOException, BirtException, DataException {
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      factTableKey[i]=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            if (isAttribute(dimensions[i],joinCondition.getLevelName(),joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],joinCondition.getLevelName()),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle),this.toStringArray(measureNames),null);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer) throws IOException, BirtException, DataException {
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      factTableKey[i]=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle),this.toStringArray(measureNames),null);
}",0.9796327212020032
75396,"public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(5,15));
  IDescriptorProvider dropProvider=new ComboPropertyDescriptorProvider(CellHandle.DROP_PROP,ReportDesignConstants.CELL_ELEMENT);
  IDescriptorProvider backgroundProvider=new ColorPropertyDescriptorProvider(StyleHandle.BACKGROUND_COLOR_PROP,ReportDesignConstants.STYLE_ELEMENT);
  IDescriptorProvider vAlignProvider=new ComboPropertyDescriptorProvider(StyleHandle.VERTICAL_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT);
  IDescriptorProvider hAlignProvider=new ComboPropertyDescriptorProvider(StyleHandle.TEXT_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT);
  IDescriptorProvider styleProvider=new SimpleComboPropertyDescriptorProvider(ReportItemHandle.STYLE_PROP,ReportDesignConstants.CELL_ELEMENT);
  ComboSection dropSection=new ComboSection(dropProvider.getDisplayName(),container,true);
  ColorSection backgroundSection=new ColorSection(backgroundProvider.getDisplayName(),container,true);
  ComboSection vAlignSection=new ComboSection(vAlignProvider.getDisplayName(),container,true);
  ComboSection hAlignSection=new ComboSection(hAlignProvider.getDisplayName(),container,true);
  Section seperatorSection=new SeperatorSection(container,SWT.HORIZONTAL);
  SimpleComboSection styleSection=new SimpleComboSection(styleProvider.getDisplayName(),container,true);
  dropSection.setProvider(dropProvider);
  backgroundSection.setProvider(backgroundProvider);
  vAlignSection.setProvider(vAlignProvider);
  hAlignSection.setProvider(hAlignProvider);
  styleSection.setProvider(styleProvider);
  dropSection.setWidth(150);
  backgroundSection.setWidth(150);
  vAlignSection.setWidth(150);
  hAlignSection.setWidth(150);
  styleSection.setWidth(150);
  dropSection.setLayoutNum(2);
  backgroundSection.setLayoutNum(3);
  vAlignSection.setLayoutNum(2);
  hAlignSection.setLayoutNum(3);
  styleSection.setLayoutNum(5);
  dropSection.setGridPlaceholder(0,true);
  backgroundSection.setGridPlaceholder(1,true);
  vAlignSection.setGridPlaceholder(0,true);
  hAlignSection.setGridPlaceholder(1,true);
  styleSection.setGridPlaceholder(3,true);
  addSection(PageSectionId.CELL_DROP,dropSection);
  addSection(PageSectionId.CELL_BACKGROUND,backgroundSection);
  addSection(PageSectionId.CELL_VERTICAL_ALIGN,vAlignSection);
  addSection(PageSectionId.CELL_HORIZONTAL_ALIGN,hAlignSection);
  addSection(PageSectionId.CELL_SEPERATOR,seperatorSection);
  addSection(PageSectionId.CELL_STYLE,styleSection);
  createSections();
  layoutSections();
}","public void buildUI(Composite parent){
  super.buildUI(parent);
  container.setLayout(WidgetUtil.createGridLayout(5,15));
  IDescriptorProvider dropProvider=new ComboPropertyDescriptorProvider(CellHandle.DROP_PROP,ReportDesignConstants.CELL_ELEMENT);
  IDescriptorProvider backgroundProvider=new ColorPropertyDescriptorProvider(StyleHandle.BACKGROUND_COLOR_PROP,ReportDesignConstants.STYLE_ELEMENT);
  IDescriptorProvider vAlignProvider=new ComboPropertyDescriptorProvider(StyleHandle.VERTICAL_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT);
  IDescriptorProvider hAlignProvider=new ComboPropertyDescriptorProvider(StyleHandle.TEXT_ALIGN_PROP,ReportDesignConstants.STYLE_ELEMENT);
  IDescriptorProvider styleProvider=new SimpleComboPropertyDescriptorProvider(ReportItemHandle.STYLE_PROP,ReportDesignConstants.CELL_ELEMENT);
  ComboSection dropSection=new ComboSection(dropProvider.getDisplayName(),container,true);
  ColorSection backgroundSection=new ColorSection(backgroundProvider.getDisplayName(),container,true);
  ComboSection vAlignSection=new ComboSection(vAlignProvider.getDisplayName(),container,true);
  ComboSection hAlignSection=new ComboSection(hAlignProvider.getDisplayName(),container,true);
  Section seperatorSection=new SeperatorSection(container,SWT.HORIZONTAL);
  SimpleComboSection styleSection=new SimpleComboSection(styleProvider.getDisplayName(),container,true);
  dropSection.setProvider(dropProvider);
  backgroundSection.setProvider(backgroundProvider);
  vAlignSection.setProvider(vAlignProvider);
  hAlignSection.setProvider(hAlignProvider);
  styleSection.setProvider(styleProvider);
  dropSection.setWidth(200);
  backgroundSection.setWidth(200);
  vAlignSection.setWidth(200);
  hAlignSection.setWidth(200);
  styleSection.setWidth(200);
  dropSection.setLayoutNum(2);
  backgroundSection.setLayoutNum(3);
  vAlignSection.setLayoutNum(2);
  hAlignSection.setLayoutNum(3);
  styleSection.setLayoutNum(5);
  dropSection.setGridPlaceholder(0,true);
  backgroundSection.setGridPlaceholder(1,true);
  vAlignSection.setGridPlaceholder(0,true);
  hAlignSection.setGridPlaceholder(1,true);
  styleSection.setGridPlaceholder(3,true);
  addSection(PageSectionId.CELL_DROP,dropSection);
  addSection(PageSectionId.CELL_BACKGROUND,backgroundSection);
  addSection(PageSectionId.CELL_VERTICAL_ALIGN,vAlignSection);
  addSection(PageSectionId.CELL_HORIZONTAL_ALIGN,hAlignSection);
  addSection(PageSectionId.CELL_SEPERATOR,seperatorSection);
  addSection(PageSectionId.CELL_STYLE,styleSection);
  createSections();
  layoutSections();
}",0.9960876369327074
75397,"public ICategoryProvider getCategoryProvider(Object input){
  CategoryProvider provider=new CategoryProvider(new String[]{CATEGORY_KEY_GENERAL,CATEGORY_KEY_PADDING,CATEGORY_KEY_FONT,CATEGORY_KEY_BORDERS,CATEGORY_KEY_USERPROPERTIES,CATEGORY_KEY_NAMEDEXPRESSIONS,CATEGORY_KEY_ADVANCEPROPERTY},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Class[]{CellPage.class,CellPaddingPage.class,FontPage.class,BordersPage.class,UserPropertiesPage.class,NamedExpressionsPage.class,AdvancePropertyPage.class});
  return provider;
}","public ICategoryProvider getCategoryProvider(Object input){
  CategoryProvider provider=new CategoryProvider(new String[]{CATEGORY_KEY_GENERAL,CATEGORY_KEY_PADDING,CATEGORY_KEY_FONT,CATEGORY_KEY_BORDERS,CATEGORY_KEY_USERPROPERTIES,CATEGORY_KEY_NAMEDEXPRESSIONS,CATEGORY_KEY_ADVANCEPROPERTY},new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new Class[]{CrosstabCellPage.class,CellPaddingPage.class,FontPage.class,BordersPage.class,UserPropertiesPage.class,NamedExpressionsPage.class,AdvancePropertyPage.class});
  return provider;
}",0.9935275080906149
75398,"/** 
 * @param name
 */
ColumnMeta(String name,boolean isLevelKey,IDataProcessor processor){
  this.name=name;
  this.isLevelKey=isLevelKey;
  this.dataProcessor=(processor == null) ? (IDataProcessor)new DummyDataProcessor() : processor;
}","/** 
 * @param name
 */
ColumnMeta(String name,IDataProcessor processor,int type){
  this.name=name;
  this.type=type;
  this.dataProcessor=(processor == null) ? (IDataProcessor)new DummyDataProcessor() : processor;
}",0.7719298245614035
75399,"/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),new ScriptExpression(measure.getMeasureExpression())));
        }
        ColumnMeta meta=new ColumnMeta(measure.getName(),false,null);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param cubeHandle
 * @param query
 * @param resultMetaList
 * @throws DataException 
 * @throws AdapterException 
 */
private void prepareMeasure(TabularCubeHandle cubeHandle,QueryDefinition query,List metaList) throws AdapterException {
  try {
    List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
    for (int i=0; i < measureGroups.size(); i++) {
      MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
      List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
      for (int j=0; j < measures.size(); j++) {
        MeasureHandle measure=(MeasureHandle)measures.get(j);
        String function=measure.getFunction();
        if (query.getGroups().size() > 0) {
          Binding binding=new Binding(measure.getName(),new ScriptExpression(measure.getMeasureExpression()));
          binding.setAggrFunction(DataAdapterUtil.adaptModelAggregationType(function));
          IGroupDefinition group=(IGroupDefinition)query.getGroups().get(query.getGroups().size() - 1);
          binding.addAggregateOn(group.getName());
          query.addBinding(binding);
        }
 else {
          query.addBinding(new Binding(measure.getName(),new ScriptExpression(measure.getMeasureExpression())));
        }
        ColumnMeta meta=new ColumnMeta(measure.getName(),null,ColumnMeta.MEASURE_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(measure.getDataType()));
        metaList.add(meta);
      }
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.9884615384615384
75400,"/** 
 * Constructor.
 * @param columnMetas
 */
ResultMeta(List columnMetas){
  this.columnMetaMap=new HashMap();
  this.indexMap=new HashMap();
  this.nullValueReplacer=new Object[columnMetas.size()];
  for (int i=0; i < columnMetas.size(); i++) {
    ColumnMeta columnMeta=(ColumnMeta)columnMetas.get(i);
    columnMeta.setIndex(i + 1);
    this.columnMetaMap.put(columnMeta.getName(),columnMeta);
    this.indexMap.put(new Integer(i + 1),columnMeta);
    if (columnMeta.isLevelKey()) {
      this.nullValueReplacer[i]=createNullValueReplacer(columnMeta.getType());
    }
  }
}","/** 
 * Constructor.
 * @param columnMetas
 */
ResultMeta(List columnMetas){
  this.columnMetaMap=new HashMap();
  this.indexMap=new HashMap();
  this.nullValueReplacer=new Object[columnMetas.size()];
  for (int i=0; i < columnMetas.size(); i++) {
    ColumnMeta columnMeta=(ColumnMeta)columnMetas.get(i);
    columnMeta.setIndex(i + 1);
    this.columnMetaMap.put(columnMeta.getName(),columnMeta);
    this.indexMap.put(new Integer(i + 1),columnMeta);
    if (columnMeta.isLevelKey() || columnMeta.isMeasure()) {
      this.nullValueReplacer[i]=createNullValueReplacer(columnMeta.getType());
    }
  }
}",0.9780033840947546
75401,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(level.getName(),true,new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())));
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(level.getName(),true,processor);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()),false,null);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName()))));
      }
      if (level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getDisplayColumnName(level.getName()),false,null);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      query.addBinding(new Binding(level.getName(),new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList) throws AdapterException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new ColumnMeta(level.getName(),new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange())),ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=this.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new ColumnMeta(level.getName(),processor,ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName()))));
      }
      if (level.getDisplayColumnName() != null) {
        ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getDisplayColumnName(level.getName()),null,ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(level.getDisplayColumnName())));
      }
      query.addBinding(new Binding(level.getName(),new ScriptExpression(exprString)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage());
  }
}",0.9835056080932484
75402,"/** 
 * @return
 */
public boolean isLevelKey(){
  return this.isLevelKey;
}","/** 
 * @return
 */
public boolean isLevelKey(){
  return this.type == LEVEL_KEY_TYPE;
}",0.8292682926829268
75403,"/** 
 * @param type
 */
public void setDataType(int type){
  this.type=type;
}","/** 
 * @param type
 */
public void setDataType(int type){
  this.dataType=type;
}",0.975
75404,"/** 
 * @return
 */
public int getType(){
  return this.type;
}","/** 
 * @return
 */
public int getType(){
  return this.dataType;
}",0.9692307692307692
75405,"protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.PREFIX + ""String_Node_Str"");
  getShell().setText(Messages.getString(""String_Node_Str""));
  if (isNew)   this.setTitle(Messages.getString(""String_Node_Str""));
 else   this.setTitle(Messages.getString(""String_Node_Str""));
  this.setMessage(Messages.getString(""String_Node_Str""));
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(80);
  data.heightHint=400;
  contents.setLayoutData(data);
  createChoiceArea(contents);
  dynamicArea=createDynamicArea(contents);
  staticArea=createStaticArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initLevelDialog();
  parent.layout();
  return contents;
}","protected Control createDialogArea(Composite parent){
  UIUtil.bindHelp(parent,IHelpContextIds.LEVEL_PROPERTY_DIALOG);
  getShell().setText(Messages.getString(""String_Node_Str""));
  if (isNew)   this.setTitle(Messages.getString(""String_Node_Str""));
 else   this.setTitle(Messages.getString(""String_Node_Str""));
  this.setMessage(Messages.getString(""String_Node_Str""));
  Composite area=(Composite)super.createDialogArea(parent);
  Composite contents=new Composite(area,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(80);
  data.heightHint=400;
  contents.setLayoutData(data);
  createChoiceArea(contents);
  dynamicArea=createDynamicArea(contents);
  staticArea=createStaticArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initLevelDialog();
  parent.layout();
  return contents;
}",0.9796344647519584
75406,"protected Control createDialogArea(Composite parent){
  createTitleArea(parent);
  Composite contents=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.verticalSpacing=0;
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(70);
  contents.setLayoutData(data);
  createMeasureArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initMeasureDialog();
  return contents;
}","protected Control createDialogArea(Composite parent){
  createTitleArea(parent);
  UIUtil.bindHelp(parent,IHelpContextIds.MEASURE_DIALOG);
  Composite contents=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.verticalSpacing=0;
  layout.marginWidth=20;
  contents.setLayout(layout);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=convertWidthInCharsToPixels(70);
  contents.setLayoutData(data);
  createMeasureArea(contents);
  WidgetUtil.createGridPlaceholder(contents,1,true);
  initMeasureDialog();
  return contents;
}",0.9465930018416208
75407,"protected Control createContents(Composite parent){
  String title=Messages.getString(""String_Node_Str"");
  getShell().setText(title);
  if (showNodeId != null) {
    setDefaultNode(showNodeId);
  }
  Control control=super.createContents(parent);
  Utility.setSystemHelp(control,IHelpConstants.PREFIX + ""String_Node_Str"");
  return control;
}","protected Control createContents(Composite parent){
  String title=Messages.getString(""String_Node_Str"");
  getShell().setText(title);
  if (showNodeId != null) {
    setDefaultNode(showNodeId);
  }
  Control control=super.createContents(parent);
  UIUtil.bindHelp(control,IHelpContextIds.CUBE_BUILDER_DIALOG);
  return control;
}",0.8779761904761905
75408,"private void initValueArea(){
  String controlType=getSelectedControlType();
  if (isStatic()) {
    if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType)) {
      if (isValidValue(defaultValue) != null) {
        defaultValue=null;
        defaultValueChooser.select(0);
      }
 else {
        if (Boolean.valueOf(defaultValue).booleanValue()) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.select(2);
        }
      }
    }
 else     if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(controlType)) {
      if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        if (defaultValue == null) {
          defaultValueChooser.select(0);
        }
 else         if (defaultValue.equals(""String_Node_Str"")) {
          defaultValueChooser.select(1);
        }
 else         if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
 else       if (defaultValue != null) {
        if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
    }
 else     if (PARAM_CONTROL_COMBO.equals(controlType) || PARAM_CONTROL_LIST.equals(controlType)) {
      defaultValue=null;
      initSorttingArea();
    }
    refreshValueTable();
  }
 else {
    refreshDataSets();
    if (inputParameter.getDataSetName() != null) {
      dataSetChooser.setText(inputParameter.getDataSetName());
    }
    refreshColumns(false);
    String columnName=getColumnName(inputParameter.getValueExpr());
    if (columnName != null) {
      columnChooser.setText(columnName);
    }
    columnName=getColumnName(inputParameter.getLabelExpr());
    if (columnName != null) {
      displayTextChooser.setText(columnName);
    }
    if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
      if (defaultValue == null) {
        defaultValueChooser.select(1);
      }
 else       if (defaultValue.equals(""String_Node_Str"")) {
        defaultValueChooser.select(2);
      }
 else {
        defaultValueChooser.setText(defaultValue);
      }
    }
 else     if (defaultValue != null) {
      defaultValueChooser.setText(defaultValue);
    }
    initSorttingArea();
  }
  updateMessageLine();
}","private void initValueArea(){
  String controlType=getSelectedControlType();
  if (isStatic()) {
    if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType)) {
      if (isValidValue(defaultValue) != null) {
        defaultValue=null;
        defaultValueChooser.select(0);
      }
 else {
        if (Boolean.valueOf(defaultValue).booleanValue()) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.select(2);
        }
      }
    }
 else     if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(controlType)) {
      if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        if (defaultValue == null) {
          defaultValueChooser.select(0);
        }
 else         if (defaultValue.equals(""String_Node_Str"")) {
          defaultValueChooser.select(1);
        }
 else         if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
 else       if (defaultValue != null) {
        if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
    }
 else     if (PARAM_CONTROL_COMBO.equals(controlType) || PARAM_CONTROL_LIST.equals(controlType)) {
      initSorttingArea();
      if (lastControlType != null && lastControlType.equals(DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX)) {
        defaultValue=null;
      }
    }
    refreshValueTable();
  }
 else {
    refreshDataSets();
    if (inputParameter.getDataSetName() != null) {
      dataSetChooser.setText(inputParameter.getDataSetName());
    }
    refreshColumns(false);
    String columnName=getColumnName(inputParameter.getValueExpr());
    if (columnName != null) {
      columnChooser.setText(columnName);
    }
    columnName=getColumnName(inputParameter.getLabelExpr());
    if (columnName != null) {
      displayTextChooser.setText(columnName);
    }
    if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
      if (defaultValue == null) {
        defaultValueChooser.select(1);
      }
 else       if (defaultValue.equals(""String_Node_Str"")) {
        defaultValueChooser.select(2);
      }
 else {
        defaultValueChooser.setText(defaultValue);
      }
    }
 else     if (defaultValue != null) {
      defaultValueChooser.setText(defaultValue);
    }
    initSorttingArea();
  }
  updateMessageLine();
}",0.7659157688540646
75409,"/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo[] borders){
  ArrayList dbl=null;
  ArrayList solid=null;
  ArrayList dashed=null;
  ArrayList dotted=null;
  for (int i=0; i < borders.length; i++) {
    if (IStyle.DOUBLE_VALUE.equals(borders[i].borderStyle)) {
      if (null == dbl) {
        dbl=new ArrayList();
      }
      dbl.add(borders[i]);
    }
 else     if (IStyle.DASHED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dashed) {
        dashed=new ArrayList();
      }
      dashed.add(borders[i]);
    }
 else     if (IStyle.DOTTED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dotted) {
        dotted=new ArrayList();
      }
      dotted.add(borders[i]);
    }
 else {
      if (null == solid) {
        solid=new ArrayList();
      }
      solid.add(borders[i]);
    }
  }
  if (null != dotted) {
    for (Iterator it=dotted.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dashed) {
    for (Iterator it=dashed.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != solid) {
    for (Iterator it=solid.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dbl) {
    for (Iterator it=dbl.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      int borderWidth=bi.borderWidth;
      int outerBorderWidth=borderWidth / 4;
      int innerBorderWidth=borderWidth / 4;
      int startX=bi.startX;
      int startY=bi.startY;
      int endX=bi.endX;
      int endY=bi.endY;
      Color borderColor=bi.borderColor;
switch (bi.borderType) {
case BorderInfo.TOP_BORDER:
        pageGraphic.drawLine(startX,startY - borderWidth / 2 + outerBorderWidth / 2,endX,endY - borderWidth / 2 + outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
      pageGraphic.drawLine(startX + 3 * borders[BorderInfo.LEFT_BORDER].borderWidth / 4,startY + borderWidth / 2 - innerBorderWidth / 2,endX - 3 * borders[BorderInfo.RIGHT_BORDER].borderWidth / 4,endY + borderWidth / 2 - innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
    break;
case BorderInfo.RIGHT_BORDER:
  pageGraphic.drawLine(startX + borderWidth / 2 - outerBorderWidth / 2,startY,endX + borderWidth / 2 - outerBorderWidth / 2,endY,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + innerBorderWidth / 2,startY + 3 * borders[BorderInfo.TOP_BORDER].borderWidth / 4,endX - borderWidth / 2 + innerBorderWidth / 2,endY - 3 * borders[BorderInfo.BOTTOM_BORDER].borderWidth / 4,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.BOTTOM_BORDER:
pageGraphic.drawLine(startX,startY + borderWidth / 2 - outerBorderWidth / 2,endX,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + 3 * borders[BorderInfo.LEFT_BORDER].borderWidth / 4,startY - borderWidth / 2 + innerBorderWidth / 2,endX - 3 * borders[BorderInfo.RIGHT_BORDER].borderWidth / 4,endY - borderWidth / 2 + innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.LEFT_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY,endX - borderWidth / 2 + outerBorderWidth / 2,endY,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + borderWidth / 2 - innerBorderWidth / 2,startY + 3 * borders[BorderInfo.TOP_BORDER].borderWidth / 4,endX + borderWidth / 2 - innerBorderWidth / 2,endY - 3 * borders[BorderInfo.BOTTOM_BORDER].borderWidth / 4,innerBorderWidth,borderColor,""String_Node_Str"");
break;
}
}
}
}","/** 
 * Draws the borders of a container.
 * @param borders the border info
 */
private void drawBorder(BorderInfo[] borders){
  ArrayList dbl=null;
  ArrayList solid=null;
  ArrayList dashed=null;
  ArrayList dotted=null;
  for (int i=0; i < borders.length; i++) {
    if (IStyle.DOUBLE_VALUE.equals(borders[i].borderStyle)) {
      if (null == dbl) {
        dbl=new ArrayList();
      }
      dbl.add(borders[i]);
    }
 else     if (IStyle.DASHED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dashed) {
        dashed=new ArrayList();
      }
      dashed.add(borders[i]);
    }
 else     if (IStyle.DOTTED_VALUE.equals(borders[i].borderStyle)) {
      if (null == dotted) {
        dotted=new ArrayList();
      }
      dotted.add(borders[i]);
    }
 else {
      if (null == solid) {
        solid=new ArrayList();
      }
      solid.add(borders[i]);
    }
  }
  if (null != dotted) {
    for (Iterator it=dotted.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dashed) {
    for (Iterator it=dashed.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != solid) {
    for (Iterator it=solid.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      pageGraphic.drawLine(bi.startX,bi.startY,bi.endX,bi.endY,bi.borderWidth,bi.borderColor,""String_Node_Str"");
    }
  }
  if (null != dbl) {
    for (Iterator it=dbl.iterator(); it.hasNext(); ) {
      BorderInfo bi=(BorderInfo)it.next();
      int borderWidth=bi.borderWidth;
      int outerBorderWidth=borderWidth / 4;
      int innerBorderWidth=borderWidth / 4;
      int startX=bi.startX;
      int startY=bi.startY;
      int endX=bi.endX;
      int endY=bi.endY;
      Color borderColor=bi.borderColor;
switch (bi.borderType) {
case BorderInfo.TOP_BORDER:
        pageGraphic.drawLine(startX,startY - borderWidth / 2 + outerBorderWidth / 2,endX,endY - borderWidth / 2 + outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
      pageGraphic.drawLine(startX,startY + borderWidth / 2 - innerBorderWidth / 2,endX,endY + borderWidth / 2 - innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
    break;
case BorderInfo.RIGHT_BORDER:
  pageGraphic.drawLine(startX + borderWidth / 2 - outerBorderWidth / 2,startY,endX + borderWidth / 2 - outerBorderWidth / 2,endY,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX - borderWidth / 2 + innerBorderWidth / 2,startY,endX - borderWidth / 2 + innerBorderWidth / 2,endY,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.BOTTOM_BORDER:
pageGraphic.drawLine(startX,startY + borderWidth / 2 - outerBorderWidth / 2,endX,endY + borderWidth / 2 - outerBorderWidth / 2,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX,startY - borderWidth / 2 + innerBorderWidth / 2,endX,endY - borderWidth / 2 + innerBorderWidth / 2,innerBorderWidth,borderColor,""String_Node_Str"");
break;
case BorderInfo.LEFT_BORDER:
pageGraphic.drawLine(startX - borderWidth / 2 + outerBorderWidth / 2,startY,endX - borderWidth / 2 + outerBorderWidth / 2,endY,outerBorderWidth,borderColor,""String_Node_Str"");
pageGraphic.drawLine(startX + borderWidth / 2 - innerBorderWidth / 2,startY,endX + borderWidth / 2 - innerBorderWidth / 2,endY,innerBorderWidth,borderColor,""String_Node_Str"");
break;
}
}
}
}",0.7861799217731421
75410,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer) throws IOException, BirtException, DataException {
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle),this.toStringArray(measureNames),null);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer) throws IOException, BirtException, DataException {
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      for (int j=0; j < keyNames.length; j++) {
        keyNames[j]=dimensions[i].getName() + ""String_Node_Str"" + keyNames[j];
      }
      factTableKey[i]=keyNames;
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle),this.toStringArray(measureNames),null);
}",0.970873786407767
75411,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer) throws IOException, BirtException, DataException {
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle);
  String[][] keyColumnNames=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      keyColumnNames[i]=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List keys=new ArrayList();
          while (conditionIt.hasNext()) {
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            keys.add(joinCondition.getHierarchyKey());
          }
          keyColumnNames[i]=new String[keys.size()];
          for (int j=0; j < keys.size(); j++) {
            keyColumnNames[i][j]=keys.get(j).toString();
          }
        }
      }
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),keyColumnNames,dimensions,new DataSetIterator(this,cubeHandle),this.toStringArray(measureNames),null);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer) throws IOException, BirtException, DataException {
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet())) {
      factTableKey[i]=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      dimensionKey[i]=factTableKey[i];
    }
 else {
      Iterator it=cubeHandle.joinConditionsIterator();
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hier)) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            if (isAttribute(dimensions[i],joinCondition.getLevelName(),joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],joinCondition.getLevelName()),joinCondition.getHierarchyKey()));
            }
 else {
              dimensionKeys.add(joinCondition.getHierarchyKey());
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
    }
  }
  cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeHandle),this.toStringArray(measureNames),null);
}",0.792147806004619
75412,"public IndexKey findFirst(Level level,Object[] keyValue) throws IOException, DataException {
  return level.getDiskIndex().findFirst(keyValue);
}","public IndexKey findFirst(Level level,Object[] keyValue) throws IOException, DataException {
  DiskIndex index=level.getDiskIndex();
  if (index == null)   return null;
  return index.findFirst(keyValue);
}",0.7863247863247863
75413,"/** 
 * @throws IOException
 * @throws DataException
 */
public void loadFromDisk() throws IOException, DataException {
  openReadDocuemntObject();
  int size=documentObj.readInt();
  levels=new Level[documentObj.readInt()];
  for (int i=0; i < levels.length; i++) {
    String levelName=documentObj.readString();
    String[] keyColName=new String[documentObj.readInt()];
    int[] keyDataType=new int[keyColName.length];
    for (int j=0; j < keyColName.length; j++) {
      keyColName[j]=documentObj.readString();
      keyDataType[j]=documentObj.readInt();
    }
    int attributeNumber=documentObj.readInt();
    String[] attributeColNames=null;
    int[] attributeDataTypes=null;
    if (attributeNumber > 0) {
      attributeColNames=new String[attributeNumber];
      attributeDataTypes=new int[attributeNumber];
      for (int j=0; j < attributeNumber; j++) {
        attributeColNames[j]=documentObj.readString();
        attributeDataTypes[j]=documentObj.readInt();
      }
    }
    levels[i]=new Level(documentManager,new LevelDefinition(levelName,keyColName,attributeColNames),keyDataType,attributeDataTypes,size,DiskIndex.loadIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelName)));
  }
}","/** 
 * @throws IOException
 * @throws DataException
 */
public void loadFromDisk() throws IOException, DataException {
  openReadDocuemntObject();
  int size=documentObj.readInt();
  levels=new Level[documentObj.readInt()];
  for (int i=0; i < levels.length; i++) {
    String levelName=documentObj.readString();
    String[] keyColName=new String[documentObj.readInt()];
    int[] keyDataType=new int[keyColName.length];
    for (int j=0; j < keyColName.length; j++) {
      keyColName[j]=documentObj.readString();
      keyDataType[j]=documentObj.readInt();
    }
    int attributeNumber=documentObj.readInt();
    String[] attributeColNames=null;
    int[] attributeDataTypes=null;
    if (attributeNumber > 0) {
      attributeColNames=new String[attributeNumber];
      attributeDataTypes=new int[attributeNumber];
      for (int j=0; j < attributeNumber; j++) {
        attributeColNames[j]=documentObj.readString();
        attributeDataTypes[j]=documentObj.readInt();
      }
    }
    levels[i]=new Level(documentManager,new LevelDefinition(levelName,keyColName,attributeColNames),keyDataType,attributeDataTypes,size,size == 0 ? null : DiskIndex.loadIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelName)));
  }
}",0.9923232323232324
75414,"/** 
 * @return
 * @throws IOException
 */
public IDiskArray readAllRows() throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  documentObj.seek(0);
  int size=documentObj.readInt();
  offsetDocObj.seek(0);
  documentObj.seek(offsetDocObj.readInt());
  for (int i=0; i < size; i++) {
    resultArray.add(readDimensionRow());
  }
  return resultArray;
}","/** 
 * @return
 * @throws IOException
 */
public IDiskArray readAllRows() throws IOException {
  BufferedStructureArray resultArray=new BufferedStructureArray(DimensionRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  documentObj.seek(0);
  int size=documentObj.readInt();
  if (size == 0)   return resultArray;
  offsetDocObj.seek(0);
  documentObj.seek(offsetDocObj.readInt());
  for (int i=0; i < size; i++) {
    resultArray.add(readDimensionRow());
  }
  return resultArray;
}",0.9576547231270358
75415,"CachedAggregationResultSet(DataInputStream inputStream,int length,DimLevel[] levels,int[] sortTypes,String[][] keyNames,String[][] attributeNames,int[][] keyDataTypes,int[][] attributeDataTypes,String[] aggregationNames,int[] aggregationDataType) throws IOException {
  Object[] params={inputStream,new Integer(length),levels,sortTypes,keyNames,attributeNames,keyDataTypes,attributeDataTypes,aggregationNames,aggregationDataType};
  logger.entering(CachedAggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.inputStream=inputStream;
  this.currentPosition=0;
  this.length=length;
  this.levels=levels;
  this.sortType=sortTypes;
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.keyDataTypes=keyDataTypes;
  this.attributeDataTypes=attributeDataTypes;
  this.aggregationDataType=aggregationDataType;
  this.aggregationResultNameMap=new HashMap();
  if (aggregationNames != null) {
    for (int i=0; i < aggregationNames.length; i++) {
      aggregationResultNameMap.put(aggregationNames[i],new Integer(i));
    }
  }
  aggregationResultRow=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  seek(0);
  logger.exiting(CachedAggregationResultSet.class.getName(),""String_Node_Str"");
}","CachedAggregationResultSet(DataInputStream inputStream,int length,DimLevel[] levels,int[] sortTypes,String[][] keyNames,String[][] attributeNames,int[][] keyDataTypes,int[][] attributeDataTypes,String[] aggregationNames,int[] aggregationDataType) throws IOException {
  Object[] params={inputStream,new Integer(length),levels,sortTypes,keyNames,attributeNames,keyDataTypes,attributeDataTypes,aggregationNames,aggregationDataType};
  logger.entering(CachedAggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.inputStream=inputStream;
  this.currentPosition=0;
  this.length=length;
  this.levels=levels;
  this.sortType=sortTypes;
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.keyDataTypes=keyDataTypes;
  this.attributeDataTypes=attributeDataTypes;
  this.aggregationDataType=aggregationDataType;
  this.aggregationResultNameMap=new HashMap();
  if (aggregationNames != null) {
    for (int i=0; i < aggregationNames.length; i++) {
      aggregationResultNameMap.put(aggregationNames[i],new Integer(i));
    }
  }
  aggregationResultRow=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  if (this.length > 0)   seek(0);
  logger.exiting(CachedAggregationResultSet.class.getName(),""String_Node_Str"");
}",0.9909697683549272
75416,"/** 
 * @param level
 * @param filter
 * @return
 * @throws IOException
 * @throws DataException
 */
private static BaseDiskSortedStack find(Level level,ISelection[] filter) throws IOException, DataException {
  IDiskArray indexKeyArray=level.getDiskIndex().find(filter);
  PrimitiveDiskSortedStack resultStack=new PrimitiveDiskSortedStack(Constants.LIST_BUFFER_SIZE,true,true);
  for (int i=0; i < indexKeyArray.size(); i++) {
    IndexKey key=(IndexKey)indexKeyArray.get(i);
    resultStack.push(new Integer(key.getDimensionPos()));
  }
  return resultStack;
}","/** 
 * @param level
 * @param filter
 * @return
 * @throws IOException
 * @throws DataException
 */
private static BaseDiskSortedStack find(Level level,ISelection[] filter) throws IOException, DataException {
  IDiskArray indexKeyArray=level.getDiskIndex().find(filter);
  PrimitiveDiskSortedStack resultStack=new PrimitiveDiskSortedStack(Constants.LIST_BUFFER_SIZE,true,true);
  if (indexKeyArray != null) {
    for (int i=0; i < indexKeyArray.size(); i++) {
      IndexKey key=(IndexKey)indexKeyArray.get(i);
      resultStack.push(new Integer(key.getDimensionPos()));
    }
  }
  return resultStack;
}",0.9631533847472152
75417,"/** 
 * Initialize the resultClass. This method is lightweight.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initializeResultClass(DataEngineImpl dataEngine,Map appContext) throws DataException {
  try {
    IResultMetaData leftMetaData=this.leftQueryResults.getResultMetaData();
    IResultMetaData rightMetaData=this.rightQueryResults.getResultMetaData();
    JointResultMetadata meta=getJointResultMetadata(leftMetaData,rightMetaData);
    resultClass=meta.getResultClass();
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Initialize the resultClass. This method is lightweight.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initializeResultClass(DataEngineImpl dataEngine,Map appContext) throws DataException {
  try {
    IResultMetaData leftMetaData=this.leftResultMetaData;
    IResultMetaData rightMetaData=this.rightResultMetaData;
    JointResultMetadata meta=getJointResultMetadata(leftMetaData,rightMetaData);
    resultClass=meta.getResultClass();
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.5486577181208053
75418,"protected IQuery createOdiQuery() throws DataException {
  setCurrentDataSet(dataSetDesign);
  populatePreparedQuery();
  initializeResultClass(dataEngine,appContext);
  return new JointDataSetQuery(resultClass);
}","protected IQuery createOdiQuery() throws DataException {
  setCurrentDataSet(dataSetDesign);
  try {
    populatePreparedQuery();
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  initializeResultClass(dataEngine,appContext);
  return new JointDataSetQuery(resultClass);
}",0.84251968503937
75419,"private void populateSeriesTypesList(){
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (series.canParticipateInCombination()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    ;
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel != null && chartModel instanceof ChartWithAxes) {
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    if (xAxis.getAssociatedAxes().size() > 1) {
      Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
      String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
      cbSeriesType.setText(sDisplayName);
    }
  }
}","private void populateSeriesTypesList(){
  cbSeriesType.removeAll();
  Series series=getSeriesDefinitionForProcessing().getDesignTimeSeries();
  if (series.canParticipateInCombination()) {
    populateSeriesTypes(ChartUIExtensionsImpl.instance().getUIChartTypeExtensions(),series,this.orientation);
  }
 else {
    String seriesName=series.getDisplayName();
    ;
    cbSeriesType.add(seriesName);
    cbSeriesType.select(0);
  }
  if (this.chartModel != null && chartModel instanceof ChartWithAxes) {
    Axis xAxis=((Axis)((ChartWithAxes)chartModel).getAxes().get(0));
    if (xAxis.getAssociatedAxes().size() > 1) {
      Axis overlayAxis=(Axis)xAxis.getAssociatedAxes().get(1);
      if (!overlayAxis.getSeriesDefinitions().isEmpty()) {
        String sDisplayName=((SeriesDefinition)overlayAxis.getSeriesDefinitions().get(0)).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
    }
  }
}",0.9526462395543176
75420,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @return result object array
 * @throws IOException
 */
public IResultObject[] readData(InputStream bis,int length) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=dis.readUTF();
 else       if (fieldType.equals(IClob.class))       obs[j]=dis.readUTF();
 else       if (fieldType.equals(IBlob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=new ObjectInputStream(dis);
        try {
          obs[j]=ois.readObject();
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @return result object array
 * @throws IOException
 */
public IResultObject[] readData(InputStream bis,int length) throws IOException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    bis.read(rowDataBytes);
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (fieldType.isAssignableFrom(Date.class))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=new ObjectInputStream(dis);
        try {
          obs[j]=ois.readObject();
        }
 catch (        Exception e) {
        }
        ois.close();
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9876
75421,"/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     dos.writeUTF(fieldValue.toString());
 else     if (fieldType.equals(IClob.class))     dos.writeUTF(fieldValue.toString());
 else     if (fieldType.equals(IBlob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=new ObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}","/** 
 * @param bos
 * @param resultObject
 * @throws IOException
 */
public void writeData(OutputStream bos,IResultObject resultObject) throws IOException {
  byte[] rowsDataBytes;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  for (int j=0; j < columnCount; j++) {
    Object fieldValue=null;
    try {
      fieldValue=resultObject.getFieldValue(j + 1);
    }
 catch (    DataException e) {
    }
    if (fieldValue == null) {
      dos.writeByte(0);
      continue;
    }
 else {
      dos.writeByte(1);
    }
    Class fieldType=typeArray[j];
    if (fieldType.equals(Integer.class))     dos.writeInt(((Integer)fieldValue).intValue());
 else     if (fieldType.equals(Double.class))     dos.writeDouble(((Double)fieldValue).doubleValue());
 else     if (fieldType.equals(BigDecimal.class))     dos.writeUTF(((BigDecimal)fieldValue).toString());
 else     if (Date.class.isAssignableFrom(fieldType))     dos.writeLong(((Date)fieldValue).getTime());
 else     if (fieldType.equals(Boolean.class))     dos.writeBoolean(((Boolean)fieldValue).booleanValue());
 else     if (fieldType.equals(String.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IClob.class))     IOUtil.writeString(dos,fieldValue.toString());
 else     if (fieldType.equals(IBlob.class)) {
      byte[] bytes=(byte[])fieldValue;
      if (bytes == null || bytes.length == 0) {
        IOUtil.writeInt(dos,0);
      }
 else {
        IOUtil.writeInt(dos,bytes.length);
        dos.write((byte[])fieldValue);
      }
    }
 else     if (fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
      if (!(fieldValue instanceof Serializable))       fieldValue=fieldValue.toString();
      ObjectOutputStream oo=new ObjectOutputStream(dos);
      oo.writeObject(fieldValue);
      oo.close();
    }
  }
  dos.flush();
  rowsDataBytes=baos.toByteArray();
  IOUtil.writeInt(bos,rowsDataBytes.length);
  bos.write(rowsDataBytes);
  rowsDataBytes=null;
  dos=null;
  baos=null;
}",0.9832923832923832
75422,"public void close() throws BirtException {
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (state == NOT_STARTED || state == CLOSED)   return;
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache()) {
    while (this.next()) {
    }
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  state=CLOSED;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.940809968847352
75423,"/** 
 * @return
 * @throws DataException
 */
private void populateComputedColumns(List aggCCList) throws DataException {
  if (!psController.needDoOperation(PassStatusController.DATA_SET_COMPUTED_COLUMN_POPULATING))   return;
  if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING)) {
    if (iccState != null) {
      for (int i=0; i < iccState.getCount(); i++) {
        if (iccState.isValueAvailable(i)) {
          for (int k=0; k < this.populator.getQuery().getFetchEvents().size(); k++) {
            if (this.populator.getQuery().getFetchEvents().get(k) instanceof ComputedColumnHelper) {
              ComputedColumnHelper helper=(ComputedColumnHelper)this.populator.getQuery().getFetchEvents().get(k);
              helper.getComputedColumnList().remove(iccState.getComputedColumn(i));
              break;
            }
          }
        }
      }
    }
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
  }
  computedColumnHelper.getComputedColumnList().clear();
  computedColumnHelper.getComputedColumnList().addAll(aggCCList);
  computedColumnHelper.setModel(TransformationConstants.DATA_SET_MODEL);
  iccState.setModel(TransformationConstants.DATA_SET_MODEL);
  if (iccState.getCount() > 0) {
    ComputedColumnCalculator.populateComputedColumns(this.populator,new OdiResultSetWrapper(this.populator.getResultIterator()),iccState,computedColumnHelper,this.session);
  }
  computedColumnHelper.setModel(TransformationConstants.NONE_MODEL);
}","/** 
 * @return
 * @throws DataException
 */
private void populateComputedColumns(List aggCCList) throws DataException {
  if (!psController.needDoOperation(PassStatusController.DATA_SET_COMPUTED_COLUMN_POPULATING))   return;
  if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING)) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
  }
  computedColumnHelper.getComputedColumnList().clear();
  computedColumnHelper.getComputedColumnList().addAll(aggCCList);
  computedColumnHelper.setModel(TransformationConstants.DATA_SET_MODEL);
  iccState.setModel(TransformationConstants.DATA_SET_MODEL);
  if (iccState.getCount() > 0) {
    ComputedColumnCalculator.populateComputedColumns(this.populator,new OdiResultSetWrapper(this.populator.getResultIterator()),iccState,computedColumnHelper,this.session);
  }
  computedColumnHelper.setModel(TransformationConstants.NONE_MODEL);
}",0.7667603372139703
75424,"/** 
 * @throws DataException
 */
private void populateDataSet() throws DataException {
  int originalMaxRows=this.populator.getQuery().getMaxRows();
  boolean changeMaxRows=filterByRow == null ? false : filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size() + filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() > 0;
  if (changeMaxRows)   this.populator.getQuery().setMaxRows(0);
  List aggCCList=prepareComputedColumns(TransformationConstants.DATA_SET_MODEL);
  doDataSetFilter(changeMaxRows);
  populateAggrCCs(this.getAggrComputedColumns(aggCCList,true));
  populateComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  this.populator.getQuery().setMaxRows(originalMaxRows);
}","/** 
 * @throws DataException
 */
private void populateDataSet() throws DataException {
  int originalMaxRows=this.populator.getQuery().getMaxRows();
  boolean changeMaxRows=filterByRow == null ? false : filterByRow.getFilterList(FilterByRow.QUERY_FILTER).size() + filterByRow.getFilterList(FilterByRow.GROUP_FILTER).size() > 0;
  if (changeMaxRows)   this.populator.getQuery().setMaxRows(0);
  List aggCCList=prepareComputedColumns(TransformationConstants.DATA_SET_MODEL);
  populateAggrCCs(this.getAggrComputedColumns(aggCCList,true));
  removeAvailableComputedColumns();
  doDataSetFilter(changeMaxRows);
  populateComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  this.populator.getQuery().setMaxRows(originalMaxRows);
}",0.8862690707350902
75425,"/** 
 * @param nameList
 * @param dataSetCCList
 * @return
 * @throws DataException
 */
private boolean hasAggregation(List nameList,List dataSetCCList) throws DataException {
  try {
    for (int k=0; k < nameList.size(); k++) {
      IComputedColumn column=null;
      for (int i=0; i < dataSetCCList.size(); i++) {
        column=(IComputedColumn)dataSetCCList.get(i);
        if (column.getName() != null && column.getName().equals(nameList.get(k)))         break;
 else         column=null;
      }
      if (column != null) {
        if (ExpressionCompilerUtil.hasAggregationInExpr(column.getExpression())) {
          return true;
        }
 else {
          List referedList=ExpressionUtil.extractColumnExpressions(((IScriptExpression)column.getExpression()).getText());
          List newList=new ArrayList();
          for (int j=0; j < referedList.size(); j++) {
            IColumnBinding binding=(IColumnBinding)referedList.get(j);
            String name=binding.getResultSetColumnName();
            newList.add(name);
          }
          return hasAggregation(newList,dataSetCCList);
        }
      }
 else {
        continue;
      }
    }
    return false;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param nameList
 * @param dataSetCCList
 * @return
 * @throws DataException
 */
private boolean hasAggregation(List nameList,List dataSetCCList) throws DataException {
  try {
    for (int k=0; k < nameList.size(); k++) {
      IComputedColumn column=null;
      for (int i=0; i < dataSetCCList.size(); i++) {
        column=(IComputedColumn)dataSetCCList.get(i);
        if (column.getName() != null && column.getName().equals(nameList.get(k)))         break;
 else         column=null;
      }
      if (column != null) {
        if (ExpressionCompilerUtil.hasAggregationInExpr(column.getExpression()) || column.getAggregateFunction() != null) {
          return true;
        }
 else {
          List referedList=ExpressionUtil.extractColumnExpressions(((IScriptExpression)column.getExpression()).getText());
          List newList=new ArrayList();
          for (int j=0; j < referedList.size(); j++) {
            IColumnBinding binding=(IColumnBinding)referedList.get(j);
            String name=binding.getResultSetColumnName();
            newList.add(name);
          }
          return hasAggregation(newList,dataSetCCList);
        }
      }
 else {
        continue;
      }
    }
    return false;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9838519102008664
75426,"/** 
 * @param dataSetCCList
 * @return
 * @throws DataException 
 */
private void getAvailableComputedList(List refernceNameList,List dataSetCCList,List result) throws DataException {
  try {
    for (int i=0; i < dataSetCCList.size(); i++) {
      IComputedColumn column=(IComputedColumn)dataSetCCList.get(i);
      if (!refernceNameList.contains(column.getName())) {
        continue;
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(column.getExpression())) {
        continue;
      }
 else {
        List referedList=ExpressionUtil.extractColumnExpressions(((IScriptExpression)column.getExpression()).getText());
        if (referedList.size() == 0) {
          result.add(column);
        }
 else {
          List newList=new ArrayList();
          for (int j=0; j < referedList.size(); j++) {
            IColumnBinding binding=(IColumnBinding)referedList.get(j);
            String name=binding.getResultSetColumnName();
            newList.add(name);
          }
          if (!hasAggregation(newList,dataSetCCList)) {
            result.add(column);
          }
        }
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param dataSetCCList
 * @return
 * @throws DataException 
 */
private void getAvailableComputedList(List refernceNameList,List dataSetCCList,List result) throws DataException {
  try {
    for (int i=0; i < dataSetCCList.size(); i++) {
      IComputedColumn column=(IComputedColumn)dataSetCCList.get(i);
      if (!refernceNameList.contains(column.getName())) {
        continue;
      }
      if (ExpressionCompilerUtil.hasAggregationInExpr(column.getExpression()) || column.getAggregateFunction() != null) {
        continue;
      }
 else {
        List referedList=ExpressionUtil.extractColumnExpressions(((IScriptExpression)column.getExpression()).getText());
        if (referedList.size() == 0) {
          result.add(column);
        }
 else {
          List newList=new ArrayList();
          for (int j=0; j < referedList.size(); j++) {
            IColumnBinding binding=(IColumnBinding)referedList.get(j);
            String name=binding.getResultSetColumnName();
            newList.add(name);
          }
          if (!hasAggregation(newList,dataSetCCList)) {
            result.add(column);
          }
        }
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9829379941739492
75427,"public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    defineDataSourceAndDataSet(hierHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    defineDataSourceAndDataSet(hierHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=null;
    if (hierHandle.getDataSet() != cubeHandle.getDataSet())     it=new DataSetIterator(this.session,hierHandle);
 else     it=new DataSetIterator(this.session,cubeHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9482758620689656
75428,"/** 
 * Constructor of the AbstractContent
 * @param content content can't be null
 */
public AbstractContent(IContent content){
  assert(content != null && content instanceof ReportContent);
  this.report=content.getReportContent();
  this.parent=content.getReportContent().getRoot();
  this.cssEngine=((ReportContent)content.getReportContent()).getCSSEngine();
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
  Object ext=content.getExtension(IContent.DOCUMENT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.DOCUMENT_EXTENSION,ext);
  }
}","/** 
 * Constructor of the AbstractContent
 * @param content content can't be null
 */
public AbstractContent(IContent content){
  this.report=content.getReportContent();
  this.parent=content.getReportContent().getRoot();
  this.cssEngine=((ReportContent)content.getReportContent()).getCSSEngine();
  this.name=content.getName();
  this.x=content.getX();
  this.y=content.getY();
  this.width=content.getWidth();
  this.height=content.getHeight();
  this.hyperlink=content.getHyperlinkAction();
  this.bookmark=content.getBookmark();
  this.helpText=content.getHelpText();
  this.inlineStyle=content.getInlineStyle();
  this.generateBy=content.getGenerateBy();
  this.styleClass=content.getStyleClass();
  this.instanceId=content.getInstanceID();
  this.toc=content.getTOC();
  Object ext=content.getExtension(IContent.DOCUMENT_EXTENSION);
  if (ext != null) {
    setExtension(IContent.DOCUMENT_EXTENSION,ext);
  }
}",0.966824644549763
75429,"/** 
 * @param aggrComputedColumns
 * @throws DataException
 */
private void populateAggrCCs(List aggrComputedColumns) throws DataException {
  if (aggrComputedColumns.size() == 0)   return;
  ExpressionCompiler compiler=new ExpressionCompiler();
  compiler.setDataSetMode(true);
  try {
    Context cx=Context.enter();
    List aggrInfos=new ArrayList();
    List aggrNames=new ArrayList();
    for (int i=0; i < aggrComputedColumns.size(); i++) {
      ComputedColumn cc=(ComputedColumn)aggrComputedColumns.get(i);
      List args=cc.getAggregateArgument();
      IBaseExpression[] exprs=null;
      int offset=0;
      if (cc.getExpression() != null) {
        exprs=new IBaseExpression[args.size() + 1];
        offset=1;
        exprs[0]=cc.getExpression();
      }
 else       exprs=new IBaseExpression[args.size()];
      for (int j=offset; j < args.size() + offset; j++) {
        exprs[j]=(IBaseExpression)args.get(j - offset);
      }
      for (int j=0; j < exprs.length; j++) {
        compiler.compile(exprs[j],cx);
      }
      if (cc.getAggregateFilter() != null)       compiler.compile(cc.getAggregateFilter(),cx);
      IAggregation aggrFunction=AggregationFactory.getInstance().getAggregation(cc.getAggregateFunction());
      IAggrInfo aggrInfo=new AggrInfo(cc.getName(),0,aggrFunction,exprs,cc.getAggregateFilter());
      aggrInfos.add(aggrInfo);
      aggrNames.add(cc.getName());
    }
    if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING))     PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    AggregationHelper helper=new AggregationHelper(new AggrDefnManager(aggrInfos),this.populator);
    AggrComputedColumnHelper ccHelper=new AggrComputedColumnHelper(helper,aggrNames);
    this.populator.getQuery().getFetchEvents().add(0,ccHelper);
    PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    this.populator.getQuery().getFetchEvents().remove(0);
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param aggrComputedColumns
 * @throws DataException
 */
private void populateAggrCCs(List aggrComputedColumns) throws DataException {
  if (aggrComputedColumns.size() == 0)   return;
  ExpressionCompiler compiler=new ExpressionCompiler();
  compiler.setDataSetMode(true);
  try {
    Context cx=Context.enter();
    List aggrInfos=new ArrayList();
    List aggrNames=new ArrayList();
    for (int i=0; i < aggrComputedColumns.size(); i++) {
      ComputedColumn cc=(ComputedColumn)aggrComputedColumns.get(i);
      List args=cc.getAggregateArgument();
      IBaseExpression[] exprs=null;
      int offset=0;
      if (cc.getExpression() != null) {
        exprs=new IBaseExpression[args.size() + 1];
        offset=1;
        exprs[0]=cc.getExpression();
      }
 else       exprs=new IBaseExpression[args.size()];
      for (int j=offset; j < args.size() + offset; j++) {
        exprs[j]=(IBaseExpression)args.get(j - offset);
      }
      for (int j=0; j < exprs.length; j++) {
        if (exprs[j] instanceof IScriptExpression) {
          IScriptExpression scriptExpr=(IScriptExpression)exprs[j];
          if (scriptExpr.getText() == null)           continue;
        }
        compiler.compile(exprs[j],cx);
      }
      if (cc.getAggregateFilter() != null)       compiler.compile(cc.getAggregateFilter(),cx);
      IAggregation aggrFunction=AggregationFactory.getInstance().getAggregation(cc.getAggregateFunction());
      IAggrInfo aggrInfo=new AggrInfo(cc.getName(),0,aggrFunction,exprs,cc.getAggregateFilter());
      aggrInfos.add(aggrInfo);
      aggrNames.add(cc.getName());
    }
    if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING))     PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    AggregationHelper helper=new AggregationHelper(new AggrDefnManager(aggrInfos),this.populator);
    AggrComputedColumnHelper ccHelper=new AggrComputedColumnHelper(helper,aggrNames);
    this.populator.getQuery().getFetchEvents().add(0,ccHelper);
    PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    this.populator.getQuery().getFetchEvents().remove(0);
  }
  finally {
    Context.exit();
  }
}",0.954513645906228
75430,"/** 
 * @param expression
 * @return
 * @throws DataException
 */
public boolean hasAggregation(IBaseExpression expression) throws DataException {
  boolean hasAggregate=false;
  MultiPassExpressionCompiler helper=new MultiPassExpressionCompiler(rsPopulator,baseQuery,null,null);
  helper.setDataSetMode(isDataSetMode);
  IBaseExpression baseExpression=expression;
  compileBaseExpression(baseExpression,helper);
  hasAggregate=helper.getAggregateStatus();
  clear();
  return hasAggregate;
}","/** 
 * @param expression
 * @return
 * @throws DataException
 */
public boolean hasAggregation(IBaseExpression expression){
  boolean hasAggregate=false;
  try {
    MultiPassExpressionCompiler helper=new MultiPassExpressionCompiler(rsPopulator,baseQuery,null,null);
    helper.setDataSetMode(isDataSetMode);
    IBaseExpression baseExpression=expression;
    compileBaseExpression(baseExpression,helper);
    hasAggregate=helper.getAggregateStatus();
    clear();
  }
 catch (  DataException ex) {
    clear();
    return false;
  }
  return hasAggregate;
}",0.879162702188392
75431,"/** 
 * @param modelAggrType
 * @return
 * @throws AdapterException
 */
public static String adaptModelAggregationType(String modelAggrType) throws AdapterException {
  if (DesignChoiceConstants.MEASURE_FUNCTION_AVERAGE.equals(modelAggrType))   return IBuildInAggregation.TOTAL_AVE_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_COUNT.equals(modelAggrType))   return IBuildInAggregation.TOTAL_COUNT_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_COUNTDISTINCT.equals(modelAggrType))   return IBuildInAggregation.TOTAL_COUNTDISTINCT_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_FIRST.equals(modelAggrType))   return IBuildInAggregation.TOTAL_FIRST_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_IRR.equals(modelAggrType))   return IBuildInAggregation.TOTAL_IRR_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_LAST.equals(modelAggrType))   return IBuildInAggregation.TOTAL_LAST_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_MAX.equals(modelAggrType))   return IBuildInAggregation.TOTAL_MAX_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_MEDIAN.equals(modelAggrType))   return IBuildInAggregation.TOTAL_MEDIAN_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_MIN.equals(modelAggrType))   return IBuildInAggregation.TOTAL_MIN_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_MIRR.equals(modelAggrType))   return IBuildInAggregation.TOTAL_MIRR_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_MODE.equals(modelAggrType))   return IBuildInAggregation.TOTAL_MODE_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_MOVINGAVE.equals(modelAggrType))   return IBuildInAggregation.TOTAL_MOVINGAVE_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_NPV.equals(modelAggrType))   return IBuildInAggregation.TOTAL_NPV_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_RUNNINGCOUNT.equals(modelAggrType))   return IBuildInAggregation.TOTAL_RUNNINGCOUNT_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_RUNNINGNPV.equals(modelAggrType))   return IBuildInAggregation.TOTAL_RUNNINGNPV_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_RUNNINGSUM.equals(modelAggrType))   return IBuildInAggregation.TOTAL_RUNNINGSUM_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_STDDEV.equals(modelAggrType))   return IBuildInAggregation.TOTAL_STDDEV_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_SUM.equals(modelAggrType))   return IBuildInAggregation.TOTAL_SUM_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_VARIANCE.equals(modelAggrType))   return IBuildInAggregation.TOTAL_VARIANCE_FUNC;
  if (DesignChoiceConstants.MEASURE_FUNCTION_WEIGHTEDAVG.equals(modelAggrType))   return IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC;
  return null;
}","/** 
 * @param modelAggrType
 * @return
 * @throws AdapterException
 */
public static String adaptModelAggregationType(String modelAggrType) throws AdapterException {
  return (String)aggrAdapterMap.get(modelAggrType);
}",0.1320820298922488
75432,"/** 
 * Gets the default units for the design.
 * @return the default units used in the design
 */
public String getUnits(){
  if (!StringUtil.isBlank(units))   return units;
  return (String)getPropertyDefn(UNITS_PROP).getDefault();
}","/** 
 * Gets the default units for the design.
 * @return the default units used in the design
 */
public String getUnits(){
  if (!StringUtil.isBlank(units))   return units;
  String tempUnits=(String)getPropertyDefn(UNITS_PROP).getDefault();
  if (!StringUtil.isBlank(tempUnits))   return tempUnits;
  return getSession().getUnits();
}",0.7972027972027972
75433,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}",0.9964535782486132
75434,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9960729030309132
75435,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.996224954021876
75436,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray);
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray);
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimesionResultSets,facttableRowIterator,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray);
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray);
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimesionResultSets,facttableRowIterator,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9972839334215474
75437,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,12);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,12);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9963127540890612
75438,"private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9962554008641382
75439,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator);
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator);
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9962917181705808
75440,"/** 
 * @param name
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] keyColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,StopSign stopSign) throws IOException, BirtException {
  if (stopSign == null) {
    stopSign=new StopSign();
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(keyColumnNames,dimensions,factTable,measureColumns,stopSign);
  cube.close();
  documentManager.flush();
}","/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,StopSign stopSign) throws IOException, BirtException {
  if (stopSign == null) {
    stopSign=new StopSign();
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,stopSign);
  cube.close();
  documentManager.flush();
}",0.8746130030959752
75441,"/** 
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] keyColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,StopSign stopSign) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTable=factTableConstructor.saveFactTable(name,keyColumnNames,iterator,tDimensions,measureColumnName,stopSign);
  documentObject.close();
  documentManager.flush();
}","/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,StopSign stopSign) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTable=factTableConstructor.saveFactTable(name,factTableJointColumnNames,DimJointColumnNames,iterator,tDimensions,measureColumnName,stopSign);
  documentObject.close();
  documentManager.flush();
}",0.9150561797752808
75442,"/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] keyColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,keyColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  int[][][] columnIndex=getColumnIndex(keyColumnNames,dimensions);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(columnIndex[i],dimensions[i].getAllRows()));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper helper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        String[] args=new String[2];
        args[0]=currentRow.toString();
        args[1]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    helper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].dataType,currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  helper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}","/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,factTableJointColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  int[][][] columnIndex=getColumnIndex(DimJointColumnNames,dimensions);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(columnIndex[i],dimensions[i].getAllRows()));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper helper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        String[] args=new String[2];
        args[0]=currentRow.toString();
        args[1]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    helper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].dataType,currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  helper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}",0.9883399815894446
75443,"/** 
 * Updates wizard title as Edit chart.
 */
public void updateTitleAsEdit(){
  if (getTitle().equals(WIZARD_TITLE_NEW)) {
    setTitle(WIZARD_TITLE_EDIT);
    getDialog().setTitle(WIZARD_TITLE_EDIT);
    getDialog().getShell().setText(WIZARD_TITLE_EDIT);
  }
}","/** 
 * Updates wizard title as Edit chart.
 */
public void updateTitleAsEdit(){
  if (getTitle().equals(WIZARD_TITLE_NEW)) {
    setTitle(WIZARD_TITLE_EDIT);
    getDialog().getShell().setText(WIZARD_TITLE_EDIT);
  }
}",0.906832298136646
75444,"protected void setTitle(String wizardTitle){
  dialog.wizardTitle=wizardTitle;
}","protected void setTitle(String wizardTitle){
  dialog.wizardTitle=wizardTitle;
  if (dialog != null) {
    dialog.setTitle(wizardTitle);
  }
}",0.7207207207207207
75445,"/** 
 * @throws DataException 
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @throws DataException 
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierEdgeType(target,cubeDefn) == ICubeQueryDefinition.COLUMN_EDGE) {
                continue;
              }
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9505290248784672
75446,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    SQLUtility.saveDataSetDesign(design);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
  }
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (this.getControl() == null || this.getControl().isDisposed())   return design;
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    SQLUtility.saveDataSetDesign(design);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
  }
  return design;
}",0.8995215311004785
75447,"/** 
 * Ececute this command 
 */
public void execute(){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  MasterPageHandle page=SessionHandleAdapter.getInstance().getMasterPageHandle();
  String unit=handle.getDefaultUnits();
  double value=MetricUtility.pixelToPixelInch(pDelta);
  if (value < 0.0) {
    value=0.0;
  }
  DimensionValue dim=DimensionUtil.convertTo(value,DesignChoiceConstants.UNITS_IN,unit);
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + page.getDisplayLabel() + ""String_Node_Str""+ propertyName+ ""String_Node_Str""+ dim.toDisplayString());
  }
  try {
    page.setProperty(propertyName,dim);
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}","/** 
 * Ececute this command 
 */
public void execute(){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  MasterPageHandle page=SessionHandleAdapter.getInstance().getMasterPageHandle();
  String unit=handle.getDefaultUnits();
  if (unit == null) {
    unit=DesignChoiceConstants.UNITS_IN;
  }
  double value=MetricUtility.pixelToPixelInch(pDelta);
  if (value < 0.0) {
    value=0.0;
  }
  DimensionValue dim=DimensionUtil.convertTo(value,DesignChoiceConstants.UNITS_IN,unit);
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + page.getDisplayLabel() + ""String_Node_Str""+ propertyName+ ""String_Node_Str""+ dim.toDisplayString());
  }
  try {
    page.setProperty(propertyName,dim);
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}",0.96579887697805
75448,"protected void propertyChange(Map info){
  super.propertyChange(info);
  if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) != null) {
    getFigure().invalidateTree();
    getFigure().revalidate();
    if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) instanceof ReportDesignHandle) {
      getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP)).getLayoutPreference());
    }
  }
  if (info.get(IMasterPageModel.TOP_MARGIN_PROP) != null || info.get(IMasterPageModel.BOTTOM_MARGIN_PROP) != null || info.get(IMasterPageModel.LEFT_MARGIN_PROP) != null || info.get(IMasterPageModel.RIGHT_MARGIN_PROP) != null || info.get(IMasterPageModel.TYPE_PROP) != null || info.get(IMasterPageModel.WIDTH_PROP) != null || info.get(IMasterPageModel.HEIGHT_PROP) != null || info.get(IMasterPageModel.ORIENTATION_PROP) != null) {
    SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
    Iterator iter=slotHandle.iterator();
    SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
    Dimension size=getMasterPageSize(masterPageHandle);
    Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
    ((ReportDesignLayout)getFigure().getLayoutManager()).setInitSize(bounds);
    figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle)));
    figure.setBounds(bounds.getCopy());
  }
}","protected void propertyChange(Map info){
  super.propertyChange(info);
  if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) != null) {
    getFigure().invalidateTree();
    getFigure().revalidate();
    if (info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP) instanceof ReportDesignHandle) {
      getViewer().setProperty(IReportGraphicConstants.REPORT_LAYOUT_PROPERTY,((ReportDesignHandle)info.get(ReportDesignHandle.LAYOUT_PREFERENCE_PROP)).getLayoutPreference());
    }
  }
  if (info.get(IMasterPageModel.TOP_MARGIN_PROP) != null || info.get(IMasterPageModel.BOTTOM_MARGIN_PROP) != null || info.get(IMasterPageModel.LEFT_MARGIN_PROP) != null || info.get(IMasterPageModel.RIGHT_MARGIN_PROP) != null || info.get(IMasterPageModel.TYPE_PROP) != null || info.get(IMasterPageModel.WIDTH_PROP) != null || info.get(IMasterPageModel.HEIGHT_PROP) != null || info.get(IMasterPageModel.ORIENTATION_PROP) != null) {
    SlotHandle slotHandle=((ModuleHandle)getModel()).getMasterPages();
    Iterator iter=slotHandle.iterator();
    SimpleMasterPageHandle masterPageHandle=(SimpleMasterPageHandle)iter.next();
    Dimension size=getMasterPageSize(masterPageHandle);
    Rectangle bounds=new Rectangle(0,0,size.width - 1,size.height - 1);
    ((AbstractPageFlowLayout)getFigure().getLayoutManager()).setInitSize(bounds);
    figure.setBorder(new ReportDesignMarginBorder(getMasterPageInsets(masterPageHandle)));
    figure.setBounds(bounds.getCopy());
  }
}",0.8695652173913043
75449,"protected void setViewProperty(Rectangle caleBounds,Rectangle ownerBounds){
  getOwner().getViewer().setProperty(DeferredGraphicalViewer.REPORT_SIZE,caleBounds);
  getOwner().getViewer().setProperty(DeferredGraphicalViewer.LAYOUT_SIZE,ownerBounds);
}","protected void setViewProperty(Rectangle caleBounds,Rectangle ownerBounds){
  getOwner().getViewer().setProperty(DeferredGraphicalViewer.LAYOUT_SIZE,ownerBounds);
  getOwner().getViewer().setProperty(DeferredGraphicalViewer.RULER_SIZE,new Rectangle(ownerBounds.x,ownerBounds.y,getInitSize().width,ownerBounds.height));
}",0.5754385964912281
75450,"/** 
 * @param parentScope
 * @param queryDefn
 * @param cubeFilter
 * @param cx
 * @throws DataException
 */
protected void initialize(Scriptable parentScope,ICubeQueryDefinition queryDefn,IFilterDefinition cubeFilter,Context cx) throws DataException {
  this.scope=cx.initStandardObjects();
  this.scope.setParentScope(parentScope);
  this.dataObj=new DummyJSAggregationAccessor();
  this.expr=cubeFilter.getExpression();
  this.dimName=OlapExpressionUtil.getReferencedDimensionName(this.expr,queryDefn.getBindings());
  this.dimObj=new DummyJSLevels(this.dimName);
  this.queryDefn=queryDefn;
  if (cubeFilter instanceof ICubeFilterDefinition) {
    this.cubeFilter=(ICubeFilterDefinition)cubeFilter;
  }
 else {
    this.cubeFilter=new CubeFilterDefinition(this.expr);
  }
  this.aggrLevels=populateAggrLevels();
  axisLevels=this.cubeFilter.getAxisQualifierLevels();
  axisValues=this.cubeFilter.getAxisQualifierValues();
  if (axisLevels == null || axisValues == null || axisLevels.length != axisValues.length) {
    this.isAxisFilter=false;
  }
 else {
    for (int i=0; i < axisLevels.length; i++) {
      if (axisLevels[i] == null)       throw new DataException(ResourceConstants.AXIS_LEVEL_CANNOT_BE_NULL);
      if (axisValues[i] == null)       throw new DataException(ResourceConstants.AXIS_VALUE_CANNOT_BE_NULL,axisLevels[i].getName());
    }
  }
  this.isAxisFilter=(axisLevels != null && axisValues != null && axisLevels.length == axisValues.length);
  if (this.dimName != null) {
    DummyJSDimensionObject dimObj=new DummyJSDimensionObject(this.dimObj,this.getTargetDimensionLevelNames());
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDimensionAccessor(this.dimName,dimObj));
  }
  if (this.aggrLevels != null && this.aggrLevels.length > 0) {
    this.scope.put(""String_Node_Str"",this.scope,this.dataObj);
  }
 else {
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDataAccessor(queryDefn.getBindings(),this.scope));
  }
  OLAPExpressionCompiler.compile(cx,this.expr);
}","/** 
 * @param parentScope
 * @param queryDefn
 * @param cubeFilter
 * @param cx
 * @throws DataException
 */
protected void initialize(Scriptable parentScope,ICubeQueryDefinition queryDefn,IFilterDefinition cubeFilter,Context cx) throws DataException {
  this.scope=cx.initStandardObjects();
  this.scope.setParentScope(parentScope);
  this.dataObj=new DummyJSAggregationAccessor();
  this.expr=cubeFilter.getExpression();
  this.dimName=OlapExpressionUtil.getReferencedDimensionName(this.expr,queryDefn.getBindings());
  this.dimObj=new DummyJSLevels(this.dimName);
  this.queryDefn=queryDefn;
  if (cubeFilter instanceof ICubeFilterDefinition) {
    this.cubeFilter=(ICubeFilterDefinition)cubeFilter;
  }
 else {
    this.cubeFilter=new CubeFilterDefinition(this.expr);
  }
  this.aggrLevels=populateAggrLevels();
  axisLevels=this.cubeFilter.getAxisQualifierLevels();
  axisValues=this.cubeFilter.getAxisQualifierValues();
  if (axisLevels == null || axisValues == null || axisLevels.length != axisValues.length) {
    this.isAxisFilter=false;
  }
 else {
    for (int i=0; i < axisLevels.length; i++) {
      if (axisLevels[i] == null)       throw new DataException(ResourceConstants.AXIS_LEVEL_CANNOT_BE_NULL);
      if (axisValues[i] == null)       throw new DataException(ResourceConstants.AXIS_VALUE_CANNOT_BE_NULL,axisLevels[i].getName());
      try {
        axisValues[i]=JavascriptEvalUtil.evaluateRawScript(cx,scope,axisValues[i].toString(),""String_Node_Str"",0);
      }
 catch (      BirtException e) {
        throw DataException.wrap(e);
      }
    }
  }
  this.isAxisFilter=(axisLevels != null && axisValues != null && axisLevels.length == axisValues.length);
  if (this.dimName != null) {
    DummyJSDimensionObject dimObj=new DummyJSDimensionObject(this.dimObj,this.getTargetDimensionLevelNames());
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDimensionAccessor(this.dimName,dimObj));
  }
  if (this.aggrLevels != null && this.aggrLevels.length > 0) {
    this.scope.put(""String_Node_Str"",this.scope,this.dataObj);
  }
 else {
    this.scope.put(""String_Node_Str"",this.scope,new DummyJSDataAccessor(queryDefn.getBindings(),this.scope));
  }
  OLAPExpressionCompiler.compile(cx,this.expr);
}",0.949728581543545
75451,"protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    int childHeight=child.getAllocatedHeight();
    height=Math.max(height,childHeight);
  }
  if (parent.isPageEmpty() && lineHeight > maxAvaHeight) {
    height=Math.max(height,maxAvaHeight);
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}","protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    int childHeight=child.getAllocatedHeight();
    height=Math.max(height,childHeight);
  }
  if (parent.isPageEmpty()) {
    height=Math.min(maxAvaHeight,Math.max(height,lineHeight));
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}",0.8158844765342961
75452,"protected void initialize(){
  super.initialize();
}","protected void initialize(){
  super.initialize();
  maxAvaHeight=getAvaHeight();
}",0.7703703703703704
75453,"public static void unzipArchive(File zipArchive,String tempFolderPath){
  try {
    ZipFile zipFile=new ZipFile(zipArchive);
    Enumeration entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)entries.nextElement();
      if (entry.isDirectory()) {
        String dirName=generateFullPath(tempFolderPath,entry.getName());
        File dir=new File(dirName);
        dir.mkdirs();
      }
 else {
        InputStream in=zipFile.getInputStream(entry);
        File file=new File(generateFullPath(tempFolderPath,entry.getName()));
        File dir=new File(file.getParent());
        if (dir.exists()) {
          assert(dir.isDirectory());
        }
 else {
          dir.mkdirs();
        }
        BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(file));
        int len;
        byte[] buf=new byte[1024 * 5];
        while ((len=in.read(buf)) > 0) {
          out.write(buf,0,len);
        }
        in.close();
        out.close();
      }
    }
    zipFile.close();
  }
 catch (  ZipException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void unzipArchive(File zipArchive,String tempFolderPath){
  try {
    ZipFile zipFile=new ZipFile(zipArchive);
    Enumeration entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=(ZipEntry)entries.nextElement();
      if (entry.isDirectory()) {
        String dirName=generateFullPath(tempFolderPath,entry.getName());
        File dir=new File(dirName);
        dir.mkdirs();
      }
 else {
        InputStream in=null;
        try {
          in=zipFile.getInputStream(entry);
          File file=new File(generateFullPath(tempFolderPath,entry.getName()));
          File dir=new File(file.getParent());
          if (dir.exists()) {
            assert(dir.isDirectory());
          }
 else {
            dir.mkdirs();
          }
          BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(file));
          int len;
          byte[] buf=new byte[1024 * 5];
          try {
            while ((len=in.read(buf)) > 0) {
              out.write(buf,0,len);
            }
          }
  finally {
            out.close();
          }
        }
  finally {
          if (in != null) {
            in.close();
          }
        }
      }
    }
    zipFile.close();
  }
 catch (  ZipException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.8711607499002793
75454,"/** 
 * Utility funtion to write files/directories to a ZipOutputStream. For directories, all the files and subfolders are written recursively.
 */
private static void zipFiles(ZipOutputStream zipOut,File[] files,String tempFolderPath) throws FileNotFoundException, IOException {
  if (files == null)   return;
  for (int i=0; i < files.length; i++) {
    File file=files[i];
    if (file.isDirectory()) {
      File[] dirFiles=file.listFiles();
      zipFiles(zipOut,dirFiles,tempFolderPath);
    }
 else {
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));
      String relativePath=generateRelativePath(tempFolderPath,file.getPath());
      ZipEntry entry=new ZipEntry(relativePath);
      entry.setTime(file.lastModified());
      zipOut.putNextEntry(entry);
      int len;
      byte[] buf=new byte[1024 * 5];
      while ((len=in.read(buf)) > 0) {
        zipOut.write(buf,0,len);
      }
      in.close();
      zipOut.closeEntry();
    }
  }
}","/** 
 * Utility funtion to write files/directories to a ZipOutputStream. For directories, all the files and subfolders are written recursively.
 */
private static void zipFiles(ZipOutputStream zipOut,File[] files,String tempFolderPath) throws FileNotFoundException, IOException {
  if (files == null)   return;
  for (int i=0; i < files.length; i++) {
    File file=files[i];
    if (file.isDirectory()) {
      File[] dirFiles=file.listFiles();
      zipFiles(zipOut,dirFiles,tempFolderPath);
    }
 else {
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));
      try {
        String relativePath=generateRelativePath(tempFolderPath,file.getPath());
        ZipEntry entry=new ZipEntry(relativePath);
        try {
          entry.setTime(file.lastModified());
          zipOut.putNextEntry(entry);
          int len;
          byte[] buf=new byte[1024 * 5];
          while ((len=in.read(buf)) > 0) {
            zipOut.write(buf,0,len);
          }
        }
  finally {
          zipOut.closeEntry();
        }
      }
  finally {
        in.close();
      }
    }
  }
}",0.906040268456376
75455,"public RAFolderOutputStream(FolderArchiveWriter archive,File file,boolean append) throws FileNotFoundException, IOException {
  this.archive=archive;
  this.randomFile=new RandomAccessFile(file,""String_Node_Str"");
  if (!append) {
    this.randomFile.setLength(0);
  }
  this.bufferMgr=new RAStreamBufferMgr(this.randomFile);
}","public RAFolderOutputStream(FolderArchiveWriter archive,File file,boolean append) throws FileNotFoundException, IOException {
  this.archive=archive;
  this.randomFile=new RandomAccessFile(file,""String_Node_Str"");
  try {
    if (!append) {
      this.randomFile.setLength(0);
    }
    this.bufferMgr=new RAStreamBufferMgr(this.randomFile);
  }
 catch (  IOException ex) {
    randomFile.close();
    throw ex;
  }
}",0.8790322580645161
75456,"/** 
 * load configuration file
 */
synchronized private void load(){
  if (configFileLoaded)   return;
  InputStream is=null;
  fileConfigVars=new Properties();
  try {
    is=new FileInputStream(configFileName);
    if (is != null)     fileConfigVars.load(is);
  }
 catch (  Exception e) {
    fileConfigVars=null;
  }
  configFileLoaded=true;
}","/** 
 * load configuration file
 */
synchronized private void load(){
  if (configFileLoaded)   return;
  fileConfigVars=new Properties();
  InputStream is=null;
  try {
    is=new FileInputStream(configFileName);
    if (is != null)     fileConfigVars.load(is);
  }
 catch (  Exception e) {
    fileConfigVars=null;
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      Exception ex) {
      }
      is=null;
    }
  }
  configFileLoaded=true;
}",0.7518072289156627
75457,"/** 
 * copy resource to the platform.  If the resources is a folder, make the same folder into the platform and copy all resources into the dest folder.
 * @param resourcePath resource path.
 * @param platform platform folder
 */
private void copyResources(String resourcePath,String platform){
  Set paths=context.getResourcePaths(resourcePath);
  if (paths != null) {
    for (Iterator it=paths.iterator(); it.hasNext(); ) {
      String path=(String)it.next();
      File newFile=new File(platform,path.substring(RESOURCE_BASE.length()));
      if (path.endsWith(""String_Node_Str"")) {
        newFile.mkdir();
        copyResources(path,platform);
      }
 else {
        InputStream is=null;
        OutputStream os=null;
        try {
          if (newFile.createNewFile()) {
            is=context.getResourceAsStream(path);
            os=new FileOutputStream(newFile);
            byte[] buffer=new byte[8192];
            int bytesRead=is.read(buffer);
            while (bytesRead != -1) {
              os.write(buffer,0,bytesRead);
              bytesRead=is.read(buffer);
            }
          }
        }
 catch (        IOException e) {
          log.log(Level.WARNING,""String_Node_Str"",e);
        }
 finally {
          try {
            if (is != null) {
              is.close();
            }
          }
 catch (          Exception ex) {
          }
          try {
            if (os != null) {
              os.close();
            }
          }
 catch (          Exception ex) {
          }
        }
      }
    }
  }
}","/** 
 * copy resource to the platform.  If the resources is a folder, make the same folder into the platform and copy all resources into the dest folder.
 * @param resourcePath resource path.
 * @param platform platform folder
 */
private void copyResources(String resourcePath,String platform){
  Set paths=context.getResourcePaths(resourcePath);
  if (paths != null) {
    for (Iterator it=paths.iterator(); it.hasNext(); ) {
      String path=(String)it.next();
      File newFile=new File(platform,path.substring(RESOURCE_BASE.length()));
      if (path.endsWith(""String_Node_Str"")) {
        newFile.mkdir();
        copyResources(path,platform);
      }
 else {
        InputStream is=null;
        OutputStream os=null;
        try {
          if (newFile.createNewFile()) {
            is=context.getResourceAsStream(path);
            os=new FileOutputStream(newFile);
            byte[] buffer=new byte[8192];
            int bytesRead=is.read(buffer);
            while (bytesRead != -1) {
              os.write(buffer,0,bytesRead);
              bytesRead=is.read(buffer);
            }
          }
        }
 catch (        IOException e) {
          log.log(Level.WARNING,""String_Node_Str"",e);
        }
 finally {
          if (is != null) {
            try {
              is.close();
            }
 catch (            Exception exin) {
              log.log(Level.WARNING,""String_Node_Str"",exin);
            }
            is=null;
          }
          if (os != null) {
            try {
              os.close();
            }
 catch (            Exception exout) {
              log.log(Level.WARNING,""String_Node_Str"",exout);
            }
            os=null;
          }
        }
      }
    }
  }
}",0.906479217603912
75458,"/** 
 * @throws DataException 
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierEdgeType(target,cubeDefn) == ICubeQueryDefinition.COLUMN_EDGE) {
                continue;
              }
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @throws DataException 
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9345152988275665
75459,"protected IQuery createOdiQuery() throws DataException {
  setCurrentDataSet(dataSetDesign);
  populatePreparedQuery();
  if (doesLoadFromCache() == false)   initializeResultClass(dataEngine,appContext);
  return new JointDataSetQuery(resultClass);
}","protected IQuery createOdiQuery() throws DataException {
  setCurrentDataSet(dataSetDesign);
  populatePreparedQuery();
  initializeResultClass(dataEngine,appContext);
  return new JointDataSetQuery(resultClass);
}",0.9224137931034484
75460,"/** 
 * @return
 * @throws DataException 
 */
private IDimensionDefinition getTargetDimension() throws DataException {
  if (isAggregationFilter()) {
    ILevelDefinition targetLevel=cubeFilter.getTargetLevel();
    if (targetLevel == null) {
      throw new DataException(""String_Node_Str"" + targetLevel.getName() + ""String_Node_Str"");
    }
    IDimensionDefinition dimDefn=targetLevel.getHierarchy().getDimension();
    if (dimDefn == null) {
      throw new DataException(""String_Node_Str"" + this.dimName + ""String_Node_Str"");
    }
    return dimDefn;
  }
 else {
    IEdgeDefinition columnEdge=this.queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
    IEdgeDefinition rowEdge=this.queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
    List dims=new ArrayList();
    dims.addAll(columnEdge.getDimensions());
    dims.addAll(rowEdge.getDimensions());
    for (int i=0; i < dims.size(); i++) {
      IDimensionDefinition dimDefn=(IDimensionDefinition)dims.get(i);
      if (dimDefn.getName().equals(this.dimName)) {
        return dimDefn;
      }
    }
    return null;
  }
}","/** 
 * @return
 * @throws DataException 
 */
private IDimensionDefinition getTargetDimension() throws DataException {
  if (isAggregationFilter()) {
    ILevelDefinition targetLevel=cubeFilter.getTargetLevel();
    if (targetLevel == null) {
      throw new DataException(""String_Node_Str"" + targetLevel.getName() + ""String_Node_Str"");
    }
    IDimensionDefinition dimDefn=targetLevel.getHierarchy().getDimension();
    if (dimDefn == null) {
      throw new DataException(""String_Node_Str"" + this.dimName + ""String_Node_Str"");
    }
    return dimDefn;
  }
 else {
    IEdgeDefinition columnEdge=this.queryDefn.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
    IEdgeDefinition rowEdge=this.queryDefn.getEdge(ICubeQueryDefinition.ROW_EDGE);
    List dims=new ArrayList();
    if (columnEdge != null)     dims.addAll(columnEdge.getDimensions());
    if (rowEdge != null)     dims.addAll(rowEdge.getDimensions());
    for (int i=0; i < dims.size(); i++) {
      IDimensionDefinition dimDefn=(IDimensionDefinition)dims.get(i);
      if (dimDefn.getName().equals(this.dimName)) {
        return dimDefn;
      }
    }
    return null;
  }
}",0.9761153672825598
75461,"public String getNodeDisplayName(Object model){
  if (model instanceof ScriptsNode) {
    return SCRIPS_NODE_NAME;
  }
 else   if (model instanceof ScriptElementNode) {
    Object designElementModel=((ScriptElementNode)model).getParent();
    return ProviderFactory.createProvider(designElementModel).getNodeDisplayName(designElementModel);
  }
  if (model instanceof ScriptObjectNode) {
    return ((ScriptObjectNode)model).getText();
  }
  return EMPTY_STR;
}","public String getNodeDisplayName(Object model){
  if (model instanceof ScriptsNode) {
    return SCRIPS_NODE_NAME;
  }
 else   if (model instanceof ScriptElementNode) {
    Object designElementModel=((ScriptElementNode)model).getParent();
    return getFlatHirarchyPathName(designElementModel);
  }
  if (model instanceof ScriptObjectNode) {
    return ((ScriptObjectNode)model).getText();
  }
  return EMPTY_STR;
}",0.906392694063927
75462,"protected void dropSourceElementHandle(DesignElementHandle handle) throws SemanticException {
  if (handle.getContainer() != null) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
    }
    if (handle instanceof CellHandle) {
      dropSourceSlotHandle(((CellHandle)handle).getContent());
    }
 else     if (handle instanceof RowHandle) {
      new DeleteRowCommand(handle).execute();
    }
 else     if (handle instanceof ColumnHandle) {
      new DeleteColumnCommand(handle).execute();
    }
 else {
      handle.dropAndClear();
    }
  }
}","protected void dropSourceElementHandle(DesignElementHandle handle) throws SemanticException {
  if (handle.getContainer() != null) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(handle));
    }
    if (handle instanceof ExtendedItemHandle && isExtendedCell((ExtendedItemHandle)handle)) {
      ExtendedItemHandle extendedHandle=(ExtendedItemHandle)handle;
      List list=extendedHandle.getContents(DEUtil.getDefaultContentName(handle));
      for (int i=0; i < list.size(); i++) {
        dropSourceElementHandle((DesignElementHandle)list.get(i));
      }
    }
 else     if (handle instanceof CellHandle) {
      dropSourceSlotHandle(((CellHandle)handle).getContent());
    }
 else     if (handle instanceof RowHandle) {
      new DeleteRowCommand(handle).execute();
    }
 else     if (handle instanceof ColumnHandle) {
      new DeleteColumnCommand(handle).execute();
    }
 else {
      handle.dropAndClear();
    }
  }
}",0.7554179566563467
75463,"/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && ((handle instanceof ListHandle && ((ListHandle)handle).canDrop()) || (handle instanceof ListGroupHandle && ((ListGroupHandle)handle).canDrop())) && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    return ((ReportElementHandle)source).canDrop();
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof ThemeHandle) {
      return ((ThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   return false;
}","/** 
 * Returns the object can be deleted. If the parent can be deleted, the children will be skippedl
 * @param source single or multiple objects
 */
protected boolean canDrop(Object source){
  if (source == null) {
    return false;
  }
  if (source instanceof List) {
    return canDrop(((List)source).toArray());
  }
  if (source instanceof StructuredSelection) {
    return canDrop(((StructuredSelection)source).toArray());
  }
  if (source instanceof Object[]) {
    Object[] array=(Object[])source;
    if (array.length == 0) {
      return false;
    }
    for (int i=0; i < array.length; i++) {
      if (DNDUtil.checkContainerExists(array[i],array))       continue;
      if (canDrop(array[i]))       return true;
    }
    return false;
  }
  source=DNDUtil.unwrapToModel(source);
  if (source instanceof SlotHandle) {
    SlotHandle slot=(SlotHandle)source;
    DesignElementHandle handle=slot.getElementHandle();
    return slot.getContents().size() > 0 && ((handle instanceof ListHandle && ((ListHandle)handle).canDrop()) || (handle instanceof ListGroupHandle && ((ListGroupHandle)handle).canDrop())) && canDrop(slot.getContents());
  }
  if (source instanceof EmbeddedImageHandle) {
    return true;
  }
  if (source instanceof ExtendedItemHandle && isExtendedCell((ExtendedItemHandle)source)) {
    return ((ExtendedItemHandle)source).getContents(DEUtil.getDefaultContentName(source)).size() > 0;
  }
  if (source instanceof CellHandle) {
    return ((CellHandle)source).getContent().getContents().size() > 0 && ((CellHandle)source).canDrop();
  }
  if (source instanceof MasterPageHandle) {
    if (SessionHandleAdapter.getInstance().getReportDesignHandle().getMasterPages().getCount() > 1) {
      return true;
    }
    return false;
  }
 else   if (source instanceof ReportElementHandle) {
    return ((ReportElementHandle)source).canDrop();
  }
 else   if (source instanceof CssStyleSheetHandle) {
    DesignElementHandle elementHandle=((CssStyleSheetHandle)source).getContainerHandle();
    if (elementHandle instanceof ReportDesignHandle) {
      return ((ReportDesignHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else     if (elementHandle instanceof ThemeHandle) {
      return ((ThemeHandle)elementHandle).canDropCssStyleSheet((CssStyleSheetHandle)source);
    }
 else {
      return false;
    }
  }
 else   return false;
}",0.9203501094091904
75464,"protected boolean handleButtonUp(int button){
  boolean bool=super.handleButtonUp(button);
  if ((button == 3 || button == 1)) {
    if (getSourceEditPart() instanceof CrosstabFirstCellEditPart) {
      CrosstabFirstCellEditPart first=(CrosstabFirstCellEditPart)getSourceEditPart();
      if (first.contains(getLocation())) {
        manager.createContextMenu(getViewer().getControl());
        Menu menu=manager.getMenu();
        menu.setVisible(true);
        return true;
      }
    }
  }
  return bool;
}","protected boolean handleButtonUp(int button){
  boolean bool=super.handleButtonUp(button);
  if ((button == 1)) {
    if (getSourceEditPart() instanceof CrosstabFirstCellEditPart) {
      CrosstabFirstCellEditPart first=(CrosstabFirstCellEditPart)getSourceEditPart();
      if (first.contains(getLocation())) {
        manager.createContextMenu(getViewer().getControl());
        Menu menu=manager.getMenu();
        menu.setVisible(true);
        return true;
      }
    }
  }
  return bool;
}",0.9850746268656716
75465,"protected DragTracker createDragTracker(){
  DragEditPartsTracker track=new DragEditPartsTracker(CrosstabFirstCellEditPart.this){
    protected boolean handleButtonDown(    int button){
      if (getCurrentViewer() instanceof DeferredGraphicalViewer) {
        ((DeferredGraphicalViewer)getCurrentViewer()).initStepDat();
      }
      boolean bool=super.handleButtonDown(button);
      return bool;
    }
    protected boolean handleButtonUp(    int button){
      boolean bool=super.handleButtonUp(button);
      if ((button == 3 || button == 1)) {
        if (getSourceEditPart() instanceof CrosstabFirstCellEditPart) {
          CrosstabFirstCellEditPart first=(CrosstabFirstCellEditPart)getSourceEditPart();
          if (first.contains(getLocation())) {
            manager.createContextMenu(getViewer().getControl());
            Menu menu=manager.getMenu();
            menu.setVisible(true);
            return true;
          }
        }
      }
      return bool;
    }
  }
;
  return track;
}","protected DragTracker createDragTracker(){
  DragEditPartsTracker track=new DragEditPartsTracker(CrosstabFirstCellEditPart.this){
    protected boolean handleButtonDown(    int button){
      if (getCurrentViewer() instanceof DeferredGraphicalViewer) {
        ((DeferredGraphicalViewer)getCurrentViewer()).initStepDat();
      }
      boolean bool=super.handleButtonDown(button);
      return bool;
    }
    protected boolean handleButtonUp(    int button){
      boolean bool=super.handleButtonUp(button);
      if ((button == 1)) {
        if (getSourceEditPart() instanceof CrosstabFirstCellEditPart) {
          CrosstabFirstCellEditPart first=(CrosstabFirstCellEditPart)getSourceEditPart();
          if (first.contains(getLocation())) {
            manager.createContextMenu(getViewer().getControl());
            Menu menu=manager.getMenu();
            menu.setVisible(true);
            return true;
          }
        }
      }
      return bool;
    }
  }
;
  return track;
}",0.992473657802308
75466,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_AXIS);
  final int COLUMN_NUMBER=4;
  cmpContent=new Composite(parent,SWT.NONE){
    public Point computeSize(    int wHint,    int hHint,    boolean changed){
      Point p=super.computeSize(wHint,hHint,changed);
      p.y=200;
      return p;
    }
  }
;
{
    GridLayout glContent=new GridLayout(1,false);
    glContent.horizontalSpacing=HORIZONTAL_SPACING;
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  ScrolledComposite cmpScroll=new ScrolledComposite(cmpContent,SWT.V_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpScroll.setLayoutData(gd);
    cmpScroll.setMinHeight((ChartUIUtil.getOrthogonalAxisNumber(getChart()) + (ChartUIUtil.is3DType(getChart()) ? 2 : 1)) * 24 + 80);
    cmpScroll.setExpandVertical(true);
    cmpScroll.setExpandHorizontal(true);
  }
  Composite cmpList=new Composite(cmpScroll,SWT.NONE);
{
    GridLayout glContent=new GridLayout(COLUMN_NUMBER,false);
    glContent.horizontalSpacing=10;
    cmpList.setLayout(glContent);
    cmpScroll.setContent(cmpList);
  }
  Label lblAxis=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblAxis.setLayoutData(gd);
    lblAxis.setFont(JFaceResources.getBannerFont());
    lblAxis.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblVisible=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblVisible.setLayoutData(gd);
    lblVisible.setFont(JFaceResources.getBannerFont());
    lblVisible.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblType=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblType.setLayoutData(gd);
    lblType.setFont(JFaceResources.getBannerFont());
    lblType.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblColor=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblColor.setLayoutData(gd);
    lblColor.setFont(JFaceResources.getBannerFont());
    lblColor.setText(Messages.getString(""String_Node_Str""));
  }
  int treeIndex=0;
  new AxisOptionChoser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),Messages.getString(""String_Node_Str""),AngleType.X,treeIndex++).placeComponents(cmpList);
  int yaxisNumber=ChartUIUtil.getOrthogonalAxisNumber(getChart());
  for (int i=0; i < yaxisNumber; i++) {
    String text=Messages.getString(""String_Node_Str"");
    new AxisOptionChoser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),i),yaxisNumber == 1 ? text : (text + ""String_Node_Str"" + (i + 1)),AngleType.Y,treeIndex++).placeComponents(cmpList);
  }
  if (ChartUIUtil.is3DType(getChart())) {
    new AxisOptionChoser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),Messages.getString(""String_Node_Str""),AngleType.Z,treeIndex++).placeComponents(cmpList);
  }
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_AXIS);
  final int COLUMN_NUMBER=4;
  cmpContent=new Composite(parent,SWT.NONE){
    public Point computeSize(    int wHint,    int hHint,    boolean changed){
      Point p=super.computeSize(wHint,hHint,changed);
      p.y=200;
      return p;
    }
  }
;
{
    GridLayout glContent=new GridLayout(1,false);
    glContent.horizontalSpacing=HORIZONTAL_SPACING;
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  ScrolledComposite cmpScroll=new ScrolledComposite(cmpContent,SWT.V_SCROLL);
{
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpScroll.setLayoutData(gd);
    cmpScroll.setMinHeight((ChartUIUtil.getOrthogonalAxisNumber(getChart()) + (ChartUIUtil.is3DType(getChart()) ? 2 : 1)) * 24 + 80);
    cmpScroll.setExpandVertical(true);
    cmpScroll.setExpandHorizontal(true);
  }
  Composite cmpList=new Composite(cmpScroll,SWT.NONE);
{
    GridLayout glContent=new GridLayout(COLUMN_NUMBER,false);
    glContent.horizontalSpacing=10;
    cmpList.setLayout(glContent);
    cmpScroll.setContent(cmpList);
  }
  Label lblAxis=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblAxis.setLayoutData(gd);
    lblAxis.setFont(JFaceResources.getBannerFont());
    lblAxis.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblVisible=new Label(cmpList,SWT.WRAP | SWT.CENTER);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblVisible.setLayoutData(gd);
    lblVisible.setFont(JFaceResources.getBannerFont());
    lblVisible.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblType=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblType.setLayoutData(gd);
    lblType.setFont(JFaceResources.getBannerFont());
    lblType.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblColor=new Label(cmpList,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalAlignment=SWT.CENTER;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblColor.setLayoutData(gd);
    lblColor.setFont(JFaceResources.getBannerFont());
    lblColor.setText(Messages.getString(""String_Node_Str""));
  }
  int treeIndex=0;
  new AxisOptionChoser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),Messages.getString(""String_Node_Str""),AngleType.X,treeIndex++).placeComponents(cmpList);
  int yaxisNumber=ChartUIUtil.getOrthogonalAxisNumber(getChart());
  for (int i=0; i < yaxisNumber; i++) {
    String text=Messages.getString(""String_Node_Str"");
    new AxisOptionChoser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),i),yaxisNumber == 1 ? text : (text + ""String_Node_Str"" + (i + 1)),AngleType.Y,treeIndex++).placeComponents(cmpList);
  }
  if (ChartUIUtil.is3DType(getChart())) {
    new AxisOptionChoser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),Messages.getString(""String_Node_Str""),AngleType.Z,treeIndex++).placeComponents(cmpList);
  }
}",0.9979728676126618
75467,"/** 
 * Parse a date/time string.
 * @param source
 * @return
 * @throws ParseException
 */
public static Date parse(String source) throws BirtException, ParseException {
  if (source == null) {
    return null;
  }
  Date resultDate=null;
  source=cleanDate(source);
  Object simpleDateFormatter=DateFormatFactory.getPatternInstance(PatternKey.getPatterKey(source));
  if (simpleDateFormatter != null) {
    try {
      resultDate=((SimpleDateFormat)simpleDateFormatter).parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (resultDate == null) {
    throw new ParseException(""String_Node_Str"" + source,0);
  }
  return resultDate;
}","/** 
 * Parse a date/time string.
 * @param source
 * @return
 * @throws ParseException
 */
public static Date parse(String source) throws BirtException, ParseException {
  if (source == null || source.trim().length() == 0) {
    return null;
  }
  Date resultDate=null;
  source=cleanDate(source);
  Object simpleDateFormatter=DateFormatFactory.getPatternInstance(PatternKey.getPatterKey(source));
  if (simpleDateFormatter != null) {
    try {
      resultDate=((SimpleDateFormat)simpleDateFormatter).parse(source);
      return resultDate;
    }
 catch (    ParseException e1) {
    }
  }
  if (resultDate == null) {
    throw new ParseException(""String_Node_Str"" + source,0);
  }
  return resultDate;
}",0.9775524981897176
75468,"/** 
 * Write a Map to an output stream
 * @param dos
 * @param map
 * @throws IOException
 * @throws BirtException
 */
public final static void writeMap(DataOutputStream dos,Map map) throws IOException {
  if (map == null) {
    writeInt(dos,TYPE_NULL);
    return;
  }
 else {
    writeInt(dos,TYPE_MAP);
  }
  int size=map.size();
  writeInt(dos,size);
  if (size == 0)   return;
  Set keySet=map.keySet();
  Iterator it=keySet.iterator();
  while (it.hasNext()) {
    Object key=it.next();
    Object value=map.get(key);
    writeObject(dos,key);
    writeObject(dos,value);
  }
}","/** 
 * Write a Map to an output stream
 * @param dos
 * @param map
 * @throws IOException
 * @throws BirtException
 */
public final static void writeMap(DataOutputStream dos,Map map) throws IOException {
  if (map == null) {
    writeInt(dos,TYPE_NULL);
    return;
  }
 else {
    writeInt(dos,TYPE_MAP);
  }
  int size=map.size();
  writeInt(dos,size);
  if (size == 0)   return;
  Iterator it=map.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Object key=entry.getKey();
    Object value=entry.getValue();
    writeObject(dos,key);
    writeObject(dos,value);
  }
}",0.88
75469,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    resultSetList=(List)dataSetHandle.getProperty(OdaDataSetHandle.RESULT_SET_PROP);
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    resultSetList=dataSetHandle.getListProperty(DataSetHandle.RESULT_SET_HINTS_PROP);
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && resultSetList.size() > 0) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    if (handle.isLocal())     resultSetList=handle.getListValue();
  }
 else {
    return null;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      String columnName=resultSetColumn.getColumnName();
      String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i);
      uniqueColumnNameSet.add(uniqueColumnName);
      if (!uniqueColumnName.equals(columnName)) {
        updateModelColumn(dataSetHandle,uniqueColumnName,i + 1);
      }
      columnDef=new ResultSetColumnDefinition(uniqueColumnName);
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.967659137577002
75470,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          ((BarSeries)series).setRiser(RiserType.RECTANGLE_LITERAL);
          if (!currentChart.getSubType().equals(sNewSubType)) {
            if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
              if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
                ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
              }
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      ((BarSeries)series).setRiser(RiserType.RECTANGLE_LITERAL);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          ((BarSeries)series).setRiser(RiserType.RECTANGLE_LITERAL);
          if (!currentChart.getSubType().equals(sNewSubType)) {
            if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
              if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
                ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
              }
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      ((BarSeries)series).setRiser(RiserType.RECTANGLE_LITERAL);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9395966248199218
75471,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
              if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
                ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
              }
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          ((LineSeries)series).setPaletteLineColor(true);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        ((LineSeries)series).setPaletteLineColor(true);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
        EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
        for (int i=0; i < axes.size(); i++) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
          EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
          for (int j=0; j < seriesdefinitions.size(); j++) {
            Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
            if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
              if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
                ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
              }
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
    }
 else     if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)|| currentChart.getType().equals(PyramidChart.TYPE_LITERAL)|| currentChart.getType().equals(AreaChart.TYPE_LITERAL)|| currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
          ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
        }
        ((Axis)axes.get(i)).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          ((LineSeries)series).setPaletteLineColor(true);
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      return null;
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setType(AxisType.TEXT_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setType(AxisType.LINEAR_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        ((LineSeries)series).setPaletteLineColor(true);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      series.setStacked(false);
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9533724340175952
75472,"public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    this.session.defineDataSource(this.session.getModelAdaptor().adaptDataSource(hierHandle.getDataSet().getDataSource()));
    this.session.defineDataSet(this.session.getModelAdaptor().adaptDataSet(hierHandle.getDataSet()));
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    defineDataSourceAndDataSet(hierHandle.getDataSet());
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9316338354577056
75473,"/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws RenderingException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,double dX,double dY,double dW,double dItemHeight,double dFullHeight,double dExtraHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Series se,Fill fPaletteEntry,LegendItemRenderingHints lirh,int dataIndex,double dScale) throws ChartException {
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(la.getCaption().getFont());
    valueLa.getCaption().setColor(la.getCaption().getColor());
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(LocationImpl.create(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(LocationImpl.create(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    Location[] loaBack=new Location[4];
    final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),PolygonRenderEvent.class);
    pre.setBackground(valueLa.getBackground());
    pre.setOutline(valueLa.getOutline());
    pre.setPoints(loaBack);
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    loaBack[0]=LocationImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1);
    loaBack[1]=LocationImpl.create(dX + dLeftInset + 1,dY + dFullHeight + dExtraHeight);
    loaBack[2]=LocationImpl.create(dX + dLeftInset + dValueWidth,dY + dFullHeight + dExtraHeight);
    loaBack[3]=LocationImpl.create(dX + dLeftInset + dValueWidth,dY + dFullHeight + 1);
    ipr.fillPolygon(pre);
    ipr.drawPolygon(pre);
    Label tmpLa=LabelImpl.copyInstance(valueLa);
    tmpLa.setOutline(null);
    tmpLa.setBackground(null);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(BoundsImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    ipr.drawText(tre);
  }
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=LocationImpl.create(dX + 1,dY + 1);
    loaHotspot[1]=LocationImpl.create(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=LocationImpl.create(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=LocationImpl.create(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=(Trigger)itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.HIGHLIGHT_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=(Trigger)itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.TOGGLE_VISIBILITY_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
for (int t=0; t < elTriggers.size(); t++) {
tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}","/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws RenderingException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,double dX,double dY,double dW,double dItemHeight,double dFullHeight,double dExtraHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Series se,Fill fPaletteEntry,LegendItemRenderingHints lirh,int dataIndex,double dScale) throws ChartException {
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(la.getCaption().getFont());
    valueLa.getCaption().setColor(la.getCaption().getColor());
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(LocationImpl.create(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(LocationImpl.create(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    Label tmpLa=LabelImpl.copyInstance(valueLa);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(BoundsImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    ipr.drawText(tre);
  }
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=LocationImpl.create(dX + 1,dY + 1);
    loaHotspot[1]=LocationImpl.create(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=LocationImpl.create(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=LocationImpl.create(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=(Trigger)itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.HIGHLIGHT_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=(Trigger)itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.TOGGLE_VISIBILITY_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
for (int t=0; t < elTriggers.size(); t++) {
tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}",0.9345302375809936
75474,"public void startList(IListContent list){
  startCase(list);
}","public void startList(IListContent list){
  int size=list.getChildren().size();
  startCase(list);
  if (size == 0) {
    addData(list.getGenerateBy(),list.getComputedStyle(),parseHyperLink(list),""String_Node_Str"");
  }
}",0.3392226148409894
75475,"/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter3=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  cqd.addFilter(filter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * top/bottom dimension filter.
 * @throws Exception
 */
public void testAggrFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeFilterDefinition filter1=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_BOTTOM_N,""String_Node_Str""));
  CubeFilterDefinition filter2=new CubeFilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_TOP_N,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9526274915868496
75476,"public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(ExtendedElementUIPointTest.class);
  suite.addTestSuite(ExtensionPointManagerTest.class);
  suite.addTestSuite(IReportItemUITest.class);
  return suite;
}","public static Test suite(){
  TestSuite suite=new TestSuite(""String_Node_Str"");
  suite.addTestSuite(ExtendedElementUIPointTest.class);
  suite.addTestSuite(ExtensionPointManagerTest.class);
  return suite;
}",0.8984881209503239
75477,"/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
private void processNodes(Element ele,boolean needEscape,HashMap cssStyles,IContent content){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),checkEscapeSpace(node),cssStyles,content);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),needEscape,cssStyles,content);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_UNDERLINE,IStyle.UNDERLINE_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_LINETHROUGH,IStyle.LINE_THROUGH_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.BOTTOM_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.TOP_VALUE);
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (supportedHTMLElementTags.contains(node.getNodeName().toUpperCase()) && node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,needEscape,cssStyles,content,++level);
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
private void processNodes(Element ele,boolean needEscape,HashMap cssStyles,IContent content){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),checkEscapeSpace(node),cssStyles,content);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),needEscape,cssStyles,content);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_UNDERLINE,IStyle.UNDERLINE_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_LINETHROUGH,IStyle.LINE_THROUGH_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.BOTTOM_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.TOP_VALUE);
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,needEscape,cssStyles,content,++level);
    }
  }
}",0.9848904022132368
75478,"private void initValueArea(){
  String controlType=getSelectedControlType();
  if (isStatic()) {
    if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType)) {
      if (isValidValue(defaultValue) != null) {
        defaultValue=null;
        defaultValueChooser.select(0);
      }
 else {
        if (Boolean.valueOf(defaultValue).booleanValue()) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.select(2);
        }
      }
    }
 else     if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(controlType)) {
      if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        if (defaultValue == null) {
          defaultValueChooser.select(0);
        }
 else         if (defaultValue.equals(""String_Node_Str"")) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
 else       if (defaultValue != null) {
        if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
    }
 else     if (PARAM_CONTROL_COMBO.equals(controlType) || PARAM_CONTROL_LIST.equals(controlType)) {
      initSorttingArea();
    }
    refreshValueTable();
  }
 else {
    refreshDataSets();
    if (inputParameter.getDataSetName() != null) {
      dataSetChooser.setText(inputParameter.getDataSetName());
    }
    refreshColumns(false);
    String columnName=getColumnName(inputParameter.getValueExpr());
    if (columnName != null) {
      columnChooser.setText(columnName);
    }
    columnName=getColumnName(inputParameter.getLabelExpr());
    if (columnName != null) {
      displayTextChooser.setText(columnName);
    }
    if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
      if (defaultValue == null) {
        defaultValueChooser.select(1);
      }
 else       if (defaultValue.equals(""String_Node_Str"")) {
        defaultValueChooser.select(2);
      }
 else {
        defaultValueChooser.setText(defaultValue);
      }
    }
 else     if (defaultValue != null) {
      defaultValueChooser.setText(defaultValue);
    }
    initSorttingArea();
  }
  updateMessageLine();
}","private void initValueArea(){
  String controlType=getSelectedControlType();
  if (isStatic()) {
    if (DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(controlType)) {
      if (isValidValue(defaultValue) != null) {
        defaultValue=null;
        defaultValueChooser.select(0);
      }
 else {
        if (Boolean.valueOf(defaultValue).booleanValue()) {
          defaultValueChooser.select(1);
        }
 else {
          defaultValueChooser.select(2);
        }
      }
    }
 else     if (DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(controlType)) {
      if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
        if (defaultValue == null) {
          defaultValueChooser.select(0);
        }
 else         if (defaultValue.equals(""String_Node_Str"")) {
          defaultValueChooser.select(1);
        }
 else         if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
 else       if (defaultValue != null) {
        if ((defaultValue.equals(Boolean.toString(true)) || defaultValue.equals(Boolean.toString(false)))) {
          defaultValue=null;
        }
 else {
          defaultValueChooser.setText(defaultValue);
        }
      }
    }
 else     if (PARAM_CONTROL_COMBO.equals(controlType) || PARAM_CONTROL_LIST.equals(controlType)) {
      defaultValue=null;
      initSorttingArea();
    }
    refreshValueTable();
  }
 else {
    refreshDataSets();
    if (inputParameter.getDataSetName() != null) {
      dataSetChooser.setText(inputParameter.getDataSetName());
    }
    refreshColumns(false);
    String columnName=getColumnName(inputParameter.getValueExpr());
    if (columnName != null) {
      columnChooser.setText(columnName);
    }
    columnName=getColumnName(inputParameter.getLabelExpr());
    if (columnName != null) {
      displayTextChooser.setText(columnName);
    }
    if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
      if (defaultValue == null) {
        defaultValueChooser.select(1);
      }
 else       if (defaultValue.equals(""String_Node_Str"")) {
        defaultValueChooser.select(2);
      }
 else {
        defaultValueChooser.setText(defaultValue);
      }
    }
 else     if (defaultValue != null) {
      defaultValueChooser.setText(defaultValue);
    }
    initSorttingArea();
  }
  updateMessageLine();
}",0.962762637819846
75479,"private void createSortingArea(Composite parent){
  sorttingArea=new Composite(parent,SWT.NONE);
  GridData sorttingAreaGridData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_END);
  sorttingAreaGridData.horizontalSpan=2;
  sorttingArea.setLayoutData(sorttingAreaGridData);
  sorttingArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Group sortGroup=new Group(sorttingArea,SWT.NONE);
  sortGroup.setText(LABEL_SORT_GROUP);
  sortGroup.setLayout(new GridLayout(2,false));
  sortGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite sortKeyArea=new Composite(sortGroup,SWT.NONE);
  sortKeyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortKeyArea.setLayout(new GridLayout(2,false));
  sortKeyLabel=new Label(sortKeyArea,SWT.NONE);
  sortKeyLabel.setText(LABEL_SORT_KEY);
  sortKeyChooser=new Combo(sortKeyArea,SWT.BORDER);
  sortKeyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortKeyChooser.add(CHOICE_NONE);
  sortKeyChooser.add(CHOICE_DISPLAY_TEXT);
  sortKeyChooser.add(CHOICE_VALUE_COLUMN);
  sortKeyChooser.setText(CHOICE_NONE);
  sortKeyChooser.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (!((Combo)e.widget).getText().equals(CHOICE_NONE)) {
        sortDirectionLabel.setEnabled(true);
        sortDirectionChooser.setEnabled(true);
        distinct.setEnabled(true);
      }
 else {
        sortDirectionLabel.setEnabled(false);
        sortDirectionChooser.setEnabled(false);
        distinct.setEnabled(false);
      }
    }
  }
);
  Composite sortDirectionArea=new Composite(sortGroup,SWT.NONE);
  sortDirectionArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortDirectionArea.setLayout(new GridLayout(2,false));
  sortDirectionLabel=new Label(sortDirectionArea,SWT.NONE);
  sortDirectionLabel.setText(LABEL_SORT_KEY);
  sortDirectionChooser=new Combo(sortDirectionArea,SWT.BORDER);
  sortDirectionChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortDirectionChooser.add(CHOICE_ASCENDING);
  sortDirectionChooser.add(CHOICE_DESCENDING);
  sortDirectionChooser.setText(CHOICE_ASCENDING);
  Composite distinctBtnArea=new Composite(sortGroup,SWT.NONE);
  distinctBtnArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  distinctBtnArea.setLayout(new GridLayout());
  distinct=new Button(distinctBtnArea,SWT.CHECK);
  distinct.setText(CHECKBOX_DISTINCT);
  distinct.setSelection(true);
}","private void createSortingArea(Composite parent){
  sorttingArea=new Composite(parent,SWT.NONE);
  GridData sorttingAreaGridData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_END);
  sorttingAreaGridData.horizontalSpan=2;
  sorttingArea.setLayoutData(sorttingAreaGridData);
  sorttingArea.setLayout(UIUtil.createGridLayoutWithoutMargin(1,false));
  Group sortGroup=new Group(sorttingArea,SWT.NONE);
  sortGroup.setText(LABEL_SORT_GROUP);
  sortGroup.setLayout(new GridLayout(2,false));
  sortGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite sortKeyArea=new Composite(sortGroup,SWT.NONE);
  sortKeyArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortKeyArea.setLayout(new GridLayout(2,false));
  sortKeyLabel=new Label(sortKeyArea,SWT.NONE);
  sortKeyLabel.setText(LABEL_SORT_KEY);
  sortKeyChooser=new Combo(sortKeyArea,SWT.BORDER);
  sortKeyChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortKeyChooser.add(CHOICE_NONE);
  sortKeyChooser.add(CHOICE_DISPLAY_TEXT);
  sortKeyChooser.add(CHOICE_VALUE_COLUMN);
  sortKeyChooser.setText(CHOICE_NONE);
  sortKeyChooser.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      if (!((Combo)e.widget).getText().equals(CHOICE_NONE)) {
        sortDirectionLabel.setEnabled(true);
        sortDirectionChooser.setEnabled(true);
        distinct.setEnabled(true);
      }
 else {
        sortDirectionLabel.setEnabled(false);
        sortDirectionChooser.setEnabled(false);
        distinct.setEnabled(false);
      }
    }
  }
);
  Composite sortDirectionArea=new Composite(sortGroup,SWT.NONE);
  sortDirectionArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortDirectionArea.setLayout(new GridLayout(2,false));
  sortDirectionLabel=new Label(sortDirectionArea,SWT.NONE);
  sortDirectionLabel.setText(LABEL_SORT_DIRECTION);
  sortDirectionChooser=new Combo(sortDirectionArea,SWT.BORDER);
  sortDirectionChooser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  sortDirectionChooser.add(CHOICE_ASCENDING);
  sortDirectionChooser.add(CHOICE_DESCENDING);
  sortDirectionChooser.setText(CHOICE_ASCENDING);
  Composite distinctBtnArea=new Composite(sortGroup,SWT.NONE);
  distinctBtnArea.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  distinctBtnArea.setLayout(new GridLayout());
  distinct=new Button(distinctBtnArea,SWT.CHECK);
  distinct.setText(CHECKBOX_DISTINCT);
  distinct.setSelection(true);
}",0.997651663405088
75480,"/** 
 */
private void getAggregationLevelIndex(){
  if (aggregationCalculators == null) {
    return;
  }
  levelIndex=new int[aggregationCalculators.length][];
  for (int i=0; i < aggregationCalculators.length; i++) {
    DimLevel[] levels=aggregationCalculators[i].aggregation.getLevels();
    if (levels == null || levels.length == 0) {
      levelIndex[i]=new int[0];
      continue;
    }
    int[] tmpLevelIndex=new int[levels.length * 2];
    for (int j=0; j < tmpLevelIndex.length / 2; j++) {
      tmpLevelIndex[j * 2]=findDimensionIterator(levels[j].getLevelName());
      tmpLevelIndex[j * 2 + 1]=dimesionResultIterators[tmpLevelIndex[j * 2]].getLevelIndex(levels[j].getLevelName());
    }
    levelIndex[i]=tmpLevelIndex;
  }
}","/** 
 */
private void getAggregationLevelIndex(){
  if (aggregationCalculators == null) {
    return;
  }
  levelIndex=new int[aggregationCalculators.length][];
  for (int i=0; i < aggregationCalculators.length; i++) {
    DimLevel[] levels=aggregationCalculators[i].aggregation.getLevels();
    if (levels == null || levels.length == 0) {
      levelIndex[i]=new int[0];
      continue;
    }
    int[] tmpLevelIndex=new int[levels.length * 2];
    for (int j=0; j < tmpLevelIndex.length / 2; j++) {
      tmpLevelIndex[j * 2]=findDimensionIterator(levels[j]);
      tmpLevelIndex[j * 2 + 1]=dimesionResultIterators[tmpLevelIndex[j * 2]].getLevelIndex(levels[j].getLevelName());
    }
    levelIndex[i]=tmpLevelIndex;
  }
}",0.8188653451811346
75481,"/** 
 * @param levelName
 * @return
 */
private int findDimensionIterator(String levelName){
  for (int i=0; i < dimesionResultIterators.length; i++) {
    if (dimesionResultIterators[i].getLevelIndex(levelName) >= 0) {
      return i;
    }
  }
  return -1;
}","/** 
 * @param levelName
 * @return
 */
private int findDimensionIterator(DimLevel level){
  for (int i=0; i < dimesionResultIterators.length; i++) {
    if (dimesionResultIterators[i].getDimesion().getName().equals(level.getDimensionName()) && dimesionResultIterators[i].getLevelIndex(level.getLevelName()) >= 0) {
      return i;
    }
  }
  return -1;
}",0.7922077922077922
75482,"/** 
 * Parses a dimension string. The string must match the following: <ul> <li>null</li> <li>[1-9][0-9]*[.[0-9]*[ ]*[in|cm|mm|pt|pc|em|ex|px|%]]</li> </ul> If the error exists, return the result whose measure is 0.
 */
public static DimensionType parserUnit(String value){
  if (value != null) {
    try {
      DimensionValue val=DimensionValue.parse(value);
      return new DimensionType(val.getMeasure(),val.getUnits());
    }
 catch (    PropertyValueException e) {
      log.log(Level.SEVERE,e.getMessage());
    }
  }
  return new DimensionType(0,DimensionType.UNITS_CM);
}","public static DimensionType parserUnit(String value,String defaultUnits){
  if (value != null) {
    try {
      DimensionValue val=DimensionValue.parse(value);
      String units=val.getUnits();
      if (null == units || ""String_Node_Str"".equals(units)) {
        units=defaultUnits;
      }
      return new DimensionType(val.getMeasure(),units);
    }
 catch (    PropertyValueException e) {
      log.log(Level.SEVERE,e.getMessage());
    }
  }
  return new DimensionType(0,DimensionType.UNITS_CM);
}",0.6384544618215271
75483,"/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.toString();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}","/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.toString();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str""),DimensionType.UNITS_PX));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str""),DimensionType.UNITS_PX));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}",0.8427046263345196
75484,"/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    int totalRowCount=0;
    if (finish == true)     totalRowCount=rowCount;
 else     totalRowCount=rowCount == 0 ? 1 : rowCount;
    IOUtil.writeInt(this.rowExprsDos,totalRowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.saveExprValue(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}","/** 
 * init save environment
 */
private void initSave(boolean finish) throws DataException {
  if (inited == true)   return;
  inited=true;
  try {
    IOUtil.writeInt(this.rowExprsDos,rowCount);
    Map map=new HashMap();
    Iterator it=exprNameSet.iterator();
    while (it.hasNext()) {
      Object value=it.next();
      map.put(value,value);
    }
    int rowBytes=this.saveExprValue(map);
    IOUtil.writeInt(this.rowExprsDos,rowBytes);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e);
  }
}",0.8876221498371335
75485,"public Map getRowValue() throws DataException {
  try {
    if (currReadIndex < currRowIndex + 1) {
      this.skipTo(currRowIndex);
      this.exprValueMap=this.getValueMap();
    }
    currReadIndex=currRowIndex + 1;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  return exprValueMap;
}","public Map getRowValue() throws DataException {
  try {
    if (this.rowCount == 0) {
      if (this.exprValueMap == null)       this.exprValueMap=this.getValueMap();
    }
 else     if (currReadIndex < currRowIndex + 1) {
      this.skipTo(currRowIndex);
      this.exprValueMap=this.getValueMap();
    }
    currReadIndex=currRowIndex + 1;
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  return exprValueMap;
}",0.8540925266903915
75486,"public Map getRowValue() throws DataException {
  if (lastRowIndex == currRowIndex)   return this.exprValueMap;
  lastRowIndex=currRowIndex;
  try {
    this.skipTo(nextDestIndex);
    this.exprValueMap=this.getValueMap();
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  return exprValueMap;
}","public Map getRowValue() throws DataException {
  try {
    if (this.rowCount == 0) {
      if (this.exprValueMap == null)       this.exprValueMap=this.getValueMap();
    }
 else {
      if (lastRowIndex == currRowIndex)       return this.exprValueMap;
      lastRowIndex=currRowIndex;
      this.skipTo(nextDestIndex);
      this.exprValueMap=this.getValueMap();
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_LOAD_ERROR,e,""String_Node_Str"");
  }
  return exprValueMap;
}",0.7588571428571429
75487,"/** 
 * Gets the children of the given model. The default children element include following: Body,Styles,MasterPage
 * @param model the given report design
 * @return the result list that contains the model
 */
public Object[] getChildren(Object model){
  LibraryHandle handle=((LibraryHandle)model);
  ArrayList list=new ArrayList();
  list.add(handle.getCubes());
  return list.toArray();
}","/** 
 * Gets the children of the given model. The default children element include following: Body,Styles,MasterPage
 * @param model the given report design
 * @return the result list that contains the model
 */
public Object[] getChildren(Object model){
  LibraryHandle handle=((LibraryHandle)model);
  ArrayList list=new ArrayList();
  if (handle.getNamespace() == null) {
    list.add(handle.getCubes());
  }
  return list.toArray();
}",0.9121540312876052
75488,"/** 
 * Gets the children of the given model. The default children element include following: Body,Styles,MasterPage
 * @param model the given report design
 * @return the result list that contains the model
 */
public Object[] getChildren(Object model){
  LibraryHandle handle=((LibraryHandle)model);
  ArrayList list=new ArrayList();
  list.add(handle.getDataSources());
  list.add(handle.getDataSets());
  return list.toArray();
}","/** 
 * Gets the children of the given model. The default children element include following: Body,Styles,MasterPage
 * @param model the given report design
 * @return the result list that contains the model
 */
public Object[] getChildren(Object model){
  LibraryHandle handle=((LibraryHandle)model);
  ArrayList list=new ArrayList();
  if (handle.getNamespace() == null) {
    list.add(handle.getDataSources());
    list.add(handle.getDataSets());
  }
  return list.toArray();
}",0.9485213581599125
75489,"/** 
 * Test <code>IHighLightRule</code>
 * @throws SemanticException
 * @throws ScriptException
 */
public void testHighLightRule() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  HighlightRule rule=StructureFactory.createHighlightRule();
  SharedStyleHandle style=factory.newStyle(""String_Node_Str"");
  style.getPropertyHandle(""String_Node_Str"").addItem(rule);
  designHandle.getStyles().add(style);
  tableHandle.setStyle(style);
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  IRow item=new Row(rowHandle);
  IHighlightRule iRule=new HighlightRuleImpl(rule);
  item.addHighlightRule(iRule);
  IHighlightRule[] rules=item.getHighlightRules();
  assertEquals(1,rules.length);
  iRule=rules[0];
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setDateTimeFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getDateTimeFormat());
  iRule.setFontStyle(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontStyle());
  iRule.setFontWeight(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontWeight());
  iRule.setStringFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getStringFormat());
  iRule.setTestExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getTestExpression());
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setOperator(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getOperator());
  iRule.setValue1(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue1());
  iRule.setValue2(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue2());
  iRule.setBackGroudnColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getBackGroudnColor());
  item.removeHighlightRules();
  rules=item.getHighlightRules();
  assertEquals(0,rules.length);
}","/** 
 * Test <code>IHighLightRule</code>
 * @throws SemanticException
 * @throws ScriptException
 */
public void testHighLightRule() throws SemanticException, ScriptException {
  TableHandle tableHandle=factory.newTableItem(""String_Node_Str"",3);
  designHandle.getBody().add(tableHandle);
  HighlightRule rule=StructureFactory.createHighlightRule();
  SharedStyleHandle style=factory.newStyle(""String_Node_Str"");
  style.getPropertyHandle(""String_Node_Str"").addItem(rule);
  designHandle.getStyles().add(style);
  tableHandle.setStyle(style);
  RowHandle rowHandle=(RowHandle)tableHandle.getHeader().get(0);
  IRow item=new Row(rowHandle);
  IHighlightRule iRule=new HighlightRuleImpl(rule);
  item.addHighlightRule(iRule);
  IHighlightRule[] rules=item.getHighlightRules();
  assertEquals(1,rules.length);
  iRule=rules[0];
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setDateTimeFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getDateTimeFormat());
  iRule.setFontStyle(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontStyle());
  iRule.setFontWeight(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getFontWeight());
  iRule.setStringFormat(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getStringFormat());
  iRule.setTestExpression(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getTestExpression());
  iRule.setColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getColor());
  iRule.setOperator(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getOperator());
  iRule.setValue1(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue1());
  iRule.setValue2(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getValue2());
  iRule.setBackGroundColor(""String_Node_Str"");
  assertEquals(""String_Node_Str"",iRule.getBackGroundColor());
  item.removeHighlightRules();
  rules=item.getHighlightRules();
  assertEquals(0,rules.length);
}",0.998
75490,"private String getTooltip(TreeItem item){
  if (item != null) {
    Object object=item.getData();
    if (object instanceof DataSourceHandle || object instanceof DataSetHandle) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (object instanceof ThemeHandle) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (object instanceof ParameterHandle || object instanceof ParameterGroupHandle || object instanceof EmbeddedImageHandle|| object instanceof ReportItemHandle) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (object instanceof LibraryHandle) {
      return ((LibraryHandle)object).getFileName();
    }
 else     if (object instanceof CssStyleSheetHandle) {
      CssStyleSheetHandle CssStyleSheetHandle=(CssStyleSheetHandle)object;
      if (CssStyleSheetHandle.getFileName().startsWith(BUNDLE_PROTOCOL)) {
        return CssStyleSheetHandle.getFileName();
      }
 else {
        ModuleHandle moudleHandle=CssStyleSheetHandle.getModule().getModuleHandle();
        URL url=moudleHandle.findResource(CssStyleSheetHandle.getFileName(),IResourceLocator.CASCADING_STYLE_SHEET);
        if (url != null) {
          return url.getFile();
        }
      }
    }
  }
  return ""String_Node_Str"";
}","private String getTooltip(TreeItem item){
  if (item != null) {
    Object object=item.getData();
    if (object instanceof DataSourceHandle || object instanceof DataSetHandle) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (object instanceof ThemeHandle) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (object instanceof ParameterHandle || object instanceof ParameterGroupHandle || object instanceof EmbeddedImageHandle|| object instanceof ReportItemHandle) {
      return Messages.getString(""String_Node_Str"");
    }
 else     if (object instanceof LibraryHandle) {
      return ((LibraryHandle)object).getFileName();
    }
 else     if (object instanceof CssStyleSheetHandle) {
      CssStyleSheetHandle CssStyleSheetHandle=(CssStyleSheetHandle)object;
      if (CssStyleSheetHandle.getFileName().startsWith(BUNDLE_PROTOCOL)) {
        return CssStyleSheetHandle.getFileName();
      }
 else {
        ModuleHandle moudleHandle=CssStyleSheetHandle.getModule().getModuleHandle();
        URL url=moudleHandle.findResource(CssStyleSheetHandle.getFileName(),IResourceLocator.CASCADING_STYLE_SHEET);
        if (url != null) {
          return url.getFile();
        }
      }
    }
 else     if (object instanceof PathResourceEntry) {
      return ((PathResourceEntry)object).getURL().getPath();
    }
  }
  return ""String_Node_Str"";
}",0.9547852298417484
75491,"protected void buildActions(){
  addRetargetAction(new UndoRetargetAction());
  addRetargetAction(new RedoRetargetAction());
  addRetargetAction(new DeleteRetargetAction());
  addRetargetAction(new ZoomInRetargetAction());
  addRetargetAction(new ZoomOutRetargetAction());
  addRetargetAction(new RetargetAction(ActionFactory.CUT.getId(),null));
  addRetargetAction(new RetargetAction(ActionFactory.COPY.getId(),null));
  addRetargetAction(new RetargetAction(ActionFactory.PASTE.getId(),null));
  addRetargetAction(new RetargetAction(ImportCSSStyleAction.ID,ImportCSSStyleAction.ACTION_TEXT));
  addRetargetAction(new RetargetAction(AddStyleAction.ID,Messages.getString(""String_Node_Str"")));
  addRetargetAction(new RetargetAction(ApplyStyleMenuAction.ID,null));
  addRetargetAction(new RetargetAction(EditStyleMenuAction.ID,null));
  addRetargetAction(new RetargetAction(EditGroupMenuAction.ID,null));
  addRetargetAction(new RetargetAction(InsertGroupMenuAction.ID,null));
  registerActions(new RegisterActions[]{new RegisterActions(GEFActionConstants.TOGGLE_RULER_VISIBILITY,Messages.getString(""String_Node_Str""),IAction.AS_CHECK_BOX)});
  registerActions(new RegisterActions[]{new RegisterActions(ToggleMarginVisibilityAction.ID,ToggleMarginVisibilityAction.LABEL,IAction.AS_CHECK_BOX)});
  registerActions(getInsertElementActions());
  registerActions(elementActions);
  registerActions(dataActions);
  addRetargetAction(new RetargetAction(ImportLibraryAction.ID,ImportLibraryAction.ACTION_TEXT));
  registerActions(parameterActions);
}","protected void buildActions(){
  if (isBuilt)   return;
  isBuilt=true;
  addRetargetAction(new UndoRetargetAction());
  addRetargetAction(new RedoRetargetAction());
  addRetargetAction(new DeleteRetargetAction());
  addRetargetAction(new ZoomInRetargetAction());
  addRetargetAction(new ZoomOutRetargetAction());
  addRetargetAction(new RetargetAction(ActionFactory.CUT.getId(),null));
  addRetargetAction(new RetargetAction(ActionFactory.COPY.getId(),null));
  addRetargetAction(new RetargetAction(ActionFactory.PASTE.getId(),null));
  addRetargetAction(new RetargetAction(ImportCSSStyleAction.ID,ImportCSSStyleAction.ACTION_TEXT));
  addRetargetAction(new RetargetAction(AddStyleAction.ID,Messages.getString(""String_Node_Str"")));
  addRetargetAction(new RetargetAction(ApplyStyleMenuAction.ID,null));
  addRetargetAction(new RetargetAction(EditStyleMenuAction.ID,null));
  addRetargetAction(new RetargetAction(EditGroupMenuAction.ID,null));
  addRetargetAction(new RetargetAction(InsertGroupMenuAction.ID,null));
  registerActions(new RegisterActions[]{new RegisterActions(GEFActionConstants.TOGGLE_RULER_VISIBILITY,Messages.getString(""String_Node_Str""),IAction.AS_CHECK_BOX)});
  registerActions(new RegisterActions[]{new RegisterActions(ToggleMarginVisibilityAction.ID,ToggleMarginVisibilityAction.LABEL,IAction.AS_CHECK_BOX)});
  registerActions(getInsertElementActions());
  registerActions(elementActions);
  registerActions(dataActions);
  addRetargetAction(new RetargetAction(ImportLibraryAction.ID,ImportLibraryAction.ACTION_TEXT));
  registerActions(parameterActions);
}",0.9868715978226064
75492,"/** 
 * generate level filters.
 * @param aggregations
 * @param resultSet
 * @return
 * @throws IOException
 * @throws DataException
 */
private List generateLevelFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet) throws IOException, DataException {
  List levelFilterList=new ArrayList();
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilter filter=(AggrFilter)i.next();
    for (int j=0; !isEmptyXTab && j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
  applyTopBottomFilters(aggregations,resultSet,levelFilterList);
  return levelFilterList;
}","/** 
 * generate level filters.
 * @param aggregations
 * @param resultSet
 * @return
 * @throws IOException
 * @throws DataException
 */
private List generateLevelFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet) throws IOException, DataException {
  List levelFilterList=new ArrayList();
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilter filter=(AggrFilter)i.next();
    for (int j=0; j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
  applyTopBottomFilters(aggregations,resultSet,levelFilterList);
  return levelFilterList;
}",0.9899623588456712
75493,"/** 
 * @param aggregations
 * @param resultSet
 * @param levelFilterList
 * @throws IOException 
 * @throws DataException 
 */
private void applyTopBottomFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,List levelFilterList) throws DataException, IOException {
  for (int i=0; i < aggregations.length; i++) {
    if (aggregations[i].getAggregationFunctions() == null)     continue;
    Map levelFilterMap=new HashMap();
    for (Iterator j=topbottomFilters.iterator(); j.hasNext(); ) {
      TopBottomFilter filter=(TopBottomFilter)j.next();
      if (filter.getFilterHelper().isAggregationFilter()) {
        if (isEqualLevels(aggregations[i].getLevels(),filter.getAggrLevels())) {
          IDiskArray levelKeyList=populateLevelKeyList(aggregations[i],resultSet[i],filter);
          IDiskArray selectedLevelKeys=null;
          if (levelFilterMap.containsKey(filter.getTargetLevel())) {
            selectedLevelKeys=(IDiskArray)levelFilterMap.get(filter.getTargetLevel());
            selectedLevelKeys=interKeys(selectedLevelKeys,levelKeyList);
          }
 else {
            selectedLevelKeys=levelKeyList;
          }
          levelFilterMap.put(filter.getTargetLevel(),selectedLevelKeys);
        }
      }
    }
    for (Iterator j=levelFilterMap.keySet().iterator(); j.hasNext(); ) {
      DimLevel target=(DimLevel)j.next();
      List selectedKeyList=(List)levelFilterMap.get(target);
      if (selectedKeyList.size() == 0)       continue;
      Object[][] keys=new Object[selectedKeyList.size()][];
      for (int k=0; k < keys.length; k++) {
        keys[k]=((MultiKey)selectedKeyList.get(k)).levelKey;
      }
      ISelection selection=SelectionFactory.createMutiKeySelection(keys);
      LevelFilter filter=new LevelFilter(target,new ISelection[]{selection});
      levelFilterList.add(filter);
    }
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param levelFilterList
 * @throws IOException 
 * @throws DataException 
 */
private void applyTopBottomFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,List levelFilterList) throws DataException, IOException {
  for (int i=0; i < aggregations.length; i++) {
    if (aggregations[i].getAggregationFunctions() == null)     continue;
    Map levelFilterMap=new HashMap();
    for (Iterator j=topbottomFilters.iterator(); j.hasNext(); ) {
      TopBottomFilter filter=(TopBottomFilter)j.next();
      if (filter.getFilterHelper().isAggregationFilter()) {
        if (isEqualLevels(aggregations[i].getLevels(),filter.getAggrLevels())) {
          IDiskArray levelKeyList=populateLevelKeyList(aggregations[i],resultSet[i],filter);
          IDiskArray selectedLevelKeys=null;
          if (levelFilterMap.containsKey(filter.getTargetLevel())) {
            selectedLevelKeys=(IDiskArray)levelFilterMap.get(filter.getTargetLevel());
            selectedLevelKeys=interKeys(selectedLevelKeys,levelKeyList);
          }
 else {
            selectedLevelKeys=levelKeyList;
          }
          levelFilterMap.put(filter.getTargetLevel(),selectedLevelKeys);
        }
      }
    }
    for (Iterator j=levelFilterMap.keySet().iterator(); j.hasNext(); ) {
      DimLevel target=(DimLevel)j.next();
      IDiskArray selectedKeyArray=(IDiskArray)levelFilterMap.get(target);
      if (selectedKeyArray.size() == 0)       continue;
      Object[][] keys=new Object[selectedKeyArray.size()][];
      for (int k=0; k < keys.length; k++) {
        keys[k]=((MultiKey)selectedKeyArray.get(k)).levelKey;
      }
      ISelection selection=SelectionFactory.createMutiKeySelection(keys);
      LevelFilter filter=new LevelFilter(target,new ISelection[]{selection});
      levelFilterList.add(filter);
    }
  }
}",0.9817596566523604
75494,"/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  if (aggrFilters.isEmpty() == false || topbottomFilters.isEmpty() == false) {
    List oldFilters=new ArrayList(filters);
    addLevelFilters(generateLevelFilters(aggregations,resultSet));
    if (isEmptyXTab) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
      }
    }
 else {
      resultSet=onePassExecute(aggregations,stopSign);
    }
    filters=oldFilters;
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  if (aggrFilters.isEmpty() == false || topbottomFilters.isEmpty() == false) {
    List oldFilters=new ArrayList(filters);
    addLevelFilters(generateLevelFilters(aggregations,resultSet));
    if (isEmptyXTab) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
      }
    }
 else {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].close();
        resultSet[i]=null;
      }
      IAggregationResultSet[] temp=onePassExecute(aggregations,stopSign);
      System.arraycopy(temp,0,resultSet,0,resultSet.length);
    }
    filters=oldFilters;
  }
}",0.8700980392156863
75495,"/** 
 * generate level filters.
 * @param aggregations
 * @param resultSet
 * @return
 * @throws IOException
 * @throws DataException
 */
private List generateLevelFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet) throws IOException, DataException {
  List levelFilterList=new ArrayList();
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilter filter=(AggrFilter)i.next();
    for (int j=0; j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAxisFilter(filter,levelFilterList);
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
  applyTopBottomFilters(aggregations,resultSet,levelFilterList);
  return levelFilterList;
}","/** 
 * generate level filters.
 * @param aggregations
 * @param resultSet
 * @return
 * @throws IOException
 * @throws DataException
 */
private List generateLevelFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet) throws IOException, DataException {
  List levelFilterList=new ArrayList();
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilter filter=(AggrFilter)i.next();
    for (int j=0; j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
  applyTopBottomFilters(aggregations,resultSet,levelFilterList);
  return levelFilterList;
}",0.9698832206515058
75496,"public IAggregationResultSet[] execute(AggregationDefinition[] aggregations,StopSign stopSign) throws IOException, BirtException {
  IAggregationResultSet[] resultSet=onePassExecute(aggregations,stopSign);
  applyAggrFilter(aggregations,resultSet,stopSign);
  applyAggrSort(resultSet);
  return resultSet;
}","public IAggregationResultSet[] execute(AggregationDefinition[] aggregations,StopSign stopSign) throws IOException, BirtException {
  IAggregationResultSet[] resultSet=onePassExecute(aggregations,stopSign);
  applyAggrFilters(aggregations,resultSet,stopSign);
  applyAggrSort(resultSet);
  return resultSet;
}",0.9983739837398374
75497,"/** 
 * @param aggregations
 * @param resultSet
 * @param j
 * @param filter
 * @param levelFilters
 * @throws IOException
 * @throws DataException
 */
private void applyAggrFilter(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,int j,AggrFilter filter,List levelFilters) throws IOException, DataException {
  List selKeyValueList=new ArrayList();
  AggregationFunctionDefinition[] aggrFuncs=aggregations[j].getAggregationFunctions();
  DimLevel[] aggrLevels=filter.getAggrLevels();
  String[] fields=getAllFieldNames(aggrLevels,resultSet[j]);
  String[] aggrNames=new String[aggrFuncs.length];
  for (int k=0; k < aggrFuncs.length; k++) {
    aggrNames[k]=aggrFuncs[k].getName();
  }
  for (int k=0; k < resultSet[j].length(); k++) {
    resultSet[j].seek(k);
    int fieldIndex=0;
    Object[] fieldValues=new Object[fields.length];
    Object[] aggrValues=new Object[aggrFuncs.length];
    for (int m=0; m < aggrLevels.length; m++) {
      int levelIndex=resultSet[j].getLevelIndex(aggrLevels[m]);
      if (levelIndex < 0 || levelIndex >= resultSet[j].getLevelCount())       continue;
      fieldValues[fieldIndex++]=resultSet[j].getLevelKeyValue(levelIndex)[0];
    }
    for (int m=0; m < aggrFuncs.length; m++) {
      int aggrIndex=resultSet[j].getAggregationIndex(aggrNames[m]);
      aggrValues[m]=resultSet[j].getAggregationValue(aggrIndex);
    }
    RowForFilter row=new RowForFilter(fields,aggrNames);
    row.setFieldValues(fieldValues);
    row.setAggrValues(aggrValues);
    boolean isSelect=filter.getFilterHelper().evaluateFilter(row);
    if (isSelect) {
      int levelIndex=resultSet[j].getLevelIndex(filter.getTargetLevel());
      Object[] levelKeyValue=resultSet[j].getLevelKeyValue(levelIndex);
      if (levelKeyValue != null && levelKeyValue[0] != null)       selKeyValueList.add(levelKeyValue);
    }
  }
  if (selKeyValueList.isEmpty()) {
    noRecal[j]=true;
  }
 else {
    Object[][] keyValues=new Object[selKeyValueList.size()][];
    for (int i=0; i < selKeyValueList.size(); i++) {
      keyValues[i]=(Object[])selKeyValueList.get(i);
    }
    ISelection selection=SelectionFactory.createMutiKeySelection(keyValues);
    LevelFilter levelFilter=new LevelFilter(filter.getTargetLevel(),new ISelection[]{selection});
    levelFilters.add(levelFilter);
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param j
 * @param filter
 * @param levelFilters
 * @throws IOException
 * @throws DataException
 */
private void applyAggrFilter(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,int j,AggrFilter filter,List levelFilters) throws IOException, DataException {
  List selKeyValueList=new ArrayList();
  AggregationFunctionDefinition[] aggrFuncs=aggregations[j].getAggregationFunctions();
  DimLevel[] aggrLevels=filter.getAggrLevels();
  String[] fields=getAllFieldNames(aggrLevels,resultSet[j]);
  String[] aggrNames=new String[aggrFuncs.length];
  for (int k=0; k < aggrFuncs.length; k++) {
    aggrNames[k]=aggrFuncs[k].getName();
  }
  for (int k=0; k < resultSet[j].length(); k++) {
    resultSet[j].seek(k);
    int fieldIndex=0;
    Object[] fieldValues=new Object[fields.length];
    Object[] aggrValues=new Object[aggrFuncs.length];
    for (int m=0; m < aggrLevels.length; m++) {
      int levelIndex=resultSet[j].getLevelIndex(aggrLevels[m]);
      if (levelIndex < 0 || levelIndex >= resultSet[j].getLevelCount())       continue;
      fieldValues[fieldIndex++]=resultSet[j].getLevelKeyValue(levelIndex)[0];
    }
    for (int m=0; m < aggrFuncs.length; m++) {
      int aggrIndex=resultSet[j].getAggregationIndex(aggrNames[m]);
      aggrValues[m]=resultSet[j].getAggregationValue(aggrIndex);
    }
    RowForFilter row=new RowForFilter(fields,aggrNames);
    row.setFieldValues(fieldValues);
    row.setAggrValues(aggrValues);
    boolean isSelect=filter.getFilterHelper().evaluateFilter(row);
    if (isSelect) {
      int levelIndex=resultSet[j].getLevelIndex(filter.getTargetLevel());
      Object[] levelKeyValue=resultSet[j].getLevelKeyValue(levelIndex);
      if (levelKeyValue != null && levelKeyValue[0] != null)       selKeyValueList.add(levelKeyValue);
    }
  }
  if (selKeyValueList.isEmpty()) {
    skip[j]=true;
  }
 else {
    Object[][] keyValues=new Object[selKeyValueList.size()][];
    for (int i=0; i < selKeyValueList.size(); i++) {
      keyValues[i]=(Object[])selKeyValueList.get(i);
    }
    ISelection selection=SelectionFactory.createMutiKeySelection(keyValues);
    LevelFilter levelFilter=new LevelFilter(filter.getTargetLevel(),new ISelection[]{selection});
    levelFilters.add(levelFilter);
  }
}",0.9976226496650096
75498,"/** 
 * Test the meta-data parser for class definition.
 */
public void testMethodsWithDifferentArgumentLists(){
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  assertEquals(13,dd.getClasses().size());
  IClassInfo classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo constructor=classInfo.getConstructor();
  assertNotNull(constructor);
  Iterator argumentList=constructor.argumentListIterator();
  assertTrue(argumentList.hasNext());
  Iterator arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(argumentList.hasNext());
  classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo method=classInfo.getMethod(""String_Node_Str"");
  argumentList=method.argumentListIterator();
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  ArgumentInfo argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  assertFalse(argumentList.hasNext());
}","/** 
 * Test the meta-data parser for class definition.
 */
public void testMethodsWithDifferentArgumentLists(){
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  assertEquals(13,dd.getClasses().size());
  IClassInfo classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo constructor=classInfo.getConstructor();
  assertNotNull(constructor);
  Iterator argumentList=constructor.argumentListIterator();
  assertTrue(argumentList.hasNext());
  Iterator arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(argumentList.hasNext());
  classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo method=classInfo.getMethod(""String_Node_Str"");
  argumentList=method.argumentListIterator();
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  ArgumentInfo argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  assertFalse(argumentList.hasNext());
}",0.8531383302864107
75499,"void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da.getCoordinate(i);
    if (bRendering3D) {
      context.y3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - IConstants.TICK_SIZE) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + IConstants.TICK_SIZE : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == -1 && y - daMinor[k] <= da.getCoordinate(i + 1)) || (iDirection == 1 && y + daMinor[k] >= da.getCoordinate(i + 1))) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(dXMinorTick1,y + iDirection * daMinor[k]));
              lreMinor.setEnd(LocationImpl.create(dXMinorTick2,y + iDirection * daMinor[k]));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.setStart(LocationImpl.create(context.dX,y));
          lre.setEnd(LocationImpl.create(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderVerticalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  final double x=(iLabelLocation == IConstants.LEFT) ? context.dTick1 - 1 : context.dTick2 + 1;
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int y=(int)da.getCoordinate(i);
    if (bRendering3D) {
      context.y3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dXMinorTick1=((iMinorTickStyle & IConstants.TICK_LEFT) == IConstants.TICK_LEFT) ? (context.dX - IConstants.TICK_SIZE) : context.dX;
      double dXMinorTick2=((iMinorTickStyle & IConstants.TICK_RIGHT) == IConstants.TICK_RIGHT) ? context.dX + IConstants.TICK_SIZE : context.dX;
      if (dXMinorTick1 != dXMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderOrthogonal3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == -1 && y - daMinor[k] <= da.getCoordinate(i + 1)) || (iDirection == 1 && y + daMinor[k] >= da.getCoordinate(i + 1))) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(dXMinorTick1,y + iDirection * daMinor[k]));
              lreMinor.setEnd(LocationImpl.create(dXMinorTick2,y + iDirection * daMinor[k]));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderOrthogonal3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(context.dTick1,y);
          lre.getEnd().set(context.dTick2,y);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.setStart(LocationImpl.create(context.dX,y));
          lre.setEnd(LocationImpl.create(context.dX + dSeriesThickness,y - dSeriesThickness));
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      double sx=x;
      double sx2=dXEnd;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.LEFT) {
          sx-=dStaggeredLabelOffset;
          sx2+=dStaggeredLabelOffset;
        }
 else {
          sx+=dStaggeredLabelOffset;
          sx2-=dStaggeredLabelOffset;
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          lo3d.set(sx - pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZEnd + pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.LEFT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
          lo3d.set(sx2 + pwa.getHorizontalSpacingInPixels(),context.y3d + dOffset,dZ - pwa.getHorizontalSpacingInPixels());
          t3dre.setLocation3D(lo3d);
          t3dre.setTextPosition(TextRenderEvent.RIGHT);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(sx,y + dOffset);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9867442612350468
75500,"void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da.getCoordinate(i);
    if (bRendering3D) {
      context.x3d=(int)da3D.getCoordinate(i);
      context.z3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + IConstants.TICK_SIZE : context.dY - IConstants.TICK_SIZE) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - IConstants.TICK_SIZE : context.dY + IConstants.TICK_SIZE) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == 1 && x + daMinor[k] >= da.getCoordinate(i + 1)) || (iDirection == -1 && x - daMinor[k] <= da.getCoordinate(i + 1))) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick1));
              lreMinor.setEnd(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick2));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}","void renderHorizontalAxisByType(ComputationContext context,double dXEnd,double dZEnd,double dZ,double dStaggeredLabelOffset) throws ChartException {
  final int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
  IAxisTypeComputation computation=createAxisTypeComputation(context);
  computation.initialize();
  final double dOffset=computation instanceof TextAxisTypeComputation && bTickBetweenCategories ? iDirection * sc.getUnitSize() / 2 : 0;
  final int length=computation instanceof TextAxisTypeComputation ? da.size() - 1 : da.size();
  double y=(iLabelLocation == IConstants.ABOVE) ? (bRendering3D ? context.dTick1 + 1 : context.dTick1 - 1) : (bRendering3D ? context.dTick2 - 1 : context.dTick2 + 1);
  for (int i=0; i < length; i++) {
    computation.handlePreEachTick(i);
    int x=(int)da.getCoordinate(i);
    if (bRendering3D) {
      context.x3d=(int)da3D.getCoordinate(i);
      context.z3d=(int)da3D.getCoordinate(i);
    }
    if ((iWhatToDraw & IConstants.AXIS) == IConstants.AXIS) {
      double dYMinorTick1=((iMinorTickStyle & IConstants.TICK_ABOVE) == IConstants.TICK_ABOVE) ? (bRendering3D ? context.dY + IConstants.TICK_SIZE : context.dY - IConstants.TICK_SIZE) : context.dY;
      double dYMinorTick2=((iMinorTickStyle & IConstants.TICK_BELOW) == IConstants.TICK_BELOW) ? (bRendering3D ? context.dY - IConstants.TICK_SIZE : context.dY + IConstants.TICK_SIZE) : context.dY;
      if (dYMinorTick1 != -dYMinorTick2) {
        if (i != da.size() - 1) {
          if (bRenderBase3DAxis) {
          }
 else           if (bRenderAncillary3DAxis) {
          }
 else {
            LineRenderEvent lreMinor=null;
            for (int k=0; k < daMinor.length - 1; k++) {
              if (computation instanceof LinearAxisTypeComputation) {
                if ((iDirection == 1 && x + daMinor[k] >= da.getCoordinate(i + 1)) || (iDirection == -1 && x - daMinor[k] <= da.getCoordinate(i + 1))) {
                  continue;
                }
              }
              lreMinor=(LineRenderEvent)((EventObjectCache)ipr).getEventObject(StructureSource.createAxis(axModel),LineRenderEvent.class);
              lreMinor.setLineAttributes(liaMinorTick);
              lreMinor.setStart(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick1));
              lreMinor.setEnd(LocationImpl.create(x + iDirection * daMinor[k],dYMinorTick2));
              ipr.drawLine(lreMinor);
            }
          }
        }
      }
      if (computation instanceof TextAxisTypeComputation && !bTickBetweenCategories && i == 0) {
        continue;
      }
      if (context.dTick1 != context.dTick2) {
        if (bRenderBase3DAxis) {
        }
 else         if (bRenderAncillary3DAxis) {
        }
 else {
          lre.setLineAttributes(liaMajorTick);
          lre.getStart().set(x,context.dTick1);
          lre.getEnd().set(x,context.dTick2);
          ipr.drawLine(lre);
        }
        if (iv != null && iDimension == IConstants.TWO_5_D && iv.getType() == IntersectionValue.VALUE) {
          lre.getStart().set(x,context.dY);
          lre.getEnd().set(x + dSeriesThickness,context.dY - dSeriesThickness);
          ipr.drawLine(lre);
        }
      }
    }
    if (bRenderAxisLabels && sc.isTickLabelVisible(i)) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_AXIS_LABEL,la);
      double sy=y;
      if (bAxisLabelStaggered && sc.isTickLabelStaggered(i)) {
        if (iLabelLocation == IConstants.ABOVE) {
          sy-=dStaggeredLabelOffset;
        }
 else {
          sy+=dStaggeredLabelOffset;
        }
      }
      if (ax.getLabel().isVisible() && la.isVisible()) {
        if (bRendering3D) {
          if (axisType == IConstants.BASE_AXIS) {
            lo3d.set(context.x3d + dOffset,sy - pwa.getVerticalSpacingInPixels(),dZEnd + pwa.getVerticalSpacingInPixels());
          }
 else {
            lo3d.set(dXEnd + pwa.getVerticalSpacingInPixels(),sy - pwa.getVerticalSpacingInPixels(),context.z3d + dOffset);
          }
          t3dre.setLocation3D(lo3d);
          t3dre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          dc.addLabel(t3dre);
        }
 else {
          lo.set(x + dOffset,sy);
          tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
          ipr.drawText(tre);
        }
      }
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_AXIS_LABEL,axModel,la,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_AXIS_LABEL,la);
    }
    computation.handlePostEachTick(i);
  }
  computation.close();
}",0.9868350636840416
75501,"public void makeUniqueName(DesignElement element){
  if (element == null)   return;
  ElementDefn eDefn=(ElementDefn)element.getDefn();
  if (!getElement().getDefn().isKindOf(eDefn.getNameConfig().getNameContainer())) {
    INameHelper nameHelper=new NameExecutor(element).getNameHelper(getElement().getRoot());
    if (nameHelper != null)     nameHelper.makeUniqueName(element);
    return;
  }
  String name=getUniqueName(element);
  if (name == null)   return;
  NameSpace nameSpace=getCachedNameSpace(eDefn.getNameSpaceID());
  if (nameSpace.getElement(name) == element) {
    nameSpace.rename(element,element.getName(),name);
    return;
  }
  element.setName(name.trim());
  nameSpace.insert(element);
}","public void makeUniqueName(DesignElement element){
  if (element == null)   return;
  ElementDefn eDefn=(ElementDefn)element.getDefn();
  if (!getElement().getDefn().isKindOf(eDefn.getNameConfig().getNameContainer())) {
    INameHelper nameHelper=new NameExecutor(element).getNameHelper(getElement().getRoot());
    if (nameHelper != null)     nameHelper.makeUniqueName(element);
    return;
  }
  String name=getUniqueName(element);
  if (name == null)   return;
  NameSpace nameSpace=getCachedNameSpace(eDefn.getNameSpaceID());
  DesignElement cachedElement=nameSpace.getElement(name);
  if (cachedElement == null) {
    element.setName(name.trim());
    nameSpace.insert(element);
  }
}",0.8340486409155937
75502,"private void createMiscArea(){
  cmpMisc=new Composite(cmpRight,SWT.NONE);
  cmpMisc.setLayout(new GridLayout(4,false));
  cmpMisc.setLayoutData(new GridData(GridData.FILL_BOTH));
  lblDimension=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    lblDimension.setLayoutData(gd);
    lblDimension.setText(Messages.getString(""String_Node_Str""));
  }
  cbDimension=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.GRAB_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbDimension.setLayoutData(gd);
    cbDimension.addSelectionListener(this);
  }
  lblOutput=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblOutput.setLayoutData(gd);
    lblOutput.setText(Messages.getString(""String_Node_Str""));
  }
  cbOutput=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.GRAB_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbOutput.setLayoutData(gd);
    cbOutput.addSelectionListener(this);
  }
  lblMultipleY=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    lblMultipleY.setLayoutData(gd);
    lblMultipleY.setText(Messages.getString(""String_Node_Str""));
  }
  cbMultipleY=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    cbMultipleY.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    cbMultipleY.setLayoutData(gd);
    cbMultipleY.addSelectionListener(this);
    int axisNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    selectMultipleAxis(axisNum);
  }
  lblSeriesType=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblSeriesType.setLayoutData(gd);
    lblSeriesType.setText(Messages.getString(""String_Node_Str""));
    lblSeriesType.setEnabled(false);
  }
  cbSeriesType=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.GRAB_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbSeriesType.setLayoutData(gd);
    cbSeriesType.setEnabled(false);
    cbSeriesType.addSelectionListener(this);
  }
  lblOrientation=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    lblOrientation.setLayoutData(gd);
    lblOrientation.setText(Messages.getString(""String_Node_Str""));
  }
  cbOrientation=new Button(cmpMisc,SWT.CHECK);
{
    cbOrientation.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=3;
    cbOrientation.setLayoutData(gd);
    cbOrientation.addSelectionListener(this);
  }
  populateLists();
}","private void createMiscArea(){
  cmpMisc=new Composite(cmpRight,SWT.NONE);
  cmpMisc.setLayout(new GridLayout(4,false));
  cmpMisc.setLayoutData(new GridData(GridData.FILL_BOTH));
  lblDimension=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    lblDimension.setLayoutData(gd);
    lblDimension.setText(Messages.getString(""String_Node_Str""));
  }
  cbDimension=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbDimension.setLayoutData(gd);
    cbDimension.addSelectionListener(this);
  }
  lblOutput=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblOutput.setLayoutData(gd);
    lblOutput.setText(Messages.getString(""String_Node_Str""));
  }
  cbOutput=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbOutput.setLayoutData(gd);
    cbOutput.addSelectionListener(this);
  }
  lblMultipleY=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    lblMultipleY.setLayoutData(gd);
    lblMultipleY.setText(Messages.getString(""String_Node_Str""));
  }
  cbMultipleY=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    cbMultipleY.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbMultipleY.setLayoutData(gd);
    cbMultipleY.addSelectionListener(this);
    int axisNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    selectMultipleAxis(axisNum);
  }
  lblSeriesType=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.horizontalIndent=10;
    gd.widthHint=LABEL_WIDTH_HINT;
    lblSeriesType.setLayoutData(gd);
    lblSeriesType.setText(Messages.getString(""String_Node_Str""));
    lblSeriesType.setEnabled(false);
  }
  cbSeriesType=new Combo(cmpMisc,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.widthHint=LABEL_WIDTH_HINT;
    cbSeriesType.setLayoutData(gd);
    cbSeriesType.setEnabled(false);
    cbSeriesType.addSelectionListener(this);
  }
  lblOrientation=new Label(cmpMisc,SWT.WRAP);
{
    GridData gd=new GridData();
    gd.widthHint=LABEL_WIDTH_HINT;
    lblOrientation.setLayoutData(gd);
    lblOrientation.setText(Messages.getString(""String_Node_Str""));
  }
  cbOrientation=new Button(cmpMisc,SWT.CHECK);
{
    cbOrientation.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData();
    gd.horizontalSpan=3;
    cbOrientation.setLayoutData(gd);
    cbOrientation.addSelectionListener(this);
  }
  populateLists();
}",0.9916463626870868
75503,"/** 
 * generate level filters.
 * @param aggregations
 * @param resultSet
 * @return
 * @throws IOException
 * @throws DataException
 */
private List generateLevelFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet) throws IOException, DataException {
  List levelFilterList=new ArrayList();
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilter filter=(AggrFilter)i.next();
    for (int j=0; j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
  applyTopBottomFilters(aggregations,resultSet,levelFilterList);
  return levelFilterList;
}","/** 
 * generate level filters.
 * @param aggregations
 * @param resultSet
 * @return
 * @throws IOException
 * @throws DataException
 */
private List generateLevelFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet) throws IOException, DataException {
  List levelFilterList=new ArrayList();
  for (Iterator i=aggrFilters.iterator(); i.hasNext(); ) {
    AggrFilter filter=(AggrFilter)i.next();
    for (int j=0; !isEmptyXTab && j < aggregations.length; j++) {
      if (aggregations[j].getAggregationFunctions() != null && isEqualLevels(aggregations[j].getLevels(),filter.getAggrLevels())) {
        applyAggrFilter(aggregations,resultSet,j,filter,levelFilterList);
      }
    }
  }
  applyTopBottomFilters(aggregations,resultSet,levelFilterList);
  return levelFilterList;
}",0.9899623588456712
75504,"/** 
 * @param aggregations
 * @param resultSet
 * @param j
 * @param filter
 * @param levelFilters
 * @throws IOException
 * @throws DataException
 */
private void applyAggrFilter(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,int j,AggrFilter filter,List levelFilters) throws IOException, DataException {
  List selKeyValueList=new ArrayList();
  AggregationFunctionDefinition[] aggrFuncs=aggregations[j].getAggregationFunctions();
  DimLevel[] aggrLevels=filter.getAggrLevels();
  String[] fields=getAllFieldNames(aggrLevels,resultSet[j]);
  String[] aggrNames=new String[aggrFuncs.length];
  for (int k=0; k < aggrFuncs.length; k++) {
    aggrNames[k]=aggrFuncs[k].getName();
  }
  for (int k=0; k < resultSet[j].length(); k++) {
    resultSet[j].seek(k);
    int fieldIndex=0;
    Object[] fieldValues=new Object[fields.length];
    Object[] aggrValues=new Object[aggrFuncs.length];
    for (int m=0; m < aggrLevels.length; m++) {
      int levelIndex=resultSet[j].getLevelIndex(aggrLevels[m]);
      if (levelIndex < 0 || levelIndex >= resultSet[j].getLevelCount())       continue;
      fieldValues[fieldIndex++]=resultSet[j].getLevelKeyValue(levelIndex)[0];
    }
    for (int m=0; m < aggrFuncs.length; m++) {
      int aggrIndex=resultSet[j].getAggregationIndex(aggrNames[m]);
      aggrValues[m]=resultSet[j].getAggregationValue(aggrIndex);
    }
    RowForFilter row=new RowForFilter(fields,aggrNames);
    row.setFieldValues(fieldValues);
    row.setAggrValues(aggrValues);
    boolean isSelect=filter.getFilterHelper().evaluateFilter(row);
    if (isSelect) {
      int levelIndex=resultSet[j].getLevelIndex(filter.getTargetLevel());
      Object[] levelKeyValue=resultSet[j].getLevelKeyValue(levelIndex);
      if (levelKeyValue != null && levelKeyValue[0] != null)       selKeyValueList.add(levelKeyValue);
    }
  }
  if (selKeyValueList.isEmpty()) {
    skip[j]=true;
  }
 else {
    Object[][] keyValues=new Object[selKeyValueList.size()][];
    for (int i=0; i < selKeyValueList.size(); i++) {
      keyValues[i]=(Object[])selKeyValueList.get(i);
    }
    ISelection selection=SelectionFactory.createMutiKeySelection(keyValues);
    LevelFilter levelFilter=new LevelFilter(filter.getTargetLevel(),new ISelection[]{selection});
    levelFilters.add(levelFilter);
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param j
 * @param filter
 * @param levelFilters
 * @throws IOException
 * @throws DataException
 */
private void applyAggrFilter(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,int j,AggrFilter filter,List levelFilters) throws IOException, DataException {
  List selKeyValueList=new ArrayList();
  AggregationFunctionDefinition[] aggrFuncs=aggregations[j].getAggregationFunctions();
  DimLevel[] aggrLevels=filter.getAggrLevels();
  String[] fields=getAllFieldNames(aggrLevels,resultSet[j]);
  String[] aggrNames=new String[aggrFuncs.length];
  for (int k=0; k < aggrFuncs.length; k++) {
    aggrNames[k]=aggrFuncs[k].getName();
  }
  for (int k=0; k < resultSet[j].length(); k++) {
    resultSet[j].seek(k);
    int fieldIndex=0;
    Object[] fieldValues=new Object[fields.length];
    Object[] aggrValues=new Object[aggrFuncs.length];
    for (int m=0; m < aggrLevels.length; m++) {
      int levelIndex=resultSet[j].getLevelIndex(aggrLevels[m]);
      if (levelIndex < 0 || levelIndex >= resultSet[j].getLevelCount())       continue;
      fieldValues[fieldIndex++]=resultSet[j].getLevelKeyValue(levelIndex)[0];
    }
    for (int m=0; m < aggrFuncs.length; m++) {
      int aggrIndex=resultSet[j].getAggregationIndex(aggrNames[m]);
      aggrValues[m]=resultSet[j].getAggregationValue(aggrIndex);
    }
    RowForFilter row=new RowForFilter(fields,aggrNames);
    row.setFieldValues(fieldValues);
    row.setAggrValues(aggrValues);
    boolean isSelect=filter.getFilterHelper().evaluateFilter(row);
    if (isSelect) {
      int levelIndex=resultSet[j].getLevelIndex(filter.getTargetLevel());
      Object[] levelKeyValue=resultSet[j].getLevelKeyValue(levelIndex);
      if (levelKeyValue != null && levelKeyValue[0] != null)       selKeyValueList.add(levelKeyValue);
    }
  }
  if (selKeyValueList.isEmpty()) {
    isEmptyXTab=true;
  }
 else {
    Object[][] keyValues=new Object[selKeyValueList.size()][];
    for (int i=0; i < selKeyValueList.size(); i++) {
      keyValues[i]=(Object[])selKeyValueList.get(i);
    }
    ISelection selection=SelectionFactory.createMutiKeySelection(keyValues);
    LevelFilter levelFilter=new LevelFilter(filter.getTargetLevel(),new ISelection[]{selection});
    levelFilters.add(levelFilter);
  }
}",0.996542783059637
75505,"/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  skip=new boolean[aggregations.length];
  if (aggrFilters.isEmpty() == false || topbottomFilters.isEmpty() == false) {
    List oldFilters=new ArrayList(filters);
    addLevelFilters(generateLevelFilters(aggregations,resultSet));
    List aggrList=new ArrayList();
    for (int i=0; i < skip.length; i++) {
      if (skip[i] == false) {
        aggrList.add(aggregations[i]);
        resultSet[i].close();
        resultSet[i]=null;
      }
 else {
        resultSet[i].clear();
      }
    }
    if (aggrList.size() > 0) {
      AggregationDefinition[] recalAggrs=new AggregationDefinition[aggrList.size()];
      aggrList.toArray(recalAggrs);
      IAggregationResultSet[] recalResultSet=onePassExecute(recalAggrs,stopSign);
      for (int i=0, index=0; i < skip.length; i++) {
        if (skip[i] == false) {
          resultSet[i]=recalResultSet[index++];
        }
      }
    }
    filters=oldFilters;
  }
}","/** 
 * @param aggregations
 * @param resultSet
 * @param stopSign
 * @throws IOException
 * @throws DataException
 * @throws BirtException
 */
private void applyAggrFilters(AggregationDefinition[] aggregations,IAggregationResultSet[] resultSet,StopSign stopSign) throws IOException, DataException, BirtException {
  if (aggrFilters.isEmpty() == false || topbottomFilters.isEmpty() == false) {
    List oldFilters=new ArrayList(filters);
    addLevelFilters(generateLevelFilters(aggregations,resultSet));
    if (isEmptyXTab) {
      for (int i=0; i < resultSet.length; i++) {
        resultSet[i].clear();
      }
    }
 else {
      resultSet=onePassExecute(aggregations,stopSign);
    }
    filters=oldFilters;
  }
}",0.686858316221766
75506,"/** 
 * Returns a <code>List</code> containing the currently selected objects.
 * @return A List containing the currently selected objects.
 */
protected IStructuredSelection getSelection(){
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object selectVariable=context.getVariable(ISources.ACTIVE_CURRENT_SELECTION_NAME);
  if (selectVariable instanceof IStructuredSelection) {
    return (IStructuredSelection)selectVariable;
  }
 else {
    return new StructuredSelection(selectVariable);
  }
}","/** 
 * Returns a <code>List</code> containing the currently selected objects.
 * @return A List containing the currently selected objects.
 */
protected IStructuredSelection getSelection(){
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object selectVariable=context.getVariable(ISources.ACTIVE_CURRENT_SELECTION_NAME);
  if (selectVariable != null) {
    if (selectVariable instanceof IStructuredSelection) {
      return (IStructuredSelection)selectVariable;
    }
 else {
      return new StructuredSelection(selectVariable);
    }
  }
  return null;
}",0.9295272078501338
75507,"/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  boolean isEditPart=false;
  List selList=null;
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.SELECTION);
  if (obj != null) {
    selList=new ArrayList();
    selList.add(obj);
  }
  if (selList == null || selList.size() < 1) {
    return Collections.EMPTY_LIST;
  }
  for (int i=0; i < selList.size(); i++) {
    if (selList.get(i) instanceof ReportElementEditPart) {
      isEditPart=true;
    }
  }
  if (isEditPart) {
    selList=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selList;
}","/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  boolean isEditPart=false;
  List selList=null;
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.SELECTION);
  if (obj != null) {
    selList=new ArrayList();
    selList.add(obj);
  }
  if (selList == null || selList.size() < 1) {
    selList=getSelectedObjects();
  }
  for (int i=0; i < selList.size(); i++) {
    if (selList.get(i) instanceof ReportElementEditPart) {
      isEditPart=true;
    }
  }
  if (isEditPart) {
    selList=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selList;
}",0.9633577614923384
75508,"/** 
 * Returns a <code>List</code> containing the currently selected objects.
 * @return A List containing the currently selected objects.
 */
protected List getSelectedObjects(){
  Object selectVariable=getSelection();
  if (!(selectVariable instanceof IStructuredSelection))   return Collections.EMPTY_LIST;
  return ((IStructuredSelection)selectVariable).toList();
}","/** 
 * Returns a <code>List</code> containing the currently selected objects.
 * @return A List containing the currently selected objects.
 */
protected List getSelectedObjects(){
  Object selectVariable=getSelection();
  if (selectVariable == null || !(selectVariable instanceof IStructuredSelection))   return Collections.EMPTY_LIST;
  return ((IStructuredSelection)selectVariable).toList();
}",0.9660574412532638
75509,"public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  PlaceResources.copy(composite.getShell(),getDefaultLocation(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  if (item.getParentItem().getText().equals(DRILL_TO_DETAILS_CATEGORY)) {
    PlaceResources.copyDrillThroughReport(composite.getShell(),reportProject.getLocation().toOSString(),item.getText());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),getDefaultLocation());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),getDefaultLocation());
  }
}","public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  PlaceResources.copy(composite.getShell(),getDefaultLocation(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  if (item.getParentItem().getText().equals(DRILL_TO_DETAILS_CATEGORY)) {
    PlaceResources.copyDrillThroughReport(composite.getShell(),getDefaultLocation(),item.getText());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),getDefaultLocation());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),getDefaultLocation());
  }
}",0.9775413711583923
75510,"/** 
 * @param name
 * @param expression
 * @deprecated
 */
public void addResultSetExpression(String name,IBaseExpression expression){
  Binding binding=new Binding(name);
  binding.setExpression(expression);
  this.bindingMap.put(name,binding);
}","/** 
 * @param name
 * @param expression
 * @deprecated
 */
public void addResultSetExpression(String name,IBaseExpression expression){
  Binding binding=new Binding(name);
  binding.setExpression(expression);
  if (expression != null)   binding.setDataType(expression.getDataType());
  this.bindingMap.put(name,binding);
}",0.8686514886164624
75511,"public Binding(String name,IBaseExpression expr){
  this.name=name;
  this.expr=expr;
  this.aggregateOn=new ArrayList();
  this.argument=new ArrayList();
  this.dataType=DataType.ANY_TYPE;
}","public Binding(String name,IBaseExpression expr){
  this.name=name;
  this.expr=expr;
  this.aggregateOn=new ArrayList();
  this.argument=new ArrayList();
  if (expr != null)   this.dataType=expr.getDataType();
 else   this.dataType=DataType.ANY_TYPE;
}",0.8603603603603603
75512,"/** 
 * Pass the oda result set.
 * @param odaResultSet
 * @throws DataException
 */
private void pass(OdiResultSetWrapper odaResultSet) throws DataException {
  prepareFetchEventList();
  PassStatusController psController=new PassStatusController(populator,filterByRow,computedColumnHelper);
  if (!psController.needMultipassProcessing()) {
    doSinglePass(odaResultSet);
  }
 else {
    doMultiPass(odaResultSet,psController);
  }
  calculateAggregationsInColumnBinding();
  try {
    Context cx=Context.enter();
    ExpressionCompiler compiler=new ExpressionCompiler();
    compiler.setDataSetMode(false);
    for (Iterator it=this.populator.getEventHandler().getColumnBindings().values().iterator(); it.hasNext(); ) {
      IBinding binding=(IBinding)it.next();
      if (binding.getExpression() != null && binding.getExpression().getGroupName() == null && binding.getAggrFunction() != null) {
        compiler.compile(binding.getExpression(),cx);
      }
    }
  }
  finally {
    Context.exit();
  }
  populateAggregationInBinding();
}","/** 
 * Pass the oda result set.
 * @param odaResultSet
 * @throws DataException
 */
private void pass(OdiResultSetWrapper odaResultSet) throws DataException {
  prepareFetchEventList();
  PassStatusController psController=new PassStatusController(populator,filterByRow,computedColumnHelper);
  if (!psController.needMultipassProcessing()) {
    doSinglePass(odaResultSet);
  }
 else {
    doMultiPass(odaResultSet,psController);
  }
  calculateAggregationsInColumnBinding();
  try {
    Context cx=Context.enter();
    ExpressionCompiler compiler=new ExpressionCompiler();
    compiler.setDataSetMode(false);
    for (Iterator it=this.populator.getEventHandler().getColumnBindings().values().iterator(); it.hasNext(); ) {
      try {
        IBinding binding=(IBinding)it.next();
        compiler.compile(binding.getExpression(),cx);
      }
 catch (      DataException e) {
      }
    }
  }
  finally {
    Context.exit();
  }
  populateAggregationInBinding();
}",0.776283009466866
75513,"private BindingColumn(String columnName,IBaseExpression baseExpr,boolean isAggregation,int type){
  this.columnName=columnName;
  this.baseExpr=baseExpr;
  this.isAggregation=isAggregation;
  this.type=type;
}","private BindingColumn(String columnName,IBaseExpression baseExpr,boolean isAggregation,int type){
  this.columnName=columnName;
  this.baseExpr=baseExpr;
  this.isAggregation=isAggregation;
  this.type=type;
  if (this.baseExpr instanceof ScriptExpression) {
    ((ScriptExpression)this.baseExpr).setDataType(type);
  }
}",0.7886792452830189
75514,"/** 
 * @param aggrComputedColumns
 * @throws DataException
 */
private void populateAggrCCs(List aggrComputedColumns) throws DataException {
  if (aggrComputedColumns.size() == 0)   return;
  ExpressionCompiler compiler=new ExpressionCompiler();
  compiler.setDataSetMode(true);
  try {
    Context cx=Context.enter();
    List aggrInfos=new ArrayList();
    List aggrNames=new ArrayList();
    for (int i=0; i < aggrComputedColumns.size(); i++) {
      ComputedColumn cc=(ComputedColumn)aggrComputedColumns.get(i);
      List args=cc.getAggregateArgument();
      IBaseExpression[] exprs=null;
      int offset=0;
      if (cc.getExpression() != null) {
        exprs=new IBaseExpression[args.size() + 1];
        offset=1;
        exprs[0]=cc.getExpression();
      }
 else       exprs=new IBaseExpression[args.size()];
      for (int j=offset; j < args.size(); j++) {
        exprs[j]=(IBaseExpression)args.get(j - offset);
      }
      for (int j=0; j < exprs.length; j++) {
        compiler.compile(exprs[j],cx);
      }
      IAggregation aggrFunction=AggregationFactory.getInstance().getAggregation(cc.getAggregateFunction());
      IAggrInfo aggrInfo=new AggrInfo(cc.getName(),0,aggrFunction,exprs,cc.getAggregateFilter());
      aggrInfos.add(aggrInfo);
      aggrNames.add(cc.getName());
    }
    if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING))     PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    AggregationHelper helper=new AggregationHelper(new AggrDefnManager(aggrInfos),this.populator);
    AggrComputedColumnHelper ccHelper=new AggrComputedColumnHelper(helper,aggrNames);
    this.populator.getQuery().getFetchEvents().add(0,ccHelper);
    PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    this.populator.getQuery().getFetchEvents().remove(0);
  }
  finally {
    Context.exit();
  }
}","/** 
 * @param aggrComputedColumns
 * @throws DataException
 */
private void populateAggrCCs(List aggrComputedColumns) throws DataException {
  if (aggrComputedColumns.size() == 0)   return;
  ExpressionCompiler compiler=new ExpressionCompiler();
  compiler.setDataSetMode(true);
  try {
    Context cx=Context.enter();
    List aggrInfos=new ArrayList();
    List aggrNames=new ArrayList();
    for (int i=0; i < aggrComputedColumns.size(); i++) {
      ComputedColumn cc=(ComputedColumn)aggrComputedColumns.get(i);
      List args=cc.getAggregateArgument();
      IBaseExpression[] exprs=null;
      int offset=0;
      if (cc.getExpression() != null) {
        exprs=new IBaseExpression[args.size() + 1];
        offset=1;
        exprs[0]=cc.getExpression();
      }
 else       exprs=new IBaseExpression[args.size()];
      for (int j=offset; j < args.size() + offset; j++) {
        exprs[j]=(IBaseExpression)args.get(j - offset);
      }
      for (int j=0; j < exprs.length; j++) {
        compiler.compile(exprs[j],cx);
      }
      if (cc.getAggregateFilter() != null)       compiler.compile(cc.getAggregateFilter(),cx);
      IAggregation aggrFunction=AggregationFactory.getInstance().getAggregation(cc.getAggregateFunction());
      IAggrInfo aggrInfo=new AggrInfo(cc.getName(),0,aggrFunction,exprs,cc.getAggregateFilter());
      aggrInfos.add(aggrInfo);
      aggrNames.add(cc.getName());
    }
    if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING))     PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    AggregationHelper helper=new AggregationHelper(new AggrDefnManager(aggrInfos),this.populator);
    AggrComputedColumnHelper ccHelper=new AggrComputedColumnHelper(helper,aggrNames);
    this.populator.getQuery().getFetchEvents().add(0,ccHelper);
    PassUtil.pass(populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
    this.populator.getQuery().getFetchEvents().remove(0);
  }
  finally {
    Context.exit();
  }
}",0.9739217652958876
75515,"private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    argument.add(arg.getValue());
  }
  return argument;
}","private static List populateArgument(ComputedColumnHandle modelCmptdColumn){
  List argument=new ArrayList();
  Iterator it=modelCmptdColumn.argumentsIterator();
  while (it != null && it.hasNext()) {
    AggregationArgumentHandle arg=(AggregationArgumentHandle)it.next();
    argument.add(new ScriptExpression(arg.getValue()));
  }
  return argument;
}",0.9678362573099416
75516,"/** 
 * save the design into the stream.
 * @param design design handler
 */
public void saveDesign(ReportRunnable runnable){
  RAOutputStream out=null;
  try {
    ReportDesignHandle design=runnable.getReport();
    out=archive.createRandomAccessStream(DESIGN_STREAM);
    DocumentUtil.serialize(design,out);
    designName=design.getFileName();
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
    out=null;
  }
  try {
    Report reportIR=runnable.getReportIR();
    out=archive.createRandomAccessStream(DESIGN_IR_STREAM);
    new EngineIRWriter().write(out,reportIR);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}","/** 
 * save the design into the stream.
 * @param design design handler
 */
public void saveDesign(ReportRunnable runnable){
  RAOutputStream out=null;
  try {
    ReportDesignHandle design=runnable.getReport();
    out=archive.createRandomAccessStream(DESIGN_STREAM);
    ReportDesignHandle newDesign=DocumentUtil.serialize(design,out);
    designName=design.getFileName();
    runnable.setDesignHandle(newDesign);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
    out=null;
  }
  try {
    Report reportIR=runnable.getReportIR();
    out=archive.createRandomAccessStream(DESIGN_IR_STREAM);
    new EngineIRWriter().write(out,reportIR);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,""String_Node_Str"",ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}",0.9639546858908342
75517,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  buildStyle(text,styleBuffer);
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  buildStyle(text,styleBuffer);
  String value=style.getDisplay();
  if (null == value) {
    styleBuffer.append(""String_Node_Str"");
  }
}",0.8425787106446777
75518,"/** 
 * Calculate the left or right border's style.
 * @param content
 */
private void startCase(IContent content){
  Span span=(Span)design2ExcelSpan.get(content.getGenerateBy());
  engine.addContainerStyle(content.getComputedStyle(),span,lb.getListSize(span.getCol()));
}","/** 
 * Calculate the left or right border's style.
 * @param content
 */
private void startCase(IContent content){
  Span span=(Span)design2ExcelSpan.get(content.getGenerateBy());
  engine.addContainerStyle(content.getComputedStyle(),span,lb.getListSize(span.getCol()) - 1);
}",0.9927272727272728
75519,"public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  reportProject=createProject(item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str"")),false);
  if (reportProject != null) {
    PlaceResources.copy(composite.getShell(),reportProject.getLocation().toOSString(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(SCRIPTING_CATEGORY)) {
    IProject javaProject=createProject(SCRIPTING_CATEGORY,true);
    if (javaProject != null) {
      createSourceAndOutputFolder(javaProject);
      try {
        setClasspath(javaProject);
      }
 catch (      JavaModelException e) {
        ExceptionHandler.handle(e);
      }
catch (      CoreException e) {
        ExceptionHandler.handle(e);
      }
    }
    Enumeration enumeration=SampleIncludedSourceEntry.getJavaObjects();
    while (enumeration.hasMoreElements()) {
      URL javaObjectURL=(URL)enumeration.nextElement();
      String filename=javaObjectURL.getFile();
      String desFileName=filename.substring(filename.lastIndexOf('/') + 1);
      PlaceResources.copy(composite.getShell(),javaProject.getFolder(""String_Node_Str"").getLocation().toOSString(),desFileName,javaObjectURL);
    }
    refreshReportProject(javaProject);
  }
  refreshReportProject(reportProject);
  if (item.getParentItem().getParentItem() != null && item.getParentItem().getParentItem().getText().equals(EXTENDING_CATEGORY)) {
    PlaceExtendedPlugin(item.getParentItem().getText());
  }
}","public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  reportProject=createProject(item.getText().substring(0,item.getText().lastIndexOf(""String_Node_Str"")),false);
  if (reportProject != null) {
    PlaceResources.copy(composite.getShell(),reportProject.getLocation().toOSString(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  }
  if (item.getParentItem().getText().equals(DRILL_TO_DETAILS_CATEGORY)) {
    PlaceResources.copyDrillThroughReport(composite.getShell(),reportProject.getLocation().toOSString(),item.getText());
  }
  if (item.getParentItem().getText().equals(XML_DATA_SOURCE_CATEGORY)) {
    PlaceResources.copyIncludedPng(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(LIBRARIES_CATEGORY)) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),reportProject.getLocation().toOSString());
  }
  if (item.getParentItem().getText().equals(SCRIPTING_CATEGORY)) {
    IProject javaProject=createProject(SCRIPTING_CATEGORY,true);
    if (javaProject != null) {
      createSourceAndOutputFolder(javaProject);
      try {
        setClasspath(javaProject);
      }
 catch (      JavaModelException e) {
        ExceptionHandler.handle(e);
      }
catch (      CoreException e) {
        ExceptionHandler.handle(e);
      }
    }
    Enumeration enumeration=SampleIncludedSourceEntry.getJavaObjects();
    while (enumeration.hasMoreElements()) {
      URL javaObjectURL=(URL)enumeration.nextElement();
      String filename=javaObjectURL.getFile();
      String desFileName=filename.substring(filename.lastIndexOf('/') + 1);
      PlaceResources.copy(composite.getShell(),javaProject.getFolder(""String_Node_Str"").getLocation().toOSString(),desFileName,javaObjectURL);
    }
    refreshReportProject(javaProject);
  }
  refreshReportProject(reportProject);
  if (item.getParentItem().getParentItem() != null && item.getParentItem().getParentItem().getText().equals(EXTENDING_CATEGORY)) {
    PlaceExtendedPlugin(item.getParentItem().getText());
  }
}",0.9251475796930342
75520,"public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  PlaceResources.copy(composite.getShell(),getDefaultLocation(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),getDefaultLocation());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),getDefaultLocation());
  }
}","public void run(){
  TreeItem item=(TreeItem)composite.getSelectedElement();
  Object selectedElement=item.getData();
  if (selectedElement == null || !(selectedElement instanceof ReportDesignHandle)) {
    return;
  }
  PlaceResources.copy(composite.getShell(),getDefaultLocation(),item.getText(),((ReportDesignHandle)selectedElement).getFileName());
  if (item.getParentItem().getText().equals(DRILL_TO_DETAILS_CATEGORY)) {
    PlaceResources.copyDrillThroughReport(composite.getShell(),reportProject.getLocation().toOSString(),item.getText());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedLibraries(composite.getShell(),getDefaultLocation());
  }
  if (item.getParentItem().getText().equals(""String_Node_Str"")) {
    PlaceResources.copyIncludedPng(composite.getShell(),getDefaultLocation());
  }
}",0.8684732319894249
75521,"protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    int childHeight=child.getAllocatedHeight();
    height=Math.max(height,childHeight);
  }
  height=Math.max(height,lineHeight);
  root.setContentHeight(height);
}","protected void updateLine(){
  if (root == null) {
    return;
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    int childHeight=child.getAllocatedHeight();
    height=Math.max(height,childHeight);
  }
  if (parent.isPageEmpty() && lineHeight > maxAvaHeight) {
    height=Math.max(height,maxAvaHeight);
  }
 else {
    height=Math.max(height,lineHeight);
  }
  root.setContentHeight(height);
}",0.8405215646940822
75522,"protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
      }
 else       if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      assert(spacing >= 0);
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign) || CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}","protected void align(boolean lastLine){
  if (root == null) {
    return;
  }
  assert(parent instanceof PDFBlockStackingLM);
  String align=((PDFBlockStackingLM)parent).getTextAlign();
  if ((CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align) || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
    int spacing=root.getContentWidth() - getCurrentIP();
    Iterator iter=root.getChildren();
    while (iter.hasNext()) {
      AbstractArea area=(AbstractArea)iter.next();
      if (CSSConstants.CSS_RIGHT_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing + area.getAllocatedX(),area.getAllocatedY());
      }
 else       if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
        area.setAllocatedPosition(spacing / 2 + area.getAllocatedX(),area.getAllocatedY());
      }
    }
  }
 else   if (CSSConstants.CSS_JUSTIFY_VALUE.equalsIgnoreCase(align) && !lastLine) {
    justify();
  }
  Iterator iter=root.getChildren();
  int height=root.getHeight();
  while (iter.hasNext()) {
    AbstractArea child=(AbstractArea)iter.next();
    IStyle childStyle=child.getStyle();
    String vAlign=childStyle.getVerticalAlign();
    if (childStyle != null) {
      int spacing=height - child.getAllocatedHeight();
      assert(spacing >= 0);
      if (CSSConstants.CSS_BOTTOM_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing + child.getY());
      }
 else       if (CSSConstants.CSS_MIDDLE_VALUE.equalsIgnoreCase(vAlign) || CSSConstants.CSS_BASELINE_VALUE.equalsIgnoreCase(vAlign)) {
        child.setPosition(child.getX(),spacing / 2 + child.getY());
      }
 else {
        int lineHeight=((PDFBlockStackingLM)parent).getLineHeight();
        if (lineHeight > 0) {
          child.setPosition(child.getX(),spacing / 2 + child.getY());
        }
      }
    }
  }
}",0.9672310212998362
75523,"public IContent execute(){
  if (executor != null) {
    if (executor instanceof ExtendedGenerateExecutor) {
      ExtendedGenerateExecutor gExecutor=(ExtendedGenerateExecutor)executor;
      gExecutor.parent=parent;
      gExecutor.context=context;
      gExecutor.report=report;
      gExecutor.design=design;
    }
    content=executor.execute();
    if (content != null) {
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        long uid=iid.getUniqueID();
        if (uid == -1) {
          uid=generateUniqueID();
          iid=new InstanceID(iid.getParentID(),uid,iid.getComponentID(),iid.getDataID());
          content.setInstanceID(iid);
        }
      }
 else {
        iid=getInstanceID();
        content.setInstanceID(iid);
      }
      if (content.getParent() == null) {
        content.setParent(getParentContent());
      }
      if (context.isInFactory()) {
        handleOnCreate(content);
      }
      startTOCEntry(content);
    }
  }
  return content;
}","public IContent execute(){
  if (executor != null) {
    if (executor instanceof ExtendedGenerateExecutor) {
      ExtendedGenerateExecutor gExecutor=(ExtendedGenerateExecutor)executor;
      gExecutor.parent=parent;
      gExecutor.context=context;
      gExecutor.report=report;
      gExecutor.design=design;
    }
    content=executor.execute();
    if (content != null) {
      IContent pContent=(IContent)content.getParent();
      if (pContent == null) {
        pContent=getParentContent();
        content.setParent(pContent);
      }
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        InstanceID pid=iid.getParentID();
        if (pid == null && pContent != null) {
          pid=pContent.getInstanceID();
        }
        long uid=iid.getUniqueID();
        if (uid == -1) {
          uid=generateUniqueID();
        }
        iid=new InstanceID(pid,uid,iid.getComponentID(),iid.getDataID());
        content.setInstanceID(iid);
      }
 else {
        iid=getInstanceID();
        content.setInstanceID(iid);
      }
      if (context.isInFactory()) {
        handleOnCreate(content);
      }
      startTOCEntry(content);
    }
  }
  return content;
}",0.7411121239744758
75524,"public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      if (offset != -1) {
        generateUniqueID();
        content=reader.loadContent(offset);
        content.setGenerateBy(design);
        instanceId=content.getInstanceID();
        IContent pContent=getParentContent();
        if (pContent != null) {
          content.setParent(pContent);
        }
        doExecute();
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  return content;
}","public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      if (offset != -1) {
        generateUniqueID();
        content=reader.loadContent(offset);
        content.setGenerateBy(design);
        instanceId=content.getInstanceID();
        IContent pContent=getParentContent();
        if (pContent != null) {
          content.setParent(pContent);
          instanceId=new InstanceID(pContent.getInstanceID(),instanceId.getUniqueID(),instanceId.getComponentID(),instanceId.getDataID());
          content.setInstanceID(instanceId);
        }
        doExecute();
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  return content;
}",0.8453781512605042
75525,"public void endContainer(IContainerContent container){
  endCase();
}","public void endContainer(IContainerContent container){
}",0.896
75526,"/** 
 * Test clear all properties.
 * @throws SemanticException
 */
public void testClearAllProperties() throws SemanticException {
  ArrayList elements=new ArrayList();
  LabelHandle element1=elemFactory.newLabel(""String_Node_Str"");
  TextItemHandle element2=elemFactory.newTextItem(""String_Node_Str"");
  element1.setComments(""String_Node_Str"");
  element1.setHeight(""String_Node_Str"");
  element1.setWidth(""String_Node_Str"");
  element1.setAction(new Action());
  element2.setComments(""String_Node_Str"");
  element2.setHeight(""String_Node_Str"");
  element2.setWidth(""String_Node_Str"");
  element2.setContent(""String_Node_Str"");
  elements.add(element2);
  elements.add(element1);
  GroupElementHandle groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  assertEquals(""String_Node_Str"",groupElementHandle.getStringProperty(ReportItemHandle.HEIGHT_PROP));
  assertEquals(""String_Node_Str"",groupElementHandle.getStringProperty(ReportItemHandle.COMMENTS_PROP));
  assertNull(groupElementHandle.getStringProperty(ReportItemHandle.WIDTH_PROP));
  assertNull(groupElementHandle.getStringProperty(TextItemHandle.CONTENT_PROP));
  groupElementHandle.clearLocalProperties();
  assertNull(groupElementHandle.getStringProperty(ReportItemHandle.HEIGHT_PROP));
  assertNull(groupElementHandle.getStringProperty(ReportItemHandle.COMMENTS_PROP));
  assertEquals(""String_Node_Str"",element2.getContent());
  assertNotNull(element1.getActionHandle());
  assertEquals(""String_Node_Str"",element2.getContent());
  assertNotNull(element1.getActionHandle());
  LabelHandle baseLabel1=elemFactory.newLabel(""String_Node_Str"");
  LabelHandle baseLabel2=elemFactory.newLabel(""String_Node_Str"");
  designHandle.getComponents().add(baseLabel1);
  designHandle.getComponents().add(baseLabel2);
  LabelHandle label1=(LabelHandle)elemFactory.newElementFrom(baseLabel1,""String_Node_Str"");
  LabelHandle label2=(LabelHandle)elemFactory.newElementFrom(baseLabel2,""String_Node_Str"");
  elements=new ArrayList();
  elements.add(label1);
  elements.add(label2);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  groupElementHandle.clearLocalProperties();
  assertNotNull(label1.getExtends());
  assertNotNull(label2.getExtends());
  ElementFactory elemFactory=new ElementFactory(design);
  DesignElementHandle masterPage1=elemFactory.newGraphicMasterPage(""String_Node_Str"");
  designHandle.getMasterPages().add(masterPage1);
  elements.clear();
  elements.add(masterPage1);
  elements.add(label1);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  groupElementHandle.clearLocalProperties();
}","/** 
 * Test clear all properties.
 * @throws SemanticException
 */
public void testClearAllProperties() throws SemanticException {
  ArrayList elements=new ArrayList();
  LabelHandle element1=elemFactory.newLabel(""String_Node_Str"");
  TextItemHandle element2=elemFactory.newTextItem(""String_Node_Str"");
  element1.setComments(""String_Node_Str"");
  element1.setHeight(""String_Node_Str"");
  element1.setWidth(""String_Node_Str"");
  element1.setAction(new Action());
  element2.setComments(""String_Node_Str"");
  element2.setHeight(""String_Node_Str"");
  element2.setWidth(""String_Node_Str"");
  element2.setContent(""String_Node_Str"");
  elements.add(element2);
  elements.add(element1);
  GroupElementHandle groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  assertEquals(""String_Node_Str"",groupElementHandle.getStringProperty(ReportItemHandle.HEIGHT_PROP));
  assertEquals(""String_Node_Str"",groupElementHandle.getStringProperty(ReportItemHandle.COMMENTS_PROP));
  assertNull(groupElementHandle.getStringProperty(ReportItemHandle.WIDTH_PROP));
  assertNull(groupElementHandle.getStringProperty(TextItemHandle.CONTENT_PROP));
  groupElementHandle.clearLocalProperties();
  assertNull(groupElementHandle.getStringProperty(ReportItemHandle.HEIGHT_PROP));
  assertNull(groupElementHandle.getStringProperty(ReportItemHandle.COMMENTS_PROP));
  assertEquals(""String_Node_Str"",element2.getContent());
  assertNotNull(element1.getActionHandle());
  assertEquals(""String_Node_Str"",element2.getContent());
  assertNotNull(element1.getActionHandle());
  LabelHandle baseLabel1=elemFactory.newLabel(""String_Node_Str"");
  LabelHandle baseLabel2=elemFactory.newLabel(""String_Node_Str"");
  designHandle.getComponents().add(baseLabel1);
  designHandle.getComponents().add(baseLabel2);
  LabelHandle label1=(LabelHandle)elemFactory.newElementFrom(baseLabel1,""String_Node_Str"");
  LabelHandle label2=(LabelHandle)elemFactory.newElementFrom(baseLabel2,""String_Node_Str"");
  elements=new ArrayList();
  elements.add(label1);
  elements.add(label2);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  groupElementHandle.clearLocalProperties();
  assertNotNull(label1.getExtends());
  assertNotNull(label2.getExtends());
  DesignElementHandle masterPage1=elemFactory.newGraphicMasterPage(""String_Node_Str"");
  designHandle.getMasterPages().add(masterPage1);
  elements.clear();
  elements.add(masterPage1);
  elements.add(label1);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  groupElementHandle.clearLocalProperties();
  DesignElementHandle parentExtendedItem=elemFactory.newExtendedItem(""String_Node_Str"",""String_Node_Str"");
  designHandle.getComponents().add(parentExtendedItem);
  DesignElementHandle childExtendedItem=elemFactory.newElementFrom(parentExtendedItem,""String_Node_Str"");
  designHandle.getBody().add(childExtendedItem);
  assertEquals(new Integer(0),parentExtendedItem.getProperty(""String_Node_Str""));
  assertEquals(new Integer(0),childExtendedItem.getProperty(""String_Node_Str""));
  elements.clear();
  elements.add(childExtendedItem);
  groupElementHandle=new SimpleGroupElementHandle(designHandle,elements);
  childExtendedItem.setProperty(""String_Node_Str"",""String_Node_Str"");
  assertEquals(new Integer(0),parentExtendedItem.getProperty(""String_Node_Str""));
  assertEquals(new Integer(3),childExtendedItem.getProperty(""String_Node_Str""));
  assertTrue(groupElementHandle.hasLocalPropertiesForExtendedElements());
  groupElementHandle.clearLocalProperties();
  ((ExtendedItemHandle)childExtendedItem).loadExtendedElement();
  assertEquals(new Integer(0),parentExtendedItem.getProperty(""String_Node_Str""));
  assertEquals(new Integer(0),childExtendedItem.getProperty(""String_Node_Str""));
  design.getActivityStack().undo();
  ((ExtendedItemHandle)childExtendedItem).loadExtendedElement();
  assertEquals(new Integer(0),parentExtendedItem.getProperty(""String_Node_Str""));
  assertEquals(new Integer(3),childExtendedItem.getProperty(""String_Node_Str""));
  design.getActivityStack().redo();
  ((ExtendedItemHandle)childExtendedItem).loadExtendedElement();
  assertEquals(new Integer(0),parentExtendedItem.getProperty(""String_Node_Str""));
  assertEquals(new Integer(0),childExtendedItem.getProperty(""String_Node_Str""));
}",0.7433858609223651
75527,"/** 
 * Test the meta-data parser for class definition.
 */
public void testMethodsWithDifferentArgumentLists(){
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  assertEquals(13,dd.getClasses().size());
  IClassInfo classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo constructor=classInfo.getConstructor();
  assertNotNull(constructor);
  Iterator argumentList=constructor.argumentListIterator();
  assertTrue(argumentList.hasNext());
  Iterator arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(argumentList.hasNext());
  classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo method=classInfo.getMethod(""String_Node_Str"");
  argumentList=method.argumentListIterator();
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  ArgumentInfo argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  assertFalse(argumentList.hasNext());
}","/** 
 * Test the meta-data parser for class definition.
 */
public void testMethodsWithDifferentArgumentLists(){
  MetaDataDictionary dd=MetaDataDictionary.getInstance();
  assertEquals(13,dd.getClasses().size());
  IClassInfo classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo constructor=classInfo.getConstructor();
  assertNotNull(constructor);
  Iterator argumentList=constructor.argumentListIterator();
  assertTrue(argumentList.hasNext());
  Iterator arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertTrue(arguments.hasNext());
  arguments.next();
  assertFalse(argumentList.hasNext());
  classInfo=dd.getClass(""String_Node_Str"");
  IMethodInfo method=classInfo.getMethod(""String_Node_Str"");
  argumentList=method.argumentListIterator();
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  ArgumentInfo argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  arguments=((ArgumentInfoList)argumentList.next()).argumentsIterator();
  assertTrue(arguments.hasNext());
  argument=(ArgumentInfo)arguments.next();
  assertEquals(""String_Node_Str"",argument.getType());
  assertFalse(arguments.hasNext());
  assertFalse(argumentList.hasNext());
}",0.9193942354665364
75528,"/** 
 * Find all matched AggrRows and populate the aggregation value to a list.
 * @param base
 * @param sortKeys
 * @param filteredAggrResultSet
 * @return
 * @throws IOException
 */
private static List createMatchedAggrRow(IAggregationResultSet base,SortKey[] sortKeys,AggregationResultRowNavigator[] filteredAggrResultSet) throws IOException {
  List keyValues=new ArrayList();
  for (int x=0; x < filteredAggrResultSet.length; x++) {
    SortKey key=sortKeys[x];
    Object[] values=new Object[key.getLevelKeyIndex() + 1 - key.getLevelKeyOffset()];
    boolean[] direction=new boolean[key.getLevelKeyIndex() + 1 - key.getLevelKeyOffset()];
    for (int y=key.getLevelKeyOffset(); y < key.getLevelKeyIndex() + 1; y++) {
      DimLevel level=sortKeys[x].getTargetResultSet().getLevel(y);
      values[y - key.getLevelKeyOffset()]=base.getLevelKeyValue(base.getLevelIndex(level))[0];
      direction[y - key.getLevelKeyOffset()]=base.getSortType(base.getLevelIndex(level)) == 1 ? false : true;
    }
    IAggregationResultRow row=getNextMatchRow(filteredAggrResultSet[x],values,direction,key);
    if (row == null)     continue;
    for (int j=0; j < key.getAggrKeys().length; j++) {
      keyValues.add(row.getAggregationValues()[j]);
    }
  }
  return keyValues;
}","/** 
 * Find all matched AggrRows and populate the aggregation value to a list.
 * @param base
 * @param sortKeys
 * @param filteredAggrResultSet
 * @return
 * @throws IOException
 */
private static List createMatchedAggrRow(IAggregationResultSet base,SortKey[] sortKeys,AggregationResultRowNavigator[] filteredAggrResultSet) throws IOException {
  List keyValues=new ArrayList();
  for (int x=0; x < filteredAggrResultSet.length; x++) {
    SortKey key=sortKeys[x];
    Object[] values=new Object[key.getLevelKeyIndex() + 1 - key.getLevelKeyOffset()];
    boolean[] direction=new boolean[key.getLevelKeyIndex() + 1 - key.getLevelKeyOffset()];
    for (int y=key.getLevelKeyOffset(); y < key.getLevelKeyIndex() + 1; y++) {
      DimLevel level=sortKeys[x].getTargetResultSet().getLevel(y);
      values[y - key.getLevelKeyOffset()]=base.getLevelKeyValue(base.getLevelIndex(level))[0];
      direction[y - key.getLevelKeyOffset()]=base.getSortType(base.getLevelIndex(level)) == 1 ? false : true;
    }
    IAggregationResultRow row=getNextMatchRow(filteredAggrResultSet[x],values,direction,key);
    for (int j=0; j < key.getAggrKeys().length; j++) {
      keyValues.add(row == null ? null : row.getAggregationValues()[j]);
    }
  }
  return keyValues;
}",0.9777954004758128
75529,"public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || (higherLevelDefns.length != values.length)|| cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    Map levelValueMap=new HashMap();
    for (int i=0; i < higherLevelDefns.length; i++) {
      if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
        levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String targetLevel,ILevelDefinition[] higherLevelDefns,Object[] values) throws AdapterException {
  try {
    if ((higherLevelDefns == null && values != null) || (higherLevelDefns != null && values == null) || cubeHandle == null || targetLevel == null)     return null;
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    TabularHierarchyHandle hierHandle=(TabularHierarchyHandle)(cubeHandle.getDimension(target.getDimensionName()).getContent(TabularDimensionHandle.HIERARCHIES_PROP,0));
    this.session.defineDataSource(this.session.getModelAdaptor().adaptDataSource(hierHandle.getDataSet().getDataSource()));
    this.session.defineDataSet(this.session.getModelAdaptor().adaptDataSet(hierHandle.getDataSet()));
    Map levelValueMap=new HashMap();
    if (higherLevelDefns != null) {
      for (int i=0; i < higherLevelDefns.length; i++) {
        if (target.getDimensionName().equals(higherLevelDefns[i].getHierarchy().getDimension().getName())) {
          levelValueMap.put(higherLevelDefns[i].getName(),values[i]);
        }
      }
    }
    DataSetIterator it=new DataSetIterator(this.session,hierHandle);
    return new MemberValueIterator(it,levelValueMap,target.getLevelName());
  }
 catch (  BirtException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.8689108910891089
75530,"public Object next(){
  try {
    if (!this.hasNext)     return null;
    Object result=this.currentValue;
    boolean accept=false;
    while (this.dataSetIterator.next()) {
      accept=true;
      Iterator it=this.levelValueMap.keySet().iterator();
      while (it.hasNext()) {
        String key=it.next().toString();
        Object value=this.levelValueMap.get(key);
        if (ScriptEvalUtil.compare(value,this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(key))) != 0) {
          accept=false;
          break;
        }
      }
      if (accept) {
        this.currentValue=this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(this.targetLevelName));
      }
    }
    this.hasNext=accept;
    return result;
  }
 catch (  BirtException e) {
    return null;
  }
}","public Object next(){
  try {
    if (!this.hasNext)     return null;
    Object result=this.currentValue;
    boolean accept=false;
    while (this.dataSetIterator.next()) {
      accept=true;
      Iterator it=this.levelValueMap.keySet().iterator();
      while (it.hasNext()) {
        String key=it.next().toString();
        Object value=this.levelValueMap.get(key);
        if (ScriptEvalUtil.compare(value,this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(key))) != 0) {
          accept=false;
          break;
        }
      }
      if (accept) {
        this.currentValue=this.dataSetIterator.getValue(this.dataSetIterator.getFieldIndex(this.targetLevelName));
        break;
      }
    }
    this.hasNext=accept;
    return result;
  }
 catch (  BirtException e) {
    return null;
  }
}",0.9907120743034056
75531,"/** 
 * @throws DataException 
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @throws DataException 
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeDefn,boolean isSort) throws AdapterException {
  try {
    List bindings=cubeDefn.getBindings();
    if (bindings == null)     return new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    List result=new ArrayList();
    for (int i=0; i < bindings.size(); i++) {
      IBinding binding=(IBinding)bindings.get(i);
      Set refDimLevel=OlapExpressionCompiler.getReferencedDimLevel(binding.getExpression(),bindings,isSort);
      if (refDimLevel.size() > 1)       continue;
      if (!refDimLevel.contains(target)) {
        List aggrOns=binding.getAggregatOns();
        if (aggrOns.size() == 0) {
          if (this.getReferencedMeasureName(binding.getExpression()) != null) {
            result.add(binding);
            continue;
          }
        }
        for (int j=0; j < aggrOns.size(); j++) {
          DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
          if (dimLevel.equals(target)) {
            if (j == aggrOns.size() - 1)             result.add(binding);
 else {
              DimLevel next=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j + 1).toString());
              if (getAxisQualifierLevel(next,cubeDefn.getEdge(getAxisQualifierEdgeType(dimLevel,cubeDefn))) == null)               continue;
 else               result.add(binding);
            }
            break;
          }
        }
        continue;
      }
      result.add(binding);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9393173198482933
75532,"public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException {
  try {
    List result=new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    String bindingName=OlapExpressionCompiler.getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    List bindings=queryDefn.getBindings();
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    IEdgeDefinition axisQualifierEdge=queryDefn.getEdge(this.getAxisQualifierEdgeType(target,queryDefn));
    for (int i=0; i < aggrOns.size(); i++) {
      DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(i).toString());
      ILevelDefinition lvl=getAxisQualifierLevel(dimLevel,axisQualifierEdge);
      if (lvl != null)       result.add(lvl);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException {
  try {
    List result=new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    String bindingName=OlapExpressionCompiler.getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    List bindings=queryDefn.getBindings();
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    boolean isMeasure=false;
    if (aggrOns.size() == 0) {
      isMeasure=this.getReferencedMeasureName(binding.getExpression()) != null;
    }
    IEdgeDefinition axisQualifierEdge=queryDefn.getEdge(this.getAxisQualifierEdgeType(target,queryDefn));
    if (isMeasure) {
      for (int i=0; i < axisQualifierEdge.getDimensions().size(); i++) {
        IHierarchyDefinition hier=(IHierarchyDefinition)((IDimensionDefinition)axisQualifierEdge.getDimensions().get(i)).getHierarchy().get(0);
        result.addAll(hier.getLevels());
      }
    }
 else {
      for (int i=0; i < aggrOns.size(); i++) {
        DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(i).toString());
        ILevelDefinition lvl=getAxisQualifierLevel(dimLevel,axisQualifierEdge);
        if (lvl != null)         result.add(lvl);
      }
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.837810268616117
75533,"/** 
 * @param expr
 * @return
 */
public String getReferencedMeasureName(String expr){
  return OlapExpressionCompiler.getReferencedScriptObject(expr,""String_Node_Str"");
}","/** 
 * @param expr
 * @return
 */
private String getReferencedMeasureName(IBaseExpression expr){
  return OlapExpressionCompiler.getReferencedScriptObject(expr,""String_Node_Str"");
}",0.9322033898305084
75534,"public void visitDesignElement(DesignElementHandle elementHandle){
  List scriptMethods=elementHandle.getMethods();
  for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
    IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
    String methodName=elementPropDefn.getMethodInfo().getName();
    if (elementHandle.getStringProperty(methodName) != null) {
      ScriptElementNode scriptElementNode=new ScriptElementNode(elementHandle);
      scriptNodes.add(scriptElementNode);
      break;
    }
  }
  for (int i=0; i < elementHandle.getDefn().getSlotCount(); i++) {
    visitContents(elementHandle.getSlot(i));
  }
  for (int i=0; i < elementHandle.getDefn().getContents().size(); i++) {
    visitContents(elementHandle,((PropertyDefn)elementHandle.getDefn().getContents().get(i)).getName());
  }
}","public void visitDesignElement(DesignElementHandle elementHandle){
  List scriptMethods=elementHandle.getMethods();
  if (scriptMethods != null) {
    for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
      IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
      String methodName=elementPropDefn.getMethodInfo().getName();
      if (elementHandle.getStringProperty(methodName) != null) {
        ScriptElementNode scriptElementNode=new ScriptElementNode(elementHandle);
        scriptNodes.add(scriptElementNode);
        break;
      }
    }
  }
  for (int i=0; i < elementHandle.getDefn().getSlotCount(); i++) {
    visitContents(elementHandle.getSlot(i));
  }
  for (int i=0; i < elementHandle.getDefn().getContents().size(); i++) {
    visitContents(elementHandle,((PropertyDefn)elementHandle.getDefn().getContents().get(i)).getName());
  }
}",0.9689877121123464
75535,"public List getScriptNodes(ReportDesignHandle handle){
  apply(handle);
  return scriptNodes;
}","public List getScriptNodes(ReportDesignHandle handle){
  scriptNodes.clear();
  apply(handle);
  return scriptNodes;
}",0.892018779342723
75536,"public List getScriptNodes(DesignElementHandle elementHandle){
  List scriptMethods=elementHandle.getMethods();
  for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
    IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
    String methodName=elementPropDefn.getMethodInfo().getName();
    if (elementHandle.getStringProperty(methodName) != null) {
      ScriptObjectNode scriptElementNode=new ScriptObjectNode(elementPropDefn);
      scriptNodes.add(scriptElementNode);
    }
  }
  return scriptNodes;
}","public List getScriptNodes(DesignElementHandle elementHandle){
  List scriptNodes=new ArrayList();
  List scriptMethods=elementHandle.getMethods();
  if (scriptMethods != null) {
    for (Iterator ite=scriptMethods.iterator(); ite.hasNext(); ) {
      IElementPropertyDefn elementPropDefn=(IElementPropertyDefn)ite.next();
      String methodName=elementPropDefn.getMethodInfo().getName();
      if (elementHandle.getStringProperty(methodName) != null) {
        ScriptObjectNode scriptElementNode=new ScriptObjectNode(elementPropDefn);
        scriptNodes.add(scriptElementNode);
      }
    }
  }
  return scriptNodes;
}",0.9248055315471044
75537,"private void exportImageHeader(String imageURI) throws IOException {
  pptOutput.write(""String_Node_Str"".getBytes());
  pptOutput.write(""String_Node_Str"".getBytes());
  pptOutput.write((""String_Node_Str"" + (String)imageNames.get(imageURI) + ""String_Node_Str"").getBytes());
  pptOutput.write(""String_Node_Str"".getBytes());
  pptOutput.write((""String_Node_Str"" + (String)imageExtensions.get(imageURI) + ""String_Node_Str"").getBytes());
}","private void exportImageHeader(String imagekey) throws IOException {
  pptOutput.write(""String_Node_Str"".getBytes());
  pptOutput.write(""String_Node_Str"".getBytes());
  pptOutput.write((""String_Node_Str"" + (String)imageNames.get(imagekey) + ""String_Node_Str"").getBytes());
  pptOutput.write(""String_Node_Str"".getBytes());
  pptOutput.write((""String_Node_Str"" + (String)imageExtensions.get(imagekey) + ""String_Node_Str"").getBytes());
}",0.97926267281106
75538,"private void generateImageBytes(IImageContent imageContent) throws IOException {
  exportImageHeader(imageContent.getURI());
  boolean isSvg=false;
  TranscoderInput transInput=null;
  Base64 base=new Base64();
  byte[] imageData=null;
  try {
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
      if (imageContent.getURI() == null)       return;
    URL url=reportDesign.findResource(imageContent.getURI(),IResourceLocator.IMAGE);
  InputStream imageInput=url.openStream();
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
  isSvg=true;
  transInput=new TranscoderInput(imageInput);
}
imageData=new byte[imageInput.available()];
imageInput.read(imageData);
break;
case IImageContent.IMAGE_URL:
if (imageContent.getURI() == null) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
transInput=new TranscoderInput(imageContent.getURI());
}
imageData=imageContent.getData();
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (imageContent.getData() == null) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
transInput=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
imageData=imageContent.getData();
break;
}
if (!isSvg) {
pptOutput.write(base.encode(imageData));
}
 else {
JPEGTranscoder transcoder=new JPEGTranscoder();
transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
ByteArrayOutputStream ostream=new ByteArrayOutputStream();
TranscoderOutput transOutput=new TranscoderOutput(ostream);
try {
transcoder.transcode(transInput,transOutput);
}
 catch (TranscoderException e) {
}
ostream.flush();
pptOutput.write(base.encode(ostream.toByteArray()));
}
}
 catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
}","private void generateImageBytes(IImageContent imageContent) throws IOException {
  if (imageContent.getURI() == null) {
    exportImageHeader(imageContent.getName());
  }
 else {
    exportImageHeader(imageContent.getURI());
  }
  boolean isSvg=false;
  TranscoderInput transInput=null;
  Base64 base=new Base64();
  byte[] imageData=null;
  try {
    if (imageContent.getURI() == null) {
      imageData=imageContent.getData();
      if (imageContent.getExtension() != null && imageContent.getExtension().equalsIgnoreCase(""String_Node_Str"")) {
        isSvg=true;
      }
    }
 else {
switch (imageContent.getImageSource()) {
case IImageContent.IMAGE_FILE:
        if (imageContent.getURI() == null)         return;
      URL url=reportDesign.findResource(imageContent.getURI(),IResourceLocator.IMAGE);
    InputStream imageInput=url.openStream();
  if (imageContent.getURI().endsWith(""String_Node_Str"")) {
    isSvg=true;
    transInput=new TranscoderInput(imageInput);
  }
imageData=new byte[imageInput.available()];
imageInput.read(imageData);
break;
case IImageContent.IMAGE_URL:
if (imageContent.getURI() == null) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
transInput=new TranscoderInput(imageContent.getURI());
}
imageData=imageContent.getData();
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
if (imageContent.getData() == null || imageContent.getURI() == null) return;
if (imageContent.getURI().endsWith(""String_Node_Str"")) {
isSvg=true;
transInput=new TranscoderInput(new ByteArrayInputStream(imageContent.getData()));
}
imageData=imageContent.getData();
break;
default :
imageData=imageContent.getData();
break;
}
}
if (!isSvg) {
pptOutput.write(base.encode(imageData));
}
 else {
JPEGTranscoder transcoder=new JPEGTranscoder();
transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
ByteArrayOutputStream ostream=new ByteArrayOutputStream();
TranscoderOutput transOutput=new TranscoderOutput(ostream);
try {
transcoder.transcode(transInput,transOutput);
}
 catch (TranscoderException e) {
}
ostream.flush();
pptOutput.write(base.encode(ostream.toByteArray()));
}
}
 catch (IOException ioe) {
logger.log(Level.WARNING,ioe.getMessage(),ioe);
}
catch (Throwable t) {
logger.log(Level.WARNING,t.getMessage(),t);
}
}",0.8734085995676195
75539,"/** 
 * Draws image into the PPT.
 * @param image the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  if (image == null)   return;
  ContainerPosition curPos;
  String imageName;
  shapeCount++;
  if (!containerStack.isEmpty()) {
    curPos=(ContainerPosition)containerStack.peek();
  }
 else {
    curPos=new ContainerPosition(0,0);
  }
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  String imageTitle=""String_Node_Str"" + currentPageNum + ""String_Node_Str""+ shapeCount;
  if (imageNames.containsKey(imageContent.getURI())) {
    imageName=(String)imageNames.get(imageContent.getURI());
  }
 else {
    String extension=getImageExtension(imageContent.getURI());
    imageName=imageTitle + ""String_Node_Str"" + extension;
    imageNames.put(imageContent.getURI(),imageName);
    imageExtensions.put(imageContent.getURI(),extension);
    recordFileLists(imageName);
    currentImageContents.add(imageContent);
  }
  double width=pptMeasure(image.getWidth());
  double height=pptMeasure(image.getHeight());
  double x=layoutAreaX2PPT(imageX);
  double y=layoutAreaY2PPT(imageY);
  try {
    pptOutput.write((""String_Node_Str"" + (shapeCount) + ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
}","/** 
 * Draws image into the PPT.
 * @param image the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  if (image == null)   return;
  ContainerPosition curPos;
  String imageName;
  shapeCount++;
  if (!containerStack.isEmpty()) {
    curPos=(ContainerPosition)containerStack.peek();
  }
 else {
    curPos=new ContainerPosition(0,0);
  }
  int imageX=curPos.x + image.getX();
  int imageY=curPos.y + image.getY();
  IImageContent imageContent=((IImageContent)image.getContent());
  String imageTitle=""String_Node_Str"" + currentPageNum + ""String_Node_Str""+ shapeCount;
  if (imageContent.getURI() != null) {
    if (imageNames.containsKey(imageContent.getURI())) {
      imageName=(String)imageNames.get(imageContent.getURI());
    }
 else {
      String extension=getImageExtension(imageContent.getURI());
      imageName=imageTitle + ""String_Node_Str"" + extension;
      imageNames.put(imageContent.getURI(),imageName);
      imageExtensions.put(imageContent.getURI(),extension);
      recordFileLists(imageName);
      currentImageContents.add(imageContent);
    }
  }
 else {
    if (imageNames.containsKey(imageContent.getName())) {
      imageName=(String)imageNames.get(imageContent.getName());
    }
 else {
      String extension=imageContent.getExtension();
      imageName=imageTitle + ""String_Node_Str"" + extension;
      imageNames.put(imageContent.getName(),imageName);
      imageExtensions.put(imageContent.getName(),extension);
      recordFileLists(imageName);
      currentImageContents.add(imageContent);
    }
  }
  double width=pptMeasure(image.getWidth());
  double height=pptMeasure(image.getHeight());
  double x=layoutAreaX2PPT(imageX);
  double y=layoutAreaY2PPT(imageY);
  try {
    pptOutput.write((""String_Node_Str"" + (shapeCount) + ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + imageName + ""String_Node_Str""+ imageTitle+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"").getBytes());
    pptOutput.write((""String_Node_Str"").getBytes());
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
}",0.7892773892773893
75540,"public void clipSave(){
  contentByte.saveState();
}","public void clipSave(){
  cbUnder.saveState();
  contentByte.saveState();
}",0.8188976377952756
75541,"public void clipRestore(){
  contentByte.restoreState();
}","public void clipRestore(){
  cbUnder.restoreState();
  contentByte.restoreState();
}",0.8169014084507042
75542,"private void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
}","private void clip(float startX,float startY,float width,float height){
  startY=transformY(startY,height);
  contentByte.clip();
  contentByte.rectangle(startX,startY,width,height);
  contentByte.newPath();
  cbUnder.clip();
  cbUnder.rectangle(startX,startY,width,height);
  cbUnder.newPath();
}",0.8253968253968254
75543,"protected void keepUnresolvedCells(){
  if (rowCount <= 0) {
    return;
  }
  if (rowHint == null) {
    Row row=rows[rowCount - 1];
    Cell[] cells=rows[rowCount - 1].cells;
    IRowContent rowContent=(IRowContent)row.getContent();
    ITableContent table=rowContent.getTable();
    InstanceID tableId=table.getInstanceID();
    InstanceID rowId=rowContent.getInstanceID();
    UnresolvedRowHint hint=new UnresolvedRowHint(tableId,rowId);
    for (int cellId=0; cellId < realColCount; cellId++) {
      if (cells[cellId] != null) {
        ICellContent cc=((CellContent)cells[cellId].getContent()).getContent();
        String style=cc.getStyle().getCssText();
        hint.addUnresolvedCell(style,cells[cellId].getColId(),cells[cellId].getColSpan(),cells[cellId].getRowSpan());
      }
    }
    this.rowHint=hint;
  }
}","protected void keepUnresolvedCells(){
  if (rowCount <= 0) {
    return;
  }
  if (rowHint == null) {
    Row row=rows[rowCount - 1];
    Cell[] cells=rows[rowCount - 1].cells;
    IRowContent rowContent=(IRowContent)row.getContent();
    ITableContent table=rowContent.getTable();
    InstanceID tableId=table.getInstanceID();
    InstanceID rowId=rowContent.getInstanceID();
    UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
    for (int cellId=0; cellId < realColCount; cellId++) {
      if (cells[cellId] != null) {
        ICellContent cc=((CellContent)cells[cellId].getContent()).getContent();
        String style=cc.getStyle().getCssText();
        hint.addUnresolvedCell(style,cells[cellId].getColId(),cells[cellId].getColSpan(),cells[cellId].getRowSpan());
      }
    }
    this.rowHint=hint;
  }
}",0.9797859690844232
75544,"private boolean needClip(IContainerArea container){
  return !(container instanceof RowArea);
}","private boolean needClip(IContainerArea container){
  return (container instanceof CellArea) || (container instanceof InlineContainerArea);
}",0.7796610169491526
75545,"public UnresolvedRowHint getUnresolvedRowHint(ITableContent table){
  if (hints.size() > 0) {
    String idStr=table.getInstanceID().toString();
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      UnresolvedRowHint rowHint=(UnresolvedRowHint)iter.next();
      if (idStr.equals(rowHint.getTableId().toString())) {
        return rowHint;
      }
    }
  }
  return null;
}","public UnresolvedRowHint getUnresolvedRowHint(ITableContent table){
  if (hints.size() > 0) {
    String idStr=table.getInstanceID().toUniqueString();
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      UnresolvedRowHint rowHint=(UnresolvedRowHint)iter.next();
      if (idStr.equals(rowHint.getTableId())) {
        return rowHint;
      }
    }
  }
  return null;
}",0.978120978120978
75546,"public UnresolvedRowHint getUnresolvedRowHint(ITableContent table){
  if (hints.size() > 0) {
    String idStr=table.getInstanceID().toString();
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      UnresolvedRowHint rowHint=(UnresolvedRowHint)iter.next();
      if (idStr.equals(rowHint.getTableId().toString())) {
        return rowHint;
      }
    }
  }
  return null;
}","public UnresolvedRowHint getUnresolvedRowHint(ITableContent table){
  if (hints.size() > 0) {
    String idStr=table.getInstanceID().toUniqueString();
    Iterator iter=hints.iterator();
    while (iter.hasNext()) {
      UnresolvedRowHint rowHint=(UnresolvedRowHint)iter.next();
      if (idStr.equals(rowHint.getTableId())) {
        return rowHint;
      }
    }
  }
  return null;
}",0.978120978120978
75547,"public void initTableLayout(UnresolvedRowHint hint){
  if (hint != null) {
    IReportContent report=tableContent.getReportContent();
    IRowContent rowContent=report.createRowContent();
    InstanceID rowId=hint.getRowId();
    rowContent.setInstanceID(rowId);
    rowContent.setParent(tableContent);
    RowArea rowArea=AreaFactory.createRowArea(rowContent);
    unresolvedRow=new Row(rowArea,start,end - start,false);
    for (int i=start; i < end; i++) {
      ICellContent cellContent=report.createCellContent();
      hint.initUnresolvedCell(cellContent,rowId,i);
      cellContent.setParent(rowContent);
      CellArea cellArea=AreaFactory.createCellArea(cellContent);
      unresolvedRow.addArea(cellArea);
      i=i + cellArea.getColSpan() - 1;
    }
  }
}","public void initTableLayout(UnresolvedRowHint hint){
  if (hint != null) {
    IReportContent report=tableContent.getReportContent();
    IRowContent rowContent=report.createRowContent();
    InstanceID rowId=InstanceID.parse(hint.getRowId());
    rowContent.setInstanceID(rowId);
    rowContent.setParent(tableContent);
    RowArea rowArea=AreaFactory.createRowArea(rowContent);
    unresolvedRow=new Row(rowArea,start,end - start,false);
    for (int i=start; i < end; i++) {
      ICellContent cellContent=report.createCellContent();
      hint.initUnresolvedCell(cellContent,rowId,i);
      cellContent.setParent(rowContent);
      CellArea cellArea=AreaFactory.createCellArea(cellContent);
      unresolvedRow.addArea(cellArea);
      i=i + cellArea.getColSpan() - 1;
    }
  }
}",0.9883870967741936
75548,"protected int getRowSpan(IRowContent row,CellArea cell){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=(IContent)cell.getContent().getParent();
  if (rowSpan > 1 && (!row.getInstanceID().toString().equals(rowContent.getInstanceID().toString()))) {
    return rowSpan - 1;
  }
  return rowSpan;
}","protected int getRowSpan(IRowContent row,CellArea cell){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=(IContent)cell.getContent().getParent();
  if (rowSpan > 1 && (!row.getInstanceID().toUniqueString().equals(rowContent.getInstanceID().toUniqueString()))) {
    return rowSpan - 1;
  }
  return rowSpan;
}",0.9483870967741936
75549,"protected boolean equals(InstanceID rowId,InstanceID id){
  if (rowId != null && id != null) {
    return rowId.toString().equals(id.toString());
  }
  return false;
}","protected boolean equals(InstanceID rowId,String id){
  if (rowId != null && id != null) {
    return rowId.toUniqueString().equals(id);
  }
  return false;
}",0.9046153846153846
75550,"public InstanceID getRowId(){
  return this.rowId;
}","public String getRowId(){
  return this.rowId;
}",0.86
75551,"public InstanceID getTableId(){
  return this.tableId;
}","public String getTableId(){
  return this.tableId;
}",0.8703703703703703
75552,"public UnresolvedRowHint(InstanceID tableId,InstanceID rowId){
  this.tableId=tableId;
  this.rowId=rowId;
}","public UnresolvedRowHint(String tableId,String rowId){
  this.tableId=tableId;
  this.rowId=rowId;
}",0.8653846153846154
75553,"protected void keepUnresolvedCells(){
  if (rowCount <= 0) {
    return;
  }
  if (rowHint == null) {
    Row row=rows[rowCount - 1];
    Cell[] cells=rows[rowCount - 1].cells;
    IRowContent rowContent=(IRowContent)row.getContent();
    ITableContent table=rowContent.getTable();
    InstanceID tableId=table.getInstanceID();
    InstanceID rowId=rowContent.getInstanceID();
    UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
    for (int cellId=0; cellId < realColCount; cellId++) {
      if (cells[cellId] != null) {
        ICellContent cc=((CellContent)cells[cellId].getContent()).getContent();
        String style=cc.getStyle().getCssText();
        hint.addUnresolvedCell(style,cells[cellId].getColId(),cells[cellId].getColSpan(),cells[cellId].getRowSpan());
      }
    }
    this.rowHint=hint;
  }
}","protected void keepUnresolvedCells(){
  if (rowCount <= 0) {
    return;
  }
  if (rowHint == null) {
    Row row=rows[rowCount - 1];
    Cell[] cells=rows[rowCount - 1].cells;
    IRowContent rowContent=(IRowContent)row.getContent();
    ITableContent table=rowContent.getTable();
    InstanceID tableId=table.getInstanceID();
    InstanceID rowId=rowContent.getInstanceID();
    UnresolvedRowHint hint=new UnresolvedRowHint(tableId.toUniqueString(),rowId.toUniqueString());
    for (int cellId=0; cellId < realColCount; cellId++) {
      if (cells[cellId] != null) {
        String style=null;
        CellContent cellContent=(CellContent)cells[cellId].getContent();
        if (cellContent != null) {
          ICellContent cc=cellContent.getContent();
          if (cc != null) {
            style=cc.getStyle().getCssText();
          }
        }
        hint.addUnresolvedCell(style,cells[cellId].getColId(),cells[cellId].getColSpan(),cells[cellId].getRowSpan());
      }
    }
    this.rowHint=hint;
  }
}",0.853475935828877
75554,"/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  boolean isEditPart=false;
  List selList=null;
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.SELECTION);
  if (obj != null) {
    selList=new ArrayList();
    selList.add(obj);
  }
  if (selList == null || selList.size() < 1) {
    selList=getSelectedObjects();
  }
  for (int i=0; i < selList.size(); i++) {
    if (selList.get(i) instanceof ReportElementEditPart) {
      isEditPart=true;
    }
  }
  if (isEditPart) {
    selList=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selList;
}","/** 
 * Gets models of selected elements
 * @return
 */
protected List getElementHandles(){
  boolean isEditPart=false;
  List selList=null;
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  Object obj=context.getVariable(ICommandParameterNameContants.SELECTION);
  if (obj != null) {
    selList=new ArrayList();
    selList.add(obj);
  }
  if (selList == null || selList.size() < 1) {
    return Collections.EMPTY_LIST;
  }
  for (int i=0; i < selList.size(); i++) {
    if (selList.get(i) instanceof ReportElementEditPart) {
      isEditPart=true;
    }
  }
  if (isEditPart) {
    selList=InsertInLayoutUtil.editPart2Model(TableUtil.filletCellInSelectionEditorpart(getSelection())).toList();
  }
  return selList;
}",0.9633577614923384
75555,"/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}","/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else       if (DEUtil.getDefaultSlotID(parent) != -1) {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
 else {
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject);
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}",0.9492847854356308
75556,"/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * populate all available value in selectValueList
 */
private void populateList(){
  try {
    getOkButton().setEnabled(false);
    selectValueList.removeAll();
    viewerValueList.clear();
    if (modelValueList != null) {
      Iterator iter=modelValueList.iterator();
      while (iter.hasNext()) {
        Object candiateValue=iter.next();
        if (candiateValue != null) {
          String displayCandiateValue;
          if (candiateValue instanceof Date && !(candiateValue instanceof java.sql.Date || candiateValue instanceof java.sql.Time)) {
            DateFormatter formatter=new DateFormatter(ULocale.US);
            formatter.applyPattern(""String_Node_Str"");
            displayCandiateValue=formatter.format((Date)candiateValue);
          }
 else           displayCandiateValue=DataTypeUtil.toString(candiateValue);
          viewerValueList.add(displayCandiateValue);
          selectValueList.add(displayCandiateValue);
        }
      }
    }
 else {
      selectValueList.removeAll();
      modelValueList.clear();
      viewerValueList.clear();
      ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (selectValueList.getItemCount() > 0) {
      selectValueList.select(0);
      getOkButton().setEnabled(true);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
}",0.9677179962894248
75557,"/** 
 * Compare two bounds in transposed way.
 * @param bo1
 * @param bo2
 * @return
 */
public static final int compareTransposed(Bounds bo1,Bounds bo2){
  final double dMinY1=bo1.getTop();
  final double dMinY2=bo2.getTop();
  double dDiff=dMinY1 - dMinY2;
  if (dDiff != 0) {
    return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
  }
 else {
    final double dMaxY1=bo1.getTop() + bo1.getHeight();
    final double dMaxY2=bo2.getTop() + bo2.getHeight();
    dDiff=dMaxY1 - dMaxY2;
    if (dDiff != 0) {
      return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
    }
 else {
      final double dMinX1=bo1.getLeft();
      final double dMinX2=bo2.getLeft();
      dDiff=dMinX1 - dMinX2;
      if (dDiff != 0) {
        return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
      }
 else {
        final double dMaxX1=bo1.getLeft() + bo1.getWidth();
        final double dMaxX2=bo2.getLeft() + bo2.getWidth();
        dDiff=dMaxX1 - dMaxX2;
        if (dDiff != 0) {
          return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
        }
 else {
          return IConstants.EQUAL;
        }
      }
    }
  }
}","/** 
 * Compare two bounds in transposed way.
 * @param bo1
 * @param bo2
 * @return
 */
public static final int compareTransposed(Bounds bo1,Bounds bo2){
  final double dMinY1=bo1.getTop() + bo1.getHeight();
  final double dMinY2=bo2.getTop() + bo2.getHeight();
  double dDiff=dMinY1 - dMinY2;
  if (dDiff != 0) {
    return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
  }
 else {
    final double dMaxY1=bo1.getTop();
    final double dMaxY2=bo2.getTop();
    dDiff=dMaxY1 - dMaxY2;
    if (dDiff != 0) {
      return (dDiff < 0) ? IConstants.MORE : IConstants.LESS;
    }
 else {
      final double dMinX1=bo1.getLeft();
      final double dMinX2=bo2.getLeft();
      dDiff=dMinX1 - dMinX2;
      if (dDiff != 0) {
        return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
      }
 else {
        final double dMaxX1=bo1.getLeft() + bo1.getWidth();
        final double dMaxX2=bo2.getLeft() + bo2.getWidth();
        dDiff=dMaxX1 - dMaxX2;
        if (dDiff != 0) {
          return (dDiff < 0) ? IConstants.LESS : IConstants.MORE;
        }
 else {
          return IConstants.EQUAL;
        }
      }
    }
  }
}",0.9680851063829788
75558,"private void createSortTestBindings(ICubeQueryDefinition cqd) throws DataException {
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  binding12.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding12.addAggregateOn(""String_Node_Str"");
  binding12.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding12);
  IBinding binding13=new Binding(""String_Node_Str"");
  binding13.setExpression(new ScriptExpression(""String_Node_Str""));
  binding13.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding13.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding13);
}","private void createSortTestBindings(ICubeQueryDefinition cqd) throws DataException {
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  binding12.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding12.addAggregateOn(""String_Node_Str"");
  binding12.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding12);
  IBinding binding13=new Binding(""String_Node_Str"");
  binding13.setExpression(new ScriptExpression(""String_Node_Str""));
  binding13.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding13.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding13);
}",0.9722054380664652
75559,"/** 
 * Test grand total
 * @throws Exception
 */
private void createSortTestBindings(ICubeQueryDefinition cqd) throws DataException {
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  binding5.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  binding12.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding12.addAggregateOn(""String_Node_Str"");
  binding12.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding12);
  IBinding binding13=new Binding(""String_Node_Str"");
  binding13.setExpression(new ScriptExpression(""String_Node_Str""));
  binding13.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding13.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding13);
}","/** 
 * Test grand total
 * @throws Exception
 */
private void createSortTestBindings(ICubeQueryDefinition cqd) throws DataException {
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  binding9.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding9.addAggregateOn(""String_Node_Str"");
  binding9.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  binding10.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  binding10.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  binding11.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  binding11.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  binding12.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding12.addAggregateOn(""String_Node_Str"");
  binding12.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding12);
  IBinding binding13=new Binding(""String_Node_Str"");
  binding13.setExpression(new ScriptExpression(""String_Node_Str""));
  binding13.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding13.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding13);
}",0.9726190476190476
75560,"/** 
 * @param ob1
 * @param ob2
 * @return
 */
public static int compareObjects(Object ob1,Object ob2){
  int result=0;
  if (ob1 == ob2) {
    return result;
  }
  if (ob1 == null || ob2 == null) {
    if (ob1 == null) {
      result=-1;
    }
 else {
      result=1;
    }
    return result;
  }
  if (ob1.equals(ob2)) {
    return result;
  }
 else   if (ob1 instanceof Comparable && ob2 instanceof Comparable) {
    Comparable comp1=(Comparable)ob1;
    Comparable comp2=(Comparable)ob2;
    if (ob1.getClass() != ob2.getClass()) {
      try {
        if (ob1 instanceof Number && ob2 instanceof Number) {
          comp1=DataTypeUtil.toDouble(ob1);
          comp2=DataTypeUtil.toDouble(ob2);
        }
 else         if (ob1 instanceof Date && ob2 instanceof Date) {
          comp1=DataTypeUtil.toDate(ob1);
          comp2=DataTypeUtil.toDate(ob1);
        }
      }
 catch (      BirtException ex) {
      }
    }
    result=comp1.compareTo(comp2);
  }
 else   if (ob1 instanceof Boolean && ob2 instanceof Boolean) {
    Boolean bool=(Boolean)ob1;
    if (bool.equals(Boolean.TRUE))     result=1;
 else     result=-1;
  }
 else {
  }
  return result;
}","/** 
 * @param ob1
 * @param ob2
 * @return
 */
public static int compareObjects(Object ob1,Object ob2){
  try {
    return ScriptEvalUtil.compare(ob1,ob2);
  }
 catch (  DataException e) {
    return -1;
  }
}",0.2319474835886214
75561,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
  }
  if (streamsWrapper.getStreamForDataSet() != null) {
    this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),resultSetPopulator.getEventHandler().getAllColumnBindings());
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  if (streamsWrapper.getStreamForGroupInfo() != null) {
    this.resultSetPopulator.getGroupProcessorManager().getGroupCalculationUtil().doSave(streamsWrapper.getStreamForGroupInfo());
  }
  if (isSubQuery == false && streamsWrapper.getStreamForResultClass() != null) {
    ((ResultClass)this.resultSetPopulator.getResultSetMetadata()).doSave(streamsWrapper.getStreamForResultClass(),resultSetPopulator.getEventHandler().getAllColumnBindings());
    try {
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        this.resultSetPopulator.getCache().doSave(streamsWrapper.getStreamForDataSet(),resultSetPopulator.getEventHandler().getAllColumnBindings());
      }
      streamsWrapper.getStreamForDataSet().close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.8803317535545023
75562,"public void doSave(StreamWrapper streamWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamWrapper.getStreamForResultClass() != null)     IOUtil.writeInt(streamWrapper.getStreamForResultClass(),0);
    if (streamWrapper.getStreamForDataSet() != null)     IOUtil.writeInt(streamWrapper.getStreamForDataSet(),0);
    IOUtil.writeInt(streamWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","public void doSave(StreamWrapper streamWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamWrapper.getStreamForResultClass() != null) {
      IOUtil.writeInt(streamWrapper.getStreamForResultClass(),0);
      streamWrapper.getStreamForResultClass().close();
      if (streamWrapper.getStreamForDataSet() != null) {
        IOUtil.writeInt(streamWrapper.getStreamForDataSet(),0);
        streamWrapper.getStreamForDataSet().close();
      }
    }
    IOUtil.writeInt(streamWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.8842832469775475
75563,"public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamsWrapper.getStreamForResultClass() != null)     IOUtil.writeInt(streamsWrapper.getStreamForResultClass(),0);
    if (streamsWrapper.getStreamForDataSet() != null)     IOUtil.writeInt(streamsWrapper.getStreamForDataSet(),0);
    IOUtil.writeInt(streamsWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","public void doSave(StreamWrapper streamsWrapper,boolean isSubQuery) throws DataException {
  try {
    if (streamsWrapper.getStreamForResultClass() != null) {
      IOUtil.writeInt(streamsWrapper.getStreamForResultClass(),0);
      streamsWrapper.getStreamForResultClass().close();
      if (streamsWrapper.getStreamForDataSet() != null) {
        IOUtil.writeInt(streamsWrapper.getStreamForDataSet(),0);
        streamsWrapper.getStreamForDataSet().close();
      }
    }
    IOUtil.writeInt(streamsWrapper.getStreamForGroupInfo(),0);
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.8839590443686007
75564,"/** 
 * @param odiResult
 * @param groupLevel
 * @param subQueryInfo
 * @throws DataException
 */
private void saveForUpdate(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    OutputStream streamForGroupInfo=null;
    OutputStream streamForRowIndexInfo=null;
    OutputStream streamForParentIndexInfo=null;
    boolean isSubQuery=streamManager.isSubquery();
    if (streamManager.isSecondRD() == true) {
      streamForRowIndexInfo=streamManager.getOutStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      if (isSubQuery == true)       streamForParentIndexInfo=streamManager.getOutStream(DataEngineContext.SUBQUERY_PARENTINDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    odiResult.doSave(new StreamWrapper(null,null,streamForGroupInfo,streamForRowIndexInfo,streamForParentIndexInfo),isSubQuery);
    streamForGroupInfo.close();
    if (streamForRowIndexInfo != null)     streamForRowIndexInfo.close();
    if (streamForParentIndexInfo != null)     streamForParentIndexInfo.close();
    if (isSubQuery == true) {
      if (mode == DataEngineContext.MODE_UPDATE) {
        saveSubQueryInfo(groupLevel,subQueryInfo);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param odiResult
 * @param groupLevel
 * @param subQueryInfo
 * @throws DataException
 */
private void saveForUpdate(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    OutputStream streamForGroupInfo=null;
    OutputStream streamForRowIndexInfo=null;
    OutputStream streamForParentIndexInfo=null;
    boolean isSubQuery=streamManager.isSubquery();
    if (streamManager.isSecondRD() == true) {
      streamForRowIndexInfo=streamManager.getOutStream(DataEngineContext.ROW_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      if (isSubQuery == true)       streamForParentIndexInfo=streamManager.getOutStream(DataEngineContext.SUBQUERY_PARENTINDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    odiResult.doSave(new StreamWrapper(streamManager,null,streamForGroupInfo,streamForRowIndexInfo,streamForParentIndexInfo),isSubQuery);
    streamForGroupInfo.close();
    if (streamForRowIndexInfo != null)     streamForRowIndexInfo.close();
    if (streamForParentIndexInfo != null)     streamForParentIndexInfo.close();
    if (isSubQuery == true) {
      if (mode == DataEngineContext.MODE_UPDATE) {
        saveSubQueryInfo(groupLevel,subQueryInfo);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.9943615257048092
75565,"/** 
 * @param odiResult
 * @param groupLevel
 * @param subQueryInfo
 * @throws DataException
 */
private void saveForGeneration(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    OutputStream streamForDataSet=null;
    OutputStream streamForResultClass=null;
    OutputStream streamForGroupInfo=null;
    boolean isSubQuery=streamManager.isSubquery();
    if (isSubQuery == false) {
      streamForDataSet=streamManager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
      streamForResultClass=streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    odiResult.doSave(new StreamWrapper(streamForDataSet,streamForResultClass,streamForGroupInfo,null,null),isSubQuery);
    if (streamForDataSet != null) {
      streamForDataSet.close();
      streamForResultClass.close();
    }
    streamForGroupInfo.close();
    if (isSubQuery == true) {
      if (streamManager.hasOutStream(DataEngineContext.SUBQUERY_INFO_STREAM,StreamManager.SUB_QUERY_ROOT_STREAM,StreamManager.SELF_SCOPE) == false) {
        saveSubQueryInfo(groupLevel,subQueryInfo);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}","/** 
 * @param odiResult
 * @param groupLevel
 * @param subQueryInfo
 * @throws DataException
 */
private void saveForGeneration(IResultIterator odiResult,int groupLevel,int[] subQueryInfo) throws DataException {
  try {
    OutputStream streamForResultClass=null;
    OutputStream streamForGroupInfo=null;
    boolean isSubQuery=streamManager.isSubquery();
    if (isSubQuery == false) {
      streamForResultClass=streamManager.getOutStream(DataEngineContext.DATASET_META_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    }
    streamForGroupInfo=streamManager.getOutStream(DataEngineContext.GROUP_INFO_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    odiResult.doSave(new StreamWrapper(streamManager,streamForResultClass,streamForGroupInfo,null,null),isSubQuery);
    streamForGroupInfo.close();
    if (isSubQuery == true) {
      if (streamManager.hasOutStream(DataEngineContext.SUBQUERY_INFO_STREAM,StreamManager.SUB_QUERY_ROOT_STREAM,StreamManager.SELF_SCOPE) == false) {
        saveSubQueryInfo(groupLevel,subQueryInfo);
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(ResourceConstants.RD_SAVE_ERROR,e,""String_Node_Str"");
  }
}",0.875186846038864
75566,"/** 
 * @return
 */
public OutputStream getStreamForDataSet(){
  return this.streamForDataSet;
}","/** 
 * @return
 * @throws DataException 
 */
public OutputStream getStreamForDataSet() throws DataException {
  if (this.streamForResultClass != null && this.streamForDataSet == null) {
    this.streamForDataSet=manager.getOutStream(DataEngineContext.DATASET_DATA_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  }
  return this.streamForDataSet;
}",0.296943231441048
75567,"/** 
 * @param streamForResultClass
 * @param streamForDataSet
 * @param streamForGroupInfo
 * @param streamForRowIndexInfo
 */
public StreamWrapper(OutputStream streamForDataSet,OutputStream streamForResultClass,OutputStream streamForGroupInfo,OutputStream streamForRowIndexInfo,OutputStream streamForParentIndex){
  this.streamForResultClass=streamForResultClass;
  this.streamForDataSet=streamForDataSet;
  this.streamForGroupInfo=streamForGroupInfo;
  this.streamForRowIndexInfo=streamForRowIndexInfo;
  this.streamForParentIndex=streamForParentIndex;
}","/** 
 * @param streamForResultClass
 * @param streamForDataSet
 * @param streamForGroupInfo
 * @param streamForRowIndexInfo
 */
public StreamWrapper(StreamManager manager,OutputStream streamForResultClass,OutputStream streamForGroupInfo,OutputStream streamForRowIndexInfo,OutputStream streamForParentIndex){
  this.streamForResultClass=streamForResultClass;
  this.streamForGroupInfo=streamForGroupInfo;
  this.streamForRowIndexInfo=streamForRowIndexInfo;
  this.streamForParentIndex=streamForParentIndex;
  this.manager=manager;
}",0.8088235294117647
75568,"/** 
 * @param context
 * @param id
 * @throws DataException
 */
public DataStreamReader(DataEngineContext context,StreamID id) throws DataException {
  try {
    this.streamMap=new HashMap();
    this.id=id;
    this.context=context;
    RAInputStream is=context.getInputStream(id.getStartStream(),id.getSubQueryStream(),DataEngineContext.DATASET_DATA_STREAM);
    DataInputStream metaIndexStream=new DataInputStream(is);
    while (is.getOffset() < is.length()) {
      int type=is.readInt();
      int size=is.readInt();
      long offset=is.getOffset();
      this.streamMap.put(new Integer(type),new WrapperedRAInputStream((RAInputStream)context.getInputStream(id.getStartStream(),id.getSubQueryStream(),DataEngineContext.DATASET_DATA_STREAM),offset,size));
      is.skip(size);
    }
    metaIndexStream.close();
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","/** 
 * @param context
 * @param id
 * @throws DataException
 */
public DataStreamReader(DataEngineContext context,StreamID id) throws DataException {
  try {
    this.streamMap=new HashMap();
    this.id=id;
    this.context=context;
    RAInputStream is=context.getInputStream(id.getStartStream(),id.getSubQueryStream(),DataEngineContext.DATASET_DATA_STREAM);
    DataInputStream metaIndexStream=new DataInputStream(is);
    int type=is.readInt();
    int size=is.readInt();
    long offset=is.getOffset();
    this.streamMap.put(new Integer(type),new WrapperedRAInputStream((RAInputStream)context.getInputStream(id.getStartStream(),id.getSubQueryStream(),DataEngineContext.DATASET_DATA_STREAM),offset,size));
    metaIndexStream.close();
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.5367816091954023
75569,"/** 
 * @param streamType
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public OutputStream getOutStream(int streamType,int streamPos,int streamScope) throws DataException {
  StreamID streamID=getStreamID(streamType,streamPos,streamScope);
  if (!useTempStream(streamType)) {
    return context.getOutputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
  }
 else {
    int sType=DataEngineContext.META_STREAM;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM || streamType == DataEngineContext.DATASET_META_STREAM)     sType=DataEngineContext.DATASET_DATA_STREAM;
    return this.getTempStreamManager(getStreamID(sType,streamPos,streamScope)).getOutputStream(streamType);
  }
}","/** 
 * @param streamType
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public OutputStream getOutStream(int streamType,int streamPos,int streamScope) throws DataException {
  StreamID streamID=getStreamID(streamType,streamPos,streamScope);
  if (!useTempStream(streamType)) {
    RAOutputStream outputStream=context.getOutputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        outputStream.seek(outputStream.length());
        outputStream.writeInt(0);
        outputStream.writeInt(0);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    return outputStream;
  }
 else {
    int sType=DataEngineContext.META_STREAM;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM || streamType == DataEngineContext.DATASET_META_STREAM)     sType=DataEngineContext.DATASET_DATA_STREAM;
    return this.getTempStreamManager(getStreamID(sType,streamPos,streamScope)).getOutputStream(streamType);
  }
}",0.7952966328166756
75570,"/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.DATASET_META_STREAM:
  return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
default :
return false;
}
}","/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
default :
return false;
}
}",0.9769543605964752
75571,"private RAInputStream createInputStream(StreamID streamID,int streamType) throws DataException {
  if (!useTempStream(streamType)) {
    return (RAInputStream)context.getInputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
  }
 else {
    return this.getMetaManager(streamID,streamType).getRAInputStream(streamType);
  }
}","private RAInputStream createInputStream(StreamID streamID,int streamType) throws DataException {
  if (!useTempStream(streamType)) {
    RAInputStream stream=(RAInputStream)context.getInputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        stream.readInt();
        int size=stream.readInt();
        stream.skip(size);
        stream.readInt();
        stream.readInt();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    return stream;
  }
 else {
    return this.getMetaManager(streamID,streamType).getRAInputStream(streamType);
  }
}",0.6356877323420075
75572,"public Object execute(ExecutionEvent event) throws ExecutionException {
  SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(""String_Node_Str"" + itemName);
  ExtendedItemHandle handle=null;
  handle=DesignElementFactory.getInstance().newExtendedItem(null,itemName);
  Map map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,handle);
  CreateCommand command=new CreateCommand(map);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  EditPart targetEditPart=(EditPart)context.getVariable(""String_Node_Str"");
  if (targetEditPart != null) {
    command.setParent(targetEditPart.getModel());
  }
 else {
    Object parentModel=DNDUtil.unwrapToModel(UIUtil.getCurrentEditPart().getModel());
    if (parentModel instanceof DesignElementHandle) {
      DesignElementHandle parentHandle=(DesignElementHandle)parentModel;
      if (parentHandle.getDefn().isContainer()) {
        command.setParent(parentModel);
      }
 else {
        command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
      }
    }
 else {
      command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  try {
    command.execute();
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
  }
  if (command.getParent() instanceof LibraryHandle) {
    HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
  }
  return handle;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(""String_Node_Str"" + itemName);
  ExtendedItemHandle handle=null;
  handle=DesignElementFactory.getInstance().newExtendedItem(null,itemName);
  Map map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,handle);
  CreateCommand command=new CreateCommand(map);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  EditPart targetEditPart=(EditPart)context.getVariable(""String_Node_Str"");
  if (targetEditPart != null) {
    command.setParent(DNDUtil.unwrapToModel(targetEditPart.getModel()));
  }
 else {
    Object parentModel=DNDUtil.unwrapToModel(UIUtil.getCurrentEditPart().getModel());
    if (parentModel instanceof DesignElementHandle) {
      DesignElementHandle parentHandle=(DesignElementHandle)parentModel;
      if (parentHandle.getDefn().isContainer()) {
        command.setParent(parentModel);
      }
 else {
        command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
      }
    }
 else {
      command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  try {
    command.execute();
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
  }
  if (command.getParent() instanceof LibraryHandle) {
    HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
  }
  return handle;
}",0.993103448275862
75573,"public Object execute(ExecutionEvent event) throws ExecutionException {
  SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(""String_Node_Str"" + itemName);
  ExtendedItemHandle handle=null;
  handle=DesignElementFactory.getInstance().newExtendedItem(null,itemName);
  Map map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,handle);
  CreateCommand command=new CreateCommand(map);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  EditPart targetEditPart=(EditPart)context.getVariable(""String_Node_Str"");
  if (targetEditPart != null) {
    command.setParent(targetEditPart.getModel());
  }
 else {
    Object parentModel=UIUtil.getCurrentEditPart().getModel();
    if (parentModel instanceof DesignElementHandle) {
      DesignElementHandle parentHandle=(DesignElementHandle)parentModel;
      if (parentHandle.getDefn().isContainer()) {
        command.setParent(parentModel);
      }
 else {
        command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
      }
    }
 else {
      command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  try {
    command.execute();
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
  }
  if (command.getParent() instanceof LibraryHandle) {
    HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
  }
  return handle;
}","public Object execute(ExecutionEvent event) throws ExecutionException {
  SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().startTrans(""String_Node_Str"" + itemName);
  ExtendedItemHandle handle=null;
  handle=DesignElementFactory.getInstance().newExtendedItem(null,itemName);
  Map map=new HashMap();
  map.put(DesignerConstants.KEY_NEWOBJECT,handle);
  CreateCommand command=new CreateCommand(map);
  IEvaluationContext context=(IEvaluationContext)event.getApplicationContext();
  EditPart targetEditPart=(EditPart)context.getVariable(""String_Node_Str"");
  if (targetEditPart != null) {
    command.setParent(targetEditPart.getModel());
  }
 else {
    Object parentModel=DNDUtil.unwrapToModel(UIUtil.getCurrentEditPart().getModel());
    if (parentModel instanceof DesignElementHandle) {
      DesignElementHandle parentHandle=(DesignElementHandle)parentModel;
      if (parentHandle.getDefn().isContainer()) {
        command.setParent(parentModel);
      }
 else {
        command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
      }
    }
 else {
      command.setParent(SessionHandleAdapter.getInstance().getReportDesignHandle());
    }
  }
  try {
    command.execute();
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().commit();
  }
 catch (  Exception e) {
    SessionHandleAdapter.getInstance().getReportDesignHandle().getCommandStack().rollback();
  }
  if (command.getParent() instanceof LibraryHandle) {
    HandleAdapterFactory.getInstance().getLibraryHandleAdapter().setCurrentEditorModel(handle,LibraryHandleAdapter.CREATE_ELEMENT);
  }
  return handle;
}",0.993006993006993
75574,"/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else       if (DEUtil.getDefaultSlotID(parent) != -1) {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
 else {
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject);
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}","/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else     if (DEUtil.getDefaultSlotID(parent) != -1) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
    }
 else     if (DEUtil.getDefaultSlotID(parent) == -1) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after,DEUtil.getDefaultContentName(parent));
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject,pos);
      }
 else {
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject);
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    e.printStackTrace();
  }
}",0.8810795614281698
75575,"/** 
 * Returns the container slotHandle.
 */
private SlotHandle getDefaultSlotHandle(String insertType){
  IStructuredSelection models=InsertInLayoutUtil.editPart2Model(getSelection());
  if (models.isEmpty()) {
    return null;
  }
  model=models.getFirstElement();
  if (model instanceof LibRootModel) {
    model=((LibRootModel)model).getModel();
  }
  if (model instanceof SlotHandle) {
    return (SlotHandle)model;
  }
 else   if (model instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)model;
    if (handle.getDefn().isContainer()) {
      int slotId=DEUtil.getDefaultSlotID(handle);
      if (handle.canContain(slotId,insertType)) {
        return handle.getSlot(slotId);
      }
    }
    return handle.getContainerSlotHandle();
  }
  return null;
}","/** 
 * Returns the container slotHandle.
 */
private SlotHandle getDefaultSlotHandle(String insertType){
  IStructuredSelection models=InsertInLayoutUtil.editPart2Model(getSelection());
  if (models.isEmpty()) {
    return null;
  }
  model=DNDUtil.unwrapToModel(models.getFirstElement());
  if (model instanceof LibRootModel) {
    model=((LibRootModel)model).getModel();
  }
  if (model instanceof SlotHandle) {
    return (SlotHandle)model;
  }
 else   if (model instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)model;
    if (handle.getDefn().isContainer()) {
      int slotId=DEUtil.getDefaultSlotID(handle);
      if (handle.canContain(slotId,insertType)) {
        return handle.getSlot(slotId);
      }
    }
    return handle.getContainerSlotHandle();
  }
  return null;
}",0.9857585139318884
75576,"protected boolean calculateEnabled(){
  slotHandle=getDefaultSlotHandle(insertType);
  return DNDUtil.handleValidateTargetCanContainType(slotHandle,insertType) && DNDUtil.handleValidateTargetCanContainMore(slotHandle,0);
}","protected boolean calculateEnabled(){
  slotHandle=getDefaultSlotHandle(insertType);
  propertyHandle=getDefaultPropertyHandle(insertType);
  Object obj=slotHandle;
  if (obj == null) {
    obj=model;
  }
  return DNDUtil.handleValidateTargetCanContainType(obj,insertType) && DNDUtil.handleValidateTargetCanContainMore(obj,0);
}",0.7345454545454545
75577,"protected Request insertElement() throws Exception {
  Request request=new Request(IRequestConstants.REQUEST_TYPE_INSERT);
  Map extendsData=new HashMap();
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_SLOT,slotHandle);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_TYPE,insertType);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_POSITION,InsertAction.BELOW);
  request.setExtendedData(extendsData);
  if (ProviderFactory.createProvider(slotHandle.getElementHandle()).performRequest(model,request)) {
    return request;
  }
  return null;
}","protected Request insertElement() throws Exception {
  Request request=new Request(IRequestConstants.REQUEST_TYPE_INSERT);
  Map extendsData=new HashMap();
  if (slotHandle != null) {
    extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_SLOT,slotHandle);
  }
 else   if (propertyHandle != null) {
    extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_PROPERTY,propertyHandle);
  }
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_TYPE,insertType);
  extendsData.put(IRequestConstants.REQUEST_KEY_INSERT_POSITION,InsertAction.BELOW);
  request.setExtendedData(extendsData);
  Object obj=model;
  if (slotHandle != null) {
    obj=slotHandle.getElementHandle();
  }
  if (ProviderFactory.createProvider(obj).performRequest(model,request)) {
    return request;
  }
  return null;
}",0.7691176470588236
75578,"public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      showLevels.add(levelHandle.getCubeLevel());
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      processor(showLevels,result);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}","public void run(){
  transStar(NAME);
  try {
    LevelViewDialog dialog=new LevelViewDialog(UIUtil.getDefaultShell());
    List showLevels=new ArrayList();
    List nullLevelHandle=new ArrayList();
    int viewCount=viewHandle.getLevelCount();
    for (int i=0; i < viewCount; i++) {
      LevelViewHandle levelHandle=viewHandle.getLevel(i);
      if (levelHandle.getCubeLevel() == null) {
        nullLevelHandle.add(new Integer(levelHandle.getIndex()));
      }
 else {
        showLevels.add(levelHandle.getCubeLevel());
      }
    }
    dialog.setInput(viewHandle.getCubeDimension(),showLevels);
    if (dialog.open() == Window.OK) {
      List result=(List)dialog.getResult();
      processor(showLevels,result,nullLevelHandle);
    }
  }
 catch (  SemanticException e) {
    rollBack();
    ExceptionHandler.handle(e);
    return;
  }
  transEnd();
}",0.8695652173913043
75579,"private void processor(List ori,List newList) throws SemanticException {
  for (int i=0; i < ori.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)ori.get(i);
    if (!newList.contains(tempHandle)) {
      viewHandle.removeLevel(tempHandle.getQualifiedName());
    }
  }
  Collections.sort(newList,new LevelComparator());
  for (int i=0; i < newList.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)newList.get(i);
    if (viewHandle.getLevel(tempHandle.getQualifiedName()) == null) {
      insertLevelHandle(tempHandle,i);
    }
  }
}","private void processor(List ori,List newList,List nullLevelHandle) throws SemanticException {
  for (int i=nullLevelHandle.size() - 1; i >= 0; i--) {
    int index=((Integer)nullLevelHandle.get(i)).intValue();
    viewHandle.removeLevel(index);
  }
  for (int i=0; i < ori.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)ori.get(i);
    if (!newList.contains(tempHandle)) {
      viewHandle.removeLevel(tempHandle.getQualifiedName());
    }
  }
  Collections.sort(newList,new LevelComparator());
  for (int i=0; i < newList.size(); i++) {
    LevelHandle tempHandle=(LevelHandle)newList.get(i);
    if (viewHandle.getLevel(tempHandle.getQualifiedName()) == null) {
      insertLevelHandle(tempHandle,i);
    }
  }
}",0.861198738170347
75580,"/** 
 * @return
 * @throws DataException
 */
private void populateComputedColumns(List aggCCList) throws DataException {
  if (!psController.needDoOperation(PassStatusController.DATA_SET_COMPUTED_COLUMN_POPULATING))   return;
  if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING)) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
  }
  computedColumnHelper.getComputedColumnList().clear();
  computedColumnHelper.getComputedColumnList().addAll(aggCCList);
  computedColumnHelper.setModel(TransformationConstants.DATA_SET_MODEL);
  iccState.setModel(TransformationConstants.DATA_SET_MODEL);
  if (iccState.getCount() > 0) {
    ComputedColumnCalculator.populateComputedColumns(this.populator,new OdiResultSetWrapper(this.populator.getResultIterator()),iccState,computedColumnHelper,this.session);
  }
  computedColumnHelper.setModel(TransformationConstants.NONE_MODEL);
}","/** 
 * @return
 * @throws DataException
 */
private void populateComputedColumns(List aggCCList) throws DataException {
  if (!psController.needDoOperation(PassStatusController.DATA_SET_COMPUTED_COLUMN_POPULATING))   return;
  if (!psController.needDoOperation(PassStatusController.DATA_SET_FILTERING)) {
    if (iccState != null) {
      for (int i=0; i < iccState.getCount(); i++) {
        if (iccState.isValueAvailable(i)) {
          for (int k=0; k < this.populator.getQuery().getFetchEvents().size(); k++) {
            if (this.populator.getQuery().getFetchEvents().get(k) instanceof ComputedColumnHelper) {
              ComputedColumnHelper helper=(ComputedColumnHelper)this.populator.getQuery().getFetchEvents().get(k);
              helper.getComputedColumnList().remove(iccState.getComputedColumn(i));
              break;
            }
          }
        }
      }
    }
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),false,this.session);
  }
  computedColumnHelper.getComputedColumnList().clear();
  computedColumnHelper.getComputedColumnList().addAll(aggCCList);
  computedColumnHelper.setModel(TransformationConstants.DATA_SET_MODEL);
  iccState.setModel(TransformationConstants.DATA_SET_MODEL);
  if (iccState.getCount() > 0) {
    ComputedColumnCalculator.populateComputedColumns(this.populator,new OdiResultSetWrapper(this.populator.getResultIterator()),iccState,computedColumnHelper,this.session);
  }
  computedColumnHelper.setModel(TransformationConstants.NONE_MODEL);
}",0.7667603372139703
75581,"/** 
 * @param odaResultSet
 * @throws DataException
 */
private void populateResultSetCacheInResultSetPopulator(OdiResultSetWrapper odaResultSet) throws DataException {
  int max=0;
  if (computedColumnHelper != null)   computedColumnHelper.setModel(TransformationConstants.NONE_MODEL);
  if (filterByRow != null) {
    filterByRow.setWorkingFilterSet(FilterByRow.NO_FILTER);
  }
  max=this.populator.getQuery().getMaxRows();
  if (filterByRow != null)   this.populator.getQuery().setMaxRows(0);
  PassUtil.pass(this.populator,odaResultSet,false,this.session);
  this.removeOnFetchScriptHelper();
  this.populator.getQuery().setMaxRows(max);
}","/** 
 * @param odaResultSet
 * @throws DataException
 */
private void populateResultSetCacheInResultSetPopulator(OdiResultSetWrapper odaResultSet) throws DataException {
  int max=0;
  if (computedColumnHelper != null)   computedColumnHelper.setModel(TransformationConstants.PRE_CALCULATE_MODEL);
  if (filterByRow != null) {
    filterByRow.setWorkingFilterSet(FilterByRow.NO_FILTER);
  }
  max=this.populator.getQuery().getMaxRows();
  if (filterByRow != null)   this.populator.getQuery().setMaxRows(0);
  PassUtil.pass(this.populator,odaResultSet,false,this.session);
  this.removeOnFetchScriptHelper();
  this.populator.getQuery().setMaxRows(max);
}",0.9884348496530456
75582,"/** 
 * @return
 */
private ComputedColumnHelperInstance getCurrentInstance(){
  if (this.currentModel == TransformationConstants.DATA_SET_MODEL)   return this.dataSetInstance;
 else   if (this.currentModel == TransformationConstants.RESULT_SET_MODEL)   return this.resultSetInstance;
  return null;
}","/** 
 * @return
 */
private ComputedColumnHelperInstance getCurrentInstance(){
  if (this.currentModel == TransformationConstants.DATA_SET_MODEL)   return this.dataSetInstance;
 else   if (this.currentModel == TransformationConstants.RESULT_SET_MODEL)   return this.resultSetInstance;
 else   if (this.currentModel == TransformationConstants.PRE_CALCULATE_MODEL)   return this.availableModeInstance;
  return null;
}",0.806136680613668
75583,"/** 
 * @param dataSet
 * @param dataSetCCList
 * @param resultSetCCList
 */
ComputedColumnHelper(DataSetRuntime dataSet,List dataSetCCList,List resultSetCCList){
  Object[] params={dataSet,dataSetCCList,resultSetCCList};
  logger.entering(ComputedColumnHelper.class.getName(),""String_Node_Str"",params);
  this.dataSetInstance=new ComputedColumnHelperInstance(dataSet,dataSetCCList);
  this.resultSetInstance=new ComputedColumnHelperInstance(dataSet,resultSetCCList);
  this.currentModel=TransformationConstants.DATA_SET_MODEL;
  this.allCC=new ArrayList();
  this.allCC.addAll(dataSetCCList);
  this.allCC.addAll(resultSetCCList);
  logger.exiting(ComputedColumnHelper.class.getName(),""String_Node_Str"");
}","/** 
 */
ComputedColumnHelper(DataSetRuntime dataSet,List dataSetCCList,List resultSetCCList) throws DataException {
  Object[] params={dataSet,dataSetCCList,resultSetCCList};
  logger.entering(ComputedColumnHelper.class.getName(),""String_Node_Str"",params);
  this.dataSetInstance=new ComputedColumnHelperInstance(dataSet,dataSetCCList);
  this.resultSetInstance=new ComputedColumnHelperInstance(dataSet,resultSetCCList);
  List availableCCList=new ArrayList();
  getAvailableComputedList(getComputedNameList(dataSetCCList),dataSetCCList,availableCCList);
  this.availableModeInstance=new ComputedColumnHelperInstance(dataSet,availableCCList);
  this.currentModel=TransformationConstants.DATA_SET_MODEL;
  this.allCC=new ArrayList();
  this.allCC.addAll(dataSetCCList);
  this.allCC.addAll(resultSetCCList);
  logger.exiting(ComputedColumnHelper.class.getName(),""String_Node_Str"");
}",0.8037735849056604
75584,"public void testCube1AggregationWithColPara() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[1];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(null,""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitonsWithParameterCol);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel31),-1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0),null);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(3.8333333333333335));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}","public void testCube1AggregationWithColPara() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[1];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(null,""String_Node_Str"",new DimLevel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitonsWithParameterCol);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel31),-1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0),null);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(3.8333333333333335));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}",0.9863088718510404
75585,"public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[2];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[1]=new AggregationFunctionDefinition(null,""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitonsWithParameterCol);
  aggregations[3]=new AggregationDefinition(levelsForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(dimLevel31),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[2].getAggregationValue(1),new Double(3.8333333333333335));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[3].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}","public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  AggregationFunctionDefinition[] funcitonsWithParameterCol=new AggregationFunctionDefinition[2];
  funcitonsWithParameterCol[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  funcitonsWithParameterCol[1]=new AggregationFunctionDefinition(null,""String_Node_Str"",new DimLevel(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"",IBuildInAggregation.TOTAL_WEIGHTEDAVE_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitonsWithParameterCol);
  aggregations[3]=new AggregationDefinition(levelsForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(dimLevel31),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[2].getAggregationValue(1),new Double(3.8333333333333335));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[3].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}",0.9957294157840793
75586,"/** 
 * @param strArray
 * @param str
 * @return
 */
private static int find(String[] strArray,String str){
  if (strArray == null || str == null) {
    return -1;
  }
  for (int i=0; i < strArray.length; i++) {
    if (str.equals(strArray[i])) {
      return i;
    }
  }
  return -1;
}","/** 
 * @param colArray
 * @param col
 * @return
 */
private static int find(DimColumn[] colArray,DimColumn col){
  if (colArray == null || col == null) {
    return -1;
  }
  for (int i=0; i < colArray.length; i++) {
    if (col.equals(colArray[i])) {
      return i;
    }
  }
  return -1;
}",0.7137931034482758
75587,"/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,String[] paramterColNames,IFactTableRowIterator facttableRowIterator) throws DataException {
  Object[] params={aggregationDef,facttableRowIterator};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndex=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggregation aggregation=BuiltInAggregationFactory.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation.getParameterDefn() != null && aggregation.getParameterDefn().length > 1) {
        this.parameterColIndex[i]=find(paramterColNames,aggregationFunction[i].getParaColName());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndex[i]=facttableRowIterator.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if (this.measureIndex[i] == -1) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregationDef
 * @param facttableRowIterator
 * @throws DataException 
 */
AggregationCalculator(AggregationDefinition aggregationDef,DimColumn[] paramterColNames,IFactTableRowIterator facttableRowIterator) throws DataException {
  Object[] params={aggregationDef,facttableRowIterator};
  logger.entering(AggregationCalculator.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregationDef;
  AggregationFunctionDefinition[] aggregationFunction=aggregationDef.getAggregationFunctions();
  if (aggregationDef.getLevels() == null)   this.levelCount=0;
 else   this.levelCount=aggregationDef.getLevels().length;
  if (aggregationFunction != null) {
    this.accumulators=new Accumulator[aggregationFunction.length];
    this.measureIndex=new int[aggregationFunction.length];
    this.parameterColIndex=new int[aggregationFunction.length];
    for (int i=0; i < aggregationFunction.length; i++) {
      IAggregation aggregation=BuiltInAggregationFactory.getInstance().getAggregation(aggregationFunction[i].getFunctionName());
      if (aggregation.getParameterDefn() != null && aggregation.getParameterDefn().length > 1) {
        this.parameterColIndex[i]=find(paramterColNames,aggregationFunction[i].getParaCol());
      }
 else {
        this.parameterColIndex[i]=-1;
      }
      this.accumulators[i]=aggregation.newAccumulator();
      this.accumulators[i].start();
      this.measureIndex[i]=facttableRowIterator.getMeasureIndex(aggregationFunction[i].getMeasureName());
      if (this.measureIndex[i] == -1) {
        throw new DataException(ResourceConstants.MEASURE_NAME_NOT_FOUND,aggregationFunction[i].getMeasureName());
      }
    }
  }
  result=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  logger.exiting(AggregationCalculator.class.getName(),""String_Node_Str"");
}",0.9948717948717948
75588,"private void getParameterColIndex(AggregationDefinition[] aggregations) throws DataException {
  List colNameList=new ArrayList();
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] functions=aggregations[i].getAggregationFunctions();
    if (functions == null) {
      continue;
    }
    for (int j=0; j < functions.length; j++) {
      String colName=functions[j].getParaColName();
      if (colName != null) {
        if (!exist(colNameList,colName)) {
          colNameList.add(colName);
        }
      }
    }
  }
  if (colNameList.size() == 0) {
    return;
  }
  parameterColNames=new String[colNameList.size()];
  for (int i=0; i < colNameList.size(); i++) {
    parameterColNames[i]=(String)(colNameList.get(i));
  }
  parameterColIndexs=new int[colNameList.size()][4];
  findColumnIndex();
}","private void getParameterColIndex(AggregationDefinition[] aggregations) throws DataException {
  List paraColList=new ArrayList();
  for (int i=0; i < aggregations.length; i++) {
    AggregationFunctionDefinition[] functions=aggregations[i].getAggregationFunctions();
    if (functions == null) {
      continue;
    }
    for (int j=0; j < functions.length; j++) {
      DimColumn paraCol=functions[j].getParaCol();
      if (paraCol != null) {
        if (!exist(paraColList,paraCol)) {
          paraColList.add(paraCol);
        }
      }
    }
  }
  if (paraColList.size() == 0) {
    return;
  }
  paraColumns=new DimColumn[paraColList.size()];
  for (int i=0; i < paraColList.size(); i++) {
    paraColumns[i]=(DimColumn)(paraColList.get(i));
  }
  parameterColIndexs=new int[paraColList.size()][4];
  findColumnIndex();
}",0.8276276276276276
75589,"/** 
 * @throws DataException
 */
private void findColumnIndex() throws DataException {
  if (parameterColNames == null) {
    return;
  }
  for (int i=0; i < parameterColNames.length; i++) {
    parameterColIndexs[i][0]=-1;
    for (int j=0; j < dimesionResultIterators.length; j++) {
      ILevel[] levels=dimesionResultIterators[j].getDimesion().getHierarchy().getLevels();
      for (int k=0; k < levels.length; k++) {
        String[] columns=levels[k].getKeyNames();
        int index=find(columns,parameterColNames[i]);
        if (index >= 0) {
          parameterColIndexs[i][0]=0;
          parameterColIndexs[i][1]=j;
          parameterColIndexs[i][2]=k;
          parameterColIndexs[i][3]=index;
          break;
        }
        columns=levels[k].getAttributeNames();
        index=find(columns,parameterColNames[i]);
        if (index >= 0) {
          parameterColIndexs[i][0]=1;
          parameterColIndexs[i][1]=j;
          parameterColIndexs[i][2]=k;
          parameterColIndexs[i][3]=index;
          break;
        }
      }
      if (parameterColIndexs[i][0] != -1) {
        break;
      }
    }
    if (parameterColIndexs[i][0] == -1) {
      throw new DataException(ResourceConstants.PARAMETER_COL_OF_AGGREGATION_NOT_EXIST,parameterColNames[i]);
    }
  }
}","/** 
 * @throws DataException
 */
private void findColumnIndex() throws DataException {
  if (paraColumns == null) {
    return;
  }
  for (int i=0; i < paraColumns.length; i++) {
    parameterColIndexs[i][0]=-1;
    for (int j=0; j < dimesionResultIterators.length; j++) {
      if (!dimesionResultIterators[j].getDimesion().getName().equals(paraColumns[i].getDimensionName())) {
        continue;
      }
      ILevel[] levels=dimesionResultIterators[j].getDimesion().getHierarchy().getLevels();
      for (int k=0; k < levels.length; k++) {
        if (!levels[k].getName().equals(paraColumns[i].getLevelName())) {
          continue;
        }
        String[] columns=levels[k].getKeyNames();
        int index=find(columns,paraColumns[i].getColumnName());
        if (index >= 0) {
          parameterColIndexs[i][0]=0;
          parameterColIndexs[i][1]=j;
          parameterColIndexs[i][2]=k;
          parameterColIndexs[i][3]=index;
          break;
        }
        columns=levels[k].getAttributeNames();
        index=find(columns,paraColumns[i].getColumnName());
        if (index >= 0) {
          parameterColIndexs[i][0]=1;
          parameterColIndexs[i][1]=j;
          parameterColIndexs[i][2]=k;
          parameterColIndexs[i][3]=index;
          break;
        }
      }
      if (parameterColIndexs[i][0] != -1) {
        break;
      }
    }
    if (parameterColIndexs[i][0] == -1) {
      throw new DataException(ResourceConstants.PARAMETER_COL_OF_AGGREGATION_NOT_EXIST,paraColumns[i]);
    }
  }
}",0.872287442191391
75590,"/** 
 * @param strList
 * @param str
 * @return
 */
private boolean exist(List strList,String str){
  for (int i=0; i < strList.size(); i++) {
    if (str.equals(strList.get(i))) {
      return true;
    }
  }
  return false;
}","/** 
 * @param colList
 * @param col
 * @return
 */
private boolean exist(List colList,DimColumn col){
  for (int i=0; i < colList.size(); i++) {
    if (col.equals(colList.get(i))) {
      return true;
    }
  }
  return false;
}",0.8708971553610503
75591,"/** 
 * @param dimesionResultIterators
 * @param facttableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(IDimensionResultIterator[] dimesionResultIterators,IFactTableRowIterator facttableRowIterator,AggregationDefinition[] aggregations) throws DataException {
  Object[] params={dimesionResultIterators,facttableRowIterator,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dimesionResultIterators=dimesionResultIterators;
  getParameterColIndex(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],parameterColNames,facttableRowIterator);
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  this.facttableRowIterator=facttableRowIterator;
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}","/** 
 * @param dimesionResultIterators
 * @param facttableRowIterator
 * @param aggregations
 * @throws BirtOlapException 
 */
public AggregationExecutor(IDimensionResultIterator[] dimesionResultIterators,IFactTableRowIterator facttableRowIterator,AggregationDefinition[] aggregations) throws DataException {
  Object[] params={dimesionResultIterators,facttableRowIterator,aggregations};
  logger.entering(AggregationExecutor.class.getName(),""String_Node_Str"",params);
  this.dimesionResultIterators=dimesionResultIterators;
  getParameterColIndex(aggregations);
  this.aggregationCalculators=new AggregationCalculator[aggregations.length];
  for (int i=0; i < this.aggregationCalculators.length; i++) {
    this.aggregationCalculators[i]=new AggregationCalculator(aggregations[i],paraColumns,facttableRowIterator);
  }
  sortedFactRows=new DiskSortedStackWrapper[aggregations.length];
  this.facttableRowIterator=facttableRowIterator;
  getAggregationLevelIndex();
  logger.exiting(AggregationExecutor.class.getName(),""String_Node_Str"");
}",0.9942473633748802
75592,"private List getGrandTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=levelHandle.getCrosstab();
  int measureCount=reportHandle.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    info.setMeasure(reportHandle.getMeasure(i).getCubeMeasure());
    retValue.add(info);
  }
  List measures=reportHandle.getAggregationMeasures(viewHandle.getAxisType());
  for (int i=0; i < measures.size(); i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    MeasureViewHandle measureViewHandle=(MeasureViewHandle)measures.get(i);
    info.setMeasure(measureViewHandle.getCubeMeasure());
    info.setFunction(measureViewHandle.getCubeMeasure().getFunction());
    replaceInfo(info,retValue);
  }
  return retValue;
}","private List getGrandTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=levelHandle.getCrosstab();
  int measureCount=reportHandle.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    info.setMeasure(reportHandle.getMeasure(i).getCubeMeasure());
    info.setFunction(reportHandle.getMeasure(i).getCubeMeasure().getFunction());
    retValue.add(info);
  }
  List measures=reportHandle.getAggregationMeasures(viewHandle.getAxisType());
  for (int i=0; i < measures.size(); i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    MeasureViewHandle measureViewHandle=(MeasureViewHandle)measures.get(i);
    info.setMeasure(measureViewHandle.getCubeMeasure());
    info.setFunction(measureViewHandle.getCubeMeasure().getFunction());
    replaceInfo(info,retValue);
  }
  return retValue;
}",0.958139534883721
75593,"private List getSubTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
  int count=viewHandle.getLevelCount();
  int measureCount=reportHandle.getMeasureCount();
  LevelViewHandle lastLevelHandle=getLastLevelViewHandle();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    if (tempViewHandle == lastLevelHandle) {
      continue;
    }
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    for (int j=0; j < measureCount; j++) {
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(reportHandle.getMeasure(j).getCubeMeasure());
      retValue.add(info);
    }
  }
  count=viewHandle.getLevelCount();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    List measures=tempViewHandle.getAggregationMeasures();
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle tempMeasureHandle=((MeasureViewHandle)measures.get(j)).getCubeMeasure();
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(tempMeasureHandle);
      info.setFunction(tempMeasureHandle.getFunction());
      replaceInfo(info,retValue);
    }
  }
  return retValue;
}","private List getSubTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
  int count=viewHandle.getLevelCount();
  int measureCount=reportHandle.getMeasureCount();
  LevelViewHandle lastLevelHandle=getLastLevelViewHandle();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    if (tempViewHandle == lastLevelHandle) {
      continue;
    }
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    for (int j=0; j < measureCount; j++) {
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(reportHandle.getMeasure(j).getCubeMeasure());
      info.setFunction(reportHandle.getMeasure(j).getCubeMeasure().getFunction());
      retValue.add(info);
    }
  }
  count=viewHandle.getLevelCount();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    List measures=tempViewHandle.getAggregationMeasures();
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle tempMeasureHandle=((MeasureViewHandle)measures.get(j)).getCubeMeasure();
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(tempMeasureHandle);
      info.setFunction(tempMeasureHandle.getFunction());
      replaceInfo(info,retValue);
    }
  }
  return retValue;
}",0.973113054745708
75594,"protected String getText(){
  String text=((DataItemHandle)getModel()).getResultSetColumn();
  if (text == null || text.length() == 0) {
    text=FIGURE_DEFAULT_TEXT;
  }
 else {
    if (text.length() > TRUNCATE_LENGTH) {
      text=text.substring(0,TRUNCATE_LENGTH - 2) + ELLIPSIS;
    }
    text=""String_Node_Str"" + text + ""String_Node_Str"";
  }
  return text;
}","protected String getText(){
  String text=((DataItemHandle)getModel()).getResultSetColumn();
  if (text == null || text.length() == 0) {
    text=FIGURE_DEFAULT_TEXT;
  }
 else {
    if (text.length() > TRUNCATE_LENGTH) {
      text=text.substring(0,TRUNCATE_LENGTH - 2) + ELLIPSIS;
    }
    text=""String_Node_Str"" + text + ""String_Node_Str"";
  }
  if (hasBindingFunction()) {
    text=PREFIX + text;
  }
  return text;
}",0.8931297709923665
75595,"/** 
 * Add default value into list
 * @param paramName
 * @param attrBean
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List preHandleCascadeParameterSelectionList(ParameterDefinition parameter,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  int index=0;
  List selectionList=new ArrayList();
  Object obj=attrBean.getDefaultValues().get(parameter.getName());
  String defaultValue=null;
  String defaultLabel=null;
  if (obj != null) {
    defaultValue=DataUtil.getDisplayValue(obj);
    defaultLabel=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),obj,attrBean.getLocale());
  }
  if (defaultValue != null) {
    selectionList.add(index++,new SelectItemChoice(defaultValue,defaultLabel));
    if (!parameter.isRequired()) {
      if (defaultValue.length() > 0) {
        selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",""String_Node_Str""));
      }
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",IBirtConstants.NULL_VALUE));
    }
  }
 else {
    if (!parameter.isRequired()) {
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",IBirtConstants.NULL_VALUE));
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return selectionList;
}","/** 
 * Add default value into list
 * @param paramName
 * @param attrBean
 * @return
 * @throws RemoteException
 * @throws ReportServiceException
 */
private List preHandleCascadeParameterSelectionList(ParameterDefinition parameter,ViewerAttributeBean attrBean) throws RemoteException, ReportServiceException {
  int index=0;
  List selectionList=new ArrayList();
  Object obj=attrBean.getDefaultValues().get(parameter.getName());
  String defaultValue=null;
  String defaultLabel=null;
  if (obj != null) {
    defaultValue=DataUtil.getDisplayValue(obj);
    defaultLabel=ParameterValidationUtil.getDisplayValue(null,parameter.getPattern(),obj,attrBean.getLocale());
  }
  if (defaultValue != null) {
    selectionList.add(index++,new SelectItemChoice(defaultValue,defaultLabel));
    if (!parameter.isRequired()) {
      if (defaultValue.trim().length() > 0) {
        selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",""String_Node_Str""));
      }
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",IBirtConstants.NULL_VALUE));
    }
  }
 else {
    if (!parameter.isRequired()) {
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",IBirtConstants.NULL_VALUE));
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      selectionList.add(index++,new SelectItemChoice(""String_Node_Str"",""String_Node_Str""));
    }
  }
  return selectionList;
}",0.9595127194553924
75596,"/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  Object startColumn=getColumn(start);
  ColumnHandleAdapter startAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(startColumn);
  Object endColumn=getColumn(end);
  ColumnHandleAdapter endAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(endColumn);
  int startWidth=0;
  int endWidth=0;
  startWidth=TableUtil.caleVisualWidth(this,startColumn);
  endWidth=TableUtil.caleVisualWidth(this,endColumn);
  try {
    getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
    startAdapt.setWidth(startWidth + value);
    endAdapt.setWidth(endWidth - value);
    getTableAdapter().transEnd();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}","/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  Object startColumn=getColumn(start);
  ColumnHandleAdapter startAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(startColumn);
  Object endColumn=getColumn(end);
  ColumnHandleAdapter endAdapt=HandleAdapterFactory.getInstance().getColumnHandleAdapter(endColumn);
  int startWidth=0;
  int endWidth=0;
  startWidth=TableUtil.caleVisualWidth(this,startColumn);
  endWidth=TableUtil.caleVisualWidth(this,endColumn);
  try {
    getTableAdapter().transStar(RESIZE_COLUMN_TRANS_LABEL);
    startAdapt.setWidth(startWidth + value);
    getTableAdapter().transEnd();
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
}",0.9746130030959752
75597,"/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  CrosstabHandleAdapter crosstabAdapter=part.getCrosstabHandleAdapter();
  int startWidth=0;
  int endWidth=0;
  startWidth=CrosstabTableUtil.caleVisualWidth(part,start);
  endWidth=CrosstabTableUtil.caleVisualWidth(part,end);
  part.getCrosstabHandleAdapter().getCrosstabItemHandle().getModuleHandle().getCommandStack().startTrans(RESIZE_COLUMN_TRANS_LABEL);
  crosstabAdapter.setColumnWidth(start,startWidth + value);
  crosstabAdapter.setColumnWidth(end,endWidth - value);
  part.getCrosstabHandleAdapter().getCrosstabItemHandle().getModuleHandle().getCommandStack().commit();
}","/** 
 * Resets size of column.
 * @param start
 * @param end
 * @param value
 */
public void resizeColumn(int start,int end,int value){
  CrosstabTableEditPart part=(CrosstabTableEditPart)getSourceEditPart().getParent();
  CrosstabHandleAdapter crosstabAdapter=part.getCrosstabHandleAdapter();
  int startWidth=0;
  int endWidth=0;
  startWidth=CrosstabTableUtil.caleVisualWidth(part,start);
  endWidth=CrosstabTableUtil.caleVisualWidth(part,end);
  part.getCrosstabHandleAdapter().getCrosstabItemHandle().getModuleHandle().getCommandStack().startTrans(RESIZE_COLUMN_TRANS_LABEL);
  crosstabAdapter.setColumnWidth(start,startWidth + value);
  part.getCrosstabHandleAdapter().getCrosstabItemHandle().getModuleHandle().getCommandStack().commit();
}",0.896640826873385
75598,"public void calculateTopStyles(){
  if (styles.size() > 0) {
    StyleEntry style=(StyleEntry)styles.peek();
    if (((Boolean)style2top.get(style)).booleanValue()) {
      Span span=(Span)spans.peek();
      int start=((Integer)pos.peek()).intValue();
      applyContainerTopBorder(span,start);
      style2top.put(style,Boolean.FALSE);
    }
  }
}","public void calculateTopStyles(){
  if (styles.size() > 0) {
    StyleEntry style=(StyleEntry)styles.peek();
    Boolean value=(Boolean)style2top.get(style);
    if (value != null && value.booleanValue()) {
      Span span=(Span)spans.peek();
      int start=((Integer)pos.peek()).intValue();
      applyContainerTopBorder(span,start);
      style2top.put(style,Boolean.FALSE);
    }
  }
}",0.8617886178861789
75599,"/** 
 * Draws a line from (startX, startY) to (endX, endY) with specified line width, color and line style. Line style can be ""dotted"", ""dash"", and ""double"".
 * @param startX the x coordinate of start point.
 * @param startY the y coordinate of start point.
 * @param endX the x coordinate of end point.
 * @param endY the y coordinate of end point.
 * @param width the line width.
 * @param color the color.
 * @param lineStyle the line style.
 */
public void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  gSave();
  if (color != null) {
    setColor(color);
  }
  setLineWidth(width);
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    setDashLine(width);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    setDottedLine(width);
  }
  drawLine(startX,startY,endX,endY);
  gRestore();
}","/** 
 * Draws a line from (startX, startY) to (endX, endY) with specified line width, color and line style. Line style can be ""dotted"", ""dash"", and ""double"".
 * @param startX the x coordinate of start point.
 * @param startY the y coordinate of start point.
 * @param endX the x coordinate of end point.
 * @param endY the y coordinate of end point.
 * @param width the line width.
 * @param color the color.
 * @param lineStyle the line style.
 */
public void drawLine(float startX,float startY,float endX,float endY,float width,Color color,String lineStyle){
  if (null == color || 0f == width || ""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    return;
  }
  gSave();
  if (color != null) {
    setColor(color);
  }
  setLineWidth(width);
  if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    setDashLine(width);
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(lineStyle)) {
    setDottedLine(width);
  }
  drawLine(startX,startY,endX,endY);
  gRestore();
}",0.9213806327900288
75600,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
  if (!containerStack.isEmpty()) {
    containerStack.pop();
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    if (needClip(container)) {
      pageGraphic.clipRestore();
    }
  }
  if (!containerStack.isEmpty()) {
    containerStack.pop();
  }
}",0.8861111111111111
75601,"/** 
 * If the container is a PageArea, this method creates a pdf page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container instanceof PageArea) {
    scale=container.getScale();
    hTextSpace=(int)(H_TEXT_SPACE * scale);
    vTextSpace=(int)(V_TEXT_SPACE * scale);
    newPage(container);
    containerStack.push(new ContainerPosition(0,0));
  }
 else {
    drawContainer(container);
    ContainerPosition pos;
    if (!containerStack.isEmpty()) {
      pos=(ContainerPosition)containerStack.peek();
      ContainerPosition current=new ContainerPosition(pos.x + getX(container),pos.y + getY(container));
      containerStack.push(current);
    }
 else {
      containerStack.push(new ContainerPosition(getX(container),getY(container)));
    }
  }
}","/** 
 * If the container is a PageArea, this method creates a pdf page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container instanceof PageArea) {
    scale=container.getScale();
    hTextSpace=(int)(H_TEXT_SPACE * scale);
    vTextSpace=(int)(V_TEXT_SPACE * scale);
    newPage(container);
    containerStack.push(new ContainerPosition(0,0));
  }
 else {
    if (needClip(container)) {
      pageGraphic.clipSave();
      clip(container);
    }
    drawContainer(container);
    ContainerPosition pos;
    if (!containerStack.isEmpty()) {
      pos=(ContainerPosition)containerStack.peek();
      ContainerPosition current=new ContainerPosition(pos.x + getX(container),pos.y + getY(container));
      containerStack.push(current);
    }
 else {
      containerStack.push(new ContainerPosition(getX(container),getY(container)));
    }
  }
}",0.9573055028462998
75602,"public void handleSelectionChanged(ISelection selection){
  if (getSourceViewer() == null || !getSourceViewer().getTextWidget().isVisible()) {
    return;
  }
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    settingText=true;
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1 && sel[0] instanceof DesignElementHandle) {
      editObject=sel[0];
      palettePage.getSupport().setCurrentEditObject(editObject);
      if (editObject instanceof ExtendedItemHandle) {
        disableEditor();
        cmbExpList.removeAll();
        cmbItemLastSelected=null;
        getSourceViewer().getTextWidget().setEnabled(true);
        setEditorText(((ExtendedItemHandle)editObject).getExternalScript());
        context.setVariable(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        setComboViewerInput(editObject);
        cmbItemLastSelected=null;
        setEditorText(""String_Node_Str"");
        if (cmbExpList.getItemCount() > 0) {
          enableEditor();
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
 else {
          disableEditor();
        }
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
    settingText=false;
  }
}","public void handleSelectionChanged(ISelection selection){
  if (getSourceViewer() == null || !getSourceViewer().getTextWidget().isVisible()) {
    return;
  }
  if (editorUIEnabled == true) {
    saveModel();
  }
  if (selection != null) {
    settingText=true;
    Object[] sel=((IStructuredSelection)selection).toArray();
    if (sel.length == 1) {
      editObject=sel[0];
      if (sel[0] instanceof ScriptElementNode) {
        editObject=((ScriptElementNode)editObject).getParent();
      }
    }
    if (editObject instanceof DesignElementHandle) {
      palettePage.getSupport().setCurrentEditObject(editObject);
      if (editObject instanceof ExtendedItemHandle) {
        disableEditor();
        cmbExpList.removeAll();
        cmbItemLastSelected=null;
        getSourceViewer().getTextWidget().setEnabled(true);
        setEditorText(((ExtendedItemHandle)editObject).getExternalScript());
        context.setVariable(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        setComboViewerInput(editObject);
        cmbItemLastSelected=null;
        setEditorText(""String_Node_Str"");
        if (cmbExpList.getItemCount() > 0) {
          enableEditor();
          selectItemInComboExpList((ISelection)selectionMap.get(getModel()));
        }
 else {
          disableEditor();
        }
      }
      checkDirty();
      palettePage.getSupport().updateParametersTree();
    }
 else {
      disableEditor();
      cmbExpList.removeAll();
      cmbItemLastSelected=null;
      palettePage.getSupport().setCurrentEditObject(null);
    }
    if (sel.length > 0) {
      updateAnnotationLabel(sel[0]);
    }
    settingText=false;
  }
}",0.9212274596646632
75603,"private void createSubTotalArea(Composite content){
  Label subTotalLabel=new Label(content,SWT.NONE);
  subTotalLabel.setText(Messages.getString(""String_Node_Str""));
  Table table=new Table(content,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.CHECK);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  table.setLayoutData(gd);
  subTableViewer=new CheckboxTableViewer(table);
  SubTotalProvider provider=new SubTotalProvider(subTableViewer);
  String[] columnNames=provider.getColumnNames();
  int[] columnWidths=provider.columnWidths();
  for (int i=0; i < columnNames.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setText(columnNames[i]);
    column.setWidth(columnWidths[i]);
  }
  subTableViewer.setUseHashlookup(true);
  subTableViewer.setColumnProperties(provider.getColumnNames());
  subTableViewer.setCellEditors(provider.getEditors(table));
  subTableViewer.setContentProvider(provider);
  subTableViewer.setLabelProvider(provider);
  subTableViewer.setCellModifier(provider);
  subTableViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      SubTotalInfo info=(SubTotalInfo)event.getElement();
      if (event.getChecked()) {
        info.setAggregationOn(true);
      }
 else       info.setAggregationOn(false);
    }
  }
);
}","private void createSubTotalArea(Composite content){
  Label subTotalLabel=new Label(content,SWT.NONE);
  subTotalLabel.setText(Messages.getString(""String_Node_Str""));
  Table table=new Table(content,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.CHECK);
  table.setLinesVisible(false);
  table.setHeaderVisible(false);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  table.setLayoutData(gd);
  subTableViewer=new CheckboxTableViewer(table);
  SubTotalProvider provider=new SubTotalProvider(subTableViewer);
  String[] columnNames=provider.getColumnNames();
  int[] columnWidths=provider.columnWidths();
  for (int i=0; i < columnNames.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setText(columnNames[i]);
    column.setWidth(columnWidths[i]);
  }
  subTableViewer.setUseHashlookup(true);
  subTableViewer.setColumnProperties(provider.getColumnNames());
  subTableViewer.setContentProvider(provider);
  subTableViewer.setLabelProvider(provider);
  subTableViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      SubTotalInfo info=(SubTotalInfo)event.getElement();
      if (event.getChecked()) {
        info.setAggregationOn(true);
      }
 else       info.setAggregationOn(false);
    }
  }
);
}",0.704633887513265
75604,"private void createGrandTotalArea(Composite content){
  Label grandTotalLabel=new Label(content,SWT.NONE);
  grandTotalLabel.setText(Messages.getString(""String_Node_Str""));
  Table table=new Table(content,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.CHECK);
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  table.setLayoutData(gd);
  grandTableViewer=new CheckboxTableViewer(table);
  GrandTotalProvider provider=new GrandTotalProvider(grandTableViewer);
  String[] columnNames=provider.getColumnNames();
  int[] columnWidths=provider.columnWidths();
  for (int i=0; i < columnNames.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setText(columnNames[i]);
    column.setWidth(columnWidths[i]);
  }
  grandTableViewer.setUseHashlookup(true);
  grandTableViewer.setColumnProperties(provider.getColumnNames());
  grandTableViewer.setCellEditors(provider.getEditors(table));
  grandTableViewer.setContentProvider(provider);
  grandTableViewer.setLabelProvider(provider);
  grandTableViewer.setCellModifier(provider);
  grandTableViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      GrandTotalInfo info=(GrandTotalInfo)event.getElement();
      if (event.getChecked()) {
        info.setAggregationOn(true);
      }
 else       info.setAggregationOn(false);
    }
  }
);
}","private void createGrandTotalArea(Composite content){
  Label grandTotalLabel=new Label(content,SWT.NONE);
  grandTotalLabel.setText(Messages.getString(""String_Node_Str""));
  Table table=new Table(content,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.CHECK);
  table.setLinesVisible(false);
  table.setHeaderVisible(false);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=150;
  table.setLayoutData(gd);
  grandTableViewer=new CheckboxTableViewer(table);
  GrandTotalProvider provider=new GrandTotalProvider(grandTableViewer);
  String[] columnNames=provider.getColumnNames();
  int[] columnWidths=provider.columnWidths();
  for (int i=0; i < columnNames.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setText(columnNames[i]);
    column.setWidth(columnWidths[i]);
  }
  grandTableViewer.setUseHashlookup(true);
  grandTableViewer.setColumnProperties(provider.getColumnNames());
  grandTableViewer.setContentProvider(provider);
  grandTableViewer.setLabelProvider(provider);
  grandTableViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      GrandTotalInfo info=(GrandTotalInfo)event.getElement();
      if (event.getChecked()) {
        info.setAggregationOn(true);
      }
 else       info.setAggregationOn(false);
    }
  }
);
}",0.7038448216141323
75605,"public String getColumnText(Object element,int columnIndex){
  GrandTotalInfo info=(GrandTotalInfo)element;
switch (columnIndex) {
case 0:
    return ""String_Node_Str"";
case 1:
  return info.getMeasure() == null ? ""String_Node_Str"" : info.getMeasure().getName();
case 2:
if (info.getFunction() == null || info.getFunction().trim().equals(""String_Node_Str"")) info.setFunction(getFunctionNames()[0]);
return getFunctionDisplayName(info.getFunction());
default :
break;
}
return ""String_Node_Str"";
}","public String getColumnText(Object element,int columnIndex){
  GrandTotalInfo info=(GrandTotalInfo)element;
switch (columnIndex) {
case 0:
    return ""String_Node_Str"";
case 1:
  return info.getMeasure() == null ? ""String_Node_Str"" : info.getMeasure().getName();
default :
break;
}
return ""String_Node_Str"";
}",0.7080745341614907
75606,"public int[] columnWidths(){
  return new int[]{20,120,120,120};
}","public int[] columnWidths(){
  return new int[]{20,300};
}",0.9193548387096774
75607,"public String getColumnText(Object element,int columnIndex){
  SubTotalInfo info=(SubTotalInfo)element;
switch (columnIndex) {
case 0:
    return ""String_Node_Str"";
case 1:
  return info.getLevel().getName();
case 2:
return info.getAggregateOnMeasure() == null ? ""String_Node_Str"" : info.getAggregateOnMeasure().getName();
case 3:
if (info.getFunction() == null || info.getFunction().trim().equals(""String_Node_Str"")) info.setFunction(getFunctionNames()[0]);
return getFunctionDisplayName(info.getFunction());
default :
break;
}
return ""String_Node_Str"";
}","public String getColumnText(Object element,int columnIndex){
  SubTotalInfo info=(SubTotalInfo)element;
switch (columnIndex) {
case 0:
    return ""String_Node_Str"";
case 1:
  return info.getLevel().getName() + ""String_Node_Str"" + (info.getAggregateOnMeasure() == null ? ""String_Node_Str"" : info.getAggregateOnMeasure().getName());
default :
break;
}
return ""String_Node_Str"";
}",0.7331189710610932
75608,"public int[] columnWidths(){
  return new int[]{20,120,120,120};
}","public int[] columnWidths(){
  return new int[]{20,300};
}",0.9193548387096774
75609,"private List getGrandTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=levelHandle.getCrosstab();
  int measureCount=reportHandle.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    info.setMeasure(reportHandle.getMeasure(i).getCubeMeasure());
    retValue.add(info);
  }
  List measures=reportHandle.getAggregationMeasures(viewHandle.getAxisType());
  for (int i=0; i < measures.size(); i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    MeasureViewHandle measureViewHandle=(MeasureViewHandle)measures.get(i);
    info.setMeasure(measureViewHandle.getCubeMeasure());
    info.setFunction(reportHandle.getAggregationFunction(viewHandle.getAxisType(),measureViewHandle));
    replaceInfo(info,retValue);
  }
  return retValue;
}","private List getGrandTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=levelHandle.getCrosstab();
  int measureCount=reportHandle.getMeasureCount();
  for (int i=0; i < measureCount; i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    info.setMeasure(reportHandle.getMeasure(i).getCubeMeasure());
    retValue.add(info);
  }
  List measures=reportHandle.getAggregationMeasures(viewHandle.getAxisType());
  for (int i=0; i < measures.size(); i++) {
    AggregationDialog.GrandTotalInfo info=new AggregationDialog.GrandTotalInfo();
    MeasureViewHandle measureViewHandle=(MeasureViewHandle)measures.get(i);
    info.setMeasure(measureViewHandle.getCubeMeasure());
    info.setFunction(measureViewHandle.getCubeMeasure().getFunction());
    replaceInfo(info,retValue);
  }
  return retValue;
}",0.9124668435013262
75610,"private List getSubTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
  int count=viewHandle.getLevelCount();
  int measureCount=reportHandle.getMeasureCount();
  LevelViewHandle lastLevelHandle=getLastLevelViewHandle();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    if (tempViewHandle == lastLevelHandle) {
      continue;
    }
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    for (int j=0; j < measureCount; j++) {
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(reportHandle.getMeasure(j).getCubeMeasure());
      retValue.add(info);
    }
  }
  count=viewHandle.getLevelCount();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    List measures=tempViewHandle.getAggregationMeasures();
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle tempMeasureHandle=((MeasureViewHandle)measures.get(j)).getCubeMeasure();
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(tempMeasureHandle);
      info.setFunction(tempViewHandle.getAggregationFunction((MeasureViewHandle)measures.get(j)));
      replaceInfo(info,retValue);
    }
  }
  return retValue;
}","private List getSubTotalInfo(){
  List retValue=new ArrayList();
  DimensionViewHandle viewHandle=getDimensionViewHandle();
  CrosstabReportItemHandle reportHandle=viewHandle.getCrosstab();
  int count=viewHandle.getLevelCount();
  int measureCount=reportHandle.getMeasureCount();
  LevelViewHandle lastLevelHandle=getLastLevelViewHandle();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    if (tempViewHandle == lastLevelHandle) {
      continue;
    }
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    for (int j=0; j < measureCount; j++) {
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(reportHandle.getMeasure(j).getCubeMeasure());
      retValue.add(info);
    }
  }
  count=viewHandle.getLevelCount();
  for (int i=0; i < count; i++) {
    LevelViewHandle tempViewHandle=viewHandle.getLevel(i);
    LevelHandle tempHandle=tempViewHandle.getCubeLevel();
    List measures=tempViewHandle.getAggregationMeasures();
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle tempMeasureHandle=((MeasureViewHandle)measures.get(j)).getCubeMeasure();
      AggregationDialog.SubTotalInfo info=new AggregationDialog.SubTotalInfo();
      info.setLevel(tempHandle);
      info.setAggregateOnMeasure(tempMeasureHandle);
      info.setFunction(tempMeasureHandle.getFunction());
      replaceInfo(info,retValue);
    }
  }
  return retValue;
}",0.9750492449113592
75611,"public Object calculate(Object value) throws BirtException {
  if (value == null) {
    return new Double(-1);
  }
  double dValue=(DataTypeUtil.toDouble(value)).doubleValue();
  if (dValue < doubleStartValue) {
    return new Double(-1);
  }
 else {
    return new Double(Math.floor((dValue - doubleStartValue) / intervalRange));
  }
}","public Object calculate(Object value) throws BirtException {
  double dValue=-1;
  if (value != null)   dValue=(DataTypeUtil.toDouble(value)).doubleValue();
  if (dValue < doubleStartValue) {
    if (this.firstValue == Double.MIN_VALUE) {
      this.firstValue=dValue;
    }
    return new Double(this.firstValue);
  }
 else {
    return new Double(doubleStartValue + Math.floor((dValue - doubleStartValue) / intervalRange) * intervalRange);
  }
}",0.4827586206896552
75612,"public CubeQueryUtil(DataRequestSession session){
  this.session=session;
}","public CubeQueryUtil(DataRequestSessionImpl session){
  this.session=session;
}",0.974025974025974
75613,"protected IContent doCreateContent(){
  return report.createContainerContent();
}","protected IContent doCreateContent(){
  return report.createListContent();
}",0.929936305732484
75614,"private IResultIterator executeSubQuery(DataSetID dataSet,long rowId,ISubqueryDefinition query) throws BirtException {
  IResultIterator rsetIter=null;
  String rset=dataSet.getDataSetName();
  if (rset != null) {
    rsetIter=executeQuery(rset,(QueryDefinition)query.getParentQuery());
  }
 else {
    rsetIter=executeSubQuery(dataSet.getParentID(),dataSet.getRowID(),(ISubqueryDefinition)query.getParentQuery());
  }
  while (rsetIter.next()) {
    if (rsetIter.getRowId() == rowId) {
      String queryName=query.getName();
      Scriptable scope=executionContext.getSharedScope();
      return rsetIter.getSecondaryIterator(queryName,scope);
    }
  }
  return null;
}","private IResultIterator executeSubQuery(DataSetID dataSet,long rowId,ISubqueryDefinition query) throws BirtException {
  IResultIterator rsetIter=null;
  String rset=dataSet.getDataSetName();
  if (rset != null) {
    rsetIter=executeQuery(rset,(QueryDefinition)query.getParentQuery());
  }
 else {
    rsetIter=executeSubQuery(dataSet.getParentID(),dataSet.getRowID(),(ISubqueryDefinition)query.getParentQuery());
  }
  rsetIter.moveTo((int)rowId);
  String queryName=query.getName();
  Scriptable scope=executionContext.getSharedScope();
  return rsetIter.getSecondaryIterator(queryName,scope);
}",0.6834645669291338
75615,"/** 
 * method to get data set design by name 
 * @param name
 * @return data set
 */
IDataSet getDataSet(String name);","/** 
 * method to get data set design by name
 * @param name
 * @return data set
 */
IDataSet getDataSet(String name);",0.9957805907172996
75616,"public static IDesignElement getElement(org.eclipse.birt.report.model.api.simpleapi.IDesignElement element){
  if (element == null)   return null;
  if (element instanceof IReportDesign)   return new ReportDesign((IReportDesign)element);
  if (element instanceof IDataItem)   return new DataItem((IDataItem)element);
  if (element instanceof IGrid)   return new Grid((IGrid)element);
  if (element instanceof IImage)   return new Image((IImage)element);
  if (element instanceof ILabel)   return new Label((ILabel)element);
  if (element instanceof IList)   return new List((IList)element);
  if (element instanceof ITable)   return new Table((ITable)element);
  if (element instanceof IDynamicText)   return new DynamicText((IDynamicText)element);
  if (element instanceof ITextItem)   return new TextItem((ITextItem)element);
  if (element instanceof IReportItem)   return new ReportItem((IReportItem)element);
  if (element instanceof IReportElement)   return new ReportElement((IReportElement)element);
  return new DesignElement(element);
}","public static IDesignElement getElement(org.eclipse.birt.report.model.api.simpleapi.IDesignElement element){
  if (element == null)   return null;
  if (element instanceof IReportDesign)   return new ReportDesign((IReportDesign)element);
  if (element instanceof IDataItem)   return new DataItem((IDataItem)element);
  if (element instanceof IGrid)   return new Grid((IGrid)element);
  if (element instanceof IImage)   return new Image((IImage)element);
  if (element instanceof ILabel)   return new Label((ILabel)element);
  if (element instanceof IList)   return new List((IList)element);
  if (element instanceof ITable)   return new Table((ITable)element);
  if (element instanceof IDynamicText)   return new DynamicText((IDynamicText)element);
  if (element instanceof ITextItem)   return new TextItem((ITextItem)element);
  if (element instanceof IMasterPage)   return new MasterPage((IMasterPage)element);
  if (element instanceof IReportItem)   return new ReportItem((IReportItem)element);
  if (element instanceof IReportElement)   return new ReportElement((IReportElement)element);
  return new DesignElement(element);
}",0.960919540229885
75617,"/** 
 * Creates actions and registers them to the ActionRegistry.
 */
protected void createActions(){
  addStackAction(new UndoAction(this));
  addStackAction(new RedoAction(this));
  addEditPartAction(new DeleteAction((IWorkbenchPart)this){
  }
);
  SaveAction saveAction=new SaveAction(this);
  saveAction.setLazyEnablementCalculation(true);
  addEditorAction(saveAction);
  addAction(new CopyTemplateAction(this));
}","/** 
 * Creates actions and registers them to the ActionRegistry.
 */
protected void createActions(){
  addStackAction(new UndoAction(this));
  addStackAction(new RedoAction(this));
  addEditPartAction(new DeleteAction((IWorkbenchPart)this){
    public Command createDeleteCommand(    List objects){
      if (objects.isEmpty())       return null;
      if (!(objects.get(0) instanceof EditPart))       return null;
      GroupRequest deleteReq=new GroupRequest(RequestConstants.REQ_DELETE);
      deleteReq.setEditParts(objects);
      List temp=TableUtil.filletCellModel(objects);
      List list=new ArrayList();
      for (int i=0; i < temp.size(); i++) {
        EditPart object=(EditPart)temp.get(i);
        list.add(object.getModel());
      }
      return new DeleteCommand(list.toArray());
    }
  }
);
  SaveAction saveAction=new SaveAction(this);
  saveAction.setLazyEnablementCalculation(true);
  addEditorAction(saveAction);
  addAction(new CopyTemplateAction(this));
}",0.5977175463623395
75618,"public PDFPageDevice(OutputStream output,String title,IReportContext context,IReportContent report){
  this.context=context;
  this.report=report;
  doc=new Document();
  PDFPage.reset();
  try {
    writer=PdfWriter.getInstance(doc,new BufferedOutputStream(output));
    if (null != title)     doc.addTitle(title);
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}","public PDFPageDevice(OutputStream output,String title,IReportContext context,IReportContent report){
  this.context=context;
  this.report=report;
  doc=new Document();
  PDFPage.reset();
  try {
    writer=PdfWriter.getInstance(doc,new BufferedOutputStream(output));
    String creator=""String_Node_Str"" + BundleVersionUtil.getBundleVersion(""String_Node_Str"") + ""String_Node_Str""+ BundleVersionUtil.getBundleVersion(""String_Node_Str"");
    doc.addCreator(creator);
    if (null != title)     doc.addTitle(title);
  }
 catch (  DocumentException de) {
    logger.log(Level.SEVERE,de.getMessage(),de);
  }
}",0.8047337278106509
75619,"protected void buildStyle(IStyle style,StringBuffer styleBuffer){
  if (null == style) {
    return;
  }
  AttributeBuilder.buildStyle(styleBuffer,style,parentEmitter);
  AttributeBuilder.checkHyperlinkTextDecoration(style,styleBuffer);
  String value=style.getDisplay();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  value=style.getVerticalAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
}","protected void buildStyle(IStyle style,StringBuffer styleBuffer){
  if (null == style) {
    return;
  }
  AttributeBuilder.buildStyle(styleBuffer,style,parentEmitter);
  String value=style.getVerticalAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
  value=style.getTextAlign();
  if (null != value) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(value);
    styleBuffer.append(""String_Node_Str"");
  }
}",0.7565485362095532
75620,"/** 
 * Base class implementation of post service process.
 * @param request
 * @param response
 * @throws ServletException
 * @throws IOException
 */
protected String doPostService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String className=getClass().getName().substring(getClass().getName().lastIndexOf('.') + 1);
  return JSPRootPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
}","/** 
 * Base class implementation of post service process.
 * @param request
 * @param response
 * @throws ServletException
 * @throws IOException
 */
protected String doPostService(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setHeader(""String_Node_Str"",""String_Node_Str"");
  response.setDateHeader(""String_Node_Str"",0);
  String className=getClass().getName().substring(getClass().getName().lastIndexOf('.') + 1);
  return JSPRootPath + ""String_Node_Str"" + className+ ""String_Node_Str"";
}",0.8438978240302744
75621,"/** 
 * Read a String from an input stream
 * @param inputStream
 * @return an String
 * @throws IOException
 */
public final static String readString(DataInputStream dis) throws IOException {
  if (readInt(dis) == TYPE_NULL)   return null;
  return readUTF(dis);
}","/** 
 * Read a String from an input stream
 * @param inputStream
 * @return an String
 * @throws IOException
 */
public final static String readString(DataInputStream dis) throws IOException {
  int type=readInt(dis);
  if (type == TYPE_NULL) {
    return null;
  }
 else   if (type == TYPE_STRING) {
    return dis.readUTF();
  }
 else {
    return readUTF(dis);
  }
}",0.7665615141955836
75622,"/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}","/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}",0.8841328413284133
75623,"/** 
 * Write a String value to an output stream
 * @param outputStream
 * @param str
 * @throws IOException
 */
public final static void writeString(DataOutputStream dos,String str) throws IOException {
  if (str == null) {
    writeInt(dos,TYPE_NULL);
    return;
  }
 else {
    writeInt(dos,TYPE_STRING);
  }
  writeUTF(dos,str);
}","/** 
 * Write a String value to an output stream
 * @param outputStream
 * @param str
 * @throws IOException
 */
public final static void writeString(DataOutputStream dos,String str) throws IOException {
  if (str == null) {
    writeInt(dos,TYPE_NULL);
    return;
  }
 else {
    if (isLongString(str)) {
      writeInt(dos,TYPE_LONG_STRING);
      writeUTF(dos,str);
    }
 else {
      writeInt(dos,TYPE_STRING);
      dos.writeUTF(str);
    }
  }
}",0.8045685279187818
75624,"/** 
 * Returns the target element for the notification event.
 * @return the event target
 */
private ContentElementInfo getEventTarget(){
  IContainerDefn tmpContainerDefn=focus.getContainerDefn();
  if (tmpContainerDefn instanceof SlotDefn)   return null;
  DesignElement tmpElement=focus.getElement();
  PropertyDefn tmpPropDefn=(PropertyDefn)tmpContainerDefn;
  ContentElementInfo retTarget=new ContentElementInfo(true);
  while (tmpElement != null && tmpPropDefn != null) {
    retTarget.pushStep(tmpPropDefn,-1);
    if (tmpPropDefn.getTypeCode() == IPropertyType.CONTENT_ELEMENT_TYPE) {
      retTarget.setTopElement(tmpElement);
      return retTarget;
    }
    ContainerContext context=tmpElement.getContainerInfo();
    if (context == null)     break;
    tmpElement=tmpElement.getContainer();
    tmpPropDefn=tmpElement.getPropertyDefn(context.getPropertyName());
  }
  return null;
}","/** 
 * Returns the target element for the notification event.
 * @return the event target
 */
private ContentElementInfo getEventTarget(){
  IContainerDefn tmpContainerDefn=focus.getContainerDefn();
  if (tmpContainerDefn instanceof SlotDefn)   return null;
  DesignElement tmpElement=focus.getElement();
  PropertyDefn tmpPropDefn=(PropertyDefn)tmpContainerDefn;
  ContentElementInfo retTarget=new ContentElementInfo(true);
  while (tmpElement != null && tmpPropDefn != null) {
    retTarget.pushStep(tmpPropDefn,-1);
    if (tmpPropDefn.getTypeCode() == IPropertyType.CONTENT_ELEMENT_TYPE && !(tmpElement instanceof ContentElement)) {
      retTarget.setTopElement(tmpElement);
      return retTarget;
    }
    ContainerContext context=tmpElement.getContainerInfo();
    if (context == null)     break;
    tmpElement=tmpElement.getContainer();
    tmpPropDefn=tmpElement.getPropertyDefn(context.getPropertyName());
  }
  return null;
}",0.9765922700054436
75625,"public static void CreateSubTotalLabel(LevelViewHandle levelView,CrosstabCellHandle cellHandle) throws SemanticException {
  LabelHandle dataHandle=DesignElementFactory.getInstance().newLabel(null);
  dataHandle.setText(""String_Node_Str"" + levelView.getCubeLevelName() + ""String_Node_Str""+ DISPALY_NAME);
  cellHandle.addContent(dataHandle);
}","public static void CreateSubTotalLabel(LevelViewHandle levelView,CrosstabCellHandle cellHandle) throws SemanticException {
  LabelHandle dataHandle=DesignElementFactory.getInstance().newLabel(null);
  dataHandle.setText(""String_Node_Str"" + levelView.getCubeLevel().getName() + ""String_Node_Str""+ DISPALY_NAME);
  cellHandle.addContent(dataHandle);
}",0.9913294797687862
75626,"/** 
 * @param owner
 * @param measureHandle
 * @return
 */
public static ComputedColumn createComputedColumn(ReportItemHandle owner,MeasureHandle measureHandle){
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(owner,measureHandle.getName());
  bindingColumn.setDataType(DesignChoiceConstants.COLUMN_DATA_TYPE_ANY);
  bindingColumn.setExpression(DEUtil.getExpression(measureHandle));
  return bindingColumn;
}","/** 
 * @param owner
 * @param measureHandle
 * @return
 */
public static ComputedColumn createComputedColumn(ReportItemHandle owner,MeasureHandle measureHandle){
  ComputedColumn bindingColumn=StructureFactory.newComputedColumn(owner,measureHandle.getName());
  bindingColumn.setDataType(measureHandle.getDataType());
  bindingColumn.setExpression(DEUtil.getExpression(measureHandle));
  return bindingColumn;
}",0.9225268176400476
75627,"public int allocateBlock(int blockNo) throws IOException {
  int newBlock=findFreeBlock();
  OatFile.seek(blockNo * 4);
  OatFile.writeInt(newBlock);
  return newBlock;
}","public int allocateBlock(int blockNo) throws IOException {
  int newBlock=findFreeBlock();
  oatAccessFile.seek(blockNo * 4);
  oatAccessFile.writeInt(newBlock);
  return newBlock;
}",0.9545454545454546
75628,"/** 
 * @param structure
 * @throws IOException
 */
private void writeObjectStructure(ObjectStructure structure) throws IOException {
  objectFile.seek(objectFile.length());
  structure.fileOffset=(int)objectFile.getFilePointer();
  objectFile.writeLong(structure.length);
  objectFile.writeInt(structure.firstBlock);
  objectFile.writeUTF(structure.name);
}","/** 
 * @param structure
 * @throws IOException
 */
private void writeObjectStructure(ObjectStructure structure) throws IOException {
  objectAccessFile.seek(objectAccessFile.length());
  structure.fileOffset=(int)objectAccessFile.getFilePointer();
  objectAccessFile.writeLong(structure.length);
  objectAccessFile.writeInt(structure.firstBlock);
  objectAccessFile.writeUTF(structure.name);
}",0.952127659574468
75629,"public IDocumentObject createDocumentObject(String documentObjectName) throws IOException {
  ObjectStructure objectStructure=new ObjectStructure();
  objectStructure.name=documentObjectName;
  objectStructure.firstBlock=findFreeBlock();
  objectStructure.length=0;
  writeObjectStructure(objectStructure);
  this.documentObjectMap.put(objectStructure.name,objectStructure);
  return new DocumentObject(new BufferedRandomDataAccessObject(new BlockRandomAccessObject(dataFile,documentObjectName,objectStructure.firstBlock,objectStructure.length,this),1024));
}","public IDocumentObject createDocumentObject(String documentObjectName) throws IOException {
  ObjectStructure objectStructure=new ObjectStructure();
  objectStructure.name=documentObjectName;
  objectStructure.firstBlock=findFreeBlock();
  objectStructure.length=0;
  writeObjectStructure(objectStructure);
  this.documentObjectMap.put(objectStructure.name,objectStructure);
  return new DocumentObject(new BufferedRandomDataAccessObject(new BlockRandomAccessObject(dataAccessFile,documentObjectName,objectStructure.firstBlock,objectStructure.length,this),1024));
}",0.994661921708185
75630,"/** 
 * @return
 * @throws IOException
 */
private int findFreeBlock() throws IOException {
  int oldLength=(int)OatFile.length();
  OatFile.setLength(oldLength + 4);
  return (int)(oldLength / 4);
}","/** 
 * @return
 * @throws IOException
 */
private int findFreeBlock() throws IOException {
  int oldLength=(int)oatAccessFile.length();
  oatAccessFile.setLength(oldLength + 4);
  return (int)(oldLength / 4);
}",0.9609756097560976
75631,"public IDocumentObject openDocumentObject(String documentObjectName) throws IOException {
  ObjectStructure objectStructure=(ObjectStructure)this.documentObjectMap.get(documentObjectName);
  if (objectStructure == null) {
    return null;
  }
  return new DocumentObject(new BufferedRandomDataAccessObject(new BlockRandomAccessObject(dataFile,documentObjectName,objectStructure.firstBlock,objectStructure.length,this),1024));
}","public IDocumentObject openDocumentObject(String documentObjectName) throws IOException {
  ObjectStructure objectStructure=(ObjectStructure)this.documentObjectMap.get(documentObjectName);
  if (objectStructure == null) {
    return null;
  }
  return new DocumentObject(new BufferedRandomDataAccessObject(new BlockRandomAccessObject(dataAccessFile,documentObjectName,objectStructure.firstBlock,objectStructure.length,this),1024));
}",0.9930232558139536
75632,"/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void load(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  objectFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  OatFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  dataFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectFile.seek(0);
  while (true) {
    try {
      ObjectStructure structure=readObjectStructure();
      if (structure.firstBlock >= 0)       documentObjectMap.put(structure.name,structure);
    }
 catch (    EOFException e) {
      return;
    }
  }
}","/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void load(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  objectAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  oatAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    throw new DataException(ResourceConstants.OLAPFILE_NOT_FOUND,file.getAbsolutePath());
  }
  dataAccessFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectAccessFile.seek(0);
  while (true) {
    try {
      ObjectStructure structure=readObjectStructure();
      if (structure.firstBlock >= 0)       documentObjectMap.put(structure.name,structure);
    }
 catch (    EOFException e) {
      return;
    }
  }
}",0.9884615384615384
75633,"public void flush() throws IOException {
  objectFile.flush();
  OatFile.flush();
  dataFile.flush();
}","public void flush() throws IOException {
  objectAccessFile.flush();
  oatAccessFile.flush();
  dataAccessFile.flush();
}",0.9107142857142856
75634,"public void setObjectLength(String documentObjectName,long length) throws IOException {
  ObjectStructure objectStructure=(ObjectStructure)documentObjectMap.get(documentObjectName);
  if (objectStructure == null) {
    return;
  }
  objectStructure.length=length;
  objectFile.seek(objectStructure.fileOffset);
  objectFile.writeLong(length);
}","public void setObjectLength(String documentObjectName,long length) throws IOException {
  ObjectStructure objectStructure=(ObjectStructure)documentObjectMap.get(documentObjectName);
  if (objectStructure == null) {
    return;
  }
  objectStructure.length=length;
  objectAccessFile.seek(objectStructure.fileOffset);
  objectAccessFile.writeLong(length);
}",0.9828571428571428
75635,"/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!new File(dirName).exists()) {
      new File(dirName).mkdirs();
    }
    try {
      if (!file.createNewFile()) {
        throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
      }
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,e,file.getAbsolutePath());
    }
  }
  objectFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  OatFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  OatFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  dataFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  dataFile.setLength(0);
}","/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  objectFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!objectFile.exists()) {
    if (!new File(dirName).exists()) {
      new File(dirName).mkdirs();
    }
    try {
      if (!objectFile.createNewFile()) {
        throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,objectFile.getAbsolutePath());
      }
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,e,objectFile.getAbsolutePath());
    }
  }
  objectAccessFile=new BufferedRandomAccessFile(objectFile,""String_Node_Str"",1024);
  objectAccessFile.setLength(0);
  oatFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!oatFile.exists()) {
    if (!oatFile.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,oatFile.getAbsolutePath());
    }
  }
  oatAccessFile=new BufferedRandomAccessFile(oatFile,""String_Node_Str"",1024);
  oatAccessFile.setLength(0);
  dataFile=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!dataFile.exists()) {
    if (!dataFile.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,dataFile.getAbsolutePath());
    }
  }
  dataAccessFile=new BufferedRandomAccessFile(dataFile,""String_Node_Str"",1024);
  dataAccessFile.setLength(0);
}",0.8363994743758213
75636,"public int getNextBlock(int blockNo) throws IOException {
  OatFile.seek(blockNo * 4);
  return OatFile.readInt();
}","public int getNextBlock(int blockNo) throws IOException {
  oatAccessFile.seek(blockNo * 4);
  return oatAccessFile.readInt();
}",0.9344262295081968
75637,"public void close() throws IOException {
  objectFile.close();
  OatFile.close();
  dataFile.close();
}","public void close() throws IOException {
  objectAccessFile.close();
  oatAccessFile.close();
  dataAccessFile.close();
  clearTmpFile();
}",0.8429752066115702
75638,"/** 
 * @return
 * @throws IOException
 */
private ObjectStructure readObjectStructure() throws IOException {
  ObjectStructure structure=new ObjectStructure();
  structure.fileOffset=(int)objectFile.getFilePointer();
  structure.length=objectFile.readLong();
  structure.firstBlock=objectFile.readInt();
  structure.name=objectFile.readUTF();
  return structure;
}","/** 
 * @return
 * @throws IOException
 */
private ObjectStructure readObjectStructure() throws IOException {
  ObjectStructure structure=new ObjectStructure();
  structure.fileOffset=(int)objectAccessFile.getFilePointer();
  structure.length=objectAccessFile.readLong();
  structure.firstBlock=objectAccessFile.readInt();
  structure.name=objectAccessFile.readUTF();
  return structure;
}",0.9681697612732096
75639,"protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (sorttingArea != null && sorttingArea.isVisible()) {
      if (!sortKeyChooser.getText().equals(CHOICE_NONE)) {
        inputParameter.setFixedOrder(false);
        inputParameter.setDistinct(!distinct.getSelection());
        if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
 else {
        inputParameter.setFixedOrder(true);
        inputParameter.setSortBy(null);
        inputParameter.setSortDirection(null);
        inputParameter.setDistinct(false);
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (sorttingArea != null && !sorttingArea.isDisposed() && sorttingArea.isVisible()) {
      if (!sortKeyChooser.getText().equals(CHOICE_NONE)) {
        inputParameter.setFixedOrder(false);
        inputParameter.setDistinct(!distinct.getSelection());
        if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
 else {
        inputParameter.setFixedOrder(true);
        inputParameter.setSortBy(null);
        inputParameter.setSortDirection(null);
        inputParameter.setDistinct(false);
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}",0.9970783015192832
75640,"/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
  if (!containerStack.isEmpty()) {
    containerStack.pop();
  }
}","/** 
 * This method will be invoked while a containerArea ends.
 * @param container the ContainerArea specified from layout
 */
protected void endContainer(IContainerArea container){
  if (container instanceof PageArea) {
    pageGraphic.dispose();
  }
 else {
    pageGraphic.clipRestore();
  }
  if (!containerStack.isEmpty()) {
    containerStack.pop();
  }
}",0.9368575624082232
75641,"/** 
 * If the container is a PageArea, this method creates a pdf page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container instanceof PageArea) {
    scale=container.getScale();
    hTextSpace=(int)(H_TEXT_SPACE * scale);
    vTextSpace=(int)(V_TEXT_SPACE * scale);
    newPage(container);
    containerStack.push(new ContainerPosition(0,0));
  }
 else {
    drawContainer(container);
    ContainerPosition pos;
    if (!containerStack.isEmpty()) {
      pos=(ContainerPosition)containerStack.peek();
      ContainerPosition current=new ContainerPosition(pos.x + getX(container),pos.y + getY(container));
      containerStack.push(current);
    }
 else {
      containerStack.push(new ContainerPosition(getX(container),getY(container)));
    }
  }
}","/** 
 * If the container is a PageArea, this method creates a pdf page. If the container is the other containerAreas, such as TableArea, or just the border of textArea/imageArea this method draws the border and background of the given container.
 * @param container the ContainerArea specified from layout
 */
protected void startContainer(IContainerArea container){
  if (container instanceof PageArea) {
    scale=container.getScale();
    hTextSpace=(int)(H_TEXT_SPACE * scale);
    vTextSpace=(int)(V_TEXT_SPACE * scale);
    newPage(container);
    containerStack.push(new ContainerPosition(0,0));
  }
 else {
    pageGraphic.clipSave();
    clip(container);
    drawContainer(container);
    ContainerPosition pos;
    if (!containerStack.isEmpty()) {
      pos=(ContainerPosition)containerStack.peek();
      ContainerPosition current=new ContainerPosition(pos.x + getX(container),pos.y + getY(container));
      containerStack.push(current);
    }
 else {
      containerStack.push(new ContainerPosition(getX(container),getY(container)));
    }
  }
}",0.9762941461054668
75642,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else           elm.setAttribute(scriptEvent,""String_Node_Str"");
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,urlValue.getBaseUrl());
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode();
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
callbackFunction+=""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
}
callbackFunction+=""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers){
  if (elm != null) {
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      if (tg.getAction().getType().getValue() == ActionType.URL_REDIRECT) {
        redirect=true;
        break;
      }
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
switch (tg.getAction().getType().getValue()) {
case ActionType.SHOW_TOOLTIP:
          String tooltipText=((TooltipValue)tg.getAction().getValue()).getText();
        if ((tooltipText != null) && (tooltipText.trim().length() > 0)) {
          Element title=svg_g2d.dom.createElement(""String_Node_Str"");
          title.appendChild(svg_g2d.dom.createTextNode(tooltipText));
          elm.appendChild(title);
          String componentId=null;
          if (src instanceof WrappedStructureSource) {
            componentId=findFirstComponentId((WrappedStructureSource)src);
          }
          if (scriptEvent.equals(""String_Node_Str"")) {
            elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
            if (componentId != null)             elm.setAttribute(""String_Node_Str"",""String_Node_Str"" + componentId + ""String_Node_Str"");
 else             elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            if (componentId != null)             elm.setAttribute(scriptEvent,""String_Node_Str"" + componentId + ""String_Node_Str"");
 else             elm.setAttribute(scriptEvent,""String_Node_Str"");
          }
        }
      break;
case ActionType.URL_REDIRECT:
    URLValue urlValue=((URLValue)tg.getAction().getValue());
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"");
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    elm.setAttribute(scriptEvent,urlValue.getBaseUrl());
    elm.setAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    elm.setAttribute(scriptEvent,""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"");
  }
break;
case ActionType.TOGGLE_VISIBILITY:
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
case ActionType.HIGHLIGHT:
addJSCodeOnElement(src,tg,elm,scriptEvent,tg.getAction().getType().getValue());
break;
case ActionType.INVOKE_SCRIPT:
if (tg.getCondition().equals(TriggerCondition.ACCESSIBILITY_LITERAL)) {
AccessibilityValue accessValue=((AccessibilityValue)tg.getAction().getValue());
if (accessValue.getText() != null) {
Element title=svg_g2d.createElement(""String_Node_Str"");
title.appendChild(svg_g2d.dom.createTextNode(accessValue.getText()));
elm.appendChild(title);
}
if (accessValue.getAccessibility() != null) {
Element description=svg_g2d.createElement(""String_Node_Str"");
description.appendChild(svg_g2d.dom.createTextNode(accessValue.getAccessibility()));
elm.appendChild(description);
}
}
 else {
String script=((ScriptValue)tg.getAction().getValue()).getScript();
String callbackFunction=""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ src.getSource().hashCode();
if (StructureType.SERIES_DATA_POINT.equals(src.getType())) {
final DataPointHints dph=(DataPointHints)src.getSource();
callbackFunction+=""String_Node_Str"";
callbackFunction=ScriptUtil.script(callbackFunction,dph);
}
callbackFunction+=""String_Node_Str"";
elm.setAttribute(scriptEvent,callbackFunction);
setCursor(elm);
if (!(scripts.contains(script))) {
svg_g2d.addScript(""String_Node_Str"" + Math.abs(script.hashCode()) + ""String_Node_Str""+ ""String_Node_Str""+ script+ ""String_Node_Str"");
scripts.add(script);
}
}
break;
}
}
}
}
}",0.9419182733115072
75643,"/** 
 * The property is a simple value list. If property is a list property, the method will check to see if the current element has the local list value, if it has, the method returns, otherwise, a copy of the list value inherited from container or parent will be set locally on the element itself. <p> This method is supposed to be used when we need to change the value of a composite property( a simple list property ). These kind of property is inherited as a whole, so when the value changed from a child element. This method will be called to ensure that a local copy will be made, so change to the child won't affect the original value in the parent.
 * @param ref a reference to a list property or member.
 */
private DesignElement makeLocalCompositeValue(DesignElement topElement,ElementPropertyDefn prop,DesignElement content){
  ArrayList list=(ArrayList)topElement.getLocalProperty(module,prop);
  if (list != null)   return content;
  ArrayList inherited=(ArrayList)topElement.getProperty(module,prop);
  if (inherited == null)   return null;
  int index=-1;
  if (content != null)   index=inherited.indexOf(content);
  List value=(List)ModelUtil.copyValue(prop,inherited);
  ActivityStack activityStack=module.getActivityStack();
  list=new ArrayList();
  PropertyRecord propRecord=new PropertyRecord(topElement,prop,list);
  activityStack.execute(propRecord);
  ContainerContext context=new ContainerContext(topElement,prop.getName());
  for (int i=0; i < value.size(); i++) {
    DesignElement tmpContent=(DesignElement)value.get(i);
    ContentRecord addRecord=new ContentRecord(module,context,tmpContent,i);
    activityStack.execute(addRecord);
  }
  if (index != -1)   return (DesignElement)value.get(index);
  return null;
}","/** 
 * The property is a simple value list. If property is a list property, the method will check to see if the current element has the local list value, if it has, the method returns, otherwise, a copy of the list value inherited from container or parent will be set locally on the element itself. <p> This method is supposed to be used when we need to change the value of a composite property( a simple list property ). These kind of property is inherited as a whole, so when the value changed from a child element. This method will be called to ensure that a local copy will be made, so change to the child won't affect the original value in the parent.
 * @param ref a reference to a list property or member.
 */
private DesignElement makeLocalCompositeValue(DesignElement topElement,ElementPropertyDefn prop,DesignElement content){
  Object localValue=topElement.getLocalProperty(module,prop);
  if (localValue != null)   return content;
  Object inherited=topElement.getProperty(module,prop);
  if (inherited == null)   return null;
  int index=-1;
  if (content != null && inherited instanceof List)   index=((List)inherited).indexOf(content);
  Object newValue=ModelUtil.copyValue(prop,inherited);
  ActivityStack activityStack=module.getActivityStack();
  ContainerContext context=new ContainerContext(topElement,prop.getName());
  if (newValue instanceof List) {
    List list=new ArrayList();
    PropertyRecord propRecord=new PropertyRecord(topElement,prop,list);
    activityStack.execute(propRecord);
    list=(List)newValue;
    for (int i=0; i < list.size(); i++) {
      DesignElement tmpContent=(DesignElement)list.get(i);
      ContentRecord addRecord=new ContentRecord(module,context,tmpContent,i);
      activityStack.execute(addRecord);
    }
  }
 else {
    PropertyRecord propRecord=new PropertyRecord(topElement,prop,newValue);
    activityStack.execute(propRecord);
  }
  if (index != -1)   return (DesignElement)((List)newValue).get(index);
  return content;
}",0.7259576747923921
75644,"private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=pl.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setTop(bo.getTop());
  boTitle.setWidth(szTitle.getWidth());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (pl.isSetWidthHint()) {
    plotWidthHint=pl.getWidthHint();
  }
  if (pl.isSetHeightHint()) {
    plotHeightHint=pl.getHeightHint();
  }
  double plotLeft, plotTop;
  Position lgPos=lg.getPosition();
  Anchor plotAnchor=pl.getAnchor();
  if (isRightToLeft) {
switch (plotAnchor.getValue()) {
case Anchor.EAST:
      plotAnchor=Anchor.WEST_LITERAL;
    break;
case Anchor.NORTH_EAST:
  plotAnchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
plotAnchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
plotAnchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
plotAnchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
plotAnchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (lgPos.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
boLegend.setLeft(plotLeft + boPlot.getWidth());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
boTitle.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + boLegend.getWidth();
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + szTitle.getWidth() + boLegend.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
if (szTitle.getHeight() + boPlot.getHeight() + szLegend.getHeight() > bo.getHeight()) {
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
}
 else {
boLegend.setHeight(szLegend.getHeight());
}
plotLeft=bo.getLeft();
plotTop=bo.getTop() + boLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + boLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
if (szTitle.getHeight() + boPlot.getHeight() + szLegend.getHeight() > bo.getHeight()) {
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
}
 else {
boLegend.setHeight(szLegend.getHeight());
}
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boTitle.setWidth(bo.getWidth());
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
boLegend.setTop(plotTop + boPlot.getHeight());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != pl && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
}
}","private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=pl.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setTop(bo.getTop());
  boTitle.setWidth(szTitle.getWidth());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (pl.isSetWidthHint()) {
    plotWidthHint=pl.getWidthHint();
  }
  if (pl.isSetHeightHint()) {
    plotHeightHint=pl.getHeightHint();
  }
  double plotLeft, plotTop;
  Position lgPos=lg.getPosition();
  Anchor plotAnchor=pl.getAnchor();
  if (isRightToLeft) {
switch (plotAnchor.getValue()) {
case Anchor.EAST:
      plotAnchor=Anchor.WEST_LITERAL;
    break;
case Anchor.NORTH_EAST:
  plotAnchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
plotAnchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
plotAnchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
plotAnchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
plotAnchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (lgPos.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.setLeft(plotLeft + boPlot.getWidth());
break;
case Position.LEFT:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
boTitle.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + boLegend.getWidth();
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + szTitle.getWidth() + boLegend.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
if (szTitle.getHeight() + boPlot.getHeight() + szLegend.getHeight() > bo.getHeight()) {
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
}
 else {
boLegend.setHeight(szLegend.getHeight());
}
plotLeft=bo.getLeft();
plotTop=bo.getTop() + boLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + boLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
if (szTitle.getHeight() + boPlot.getHeight() + szLegend.getHeight() > bo.getHeight()) {
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
}
 else {
boLegend.setHeight(szLegend.getHeight());
}
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boTitle.setWidth(bo.getWidth());
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.setTop(plotTop + boPlot.getHeight());
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != pl && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
}
}",0.994838639574052
75645,"/** 
 * Get classes with specified comparator
 * @param comp the coparator
 * @return List of classes
 */
public static List getClasses(Comparator comp){
  List classes=getMetaDataDictionary().getClasses();
  Collections.sort(classes,comp);
  return classes;
}","/** 
 * Get classes with specified comparator
 * @param comp the coparator
 * @return List of classes
 */
public static List getClasses(Comparator comp){
  List classes=getMetaDataDictionary().getClasses();
  Collections.sort(classes,comp);
  classes.remove(TOTAL_CLASS);
  return classes;
}",0.943738656987296
75646,"/** 
 * Returns the extension name according to format
 * @param format
 * @return
 */
public static String getExtensionName(String format){
  if (format == null)   return null;
  String key=""String_Node_Str"" + format;
  return DataUtil.trimString(getInitProp(key));
}","/** 
 * Returns the extension name according to format
 * @param format
 * @return
 */
public static String getExtensionName(String format){
  if (format == null)   return null;
  String key=""String_Node_Str"" + format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return DataUtil.trimString(getInitProp(key));
}",0.9178082191780822
75647,"/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.closeTag(HTMLTags.TAG_DIV);
}","/** 
 * Close the container tag.
 */
public void closeContainerTag(){
  writer.closeTag(HTMLTags.TAG_DIV);
  int display=((Integer)cellDisplayStack.pop()).intValue();
  if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    closeInlineBoxTag();
  }
}",0.5130641330166271
75648,"/** 
 * Open the container tag.
 */
public void openContainerTag(IContainerContent container){
  writer.openTag(HTMLTags.TAG_DIV);
}","/** 
 * Open the container tag.
 */
public void openContainerTag(IContainerContent container){
  DimensionType x=container.getX();
  DimensionType y=container.getY();
  DimensionType width=container.getWidth();
  DimensionType height=container.getHeight();
  int display=getElementType(x,y,width,height,container.getStyle());
  cellDisplayStack.push(new Integer(display));
  if (((display & HTMLEmitterUtil.DISPLAY_INLINE) > 0) || ((display & HTMLEmitterUtil.DISPLAY_INLINE_BLOCK) > 0)) {
    openInlineBoxTag();
  }
  writer.openTag(HTMLTags.TAG_DIV);
}",0.3848396501457726
75649,"/** 
 * Compare the DesignerValue and OdaDataSetParameter, if one param does not exist in DesignerValue, it must be user-defined one. Keep it in user-defined-param-list.
 * @param parameters
 * @throws SemanticException
 */
void updateUserDefinedParameter(DataSetParameters parameters){
  List tmpParams=new ArrayList();
  if (parameters == null) {
    for (int i=0; i < setDefinedParams.size(); i++) {
      tmpParams.add(((OdaDataSetParameterHandle)setDefinedParams.get(i)).getStructure());
    }
  }
 else {
    List posList=getPositions(parameters);
    for (int i=0; i < setDefinedParams.size(); i++) {
      OdaDataSetParameterHandle paramHandle=(OdaDataSetParameterHandle)setDefinedParams.get(i);
      Integer position=paramHandle.getPosition();
      if (position == null)       continue;
      if (!posList.contains(position)) {
        tmpParams.add(paramHandle.getStructure());
      }
    }
  }
  userDefinedParams=new ArrayList();
  for (int i=0; i < tmpParams.size(); i++) {
    userDefinedParams.add(((OdaDataSetParameter)tmpParams.get(i)).copy());
  }
  tmpParams.clear();
}","/** 
 * Compare the DesignerValue and OdaDataSetParameter, if one param does not exist in DesignerValue, it must be user-defined one. Keep it in user-defined-param-list.
 * @param parameters
 * @throws SemanticException
 */
void updateUserDefinedParameter(DataSetParameters parameters){
  userDefinedParams=new ArrayList();
  if (parameters == null) {
    for (int i=0; i < setDefinedParams.size(); i++) {
      userDefinedParams.add(((OdaDataSetParameterHandle)setDefinedParams.get(i)).getStructure());
    }
  }
 else {
    List posList=getPositions(parameters);
    for (int i=0; i < setDefinedParams.size(); i++) {
      OdaDataSetParameterHandle paramHandle=(OdaDataSetParameterHandle)setDefinedParams.get(i);
      Integer position=paramHandle.getPosition();
      if (position == null)       continue;
      if (!posList.contains(position)) {
        userDefinedParams.add(paramHandle.getStructure());
      }
    }
  }
}",0.8865775136206042
75650,"/** 
 * Update parameters in DataSetHandle with DataSetDesign's.
 * @param setDesign data set design contains driver-defined parameters
 * @param setHandle data set handle
 * @param cachedParameters the cached data set parameters in the designer values
 * @param userDefinedList a list contains user-defined parameters. Each item is <code>OdaDataSetParameter</code>.
 * @throws SemanticException
 */
private void updateROMDataSetParams(DataSetParameterAdapter setParamAdapter,DataSetParameters cachedParameters) throws SemanticException {
  List newParams=setParamAdapter.newROMSetParams(cachedParameters);
  OdaDataSetHandle setHandle=setParamAdapter.getSetHandle();
  PropertyHandle propHandle=setHandle.getPropertyHandle(OdaDataSetHandle.PARAMETERS_PROP);
  propHandle.clearValue();
  IdentifierUtility.updateParams2UniqueName(newParams);
  for (int i=0; i < newParams.size(); i++) {
    propHandle.addItem((OdaDataSetParameter)newParams.get(i));
  }
}","/** 
 * Update parameters in DataSetHandle with DataSetDesign's.
 * @param setDesign data set design contains driver-defined parameters
 * @param setHandle data set handle
 * @param cachedParameters the cached data set parameters in the designer values
 * @param userDefinedList a list contains user-defined parameters. Each item is <code>OdaDataSetParameter</code>.
 * @throws SemanticException
 */
private void updateROMDataSetParams(DataSetParameterAdapter setParamAdapter,DataSetParameters cachedParameters) throws SemanticException {
  List newParams=setParamAdapter.newROMSetParams(cachedParameters);
  OdaDataSetHandle setHandle=setParamAdapter.getSetHandle();
  IdentifierUtility.updateParams2UniqueName(newParams);
  setParamAdapter.updateRomDataSetParamsWithNewValues(setHandle,newParams);
}",0.8416856492027335
75651,"public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException {
  try {
    List result=new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    String bindingName=OlapExpressionCompiler.getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    List bindings=queryDefn.getBindings();
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (bindingName == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    IEdgeDefinition axisQualifierEdge=queryDefn.getEdge(this.getAxisQualifierEdgeType(target,queryDefn));
    for (int i=0; i < aggrOns.size(); i++) {
      DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(i).toString());
      ILevelDefinition lvl=getAxisQualifierLevel(dimLevel,axisQualifierEdge);
      if (lvl != null)       result.add(lvl);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException {
  try {
    List result=new ArrayList();
    DimLevel target=OlapExpressionUtil.getTargetDimLevel(targetLevel);
    String bindingName=OlapExpressionCompiler.getReferencedScriptObject(bindingExpr,""String_Node_Str"");
    if (bindingName == null)     return result;
    IBinding binding=null;
    List bindings=queryDefn.getBindings();
    for (int i=0; i < bindings.size(); i++) {
      IBinding bd=(IBinding)bindings.get(i);
      if (bd.getBindingName().equals(bindingName)) {
        binding=bd;
        break;
      }
    }
    if (binding == null) {
      return result;
    }
    List aggrOns=binding.getAggregatOns();
    IEdgeDefinition axisQualifierEdge=queryDefn.getEdge(this.getAxisQualifierEdgeType(target,queryDefn));
    for (int i=0; i < aggrOns.size(); i++) {
      DimLevel dimLevel=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(i).toString());
      ILevelDefinition lvl=getAxisQualifierLevel(dimLevel,axisQualifierEdge);
      if (lvl != null)       result.add(lvl);
    }
    return result;
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9983870967741936
75652,"private ILevelDefinition getAxisQualifierLevel(DimLevel dimLevel,IEdgeDefinition edge){
  if (edge == null)   return null;
  List dims=edge.getDimensions();
  for (int i=0; i < dims.size(); i++) {
    IDimensionDefinition dim=(IDimensionDefinition)dims.get(i);
    if (!dim.getName().equals(dimLevel.getDimensionName()))     return null;
    IHierarchyDefinition hier=(IHierarchyDefinition)dim.getHierarchy().get(0);
    List levels=hier.getLevels();
    for (int j=0; j < levels.size(); j++) {
      ILevelDefinition level=(ILevelDefinition)levels.get(j);
      if (level.getName().equals(dimLevel.getLevelName()))       return level;
    }
  }
  return null;
}","/** 
 * @param dimLevel
 * @param edge
 * @return
 */
private ILevelDefinition getAxisQualifierLevel(DimLevel dimLevel,IEdgeDefinition edge){
  if (edge == null)   return null;
  List dims=edge.getDimensions();
  for (int i=0; i < dims.size(); i++) {
    IDimensionDefinition dim=(IDimensionDefinition)dims.get(i);
    if (!dim.getName().equals(dimLevel.getDimensionName()))     return null;
    IHierarchyDefinition hier=(IHierarchyDefinition)dim.getHierarchy().get(0);
    List levels=hier.getLevels();
    for (int j=0; j < levels.size(); j++) {
      ILevelDefinition level=(ILevelDefinition)levels.get(j);
      if (level.getName().equals(dimLevel.getLevelName()))       return level;
    }
  }
  return null;
}",0.9608127721335268
75653,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,hierhandle,null,null),levelInHier));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    ILevelDefn[] levelInHier=null;
    if (hierhandle.getLevelCount() == 1)     levelInHier=new ILevelDefn[1];
 else     levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1];
    String[] leafLevelKeyColumn=new String[levels.size()];
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      }
      leafLevelKeyColumn[k]=level.getName();
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    createLeafLevel(levels,levelInHier,leafLevelKeyColumn);
    iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),new DataSetIterator(this,hierhandle),levelInHier));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}",0.9380069524913094
75654,"private void createLeafLevel(List levels,ILevelDefn[] levelInHier,String[] leafLevelKeyColumn){
  if (levelInHier.length > levels.size()) {
    levelInHier[levelInHier.length - 1]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn,new String[0]);
  }
}","/** 
 * @param levels
 * @param levelInHier
 * @param leafLevelKeyColumn
 */
private void createLeafLevel(List levels,ILevelDefn[] levelInHier,String[] leafLevelKeyColumn){
  if (levelInHier.length > levels.size()) {
    levelInHier[levelInHier.length - 1]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn,new String[0]);
  }
}",0.878740157480315
75655,"public ICubeQueryUtil getCubeQueryUtil(){
  return new CubeQueryUtil();
}","public ICubeQueryUtil getCubeQueryUtil(){
  return new CubeQueryUtil(this);
}",0.9733333333333334
75656,"/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null && configVar.getName() != null) {
          String paramName=configVar.getName();
          Object paramValue=configVar.getValue();
          if (paramName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL) && paramValue != null) {
            String nullParamName=getParameterName((String)paramValue,parameterList);
            if (nullParamName != null)             this.configMap.put(nullParamName,null);
            continue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(paramName)) != null) {
            paramName=getParameterName(displayTextParam,parameterList);
            if (paramName != null) {
              this.displayTexts.put(paramName,paramValue);
            }
            continue;
          }
          paramName=getParameterName(paramName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (paramValue != null && parameter != null) {
            String typeVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=configVar.getName() + ""String_Node_Str"" + IBirtConstants.PROP_EXPR;
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            this.configMap.put(paramName,paramValue);
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}","/** 
 * parse paramenters from config file.
 * @param request HttpServletRequest
 * @param parameterList Collection
 * @return
 */
protected void parseConfigVars(HttpServletRequest request,Collection parameterList){
  this.configMap=new HashMap();
  if (this.displayTexts == null)   this.displayTexts=new HashMap();
  String reportConfigName=ParameterAccessor.getConfigFileName(this.reportDesignName);
  if (reportConfigName == null)   return;
  SessionHandle sessionHandle=new DesignEngine(null).newSessionHandle(ULocale.US);
  ReportDesignHandle handle=null;
  try {
    handle=sessionHandle.openDesign(reportConfigName);
    if (handle != null) {
      String displayTextParam=null;
      Iterator configVars=handle.configVariablesIterator();
      while (configVars != null && configVars.hasNext()) {
        ConfigVariableHandle configVar=(ConfigVariableHandle)configVars.next();
        if (configVar != null) {
          String varName=configVar.getName();
          Object varValue=configVar.getValue();
          if (varName == null || varValue == null)           continue;
          String tempName=varName;
          String paramName=null;
          if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
            tempName=(String)varValue;
          }
 else           if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
            tempName=displayTextParam;
          }
          paramName=getParameterName(tempName,parameterList);
          ParameterDefinition parameter=BirtUtility.findParameterDefinition(parameterList,paramName);
          if (parameter != null) {
            String typeVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_TYPE;
            ConfigVariable typeVar=handle.findConfigVariable(typeVarName);
            String dataType=ParameterDataTypeConverter.ConvertDataType(parameter.getDataType());
            String cachedDateType=null;
            if (typeVar != null)             cachedDateType=typeVar.getValue();
            if (cachedDateType == null || !cachedDateType.equalsIgnoreCase(dataType))             continue;
            String exprVarName=tempName + ""String_Node_Str"" + IBirtConstants.PROP_EXPR;
            ConfigVariable exprVar=handle.findConfigVariable(exprVarName);
            String cachedExpr=null;
            if (exprVar != null)             cachedExpr=exprVar.getValue();
            if (cachedExpr == null)             cachedExpr=""String_Node_Str"";
            String expr=parameter.getValueExpr();
            if (expr == null)             expr=""String_Node_Str"";
            if (!cachedExpr.equals(expr))             continue;
            if (varName.toLowerCase().startsWith(ParameterAccessor.PARAM_ISNULL)) {
              this.configMap.put(paramName,null);
            }
 else             if ((displayTextParam=ParameterAccessor.isDisplayText(varName)) != null) {
              this.displayTexts.put(paramName,varValue);
            }
 else {
              this.configMap.put(paramName,varValue);
            }
          }
        }
      }
      handle.close();
    }
  }
 catch (  Exception e) {
  }
}",0.7550330165888227
75657,"protected void handleUpdate(){
  Data data=new Data();
  data.setConfirmation(""String_Node_Str"");
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}","/** 
 * Handle response
 */
protected void handleUpdate(){
  Data data=new Data();
  data.setConfirmation(""String_Node_Str"");
  UpdateData updateData=new UpdateData();
  updateData.setTarget(""String_Node_Str"");
  updateData.setData(data);
  Update update=new Update();
  update.setUpdateData(updateData);
  response.setUpdate(new Update[]{update});
}",0.9583333333333334
75658,"protected void __execute() throws Exception {
}","/** 
 * execute action
 */
protected void __execute() throws Exception {
}",0.7768595041322314
75659,"/** 
 * initEditorLayout - initialize the UI components of the editor
 */
private Composite initEditorLayout(Composite parent){
  Composite mainPane=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  final Composite barPane=new Composite(mainPane,SWT.NONE);
  layout=new GridLayout(4,false);
  barPane.setLayout(layout);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  barPane.setLayoutData(gdata);
  cmbExpList=new Combo(barPane,SWT.READ_ONLY);
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  cmbExpList.setLayoutData(layoutData);
  butReset=new Button(barPane,SWT.PUSH);
  butReset.setText(Messages.getString(""String_Node_Str""));
  layoutData=new GridData();
  layoutData.horizontalIndent=6;
  butReset.setLayoutData(layoutData);
  butReset.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      setEditorText(""String_Node_Str"");
      markDirty();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  Label column=new Label(barPane,SWT.SEPARATOR | SWT.VERTICAL);
  layoutData=new GridData();
  layoutData.heightHint=20;
  layoutData.horizontalIndent=10;
  column.setLayoutData(layoutData);
  ano=new Label(barPane,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_CENTER);
  ano.setLayoutData(layoutData);
  final Composite sep=new Composite(mainPane,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.heightHint=1;
  sep.setLayoutData(layoutData);
  sep.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      GC gc=e.gc;
      Rectangle rect=sep.getBounds();
      gc.setForeground(ColorConstants.darkGray);
      gc.drawLine(0,0,rect.width,0);
    }
  }
);
  Composite jsEditorContainer=new Composite(mainPane,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
  jsEditorContainer.setLayoutData(gdata);
  jsEditorContainer.setLayout(new FillLayout());
  return jsEditorContainer;
}","/** 
 * initEditorLayout - initialize the UI components of the editor
 */
private Composite initEditorLayout(Composite parent){
  Composite mainPane=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.verticalSpacing=0;
  mainPane.setLayout(layout);
  final Composite barPane=new Composite(mainPane,SWT.NONE);
  layout=new GridLayout(5,false);
  barPane.setLayout(layout);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  barPane.setLayoutData(gdata);
  cmbExpList=new Combo(barPane,SWT.READ_ONLY);
  GridData layoutData=new GridData(GridData.FILL_HORIZONTAL);
  cmbExpList.setLayoutData(layoutData);
  extendedItemExpList=new Combo(barPane,SWT.READ_ONLY);
  extendedItemExpList.setLayoutData(layoutData);
  butReset=new Button(barPane,SWT.PUSH);
  butReset.setText(Messages.getString(""String_Node_Str""));
  layoutData=new GridData();
  layoutData.horizontalIndent=6;
  butReset.setLayoutData(layoutData);
  butReset.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      setEditorText(""String_Node_Str"");
      markDirty();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
      widgetSelected(e);
    }
  }
);
  Label column=new Label(barPane,SWT.SEPARATOR | SWT.VERTICAL);
  layoutData=new GridData();
  layoutData.heightHint=20;
  layoutData.horizontalIndent=10;
  column.setLayoutData(layoutData);
  ano=new Label(barPane,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_CENTER);
  ano.setLayoutData(layoutData);
  final Composite sep=new Composite(mainPane,0);
  layoutData=new GridData(GridData.FILL_HORIZONTAL);
  layoutData.heightHint=1;
  sep.setLayoutData(layoutData);
  sep.addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent e){
      GC gc=e.gc;
      Rectangle rect=sep.getBounds();
      gc.setForeground(ColorConstants.darkGray);
      gc.drawLine(0,0,rect.width,0);
    }
  }
);
  Composite jsEditorContainer=new Composite(mainPane,SWT.NONE);
  gdata=new GridData(GridData.FILL_HORIZONTAL | GridData.FILL_VERTICAL);
  jsEditorContainer.setLayoutData(gdata);
  jsEditorContainer.setLayout(new FillLayout());
  return jsEditorContainer;
}",0.9753399400783592
75660,"public Object[] getElements(Object inputElement){
  if (inputElement instanceof DesignElementHandle) {
    DesignElementHandle eleHandle=(DesignElementHandle)inputElement;
    if (eleHandle.getDefn() != null) {
      return eleHandle.getDefn().getMethods().toArray();
    }
  }
  return new Object[]{};
}","public Object[] getElements(Object inputElement){
  if (inputElement instanceof DesignElementHandle) {
    DesignElementHandle eleHandle=(DesignElementHandle)inputElement;
    if (eleHandle.getDefn() != null) {
      return eleHandle.getMethods().toArray();
    }
  }
  return new Object[]{};
}",0.9832775919732442
75661,"/** 
 * @return
 */
public synchronized static String nextID(){
  return QURE_ID_PREFIX + (qursStart++);
}","/** 
 * @return
 */
public static String nextID(){
  int id=((Integer)qursStart.get()).intValue();
  qursStart.set(new Integer(id + 1));
  return QURE_ID_PREFIX + (id);
}",0.5942028985507246
75662,"/** 
 * In java script expression, all the java type should be convert to java script type.
 */
public void test16() throws Exception {
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameSort=new String[1];
  bindingNameSort[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprSort=new IBaseExpression[1];
  bindingExprSort[0]=new ScriptExpression(""String_Node_Str"");
  SortDefinition[] sortDefn=new SortDefinition[]{new SortDefinition()};
  sortDefn[0].setColumn(""String_Node_Str"");
  sortDefn[0].setSortDirection(ISortDefinition.SORT_DESC);
  String[] bindingNameFilter=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""))};
  String[] bindingNameRow=new String[7];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  bindingNameRow[6]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[7];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[6]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,bindingNameSort,bindingExprSort,sortDefn,bindingNameFilter,bindingExprFilter,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}","/** 
 * In java script expression, all the java type should be convert to java script type.
 */
public void test16() throws Exception {
  String[] bindingNameGroup=new String[2];
  bindingNameGroup[0]=""String_Node_Str"";
  bindingNameGroup[1]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[2];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprGroup[1]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str""),new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[1].setKeyExpression(""String_Node_Str"");
  String[] bindingNameFilter=new String[1];
  bindingNameFilter[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprFilter=new IBaseExpression[1];
  bindingExprFilter[0]=new ScriptExpression(""String_Node_Str"");
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""))};
  String[] bindingNameRow=new String[7];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  bindingNameRow[4]=""String_Node_Str"";
  bindingNameRow[5]=""String_Node_Str"";
  bindingNameRow[6]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[7];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[4]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[5]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[6]=new ScriptExpression(""String_Node_Str"");
  createAndRunQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,bindingNameFilter,bindingExprFilter,filterDefn,bindingNameRow,bindingExprRow);
  checkOutputFile();
}",0.904645476772616
75663,"public void run(){
  ReportRequest r=new ReportRequest();
  r.setType(ReportRequest.LOAD_MASTERPAGE);
  r.setSelectionObject(request.getSelectionModelList());
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
}","public void run(){
  setFocus();
}",0.2281368821292775
75664,"public void renderReport(IProgressMonitor monitor){
  if (!assignParamValues)   return;
  assignParamValues=false;
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    return;
  }
  monitor.worked(1);
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    return;
  }
  File reportFile=new File(reportDesignFile);
  String outputFolder=getOutputFolder(reportFile);
  String outputFormat=""String_Node_Str"";
  if (isDrillThrough) {
    outputFormat=(String)drillRenderOption.getOutputFormat();
  }
  this.outputLocation=outputFolder + File.separator + reportFile.getName()+ ""String_Node_Str""+ outputFormat;
  try {
    if (currentPageNum > 0) {
      try {
        this.reportDocumentFile=createReportDocument(reportDesignFile,outputFolder,this.paramValues);
        this.totalPageNum=createReportOutput(this.reportDocumentFile,this.outputLocation,currentPageNum);
      }
 catch (      EngineException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (monitor.isCanceled()) {
    return;
  }
  monitor.worked(3);
}","public void renderReport(IProgressMonitor monitor){
  if (hasParas && !assignParamValues)   return;
  assignParamValues=false;
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    return;
  }
  monitor.worked(1);
  monitor.subTask(""String_Node_Str"");
  if (monitor.isCanceled()) {
    return;
  }
  File reportFile=new File(reportDesignFile);
  String outputFolder=getOutputFolder(reportFile);
  String outputFormat=""String_Node_Str"";
  if (isDrillThrough) {
    outputFormat=(String)drillRenderOption.getOutputFormat();
  }
  this.outputLocation=outputFolder + File.separator + reportFile.getName()+ ""String_Node_Str""+ outputFormat;
  try {
    if (currentPageNum > 0) {
      try {
        this.reportDocumentFile=createReportDocument(reportDesignFile,outputFolder,this.paramValues);
        this.totalPageNum=createReportOutput(this.reportDocumentFile,this.outputLocation,currentPageNum);
      }
 catch (      EngineException e) {
        e.printStackTrace();
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (monitor.isCanceled()) {
    return;
  }
  monitor.worked(3);
}",0.9946380697050938
75665,"/** 
 * get Dte temporary dir.
 * @return
 */
public String getTmpdir(){
  return tmpDir;
}","/** 
 * get Dte temporary dir.
 * @return
 */
public String getTmpdir(){
  if (!tmpDir.endsWith(File.separator)) {
    return tmpDir + File.separator;
  }
  return tmpDir;
}",0.6893939393939394
75666,"/** 
 * @return
 */
private File getMetaCacheFile(){
  File file=new File(context.getTmpdir() + File.separator + CACHED_FILE_PREFIX+ queryResultID+ ""String_Node_Str"");
  return file;
}","/** 
 * @return
 */
private File getMetaCacheFile(){
  File file=new File(context.getTmpdir() + CACHED_FILE_PREFIX + queryResultID+ ""String_Node_Str"");
  return file;
}",0.9488636363636364
75667,"/** 
 * @return
 */
private File getRowCacheFile(){
  File file=new File(context.getTmpdir() + File.separator + CACHED_FILE_PREFIX+ queryResultID+ ""String_Node_Str"");
  return file;
}","/** 
 * @return
 */
private File getRowCacheFile(){
  File file=new File(context.getTmpdir() + CACHED_FILE_PREFIX + queryResultID+ ""String_Node_Str"");
  return file;
}",0.9485714285714286
75668,"/** 
 * @return
 */
private File getRowCacheFile(){
  File file=new File(context.getTmpdir() + File.separator + CACHED_FILE_PREFIX+ resultService.getQueryResults().getID()+ ""String_Node_Str"");
  return file;
}","/** 
 * @return
 */
private File getRowCacheFile(){
  File file=new File(context.getTmpdir() + CACHED_FILE_PREFIX + resultService.getQueryResults().getID()+ ""String_Node_Str"");
  return file;
}",0.9552238805970148
75669,"/** 
 * @return
 */
private File getMetaCacheFile(){
  File file=new File(context.getTmpdir() + File.separator + CACHED_FILE_PREFIX+ resultService.getQueryResults().getID()+ ""String_Node_Str"");
  return file;
}","/** 
 * @return
 */
private File getMetaCacheFile(){
  File file=new File(context.getTmpdir() + CACHED_FILE_PREFIX + resultService.getQueryResults().getID()+ ""String_Node_Str"");
  return file;
}",0.9554455445544554
75670,"/** 
 * Return the expression for the given binding column based on the given element
 * @param baseElement the base element
 * @param column the binding column
 * @return the expression for the column
 */
public static String getBindingexpression(DesignElementHandle baseElement,ComputedColumnHandle column){
  String exp=IReportElementConstants.BINDING_COLUMN_PREFIX;
  if (baseElement instanceof ExtendedItemHandle && ((ExtendedItemHandle)baseElement).getExtensionName().equals(""String_Node_Str"")) {
    exp=ExpressionUtil.DATA_INDICATOR;
  }
  for (int i=0; i < getBindingLevel(column.getElementHandle(),baseElement); i++) {
    exp+=IReportElementConstants.OUTER_BINDING_COLUMN_PREFIX;
  }
  exp+=""String_Node_Str"" + DEUtil.escape(column.getName()) + ""String_Node_Str"";
  return exp;
}","/** 
 * Return the expression for the given binding column based on the given element
 * @param baseElement the base element
 * @param column the binding column
 * @return the expression for the column
 */
public static String getBindingexpression(DesignElementHandle baseElement,ComputedColumnHandle column){
  String exp=IReportElementConstants.BINDING_COLUMN_PREFIX;
  if (isCrosstabElement(baseElement)) {
    exp=ExpressionUtil.DATA_INDICATOR;
  }
  for (int i=0; i < getBindingLevel(column.getElementHandle(),baseElement); i++) {
    exp+=IReportElementConstants.OUTER_BINDING_COLUMN_PREFIX;
  }
  exp+=""String_Node_Str"" + DEUtil.escape(column.getName()) + ""String_Node_Str"";
  return exp;
}",0.898453261600538
75671,"/** 
 * Checks out-of-range of each data point. If outside data is visible, adjust the coordinates; otherwise, clip the plot area. Note that coordinates array may be modified.
 * @param ipr renderer
 * @param srh SeriesRenderingHints
 * @param faX X coordinates
 * @param faY Y coordinates
 * @param bShowAsTape indicates if it's 2d+ chart
 */
protected final void handleOutsideDataPoints(final IPrimitiveRenderer ipr,final SeriesRenderingHints srh,final double[] faX,final double[] faY,final boolean bShowAsTape){
  final AutoScale scaleOrth=getInternalOrthogonalAxis().getScale();
  if ((scaleOrth.getType() & IConstants.PERCENT) == IConstants.PERCENT) {
    return;
  }
  final boolean bHideOutside=!isShowOutside();
  final DataPointHints[] dpha=srh.getDataPoints();
  final boolean isCategory=srh.isCategoryScale();
  final boolean bTransposed=isTransposed();
  final Bounds boClientArea=srh.getClientAreaBounds(true);
  if (bShowAsTape) {
    final double dSeriesThickness=srh.getSeriesThickness();
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  renderClipping(ipr,boClientArea);
  for (int i=0; i < dpha.length; i++) {
    if (!isCategory && dpha[i].getBaseValue() == null) {
      dpha[i].markOutside();
      continue;
    }
    int iOutside=0;
    if (dpha[i].getStackOrthogonalValue() != null) {
      double value=dpha[i].getStackOrthogonalValue().doubleValue();
      double min=Methods.asDouble(scaleOrth.getMinimum()).doubleValue();
      double max=Methods.asDouble(scaleOrth.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else {
      iOutside=checkEntryByType(scaleOrth,dpha[i].getOrthogonalValue());
    }
    final OneAxis axisBase=getInternalBaseAxis();
    if (iOutside == 0 && !axisBase.isCategoryScale()) {
      iOutside=checkEntryByType(axisBase.getScale(),dpha[i].getBaseValue());
    }
    if (iOutside > 0) {
      if (bHideOutside) {
        dpha[i].markOutside();
      }
 else {
        if (bTransposed) {
          if (!Double.isNaN(faX[i])) {
            faX[i]=iOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
          }
        }
 else {
          if (!Double.isNaN(faY[i])) {
            faY[i]=iOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
          }
        }
      }
    }
  }
}","/** 
 * Checks out-of-range of each data point. If outside data is visible, adjust the coordinates; otherwise, clip the plot area. Note that coordinates array may be modified.
 * @param ipr renderer
 * @param srh SeriesRenderingHints
 * @param faX X coordinates
 * @param faY Y coordinates
 * @param bShowAsTape indicates if it's 2d+ chart
 */
protected final void handleOutsideDataPoints(final IPrimitiveRenderer ipr,final SeriesRenderingHints srh,final double[] faX,final double[] faY,final boolean bShowAsTape){
  final AutoScale scaleOrth=getInternalOrthogonalAxis().getScale();
  final Bounds boClientArea=srh.getClientAreaBounds(true);
  if (bShowAsTape) {
    final double dSeriesThickness=srh.getSeriesThickness();
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
  }
  renderClipping(ipr,boClientArea);
  if ((scaleOrth.getType() & IConstants.PERCENT) == IConstants.PERCENT) {
    return;
  }
  final boolean bHideOutside=!isShowOutside();
  final DataPointHints[] dpha=srh.getDataPoints();
  final boolean isCategory=srh.isCategoryScale();
  final boolean bTransposed=isTransposed();
  for (int i=0; i < dpha.length; i++) {
    if (!isCategory && dpha[i].getBaseValue() == null) {
      dpha[i].markOutside();
      continue;
    }
    int iOutside=0;
    if (dpha[i].getStackOrthogonalValue() != null) {
      double value=dpha[i].getStackOrthogonalValue().doubleValue();
      double min=Methods.asDouble(scaleOrth.getMinimum()).doubleValue();
      double max=Methods.asDouble(scaleOrth.getMaximum()).doubleValue();
      if (value < min) {
        iOutside=1;
      }
 else       if (value > max) {
        iOutside=2;
      }
    }
 else {
      iOutside=checkEntryByType(scaleOrth,dpha[i].getOrthogonalValue());
    }
    final OneAxis axisBase=getInternalBaseAxis();
    if (iOutside == 0 && !axisBase.isCategoryScale()) {
      iOutside=checkEntryByType(axisBase.getScale(),dpha[i].getBaseValue());
    }
    if (iOutside > 0) {
      if (bHideOutside) {
        dpha[i].markOutside();
      }
 else {
        if (bTransposed) {
          if (!Double.isNaN(faX[i])) {
            faX[i]=iOutside == 1 ? boClientArea.getLeft() : boClientArea.getLeft() + boClientArea.getWidth();
          }
        }
 else {
          if (!Double.isNaN(faY[i])) {
            faY[i]=iOutside == 1 ? boClientArea.getTop() + boClientArea.getHeight() : boClientArea.getTop();
          }
        }
      }
    }
  }
}",0.8995884773662551
75672,"/** 
 * Checks if current series can show outside values.
 * @return
 */
protected boolean isShowOutside(){
  return getAxis().getScale().isShowOutside();
}","/** 
 * Checks if current series can show outside values.
 * @return
 */
protected boolean isShowOutside(){
  return getAxis().isPercent() ? false : getAxis().getScale().isShowOutside();
}",0.9069767441860463
75673,"public EditPart createEditPart(EditPart context,Object model){
  if (context instanceof CrosstabCellEditPart) {
    if (model instanceof DataItemHandle) {
      CrosstabCellAdapter adapter=((CrosstabCellEditPart)context).getCrosstabCellAdapter();
      String position=adapter.getPositionType();
      if ((ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(position) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(position)) && adapter.getFirstDataItem() == model) {
        return new LevelHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(position)) {
        return new LevelHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER.equals(position)) {
        return new MeasureHandleDataItemEditPart(model);
      }
    }
  }
  if (model instanceof VirtualCrosstabCellAdapter) {
    return new VirtualCellEditPart(model);
  }
  if (model instanceof CrosstabCellAdapter) {
    if (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(((CrosstabCellAdapter)model).getPositionType()) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(((CrosstabCellAdapter)model).getPositionType())) {
      CrosstabFirstCellEditPart first=new CrosstabFirstCellEditPart(model);
      first.setManager(createMenuManager(((CrosstabCellAdapter)model).getPositionType(),context.getViewer()));
      return first;
    }
    return new CrosstabCellEditPart(model);
  }
  return null;
}","public EditPart createEditPart(EditPart context,Object model){
  if (context instanceof CrosstabCellEditPart) {
    if (model instanceof DataItemHandle) {
      CrosstabCellAdapter adapter=((CrosstabCellEditPart)context).getCrosstabCellAdapter();
      String position=adapter.getPositionType();
      if ((ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(position) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(position)) && adapter.getFirstDataItem() == model) {
        return new LevelHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_LEVEL_HANDLE.equals(position)) {
        return new LevelHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_MEASURE_HEADER.equals(position)) {
        return new MeasureHandleDataItemEditPart(model);
      }
 else       if (ICrosstabCellAdapterFactory.CELL_MEASURE_AGGREGATION.equals(position)) {
        return new MeasureAggregationEditPart(model);
      }
    }
  }
  if (model instanceof VirtualCrosstabCellAdapter) {
    return new VirtualCellEditPart(model);
  }
  if (model instanceof CrosstabCellAdapter) {
    if (ICrosstabCellAdapterFactory.CELL_FIRST_LEVEL_HANDLE.equals(((CrosstabCellAdapter)model).getPositionType()) || ICrosstabCellAdapterFactory.CELL_MEASURE.equals(((CrosstabCellAdapter)model).getPositionType())) {
      CrosstabFirstCellEditPart first=new CrosstabFirstCellEditPart(model);
      first.setManager(createMenuManager(((CrosstabCellAdapter)model).getPositionType(),context.getViewer()));
      return first;
    }
    return new CrosstabCellEditPart(model);
  }
  return null;
}",0.95168
75674,"private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(System.getProperty(""String_Node_Str"") + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}","private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(documentPath + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}",0.9900596421471172
75675,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9834805993084902
75676,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevel(null);
  sorter4.setAxisQualifierValue(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevel(null);
  sorter5.setAxisQualifierValue(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevel(null);
  sorter4.setAxisQualifierValue(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevel(null);
  sorter5.setAxisQualifierValue(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9889969293756398
75677,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
  engine.shutdown();
}",0.984938704028021
75678,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(System.getProperty(""String_Node_Str"") + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setCacheQueryResults(true);
  FileArchiveWriter writter=new FileArchiveWriter(documentPath + ""String_Node_Str"");
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_GENERATION,null,null,writter));
  this.createCube(writter,engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  writter.finish();
  engine.shutdown();
  FileArchiveReader reader=new FileArchiveReader(documentPath + ""String_Node_Str"");
  engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.MODE_PRESENTATION,null,reader,null));
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9845045045045046
75679,"/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!new File(dirName).exists()) {
      new File(dirName).mkdirs();
    }
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  objectFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  OatFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  OatFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  dataFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  dataFile.setLength(0);
}","/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!new File(dirName).exists()) {
      new File(dirName).mkdirs();
    }
    try {
      if (!file.createNewFile()) {
        throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
      }
    }
 catch (    IOException e) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,e,file.getAbsolutePath());
    }
  }
  objectFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  OatFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  OatFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  dataFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  dataFile.setLength(0);
}",0.9451416278235928
75680,"/** 
 * Moves down one segment from its current segment of the iterator.
 * @return
 * @throws IOException
 */
private boolean nextSegment() throws IOException {
  if (stopSign.isStopped()) {
    return false;
  }
  if (!traversalor.next()) {
    return false;
  }
  currentSubDim=traversalor.getIntArray();
  currentSegment=factTable.getDocumentManager().openDocumentObject(FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTable.getName()),getSubDimensionIndex()));
  for (int i=0; i < dimensionIndex.length; i++) {
    if (dimensionIndex[i] != -1) {
      SelectedSubDimension selectedSubDimension=((SelectedSubDimension)selectedSubDim[i].get(currentSubDim[i]));
      selectedPosOfCurSegment[i]=new int[selectedSubDimension.end - selectedSubDimension.start + 1];
      for (int j=0; j < selectedSubDimension.end - selectedSubDimension.start + 1; j++) {
        selectedPosOfCurSegment[i][j]=((Integer)selectedPos[dimensionIndex[i]].get(j)).intValue();
      }
    }
  }
  return true;
}","/** 
 * Moves down one segment from its current segment of the iterator.
 * @return
 * @throws IOException
 */
private boolean nextSegment() throws IOException {
  if (stopSign.isStopped()) {
    return false;
  }
  if (!traversalor.next()) {
    return false;
  }
  currentSubDim=traversalor.getIntArray();
  currentSegment=factTable.getDocumentManager().openDocumentObject(FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTable.getName()),getSubDimensionIndex()));
  for (int i=0; i < dimensionIndex.length; i++) {
    if (dimensionIndex[i] != -1) {
      SelectedSubDimension selectedSubDimension=((SelectedSubDimension)selectedSubDim[i].get(currentSubDim[i]));
      selectedPosOfCurSegment[i]=new int[selectedSubDimension.end - selectedSubDimension.start + 1];
      for (int j=0; j < selectedSubDimension.end - selectedSubDimension.start + 1; j++) {
        selectedPosOfCurSegment[i][j]=((Integer)selectedPos[dimensionIndex[i]].get(selectedSubDimension.start + j)).intValue();
      }
    }
  }
  return true;
}",0.986024096385542
75681,"/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? null : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean isRequired=engineParam.isRequired();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,isRequired,mustMatch,concealValue,group,null);
  return param;
}","/** 
 * Convert Scalar Parameter Definition
 * @param engineParam
 * @param group
 * @return
 */
private static ParameterDefinition convertScalarParameter(IScalarParameterDefn engineParam,ParameterGroupDefinition group){
  Object handle=engineParam.getHandle();
  ScalarParameterHandle scalarParamHandle=null;
  if (handle instanceof ScalarParameterHandle)   scalarParamHandle=(ScalarParameterHandle)handle;
  String name=engineParam.getName();
  long id=scalarParamHandle != null ? scalarParamHandle.getID() : 0L;
  String pattern=scalarParamHandle == null ? ""String_Node_Str"" : scalarParamHandle.getPattern();
  String displayFormat=engineParam.getDisplayFormat();
  String displayName=engineParam.getDisplayName();
  String helpText=engineParam.getHelpText();
  String promptText=engineParam.getPromptText();
  int dataType=engineParam.getDataType();
  String valueExpr=scalarParamHandle == null ? null : scalarParamHandle.getValueExpr();
  int controlType=engineParam.getControlType();
  boolean hidden=engineParam.isHidden();
  boolean allowNull=engineParam.allowNull();
  boolean allowBlank=engineParam.allowBlank();
  boolean isRequired=engineParam.isRequired();
  boolean mustMatch=scalarParamHandle == null ? false : scalarParamHandle.isMustMatch();
  boolean concealValue=engineParam.isValueConcealed();
  boolean distinct=scalarParamHandle == null ? false : scalarParamHandle.distinct();
  ParameterDefinition param=new ParameterDefinition(id,name,pattern,displayFormat,displayName,helpText,promptText,dataType,valueExpr,controlType,hidden,allowNull,allowBlank,isRequired,mustMatch,concealValue,distinct,group,null);
  return param;
}",0.9705882352941176
75682,"public ParameterDefinition(long id,String name,String pattern,String displayFormat,String displayName,String helpText,String promptText,int dataType,String valueExpr,int controlType,boolean hidden,boolean allowNull,boolean allowBlank,boolean isRequired,boolean mustMatch,boolean concealValue,ParameterGroupDefinition group,Collection selectionList){
  this.id=id;
  this.name=name;
  this.pattern=pattern;
  this.displayFormat=displayFormat;
  this.displayName=displayName;
  this.helpText=helpText;
  this.promptText=promptText;
  this.dataType=dataType;
  this.valueExpr=valueExpr;
  this.controlType=controlType;
  this.hidden=hidden;
  this.allowNull=allowNull;
  this.allowBlank=allowBlank;
  this.isRequired=isRequired;
  this.mustMatch=mustMatch;
  this.concealValue=concealValue;
  this.group=group;
  this.selectionList=selectionList;
}","public ParameterDefinition(long id,String name,String pattern,String displayFormat,String displayName,String helpText,String promptText,int dataType,String valueExpr,int controlType,boolean hidden,boolean allowNull,boolean allowBlank,boolean isRequired,boolean mustMatch,boolean concealValue,boolean distinct,ParameterGroupDefinition group,Collection selectionList){
  this.id=id;
  this.name=name;
  this.pattern=pattern;
  this.displayFormat=displayFormat;
  this.displayName=displayName;
  this.helpText=helpText;
  this.promptText=promptText;
  this.dataType=dataType;
  this.valueExpr=valueExpr;
  this.controlType=controlType;
  this.hidden=hidden;
  this.allowNull=allowNull;
  this.allowBlank=allowBlank;
  this.isRequired=isRequired;
  this.mustMatch=mustMatch;
  this.concealValue=concealValue;
  this.distinct=distinct;
  this.group=group;
  this.selectionList=selectionList;
}",0.9751875360646278
75683,"private void createCube(DataEngine engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}","private void createCube(DataEngine engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}",0.9935018050541516
75684,"private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(documentPath + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}","private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(documentPath + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}",0.9914115833516848
75685,"void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows();
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}","void createCube(DataEngine engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[6];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L1Col);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  allRow=dimensions[2].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM0_L4Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[3]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[3].getHierarchy();
  allRow=dimensions[3].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[4]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[4].getHierarchy();
  allRow=dimensions[4].getAllRows();
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable1.DIM1_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[5]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[5].getHierarchy();
  allRow=dimensions[5].getAllRows();
  TestFactTable1 factTable2=new TestFactTable1();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}",0.9961998592540464
75686,"/** 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube1() throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] colNames=new String[3];
  colNames[0]=""String_Node_Str"";
  colNames[1]=""String_Node_Str"";
  colNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  documentManager.flush();
}","/** 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube1() throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] colNames=new String[3];
  colNames[0]=""String_Node_Str"";
  colNames[1]=""String_Node_Str"";
  colNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  colNames=new String[1];
  colNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(colNames);
  iterator.setLevelMember(0,TestFactTable.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  documentManager.flush();
}",0.9924869967251012
75687,"private void createCube2() throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[2];
  String[] ColNames=new String[3];
  ColNames[0]=""String_Node_Str"";
  ColNames[1]=""String_Node_Str"";
  ColNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  ColNames=new String[1];
  ColNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  documentManager.flush();
}","private void createCube2() throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[2];
  String[] ColNames=new String[3];
  ColNames[0]=""String_Node_Str"";
  ColNames[1]=""String_Node_Str"";
  ColNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  ColNames=new String[1];
  ColNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  documentManager.flush();
}",0.990063694267516
75688,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}",0.9964282443447202
75689,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9960418146757332
75690,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.99619623524822
75691,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray);
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray);
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimesionResultSets,facttableRowIterator,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray);
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray);
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(dimesionResultSets,facttableRowIterator,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9972690988026048
75692,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,12);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,12);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9962853605105249
75693,"private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9968243628369026
75694,"private void testFactTableSaveAndLoad4(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad4(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(CubeUtility.getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.996631833491666
75695,"private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,3);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9962271452065397
75696,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator);
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].dimensionLength,3);
  assertEquals(factTable.getDimensionInfo()[1].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].dimensionLength,7);
  assertEquals(factTable.getDimensionInfo()[2].dimensionName,""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].dimensionLength,14);
  assertEquals(factTable.getMeasureInfo()[0].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].dataType,DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].measureName,""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].dataType,DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator);
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.99626400996264
75697,"/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  for (; start < levelList.size(); ) {
    DimLevel level=(DimLevel)levelList.get(start);
    Object value1=valueMap.get(level);
    Object value2=rs.getLevelKeyValue(rs.getLevelIndex(level))[0];
    int sortType=rs.getSortType(rs.getLevelIndex(level)) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * ((Comparable)value1).compareTo(value2) < 0 ? -1 : ((Comparable)value1).compareTo(value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}","/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  for (; start < levelList.size(); ) {
    DimLevel level=(DimLevel)levelList.get(start);
    Object value1=valueMap.get(level);
    Object value2=rs.getLevelKeyValue(rs.getLevelIndex(level))[rs.getLevelKeyColCount(rs.getLevelIndex(level)) - 1];
    int sortType=rs.getSortType(rs.getLevelIndex(level)) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * ((Comparable)value1).compareTo(value2) < 0 ? -1 : ((Comparable)value1).compareTo(value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}",0.98542600896861
75698,"/** 
 * @param name
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,StopSign stopSign) throws IOException, BirtException {
  if (stopSign == null) {
    stopSign=new StopSign();
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(dimensions,factTable,measureColumns,stopSign);
  cube.close();
  documentManager.flush();
}","/** 
 * @param name
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] keyColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,StopSign stopSign) throws IOException, BirtException {
  if (stopSign == null) {
    stopSign=new StopSign();
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(keyColumnNames,dimensions,factTable,measureColumns,stopSign);
  cube.close();
  documentManager.flush();
}",0.9634906500445236
75699,"/** 
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,StopSign stopSign) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTable=factTableConstructor.saveFactTable(name,iterator,tDimensions,measureColumnName,stopSign);
  documentObject.close();
  documentManager.flush();
}","/** 
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] keyColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,StopSign stopSign) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTable=factTableConstructor.saveFactTable(name,keyColumnNames,iterator,tDimensions,measureColumnName,stopSign);
  documentObject.close();
  documentManager.flush();
}",0.9613691931540342
75700,"/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  String[][] keyColumnNames=getKeyColNames(dimensions);
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,keyColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(dimensions[i].getAllRows()));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper helper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        String[] args=new String[2];
        args[0]=currentRow.toString();
        args[1]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    helper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].dataType,currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  helper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}","/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] keyColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,keyColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(dimensions[i].getAllRows()));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper helper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        String[] args=new String[2];
        args[0]=currentRow.toString();
        args[1]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    helper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].dataType,currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  helper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}",0.987037622510275
75701,"/** 
 * @return
 */
private Vector populateValueVector(AggrSortDefinition aggrSortDefinition){
  Set valueSet=new HashSet();
  if (aggrSortDefinition != null) {
    boolean aggrSortDirection=aggrSortDefinition.getDirection();
    if (aggrSortDirection)     aggrSortType=IDimensionSortDefn.SORT_ASC;
 else     aggrSortType=IDimensionSortDefn.SORT_DESC;
  }
  for (int i=0; i < this.rs.length(); i++) {
    try {
      this.rs.seek(i);
    }
 catch (    IOException e) {
    }
    valueSet.add(this.rs.getLevelKeyValue(levelIndex)[0]);
  }
  final int sortType=this.rs.getSortType(levelIndex);
  Object[] value=valueSet.toArray();
  Arrays.sort(value,new Comparator(){
    public int compare(    final Object arg0,    final Object arg1){
      if (sortType == IDimensionSortDefn.SORT_ASC || sortType == IDimensionSortDefn.SORT_UNDEFINED)       return ((Comparable)arg0).compareTo(arg1);
 else       return ((Comparable)arg0).compareTo(arg1) * -1;
    }
  }
);
  Vector v=new Vector();
  v.addAll(Arrays.asList(value));
  return v;
}","/** 
 * @return
 */
private Vector populateValueVector(AggrSortDefinition aggrSortDefinition){
  Set valueSet=new HashSet();
  if (aggrSortDefinition != null) {
    boolean aggrSortDirection=aggrSortDefinition.getDirection();
    if (aggrSortDirection)     aggrSortType=IDimensionSortDefn.SORT_ASC;
 else     aggrSortType=IDimensionSortDefn.SORT_DESC;
  }
  for (int i=0; i < this.rs.length(); i++) {
    try {
      this.rs.seek(i);
    }
 catch (    IOException e) {
    }
    valueSet.add(this.rs.getLevelKeyValue(levelIndex)[this.rs.getLevelKeyColCount(levelIndex) - 1]);
  }
  final int sortType=this.rs.getSortType(levelIndex);
  Object[] value=valueSet.toArray();
  Arrays.sort(value,new Comparator(){
    public int compare(    final Object arg0,    final Object arg1){
      if (sortType == IDimensionSortDefn.SORT_ASC || sortType == IDimensionSortDefn.SORT_UNDEFINED)       return ((Comparable)arg0).compareTo(arg1);
 else       return ((Comparable)arg0).compareTo(arg1) * -1;
    }
  }
);
  Vector v=new Vector();
  v.addAll(Arrays.asList(value));
  return v;
}",0.9790675547098002
75702,"/** 
 * Handle HTTP POST method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  StringBuilder builder=new StringBuilder();
  Iterator it=request.getParameterMap().keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    if (paramName != null && paramName.startsWith(""String_Node_Str"")) {
      String paramValue=ParameterAccessor.urlEncode(ParameterAccessor.getParameter(request,paramName),ParameterAccessor.UTF_8_ENCODE);
      builder.append(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramValue);
    }
  }
  String soapURL=request.getRequestURL().toString();
  if (request.getQueryString() != null) {
    soapURL+=""String_Node_Str"" + request.getQueryString() + builder.toString();
  }
 else {
    builder.deleteCharAt(0);
    soapURL+=""String_Node_Str"" + builder.toString();
  }
  request.setAttribute(""String_Node_Str"",soapURL);
  IContext context=null;
  try {
    context=__getContext(request,response);
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
    return;
  }
  try {
    __doPost(context);
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
      super.doPost(request,response);
    }
 else {
      doGet(request,response);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","/** 
 * Handle HTTP POST method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  StringBuffer builder=new StringBuffer();
  Iterator it=request.getParameterMap().keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    if (paramName != null && paramName.startsWith(""String_Node_Str"")) {
      String paramValue=ParameterAccessor.urlEncode(ParameterAccessor.getParameter(request,paramName),ParameterAccessor.UTF_8_ENCODE);
      builder.append(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramValue);
    }
  }
  String soapURL=request.getRequestURL().toString();
  if (request.getQueryString() != null) {
    soapURL+=""String_Node_Str"" + request.getQueryString() + builder.toString();
  }
 else {
    builder.deleteCharAt(0);
    soapURL+=""String_Node_Str"" + builder.toString();
  }
  request.setAttribute(""String_Node_Str"",soapURL);
  IContext context=null;
  try {
    context=__getContext(request,response);
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
    return;
  }
  try {
    __doPost(context);
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
      super.doPost(request,response);
    }
 else {
      doGet(request,response);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}",0.9970095693779903
75703,"/** 
 * Handle HTTP POST method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  IContext context=null;
  try {
    context=__getContext(request,response);
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
    return;
  }
  try {
    __doPost(context);
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
      super.doPost(request,response);
    }
 else {
      doGet(request,response);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}","/** 
 * Handle HTTP POST method.
 * @param request incoming http request
 * @param response http response
 * @exception ServletException
 * @exception IOException
 * @return
 */
public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  if (!__authenticate(request,response)) {
    return;
  }
  StringBuilder builder=new StringBuilder();
  Iterator it=request.getParameterMap().keySet().iterator();
  while (it.hasNext()) {
    String paramName=(String)it.next();
    if (paramName != null && paramName.startsWith(""String_Node_Str"")) {
      String paramValue=ParameterAccessor.urlEncode(ParameterAccessor.getParameter(request,paramName),ParameterAccessor.UTF_8_ENCODE);
      builder.append(""String_Node_Str"" + paramName + ""String_Node_Str""+ paramValue);
    }
  }
  String soapURL=request.getRequestURL().toString();
  if (request.getQueryString() != null) {
    soapURL+=""String_Node_Str"" + request.getQueryString() + builder.toString();
  }
 else {
    builder.deleteCharAt(0);
    soapURL+=""String_Node_Str"" + builder.toString();
  }
  request.setAttribute(""String_Node_Str"",soapURL);
  IContext context=null;
  try {
    context=__getContext(request,response);
  }
 catch (  BirtException e) {
    __handleNonSoapException(request,response,e);
    return;
  }
  try {
    __doPost(context);
    String requestType=request.getHeader(ParameterAccessor.HEADER_REQUEST_TYPE);
    if (ParameterAccessor.HEADER_REQUEST_TYPE_SOAP.equalsIgnoreCase(requestType)) {
      super.doPost(request,response);
    }
 else {
      doGet(request,response);
    }
  }
 catch (  BirtException e) {
    e.printStackTrace();
  }
}",0.687328364064339
75704,"/** 
 * @param expr
 * @param objectName
 * @return
 */
public static String getReferencedScriptObject(String expr,String objectName){
  Context cx=Context.enter();
  CompilerEnvirons ce=new CompilerEnvirons();
  Parser p=new Parser(ce,cx.getErrorReporter());
  ScriptOrFnNode tree=p.parse(expr,null,0);
  return getScriptObjectName(tree,objectName);
}","/** 
 * @param expr
 * @param objectName
 * @return
 */
public static String getReferencedScriptObject(String expr,String objectName){
  if (expr == null)   return null;
  Context cx=Context.enter();
  CompilerEnvirons ce=new CompilerEnvirons();
  Parser p=new Parser(ce,cx.getErrorReporter());
  ScriptOrFnNode tree=p.parse(expr,null,0);
  return getScriptObjectName(tree,objectName);
}",0.952638700947226
75705,"/** 
 * Utility method to acquire referable bindings, either in cube filter or cube sort.
 * @param targetLevel
 * @param bindings
 * @param isSort
 * @return
 * @throws AdapterException
 */
public abstract List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeQueryDefn,boolean isSort) throws AdapterException ;","/** 
 * Utility method to acquire referable bindings, either in cube filter or cube sort.
 * @param targetLevel
 * @param bindings
 * @param isSort
 * @return
 * @throws AdapterException
 */
public List getReferableBindings(String targetLevel,ICubeQueryDefinition cubeQueryDefn,boolean isSort) throws AdapterException ;",0.9860896445131376
75706,"/** 
 * Return a list of ILevelDefinition instances that referenced by 
 * @param targetLevel
 * @param bindingExpr
 * @param queryDefn
 * @return
 * @throws AdapterException
 */
public abstract List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException ;","/** 
 * Return a list of ILevelDefinition instances that referenced by 
 * @param targetLevel
 * @param bindingExpr
 * @param queryDefn
 * @return
 * @throws AdapterException
 */
public List getReferencedLevels(String targetLevel,String bindingExpr,ICubeQueryDefinition queryDefn) throws AdapterException ;",0.9855072463768116
75707,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      context.setAllowPageBreak(false);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.continueContent(null);
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IGroupContent group=(IGroupContent)content;
    IBandContent header=group.getHeader();
    if (group.isHeaderRepeat() && header != null) {
      boolean pageBreak=context.allowPageBreak();
      boolean isEmpty=context.isPageEmpty();
      context.setPageEmpty(true);
      context.setAllowPageBreak(false);
      engine.layout(this,header,emitter);
      context.setAllowPageBreak(pageBreak);
      context.setPageEmpty(isEmpty);
      context.continueContent(null);
    }
  }
  isFirstLayout=false;
}",0.8846918489065606
75708,"protected void repeatHeader(){
  if (!isFirstLayout) {
    IListContent list=(IListContent)content;
    if (list.isHeaderRepeat()) {
      IBandContent header=list.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        context.setAllowPageBreak(pageBreak);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.continueContent(null);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    IListContent list=(IListContent)content;
    if (list.isHeaderRepeat()) {
      IBandContent header=list.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean isEmpty=context.isPageEmpty();
        context.setPageEmpty(true);
        context.setAllowPageBreak(pageBreak);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setPageEmpty(isEmpty);
        context.continueContent(null);
      }
    }
  }
  isFirstLayout=false;
}",0.8859813084112149
75709,"protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        context.setAllowPageBreak(false);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.continueContent(null);
      }
    }
  }
  isFirstLayout=false;
}","protected void repeatHeader(){
  if (!isFirstLayout) {
    ITableContent table=(ITableContent)content;
    if (table.isHeaderRepeat()) {
      IBandContent header=table.getHeader();
      if (header != null) {
        boolean pageBreak=context.allowPageBreak();
        boolean isEmpty=context.isPageEmpty();
        context.setPageEmpty(true);
        context.setAllowPageBreak(false);
        engine.layout(this,header,emitter);
        context.setAllowPageBreak(pageBreak);
        context.setPageEmpty(isEmpty);
        context.continueContent(null);
      }
    }
  }
  isFirstLayout=false;
}",0.8861940298507462
75710,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  try {
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults queryResults=pcq.execute(null);
    queryResults.getCubeCursor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter4() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  try {
    this.createCube(engine);
    IPreparedCubeQuery pcq=engine.prepare(cqd,null);
    ICubeQueryResults queryResults=pcq.execute(null);
    queryResults.getCubeCursor();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9895995839833592
75711,"/** 
 * @return
 * @throws IOException
 * @throws DataException
 */
IDiskArray getResult() throws IOException, DataException {
  if (currentResultObj != null && accumulators != null) {
    currentResultObj.setAggregationValues(new Object[accumulators.length]);
    for (int i=0; i < accumulators.length; i++) {
      accumulators[i].finish();
      currentResultObj.getAggregationValues()[i]=accumulators[i].getValue();
      accumulators[i].start();
    }
  }
  if (currentResultObj != null)   result.add(currentResultObj);
 else   result.add(new AggregationResultRow());
  return this.result;
}","/** 
 * @return
 * @throws IOException
 * @throws DataException
 */
IDiskArray getResult() throws IOException, DataException {
  if (currentResultObj != null && accumulators != null) {
    currentResultObj.setAggregationValues(new Object[accumulators.length]);
    for (int i=0; i < accumulators.length; i++) {
      accumulators[i].finish();
      currentResultObj.getAggregationValues()[i]=accumulators[i].getValue();
      accumulators[i].start();
    }
  }
  if (currentResultObj != null)   result.add(currentResultObj);
  return this.result;
}",0.958041958041958
75712,"/** 
 * @param aggregation
 * @param aggregationResultRow
 * @param keyNames
 * @param attributeNames
 * @throws IOException
 */
public AggregationResultSet(AggregationDefinition aggregation,IDiskArray aggregationResultRow,String[][] keyNames,String[][] attributeNames) throws IOException {
  Object[] params={aggregation,aggregationResultRow,keyNames,attributeNames};
  logger.entering(AggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregation;
  this.aggregationResultRows=aggregationResultRow;
  produceaggregationNameMap();
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.resultObject=(IAggregationResultRow)aggregationResultRow.get(0);
  if (resultObject.getLevelMembers() != null) {
    keyDataTypes=new int[resultObject.getLevelMembers().length][];
    attributeDataTypes=new int[resultObject.getLevelMembers().length][];
    for (int i=0; i < resultObject.getLevelMembers().length; i++) {
      keyDataTypes[i]=new int[resultObject.getLevelMembers()[i].getKeyValues().length];
      for (int j=0; j < resultObject.getLevelMembers()[i].getKeyValues().length; j++) {
        keyDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getKeyValues()[j].getClass());
      }
      if (resultObject.getLevelMembers()[i].getAttributes() != null) {
        attributeDataTypes[i]=new int[resultObject.getLevelMembers()[i].getAttributes().length];
        for (int j=0; j < attributeDataTypes[i].length; j++) {
          if (resultObject.getLevelMembers()[i].getAttributes()[j] != null)           attributeDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getAttributes()[j].getClass());
        }
      }
    }
  }
  if (resultObject.getAggregationValues() != null) {
    aggregationDataType=new int[resultObject.getAggregationValues().length];
    for (int i=0; i < resultObject.getAggregationValues().length; i++) {
      aggregationDataType[i]=DataType.getDataType(resultObject.getAggregationValues()[i].getClass());
    }
  }
  logger.exiting(AggregationResultSet.class.getName(),""String_Node_Str"");
}","/** 
 * @param aggregation
 * @param aggregationResultRow
 * @param keyNames
 * @param attributeNames
 * @throws IOException
 */
public AggregationResultSet(AggregationDefinition aggregation,IDiskArray aggregationResultRow,String[][] keyNames,String[][] attributeNames) throws IOException {
  Object[] params={aggregation,aggregationResultRow,keyNames,attributeNames};
  logger.entering(AggregationResultSet.class.getName(),""String_Node_Str"",params);
  this.aggregation=aggregation;
  this.aggregationResultRows=aggregationResultRow;
  produceaggregationNameMap();
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  if (aggregationResultRow.size() == 0)   return;
  this.resultObject=(IAggregationResultRow)aggregationResultRow.get(0);
  if (resultObject.getLevelMembers() != null) {
    keyDataTypes=new int[resultObject.getLevelMembers().length][];
    attributeDataTypes=new int[resultObject.getLevelMembers().length][];
    for (int i=0; i < resultObject.getLevelMembers().length; i++) {
      keyDataTypes[i]=new int[resultObject.getLevelMembers()[i].getKeyValues().length];
      for (int j=0; j < resultObject.getLevelMembers()[i].getKeyValues().length; j++) {
        keyDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getKeyValues()[j].getClass());
      }
      if (resultObject.getLevelMembers()[i].getAttributes() != null) {
        attributeDataTypes[i]=new int[resultObject.getLevelMembers()[i].getAttributes().length];
        for (int j=0; j < attributeDataTypes[i].length; j++) {
          if (resultObject.getLevelMembers()[i].getAttributes()[j] != null)           attributeDataTypes[i][j]=DataType.getDataType(resultObject.getLevelMembers()[i].getAttributes()[j].getClass());
        }
      }
    }
  }
  if (resultObject.getAggregationValues() != null) {
    aggregationDataType=new int[resultObject.getAggregationValues().length];
    for (int i=0; i < resultObject.getAggregationValues().length; i++) {
      aggregationDataType[i]=DataType.getDataType(resultObject.getAggregationValues()[i].getClass());
    }
  }
  logger.exiting(AggregationResultSet.class.getName(),""String_Node_Str"");
}",0.9882408278457196
75713,"private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION).getChoices();
}","private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices().getChoices();
}",0.6303724928366762
75714,"public String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION));
}","public String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices());
}",0.7189542483660131
75715,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9741379310344828
75716,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter=new SortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.97462589459987
75717,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9753325272067714
75718,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.97099800966733
75719,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter=new SortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter=new CubeSortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  sorter.setTargetLevel(level21);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9723338850792148
75720,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.959378733572282
75721,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.959378733572282
75722,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9622501850481124
75723,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  sorter1.setTargetLevel(level21);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  sorter2.setTargetLevel(level11);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  sorter3.setTargetLevel(level12);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9693325315694528
75724,"private List getEdgeSort(int edgeType){
  List l=this.defn.getSorts();
  List result=new ArrayList();
  for (int i=0; i < l.size(); i++) {
    if (!(l.get(i) instanceof ICubeSortDefinition))     continue;
    ICubeSortDefinition sort=(ICubeSortDefinition)l.get(i);
    if (this.defn.getEdge(edgeType).getDimensions().contains(sort.getTargetLevel().getHierarchy().getDimension())) {
      result.add(sort);
    }
  }
  Collections.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      int level1=((ICubeSortDefinition)arg0).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg0).getTargetLevel());
      int level2=((ICubeSortDefinition)arg1).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg1).getTargetLevel());
      if (level1 == level2)       return 0;
 else       if (level1 < level2)       return -1;
 else       return 1;
    }
  }
);
  return result;
}","private List getEdgeSort(int edgeType){
  List l=this.defn.getSorts();
  List result=new ArrayList();
  for (int i=0; i < l.size(); i++) {
    ICubeSortDefinition sort=(ICubeSortDefinition)l.get(i);
    if (this.defn.getEdge(edgeType).getDimensions().contains(sort.getTargetLevel().getHierarchy().getDimension())) {
      result.add(sort);
    }
  }
  Collections.sort(result,new Comparator(){
    public int compare(    Object arg0,    Object arg1){
      int level1=((ICubeSortDefinition)arg0).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg0).getTargetLevel());
      int level2=((ICubeSortDefinition)arg1).getTargetLevel().getHierarchy().getLevels().indexOf(((ICubeSortDefinition)arg1).getTargetLevel());
      if (level1 == level2)       return 0;
 else       if (level1 < level2)       return -1;
 else       return 1;
    }
  }
);
  return result;
}",0.9640914036996736
75725,"/** 
 * @param cubeQueryDefinition
 * @param cubeQueryExcutorHelper
 * @throws DataException
 */
private void populateAggregationSort(CubeQueryExecutor executor,CubeQueryExecutorHelper cubeQueryExcutorHelper,boolean isRow) throws DataException {
  List columnSort=isRow ? executor.getRowEdgeSort() : executor.getColumnEdgeSort();
  for (int i=0; i < columnSort.size(); i++) {
    ICubeSortDefinition cubeSort=(ICubeSortDefinition)columnSort.get(i);
    String bindingName=OlapExpressionUtil.getBindingName(cubeSort.getExpression().getText());
    if (bindingName == null)     continue;
    List bindings=executor.getCubeQueryDefinition().getBindings();
    List aggrOns=null;
    for (int j=0; j < bindings.size(); j++) {
      IBinding binding=(IBinding)bindings.get(j);
      if (binding.getBindingName().equals(bindingName)) {
        aggrOns=binding.getAggregatOns();
        break;
      }
    }
    if (aggrOns == null)     throw new DataException(""String_Node_Str"");
    DimLevel[] aggrOnLevels=new DimLevel[aggrOns.size()];
    for (int j=0; j < aggrOnLevels.length; j++) {
      aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
    }
    DimLevel[] axisLevels=new DimLevel[cubeSort.getAxisQualifierLevel().length];
    for (int k=0; k < axisLevels.length; k++) {
      axisLevels[k]=new DimLevel(cubeSort.getAxisQualifierLevel()[k]);
    }
    AggrSortDefinition sort=new AggrSortDefinition(aggrOnLevels,bindingName,axisLevels,cubeSort.getAxisQualifierValue(),new DimLevel(cubeSort.getTargetLevel()),cubeSort.getSortDirection() == 1 ? false : true);
    if (isRow)     cubeQueryExcutorHelper.addRowSort(sort);
 else     cubeQueryExcutorHelper.addColumnSort(sort);
  }
}","/** 
 * @param cubeQueryDefinition
 * @param cubeQueryExcutorHelper
 * @throws DataException
 */
private void populateAggregationSort(CubeQueryExecutor executor,CubeQueryExecutorHelper cubeQueryExcutorHelper,boolean isRow) throws DataException {
  List columnSort=isRow ? executor.getRowEdgeSort() : executor.getColumnEdgeSort();
  for (int i=0; i < columnSort.size(); i++) {
    ICubeSortDefinition cubeSort=(ICubeSortDefinition)columnSort.get(i);
    String bindingName=OlapExpressionUtil.getBindingName(cubeSort.getExpression().getText());
    if (bindingName == null)     continue;
    List bindings=executor.getCubeQueryDefinition().getBindings();
    List aggrOns=null;
    for (int j=0; j < bindings.size(); j++) {
      IBinding binding=(IBinding)bindings.get(j);
      if (binding.getBindingName().equals(bindingName)) {
        aggrOns=binding.getAggregatOns();
        break;
      }
    }
    if (aggrOns == null || aggrOns.size() == 0)     return;
    DimLevel[] aggrOnLevels=new DimLevel[aggrOns.size()];
    for (int j=0; j < aggrOnLevels.length; j++) {
      aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
    }
    DimLevel[] axisLevels=new DimLevel[cubeSort.getAxisQualifierLevel().length];
    for (int k=0; k < axisLevels.length; k++) {
      axisLevels[k]=new DimLevel(cubeSort.getAxisQualifierLevel()[k]);
    }
    AggrSortDefinition sort=new AggrSortDefinition(aggrOnLevels,bindingName,axisLevels,cubeSort.getAxisQualifierValue(),new DimLevel(cubeSort.getTargetLevel()),cubeSort.getSortDirection() == 1 ? false : true);
    if (isRow)     cubeQueryExcutorHelper.addRowSort(sort);
 else     cubeQueryExcutorHelper.addColumnSort(sort);
  }
}",0.9756383915468154
75726,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOriginal
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOriginal,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    if (axisOriginal.getType().equals(IntersectionType.VALUE_LITERAL) && axisOriginal.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOriginal.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOriginal.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOriginal.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOriginal.getType().equals(IntersectionType.VALUE_LITERAL) && axisOriginal.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOriginal.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOriginal.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOriginal.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOriginal.getType().equals(IntersectionType.VALUE_LITERAL) && axisOriginal.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOriginal.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOriginal.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOriginal.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOrigin
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOrigin,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.995010477996208
75727,"/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData legendData=new LegendData();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  final Orientation orientation=lg.getOrientation();
  final Direction direction=lg.getDirection();
  final Position lgPosition=lg.getPosition();
  final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  Label la=LabelImpl.create();
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  ClientArea ca=lg.getClientArea();
  LineAttributes lia=ca.getOutline();
  legendData.dSeparatorThickness=lia.getThickness();
  la.getCaption().setValue(""String_Node_Str"");
  final ITextMetrics itm=xs.getTextMetrics(la);
  legendData.dItemHeight=itm.getFullHeight();
  la.getCaption().setValue(ELLIPSIS_STRING);
  itm.reuse(la);
  legendData.dEllipsisWidth=itm.getFullWidth();
  legendData.dScale=xs.getDpiResolution() / 72d;
  legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
  legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
  legendData.dHorizontalSpacing=3 * legendData.dScale;
  legendData.dVerticalSpacing=3 * legendData.dScale;
  legendData.dSafeSpacing=3 * legendData.dScale;
  legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
  legendData.dVerticalReservedSpace=legendData.insCa.getTop() + legendData.insCa.getBottom() + legendData.dVerticalSpacing;
  final Block bl=cm.getBlock();
  final Bounds boFull=bl.getBounds().scaledInstance(legendData.dScale);
  final Insets ins=bl.getInsets().scaledInstance(legendData.dScale);
  final Insets lgIns=lg.getInsets().scaledInstance(legendData.dScale);
  int titleWPos=0;
  int titleHPos=0;
  final TitleBlock titleBlock=cm.getTitle();
  final Bounds titleBounds=titleBlock.getBounds().scaledInstance(legendData.dScale);
  if (titleBlock.isVisible()) {
switch (titleBlock.getAnchor().getValue()) {
case Anchor.EAST:
case Anchor.WEST:
      titleWPos=1;
    break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
  titleHPos=1;
break;
}
}
legendData.dAvailableWidth=boFull.getWidth() - ins.getLeft() - ins.getRight()- lgIns.getLeft()- lgIns.getRight()- titleBounds.getWidth() * titleWPos;
legendData.dAvailableHeight=boFull.getHeight() - ins.getTop() - ins.getBottom()- lgIns.getTop()- lgIns.getBottom()- titleBounds.getHeight() * titleHPos;
double dMaxLegendWidth=boFull.getWidth() / 3;
double dMaxLegendHeight=boFull.getHeight() / 3;
switch (lgPosition.getValue()) {
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (legendData.dAvailableWidth > dMaxLegendWidth) {
legendData.dAvailableWidth=dMaxLegendWidth;
}
break;
case Position.ABOVE:
case Position.BELOW:
if (legendData.dAvailableHeight > dMaxLegendHeight) {
legendData.dAvailableHeight=dMaxLegendHeight;
}
break;
}
boolean bMinSliceDefined=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
calculateExtraLegend(cm,rtc,legendData);
}
Label lgTitle=lg.getTitle();
Size titleSize=null;
BoundingBox titleBounding=null;
int iTitlePos=-1;
if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
try {
titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
iTitlePos=lg.getTitlePosition().getValue();
if (rtc.isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
break;
case Position.LEFT:
case Position.RIGHT:
legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
itm.dispose();
if (rtc != null) {
List legendItems=legendData.legendItems;
LegendItemHints[] liha=(LegendItemHints[])legendItems.toArray(new LegendItemHints[legendItems.size()]);
if (liha.length > 1) {
boolean needInvert=false;
if (cm instanceof ChartWithAxes) {
needInvert=((ChartWithAxes)cm).isTransposed();
}
boolean isStack=true;
boolean hasOptionalGrouping=false;
exitStackCheck: for (int i=0; i < seda.length; i++) {
if (!hasOptionalGrouping && seda[i].getQuery() != null) {
String query=seda[i].getQuery().getDefinition();
if (query != null && query.trim().length() != 0) {
hasOptionalGrouping=true;
}
}
if (isStack) {
for (Iterator iter=seda[i].getSeries().iterator(); iter.hasNext(); ) {
Series series=(Series)iter.next();
if (!series.isStacked()) {
isStack=false;
if (hasOptionalGrouping) {
break exitStackCheck;
}
break;
}
}
}
}
if (!hasOptionalGrouping & isStack) {
needInvert=!needInvert;
}
if (needInvert) {
liha=invertLegendItems(liha);
}
}
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}","/** 
 * Computes the size of the legend. Note the computation relies on the title size, so the title block must be layouted first before this.
 * @param lg
 * @param sea
 * @throws GenerationException
 */
public final Size compute(IDisplayServer xs,Chart cm,SeriesDefinition[] seda,RunTimeContext rtc) throws ChartException {
  final Legend lg=cm.getLegend();
  LegendData legendData=new LegendData();
  if (!lg.isSetOrientation()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  if (!lg.isSetDirection()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
  }
  final Orientation orientation=lg.getOrientation();
  final Direction direction=lg.getDirection();
  final Position lgPosition=lg.getPosition();
  final boolean bPaletteByCategory=(lg.getItemType().getValue() == LegendItemType.CATEGORIES);
  Label la=LabelImpl.create();
  la.setCaption(TextImpl.copyInstance(lg.getText()));
  ClientArea ca=lg.getClientArea();
  LineAttributes lia=ca.getOutline();
  legendData.dSeparatorThickness=lia.getThickness();
  la.getCaption().setValue(""String_Node_Str"");
  final ITextMetrics itm=xs.getTextMetrics(la);
  legendData.dItemHeight=itm.getFullHeight();
  la.getCaption().setValue(ELLIPSIS_STRING);
  itm.reuse(la);
  legendData.dEllipsisWidth=itm.getFullWidth();
  legendData.dScale=xs.getDpiResolution() / 72d;
  legendData.insCa=ca.getInsets().scaledInstance(legendData.dScale);
  legendData.maxWrappingSize=lg.getWrappingSize() * legendData.dScale;
  legendData.dHorizontalSpacing=3 * legendData.dScale;
  legendData.dVerticalSpacing=3 * legendData.dScale;
  legendData.dSafeSpacing=3 * legendData.dScale;
  legendData.dHorizonalReservedSpace=legendData.insCa.getLeft() + legendData.insCa.getRight() + (3 * legendData.dItemHeight) / 2 + legendData.dHorizontalSpacing;
  legendData.dVerticalReservedSpace=legendData.insCa.getTop() + legendData.insCa.getBottom() + legendData.dVerticalSpacing;
  final Block bl=cm.getBlock();
  final Bounds boFull=bl.getBounds().scaledInstance(legendData.dScale);
  final Insets ins=bl.getInsets().scaledInstance(legendData.dScale);
  final Insets lgIns=lg.getInsets().scaledInstance(legendData.dScale);
  int titleWPos=0;
  int titleHPos=0;
  final TitleBlock titleBlock=cm.getTitle();
  final Bounds titleBounds=titleBlock.getBounds().scaledInstance(legendData.dScale);
  if (titleBlock.isVisible()) {
switch (titleBlock.getAnchor().getValue()) {
case Anchor.EAST:
case Anchor.WEST:
      titleWPos=1;
    break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
  titleHPos=1;
break;
}
}
legendData.dAvailableWidth=boFull.getWidth() - ins.getLeft() - ins.getRight()- lgIns.getLeft()- lgIns.getRight()- titleBounds.getWidth() * titleWPos;
legendData.dAvailableHeight=boFull.getHeight() - ins.getTop() - ins.getBottom()- lgIns.getTop()- lgIns.getBottom()- titleBounds.getHeight() * titleHPos;
double dMaxLegendWidth=boFull.getWidth() / 3;
double dMaxLegendHeight=boFull.getHeight() / 3;
switch (lgPosition.getValue()) {
case Position.LEFT:
case Position.RIGHT:
case Position.OUTSIDE:
if (legendData.dAvailableWidth > dMaxLegendWidth) {
legendData.dAvailableWidth=dMaxLegendWidth;
}
break;
case Position.ABOVE:
case Position.BELOW:
if (legendData.dAvailableHeight > dMaxLegendHeight) {
legendData.dAvailableHeight=dMaxLegendHeight;
}
break;
}
boolean bMinSliceDefined=false;
if (cm instanceof ChartWithoutAxes) {
bMinSliceDefined=((ChartWithoutAxes)cm).isSetMinSlice();
legendData.sMinSliceLabel=((ChartWithoutAxes)cm).getMinSliceLabel();
if (legendData.sMinSliceLabel == null || legendData.sMinSliceLabel.length() == 0) {
legendData.sMinSliceLabel=IConstants.UNDEFINED_STRING;
}
 else {
legendData.sMinSliceLabel=rtc.externalizedMessage(legendData.sMinSliceLabel);
}
}
if (bMinSliceDefined && bPaletteByCategory && cm instanceof ChartWithoutAxes) {
calculateExtraLegend(cm,rtc,legendData);
}
Label lgTitle=lg.getTitle();
Size titleSize=null;
BoundingBox titleBounding=null;
int iTitlePos=-1;
if (lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible()) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
try {
titleBounding=Methods.computeBox(xs,IConstants.ABOVE,lgTitle,0,0);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
}
iTitlePos=lg.getTitlePosition().getValue();
if (rtc.isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
legendData.dAvailableHeight-=titleBounding.getHeight() + 2 * shadowness;
break;
case Position.LEFT:
case Position.RIGHT:
legendData.dAvailableWidth-=titleBounding.getWidth() + 2 * shadowness;
break;
}
titleSize=SizeImpl.create(titleBounding.getWidth() + 2 * shadowness,titleBounding.getHeight() + 2 * shadowness);
}
double[] size=null;
if (orientation.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
size=computeVerticalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeVerticalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeVerticalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction.getName()},Messages.getResourceBundle(xs.getULocale()));
}
}
 else if (orientation.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
size=computeHorizalByCategory(xs,cm,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.TOP_BOTTOM) {
size=computeHorizalByTopBottomValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else if (direction.getValue() == Direction.LEFT_RIGHT) {
size=computeHorizalByLeftRightValue(xs,cm,seda,rtc,itm,la,legendData);
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{direction},Messages.getResourceBundle(xs.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{orientation},Messages.getResourceBundle(xs.getULocale()));
}
if (size == null) {
return SizeImpl.create(0,0);
}
double dWidth=size[0], dHeight=size[1];
if (iTitlePos != -1) {
double shadowness=3 * legendData.dScale;
switch (iTitlePos) {
case Position.ABOVE:
case Position.BELOW:
dHeight+=titleBounding.getHeight() + 2 * shadowness;
dWidth=Math.max(dWidth,titleBounding.getWidth() + 2 * shadowness);
break;
case Position.LEFT:
case Position.RIGHT:
dWidth+=titleBounding.getWidth() + 2 * shadowness;
dHeight=Math.max(dHeight,titleBounding.getHeight() + 2 * shadowness);
break;
}
}
itm.dispose();
if (rtc != null) {
List legendItems=legendData.legendItems;
LegendItemHints[] liha=(LegendItemHints[])legendItems.toArray(new LegendItemHints[legendItems.size()]);
if (liha.length > 1) {
boolean needInvert=false;
if (cm instanceof ChartWithAxes) {
needInvert=((ChartWithAxes)cm).isTransposed();
}
boolean isStack=true;
for (int i=0; i < seda.length; i++) {
if (isStack) {
for (Iterator iter=seda[i].getSeries().iterator(); iter.hasNext(); ) {
Series series=(Series)iter.next();
if (!series.isStacked()) {
isStack=false;
break;
}
}
}
}
if (isStack) {
needInvert=!needInvert;
}
if (needInvert) {
liha=invertLegendItems(liha);
}
}
LegendLayoutHints lilh=new LegendLayoutHints(SizeImpl.create(dWidth,dHeight),titleSize,legendData.bMinSliceApplied,legendData.sMinSliceLabel,liha);
rtc.setLegendLayoutHints(lilh);
}
sz=SizeImpl.create(dWidth,dHeight);
return sz;
}",0.9604644057439656
75728,"private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION).getChoices();
}","private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices().getChoices();
}",0.6303724928366762
75729,"public String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION));
}","public String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices());
}",0.7189542483660131
75730,"private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION).getChoices();
}","private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices().getChoices();
}",0.6303724928366762
75731,"public String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION));
}","public String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices());
}",0.7189542483660131
75732,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOriginal
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,DataElement axisOriginal,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    if (axisOriginal instanceof NumberDataElement) {
      double origin=asDouble(axisOriginal).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOriginal;
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOriginal;
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOriginal instanceof NumberDataElement) {
        double origin=asDouble(axisOriginal).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOriginal;
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOriginal;
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOriginal instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOriginal);
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOriginal;
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOriginal;
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOriginal
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,AxisOrigin axisOriginal,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    if (axisOriginal.getType().equals(IntersectionType.VALUE_LITERAL) && axisOriginal.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOriginal.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOriginal.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOriginal.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOriginal.getType().equals(IntersectionType.VALUE_LITERAL) && axisOriginal.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOriginal.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOriginal.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOriginal.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOriginal.getType().equals(IntersectionType.VALUE_LITERAL) && axisOriginal.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOriginal.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOriginal.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOriginal.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.9500101605364764
75733,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin().getValue(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,bo);
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,bo);
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.999192186237791
75734,"/** 
 * Get methods with specified comparator
 * @param classInfo
 * @param comp The comparator
 * @return List of methods
 */
public static List getMethods(IClassInfo classInfo,Comparator comp){
  List methods=new ArrayList(classInfo.getMethods());
  Collections.sort(methods,comp);
  return methods;
}","/** 
 * Get methods with specified comparator
 * @param classInfo
 * @param comp The comparator
 * @return List of methods
 */
public static List getMethods(IClassInfo classInfo,Comparator comp){
  List methods=classInfo.getMethods();
  Collections.sort(methods,comp);
  return methods;
}",0.8155668358714044
75735,"/** 
 * Get classes with specified comparator
 * @param comp the coparator
 * @return List of classes
 */
public static List getClasses(Comparator comp){
  List classes=new ArrayList(getMetaDataDictionary().getClasses());
  Collections.sort(classes,comp);
  classes.remove(TOTAL_CLASS);
  return classes;
}","/** 
 * Get classes with specified comparator
 * @param comp the coparator
 * @return List of classes
 */
public static List getClasses(Comparator comp){
  List classes=getMetaDataDictionary().getClasses();
  Collections.sort(classes,comp);
  return classes;
}",0.8692579505300353
75736,"private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION).getChoices();
}","private IChoice[] getFunctions(){
  return DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices().getChoices();
}",0.6303724928366762
75737,"private String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getChoiceSet(DesignChoiceConstants.CHOICE_MEASURE_FUNCTION));
}","private String getFunctionDisplayName(String name){
  return ChoiceSetFactory.getDisplayNameFromChoiceSet(name,DEUtil.getMetaDataDictionary().getElement(ReportDesignConstants.MEASURE_ELEMENT).getProperty(IMeasureModel.FUNCTION_PROP).getAllowedChoices());
}",0.720173535791757
75738,"public IContent execute(){
  if (executed) {
    return content;
  }
  context.setExecutingMasterPage(true);
  context.setPageNumber(pageNumber);
  executed=true;
  try {
    long pageNo=pageNumber;
    PageHintReader hintReader=manager.getPageHintReader();
    long totalPage=hintReader.getTotalPage();
    if (pageNumber > totalPage) {
      pageNo=totalPage;
    }
    IPageHint hint=hintReader.getPageHint(pageNo);
    pageOffset=hint.getOffset();
    CachedReportContentReaderV3 pageReader=manager.getPageReader();
    content=pageReader.loadContent(pageOffset);
    InstanceID iid=content.getInstanceID();
    long id=iid.getComponentID();
    masterPage=(SimpleMasterPageDesign)context.getReport().getReportItemByID(id);
    content.setGenerateBy(design);
    IPageContent pageContent=(IPageContent)content;
    pageContent.setPageNumber(pageNumber);
    return content;
  }
 catch (  IOException ex) {
    context.addException(new EngineException(ex.getLocalizedMessage(),ex));
  }
  return null;
}","public IContent execute(){
  if (executed) {
    return content;
  }
  context.setExecutingMasterPage(true);
  context.setPageNumber(pageNumber);
  executed=true;
  try {
    long pageNo=pageNumber;
    PageHintReader hintReader=manager.getPageHintReader();
    long totalPage=hintReader.getTotalPage();
    if (pageNumber > totalPage) {
      pageNo=totalPage;
    }
    IPageHint hint=hintReader.getPageHint(pageNo);
    pageOffset=hint.getOffset();
    CachedReportContentReaderV3 pageReader=manager.getPageReader();
    content=pageReader.loadContent(pageOffset);
    InstanceID iid=content.getInstanceID();
    long id=iid.getComponentID();
    masterPage=(SimpleMasterPageDesign)context.getReport().getReportItemByID(id);
    content.setGenerateBy(masterPage);
    IPageContent pageContent=(IPageContent)content;
    pageContent.setPageNumber(pageNumber);
    return content;
  }
 catch (  IOException ex) {
    context.addException(new EngineException(ex.getLocalizedMessage(),ex));
  }
  return null;
}",0.992063492063492
75739,"public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  iv.modifyEvent(pre);
  final Fill flBackground=validateMultipleFill(pre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Location[] loa=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(loa);
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    final double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMinX,dMinY);
    }
 else     if (dAngleInDegrees == -90) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMinX,dMaxY);
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMaxX,dMaxY - (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY + (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY);
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(new Polygon(i2a[0],i2a[1],loa.length));
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    final Size szImage=_ids.getSize(img);
    final int iXRepeat=(int)(Math.ceil((dMaxX - dMinX) / szImage.getWidth()));
    final int iYRepeat=(int)(Math.ceil((dMaxY - dMinY) / szImage.getHeight()));
    final ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(dMinX + i * szImage.getWidth()),(int)(dMinY + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  iv.modifyEvent(pre);
  final Fill flBackground=validateMultipleFill(pre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Location[] loa=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(loa);
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    final double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMinX,dMinY);
    }
 else     if (dAngleInDegrees == -90) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMinX,dMaxY);
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMaxX,dMaxY - (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY + (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY);
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(new Polygon(i2a[0],i2a[1],loa.length));
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    final Size szImage=_ids.getSize(img);
    final int iXRepeat=(int)(Math.ceil((dMaxX - dMinX) / szImage.getWidth()));
    final int iYRepeat=(int)(Math.ceil((dMaxY - dMinY) / szImage.getHeight()));
    final ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(dMinX + i * szImage.getWidth()),(int)(dMinY + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}",0.9779797273680532
75740,"protected Object3D getObjectFromEvent(Object event){
  if (event instanceof WrappedInstruction) {
    event=((WrappedInstruction)event).getEvent();
  }
  if (event instanceof I3DRenderEvent) {
    try {
      if (event instanceof Area3DRenderEvent) {
        return ((I3DRenderEvent)((Area3DRenderEvent)event).getElement(0)).getObject3D();
      }
 else {
        return ((I3DRenderEvent)event).getObject3D();
      }
    }
 catch (    ChartException ex) {
      throw new RuntimeException(ex);
    }
  }
 else {
    throw new IllegalArgumentException();
  }
}","protected Object3D getObjectFromEvent(Object event){
  if (event instanceof WrappedInstruction) {
    event=((WrappedInstruction)event).getEvent();
  }
  if (event instanceof I3DRenderEvent) {
    if (event instanceof Area3DRenderEvent) {
      return ((I3DRenderEvent)((Area3DRenderEvent)event).getElement(0)).getObject3D();
    }
 else {
      return ((I3DRenderEvent)event).getObject3D();
    }
  }
 else {
    throw new IllegalArgumentException();
  }
}",0.8790560471976401
75741,"private boolean translate3DEvent(Object obj,Matrix transMatrix,double xOffset,double yOffset){
  if (obj instanceof Polygon3DRenderEvent) {
    Polygon3DRenderEvent p3dre=(Polygon3DRenderEvent)obj;
    Object3D object3D=p3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    boolean behind=checkBehindFace(p3dre);
    p3dre.setBehind(behind);
    if (p3dre.isBehind()) {
      return false;
    }
    double cosValue=object3D.getNormal().cosineValue(LDR);
    if (p3dre.isDoubleSided()) {
      cosValue=-Math.abs(cosValue);
    }
    double brightnessRatio=(1 - cosValue) / 2d;
    p3dre.setBrightness(brightnessRatio);
    object3D.clip(this);
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    p3dre.prepare2D(xOffset,yOffset);
    return true;
  }
 else   if (obj instanceof Line3DRenderEvent) {
    Line3DRenderEvent l3dre=(Line3DRenderEvent)obj;
    if (l3dre.getLineAttributes() == null || !l3dre.getLineAttributes().isSetVisible() || !l3dre.getLineAttributes().isVisible()) {
      return false;
    }
    Object3D object3D=l3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 2) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    l3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Text3DRenderEvent) {
    Text3DRenderEvent t3dre=(Text3DRenderEvent)obj;
    Object3D object3D=t3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    t3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Oval3DRenderEvent) {
    Oval3DRenderEvent o3dre=(Oval3DRenderEvent)obj;
    Object3D object3D=o3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    o3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Image3DRenderEvent) {
    Image3DRenderEvent i3dre=(Image3DRenderEvent)obj;
    Object3D object3D=i3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    i3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Arc3DRenderEvent) {
    Arc3DRenderEvent a3dre=(Arc3DRenderEvent)obj;
    Object3D object3D=a3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    a3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Area3DRenderEvent) {
    Area3DRenderEvent a3dre=(Area3DRenderEvent)obj;
    for (Iterator itr=a3dre.iterator(); itr.hasNext(); ) {
      PrimitiveRenderEvent pre=(PrimitiveRenderEvent)itr.next();
      if (pre instanceof I3DRenderEvent) {
        try {
          Object3D object3D=((I3DRenderEvent)pre).getObject3D();
          object3D.transform(transMatrix);
          object3D.transform(M2V_MATRIX);
          object3D.prepareZSort();
          object3D.clip(this);
          if (object3D.getVectors().length < 1) {
            itr.remove();
            continue;
          }
          object3D.perspective(PERSPECTIVE_VALUE);
          object3D.transform(V2C_MATRIX);
        }
 catch (        ChartException ex) {
          logger.log(ex);
          continue;
        }
      }
    }
    a3dre.prepare2D(xOffset,yOffset);
  }
  return true;
}","private boolean translate3DEvent(Object obj,Matrix transMatrix,double xOffset,double yOffset){
  if (obj instanceof Polygon3DRenderEvent) {
    Polygon3DRenderEvent p3dre=(Polygon3DRenderEvent)obj;
    Object3D object3D=p3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    boolean behind=checkBehindFace(p3dre);
    p3dre.setBehind(behind);
    if (p3dre.isBehind()) {
      return false;
    }
    double cosValue=object3D.getNormal().cosineValue(LDR);
    if (p3dre.isDoubleSided()) {
      cosValue=-Math.abs(cosValue);
    }
    double brightnessRatio=(1 - cosValue) / 2d;
    p3dre.setBrightness(brightnessRatio);
    object3D.clip(this);
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    p3dre.prepare2D(xOffset,yOffset);
    return true;
  }
 else   if (obj instanceof Line3DRenderEvent) {
    Line3DRenderEvent l3dre=(Line3DRenderEvent)obj;
    if (l3dre.getLineAttributes() == null || !l3dre.getLineAttributes().isSetVisible() || !l3dre.getLineAttributes().isVisible()) {
      return false;
    }
    Object3D object3D=l3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 2) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    l3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Text3DRenderEvent) {
    Text3DRenderEvent t3dre=(Text3DRenderEvent)obj;
    Object3D object3D=t3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    t3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Oval3DRenderEvent) {
    Oval3DRenderEvent o3dre=(Oval3DRenderEvent)obj;
    Object3D object3D=o3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 3) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    o3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Image3DRenderEvent) {
    Image3DRenderEvent i3dre=(Image3DRenderEvent)obj;
    Object3D object3D=i3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    i3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Arc3DRenderEvent) {
    Arc3DRenderEvent a3dre=(Arc3DRenderEvent)obj;
    Object3D object3D=a3dre.getObject3D();
    object3D.transform(transMatrix);
    object3D.transform(M2V_MATRIX);
    object3D.prepareZSort();
    object3D.clip(this);
    if (object3D.getVectors().length < 1) {
      return false;
    }
    object3D.perspective(PERSPECTIVE_VALUE);
    object3D.transform(V2C_MATRIX);
    a3dre.prepare2D(xOffset,yOffset);
  }
 else   if (obj instanceof Area3DRenderEvent) {
    Area3DRenderEvent a3dre=(Area3DRenderEvent)obj;
    for (Iterator itr=a3dre.iterator(); itr.hasNext(); ) {
      PrimitiveRenderEvent pre=(PrimitiveRenderEvent)itr.next();
      if (pre instanceof I3DRenderEvent) {
        Object3D object3D=((I3DRenderEvent)pre).getObject3D();
        object3D.transform(transMatrix);
        object3D.transform(M2V_MATRIX);
        object3D.prepareZSort();
        object3D.clip(this);
        if (object3D.getVectors().length < 1) {
          itr.remove();
          continue;
        }
        object3D.perspective(PERSPECTIVE_VALUE);
        object3D.transform(V2C_MATRIX);
      }
    }
    a3dre.prepare2D(xOffset,yOffset);
  }
  return true;
}",0.9834779507904432
75742,"/** 
 * Returns if current object is totally aside the given object. ""outside"" is along the direction of the viewer vector.
 */
protected boolean testAside(Object3D comparedObj,boolean outside,Engine3D engine){
  int thisPointsNumber=viewVa.length;
  int comparedPointsNumber=comparedObj.getViewerVectors().length;
  Vector[] thisPoints=viewVa;
  Vector[] comparedPoints=comparedObj.getViewerVectors();
  if (thisPointsNumber == 0 || comparedPointsNumber == 0) {
    return true;
  }
  if (thisPointsNumber < 3 && comparedPointsNumber < 3) {
    return true;
  }
  Vector normal=null;
  Vector ov=viewVa[0];
  double d=0;
  if (thisPointsNumber < 3 || comparedPointsNumber < 3) {
    return true;
  }
 else {
    normal=new Vector(getNormal());
    d=-normal.scalarProduct(ov);
    return testPolygon(normal,d,comparedObj,outside);
  }
}","/** 
 * Returns if current object is totally aside the given object. ""outside"" is along the direction of the viewer vector.
 */
protected boolean testAside(Object3D comparedObj,boolean outside,Engine3D engine){
  int thisPointsNumber=viewVa.length;
  int comparedPointsNumber=comparedObj.getViewerVectors().length;
  if (thisPointsNumber == 0 || comparedPointsNumber == 0) {
    return true;
  }
  if (thisPointsNumber < 3 && comparedPointsNumber < 3) {
    return true;
  }
  Vector normal=null;
  Vector ov=viewVa[0];
  double d=0;
  if (thisPointsNumber < 3 || comparedPointsNumber < 3) {
    return true;
  }
 else {
    normal=new Vector(getNormal());
    d=-normal.scalarProduct(ov);
    return testPolygon(normal,d,comparedObj,outside);
  }
}",0.9445145018915512
75743,"private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new org.eclipse.birt.data.engine.olap.api.cube.CubeMaterializer(System.getProperty(""String_Node_Str"") + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}","private void createCube(IDocArchiveWriter writter,DataEngine engine) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new CubeMaterializer(System.getProperty(""String_Node_Str"") + engine.hashCode(),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}",0.9906420021762784
75744,"/** 
 * create cube query definition for aggregation filtering.
 * @return
 * @throws DataException
 */
private void createCube1QueryDefn() throws DataException {
  cubeQuery=CubeElementFactory.createCubeQuery(""String_Node_Str"");
  IEdgeDefinition rowEdge=cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dimension1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dimension1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IBinding bindin11=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin11);
  IBinding bindin12=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin12);
  IBinding bindin13=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin13);
  IDimensionDefinition dimension2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dimension2.createHierarchy(""String_Node_Str"");
  level21=hier2.createLevel(""String_Node_Str"");
  IBinding bindin21=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin21);
  IDimensionDefinition dimension3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dimension3.createHierarchy(""String_Node_Str"");
  level31=hier3.createLevel(""String_Node_Str"");
  IBinding bindin31=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin31);
  IBinding measure1=new Binding(""String_Node_Str"");
  measure1.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(measure1);
  IBinding measure2=new Binding(""String_Node_Str"");
  measure2.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(measure2);
}","/** 
 * create cube query definition for aggregation filtering.
 * @return
 * @throws DataException
 */
private void createCube1QueryDefn() throws DataException {
  cubeQuery=new CubeElementFactory().createCubeQuery(""String_Node_Str"");
  IEdgeDefinition rowEdge=cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition dimension1=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dimension1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IBinding bindin11=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin11);
  IBinding bindin12=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin12);
  IBinding bindin13=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin13);
  IDimensionDefinition dimension2=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dimension2.createHierarchy(""String_Node_Str"");
  level21=hier2.createLevel(""String_Node_Str"");
  IBinding bindin21=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin21);
  IDimensionDefinition dimension3=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier3=dimension3.createHierarchy(""String_Node_Str"");
  level31=hier3.createLevel(""String_Node_Str"");
  IBinding bindin31=new Binding(""String_Node_Str"");
  bindin11.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(bindin31);
  IBinding measure1=new Binding(""String_Node_Str"");
  measure1.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(measure1);
  IBinding measure2=new Binding(""String_Node_Str"");
  measure2.setExpression(new ScriptExpression(""String_Node_Str""));
  cubeQuery.addBinding(measure2);
}",0.9986065954482118
75745,"private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}","private void testFactTableSaveAndLoad5(CubeMaterializer cubeMaterializer) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new CubeElementFactory().createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  IHierarchy hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[0]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=CubeElementFactory.createLevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[1]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  hierarchy=cubeMaterializer.createHierarchy(""String_Node_Str"",""String_Node_Str"",iterator,levelDefs);
  dimensions[2]=(Dimension)cubeMaterializer.createDimension(""String_Node_Str"",hierarchy);
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  cubeMaterializer.createCube(""String_Node_Str"",dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",cubeMaterializer.getDocumentManager(),new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  cubeQueryExcutorHelper.addFilter(new LevelFilter(dimLevel21,filter[0]));
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
}",0.9985274869109948
75746,"private ICubeQueryDefinition createCubeQueryDefinition(){
  ICubeQueryDefinition cubeQuery=CubeElementFactory.createCubeQuery(""String_Node_Str"");
  IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dimension1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dimension1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  return cubeQuery;
}","private ICubeQueryDefinition createCubeQueryDefinition(){
  ICubeQueryDefinition cubeQuery=new CubeElementFactory().createCubeQuery(""String_Node_Str"");
  IEdgeDefinition columnEdge=cubeQuery.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  cubeQuery.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dimension1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dimension1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  return cubeQuery;
}",0.9940828402366864
75747,"/** 
 * Gets the width of the specified word.
 * @param word the word
 * @return the points of the width
 */
public float getWordWidth(String word){
  if (bf == null)   return 0;
  return bf.getWidthPoint(word,fontSize);
}","/** 
 * Gets the width of the specified word.
 * @param word the word
 * @return the points of the width
 */
public float getWordWidth(String word){
  if (bf == null || word == null)   return 0;
  return bf.getWidthPoint(word,fontSize);
}",0.9652173913043478
75748,"public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getCubeMeasureName());
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}","public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getIndex());
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}",0.9721448467966574
75749,"/** 
 * @return
 */
int getVersion(){
  int version=this.getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return version;
}","/** 
 * @return
 */
int getVersion(){
  int version=this.getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
    is.close();
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return version;
}",0.9850187265917604
75750,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOriginal
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,DataElement axisOriginal,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    if (axisOriginal instanceof NumberDataElement) {
      sc.oOriginal=new Double(((NumberDataElement)axisOriginal).getValue());
    }
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    if (axisOriginal instanceof NumberDataElement) {
      sc.oOriginal=new Double(((NumberDataElement)axisOriginal).getValue());
    }
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (axisOriginal instanceof DateTimeDataElement) {
      sc.oOriginal=((DateTimeDataElement)axisOriginal).getValueAsCDateTime();
    }
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (sc.oOriginal != null) {
      if (sc.bMaximumFixed && sc.bMinimumFixed) {
        if (((CDateTime)sc.oMinimum).after(sc.oOriginal) && ((CDateTime)sc.oMaximum).after(sc.oOriginal)) {
          sc.oMinimum=sc.oOriginal;
        }
        if (((CDateTime)sc.oMinimum).before(sc.oOriginal) && ((CDateTime)sc.oMaximum).before(sc.oOriginal)) {
          sc.oMaximum=sc.oOriginal;
        }
      }
 else       if (sc.bMaximumFixed) {
        if (((CDateTime)sc.oMaximum).before(sc.oOriginal)) {
          sc.oMaximum=sc.oOriginal;
        }
      }
 else       if (sc.bMinimumFixed) {
        if (((CDateTime)sc.oMinimum).after(sc.oOriginal)) {
          sc.oMinimum=sc.oOriginal;
        }
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOriginal
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,DataElement axisOriginal,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    if (axisOriginal instanceof NumberDataElement) {
      double origin=asDouble(axisOriginal).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOriginal;
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOriginal;
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOriginal instanceof NumberDataElement) {
        double origin=asDouble(axisOriginal).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOriginal;
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOriginal;
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOriginal instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOriginal);
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOriginal;
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOriginal;
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.8952935765751955
75751,"/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      oStep=new Double(10);
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    final double dMinValue=asDouble(oMinValue).doubleValue();
    final double dMaxValue=asDouble(oMaxValue).doubleValue();
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    final double dStep=asDouble(oStep).doubleValue();
    final double dStepLog=Math.log(dStep);
    int iPow=(int)Math.floor(Math.log(dAbsMax) / dStepLog) + 1;
    double dMaxAxis=Math.pow(dStep,iPow);
    iPow=(int)Math.floor(Math.log(dAbsMin) / dStepLog) - 1;
    double dMinAxis=Math.pow(dStep,iPow + 1);
    if (!bMaximumFixed) {
      oMaximum=new Double(dMaxAxis);
    }
    if (!bMinimumFixed) {
      oMinimum=new Double(dMinAxis);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    int iStep=asInteger(oStep);
    CDateTime cdtMinValue=asDateTime(oMinValue);
    CDateTime cdtMaxValue=asDateTime(oMaxValue);
    if (!bMinimumFixed) {
      oMinimum=cdtMinValue.backward(iUnit,iStep);
    }
    ((CDateTime)oMinimum).clearBelow(iUnit);
    if (!bMaximumFixed) {
      oMaximum=cdtMaxValue.forward(iUnit,iStep);
    }
    ((CDateTime)oMaximum).clearBelow(iUnit);
  }
 else {
    ScaleContext sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
    sct.setFixedStep(bStepFixed,oStepNumber);
    sct.computeMinMax();
    updateContext(sct);
  }
}","/** 
 * Computes min, max value, step size and step number of the Axis
 * @param oMinValue min value in data points. Double or CDateTime type.
 * @param oMaxValue max value in data points. Double or CDateTime type.
 */
public final void updateAxisMinMax(Object oMinValue,Object oMaxValue){
  if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    if ((iType & PERCENT) == PERCENT) {
      oMaximum=new Double(100);
      oMinimum=new Double(1);
      oStep=new Double(10);
      bMaximumFixed=true;
      bMinimumFixed=true;
      bStepFixed=true;
      return;
    }
    double dMinValue=asDouble(oMinValue).doubleValue();
    double dMaxValue=asDouble(oMaxValue).doubleValue();
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    final double dStep=asDouble(oStep).doubleValue();
    final double dStepLog=Math.log(dStep);
    int iPow=(int)Math.floor(Math.log(dAbsMax) / dStepLog) + 1;
    double dMaxAxis=Math.pow(dStep,iPow);
    iPow=(int)Math.floor(Math.log(dAbsMin) / dStepLog) - 1;
    double dMinAxis=Math.pow(dStep,iPow + 1);
    if (!bMaximumFixed) {
      oMaximum=new Double(dMaxAxis);
    }
    if (!bMinimumFixed) {
      oMinimum=new Double(dMinAxis);
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    int iUnit=asInteger(oUnit);
    int iStep=asInteger(oStep);
    CDateTime cdtMinValue=asDateTime(oMinValue);
    CDateTime cdtMaxValue=asDateTime(oMaxValue);
    if (!bMinimumFixed) {
      oMinimum=cdtMinValue.backward(iUnit,iStep);
    }
    ((CDateTime)oMinimum).clearBelow(iUnit);
    if (!bMaximumFixed) {
      oMaximum=cdtMaxValue.forward(iUnit,iStep);
    }
    ((CDateTime)oMaximum).clearBelow(iUnit);
  }
 else {
    ScaleContext sct=new ScaleContext(iMarginPercent,iType,oMinValue,oMaxValue,oStep);
    sct.setFixedValue(bMinimumFixed,bMaximumFixed,oMinimum,oMaximum);
    sct.setFixedStep(bStepFixed,oStepNumber);
    sct.computeMinMax();
    updateContext(sct);
  }
}",0.9969293756397134
75752,"/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  double min, max;
  min=max=0;
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      min=((NumberDataElement)oMinimum).getValue();
      sc.oMinimum=new Double(min);
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMinimumFixed=true;
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      max=((NumberDataElement)oMaximum).getValue();
      sc.oMaximum=new Double(max);
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMaximumFixed=true;
  }
  if (sc.bMaximumFixed && sc.bMinimumFixed) {
    if (((Double)sc.oMinimum).doubleValue() > ((Double)sc.oMaximum).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  if (sc.oOriginal != null) {
    double original=((Double)sc.oOriginal).doubleValue();
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (original < min && original < max) {
        sc.oMinimum=sc.oOriginal;
      }
      if (original > min && original > max) {
        sc.oMaximum=sc.oOriginal;
      }
    }
 else     if (sc.bMaximumFixed) {
      if (original > max) {
        sc.oMaximum=sc.oOriginal;
      }
    }
 else     if (sc.bMinimumFixed) {
      if (original < min) {
        sc.oMinimum=sc.oOriginal;
      }
    }
  }
}","/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      sc.oMinimum=new Double(((NumberDataElement)oMinimum).getValue());
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMinimumFixed=true;
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      sc.oMaximum=new Double(((NumberDataElement)oMaximum).getValue());
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMaximumFixed=true;
  }
  if (sc.bMaximumFixed && sc.bMinimumFixed) {
    if (((Double)sc.oMinimum).doubleValue() > ((Double)sc.oMaximum).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}",0.7926689576174112
75753,"/** 
 * Get methods with specified comparator
 * @param classInfo
 * @param comp The comparator
 * @return List of methods
 */
public static List getMethods(IClassInfo classInfo,Comparator comp){
  List methods=classInfo.getMethods();
  Collections.sort(methods,comp);
  return methods;
}","/** 
 * Get methods with specified comparator
 * @param classInfo
 * @param comp The comparator
 * @return List of methods
 */
public static List getMethods(IClassInfo classInfo,Comparator comp){
  List methods=new ArrayList(classInfo.getMethods());
  Collections.sort(methods,comp);
  return methods;
}",0.8629441624365483
75754,"/** 
 * Get classes with specified comparator
 * @param comp the coparator
 * @return List of classes
 */
public static List getClasses(Comparator comp){
  List classes=getMetaDataDictionary().getClasses();
  Collections.sort(classes,comp);
  return classes;
}","/** 
 * Get classes with specified comparator
 * @param comp the coparator
 * @return List of classes
 */
public static List getClasses(Comparator comp){
  List classes=new ArrayList(getMetaDataDictionary().getClasses());
  Collections.sort(classes,comp);
  classes.remove(TOTAL_CLASS);
  return classes;
}",0.9187279151943464
75755,"private void createObjects(TreeItem topItem,String objectType){
  for (Iterator itor=DEUtil.getMetaDataDictionary().getClasses().iterator(); itor.hasNext(); ) {
    IClassInfo classInfo=(IClassInfo)itor.next();
    if (classInfo.isNative() && OBJECTS_TYPE_BIRT.equals(objectType) || !classInfo.isNative() && OBJECTS_TYPE_NATIVE.equals(objectType)) {
      continue;
    }
    TreeItem subItem=createSubFolderItem(topItem,classInfo);
    Image globalImage=null;
    if (isGlobal(classInfo.getName())) {
      globalImage=IMAGE_GOLBAL;
    }
    for (Iterator iterator=classInfo.getMembers().iterator(); iterator.hasNext(); ) {
      IMemberInfo memberInfo=(IMemberInfo)iterator.next();
      Image image=globalImage;
      if (image == null) {
        if (memberInfo.isStatic()) {
          image=IMAGE_STATIC_MEMBER;
        }
 else {
          image=IMAGE_MEMBER;
        }
      }
      createSubTreeItem(subItem,memberInfo.getDisplayName(),image,getMemberTextData(classInfo.getName(),memberInfo),memberInfo.getToolTip(),true);
    }
    List methodList=new ArrayList();
    methodList.add(classInfo.getConstructor());
    methodList.addAll(classInfo.getMethods());
    for (Iterator iterator=methodList.iterator(); iterator.hasNext(); ) {
      IMethodInfo methodInfo=(IMethodInfo)iterator.next();
      if (methodInfo == null) {
        continue;
      }
      Image image=globalImage;
      if (image == null) {
        if (methodInfo.isStatic()) {
          image=IMAGE_STATIC_METHOD;
        }
 else {
          image=IMAGE_METHOD;
        }
      }
      List displayList=getMethodArgumentsList(classInfo.getName(),methodInfo);
      for (int i=0; i < displayList.size(); i++) {
        String[] array=(String[])displayList.get(i);
        createSubTreeItem(subItem,array[0],image,array[1],methodInfo.getToolTip(),true);
      }
    }
  }
}","private void createObjects(TreeItem topItem,String objectType){
  for (Iterator itor=DEUtil.getClasses().iterator(); itor.hasNext(); ) {
    IClassInfo classInfo=(IClassInfo)itor.next();
    if (classInfo.isNative() && OBJECTS_TYPE_BIRT.equals(objectType) || !classInfo.isNative() && OBJECTS_TYPE_NATIVE.equals(objectType)) {
      continue;
    }
    TreeItem subItem=createSubFolderItem(topItem,classInfo);
    Image globalImage=null;
    if (isGlobal(classInfo.getName())) {
      globalImage=IMAGE_GOLBAL;
    }
    for (Iterator iterator=classInfo.getMembers().iterator(); iterator.hasNext(); ) {
      IMemberInfo memberInfo=(IMemberInfo)iterator.next();
      Image image=globalImage;
      if (image == null) {
        if (memberInfo.isStatic()) {
          image=IMAGE_STATIC_MEMBER;
        }
 else {
          image=IMAGE_MEMBER;
        }
      }
      createSubTreeItem(subItem,memberInfo.getDisplayName(),image,getMemberTextData(classInfo.getName(),memberInfo),memberInfo.getToolTip(),true);
    }
    List methodList=new ArrayList();
    methodList.add(classInfo.getConstructor());
    methodList.addAll(classInfo.getMethods());
    for (Iterator iterator=methodList.iterator(); iterator.hasNext(); ) {
      IMethodInfo methodInfo=(IMethodInfo)iterator.next();
      if (methodInfo == null) {
        continue;
      }
      Image image=globalImage;
      if (image == null) {
        if (methodInfo.isStatic()) {
          image=IMAGE_STATIC_METHOD;
        }
 else {
          image=IMAGE_METHOD;
        }
      }
      List displayList=getMethodArgumentsList(classInfo.getName(),methodInfo);
      for (int i=0; i < displayList.size(); i++) {
        String[] array=(String[])displayList.get(i);
        createSubTreeItem(subItem,array[0],image,array[1],methodInfo.getToolTip(),true);
      }
    }
  }
}",0.9934640522875816
75756,"protected void initialize(){
  boolean isNewArea=(root == null);
  createRoot();
  if (isNewArea) {
    IStyle areaStyle=root.getStyle();
    validateBoxProperty(areaStyle,parent.getCurrentMaxContentWidth(),context.getMaxHeight());
    setOffsetX(root.getContentX());
    setOffsetY(isFirst ? root.getContentY() : 0);
    int maxWidth=parent.getCurrentMaxContentWidth();
    int leftWidth=maxWidth - parent.getCurrentIP();
    calculateSpecifiedWidth();
    int width=0;
    if (specifiedWidth > 0) {
      width=Math.min(specifiedWidth,maxWidth);
    }
 else {
      if (leftWidth > maxWidth / 4) {
        width=leftWidth;
      }
 else {
        width=maxWidth;
      }
    }
    root.setAllocatedWidth(width);
    setCurrentBP(0);
    setCurrentIP(0);
  }
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}","protected void initialize(){
  boolean isNewArea=(root == null);
  createRoot();
  if (isNewArea) {
    IStyle areaStyle=root.getStyle();
    validateBoxProperty(areaStyle,parent.getCurrentMaxContentWidth(),context.getMaxHeight());
    setOffsetX(root.getContentX());
    setOffsetY(isFirst ? root.getContentY() : 0);
    int maxWidth=parent.getCurrentMaxContentWidth();
    calculateSpecifiedWidth();
    int width=maxWidth;
    if (specifiedWidth > 0) {
      width=Math.min(specifiedWidth,maxWidth);
    }
    root.setAllocatedWidth(width);
    setCurrentBP(0);
    setCurrentIP(0);
  }
  maxAvaWidth=root.getContentWidth();
  root.setAllocatedHeight(parent.getCurrentMaxContentHeight());
  maxAvaHeight=root.getContentHeight();
}",0.6748166259168704
75757,"protected void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(report);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    processNodes(body,checkEscapeSpace(doc),styleMap,foreign);
  }
}","protected void processForeignData(IForeignContent foreign){
  if (foreign.getChildren() != null && foreign.getChildren().size() > 0) {
    return;
  }
  HashMap styleMap=new HashMap();
  HTMLStyleProcessor htmlProcessor=new HTMLStyleProcessor(report);
  Object rawValue=foreign.getRawValue();
  Document doc=null;
  if (null != rawValue) {
    doc=new TextParser().parse(foreign.getRawValue().toString(),(String)textTypeMapping.get(foreign.getRawType()));
  }
  Element body=null;
  if (doc != null) {
    Node node=doc.getFirstChild();
    if (node instanceof Element) {
      body=(Element)node;
    }
  }
  if (body != null) {
    htmlProcessor.execute(body,styleMap);
    IContainerContent container=new ContainerContent((ReportContent)foreign.getReportContent());
    addChild(foreign,container);
    processNodes(body,checkEscapeSpace(doc),styleMap,container);
  }
}",0.9094292803970224
75758,"private void handleElement(Element ele,boolean needEscape,HashMap cssStyles,IContent content,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent oldAction=action;
    handleAnchor(ele,container);
    processNodes(ele,needEscape,cssStyles,container);
    this.action=oldAction;
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    IContainerContent orderContainer=new ContainerContent((ReportContent)content.getReportContent());
    CSSValue fontSizeValue=content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
    orderContainer.setWidth(new DimensionType(2.1 * PropertyUtil.getDimensionValue(fontSizeValue) / 1000.0,EngineIRConstants.UNITS_PT));
    orderContainer.setInlineStyle(style);
    addChild(container,orderContainer);
    TextContent text=new TextContent((ReportContent)content.getReportContent());
    addChild(orderContainer,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    text.setInlineStyle(style);
    IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,needEscape,cssStyles,childContainer);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=new TextContent((ReportContent)content.getReportContent());
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      processNodes(ele,needEscape,cssStyles,container);
    }
  }
 else {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    handleStyle(ele,cssStyles,container);
    if (htmlDisplayMode.contains(ele.getTagName())) {
      addChild(content,container);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      if (inlineContainerStack.isEmpty()) {
        container.setParent(content);
      }
 else {
        container.setParent((IContent)inlineContainerStack.peek());
      }
      inlineContainerStack.push(container);
      processNodes(ele,needEscape,cssStyles,content);
      inlineContainerStack.pop();
    }
  }
}","private void handleElement(Element ele,boolean needEscape,HashMap cssStyles,IContent content,int index){
  IStyle cssStyle=(IStyle)cssStyles.get(ele);
  if (cssStyle != null) {
    if (""String_Node_Str"".equals(cssStyle.getDisplay())) {
      return;
    }
  }
  String tagName=ele.getTagName();
  if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    setInlineParent(content,container);
    handleStyle(ele,cssStyles,container);
    ActionContent oldAction=action;
    handleAnchor(ele,container);
    inlineContainerStack.push(container);
    processNodes(ele,needEscape,cssStyles,content);
    inlineContainerStack.pop();
    this.action=oldAction;
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    outputImg(ele,cssStyles,content);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"")) {
    ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
    addChild(content,label);
    label.setText(""String_Node_Str"");
    StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
    inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    label.setInlineStyle(inlineStyle);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") && ele.getParentNode().getNodeType() == Node.ELEMENT_NODE) {
    StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.BLOCK_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.MIDDLE_VALUE);
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    container.setInlineStyle(style);
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    style=new StyleDeclaration(content.getCSSEngine());
    style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
    style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
    IContainerContent orderContainer=new ContainerContent((ReportContent)content.getReportContent());
    CSSValue fontSizeValue=content.getComputedStyle().getProperty(IStyle.STYLE_FONT_SIZE);
    orderContainer.setWidth(new DimensionType(2.1 * PropertyUtil.getDimensionValue(fontSizeValue) / 1000.0,EngineIRConstants.UNITS_PT));
    orderContainer.setInlineStyle(style);
    addChild(container,orderContainer);
    TextContent text=new TextContent((ReportContent)content.getReportContent());
    addChild(orderContainer,text);
    if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new Integer(index).toString() + ""String_Node_Str"");
    }
 else     if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
      text.setText(new String(new char[]{'\u2022'}));
    }
    text.setInlineStyle(style);
    IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
    addChild(container,childContainer);
    childContainer.setInlineStyle(style);
    processNodes(ele,needEscape,cssStyles,childContainer);
  }
 else   if (tagName.toLowerCase().equals(""String_Node_Str"") || tagName.toLowerCase().equals(""String_Node_Str"")) {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    addChild(content,container);
    handleStyle(ele,cssStyles,container);
    if (tagName.toLowerCase().equals(""String_Node_Str"")) {
      StyleDeclaration style=new StyleDeclaration(content.getCSSEngine());
      style.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      style.setProperty(IStyle.STYLE_VERTICAL_ALIGN,CSSValueConstants.TOP_VALUE);
      TextContent text=new TextContent((ReportContent)content.getReportContent());
      addChild(content,text);
      if (ele.getParentNode().getNodeName().equals(""String_Node_Str"")) {
        text.setText(""String_Node_Str"");
      }
      style.setTextIndent(""String_Node_Str"");
      text.setInlineStyle(style);
      IContainerContent childContainer=new ContainerContent((ReportContent)content.getReportContent());
      childContainer.setInlineStyle(style);
      addChild(container,childContainer);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      processNodes(ele,needEscape,cssStyles,container);
    }
  }
 else {
    IContainerContent container=new ContainerContent((ReportContent)content.getReportContent());
    handleStyle(ele,cssStyles,container);
    if (htmlDisplayMode.contains(ele.getTagName())) {
      addChild(content,container);
      processNodes(ele,needEscape,cssStyles,container);
    }
 else {
      setInlineParent(content,container);
      inlineContainerStack.push(container);
      processNodes(ele,needEscape,cssStyles,content);
      inlineContainerStack.pop();
    }
  }
}",0.924557273006449
75759,"/** 
 * Outputs the A element
 * @param ele the A element instance
 */
protected void handleAnchor(Element ele,IContent content){
  if (ele.getAttribute(""String_Node_Str"").trim().length() != 0) {
    content.setBookmark(ele.getAttribute(""String_Node_Str""));
  }
 else {
    content.setBookmark(ele.getAttribute(""String_Node_Str""));
  }
  if (ele.getAttribute(""String_Node_Str"").length() > 0) {
    String href=ele.getAttribute(""String_Node_Str"");
    if (null != href && !""String_Node_Str"".equals(href)) {
      ActionContent action=new ActionContent();
      if (href.startsWith(""String_Node_Str"")) {
        action.setBookmark(href.substring(1));
      }
 else {
        action.setHyperlink(href,ele.getAttribute(""String_Node_Str""));
      }
      content.setHyperlinkAction(action);
      this.action=action;
    }
  }
}","/** 
 * Outputs the A element
 * @param ele the A element instance
 */
protected void handleAnchor(Element ele,IContent content){
  if (ele.getAttribute(""String_Node_Str"").trim().length() != 0) {
    content.setBookmark(ele.getAttribute(""String_Node_Str""));
  }
 else {
    content.setBookmark(ele.getAttribute(""String_Node_Str""));
  }
  if (ele.getAttribute(""String_Node_Str"").length() > 0) {
    String href=ele.getAttribute(""String_Node_Str"");
    if (null != href && !""String_Node_Str"".equals(href)) {
      ActionContent action=new ActionContent();
      if (href.startsWith(""String_Node_Str"")) {
        action.setBookmark(href.substring(1));
      }
 else {
        String target=ele.getAttribute(""String_Node_Str"");
        if (""String_Node_Str"".equals(target)) {
          target=""String_Node_Str"";
        }
        action.setHyperlink(href,target);
      }
      this.action=action;
    }
  }
}",0.8425925925925926
75760,"/** 
 * Visits the children nodes of the specific node
 * @param visitor the ITextNodeVisitor instance
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 */
private void processNodes(Element ele,boolean needEscape,HashMap cssStyles,IContent content){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),checkEscapeSpace(node),cssStyles,content);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),needEscape,cssStyles,content);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_UNDERLINE,IStyle.UNDERLINE_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_LINETHROUGH,IStyle.LINE_THROUGH_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.BOTTOM_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.TOP_VALUE);
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (supportedHTMLElementTags.contains(node.getNodeName().toUpperCase()) && node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,needEscape,cssStyles,content,++level);
    }
  }
}","/** 
 * Visits the children nodes of the specific node
 * @param ele the specific node
 * @param needEscape the flag indicating the content needs escaping
 * @param cssStyles
 * @param content the parent content of the element
 */
private void processNodes(Element ele,boolean needEscape,HashMap cssStyles,IContent content){
  int level=0;
  for (Node node=ele.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),checkEscapeSpace(node),cssStyles,content);
      }
    }
 else     if (node.getNodeName().equals(""String_Node_Str"")) {
      if (node.getFirstChild() instanceof Element) {
        processNodes((Element)node.getFirstChild(),needEscape,cssStyles,content);
      }
    }
 else     if (node.getNodeType() == Node.TEXT_NODE) {
      ILabelContent label=new LabelContent((ReportContent)content.getReportContent());
      addChild(content,label);
      label.setText(node.getNodeValue());
      StyleDeclaration inlineStyle=new StyleDeclaration(content.getCSSEngine());
      inlineStyle.setProperty(IStyle.STYLE_DISPLAY,CSSValueConstants.INLINE_VALUE);
      Node pNode=node.getParentNode();
      if (pNode != null) {
        if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName()) || ""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_UNDERLINE,IStyle.UNDERLINE_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_TEXT_LINETHROUGH,IStyle.LINE_THROUGH_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.BOTTOM_VALUE);
        }
 else         if (""String_Node_Str"".equalsIgnoreCase(pNode.getNodeName())) {
          inlineStyle.setProperty(IStyle.STYLE_VERTICAL_ALIGN,IStyle.TOP_VALUE);
        }
      }
      label.setInlineStyle(inlineStyle);
      if (action != null) {
        label.setHyperlinkAction(action);
      }
    }
 else     if (supportedHTMLElementTags.contains(node.getNodeName().toUpperCase()) && node.getNodeType() == Node.ELEMENT_NODE) {
      handleElement((Element)node,needEscape,cssStyles,content,++level);
    }
  }
}",0.9565950273914876
75761,"public void end(IReportContent report){
  try {
    lb.flush(true,engine);
    ExcelWriter writer=new ExcelWriter(out);
    writer.writeDeclarations();
    writer.declareStyles(engine.getStyleIDMap());
    writer.startSheet();
    writer.startTable(width);
    writeDatas(writer);
    writer.endTable();
    writer.closeSheet();
    for (int i=0; i < charts.size(); i++) {
      File temp=(File)charts.get(i);
      writer.insert(temp);
      temp.delete();
    }
    writer.close(true);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void end(IReportContent report){
  try {
    lb.flush(true,engine);
    ExcelWriter writer=new ExcelWriter(out);
    writer.writeDeclarations();
    writer.declareStyles(engine.getStyleIDMap());
    writer.startSheet();
    writer.startTable(width);
    writeDatas(writer);
    writer.endTable();
    writer.closeSheet();
    for (int i=0; i < charts.size(); i++) {
      File temp=(File)charts.get(i);
      writer.insert(temp);
      temp.delete();
    }
    writer.close(true);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    throw new RuntimeException(e);
  }
}",0.9853181076672104
75762,"public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
  entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
  entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
  entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
  entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
  entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
  entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
  entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
  entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  return entry;
}","public static StyleEntry createStyleEntry(IStyle style){
  StyleEntry entry=new StyleEntry();
  entry.setProperty(StyleConstant.BACKGROUND_COLOR_PROP,convertColor(style.getBackgroundColor()));
  float width=Float.parseFloat(style.getBorderBottomWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_BOTTOM_COLOR_PROP,convertColor(style.getBorderBottomColor()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_STYLE_PROP,convertBorderStyle(style.getBorderBottomStyle()));
    entry.setProperty(StyleConstant.BORDER_BOTTOM_WIDTH_PROP,convertBorderWeight(style.getBorderBottomWidth()));
  }
  width=Float.parseFloat(style.getBorderTopWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_TOP_COLOR_PROP,convertColor(style.getBorderTopColor()));
    entry.setProperty(StyleConstant.BORDER_TOP_STYLE_PROP,convertBorderStyle(style.getBorderTopStyle()));
    entry.setProperty(StyleConstant.BORDER_TOP_WIDTH_PROP,convertBorderWeight(style.getBorderTopWidth()));
  }
  width=Float.parseFloat(style.getBorderLeftWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_LEFT_COLOR_PROP,convertColor(style.getBorderLeftColor()));
    entry.setProperty(StyleConstant.BORDER_LEFT_STYLE_PROP,convertBorderStyle(style.getBorderLeftStyle()));
    entry.setProperty(StyleConstant.BORDER_LEFT_WIDTH_PROP,convertBorderWeight(style.getBorderLeftWidth()));
  }
  width=Float.parseFloat(style.getBorderRightWidth());
  if (width > 0) {
    entry.setProperty(StyleConstant.BORDER_RIGHT_COLOR_PROP,convertColor(style.getBorderRightColor()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_STYLE_PROP,convertBorderStyle(style.getBorderRightStyle()));
    entry.setProperty(StyleConstant.BORDER_RIGHT_WIDTH_PROP,convertBorderWeight(style.getBorderRightWidth()));
  }
  entry.setProperty(StyleConstant.COLOR_PROP,convertColor(style.getColor()));
  entry.setProperty(StyleConstant.FONT_FAMILY_PROP,ExcelUtil.getValue(style.getFontFamily()));
  entry.setProperty(StyleConstant.FONT_SIZE_PROP,convertFontSize(style.getFontSize()));
  entry.setProperty(StyleConstant.FONT_STYLE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.FONT_WEIGHT_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_LINE_THROUGH_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.TEXT_UNDERLINE_PROP,ExcelUtil.expression(style.getFontStyle(),""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str""},false));
  entry.setProperty(StyleConstant.H_ALIGN_PROP,convertHAlign(style.getTextAlign()));
  entry.setProperty(StyleConstant.V_ALIGN_PROP,convertVAlign(style.getVerticalAlign()));
  return entry;
}",0.9385616190820384
75763,"public void calculateTopStyles(){
  if (styles.size() != 0 && istop) {
    Span span=(Span)spans.peek();
    int start=((Integer)pos.peek()).intValue();
    applyContainerTopBorder(span,start);
    istop=false;
  }
}","public void calculateTopStyles(){
  if (styles.size() > 0) {
    StyleEntry style=(StyleEntry)styles.peek();
    if (((Boolean)style2top.get(style)).booleanValue()) {
      Span span=(Span)spans.peek();
      int start=((Integer)pos.peek()).intValue();
      applyContainerTopBorder(span,start);
      style2top.put(style,Boolean.FALSE);
    }
  }
}",0.6761061946902654
75764,"public void addContainerStyle(IStyle style,Span span,int start){
  StyleEntry entry=initStyle(style,span);
  spans.push(span);
  styles.push(entry);
  pos.push(new Integer(start));
  istop=true;
}","public void addContainerStyle(IStyle style,Span span,int start){
  StyleEntry entry=initStyle(style,span);
  spans.push(span);
  styles.push(entry);
  pos.push(new Integer(start));
  style2top.put(entry,Boolean.TRUE);
}",0.8963855421686747
75765,"public void calculateBottomStyles(){
  Span span=(Span)spans.pop();
  StyleEntry entry=(StyleEntry)styles.pop();
  int col=span.getCol();
  int cp=dataMap.getListSize(col) - 1;
  for (int i=0; i < span.getColSpan() + 1; i++) {
    StyleBuilder.applyBottomBorder(entry,((Data)dataMap.get(i + col,cp)).style);
  }
  istop=true;
}","public void calculateBottomStyles(){
  Span span=(Span)spans.pop();
  StyleEntry entry=(StyleEntry)styles.pop();
  int col=span.getCol();
  int cp=dataMap.getListSize(col) - 1;
  for (int i=0; i < span.getColSpan() + 1; i++) {
    StyleBuilder.applyBottomBorder(entry,((Data)dataMap.get(i + col,cp)).style);
  }
  style2top.remove(entry);
}",0.9505247376311844
75766,"public int hashCode(){
  int code=0;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    code+=props[i].hashCode() * 2 + 1;
    if (Integer.MAX_VALUE == code) {
      break;
    }
  }
  return code;
}","public int hashCode(){
  int code=0;
  for (int i=0; i < StyleConstant.COUNT; i++) {
    String value=props[i] == null ? NULL : props[i];
    code+=value.hashCode() * 2 + 1;
    if (Integer.MAX_VALUE == code) {
      break;
    }
  }
  return code;
}",0.8666666666666667
75767,"public void close(){
  nextItem=0;
  super.close();
}","public void close(){
  nextItem=0;
  closeQuery();
  super.close();
}",0.8688524590163934
75768,"protected void doExecute() throws Exception {
  IRowContent rowContent=(IRowContent)content;
  rowContent.setRowID(rowId);
}","protected void doExecute() throws Exception {
  IRowContent rowContent=(IRowContent)content;
  rowContent.setRowID(rowId);
  executeQuery();
}",0.9323308270676692
75769,"public void close(){
  rowId=0;
  nextItem=0;
  super.close();
}","public void close(){
  closeQuery();
  rowId=0;
  nextItem=0;
  super.close();
}",0.8888888888888888
75770,"/** 
 * @param object
 */
private static Object doPalette(Object object,String type){
  assert(object instanceof PaletteRoot);
  PaletteRoot root=(PaletteRoot)object;
  List list=root.getChildren();
  List exts=ExtensionPointManager.getInstance().getExtendedElementPoints();
  if (exts == null) {
    return root;
  }
  for (Iterator itor=exts.iterator(); itor.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)itor.next();
    if (point == null) {
      return root;
    }
    String category=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY);
    ImageDescriptor icon=(ImageDescriptor)point.getAttribute(IExtensionConstants.ATTRIBUTE_KEY_PALETTE_ICON);
    IReportItemFigureProvider UI=point.getReportItemUI();
    if (UI == null) {
      return root;
    }
    if (PALETTE_DESIGNER.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_DESIGNER);
      if (!bool.booleanValue()) {
        continue;
      }
    }
 else     if (PALETTE_MASTERPAGE.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_MASTERPAGE);
      if (!bool.booleanValue()) {
        continue;
      }
    }
    String displayName=DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName()).getDisplayName();
    CombinedTemplateCreationEntry combined=new ReportCombinedTemplateCreationEntry(displayName,Messages.getFormattedString(""String_Node_Str"",new Object[]{displayName}),getExtendedPalletTemplateName(point),new ReportElementFactory(IReportElementConstants.REPORT_ELEMENT_EXTENDED + point.getExtensionName()),icon,icon,BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(getExtendedPalletTemplateName(point)));
    PaletteContainer entry=findCategory(list,category);
    if (entry == null) {
      String categoryLabel=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY_DISPLAYNAME);
      if (categoryLabel == null) {
        categoryLabel=category;
      }
      entry=new PaletteCategory(category,categoryLabel,null);
      root.add(entry);
    }
    entry.add(combined);
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    String category=entries[i].getCategory();
    PaletteContainer entry=findCategory(list,category);
    if (entry == null) {
      entry=new PaletteCategory(category,category,null);
      root.add(entry);
    }
    CombinedTemplateCreationEntry combined=new CommandCombinedTemplateCreationEntry(entries[i]);
    entry.add(combined);
  }
  return root;
}","/** 
 * @param object
 */
private static Object doPalette(Object object,String type){
  assert(object instanceof PaletteRoot);
  PaletteRoot root=(PaletteRoot)object;
  List list=root.getChildren();
  List exts=ExtensionPointManager.getInstance().getExtendedElementPoints();
  if (exts == null) {
    return root;
  }
  for (Iterator itor=exts.iterator(); itor.hasNext(); ) {
    ExtendedElementUIPoint point=(ExtendedElementUIPoint)itor.next();
    if (point == null) {
      return root;
    }
    String category=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY);
    ImageDescriptor icon=(ImageDescriptor)point.getAttribute(IExtensionConstants.ATTRIBUTE_KEY_PALETTE_ICON);
    IReportItemFigureProvider UI=point.getReportItemUI();
    if (UI == null) {
      return root;
    }
    if (PALETTE_DESIGNER.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_DESIGNER);
      if (!bool.booleanValue()) {
        continue;
      }
    }
 else     if (PALETTE_MASTERPAGE.equals(type)) {
      Boolean bool=(Boolean)point.getAttribute(IExtensionConstants.ATTRIBUTE_EDITOR_SHOW_IN_MASTERPAGE);
{
        continue;
      }
    }
    String displayName=DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName()).getDisplayName();
    CombinedTemplateCreationEntry combined=new ReportCombinedTemplateCreationEntry(displayName,Messages.getFormattedString(""String_Node_Str"",new Object[]{displayName}),getExtendedPalletTemplateName(point),new ReportElementFactory(IReportElementConstants.REPORT_ELEMENT_EXTENDED + point.getExtensionName()),icon,icon,BasePaletteFactory.getAbstractToolHandleExtendsFromPaletteName(getExtendedPalletTemplateName(point)));
    PaletteContainer entry=findCategory(list,category);
    if (entry == null) {
      String categoryLabel=(String)point.getAttribute(IExtensionConstants.ATTRIBUTE_PALETTE_CATEGORY_DISPLAYNAME);
      if (categoryLabel == null) {
        categoryLabel=category;
      }
      entry=new PaletteCategory(category,categoryLabel,null);
      root.add(entry);
    }
    entry.add(combined);
  }
  PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
  for (int i=0; i < entries.length; i++) {
    if (PALETTE_MASTERPAGE.equals(type)) {
      continue;
    }
    String category=entries[i].getCategory();
    PaletteContainer entry=findCategory(list,category);
    if (entry == null) {
      entry=new PaletteCategory(category,category,null);
      root.add(entry);
    }
    CombinedTemplateCreationEntry combined=new CommandCombinedTemplateCreationEntry(entries[i]);
    entry.add(combined);
  }
  return root;
}",0.9817153628652217
75771,"public IContent execute(){
  if (executor != null) {
    if (executor instanceof ExtendedGenerateExecutor) {
      ExtendedGenerateExecutor gExecutor=(ExtendedGenerateExecutor)executor;
      gExecutor.context=context;
      gExecutor.report=report;
      gExecutor.design=design;
    }
    content=executor.execute();
    if (content != null) {
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        long uid=iid.getUniqueID();
        if (uid == -1) {
          uid=generateUniqueID();
          iid=new InstanceID(iid.getParentID(),uid,iid.getComponentID(),iid.getDataID());
          content.setInstanceID(iid);
        }
      }
 else {
        iid=getInstanceID();
        content.setInstanceID(iid);
      }
      if (context.isInFactory()) {
        handleOnCreate(content);
      }
      startTOCEntry(content);
    }
  }
  return content;
}","public IContent execute(){
  if (executor != null) {
    if (executor instanceof ExtendedGenerateExecutor) {
      ExtendedGenerateExecutor gExecutor=(ExtendedGenerateExecutor)executor;
      gExecutor.parent=parent;
      gExecutor.context=context;
      gExecutor.report=report;
      gExecutor.design=design;
    }
    content=executor.execute();
    if (content != null) {
      InstanceID iid=content.getInstanceID();
      if (iid != null) {
        long uid=iid.getUniqueID();
        if (uid == -1) {
          uid=generateUniqueID();
          iid=new InstanceID(iid.getParentID(),uid,iid.getComponentID(),iid.getDataID());
          content.setInstanceID(iid);
        }
      }
 else {
        iid=getInstanceID();
        content.setInstanceID(iid);
      }
      if (content.getParent() == null) {
        content.setParent(getParentContent());
      }
      if (context.isInFactory()) {
        handleOnCreate(content);
      }
      startTOCEntry(content);
    }
  }
  return content;
}",0.9322666666666668
75772,"protected ContainerExecutor(ExecutorManager manager,int type){
  super(manager,type);
  needPrepareNext=true;
  sections=null;
  useNextSection=true;
  nextSection=-1;
  nextOffset=-1;
}","protected ContainerExecutor(ExecutorManager manager,int type){
  super(manager,type);
  needPrepareNext=true;
  prepareFirstChild=true;
  sections=null;
  useNextSection=true;
  nextSection=-1;
  nextOffset=-1;
}",0.9346733668341708
75773,"protected IReportItemExecutor prepareChildExecutor() throws Exception {
  if (fragment == null && nextOffset == -1) {
    DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
    if (docExt != null) {
      nextOffset=docExt.getFirstChild();
    }
  }
  if (fragment != null) {
    if (sections == null) {
      sections=fragment.getSections();
      nextSection=-1;
      useNextSection=true;
    }
    if (useNextSection) {
      useNextSection=false;
      nextSection++;
      if (sections == null || nextSection >= sections.length) {
        return null;
      }
      Object leftEdge=sections[nextSection][0];
      if (leftEdge == Segment.LEFT_MOST_EDGE) {
        DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
        if (docExt != null) {
          nextOffset=docExt.getFirstChild();
        }
      }
 else {
        InstanceIndex leftIndex=(InstanceIndex)leftEdge;
        InstanceID leftId=leftIndex.getInstanceID();
        long leftOffset=leftIndex.getOffset();
        if (leftOffset == -1) {
          DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
          if (docExt != null) {
            leftOffset=docExt.getFirstChild();
          }
        }
        if (leftOffset != -1) {
          IContent leftContent=reader.loadContent(leftOffset);
          InstanceID contentId=leftContent.getInstanceID();
          if (isSameInstance(contentId,leftId)) {
            nextOffset=leftIndex.getOffset();
          }
 else {
            DocumentExtension docExt=(DocumentExtension)leftContent.getExtension(IContent.DOCUMENT_EXTENSION);
            if (docExt != null) {
              nextOffset=docExt.getNext();
            }
          }
        }
        doSkipToExecutor(leftId,nextOffset);
        uniqueId=leftId.getUniqueID();
      }
    }
  }
  ReportItemExecutor childExecutor=doCreateExecutor(nextOffset);
  if (childExecutor != null) {
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      if (fragment != null) {
        InstanceID childId=childContent.getInstanceID();
        Fragment childFragment=fragment.getFragment(childId);
        if (childFragment != null) {
          childExecutor.setFragment(childFragment);
        }
        Object rightEdge=sections[nextSection][1];
        if (rightEdge != Segment.RIGHT_MOST_EDGE) {
          InstanceIndex rightIndex=(InstanceIndex)rightEdge;
          InstanceID rightId=rightIndex.getInstanceID();
          if (isSameInstance(rightId,childId)) {
            useNextSection=true;
          }
        }
      }
      DocumentExtension docExt=(DocumentExtension)childContent.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        if (docExt.getIndex() == nextOffset) {
          nextOffset=docExt.getNext();
        }
      }
    }
  }
  return childExecutor;
}","protected IReportItemExecutor prepareChildExecutor() throws Exception {
  if (prepareFirstChild) {
    if (fragment == null && nextOffset == -1) {
      DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        nextOffset=docExt.getFirstChild();
      }
    }
    if (fragment != null) {
      if (sections == null) {
        sections=fragment.getSections();
        nextSection=-1;
        useNextSection=true;
      }
    }
    prepareFirstChild=false;
  }
  if (fragment != null) {
    if (useNextSection) {
      useNextSection=false;
      nextSection++;
      if (sections == null || nextSection >= sections.length) {
        return null;
      }
      Object leftEdge=sections[nextSection][0];
      if (leftEdge == Segment.LEFT_MOST_EDGE) {
        DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
        if (docExt != null) {
          nextOffset=docExt.getFirstChild();
        }
      }
 else {
        InstanceIndex leftIndex=(InstanceIndex)leftEdge;
        InstanceID leftId=leftIndex.getInstanceID();
        long leftOffset=leftIndex.getOffset();
        if (leftOffset == -1) {
          DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
          if (docExt != null) {
            leftOffset=docExt.getFirstChild();
          }
        }
        if (leftOffset != -1) {
          IContent leftContent=reader.loadContent(leftOffset);
          InstanceID contentId=leftContent.getInstanceID();
          if (isSameInstance(contentId,leftId)) {
            nextOffset=leftIndex.getOffset();
          }
 else {
            DocumentExtension docExt=(DocumentExtension)leftContent.getExtension(IContent.DOCUMENT_EXTENSION);
            if (docExt != null) {
              nextOffset=docExt.getNext();
            }
          }
        }
        doSkipToExecutor(leftId,nextOffset);
        uniqueId=leftId.getUniqueID();
      }
    }
  }
  ReportItemExecutor childExecutor=doCreateExecutor(nextOffset);
  if (childExecutor != null) {
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      if (fragment != null) {
        InstanceID childId=childContent.getInstanceID();
        Fragment childFragment=fragment.getFragment(childId);
        if (childFragment != null) {
          childExecutor.setFragment(childFragment);
        }
        Object rightEdge=sections[nextSection][1];
        if (rightEdge != Segment.RIGHT_MOST_EDGE) {
          InstanceIndex rightIndex=(InstanceIndex)rightEdge;
          InstanceID rightId=rightIndex.getInstanceID();
          if (isSameInstance(rightId,childId)) {
            useNextSection=true;
          }
        }
      }
      DocumentExtension docExt=(DocumentExtension)childContent.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        if (docExt.getIndex() == nextOffset) {
          nextOffset=docExt.getNext();
        }
      }
    }
  }
  return childExecutor;
}",0.9806214500501168
75774,"public void close(){
  if (nextOffset != -1) {
    reader.unloadContent(nextOffset);
    nextOffset=-1;
  }
  needPrepareNext=true;
  sections=null;
  useNextSection=true;
  nextSection=-1;
  nextOffset=-1;
  super.close();
}","public void close(){
  if (nextOffset != -1) {
    reader.unloadContent(nextOffset);
    nextOffset=-1;
  }
  prepareFirstChild=true;
  needPrepareNext=true;
  sections=null;
  useNextSection=true;
  nextSection=-1;
  nextOffset=-1;
  super.close();
}",0.9453781512605042
75775,"protected IReportItemExecutor prepareChildExecutor() throws Exception {
  if (fragment == null && nextOffset == -1) {
    if (!firstChild) {
      return null;
    }
    firstChild=false;
    DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
    if (docExt != null) {
      nextOffset=docExt.getFirstChild();
    }
  }
  if (fragment != null) {
    if (sections == null) {
      sections=fragment.getSections();
      nextSection=-1;
      useNextSection=true;
    }
    if (useNextSection) {
      useNextSection=false;
      nextSection++;
      if (sections == null || nextSection >= sections.length) {
        return null;
      }
      Object leftEdge=sections[nextSection][0];
      if (leftEdge == Segment.LEFT_MOST_EDGE) {
        DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
        if (docExt != null) {
          nextOffset=docExt.getFirstChild();
        }
      }
 else {
        InstanceIndex leftIndex=(InstanceIndex)leftEdge;
        InstanceID leftId=leftIndex.getInstanceID();
        nextOffset=leftIndex.getOffset();
        uniqueId=leftId.getUniqueID();
      }
    }
  }
  ReportItemExecutor childExecutor=doCreateExecutor(nextOffset);
  if (childExecutor != null) {
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      if (fragment != null) {
        InstanceID childId=childContent.getInstanceID();
        Fragment childFragment=fragment.getFragment(childId);
        if (childFragment != null) {
          childExecutor.setFragment(childFragment);
        }
        Object rightEdge=sections[nextSection][1];
        if (rightEdge != Segment.RIGHT_MOST_EDGE) {
          InstanceIndex rightIndex=(InstanceIndex)rightEdge;
          InstanceID rightId=rightIndex.getInstanceID();
          if (isSameInstance(rightId,childId)) {
            useNextSection=true;
          }
        }
      }
      DocumentExtension docExt=(DocumentExtension)childContent.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        nextOffset=docExt.getNext();
      }
    }
  }
  return childExecutor;
}","protected IReportItemExecutor prepareChildExecutor() throws Exception {
  if (prepareFirstChild) {
    if (fragment == null && nextOffset == -1) {
      DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        nextOffset=docExt.getFirstChild();
      }
    }
    if (fragment != null) {
      if (sections == null) {
        sections=fragment.getSections();
        nextSection=-1;
        useNextSection=true;
      }
    }
    prepareFirstChild=false;
  }
  if (fragment != null) {
    if (useNextSection) {
      useNextSection=false;
      nextSection++;
      if (sections == null || nextSection >= sections.length) {
        return null;
      }
      Object leftEdge=sections[nextSection][0];
      if (leftEdge == Segment.LEFT_MOST_EDGE) {
        DocumentExtension docExt=(DocumentExtension)content.getExtension(IContent.DOCUMENT_EXTENSION);
        if (docExt != null) {
          nextOffset=docExt.getFirstChild();
        }
      }
 else {
        InstanceIndex leftIndex=(InstanceIndex)leftEdge;
        InstanceID leftId=leftIndex.getInstanceID();
        nextOffset=leftIndex.getOffset();
        uniqueId=leftId.getUniqueID();
      }
    }
  }
  if (nextOffset == -1) {
    return null;
  }
  ReportItemExecutor childExecutor=doCreateExecutor(nextOffset);
  if (childExecutor != null) {
    IContent childContent=childExecutor.execute();
    if (childContent != null) {
      if (fragment != null) {
        InstanceID childId=childContent.getInstanceID();
        Fragment childFragment=fragment.getFragment(childId);
        if (childFragment != null) {
          childExecutor.setFragment(childFragment);
        }
        Object rightEdge=sections[nextSection][1];
        if (rightEdge != Segment.RIGHT_MOST_EDGE) {
          InstanceIndex rightIndex=(InstanceIndex)rightEdge;
          InstanceID rightId=rightIndex.getInstanceID();
          if (isSameInstance(rightId,childId)) {
            useNextSection=true;
          }
        }
      }
      DocumentExtension docExt=(DocumentExtension)childContent.getExtension(IContent.DOCUMENT_EXTENSION);
      if (docExt != null) {
        nextOffset=docExt.getNext();
      }
    }
  }
  return childExecutor;
}",0.9481783208870784
75776,"public ExtendedItemExecutor(ExecutorManager manager){
  super(manager,ExecutorManager.EXTENDEDITEM);
  firstChild=true;
}","public ExtendedItemExecutor(ExecutorManager manager){
  super(manager,ExecutorManager.EXTENDEDITEM);
}",0.9147982062780268
75777,"public void close(){
  firstChild=true;
  closeQuery();
  super.close();
}","public void close(){
  closeQuery();
  super.close();
}",0.8527131782945736
75778,"public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      if (offset != -1) {
        InstanceID instanceId=getInstanceID();
        content=reader.loadContent(offset);
        content.setGenerateBy(design);
        IContent pContent=getParentContent();
        if (pContent != null) {
          content.setParent(pContent);
        }
        doExecute();
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  return content;
}","public IContent execute(){
  if (!executed) {
    executed=true;
    try {
      if (offset != -1) {
        generateUniqueID();
        content=reader.loadContent(offset);
        content.setGenerateBy(design);
        IContent pContent=getParentContent();
        if (pContent != null) {
          content.setParent(pContent);
        }
        doExecute();
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
  return content;
}",0.6125933831376734
75779,"void writeFATInt(long offset,int block) throws IOException {
  int blockId=(int)(offset / BLOCK_SIZE);
  int off=(int)(offset % BLOCK_SIZE);
  if (blockId >= totalAllocBlocks) {
    int newTotalBlocks=blockId + 1;
    ensureFATBlocks(newTotalBlocks);
    for (int i=totalAllocBlocks; i < newTotalBlocks; i++) {
      allocBlocks[totalAllocBlocks]=1024 * totalAllocBlocks;
      totalAllocBlocks++;
    }
  }
  int phyBlockId=getFATBlock(blockId);
  byte[] b=new byte[4];
  ArchiveUtil.integerToBytes(block,b);
  af.write(phyBlockId,off,b,0,4);
}","void writeFATInt(long offset,int block) throws IOException {
  int blockId=(int)(offset / BLOCK_SIZE);
  int off=(int)(offset % BLOCK_SIZE);
  if (blockId >= totalAllocBlocks) {
    int newTotalBlocks=blockId + 1;
    ensureFATBlocks(newTotalBlocks);
    for (int i=totalAllocBlocks; i < newTotalBlocks; i++) {
      allocBlocks[totalAllocBlocks]=INDEX_PER_BLOCK * totalAllocBlocks;
      totalAllocBlocks++;
    }
  }
  int phyBlockId=getFATBlock(blockId);
  byte[] b=new byte[4];
  ArchiveUtil.integerToBytes(block,b);
  af.write(phyBlockId,off,b,0,4);
}",0.9827429609445958
75780,"int getDefaultBlockSize(){
  String value=System.getProperty(PROPERTY_DEFAULT_BLOCK_SIZE);
  if (value == null) {
    try {
      int defaultBlockSize=Integer.parseInt(value);
      defaultBlockSize=(defaultBlockSize + 1023) / 1024 * 1024;
      if (defaultBlockSize > 0) {
        return defaultBlockSize;
      }
    }
 catch (    Exception ex) {
    }
  }
  return DEFAULT_BLOCK_SIZE;
}","int getDefaultBlockSize(){
  String value=System.getProperty(PROPERTY_DEFAULT_BLOCK_SIZE);
  if (value != null) {
    try {
      int defaultBlockSize=Integer.parseInt(value);
      defaultBlockSize=(defaultBlockSize + 1023) / 1024 * 1024;
      if (defaultBlockSize > 0) {
        return defaultBlockSize;
      }
    }
 catch (    Exception ex) {
    }
  }
  return DEFAULT_BLOCK_SIZE;
}",0.9974293059125964
75781,"Block(int size){
  blockSize=size;
  blockData=new byte[size];
  id=-1;
  dirtyStart=0;
  dirtyEnd=0;
  dataSize=0;
  prev=null;
  next=null;
}","/** 
 * Constructor
 * @param fs the compound file system it belongs to
 * @param blockId the block ID
 */
Block(int size){
  blockSize=size;
  blockData=new byte[size];
  id=-1;
  dirtyStart=0;
  dirtyEnd=0;
  dataSize=0;
  prev=null;
  next=null;
}",0.727735368956743
75782,"/** 
 * update row height
 * @param row
 */
public void updateRow(RowArea row,int specifiedHeight,boolean finished){
  if (layout != null) {
    layout.updateRow(row,specifiedHeight,finished);
  }
}","/** 
 * update row height
 * @param row
 */
public void updateRow(RowArea row,int specifiedHeight,boolean finished){
  if (layout != null) {
    int originalHeight=getDimensionValue(row.getContent().getHeight());
    layout.updateRow(row,specifiedHeight,originalHeight,finished);
  }
}",0.8198757763975155
75783,"public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells()) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,start,columnNumber,finished);
  int height=specifiedHeight;
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell != null) {
        row.remove(start + i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=getHeightOfEmptyRow(row);
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells()) {
    mergeDropCell(rowArea);
  }
}","public void updateRow(RowArea rowArea,int specifiedHeight,int originalHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells()) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,start,columnNumber,finished);
  int height=specifiedHeight;
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell != null) {
        row.remove(start + i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (originalHeight == 0 && isEmptyRow(row)) {
    height=getHeightOfEmptyRow(row);
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells()) {
    mergeDropCell(rowArea);
  }
}",0.9936147570060304
75784,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (metaDataProvider.getConnection() == null || this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}",0.9871345029239766
75785,"/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=lg.getBounds().scaledInstance(dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
if (lilh == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible();
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=lg.getInsets().scaledInstance(dScale);
LineAttributes lia=ca.getOutline();
bo=BoundsImpl.create(dX,dY,sz.getWidth(),sz.getHeight());
bo=bo.adjustedInstance(lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(bo.translateInstance(3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=LineAttributesImpl.copyInstance(lia);
lia.setVisible(true);
LineAttributes liSep=lg.getSeparator() == null ? lia : lg.getSeparator();
final SeriesDefinition[] seda=cm.getSeriesForLegend();
final Orientation o=lg.getOrientation();
final Direction d=lg.getDirection();
final Label la=LabelImpl.create();
la.setCaption(TextImpl.copyInstance(lg.getText()));
la.getCaption().setValue(""String_Node_Str"");
final ITextMetrics itm=xs.getTextMetrics(la);
final double dItemHeight=itm.getFullHeight();
final double dHorizontalSpacing=4;
Insets insCA=ca.getInsets().scaledInstance(dScale);
Series seBase;
List al;
LegendItemRenderingHints lirh;
Palette pa;
int iPaletteCount;
EList elPaletteEntries;
Fill fPaletteEntry;
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
if (o.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
Map columnCache=searchMaxColumnWidth(liha);
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else if (o.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{o.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(BoundsImpl.create(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
ipr.drawText(tre);
}
itm.dispose();
}","/** 
 * Renders the legend block based on the legend rendering rules.
 * @param ipr
 * @param lg
 * @param htRenderers
 * @throws ChartException
 */
public void renderLegend(IPrimitiveRenderer ipr,Legend lg,Map htRenderers) throws ChartException {
  if (!lg.isVisible()) {
    return;
  }
  renderBlock(ipr,lg,StructureSource.createLegend(lg));
  final IDisplayServer xs=getDevice().getDisplayServer();
  final double dScale=getDeviceScale();
  Bounds bo=lg.getBounds().scaledInstance(dScale);
  Size sz=null;
  double dX, dY;
  if (lg.getPosition() != Position.INSIDE_LITERAL) {
    try {
      sz=lg.getPreferredSize(xs,cm,rtc);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    sz.scale(dScale);
    dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
    dY=0;
    if (lg.isSetAnchor()) {
      int iAnchor=lg.getAnchor().getValue();
      if (isRightToLeft()) {
        if (iAnchor == Anchor.EAST) {
          iAnchor=Anchor.WEST;
        }
 else         if (iAnchor == Anchor.NORTH_EAST) {
          iAnchor=Anchor.NORTH_WEST;
        }
 else         if (iAnchor == Anchor.SOUTH_EAST) {
          iAnchor=Anchor.SOUTH_WEST;
        }
 else         if (iAnchor == Anchor.WEST) {
          iAnchor=Anchor.EAST;
        }
 else         if (iAnchor == Anchor.NORTH_WEST) {
          iAnchor=Anchor.NORTH_EAST;
        }
 else         if (iAnchor == Anchor.SOUTH_WEST) {
          iAnchor=Anchor.SOUTH_EAST;
        }
      }
switch (iAnchor) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
        dY=bo.getTop();
      break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
    dY=bo.getTop() + bo.getHeight() - sz.getHeight();
  break;
default :
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
break;
}
switch (iAnchor) {
case Anchor.WEST:
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
dX=bo.getLeft();
break;
case Anchor.EAST:
case Anchor.SOUTH_EAST:
case Anchor.NORTH_EAST:
dX=bo.getLeft() + bo.getWidth() - sz.getWidth();
break;
default :
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
break;
}
}
 else {
dX=bo.getLeft() + (bo.getWidth() - sz.getWidth()) / 2;
dY=bo.getTop() + (bo.getHeight() - sz.getHeight()) / 2;
}
}
 else {
dX=bo.getLeft();
dY=bo.getTop();
sz=SizeImpl.create(bo.getWidth(),bo.getHeight());
}
final LegendLayoutHints lilh=rtc.getLegendLayoutHints();
if (lilh == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
Label lgTitle=lg.getTitle();
double lgTitleWidth=0, lgTitleHeight=0;
double yOffset=0, xOffset=0, wOffset=0, hOffset=0;
final boolean bRenderLegendTitle=lgTitle != null && lgTitle.isSetVisible() && lgTitle.isVisible();
int iTitlePos=Position.ABOVE;
if (bRenderLegendTitle) {
lgTitle=LabelImpl.copyInstance(lgTitle);
final String sPreviousValue=lgTitle.getCaption().getValue();
lgTitle.getCaption().setValue(rtc.externalizedMessage(sPreviousValue));
Size titleSize=lilh.getTitleSize();
lgTitleWidth=titleSize.getWidth();
lgTitleHeight=titleSize.getHeight();
iTitlePos=lg.getTitlePosition().getValue();
if (isRightToLeft()) {
if (iTitlePos == Position.LEFT) {
iTitlePos=Position.RIGHT;
}
 else if (iTitlePos == Position.RIGHT) {
iTitlePos=Position.LEFT;
}
}
switch (iTitlePos) {
case Position.ABOVE:
yOffset=lgTitleHeight;
hOffset=-yOffset;
break;
case Position.BELOW:
hOffset=-lgTitleHeight;
break;
case Position.LEFT:
xOffset=lgTitleWidth;
wOffset=-xOffset;
break;
case Position.RIGHT:
wOffset=-lgTitleWidth;
break;
}
}
final ClientArea ca=lg.getClientArea();
final Insets lgIns=lg.getInsets().scaledInstance(dScale);
LineAttributes lia=ca.getOutline();
bo=BoundsImpl.create(dX,dY,sz.getWidth(),sz.getHeight());
bo=bo.adjustedInstance(lgIns);
dX=bo.getLeft();
dY=bo.getTop();
bo.delta(xOffset,yOffset,wOffset,hOffset);
dX=bo.getLeft();
dY=bo.getTop();
final double dBaseX=dX;
final double dBaseY=dY;
final RectangleRenderEvent rre=(RectangleRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),RectangleRenderEvent.class);
if (ca.getShadowColor() != null) {
rre.setBounds(bo.translateInstance(3,3));
rre.setBackground(ca.getShadowColor());
ipr.fillRectangle(rre);
}
rre.setBounds(bo);
rre.setOutline(lia);
rre.setBackground(ca.getBackground());
ipr.fillRectangle(rre);
ipr.drawRectangle(rre);
lia=LineAttributesImpl.copyInstance(lia);
lia.setVisible(true);
LineAttributes liSep=lg.getSeparator() == null ? lia : lg.getSeparator();
final SeriesDefinition[] seda=cm.getSeriesForLegend();
final Orientation o=lg.getOrientation();
final Direction d=lg.getDirection();
final Label la=LabelImpl.create();
la.setCaption(TextImpl.copyInstance(lg.getText()));
la.getCaption().setValue(""String_Node_Str"");
final ITextMetrics itm=xs.getTextMetrics(la);
final double dItemHeight=itm.getFullHeight();
final double dHorizontalSpacing=4;
Insets insCA=ca.getInsets().scaledInstance(dScale);
Series seBase;
List al;
LegendItemRenderingHints lirh;
Palette pa;
int iPaletteCount;
EList elPaletteEntries;
Fill fPaletteEntry;
final boolean bPaletteByCategory=(cm.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
if (o.getValue() == Orientation.VERTICAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
Map columnCache=searchMaxColumnWidth(liha);
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,lih.getCategoryIndex(),dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
Map columnCache=searchMaxColumnWidth(liha);
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
double columnWidth=bo.getWidth();
Double cachedWidth=(Double)columnCache.get(lih);
if (cachedWidth != null) {
columnWidth=cachedWidth.doubleValue() + 3 * dItemHeight / 2 + 2 * insCA.getLeft();
}
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),columnWidth,insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else if (o.getValue() == Orientation.HORIZONTAL) {
if (bPaletteByCategory) {
SeriesDefinition sdBase=null;
if (cm instanceof ChartWithAxes) {
final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
}
 else if (cm instanceof ChartWithoutAxes) {
if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
return;
}
sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
}
seBase=(Series)sdBase.getRunTimeSeries().get(0);
pa=sdBase.getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
for (int i=0; i < liha.length; i++) {
lih=liha[i];
if ((lih.getType() & IConstants.LEGEND_ENTRY) == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
fPaletteEntry=(Fill)elPaletteEntries.get(lih.getCategoryIndex() % iPaletteCount);
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
renderLegendItem(ipr,lg,la,null,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),0,lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
 else if (d.getValue() == Direction.TOP_BOTTOM) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),bo.getWidth(),Orientation.HORIZONTAL_LITERAL);
}
}
}
}
 else if (d.getValue() == Direction.LEFT_RIGHT) {
if (lilh.getLegendItemHints() == null) {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
}
LegendItemHints[] liha=lilh.getLegendItemHints();
LegendItemHints lih;
int k=0;
for (int j=0; j < seda.length; j++) {
al=seda[j].getRunTimeSeries();
pa=seda[j].getSeriesPalette();
elPaletteEntries=pa.getEntries();
iPaletteCount=elPaletteEntries.size();
for (int i=0; i < al.size(); i++) {
seBase=(Series)al.get(i);
if (!seBase.isVisible()) {
continue;
}
lirh=(LegendItemRenderingHints)htRenderers.get(seBase);
if (k < liha.length) {
lih=liha[k++];
if (lih.getType() == IConstants.LEGEND_ENTRY) {
la.getCaption().setValue(lih.getText());
Label valueLa=null;
if (lg.isShowValue()) {
valueLa=LabelImpl.copyInstance(seBase.getLabel());
valueLa.getCaption().setValue(lih.getExtraText());
valueLa.setVisible(true);
}
fPaletteEntry=(Fill)elPaletteEntries.get(i % iPaletteCount);
renderLegendItem(ipr,lg,la,valueLa,dBaseX + lih.getLeft(),dBaseY + lih.getTop() + insCA.getTop(),lih.getWidth(),dItemHeight,lih.getHeight(),lih.getExtraHeight(),lih.getWidth() + 3 * dItemHeight / 2 + 2 * insCA.getLeft(),insCA.getLeft(),dHorizontalSpacing,seBase,fPaletteEntry,lirh,i,dScale);
}
}
}
if (j < seda.length - 1 && k < liha.length) {
lih=liha[k];
if (lih.getType() == IConstants.LEGEND_SEPERATOR) {
k++;
renderSeparator(ipr,lg,liSep,dBaseX + lih.getLeft(),dBaseY + lih.getTop(),lih.getHeight(),Orientation.VERTICAL_LITERAL);
}
}
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{d.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
}
 else {
throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{o.getName()},Messages.getResourceBundle(rtc.getULocale()));
}
if (bRenderLegendTitle) {
double lX=bo.getLeft();
double lY=bo.getTop();
switch (iTitlePos) {
case Position.ABOVE:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() - lgTitleHeight;
break;
case Position.BELOW:
lX=bo.getLeft() + (bo.getWidth() - lgTitleWidth) / 2d;
lY=bo.getTop() + bo.getHeight();
break;
case Position.LEFT:
lX=bo.getLeft() - lgTitleWidth;
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
case Position.RIGHT:
lX=bo.getLeft() + bo.getWidth();
lY=bo.getTop() + (bo.getHeight() - lgTitleHeight) / 2d;
break;
}
final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(WrappedStructureSource.createLegendTitle(lg,lgTitle),TextRenderEvent.class);
tre.setBlockBounds(BoundsImpl.create(lX,lY,lgTitleWidth,lgTitleHeight));
TextAlignment ta=TextAlignmentImpl.create();
ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
tre.setBlockAlignment(ta);
tre.setLabel(lgTitle);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
ipr.drawText(tre);
}
itm.dispose();
}",0.9993085410215556
75786,"/** 
 * Initialize the resultClass. This method is lightweight.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initializeResultClass(DataEngineImpl dataEngine,Map appContext) throws DataException {
  try {
    IQueryResults left=getResultSetQuery(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
    IQueryResults right=getResultSetQuery(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
    JointResultMetadata meta=getJointResultMetadata(left.getResultMetaData(),right.getResultMetaData());
    resultClass=meta.getResultClass();
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Initialize the resultClass. This method is lightweight.
 * @param dataEngine
 * @param dataSetDesign
 * @param appContext
 * @throws DataException
 */
private void initializeResultClass(DataEngineImpl dataEngine,Map appContext) throws DataException {
  try {
    IQueryResults left=getResultSetQuery(dataEngine,dataSet.getLeftDataSetDesignName(),appContext,dataSet.getJoinConditions(),true);
    IResultMetaData leftMetaData=left.getResultMetaData();
    IQueryResults right=getResultSetQuery(dataEngine,dataSet.getRightDataSetDesignName(),appContext,dataSet.getJoinConditions(),false);
    IResultMetaData rightMetaData=right.getResultMetaData();
    JointResultMetadata meta=getJointResultMetadata(leftMetaData,rightMetaData);
    resultClass=meta.getResultClass();
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.8826466916354557
75787,"public Object getValue(){
  return value;
}","/** 
 * @return the value
 */
public Object getValue(){
  return value;
}",0.7413793103448276
75788,"public String getLabel(){
  return label;
}","/** 
 * @return the label
 */
public String getLabel(){
  return label;
}",0.7413793103448276
75789,"public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getCubeMeasure().getQualifiedName());
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}","public void run(){
  CrosstabReportItemHandle reportItem=getCrosstabReportItemHandle(getHandle());
  if (reportItem != null) {
    transStar(NAME);
    try {
      reportItem.removeMeasure(measureViewHandle.getCubeMeasureName());
    }
 catch (    SemanticException e) {
      rollBack();
      ExceptionHandler.handle(e);
      return;
    }
    transEnd();
  }
}",0.9798115746971736
75790,"public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
    boolean result=false;
    for (int i=0; i < ((Object[])transfer).length; i++) {
      result=performDrop(((Object[])transfer)[i],target,operation,location);
      if (!result)       return false;
    }
    return result;
  }
  for (Iterator iterator=this.dropAdapterList.iterator(); iterator.hasNext(); ) {
    IDropAdapter dropAdapter=(IDropAdapter)iterator.next();
    int result=dropAdapter.canDrop(transfer,target,operation,location);
    if (result == LOGIC_TRUE)     return dropAdapter.performDrop(transfer,target,operation,location);
  }
  return false;
}","public boolean performDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
    if (((Object[])transfer).length == 1) {
      return performDrop(((Object[])transfer)[0],target,operation,location);
    }
  }
  for (Iterator iterator=this.dropAdapterList.iterator(); iterator.hasNext(); ) {
    IDropAdapter dropAdapter=(IDropAdapter)iterator.next();
    int result=dropAdapter.canDrop(transfer,target,operation,location);
    if (result == LOGIC_TRUE)     return dropAdapter.performDrop(transfer,target,operation,location);
  }
  return false;
}",0.9029275808936826
75791,"public boolean validDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
    boolean canDrop=false;
    for (int i=0; i < ((Object[])transfer).length; i++) {
      canDrop=validDrop(((Object[])transfer)[i],target,operation,location);
      if (!canDrop)       return false;
    }
    return canDrop;
  }
  for (Iterator iterator=this.dropAdapterList.iterator(); iterator.hasNext(); ) {
    IDropAdapter dropAdapter=(IDropAdapter)iterator.next();
    int result=dropAdapter.canDrop(transfer,target,operation,location);
    if (result == LOGIC_TRUE)     return true;
    if (result == LOGIC_FALSE)     return false;
  }
  return false;
}","public boolean validDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (transfer instanceof Object[]) {
    if (((Object[])transfer).length == 1) {
      return validDrop(((Object[])transfer)[0],target,operation,location);
    }
  }
  for (Iterator iterator=this.dropAdapterList.iterator(); iterator.hasNext(); ) {
    IDropAdapter dropAdapter=(IDropAdapter)iterator.next();
    int result=dropAdapter.canDrop(transfer,target,operation,location);
    if (result == LOGIC_TRUE)     return true;
    if (result == LOGIC_FALSE)     return false;
  }
  return false;
}",0.8939157566302652
75792,"public boolean validDrag(Object object){
  if (object instanceof Object[]) {
    boolean canDrag=false;
    for (int i=0; i < ((Object[])object).length; i++) {
      canDrag=validDrag(((Object[])object)[i]);
      if (!canDrag)       return false;
    }
    return canDrag;
  }
  for (Iterator iterator=this.dragAdapterList.iterator(); iterator.hasNext(); ) {
    IDragAdapter dragAdapter=(IDragAdapter)iterator.next();
    int result=dragAdapter.canDrag(object);
    if (result == LOGIC_TRUE)     return true;
    if (result == LOGIC_FALSE)     return false;
  }
  return false;
}","public boolean validDrag(Object object){
  if (object instanceof Object[]) {
    if (((Object[])object).length == 1) {
      return validDrag(((Object[])object)[0]);
    }
  }
  for (Iterator iterator=this.dragAdapterList.iterator(); iterator.hasNext(); ) {
    IDragAdapter dragAdapter=(IDragAdapter)iterator.next();
    int result=dragAdapter.canDrag(object);
    if (result == LOGIC_TRUE)     return true;
    if (result == LOGIC_FALSE)     return false;
  }
  return false;
}",0.8716981132075472
75793,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      if (meta == null)       return;
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      if (meta == null)       return;
      if (this.getDataSetDesign().getPrimaryResultSet() == null) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}",0.9580246913580248
75794,"public void close() throws IOException {
  archiveReader.close();
}","public void close() throws IOException {
}",0.7706422018348624
75795,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      if (this.getDataSetDesign().getQueryText() == null || this.getDataSetDesign().getQueryText().trim().length() == 0)       return;
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      if (meta == null)       return;
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}",0.885022176731491
75796,"/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    String schemaPattern=null;
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=procedureName;
    if (procedureName.indexOf(""String_Node_Str"") > 0) {
      schemaPattern=procedureName.substring(0,procedureName.indexOf(""String_Node_Str""));
      procedureNamePattern=procedureName.substring(procedureName.indexOf(""String_Node_Str"") + 1);
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      schemaList=createSchemaList(metaData.getSchemas());
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
    }
  }
 catch (  SQLException e) {
  }
  return paramMetaDataList;
}","/** 
 * get parameter metadata from database matadata
 */
private java.util.List getCallableParamMetaData(){
  java.util.List paramMetaDataList=new ArrayList();
  try {
    DatabaseMetaData metaData=conn.getMetaData();
    String cataLog=conn.getCatalog();
    String schemaPattern=null;
    ArrayList schemaList=null;
    String columnNamePattern=null;
    String procedureNamePattern=procedureName;
    String packagePattern=""String_Node_Str"";
    if (procedureName.indexOf(""String_Node_Str"") > 0) {
      schemaPattern=procedureName.substring(0,procedureName.lastIndexOf(""String_Node_Str""));
      procedureNamePattern=procedureName.substring(procedureName.lastIndexOf(""String_Node_Str"") + 1);
    }
    if (!metaData.supportsCatalogsInProcedureCalls() && schemaPattern.indexOf(""String_Node_Str"") != -1) {
      packagePattern=schemaPattern.substring(schemaPattern.lastIndexOf(""String_Node_Str"") + 1);
      schemaPattern=schemaPattern.substring(0,schemaPattern.lastIndexOf(""String_Node_Str""));
    }
    if (schemaPattern != null) {
      schemaList=new ArrayList();
      schemaList.add(schemaPattern);
    }
 else {
      schemaList=createSchemaList(metaData.getSchemas());
    }
    if (schemaList == null || schemaList.size() == 0) {
      if (schemaList == null)       schemaList=new ArrayList();
      schemaList.add(""String_Node_Str"");
      columnNamePattern=""String_Node_Str"";
    }
    for (int i=0; i < schemaList.size(); i++) {
      java.sql.ResultSet rs=null;
      if (packagePattern.trim().length() > 0)       rs=metaData.getProcedureColumns(packagePattern,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
 else       rs=metaData.getProcedureColumns(cataLog,schemaList.get(i).toString(),procedureNamePattern,columnNamePattern);
      while (rs.next()) {
        ParameterDefn p=new ParameterDefn();
        p.setParamName(rs.getString(""String_Node_Str""));
        p.setParamInOutType(rs.getInt(""String_Node_Str""));
        p.setParamType(rs.getInt(""String_Node_Str""));
        p.setParamTypeName(rs.getString(""String_Node_Str""));
        p.setPrecision(rs.getInt(""String_Node_Str""));
        p.setScale(rs.getInt(""String_Node_Str""));
        p.setIsNullable(rs.getInt(""String_Node_Str""));
        if (p.getParamType() == Types.OTHER)         correctParamType(p);
        if (p.getParamInOutType() != 5)         paramMetaDataList.add(p);
      }
    }
  }
 catch (  SQLException e) {
  }
  return paramMetaDataList;
}",0.8745995423340961
75797,"private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  return ((ParameterDefn)getCallableParamMetaData().get(i)).getParamType();
}","private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  List paramMetaDataList=getCallableParamMetaData();
  if (paramMetaDataList != null && !paramMetaDataList.isEmpty())   return ((ParameterDefn)paramMetaDataList.get(i)).getParamType();
 else   return parameterDefn.getParameterType(i);
}",0.5933014354066986
75798,"/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if ((writer == null || reader == null) && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
}","/** 
 * @param mode
 * @param scope
 * @param reader
 * @param writer
 * @throws BirtException
 */
private DataEngineContext(int mode,Scriptable scope,IDocArchiveReader reader,IDocArchiveWriter writer) throws BirtException {
  Object[] params={new Integer(mode),scope,reader,writer};
  logger.entering(DataEngineContext.class.getName(),""String_Node_Str"",params);
  if (!(mode == MODE_GENERATION || mode == MODE_PRESENTATION || mode == DIRECT_PRESENTATION || mode == MODE_UPDATE))   throw new DataException(ResourceConstants.RD_INVALID_MODE);
  if (writer == null && mode == MODE_GENERATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if (reader == null && mode == MODE_PRESENTATION)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  if ((writer == null || reader == null) && mode == MODE_UPDATE)   throw new DataException(ResourceConstants.RD_INVALID_ARCHIVE);
  this.mode=mode;
  this.scope=scope;
  this.reader=reader;
  this.writer=writer;
  this.cacheOption=CACHE_USE_DEFAULT;
  logger.exiting(DataEngineContext.class.getName(),""String_Node_Str"");
}",0.8943911066195048
75799,"/** 
 * @param ri
 * @param scope
 * @param saveUtil
 * @param serviceForResultSet
 * @throws DataException 
 */
BindingColumnsEvalUtil(IResultIterator ri,Scriptable scope,RDSaveHelper saveUtil,List manualBindingExprs,Map autoBindingExprs) throws DataException {
  this.odiResult=ri;
  this.scope=scope;
  this.saveHelper=saveUtil;
  try {
    this.isBasedOnRD=ExprMetaUtil.isBasedOnRD(ri.getResultClass());
    if (this.isBasedOnRD == true)     this.evalHelper=new EvalHelper(ri);
  }
 catch (  DataException e) {
  }
  this.initBindingColumns(manualBindingExprs,autoBindingExprs);
}","/** 
 * @param ri
 * @param scope
 * @param saveUtil
 * @param serviceForResultSet
 * @throws DataException 
 */
BindingColumnsEvalUtil(IResultIterator ri,Scriptable scope,RDSaveHelper saveUtil,List manualBindingExprs,Map autoBindingExprs) throws DataException {
  Object[] params={ri,scope,saveUtil,manualBindingExprs,autoBindingExprs};
  logger.entering(BindingColumnsEvalUtil.class.getName(),""String_Node_Str"",params);
  this.odiResult=ri;
  this.scope=scope;
  this.saveHelper=saveUtil;
  try {
    this.isBasedOnRD=ExprMetaUtil.isBasedOnRD(ri.getResultClass());
    if (this.isBasedOnRD == true)     this.evalHelper=new EvalHelper(ri);
  }
 catch (  DataException e) {
  }
  this.initBindingColumns(manualBindingExprs,autoBindingExprs);
  logger.exiting(BindingColumnsEvalUtil.class.getName(),""String_Node_Str"");
}",0.8325017818959373
75800,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(DataEngineContext context,String queryResultID) throws DataException {
  this.context=context;
  this.queryResultID=queryResultID;
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  try {
    createCacheInputStream();
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream));
    }
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CacheResultIterator(DataEngineContext context,String queryResultID) throws DataException {
  Object[] params={context,queryResultID};
  logger.entering(CacheResultIterator.class.getName(),""String_Node_Str"",params);
  this.context=context;
  this.queryResultID=queryResultID;
  this.columnValueMap=new HashMap();
  this.currRowIndex=-1;
  try {
    createCacheInputStream();
    resultClass=new ResultClass(this.metaInputStream);
    rowCount=IOUtil.readInt(rowInputStream);
    int columnSize=IOUtil.readInt(rowInputStream);
    columnList=new ArrayList();
    for (int i=0; i < columnSize; i++) {
      columnList.add(IOUtil.readObject(rowInputStream));
    }
    logger.exiting(CacheResultIterator.class.getName(),""String_Node_Str"");
  }
 catch (  FileNotFoundException e) {
    throw new DataException(ResourceConstants.OPEN_CACHE_TEMPFILE_ERROR);
  }
catch (  IOException e) {
    throw new DataException(ResourceConstants.READ_CACHE_TEMPFILE_ERROR);
  }
}",0.8945416004239534
75801,"/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineContext context,String queryResultID) throws DataException {
  this.queryResultID=queryResultID;
  this.resultIterator=new CacheResultIterator(context,queryResultID);
}","/** 
 * @param context
 * @param queryResultID
 * @throws DataException
 */
public CachedQueryResults(DataEngineContext context,String queryResultID) throws DataException {
  Object[] params={context,queryResultID};
  logger.entering(CachedQueryResults.class.getName(),""String_Node_Str"",params);
  this.queryResultID=queryResultID;
  this.resultIterator=new CacheResultIterator(context,queryResultID);
  logger.exiting(CachedQueryResults.class.getName(),""String_Node_Str"");
}",0.609271523178808
75802,"ColumnInfo(int columnIndex,String columnName){
  this.columnIndex=columnIndex;
  this.columnName=columnName;
}","ColumnInfo(int columnIndex,String columnName){
  Object[] params={new Integer(columnIndex),columnName};
  logger.entering(ColumnInfo.class.getName(),""String_Node_Str"",params);
  this.columnIndex=columnIndex;
  this.columnName=columnName;
  logger.exiting(ColumnInfo.class.getName(),""String_Node_Str"");
}",0.5326876513317191
75803,"/** 
 * @param dataSet
 * @param dataSetCCList
 * @param resultSetCCList
 */
ComputedColumnHelper(DataSetRuntime dataSet,List dataSetCCList,List resultSetCCList){
  this.dataSetInstance=new ComputedColumnHelperInstance(dataSet,dataSetCCList);
  this.resultSetInstance=new ComputedColumnHelperInstance(dataSet,resultSetCCList);
  this.currentModel=TransformationConstants.DATA_SET_MODEL;
  this.allCC=new ArrayList();
  this.allCC.addAll(dataSetCCList);
  this.allCC.addAll(resultSetCCList);
}","/** 
 * @param dataSet
 * @param dataSetCCList
 * @param resultSetCCList
 */
ComputedColumnHelper(DataSetRuntime dataSet,List dataSetCCList,List resultSetCCList){
  Object[] params={dataSet,dataSetCCList,resultSetCCList};
  logger.entering(ComputedColumnHelper.class.getName(),""String_Node_Str"",params);
  this.dataSetInstance=new ComputedColumnHelperInstance(dataSet,dataSetCCList);
  this.resultSetInstance=new ComputedColumnHelperInstance(dataSet,resultSetCCList);
  this.currentModel=TransformationConstants.DATA_SET_MODEL;
  this.allCC=new ArrayList();
  this.allCC.addAll(dataSetCCList);
  this.allCC.addAll(resultSetCCList);
  logger.exiting(ComputedColumnHelper.class.getName(),""String_Node_Str"");
}",0.8206839032527106
75804,"/** 
 * Constructor to specify the DataEngine Context to use by the Data Engine for all related ReportQuery processing.
 * @param context scope of Context: The global JavaScript scope shared by all runtime components within a report sesssion. If this parameter is null, a new standard top level scope will be created and used.
 */
public DataEngineImpl(DataEngineContext context){
}","/** 
 * Constructor to specify the DataEngine Context to use by the Data Engine for all related ReportQuery processing.
 * @param context scope of Context: The global JavaScript scope shared by all runtime components within a report session. If this parameter is null, a new standard top level scope will be created and used.
 */
public DataEngineImpl(DataEngineContext context){
}",0.9986893840104848
75805,"/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineContext context,DataEngine engine){
  this.context=new HashMap();
  this.dataSetCacheManager=new DataSetCacheManager(context.getTmpdir(),engine);
  this.cacheUtil=new CacheUtil(context.getTmpdir());
  this.engine=engine;
  this.scope=context.getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
}","/** 
 * Constructor.
 * @param engine
 */
public DataEngineSession(DataEngineContext context,DataEngine engine){
  Object[] params={context,engine};
  logger.entering(DataEngineSession.class.getName(),""String_Node_Str"",params);
  this.context=new HashMap();
  this.dataSetCacheManager=new DataSetCacheManager(context.getTmpdir(),engine);
  this.cacheUtil=new CacheUtil(context.getTmpdir());
  this.engine=engine;
  this.scope=context.getJavaScriptScope();
  Context cx=Context.enter();
  if (this.scope == null) {
    this.scope=new ImporterTopLevel(cx);
  }
  new CoreJavaScriptInitializer().initialize(cx,scope);
  Context.exit();
  logger.exiting(DataEngineSession.class.getName(),""String_Node_Str"");
}",0.8480392156862745
75806,"protected DataSetRuntime(IBaseDataSetDesign dataSetDesign,IQueryExecutor queryExecutor){
  this.dataSetDesign=dataSetDesign;
  this.queryExecutor=queryExecutor;
  isOpen=true;
  if (dataSetDesign != null)   eventHandler=dataSetDesign.getEventHandler();
  if (dataSetDesign != null) {
    List params=dataSetDesign.getParameters();
    if (params != null) {
      Iterator it=params.iterator();
      while (it.hasNext()) {
        IParameterDefinition param=(IParameterDefinition)it.next();
        String name=param.getName();
        if (name != null) {
          if (param.isInputMode())           inParamValues.put(name,UNSET_VALUE);
          if (param.isOutputMode())           outParamValues.put(name,UNSET_VALUE);
        }
      }
    }
  }
  if (eventHandler == null) {
    if (dataSetDesign instanceof IScriptDataSetDesign)     eventHandler=new ScriptDataSetJSEventHandler((IScriptDataSetDesign)dataSetDesign);
 else     if (dataSetDesign instanceof IOdaDataSetDesign)     eventHandler=new DataSetJSEventHandler(dataSetDesign);
  }
}","protected DataSetRuntime(IBaseDataSetDesign dataSetDesign,IQueryExecutor queryExecutor){
  Object[] parameters={dataSetDesign,queryExecutor};
  logger.entering(DataSetRuntime.class.getName(),""String_Node_Str"",parameters);
  this.dataSetDesign=dataSetDesign;
  this.queryExecutor=queryExecutor;
  isOpen=true;
  if (dataSetDesign != null)   eventHandler=dataSetDesign.getEventHandler();
  if (dataSetDesign != null) {
    List params=dataSetDesign.getParameters();
    if (params != null) {
      Iterator it=params.iterator();
      while (it.hasNext()) {
        IParameterDefinition param=(IParameterDefinition)it.next();
        String name=param.getName();
        if (name != null) {
          if (param.isInputMode())           inParamValues.put(name,UNSET_VALUE);
          if (param.isOutputMode())           outParamValues.put(name,UNSET_VALUE);
        }
      }
    }
  }
  if (eventHandler == null) {
    if (dataSetDesign instanceof IScriptDataSetDesign)     eventHandler=new ScriptDataSetJSEventHandler((IScriptDataSetDesign)dataSetDesign);
 else     if (dataSetDesign instanceof IOdaDataSetDesign)     eventHandler=new DataSetJSEventHandler(dataSetDesign);
  }
  logger.exiting(DataSetRuntime.class.getName(),""String_Node_Str"");
}",0.91218872870249
75807,"/** 
 * @param scope
 */
public ExecutorHelper(IExecutorHelper parent){
  this.parent=parent;
}","/** 
 * @param scope
 */
public ExecutorHelper(IExecutorHelper parent){
  logger.entering(ExecutorHelper.class.getName(),""String_Node_Str"",parent);
  this.parent=parent;
  logger.exiting(ExecutorHelper.class.getName(),""String_Node_Str"");
}",0.5688622754491018
75808,"/** 
 * No external instance
 */
private ExprManagerUtil(ExprManager em){
  this.exprManager=em;
}","/** 
 * No external instance
 */
private ExprManagerUtil(ExprManager em){
  logger.entering(ExprManagerUtil.class.getName(),""String_Node_Str"",em);
  this.exprManager=em;
  logger.exiting(ExprManagerUtil.class.getName(),""String_Node_Str"");
}",0.5798816568047337
75809,"/** 
 * @param dataSetFilters
 * @param queryFilters
 * @param dataSet
 * @throws DataException
 */
FilterByRow(List dataSetFilters,List queryFilters,List groupFilters,DataSetRuntime dataSet) throws DataException {
  isLegal(dataSetFilters);
  isLegal(queryFilters);
  this.dataSet=dataSet;
  this.dataSetFilters=FilterUtil.sortFilters(dataSetFilters);
  this.queryFilters=FilterUtil.sortFilters(queryFilters);
  this.groupFilters=groupFilters;
  this.allFilters=getAllFilters(dataSetFilters,queryFilters);
  this.currentWorkingFilters=ALL_ROW_FILTER;
  logger.log(Level.FINER,""String_Node_Str"");
}","/** 
 * @param dataSetFilters
 * @param queryFilters
 * @param dataSet
 * @throws DataException
 */
FilterByRow(List dataSetFilters,List queryFilters,List groupFilters,DataSetRuntime dataSet) throws DataException {
  Object[] params={dataSetFilters,queryFilters,groupFilters,dataSet};
  logger.entering(FilterByRow.class.getName(),""String_Node_Str"",params);
  isLegal(dataSetFilters);
  isLegal(queryFilters);
  this.dataSet=dataSet;
  this.dataSetFilters=FilterUtil.sortFilters(dataSetFilters);
  this.queryFilters=FilterUtil.sortFilters(queryFilters);
  this.groupFilters=groupFilters;
  this.allFilters=getAllFilters(dataSetFilters,queryFilters);
  this.currentWorkingFilters=ALL_ROW_FILTER;
  logger.exiting(FilterByRow.class.getName(),""String_Node_Str"");
  logger.log(Level.FINER,""String_Node_Str"");
}",0.8518518518518519
75810,"/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (!isEqualString(dataSetDesign.getName(),dataSetDesign2.getName()))   return false;
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}","/** 
 * compare data set design
 * @param dataSetDesign
 * @param dataSetDesign2
 * @return
 */
private boolean isEqualDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign == dataSetDesign2)   return true;
  if (dataSetDesign == null || dataSetDesign2 == null)   return false;
  if (!isEqualString(dataSetDesign.getName(),dataSetDesign2.getName()))   return false;
  if (dataSetDesign.getRowFetchLimit() != dataSetDesign2.getRowFetchLimit()) {
    return false;
  }
  if (isEqualString(dataSetDesign.getBeforeOpenScript(),dataSetDesign2.getBeforeOpenScript()) == false || isEqualString(dataSetDesign.getAfterOpenScript(),dataSetDesign2.getAfterOpenScript()) == false || isEqualString(dataSetDesign.getBeforeCloseScript(),dataSetDesign2.getBeforeCloseScript()) == false || isEqualString(dataSetDesign.getAfterCloseScript(),dataSetDesign2.getAfterCloseScript()) == false)   return false;
  if (isEqualComputedColumns(dataSetDesign.getComputedColumns(),dataSetDesign2.getComputedColumns()) == false || isEqualFilters(dataSetDesign.getFilters(),dataSetDesign2.getFilters()) == false || isEqualParameters(dataSetDesign.getParameters(),dataSetDesign2.getParameters()) == false || isEqualResultHints(dataSetDesign.getResultSetHints(),dataSetDesign2.getResultSetHints()) == false)   return false;
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
  }
 else {
    return false;
  }
  return true;
}",0.9843337986660462
75811,"protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (sorttingArea.isVisible()) {
      if (!sortKeyChooser.getText().equals(CHOICE_NONE)) {
        inputParameter.setFixedOrder(false);
        inputParameter.setDistinct(!distinct.getSelection());
        if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
 else {
        inputParameter.setFixedOrder(true);
        inputParameter.setSortBy(null);
        inputParameter.setSortDirection(null);
        inputParameter.setDistinct(false);
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (sorttingArea != null && sorttingArea.isVisible()) {
      if (!sortKeyChooser.getText().equals(CHOICE_NONE)) {
        inputParameter.setFixedOrder(false);
        inputParameter.setDistinct(!distinct.getSelection());
        if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
 else {
        inputParameter.setFixedOrder(true);
        inputParameter.setSortBy(null);
        inputParameter.setSortDirection(null);
        inputParameter.setDistinct(false);
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}",0.997650283924026
75812,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param items
 * @throws SemanticException
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws SemanticException {
  DataSessionContext context=null;
  try {
    context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    drSession.refreshMetaData(dataSetHandle,holdEvent);
  }
 catch (  BirtException e) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{e});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param items
 * @throws SemanticException
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws SemanticException {
  DataSessionContext context=null;
  try {
    context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    drSession.refreshMetaData(dataSetHandle,holdEvent);
    drSession.shutdown();
  }
 catch (  BirtException e) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{e});
  }
}",0.980030721966206
75813,"/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,Map appContext,boolean clearCache) throws BirtException {
  this.populateAllOutputColumns(dataSet);
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
  context.setAppContext(appContext);
  DataRequestSession session=DataRequestSession.newSession(context);
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}","/** 
 * @param dataSet
 * @param queryDefn
 * @param useColumnHints
 * @return
 * @throws BirtException
 */
public IQueryResults execute(DataSetHandle dataSet,QueryDefinition queryDefn,boolean useColumnHints,boolean useFilters,Map appContext,boolean clearCache,DataRequestSession session) throws BirtException {
  this.populateAllOutputColumns(dataSet,session);
  IBaseDataSetDesign dataSetDesign=session.getModelAdaptor().adaptDataSet(dataSet);
  if (clearCache) {
    IBaseDataSourceDesign dataSourceDesign=session.getModelAdaptor().adaptDataSource(dataSet.getDataSource());
    session.clearCache(dataSourceDesign,dataSetDesign);
  }
  if (!useColumnHints) {
    dataSetDesign.getResultSetHints().clear();
  }
  if (!useFilters) {
    dataSetDesign.getFilters().clear();
  }
  IQueryResults resultSet=executeQuery(session,queryDefn);
  saveResultToDataItems(dataSet,resultSet);
  return resultSet;
}",0.8684342171085543
75814,"/** 
 * @param dataSet
 * @param refresh
 * @param useColumnHints Only applicable if the list is refreshed.
 * @return
 */
public DataSetViewData[] getColumns(DataSetHandle dataSet,boolean refresh,boolean useColumnHints,boolean suppressErrorMessage){
  if (dataSet == null) {
    return new DataSetViewData[0];
  }
  DataSetViewData[] columns=(DataSetViewData[])htColumns.get(dataSet);
  if (!refresh && columns == null) {
    columns=getCachedColumns(dataSet);
  }
  if (columns == null || refresh) {
    columns=null;
    try {
      boolean canExecute=true;
      if (dataSet instanceof OdaDataSetHandle) {
        String queryTxt=((OdaDataSetHandle)dataSet).getQueryText();
        canExecute=(queryTxt != null && queryTxt.trim().length() > 0);
      }
      if (canExecute) {
        IQueryResults results=execute(dataSet,useColumnHints,true,1);
        if (results != null) {
          results.close();
        }
        columns=(DataSetViewData[])htColumns.get(dataSet);
      }
    }
 catch (    BirtException e) {
      if (!suppressErrorMessage) {
        ExceptionHandler.handle(e);
      }
    }
  }
  if (columns == null) {
    columns=new DataSetViewData[]{};
    updateModel(dataSet,columns);
    htColumns.put(dataSet,columns);
  }
  return columns;
}","/** 
 * @param dataSet
 * @param refresh
 * @param useColumnHints Only applicable if the list is refreshed.
 * @return
 */
public DataSetViewData[] getColumns(DataSetHandle dataSet,boolean refresh,boolean useColumnHints,boolean suppressErrorMessage){
  if (dataSet == null) {
    return new DataSetViewData[0];
  }
  DataSetViewData[] columns=(DataSetViewData[])htColumns.get(dataSet);
  if (!refresh && columns == null) {
    columns=getCachedColumns(dataSet);
  }
  if (columns == null || refresh) {
    columns=null;
    try {
      DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSet.getModuleHandle());
      DataRequestSession session=DataRequestSession.newSession(context);
      boolean canExecute=true;
      if (dataSet instanceof OdaDataSetHandle) {
        String queryTxt=((OdaDataSetHandle)dataSet).getQueryText();
        canExecute=(queryTxt != null && queryTxt.trim().length() > 0);
      }
      if (canExecute) {
        IQueryResults results=execute(dataSet,useColumnHints,true,1,session);
        if (results != null) {
          results.close();
        }
        columns=(DataSetViewData[])htColumns.get(dataSet);
      }
      session.shutdown();
    }
 catch (    BirtException e) {
      if (!suppressErrorMessage) {
        ExceptionHandler.handle(e);
      }
    }
  }
  if (columns == null) {
    columns=new DataSetViewData[]{};
    updateModel(dataSet,columns);
    htColumns.put(dataSet,columns);
  }
  return columns;
}",0.9151318165402672
75815,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle) throws BirtException {
  DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,dataSetHandle.getModuleHandle());
  DataRequestSession session=DataRequestSession.newSession(context);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(metaData.getColumnTypeName(i + 1));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(metaData.getColumnTypeName(i + 1));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.8899707887049659
75816,"/** 
 * @throws IOException
 */
public void testGetContent() throws IOException {
  byte[] b=new byte[12345];
  Arrays.fill(b,(byte)3);
  DummyOutputStream stream=new DummyOutputStream();
  stream.write(b);
  assertEquals(b.length,stream.toByteArray().length);
  assertTrue(Arrays.equals(b,stream.toByteArray()));
}","/** 
 * @throws IOException
 */
public void testGetContent() throws IOException {
  byte[] b=new byte[12345];
  Arrays.fill(b,(byte)3);
  DummyOutputStream stream=new DummyOutputStream(null,null,0);
  stream.write(b);
  assertEquals(b.length,stream.toByteArray().length);
  assertTrue(Arrays.equals(b,stream.toByteArray()));
}",0.982839313572543
75817,"public void saveFinish(int currIndex) throws DataException {
  if (rowSaveUtil == null)   this.initSaveRowUtil();
  exprNameSet=rowSaveUtil.getExprNameSet();
  rowSaveUtil.saveFinish(currIndex);
  this.closeSaveRowUtil();
  this.saveForIV();
  this.streamManager.saveToReportDocument();
}","public void saveFinish(int currIndex) throws DataException {
  if (rowSaveUtil == null)   this.initSaveRowUtil();
  exprNameSet=rowSaveUtil.getExprNameSet();
  rowSaveUtil.saveFinish(currIndex);
  this.closeSaveRowUtil();
  this.saveForIV();
}",0.9152542372881356
75818,"public void saveFinish(int currIndex) throws DataException {
  this.saveUtilHelper.saveChildQueryID();
  this.streamManager.saveToReportDocument();
}","public void saveFinish(int currIndex) throws DataException {
  this.saveUtilHelper.saveChildQueryID();
}",0.8221343873517787
75819,"DummyOutputStream(){
  this.cachedByteArray=new ArrayList();
  this.currentArray=new byte[BUFF_SIZE];
  this.cachedByteArray.add(this.currentArray);
  this.nextArrayIndex=0;
  this.currentListIndex=0;
}","DummyOutputStream(DataEngineContext context,StreamID id,int type){
  this.cachedByteArray=new ArrayList();
  this.currentArray=new byte[BUFF_SIZE];
  this.cachedByteArray.add(this.currentArray);
  this.nextArrayIndex=0;
  this.currentListIndex=0;
  this.context=context;
  this.id=id;
  this.type=type;
}",0.7984189723320159
75820,"/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return false;
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return true;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
default :
return false;
}
}","/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return false;
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
default :
return false;
}
}",0.9780594831789372
75821,"/** 
 * @return
 */
int getVersion(){
  int version=VERSION_2_2_1;
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return version;
}","/** 
 * @return
 */
int getVersion(){
  int version=this.getLatestVersion();
  if (dataEngineContext.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
    version=VERSION_2_0;
    return version;
  }
  try {
    DataInputStream is=new DataInputStream(dataEngineContext.getInputStream(null,null,DataEngineContext.VERSION_INFO_STREAM));
    version=IOUtil.readInt(is);
  }
 catch (  DataException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return version;
}",0.9673704414587332
75822,"/** 
 * @param groupSpecs
 * @param i
 */
static int getTempComputedColumnType(int i){
  int interval=i;
  if (interval == IQuery.GroupSpec.DAY_INTERVAL || interval == IQuery.GroupSpec.HOUR_INTERVAL || interval == IQuery.GroupSpec.MINUTE_INTERVAL || interval == IQuery.GroupSpec.SECOND_INTERVAL || interval == IQuery.GroupSpec.MONTH_INTERVAL || interval == IQuery.GroupSpec.QUARTER_INTERVAL || interval == IQuery.GroupSpec.YEAR_INTERVAL || interval == IQuery.GroupSpec.WEEK_INTERVAL)   interval=DataType.DATE_TYPE;
 else   if (interval == IQuery.GroupSpec.NUMERIC_INTERVAL)   interval=DataType.DOUBLE_TYPE;
 else   if (interval == IQuery.GroupSpec.STRING_PREFIX_INTERVAL)   interval=DataType.STRING_TYPE;
 else   interval=DataType.ANY_TYPE;
  return interval;
}","/** 
 * @param groupSpecs
 * @param i
 */
static int getTempComputedColumnType(int i){
  int interval=i;
  if (interval == IQuery.GroupSpec.DAY_INTERVAL || interval == IQuery.GroupSpec.HOUR_INTERVAL || interval == IQuery.GroupSpec.MINUTE_INTERVAL || interval == IQuery.GroupSpec.SECOND_INTERVAL || interval == IQuery.GroupSpec.MONTH_INTERVAL || interval == IQuery.GroupSpec.QUARTER_INTERVAL || interval == IQuery.GroupSpec.YEAR_INTERVAL || interval == IQuery.GroupSpec.WEEK_INTERVAL || interval == IQuery.GroupSpec.NUMERIC_INTERVAL)   interval=DataType.DOUBLE_TYPE;
 else   if (interval == IQuery.GroupSpec.STRING_PREFIX_INTERVAL)   interval=DataType.STRING_TYPE;
 else   interval=DataType.ANY_TYPE;
  return interval;
}",0.9669142471303174
75823,"public void testDiskIndexString4() throws IOException, DataException {
  int keyNumber=100000;
  BufferedStructureArray keyList=new BufferedStructureArray(IndexKey.getCreator(),keyNumber);
  IndexKey key=null;
  for (int i=1; i < keyNumber; i++) {
    key=new IndexKey();
    key.setKey(new Object[]{""String_Node_Str"" + new Integer(i).toString()});
    key.setDimensionPos(i);
    key.setOffset(i * 4);
    keyList.add(key);
  }
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  DiskIndex indexTree=DiskIndex.createIndex(DocumentManagerFactory.createFileDocumentManager(),""String_Node_Str"",3,keyList,false);
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  Object[][] selectedObjs1={{""String_Node_Str"" + new Integer(0).toString()},{""String_Node_Str"" + new Integer(100).toString()},{""String_Node_Str"" + new Integer(101).toString()},{""String_Node_Str"" + new Integer(102).toString()},{""String_Node_Str"" + new Integer(110).toString()},{""String_Node_Str"" + new Integer(121).toString()},{""String_Node_Str"" + new Integer(122).toString()},{""String_Node_Str"" + new Integer(134).toString()}};
  Object[][] selectedObjs2={{""String_Node_Str"" + new Integer(9999).toString()},{""String_Node_Str"" + new Integer(99999).toString()},{""String_Node_Str"" + new Integer(999999).toString()}};
  int[] resultObjs1={100,101,102,110,121,122,134};
  int[] resultObjs2={9999,99999};
  ISelection[] selections=new ISelection[5];
  selections[0]=SelectionFactory.createMutiRowSelection(selectedObjs1);
  selections[1]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str"" + new Integer(20000).toString()},new Object[]{""String_Node_Str"" + new Integer(20100).toString()},true,true);
  selections[2]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str"" + new Integer(30000).toString()},new Object[]{""String_Node_Str"" + new Integer(30900).toString()},false,true);
  selections[3]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str"" + new Integer(40000).toString()},new Object[]{""String_Node_Str"" + new Integer(42001).toString()},true,false);
  selections[4]=SelectionFactory.createMutiRowSelection(selectedObjs2);
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  IDiskArray list=null;
  for (int i=0; i < 1; i++) {
    list=indexTree.find(selections);
  }
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  assertEquals(list.size(),3343);
  for (int i=0; i < resultObjs1.length; i++) {
    key=(IndexKey)list.get(i);
    assertEquals(key.getKey()[0],""String_Node_Str"" + new Integer(resultObjs1[i]).toString());
    assertEquals(key.getDimensionPos(),resultObjs1[i]);
    assertEquals(key.getOffset(),(resultObjs1[i]) * 4);
  }
  for (int i=0; i < 101; i++) {
    key=(IndexKey)list.get(resultObjs1.length + i);
    assertEquals(key.getDimensionPos(),new Integer(key.getKey()[0].toString().substring(15)).intValue());
    assertEquals(key.getOffset(),(new Integer(key.getKey()[0].toString().substring(15)).intValue()) * 4);
  }
  for (int i=0; i < resultObjs2.length; i++) {
    key=(IndexKey)list.get(list.size() - resultObjs2.length + i);
    assertEquals(key.getKey()[0],""String_Node_Str"" + new Integer(resultObjs2[i]).toString());
    assertEquals(key.getDimensionPos(),resultObjs2[i]);
    assertEquals(key.getOffset(),(resultObjs2[i]) * 4);
  }
}","public void testDiskIndexString4() throws IOException, DataException {
  int keyNumber=100000;
  BufferedStructureArray keyList=new BufferedStructureArray(IndexKey.getCreator(),4000);
  IndexKey key=null;
  for (int i=1; i < keyNumber; i++) {
    key=new IndexKey();
    key.setKey(new Object[]{""String_Node_Str"" + new Integer(i).toString()});
    key.setDimensionPos(i);
    key.setOffset(i * 4);
    keyList.add(key);
  }
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  DiskIndex indexTree=DiskIndex.createIndex(DocumentManagerFactory.createFileDocumentManager(),""String_Node_Str"",3,keyList,false);
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  Object[][] selectedObjs1={{""String_Node_Str"" + new Integer(0).toString()},{""String_Node_Str"" + new Integer(100).toString()},{""String_Node_Str"" + new Integer(101).toString()},{""String_Node_Str"" + new Integer(102).toString()},{""String_Node_Str"" + new Integer(110).toString()},{""String_Node_Str"" + new Integer(121).toString()},{""String_Node_Str"" + new Integer(122).toString()},{""String_Node_Str"" + new Integer(134).toString()}};
  Object[][] selectedObjs2={{""String_Node_Str"" + new Integer(9999).toString()},{""String_Node_Str"" + new Integer(99999).toString()},{""String_Node_Str"" + new Integer(999999).toString()}};
  int[] resultObjs1={100,101,102,110,121,122,134};
  int[] resultObjs2={9999,99999};
  ISelection[] selections=new ISelection[5];
  selections[0]=SelectionFactory.createMutiRowSelection(selectedObjs1);
  selections[1]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str"" + new Integer(20000).toString()},new Object[]{""String_Node_Str"" + new Integer(20100).toString()},true,true);
  selections[2]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str"" + new Integer(30000).toString()},new Object[]{""String_Node_Str"" + new Integer(30900).toString()},false,true);
  selections[3]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str"" + new Integer(40000).toString()},new Object[]{""String_Node_Str"" + new Integer(42001).toString()},true,false);
  selections[4]=SelectionFactory.createMutiRowSelection(selectedObjs2);
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  IDiskArray list=null;
  for (int i=0; i < 1; i++) {
    list=indexTree.find(selections);
  }
  System.out.println(""String_Node_Str"" + System.currentTimeMillis() / 100);
  assertEquals(list.size(),3343);
  for (int i=0; i < resultObjs1.length; i++) {
    key=(IndexKey)list.get(i);
    assertEquals(key.getKey()[0],""String_Node_Str"" + new Integer(resultObjs1[i]).toString());
    assertEquals(key.getDimensionPos(),resultObjs1[i]);
    assertEquals(key.getOffset(),(resultObjs1[i]) * 4);
  }
  for (int i=0; i < 101; i++) {
    key=(IndexKey)list.get(resultObjs1.length + i);
    assertEquals(key.getDimensionPos(),new Integer(key.getKey()[0].toString().substring(15)).intValue());
    assertEquals(key.getOffset(),(new Integer(key.getKey()[0].toString().substring(15)).intValue()) * 4);
  }
  for (int i=0; i < resultObjs2.length; i++) {
    key=(IndexKey)list.get(list.size() - resultObjs2.length + i);
    assertEquals(key.getKey()[0],""String_Node_Str"" + new Integer(resultObjs2[i]).toString());
    assertEquals(key.getDimensionPos(),resultObjs2[i]);
    assertEquals(key.getOffset(),(resultObjs2[i]) * 4);
  }
}",0.9980737887094384
75824,"/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
  }
}","/** 
 * refresh page
 */
private void refreshPage(){
  DataSourceDesign curDataSourceDesign=this.getDataSetDesign().getDataSourceDesign();
  if (curDataSourceDesign != prevDataSourceDesign) {
    RemoveAllAvailableDbObjects();
    resetJdbcInfo(curDataSourceDesign);
    enableSchemaComponent(isSchemaSupported);
    setRootElement();
    sourceViewerConfiguration.getContentAssistProcessor().setDataSourceHandle(curDataSourceDesign);
    populateAvailableDbObjects();
    prevDataSourceDesign=curDataSourceDesign;
    try {
      ResultSetMetaData meta=this.metaDataProvider.getConnection().prepareStatement(this.getDataSetDesign().getQueryText()).getMetaData();
      ResultSetColumns rsc=this.getDataSetDesign().getPrimaryResultSet().getResultSetColumns();
      if (meta.getColumnCount() != rsc.getResultColumnDefinitions().size()) {
        this.shouldUpdateDataSetDesign=true;
        return;
      }
      for (int i=0; i < rsc.getResultColumnDefinitions().size(); i++) {
        ColumnDefinition cd=(ColumnDefinition)rsc.getResultColumnDefinitions().get(i);
        if (!(cd.getAttributes().getName().equals(meta.getColumnName(i + 1)) && cd.getAttributes().getNativeDataTypeCode() == meta.getColumnType(i + 1))) {
          this.shouldUpdateDataSetDesign=true;
          return;
        }
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
}",0.5476566614007372
75825,"protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (!formerQueryTxt.equals(design.getQueryText())) {
    SQLUtility.saveDataSetDesign(design);
    formerQueryTxt=design.getQueryText();
  }
  return design;
}","protected DataSetDesign collectDataSetDesign(DataSetDesign design){
  if (design != null && doc != null)   design.setQueryText(doc.get());
  if (this.shouldUpdateDataSetDesign || !formerQueryTxt.equals(design.getQueryText())) {
    SQLUtility.saveDataSetDesign(design);
    formerQueryTxt=design.getQueryText();
    this.shouldUpdateDataSetDesign=false;
  }
  return design;
}",0.8875739644970414
75826,"private void drawPropertyCombo(Group propertyGroup,final String propertyName,String propertyContent){
  GridData gd;
  final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
  propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
  if (propertyContent != null) {
    propertyField.setText(propertyContent);
    databaseProperties.put(propertyName,propertyContent);
  }
 else   propertyField.setText(EMPTY_STRING);
  propertyField.addSelectionListener(new SelectionListener(){
    @Override public void widgetSelected(    SelectionEvent arg0){
      if (propertyField.getSelectionIndex() == 1) {
        databaseProperties.put(propertyName,""String_Node_Str"");
      }
 else       if (propertyField.getSelectionIndex() == 2) {
        databaseProperties.put(propertyName,""String_Node_Str"");
      }
 else {
        databaseProperties.put(propertyName,EMPTY_STRING);
      }
    }
    @Override public void widgetDefaultSelected(    SelectionEvent arg0){
      databaseProperties.put(propertyName,EMPTY_STRING);
    }
  }
);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  gd.horizontalAlignment=SWT.FILL;
  propertyField.setLayoutData(gd);
  propertyField.getParent().layout();
}","private void drawPropertyCombo(Group propertyGroup,final String propertyName,String propertyContent){
  GridData gd;
  final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
  propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
  if (propertyContent != null) {
    propertyField.setText(propertyContent);
    databaseProperties.put(propertyName,propertyContent);
  }
 else   propertyField.setText(EMPTY_STRING);
  propertyField.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent arg0){
      if (propertyField.getSelectionIndex() == 1) {
        databaseProperties.put(propertyName,""String_Node_Str"");
      }
 else       if (propertyField.getSelectionIndex() == 2) {
        databaseProperties.put(propertyName,""String_Node_Str"");
      }
 else {
        databaseProperties.put(propertyName,EMPTY_STRING);
      }
    }
    public void widgetDefaultSelected(    SelectionEvent arg0){
      databaseProperties.put(propertyName,EMPTY_STRING);
    }
  }
);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=3;
  gd.horizontalAlignment=SWT.FILL;
  propertyField.setLayoutData(gd);
  propertyField.getParent().layout();
}",0.991980753809142
75827,"@Override public void widgetDefaultSelected(SelectionEvent arg0){
  databaseProperties.put(propertyName,EMPTY_STRING);
}","public void widgetDefaultSelected(SelectionEvent arg0){
  databaseProperties.put(propertyName,EMPTY_STRING);
}",0.9565217391304348
75828,"Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.verticalSpacing=10;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getDrivers();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyText.setLayoutData(gd);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        @Override public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        @Override public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setMinWidth(size.x + 10);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}","Composite createCustomControl(Composite parent){
  ScrolledComposite scrollContent=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  scrollContent.setAlwaysShowScrollBars(false);
  scrollContent.setExpandHorizontal(true);
  scrollContent.setLayout(new FillLayout());
  Composite content=new Composite(scrollContent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  layout.verticalSpacing=10;
  layout.marginBottom=300;
  content.setLayout(layout);
  GridData gridData;
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  driverChooserCombo=new ComboViewer(content,SWT.DROP_DOWN);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  driverChooserCombo.getControl().setLayoutData(gridData);
  List driverListTmp1=JdbcToolKit.getJdbcDriversFromODADir(JDBC_EXTENSION_ID);
  JDBCDriverInformation[] driverListTmp2=JDBCDriverInfoManager.getDrivers();
  List driverList=new ArrayList();
  for (  Object driverInfo : driverListTmp1) {
    if (needCheckHide(driverListTmp2,(JDBCDriverInformation)driverInfo)) {
      if (!((JDBCDriverInformation)driverInfo).getHide()) {
        driverList.add(driverInfo);
      }
    }
 else {
      driverList.add(driverInfo);
    }
  }
  driverChooserCombo.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement != null) {
        return ((ArrayList)inputElement).toArray();
      }
      return new JDBCDriverInformation[]{};
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  driverChooserCombo.setLabelProvider(new LabelProvider(){
    public String getText(    Object inputElement){
      JDBCDriverInformation info=(JDBCDriverInformation)inputElement;
      return info.getDisplayString();
    }
  }
);
  driverChooserCombo.setInput(sortDriverList(driverList));
  driverChooserCombo.addSelectionChangedListener(new ISelectionChangedListener(){
    private String driverClassName;
    public void selectionChanged(    SelectionChangedEvent event){
      StructuredSelection selection=(StructuredSelection)event.getSelection();
      final JDBCDriverInformation info=(JDBCDriverInformation)selection.getFirstElement();
      String className=(info != null) ? info.getDriverClassName() : EMPTY_STRING;
      if (className.equalsIgnoreCase(driverClassName) == true)       return;
      driverClassName=className;
      if (info != null) {
        if (info.getUrlFormat() != null) {
          jdbcUrl.setText(info.getUrlFormat());
        }
 else {
          jdbcUrl.setText(EMPTY_STRING);
        }
        ((GridData)porpertyGroupComposite.getLayoutData()).exclude=true;
        porpertyGroupComposite.setVisible(false);
        porpertyGroupComposite.getParent().layout();
        Control[] children=porpertyGroupComposite.getChildren();
        for (int i=0; i < children.length; i++) {
          children[i].dispose();
        }
        if (info.hasProperty()) {
          drawPropertyGroups(info);
        }
        porpertyGroupComposite.getParent().layout();
      }
      jndiName.setText(EMPTY_STRING);
      userName.setText(EMPTY_STRING);
      password.setText(EMPTY_STRING);
      updateTestButton();
    }
    private void drawPropertyGroups(    final JDBCDriverInformation info){
      ((GridData)porpertyGroupComposite.getLayoutData()).exclude=false;
      porpertyGroupComposite.setVisible(true);
      ((GridData)porpertyGroupComposite.getLayoutData()).heightHint=SWT.DEFAULT;
      databaseProperties.clear();
      List<PropertyGroup> propertyGroups=info.getPropertyGroup();
      for (Iterator it=propertyGroups.iterator(); it.hasNext(); ) {
        PropertyGroup group=(PropertyGroup)(it.next());
        String propertyGroupName=group.getName();
        List<PropertyElement> propertyList=group.getProperties();
        Group propertyGroup=drawPropertyGroup(propertyGroupName == null ? EMPTY_STRING : propertyGroupName);
        for (int i=0; i < propertyList.size(); i++) {
          final String propertyName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_NAME);
          Label propertyParam=new Label(propertyGroup,SWT.NONE);
          String propertyParamDisplayName=propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DISPLAYNAME);
          if (propertyParamDisplayName == null) {
            propertyParamDisplayName=propertyName;
          }
          propertyParam.setText(propertyParamDisplayName);
          propertyParam.setToolTipText(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_DEC));
          GridData gd=new GridData();
          gd.horizontalSpan=2;
          propertyParam.setLayoutData(gd);
          String propertyContent=null;
          if (profileProperties != null && !profileProperties.isEmpty()) {
            propertyContent=getProfileproperty(propertyName);
          }
          if (Constants.DRIVER_INFO_PROPERTY_TYPE_BOOLEN.equalsIgnoreCase(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_TYPE))) {
            drawPropertyCombo(propertyGroup,propertyName,propertyContent);
          }
 else {
            if (Boolean.valueOf(propertyList.get(i).getAttribute(Constants.DRIVER_INFO_PROPERTY_ENCRYPT))) {
              drawPropertyText(propertyGroup,propertyName,propertyContent,true);
            }
 else             drawPropertyText(propertyGroup,propertyName,propertyContent,false);
          }
        }
        propertyGroup.getParent().layout();
      }
    }
    private void drawPropertyText(    Group propertyGroup,    final String propertyName,    String propertyContent,    boolean encrypt){
      GridData gd;
      final Text propertyText;
      if (encrypt) {
        propertyText=new Text(propertyGroup,SWT.BORDER | SWT.PASSWORD);
      }
 else {
        propertyText=new Text(propertyGroup,SWT.BORDER);
      }
      if (propertyContent != null) {
        propertyText.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
      propertyText.addModifyListener(new ModifyListener(){
        public void modifyText(        ModifyEvent e){
          databaseProperties.put(propertyName,propertyText.getText());
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyText.setLayoutData(gd);
      propertyText.getParent().layout();
    }
    private void drawPropertyCombo(    Group propertyGroup,    final String propertyName,    String propertyContent){
      GridData gd;
      final Combo propertyField=new Combo(propertyGroup,SWT.BORDER | SWT.READ_ONLY);
      propertyField.setItems(new String[]{EMPTY_STRING,""String_Node_Str"",""String_Node_Str""});
      if (propertyContent != null) {
        propertyField.setText(propertyContent);
        databaseProperties.put(propertyName,propertyContent);
      }
 else       propertyField.setText(EMPTY_STRING);
      propertyField.addSelectionListener(new SelectionListener(){
        public void widgetSelected(        SelectionEvent arg0){
          if (propertyField.getSelectionIndex() == 1) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else           if (propertyField.getSelectionIndex() == 2) {
            databaseProperties.put(propertyName,""String_Node_Str"");
          }
 else {
            databaseProperties.put(propertyName,EMPTY_STRING);
          }
        }
        public void widgetDefaultSelected(        SelectionEvent arg0){
          databaseProperties.put(propertyName,EMPTY_STRING);
        }
      }
);
      gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      gd.horizontalAlignment=SWT.FILL;
      propertyField.setLayoutData(gd);
      propertyField.getParent().layout();
    }
    private Group drawPropertyGroup(    String propertyGroupName){
      GridData gridData;
      Group propertyGroup=new Group(porpertyGroupComposite,SWT.NONE);
      gridData=new GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL);
      gridData.horizontalSpan=4;
      gridData.horizontalAlignment=SWT.FILL;
      propertyGroup.setText(propertyGroupName);
      propertyGroup.setLayoutData(gridData);
      GridLayout layout=new GridLayout();
      layout.marginWidth=layout.marginHeight=0;
      layout.numColumns=5;
      Layout parentLayout=porpertyGroupComposite.getParent().getLayout();
      if (parentLayout instanceof GridLayout)       layout.horizontalSpacing=((GridLayout)parentLayout).horizontalSpacing;
      propertyGroup.setLayout(layout);
      return propertyGroup;
    }
    private String getProfileproperty(    String propertyName){
      return profileProperties.getProperty(propertyName);
    }
  }
);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  jdbcUrl=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  gridData.grabExcessHorizontalSpace=true;
  jdbcUrl.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  userName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  userName.setLayoutData(gridData);
  new Label(content,SWT.RIGHT).setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  password=new Text(content,SWT.BORDER | SWT.PASSWORD);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  password.setLayoutData(gridData);
  String jndiLabel=JdbcPlugin.getResourceString(""String_Node_Str"");
  new Label(content,SWT.RIGHT).setText(jndiLabel);
  jndiName=new Text(content,SWT.BORDER);
  gridData=new GridData();
  gridData.horizontalSpan=3;
  gridData.horizontalAlignment=SWT.FILL;
  jndiName.setLayoutData(gridData);
  createPropertiesComposite(content);
  manageButton=new Button(content,SWT.PUSH);
  manageButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton=new Button(content,SWT.PUSH);
  testButton.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  testButton.setLayoutData(new GridData(GridData.CENTER));
  Point size=content.computeSize(SWT.DEFAULT,SWT.DEFAULT);
  content.setSize(size.x,size.y);
  scrollContent.setMinWidth(size.x + 10);
  scrollContent.setContent(content);
  addControlListeners();
  updateTestButton();
  verifyJDBCProperties();
  Utility.setSystemHelp(getControl(),IHelpConstants.CONEXT_ID_DATASOURCE_JDBC);
  return content;
}",0.999062177623558
75829,"private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dRowHeight;
  double dRealWidth=0, dExtraHeight=0;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    obj=getNonNullValue(obj,IConstants.ONE_SPACE);
    while (!isValidValue(obj) && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dRowHeight=dHeight + legendData.dVerticalReservedSpace;
  if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    dHeight=-legendData.dVerticalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dHeight+=dExtraHeight + legendData.dVerticalReservedSpace;
  dWidth=Math.max(dWidth,dRealWidth);
  return new double[]{dWidth,dHeight};
}","private double[] computeHorizalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dRowHeight;
  double dRealWidth=0, dExtraHeight=0;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",Messages.getResourceBundle(xs.getULocale()));
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
    while (!isValidValue(obj) && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dDeltaWidth=legendData.insCa.getLeft() + dFWidth + (3 * legendData.dItemHeight) / 2 + legendData.insCa.getRight();
    if (dWidth + dDeltaWidth > legendData.dAvailableWidth) {
      dRowHeight=dHeight + legendData.dVerticalReservedSpace;
      if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
        dHeight=-legendData.dVerticalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraHeight+=dRowHeight;
        dHeight=dFHeight;
        dRealWidth=Math.max(dRealWidth,dWidth);
        dWidth=dDeltaWidth;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dHeight=Math.max(dFHeight,dHeight);
      dWidth+=dDeltaWidth;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dWidth - dDeltaWidth,dExtraHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dRowHeight=dHeight + legendData.dVerticalReservedSpace;
  if (dExtraHeight + dRowHeight > legendData.dAvailableHeight + legendData.dSafeSpacing) {
    dHeight=-legendData.dVerticalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dHeight+=dExtraHeight + legendData.dVerticalReservedSpace;
  dWidth=Math.max(dWidth,dRealWidth);
  return new double[]{dWidth,dHeight};
}",0.9991399904443384
75830,"private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    obj=getNonNullValue(obj,IConstants.ONE_SPACE);
    while (!isValidValue(obj) && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
  if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
    dWidth=-legendData.dHorizonalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dWidth+=legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}","private double[] computeVerticalByCategory(IDisplayServer xs,Chart cm,RunTimeContext rtc,ITextMetrics itm,Label la,LegendData legendData) throws ChartException {
  double dWidth=0, dHeight=0;
  double dColumnWidth;
  double dRealHeight=0, dExtraWidth=0, dDeltaHeight;
  ArrayList columnList=new ArrayList();
  SeriesDefinition sdBase=null;
  if (cm instanceof ChartWithAxes) {
    final Axis axPrimaryBase=((ChartWithAxes)cm).getBaseAxes()[0];
    if (axPrimaryBase.getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)axPrimaryBase.getSeriesDefinitions().get(0);
  }
 else   if (cm instanceof ChartWithoutAxes) {
    if (((ChartWithoutAxes)cm).getSeriesDefinitions().isEmpty()) {
      return null;
    }
    sdBase=(SeriesDefinition)((ChartWithoutAxes)cm).getSeriesDefinitions().get(0);
  }
  Series seBase=(Series)sdBase.getRunTimeSeries().get(0);
  DataSetIterator dsiBase=null;
  try {
    dsiBase=new DataSetIterator(seBase.getDataSet());
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,ex);
  }
  FormatSpecifier fs=null;
  if (sdBase != null) {
    fs=sdBase.getFormatSpecifier();
  }
  int pos=-1;
  while (dsiBase.hasNext()) {
    Object obj=dsiBase.next();
    obj=getNonEmptyValue(obj,IConstants.ONE_SPACE);
    while (!isValidValue(obj) && dsiBase.hasNext()) {
      obj=dsiBase.next();
    }
    pos++;
    if (legendData.bMinSliceApplied && Arrays.binarySearch(legendData.filteredMinSliceEntry,pos) >= 0) {
      continue;
    }
    String lgtext=String.valueOf(obj);
    if (fs != null) {
      try {
        lgtext=ValueFormatter.format(obj,fs,rtc.getULocale(),null);
      }
 catch (      ChartException e) {
      }
    }
    la.getCaption().setValue(lgtext);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
        break;
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
    }
    columnList.add(new LegendItemHints(LEGEND_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),pos));
  }
  if (legendData.bMinSliceApplied) {
    la.getCaption().setValue(legendData.sMinSliceLabel);
    itm.reuse(la,legendData.maxWrappingSize);
    BoundingBox bb=null;
    try {
      bb=Methods.computeBox(xs,IConstants.ABOVE,la,0,0);
    }
 catch (    IllegalArgumentException uiex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
    }
    double dFWidth=bb.getWidth();
    double dFHeight=bb.getHeight();
    double dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
    double[] newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
    if (newMetrics != null) {
      dFWidth=newMetrics[0];
      dFHeight=newMetrics[1];
    }
    dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
    if (dHeight + dDeltaHeight > legendData.dAvailableHeight) {
      dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
      if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
        dWidth=-legendData.dHorizonalReservedSpace;
        columnList.clear();
      }
 else {
        legendData.legendItems.addAll(columnList);
        columnList.clear();
        dExtraWidth+=dColumnWidth;
        dExceedingSpace=dExtraWidth + dFWidth + legendData.dHorizonalReservedSpace - legendData.dAvailableWidth - legendData.dSafeSpacing;
        newMetrics=checkEllipsisText(dExceedingSpace,dFWidth,xs,itm,la,legendData.dEllipsisWidth,legendData.maxWrappingSize);
        if (newMetrics != null) {
          dFWidth=newMetrics[0];
          dFHeight=newMetrics[1];
          dDeltaHeight=legendData.insCa.getTop() + dFHeight + legendData.insCa.getBottom();
        }
        dWidth=dFWidth;
        dRealHeight=Math.max(dRealHeight,dHeight);
        dHeight=dDeltaHeight;
        columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
      }
    }
 else {
      dWidth=Math.max(dFWidth,dWidth);
      dHeight+=dDeltaHeight;
      columnList.add(new LegendItemHints(LEGEND_MINSLICE_ENTRY,new Point(dExtraWidth,dHeight - dDeltaHeight),dFWidth,dFHeight,la.getCaption().getValue(),dsiBase.size()));
    }
  }
  dColumnWidth=dWidth + legendData.dHorizonalReservedSpace;
  if (dExtraWidth + dColumnWidth > legendData.dAvailableWidth + legendData.dSafeSpacing) {
    dWidth=-legendData.dHorizonalReservedSpace;
  }
 else {
    legendData.legendItems.addAll(columnList);
  }
  columnList.clear();
  dWidth+=legendData.dHorizonalReservedSpace + dExtraWidth;
  dHeight=Math.max(dRealHeight,dHeight);
  return new double[]{dWidth,dHeight};
}",0.9993200876331496
75831,"/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws RenderingException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,double dX,double dY,double dW,double dItemHeight,double dFullHeight,double dExtraHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Series se,Fill fPaletteEntry,LegendItemRenderingHints lirh,int dataIndex,double dScale) throws ChartException {
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(LocationImpl.create(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(LocationImpl.create(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    Location[] loaBack=new Location[4];
    final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),PolygonRenderEvent.class);
    pre.setBackground(valueLa.getBackground());
    pre.setOutline(valueLa.getOutline());
    pre.setPoints(loaBack);
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    loaBack[0]=LocationImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1);
    loaBack[1]=LocationImpl.create(dX + dLeftInset + 1,dY + dFullHeight + dExtraHeight);
    loaBack[2]=LocationImpl.create(dX + dLeftInset + dValueWidth,dY + dFullHeight + dExtraHeight);
    loaBack[3]=LocationImpl.create(dX + dLeftInset + dValueWidth,dY + dFullHeight + 1);
    ipr.fillPolygon(pre);
    ipr.drawPolygon(pre);
    Label tmpLa=LabelImpl.copyInstance(valueLa);
    tmpLa.setOutline(null);
    tmpLa.setBackground(null);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(BoundsImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    ipr.drawText(tre);
  }
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=LocationImpl.create(dX + 1,dY + 1);
    loaHotspot[1]=LocationImpl.create(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=LocationImpl.create(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=LocationImpl.create(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=(Trigger)itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.HIGHLIGHT_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=(Trigger)itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.TOGGLE_VISIBILITY_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
for (int t=0; t < elTriggers.size(); t++) {
tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}","/** 
 * Internally provided to render a single legend entry
 * @param ipr
 * @param lg
 * @param la
 * @param dX
 * @param dY
 * @param dW
 * @param dItemHeight
 * @param dLeftInset
 * @param dHorizontalSpacing
 * @param se
 * @param fPaletteEntry
 * @param lirh
 * @param i data row index
 * @throws RenderingException
 */
protected final void renderLegendItem(IPrimitiveRenderer ipr,Legend lg,Label la,Label valueLa,double dX,double dY,double dW,double dItemHeight,double dFullHeight,double dExtraHeight,double dColumnWidth,double dLeftInset,double dHorizontalSpacing,Series se,Fill fPaletteEntry,LegendItemRenderingHints lirh,int dataIndex,double dScale) throws ChartException {
  if (la != null && la.getCaption() != null && valueLa != null && valueLa.getCaption() != null) {
    valueLa.getCaption().setFont(la.getCaption().getFont());
    valueLa.getCaption().setColor(la.getCaption().getColor());
  }
  LegendEntryRenderingHints lerh=new LegendEntryRenderingHints(la,valueLa,dataIndex,fPaletteEntry);
  ScriptHandler sh=getRunTimeContext().getScriptHandler();
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ENTRY,la);
  final Bounds bo=lirh.getLegendGraphicBounds();
  if (isRightToLeft()) {
    bo.setLeft((dX + dColumnWidth - dLeftInset - 1 - 3 * dItemHeight / 2) / dScale);
  }
 else {
    bo.setLeft((dX + dLeftInset + 1) / dScale);
  }
  bo.setTop((dY + 1 + (dFullHeight - dItemHeight) / 2) / dScale);
  bo.setWidth((3 * dItemHeight / 2) / dScale);
  bo.setHeight((dItemHeight - 2) / dScale);
  ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
  getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_LEGEND_ITEM,lerh);
  bo.setLeft(bo.getLeft() * dScale);
  bo.setTop(bo.getTop() * dScale);
  bo.setWidth(bo.getWidth() * dScale);
  bo.setHeight(bo.getHeight() * dScale);
  final BaseRenderer br=lirh.getRenderer();
  br.renderLegendGraphic(ipr,lg,fPaletteEntry,bo);
  final TextRenderEvent tre=(TextRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),TextRenderEvent.class);
  double dLaAngle=la.getCaption().getFont().getRotation();
  if (isRightToLeft()) {
    dLaAngle=-dLaAngle;
  }
  double dDeltaHeight=0;
  if (dLaAngle > 0 && dLaAngle < 90) {
    dDeltaHeight=(bo.getHeight() + dFullHeight - dItemHeight) / 2;
  }
 else   if (dLaAngle < 0 && dLaAngle > -90) {
    dDeltaHeight=(bo.getHeight() - dFullHeight + dItemHeight) / 2;
  }
 else   if (dLaAngle == 0 || dLaAngle == 90 || dLaAngle == -90) {
    dDeltaHeight=bo.getHeight() / 2;
  }
  if (isRightToLeft()) {
    tre.setLocation(LocationImpl.create(dX + dColumnWidth - dLeftInset - 3 * dItemHeight / 2 - dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.LEFT);
  }
 else {
    tre.setLocation(LocationImpl.create(dX + dLeftInset + (3 * dItemHeight / 2)+ dHorizontalSpacing,bo.getTop() + dDeltaHeight));
    tre.setTextPosition(TextRenderEvent.RIGHT);
  }
  if (la.isVisible()) {
    tre.setLabel(la);
    tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
    ipr.drawText(tre);
  }
  if (valueLa != null) {
    Location[] loaBack=new Location[4];
    final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ir).getEventObject(StructureSource.createLegend(lg),PolygonRenderEvent.class);
    pre.setBackground(valueLa.getBackground());
    pre.setOutline(valueLa.getOutline());
    pre.setPoints(loaBack);
    final double dValueWidth=dColumnWidth - 2 * dLeftInset;
    loaBack[0]=LocationImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1);
    loaBack[1]=LocationImpl.create(dX + dLeftInset + 1,dY + dFullHeight + dExtraHeight);
    loaBack[2]=LocationImpl.create(dX + dLeftInset + dValueWidth,dY + dFullHeight + dExtraHeight);
    loaBack[3]=LocationImpl.create(dX + dLeftInset + dValueWidth,dY + dFullHeight + 1);
    ipr.fillPolygon(pre);
    ipr.drawPolygon(pre);
    Label tmpLa=LabelImpl.copyInstance(valueLa);
    tmpLa.setOutline(null);
    tmpLa.setBackground(null);
    TextAlignment ta=TextAlignmentImpl.create();
    ta.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    ta.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
    tre.setBlockAlignment(ta);
    tre.setBlockBounds(BoundsImpl.create(dX + dLeftInset + 1,dY + dFullHeight + 1,dValueWidth - 2,dExtraHeight - 1));
    tre.setLabel(tmpLa);
    tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
    ipr.drawText(tre);
  }
  if (isInteractivityEnabled()) {
    Trigger tg;
    EList elTriggers=lg.getTriggers();
    Location[] loaHotspot=new Location[4];
    loaHotspot[0]=LocationImpl.create(dX + 1,dY + 1);
    loaHotspot[1]=LocationImpl.create(dX + dColumnWidth - 1,dY + 1);
    loaHotspot[2]=LocationImpl.create(dX + dColumnWidth - 1,dY + dFullHeight + dExtraHeight - 1);
    loaHotspot[3]=LocationImpl.create(dX + 1,dY + dFullHeight + dExtraHeight - 1);
    Trigger buildinTg=null;
    if (cm.getInteractivity() != null) {
      boolean customed=false;
switch (cm.getInteractivity().getLegendBehavior().getValue()) {
case LegendBehaviorType.HIGHLIGHT_SERIE:
        for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
          tg=(Trigger)itr.next();
          if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.HIGHLIGHT_LITERAL) {
            customed=true;
          }
        }
      if (!customed) {
        buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.HIGHLIGHT_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
      }
    break;
case LegendBehaviorType.TOGGLE_SERIE_VISIBILITY:
  for (Iterator itr=elTriggers.iterator(); itr.hasNext(); ) {
    tg=(Trigger)itr.next();
    if (tg.getCondition() == TriggerCondition.ONCLICK_LITERAL || tg.getAction().getType() == ActionType.TOGGLE_VISIBILITY_LITERAL) {
      customed=true;
    }
  }
if (!customed) {
  buildinTg=TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL,ActionImpl.create(ActionType.TOGGLE_VISIBILITY_LITERAL,SeriesValueImpl.create(String.valueOf(se.getSeriesIdentifier()))));
}
break;
case LegendBehaviorType.NONE:
break;
}
}
if (!elTriggers.isEmpty() || buildinTg != null) {
final StructureSource source;
if (this.cm.getLegend().getItemType() == LegendItemType.CATEGORIES_LITERAL) {
final DataPointHints dph=new DataPointHints(la,null,null,null,null,null,null,null,null,dataIndex,null,0,null);
source=WrappedStructureSource.createSeriesDataPoint(se,dph);
}
 else {
source=StructureSource.createSeries(se);
}
final InteractionEvent iev=(InteractionEvent)((EventObjectCache)ipr).getEventObject(source,InteractionEvent.class);
for (int t=0; t < elTriggers.size(); t++) {
tg=TriggerImpl.copyInstance((Trigger)elTriggers.get(t));
processTrigger(tg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(tg);
}
if (buildinTg != null) {
processTrigger(buildinTg,WrappedStructureSource.createLegendEntry(lg,lerh));
iev.addTrigger(buildinTg);
}
final PolygonRenderEvent pre=(PolygonRenderEvent)((EventObjectCache)ipr).getEventObject(source,PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
ipr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ITEM,lerh,bo,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ITEM,lerh);
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_LEGEND_ENTRY,la,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_LEGEND_ENTRY,la);
}",0.9852902889872428
75832,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function);
    column.addAggregateOn(rowLevel);
    column.addAggregateOn(colLevel);
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  AggregationCellHandle cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  if (cell == null) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && cell.getContents().size() == 0) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    column.setAggregateFunction(function != null ? function : DEFAULT_MEASURE_FUNCTION);
    column.addAggregateOn(rowLevel);
    column.addAggregateOn(colLevel);
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
    dataItem.setResultSetColumn(columnHandle.getName());
    cell.addContent(dataItem);
  }
}",0.9841597796143252
75833,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param axisOriginal
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,DataElement axisOriginal,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    if (axisOriginal instanceof NumberDataElement) {
      sc.oOriginal=new Double(((NumberDataElement)axisOriginal).getValue());
    }
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    if (axisOriginal instanceof NumberDataElement) {
      sc.oOriginal=new Double(((NumberDataElement)axisOriginal).getValue());
    }
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (axisOriginal instanceof DateTimeDataElement) {
      sc.oOriginal=((DateTimeDataElement)axisOriginal).getValueAsCDateTime();
    }
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    if (sc.oOriginal != null) {
      if (sc.bMaximumFixed && sc.bMinimumFixed) {
        if (((CDateTime)sc.oMinimum).after(sc.oOriginal) && ((CDateTime)sc.oMaximum).after(sc.oOriginal)) {
          sc.oMinimum=sc.oOriginal;
        }
        if (((CDateTime)sc.oMinimum).before(sc.oOriginal) && ((CDateTime)sc.oMaximum).before(sc.oOriginal)) {
          sc.oMaximum=sc.oOriginal;
        }
      }
 else       if (sc.bMaximumFixed) {
        if (((CDateTime)sc.oMaximum).before(sc.oOriginal)) {
          sc.oMaximum=sc.oOriginal;
        }
      }
 else       if (sc.bMinimumFixed) {
        if (((CDateTime)sc.oMinimum).after(sc.oOriginal)) {
          sc.oMinimum=sc.oOriginal;
        }
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.9373589771140002
75834,"/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      sc.oMinimum=new Double(((NumberDataElement)oMinimum).getValue());
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMinimumFixed=true;
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      sc.oMaximum=new Double(((NumberDataElement)oMaximum).getValue());
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMaximumFixed=true;
  }
  if (sc.bMaximumFixed && sc.bMinimumFixed) {
    if (((Double)sc.oMinimum).doubleValue() > ((Double)sc.oMaximum).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}","/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  double min, max;
  min=max=0;
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      min=((NumberDataElement)oMinimum).getValue();
      sc.oMinimum=new Double(min);
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMinimumFixed=true;
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      max=((NumberDataElement)oMaximum).getValue();
      sc.oMaximum=new Double(max);
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.bMaximumFixed=true;
  }
  if (sc.bMaximumFixed && sc.bMinimumFixed) {
    if (((Double)sc.oMinimum).doubleValue() > ((Double)sc.oMaximum).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
  if (sc.oOriginal != null) {
    double original=((Double)sc.oOriginal).doubleValue();
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (original < min && original < max) {
        sc.oMinimum=sc.oOriginal;
      }
      if (original > min && original > max) {
        sc.oMaximum=sc.oOriginal;
      }
    }
 else     if (sc.bMaximumFixed) {
      if (original > max) {
        sc.oMaximum=sc.oOriginal;
      }
    }
 else     if (sc.bMinimumFixed) {
      if (original < min) {
        sc.oMinimum=sc.oOriginal;
      }
    }
  }
}",0.7686139747995419
75835,"/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,bo);
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}","/** 
 * This method computes the entire chart within the given bounds. If the dataset has changed but none of the axis attributes have changed, simply re-compute without 'rebuilding axes'.
 * @param bo
 */
public final void compute(Bounds bo) throws ChartException, IllegalArgumentException {
  bo=bo.scaledInstance(dPointToPixel);
  dSeriesThickness=(ids.getDpiResolution() / 72d) * cwa.getSeriesThickness();
  double dX=bo.getLeft() + insCA.getLeft();
  double dY=bo.getTop() + insCA.getTop();
  double dW=bo.getWidth() - insCA.getLeft() - insCA.getRight();
  double dH=bo.getHeight() - insCA.getTop() - insCA.getBottom();
  iDimension=getDimension(cwa.getDimension());
  dXAxisPlotSpacing=cwa.getPlot().getHorizontalSpacing() * dPointToPixel;
  dYAxisPlotSpacing=cwa.getPlot().getVerticalSpacing() * dPointToPixel;
  if (iDimension == TWO_5_D) {
    dY+=dSeriesThickness;
    dH-=dSeriesThickness;
    dW-=dSeriesThickness;
    bo.setHeight(dH);
    bo.setTop(dY);
    bo.setWidth(dW);
  }
  if (aax.getOverlayCount() > 0) {
    if (aax.areAxesSwapped()) {
      updateOverlayScales(aax,dX,dX + dW,dY,dH);
      dY=aax.getStart();
      dH=aax.getLength();
    }
 else {
      updateOverlayScales(aax,dY - dH,dY,dX,dW);
      dX=aax.getStart();
      dW=aax.getLength();
    }
  }
  double dStart, dEnd;
  final Axis[] axa=cwa.getPrimaryBaseAxes();
  final Axis axPrimaryBase=axa[0];
  final Axis axPrimaryOrthogonal=cwa.getPrimaryOrthogonalAxis(axPrimaryBase);
  Scale sc=axPrimaryBase.getScale();
  AutoScale scPrimaryBase=null;
  OneAxis oaxPrimaryBase=aax.getPrimaryBase();
  int iAxisType=getAxisType(axPrimaryBase);
  Object oaData=null;
  if (iAxisType == TEXT || oaxPrimaryBase.isCategoryScale()) {
    oaData=getTypedDataSet(axPrimaryBase,iAxisType,0);
  }
 else   if ((iAxisType & NUMERICAL) == NUMERICAL) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
 else   if ((iAxisType & DATE_TIME) == DATE_TIME) {
    oaData=getMinMax(axPrimaryBase,iAxisType);
  }
  DataSetIterator dsi=(oaData instanceof DataSetIterator) ? (DataSetIterator)oaData : new DataSetIterator(oaData,iAxisType);
  oaData=null;
  dStart=(aax.areAxesSwapped()) ? dY + dH : dX;
  dEnd=(aax.areAxesSwapped()) ? dY : dStart + dW;
  int iDirection=AUTO;
  scPrimaryBase=AutoScale.computeScale(ids,oaxPrimaryBase,dsi,iAxisType,dStart,dEnd,sc,axPrimaryBase.getFormatSpecifier(),rtc,iDirection,1,iMarginPercent);
  oaxPrimaryBase.set(scPrimaryBase);
  AutoScale scPrimaryOrthogonal=null;
  OneAxis oaxPrimaryOrthogonal=aax.getPrimaryOrthogonal();
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=null;
  if ((iAxisType & NUMERICAL) == NUMERICAL || (iAxisType & DATE_TIME) == DATE_TIME) {
    dsi=new DataSetIterator(getMinMax(axPrimaryOrthogonal,iAxisType),iAxisType);
  }
 else {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.DATA_FORMAT,""String_Node_Str"",Messages.getResourceBundle(rtc.getULocale()));
  }
  dStart=(aax.areAxesSwapped()) ? dX : dY + dH;
  dEnd=(aax.areAxesSwapped()) ? dX + dW : dY;
  sc=axPrimaryOrthogonal.getScale();
  scPrimaryOrthogonal=AutoScale.computeScale(ids,oaxPrimaryOrthogonal,dsi,iAxisType,dStart,dEnd,sc,oaxPrimaryBase.getModelAxis().getOrigin().getValue(),axPrimaryOrthogonal.getFormatSpecifier(),rtc,AUTO,1,iMarginPercent);
  oaxPrimaryOrthogonal.set(scPrimaryOrthogonal);
  double dYAxisLocation=adjustHorizontal(dX,dW,aax);
  double dXAxisLocation=adjustVerticalDueToHorizontal(dY,dH,aax);
  iAxisType=getAxisType(axPrimaryOrthogonal);
  oaData=getTypedDataSet(axPrimaryOrthogonal,iAxisType,0);
  scPrimaryOrthogonal.setData(dsi);
  iAxisType=getAxisType(axPrimaryBase);
  if (iAxisType != IConstants.TEXT) {
    scPrimaryBase.setData(getTypedDataSet(axPrimaryBase,iAxisType,0));
  }
  scPrimaryBase.resetShifts();
  scPrimaryOrthogonal.resetShifts();
  updateOverlayAxes(aax);
  growBaseAxis(aax,bo);
  final OneAxis axPH=aax.areAxesSwapped() ? aax.getPrimaryOrthogonal() : aax.getPrimaryBase();
  final OneAxis axPV=aax.areAxesSwapped() ? aax.getPrimaryBase() : aax.getPrimaryOrthogonal();
  axPH.setAxisCoordinate(dXAxisLocation);
  axPV.setAxisCoordinate(dYAxisLocation);
  double[] daX=axPH.getScale().getEndPoints();
  double[] daY=axPV.getScale().getEndPoints();
  if (axPH.getScale().getDirection() == BACKWARD) {
    boPlotBackground.setLeft(daX[1] - insCA.getLeft());
    boPlotBackground.setWidth(daX[0] - daX[1] + insCA.getLeft() + insCA.getRight() + 1);
  }
 else {
    boPlotBackground.setLeft(daX[0] - insCA.getLeft());
    boPlotBackground.setWidth(daX[1] - daX[0] + insCA.getLeft() + insCA.getRight() + 1);
  }
  if (axPV.getScale().getDirection() == FORWARD) {
    boPlotBackground.setTop(daY[0] - insCA.getTop());
    boPlotBackground.setHeight(daY[1] - daY[0] + insCA.getTop() + insCA.getBottom() + 1);
  }
 else {
    boPlotBackground.setTop(daY[1] - insCA.getTop());
    boPlotBackground.setHeight(daY[0] - daY[1] + insCA.getTop() + insCA.getBottom() + 1);
  }
  if (iDimension == TWO_5_D) {
    boPlotBackground.delta(dSeriesThickness,-dSeriesThickness,0,0);
  }
  boPlotWithMargin=BoundsImpl.copyInstance(boPlotBackground);
  if (iMarginPercent > 0) {
    AutoScale scale=axPH.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMinWithMargin() != null) {
          boPlotWithMargin.setLeft(boPlotWithMargin.getLeft() - factor * (asDouble(scale.getMinimum()).doubleValue() - asDouble(scale.getMinWithMargin()).doubleValue()));
        }
        boPlotWithMargin.setWidth(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getLeft() + insCA.getRight() + 1);
      }
    }
    scale=axPV.getScale();
    if (scale.getMaxWithMargin() != null || scale.getMinWithMargin() != null) {
      if ((scale.getType() & LINEAR) == LINEAR) {
        double factor=Math.abs(daX[1] - daX[0]) / (asDouble(scale.getMaximum()).doubleValue() - asDouble(scale.getMinimum()).doubleValue());
        if (scale.getMaxWithMargin() != null) {
          boPlotWithMargin.setTop(boPlotWithMargin.getTop() - factor * (asDouble(scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMaximum()).doubleValue()));
        }
        boPlotWithMargin.setHeight(factor * (asDouble(scale.getMaxWithMargin() == null ? scale.getMaximum() : scale.getMaxWithMargin()).doubleValue() - asDouble(scale.getMinWithMargin() == null ? scale.getMinimum() : scale.getMinWithMargin()).doubleValue()) + insCA.getTop() + insCA.getBottom() + 1);
      }
    }
  }
}",0.99609576427256
75836,"public String getParameterName(int param) throws OdaException {
  return null;
}","public String getParameterName(int param) throws OdaException {
  logger.logp(java.util.logging.Level.FINE,SPParameterMetaData.class.getName(),""String_Node_Str"",""String_Node_Str"");
  assertNotNull(paramMetadataArray);
  ParameterDefn paramDefn=(ParameterDefn)paramMetadataArray[param - 1];
  return paramDefn.getParamName();
}",0.3596059113300492
75837,"public void tearDown(){
  if (fileName != null) {
    File file=new File(fileName);
    file.delete();
  }
  if (fileName2 != null) {
    File file=new File(fileName2);
    file.delete();
  }
}","public void tearDown(){
  if (fileName != null) {
    File file=new File(fileName);
    file.delete();
  }
  if (fileName2 != null) {
    File file=new File(fileName2);
    file.delete();
  }
  if (archiveWriter != null) {
    try {
      archiveWriter.finish();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (archiveReader != null) {
    try {
      archiveReader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.5722801788375559
75838,"public void testCube2Aggregation() throws IOException, BirtException {
  createCube2();
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[2];
  levelNamesForFilter[0]=""String_Node_Str"";
  levelNamesForFilter[1]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[2]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),4);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),-1);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),1);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(9));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(13));
  assertEquals(resultSet[2].length(),2);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[2].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(6));
  resultSet[2].seek(1);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[3].length(),2);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(6));
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(22));
}","public void testCube2Aggregation() throws IOException, BirtException {
  createCube2();
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[2];
  levelNamesForFilter[0]=""String_Node_Str"";
  levelNamesForFilter[1]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[2]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),4);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),-1);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),1);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(9));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(13));
  assertEquals(resultSet[2].length(),2);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[2].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(6));
  resultSet[2].seek(1);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[3].length(),2);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(6));
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(22));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}",0.9935935764926966
75839,"public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),-1);
  resultSet[1].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
}","public void testCube1Aggregation() throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),-1);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
  for (int i=0; i < resultSet.length; i++) {
    resultSet[i].close();
  }
}",0.9929247450151611
75840,"protected int getRowSpan(Row row,CellArea cell){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=(IContent)cell.getContent().getParent();
  if (row.getContent() == rowContent) {
    if (rowSpan > 1) {
      return rowSpan - 1;
    }
  }
  return rowSpan;
}","protected int getRowSpan(Row row,CellArea cell){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=(IContent)cell.getContent().getParent();
  if (row.getContent() != rowContent) {
    if (rowSpan > 1) {
      return rowSpan - 1;
    }
  }
  return rowSpan;
}",0.9961977186311788
75841,"/** 
 * get a date formatter object
 * @param value date format
 * @return formatter object
 */
public DateFormatter getDateFormatter(String value){
  DateFormatter fmt=(DateFormatter)dateFormatters.get(value);
  if (fmt == null) {
    fmt=new DateFormatter(value,ULocale.forLocale(locale));
    dateFormatters.put(value,fmt);
  }
  return fmt;
}","/** 
 * get a date formatter object
 * @param value date format
 * @return formatter object
 */
public DateFormatter getDateFormatter(String value){
  DateFormatter fmt=null;
  if (value != null) {
    fmt=(DateFormatter)dateFormatters.get(value);
    if (fmt == null) {
      fmt=new DateFormatter(value,ULocale.forLocale(locale));
      dateFormatters.put(value,fmt);
    }
    return fmt;
  }
  return new DateFormatter(value,ULocale.forLocale(locale));
}",0.8308457711442786
75842,"/** 
 * Get printer settings from http request
 * @param request
 * @return
 */
public static Printer getPrinter(HttpServletRequest request){
  String printerName=ParameterAccessor.getParameter(request,PARAM_PRINTER);
  Printer printer=null;
  if (printerName != null) {
    List printers=findPrinters();
    for (int i=0; i < printers.size(); i++) {
      if (printerName.equalsIgnoreCase(((Printer)printers.get(i)).getName())) {
        printer=(Printer)printers.get(i);
        break;
      }
    }
  }
  if (printer == null) {
    PrintService service=PrintServiceLookup.lookupDefaultPrintService();
    printer=createPrinter(service);
  }
  if (printer != null) {
    String copies=ParameterAccessor.getParameter(request,PARAM_PRINTER_COPIES);
    if (copies != null)     printer.setCopies(Integer.parseInt(copies));
    String collate=ParameterAccessor.getParameter(request,PARAM_PRINTER_COLLATE);
    if (collate != null)     printer.setCollate(Boolean.valueOf(collate).booleanValue());
    String duplex=ParameterAccessor.getParameter(request,PARAM_PRINTER_DUPLEX);
    if (duplex != null)     printer.setDuplex(Integer.parseInt(duplex));
    String mode=ParameterAccessor.getParameter(request,PARAM_PRINTER_MODE);
    if (mode != null)     printer.setMode(Integer.parseInt(mode));
    String mediaSize=ParameterAccessor.getParameter(request,PARAM_PRINTER_MEDIASIZE);
    if (mediaSize != null)     printer.setMediaSize(mediaSize);
  }
  return printer;
}","/** 
 * Get printer settings from http request
 * @param request
 * @return
 */
public static Printer getPrinter(HttpServletRequest request){
  String printerName=ParameterAccessor.getParameter(request,PARAM_PRINTER);
  Printer printer=null;
  if (printerName != null) {
    List printers=findPrinters();
    for (int i=0; i < printers.size(); i++) {
      if (printerName.equalsIgnoreCase(((Printer)printers.get(i)).getName())) {
        printer=(Printer)printers.get(i);
        break;
      }
    }
  }
  if (printer == null) {
    PrintService service=PrintServiceLookup.lookupDefaultPrintService();
    printer=createPrinter(service);
  }
  if (printer != null) {
    String copies=ParameterAccessor.getParameter(request,PARAM_PRINTER_COPIES);
    if (copies != null)     printer.setCopies(Integer.parseInt(copies));
    String collate=ParameterAccessor.getParameter(request,PARAM_PRINTER_COLLATE);
    if (collate != null)     printer.setCollate(Boolean.valueOf(collate).booleanValue());
    String duplex=ParameterAccessor.getParameter(request,PARAM_PRINTER_DUPLEX);
    if (duplex != null)     printer.setDuplex(Integer.parseInt(duplex));
    String mode=ParameterAccessor.getParameter(request,PARAM_PRINTER_MODE);
    if (mode != null)     printer.setMode(Integer.parseInt(mode));
    String mediaSize=ParameterAccessor.getParameter(request,PARAM_PRINTER_MEDIASIZE);
    mediaSize=ParameterAccessor.htmlDecode(mediaSize);
    if (mediaSize != null)     printer.setMediaSize(mediaSize);
  }
  return printer;
}",0.981549815498155
75843,"public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells()) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,start,columnNumber,finished);
  int height=specifiedHeight;
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell != null) {
        row.remove(start + i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan(unresolvedRow,ca));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=getHeightOfEmptyRow(row);
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells()) {
    mergeDropCell(rowArea);
  }
}","public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells()) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,start,columnNumber,finished);
  int height=specifiedHeight;
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell != null) {
        row.remove(start + i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)rowArea.getContent(),ca));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=getHeightOfEmptyRow(row);
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells()) {
    mergeDropCell(rowArea);
  }
}",0.9928571428571428
75844,"protected void mergeDropCell(RowArea row){
  if (unresolvedRow == null) {
    return;
  }
  CellArea[] cells=new CellArea[columnNumber];
  Iterator iter=row.getChildren();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colStart=cell.getColumnID();
    int colEnd=colStart + cell.getColSpan();
    for (int i=colStart; i < colEnd; i++) {
      int index=colStart - start;
      if (index >= 0 && index < columnNumber) {
        cells[colStart - start]=cell;
      }
    }
  }
  for (int i=0; i < columnNumber; i++) {
    if (cells[i] == null) {
      ICellContent cellContent=null;
      CellArea ca=unresolvedRow.getCell(start + i);
      if (ca != null) {
        ICellContent cc=(ICellContent)ca.getContent();
        cellContent=new ClonedCellContent(cc,getRowSpan(unresolvedRow,ca));
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        emptyCell.setRowSpan(ca.getRowSpan());
        resolveBorderConflict(emptyCell,false);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        emptyCell.setHeight(row.getHeight());
        row.addChild(emptyCell);
      }
    }
  }
}","protected void mergeDropCell(RowArea row){
  if (unresolvedRow == null) {
    return;
  }
  CellArea[] cells=new CellArea[columnNumber];
  Iterator iter=row.getChildren();
  while (iter.hasNext()) {
    CellArea cell=(CellArea)iter.next();
    int colStart=cell.getColumnID();
    int colEnd=colStart + cell.getColSpan();
    for (int i=colStart; i < colEnd; i++) {
      int index=colStart - start;
      if (index >= 0 && index < columnNumber) {
        cells[colStart - start]=cell;
      }
    }
  }
  for (int i=0; i < columnNumber; i++) {
    if (cells[i] == null) {
      ICellContent cellContent=null;
      CellArea ca=unresolvedRow.getCell(start + i);
      if (ca != null) {
        ICellContent cc=(ICellContent)ca.getContent();
        cellContent=new ClonedCellContent(cc,getRowSpan((IRowContent)row.getContent(),ca));
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        emptyCell.setRowSpan(ca.getRowSpan());
        resolveBorderConflict(emptyCell,false);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        emptyCell.setHeight(row.getHeight());
        row.addChild(emptyCell);
      }
    }
  }
}",0.9863945578231292
75845,"protected int getRowSpan(Row row,CellArea cell){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=(IContent)cell.getContent().getParent();
  if (row.getContent() != rowContent) {
    if (rowSpan > 1) {
      return rowSpan - 1;
    }
  }
  return rowSpan;
}","protected int getRowSpan(IRowContent row,CellArea cell){
  int rowSpan=cell.getRowSpan();
  IContent rowContent=(IContent)cell.getContent().getParent();
  if (row != rowContent) {
    if (rowSpan > 1) {
      return rowSpan - 1;
    }
  }
  return rowSpan;
}",0.9596928982725528
75846,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map extraTimeLevelHolder) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    boolean shareFactTable=cubeHandle.getDataSet().equals(hierhandle.getDataSet());
    ILevelDefn[] levelInHier=null;
    String timeLevelName=null;
    int timeLevelOffset=0;
    if (dim.isTimeType()) {
      TabularLevelHandle level=(TabularLevelHandle)hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP).get(0);
      timeLevelName=level.getColumnName();
      timeLevelOffset=1;
      extraTimeLevelHolder.put(dim,timeLevelName);
    }
    String leafLevelName=null;
    if (!shareFactTable) {
      Iterator it=cubeHandle.joinConditionsIterator();
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hierhandle)) {
          DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)dimCondHandle.getJoinConditions().iterator().next();
          leafLevelName=joinCondition.getHierarchyKey();
          if (hierhandle.getLevel(leafLevelName) != null && !leafLevelName.equals(timeLevelName)) {
            if (!(hierhandle.getLevel(hierhandle.getLevelCount() - 1).equals(hierhandle.getLevel(leafLevelName)))) {
              throw new AdapterException(""String_Node_Str"");
            }
            levelInHier=new ILevelDefn[hierhandle.getLevelCount() + timeLevelOffset];
            leafLevelName=null;
          }
 else {
            levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1 + timeLevelOffset];
          }
        }
      }
    }
 else {
      levelInHier=new ILevelDefn[hierhandle.getLevelCount() + timeLevelOffset];
    }
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      }
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    if (timeLevelName != null) {
      int index=0;
      if (leafLevelName != null)       index=levelInHier.length - 2;
 else       index=levelInHier.length - 1;
      levelInHier[index]=CubeElementFactory.createLevelDefinition(timeLevelName,new String[]{timeLevelName},new String[0]);
    }
    if (leafLevelName != null) {
      levelInHier[levelInHier.length - 1]=CubeElementFactory.createLevelDefinition(leafLevelName,new String[]{leafLevelName},new String[0]);
    }
    iHiers.add(cubeMaterializer.createHierarchy(hierhandle.getName(),new DataSetIterator(this,hierhandle,timeLevelName,leafLevelName),levelInHier));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @return
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map extraTimeLevelHolder) throws IOException, BirtException, DataException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    boolean shareFactTable=cubeHandle.getDataSet().equals(hierhandle.getDataSet());
    ILevelDefn[] levelInHier=null;
    String timeLevelName=null;
    int timeLevelOffset=0;
    if (dim.isTimeType()) {
      TabularLevelHandle level=(TabularLevelHandle)hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP).get(0);
      timeLevelName=level.getColumnName();
      timeLevelOffset=1;
      extraTimeLevelHolder.put(dim,timeLevelName);
    }
    String leafLevelName=null;
    if (!shareFactTable) {
      Iterator it=cubeHandle.joinConditionsIterator();
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().equals(hierhandle)) {
          DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)dimCondHandle.getJoinConditions().iterator().next();
          leafLevelName=joinCondition.getHierarchyKey();
          if (hierhandle.getLevel(leafLevelName) != null && !leafLevelName.equals(timeLevelName)) {
            if (!(hierhandle.getLevel(hierhandle.getLevelCount() - 1).equals(hierhandle.getLevel(leafLevelName)))) {
              throw new AdapterException(""String_Node_Str"");
            }
            levelInHier=new ILevelDefn[hierhandle.getLevelCount() + timeLevelOffset];
            leafLevelName=null;
          }
 else {
            levelInHier=new ILevelDefn[hierhandle.getLevelCount() + 1 + timeLevelOffset];
          }
        }
      }
      if (levelInHier == null)       throw new DataException(""String_Node_Str"");
    }
 else {
      levelInHier=new ILevelDefn[hierhandle.getLevelCount() + timeLevelOffset];
    }
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      List levelKeys=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelKeys.add(level.getName() + ""String_Node_Str"" + levelAttr.getName());
      }
      levelInHier[k]=CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelKeys));
    }
    if (timeLevelName != null) {
      int index=0;
      if (leafLevelName != null)       index=levelInHier.length - 2;
 else       index=levelInHier.length - 1;
      levelInHier[index]=CubeElementFactory.createLevelDefinition(timeLevelName,new String[]{timeLevelName},new String[0]);
    }
    if (leafLevelName != null) {
      levelInHier[levelInHier.length - 1]=CubeElementFactory.createLevelDefinition(leafLevelName,new String[]{leafLevelName},new String[0]);
    }
    iHiers.add(cubeMaterializer.createHierarchy(hierhandle.getName(),new DataSetIterator(this,hierhandle,timeLevelName,leafLevelName),levelInHier));
  }
  return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
}",0.9884566053869176
75847,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String timeLevelName,String leafLevelName) throws AdapterException {
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=null;
    String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
    int type=ModelAdapter.adaptModelDataType(level.getDataType());
    if (isTimeType(type)) {
      temp=new ColumnMeta(level.getName(),true,new TimeValueProcessor(level.getDateTimeLevelType()));
      temp.setDataType(DataType.INTEGER_TYPE);
    }
 else {
      IDataProcessor processor=null;
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
        int interval=GroupAdapter.intervalFromModel(level.getInterval());
        if (interval != IGroupDefinition.NO_INTERVAL)         processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
      }
 else       if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
        Iterator it=level.staticValuesIterator();
        List dispExpr=new ArrayList();
        List filterExpr=new ArrayList();
        while (it.hasNext()) {
          RuleHandle o=(RuleHandle)it.next();
          dispExpr.add(o.getDisplayExpression());
          filterExpr.add(o.getRuleExpression());
        }
        exprString=""String_Node_Str"";
        for (int i=0; i < dispExpr.size(); i++) {
          String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
          String filter=String.valueOf(filterExpr.get(i));
          exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
        }
      }
      temp=new ColumnMeta(level.getName(),true,processor);
      temp.setDataType(type);
    }
    metaList.add(temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()),false,null);
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      metaList.add(meta);
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
    }
    query.addResultSetExpression(level.getName(),new ScriptExpression(exprString));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    if (level.getLevelType() != null) {
      gd.setIntervalRange(level.getIntervalRange());
      gd.setIntervalStart(level.getIntervalBase());
      gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
    }
    query.addGroup(gd);
  }
  if (timeLevelName != null) {
    populateSpecialLevel(query,metaList,timeLevelName,DataType.DATE_TYPE);
  }
  if (leafLevelName != null) {
    populateSpecialLevel(query,metaList,leafLevelName,DataType.STRING_TYPE);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws AdapterException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String timeLevelName,String leafLevelName) throws AdapterException {
  List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
  for (int j=0; j < levels.size(); j++) {
    TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
    ColumnMeta temp=null;
    String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
    int type=ModelAdapter.adaptModelDataType(level.getDataType());
    if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)     type=DataType.STRING_TYPE;
    if (isTimeType(type)) {
      temp=new ColumnMeta(level.getName(),true,new TimeValueProcessor(level.getDateTimeLevelType()));
      temp.setDataType(DataType.INTEGER_TYPE);
    }
 else {
      IDataProcessor processor=null;
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
        int interval=GroupAdapter.intervalFromModel(level.getInterval());
        if (interval != IGroupDefinition.NO_INTERVAL)         processor=new DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange()));
      }
 else       if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
        Iterator it=level.staticValuesIterator();
        List dispExpr=new ArrayList();
        List filterExpr=new ArrayList();
        while (it.hasNext()) {
          RuleHandle o=(RuleHandle)it.next();
          dispExpr.add(o.getDisplayExpression());
          filterExpr.add(o.getRuleExpression());
        }
        exprString=""String_Node_Str"";
        for (int i=0; i < dispExpr.size(); i++) {
          String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
          String filter=String.valueOf(filterExpr.get(i));
          exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
        }
      }
      temp=new ColumnMeta(level.getName(),true,processor);
      temp.setDataType(type);
    }
    metaList.add(temp);
    Iterator it=level.attributesIterator();
    while (it.hasNext()) {
      LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
      ColumnMeta meta=new ColumnMeta(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()),false,null);
      meta.setDataType(ModelAdapter.adaptModelDataType(levelAttr.getDataType()));
      metaList.add(meta);
      query.addResultSetExpression(meta.getName(),new ScriptExpression(ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName())));
    }
    query.addResultSetExpression(level.getName(),new ScriptExpression(exprString));
    GroupDefinition gd=new GroupDefinition();
    gd.setKeyExpression(ExpressionUtil.createJSRowExpression(level.getName()));
    if (level.getLevelType() != null) {
      gd.setIntervalRange(level.getIntervalRange());
      gd.setIntervalStart(level.getIntervalBase());
      gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
    }
    query.addGroup(gd);
  }
  if (timeLevelName != null) {
    populateSpecialLevel(query,metaList,timeLevelName,DataType.DATE_TYPE);
  }
  if (leafLevelName != null) {
    populateSpecialLevel(query,metaList,leafLevelName,DataType.STRING_TYPE);
  }
}",0.9856250907506896
75848,"/** 
 * The constructor.
 * @param _lhmAllTriggers
 * @param _jc
 * @param _lcl
 */
SwingEventHandler(Map _lhmAllTriggers,IUpdateNotifier _jc,ULocale _lcl){
  lhmAllTriggers=_lhmAllTriggers;
  iun=_jc;
  lcl=_lcl;
}","/** 
 * The constructor.
 * @param _lhmAllTriggers
 * @param _jc
 * @param _lcl
 */
SwingEventHandler(InteractiveRenderer iv,Map _lhmAllTriggers,IUpdateNotifier _jc,ULocale _lcl){
  lhmAllTriggers=_lhmAllTriggers;
  iun=_jc;
  lcl=_lcl;
  this.iv=iv;
}",0.9207708779443254
75849,"private synchronized void handleAction(TriggerCondition[] tg,ComponentEvent event,boolean cleanState){
  if (tg == null || event == null) {
    return;
  }
  Point p=null;
  if (event instanceof MouseEvent) {
    p=((MouseEvent)event).getPoint();
  }
  if (event instanceof KeyEvent) {
  }
  ShapedAction sa=getShapedActionForConditionPoint(tg,p);
  if (sa == null)   return;
  final StructureSource src=sa.getSource();
  Action ac=null;
  for (int i=0; i < tg.length; i++) {
    ac=sa.getActionForCondition(tg[i]);
    if (ac != null)     break;
  }
  if (ac == null)   return;
  boolean bFound=false;
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
    final URLValue uv=(URLValue)ac.getValue();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + uv.getBaseUrl());
DeviceUtil.openURL(uv.getBaseUrl());
break;
case ActionType.SHOW_TOOLTIP:
if (ac != acTooltip) {
hideTooltip();
}
bFound=true;
showTooltip(ac);
break;
case ActionType.TOGGLE_VISIBILITY:
if (src.getType() == StructureType.SERIES || src.getType() == StructureType.SERIES_DATA_POINT) {
final Series seRT;
if (src.getType() == StructureType.SERIES) {
seRT=(Series)src.getSource();
}
 else {
seRT=(Series)((WrappedStructureSource)src).getParent().getSource();
}
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
seDT.setVisible(!seDT.isVisible());
iun.regenerateChart();
break;
}
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
if (src.getType() == StructureType.SERIES || src.getType() == StructureType.SERIES_DATA_POINT) {
final Series seRT;
if (src.getType() == StructureType.SERIES) {
seRT=(Series)src.getSource();
}
 else {
seRT=(Series)((WrappedStructureSource)src).getParent().getSource();
}
logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + seRT);
Series seDT=null;
try {
seDT=findDesignTimeSeries(seRT);
}
 catch (ChartException oosx) {
logger.log(oosx);
return;
}
seDT.getLabel().setVisible(!seDT.getLabel().isVisible());
iun.regenerateChart();
break;
}
break;
case ActionType.HIGHLIGHT:
bFound=true;
boolean newRegion=saHighlighted == null;
if (!newRegion) {
if (p == null || !saHighlighted.getShape().contains(p)) {
newRegion=true;
}
}
if (newRegion) {
saHighlighted=sa;
toggleHighlight(sa);
break;
}
break;
case ActionType.CALL_BACK:
if (iun instanceof ICallBackNotifier) {
final CallBackValue cv=(CallBackValue)ac.getValue();
((ICallBackNotifier)iun).callback(event,sa.getSource(),cv);
}
 else {
logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{iun},lcl));
}
break;
}
if (!bFound && acTooltip != null) {
hideTooltip();
acTooltip=null;
}
if (cleanState || (!bFound && saHighlighted != null)) {
saHighlighted=null;
}
}","private synchronized void handleAction(TriggerCondition[] tg,ComponentEvent event,boolean cleanState){
  if (tg == null || event == null) {
    return;
  }
  Point p=null;
  if (event instanceof MouseEvent) {
    p=((MouseEvent)event).getPoint();
  }
  if (event instanceof KeyEvent) {
  }
  ShapedAction sa=getShapedActionForConditionPoint(tg,p);
  if (sa == null) {
    for (int i=0; i < tg.length; i++) {
      if (lhmAllTriggers.get(tg[i]) != null)       disableActions(getActionTypesForConditions(tg));
    }
    return;
  }
  final StructureSource src=sa.getSource();
  Action ac=null;
  for (int i=0; i < tg.length; i++) {
    ac=sa.getActionForCondition(tg[i]);
    if (ac != null)     break;
  }
  if (ac == null) {
    return;
  }
switch (ac.getType().getValue()) {
case ActionType.URL_REDIRECT:
    final URLValue uv=(URLValue)ac.getValue();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",lcl) + uv.getBaseUrl());
DeviceUtil.openURL(uv.getBaseUrl());
break;
case ActionType.SHOW_TOOLTIP:
if (ac != acTooltip) {
hideTooltip();
}
acTooltip=ac;
showTooltip(ac);
break;
case ActionType.TOGGLE_VISIBILITY:
srcToggleVisibility=handleGraphicAction(src,srcToggleVisibility,ActionType.TOGGLE_VISIBILITY_LITERAL,cleanState);
break;
case ActionType.TOGGLE_DATA_POINT_VISIBILITY:
srcToggleDataPoint=handleGraphicAction(src,srcToggleDataPoint,ActionType.TOGGLE_DATA_POINT_VISIBILITY_LITERAL,cleanState);
break;
case ActionType.HIGHLIGHT:
srcHighlight=handleGraphicAction(src,srcHighlight,ActionType.HIGHLIGHT_LITERAL,cleanState);
break;
case ActionType.CALL_BACK:
if (iun instanceof ICallBackNotifier) {
final CallBackValue cv=(CallBackValue)ac.getValue();
((ICallBackNotifier)iun).callback(event,sa.getSource(),cv);
}
 else {
logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{iun},lcl));
}
break;
}
}",0.5268542199488491
75850,"public void drawOval(OvalRenderEvent ore) throws ChartException {
  final LineAttributes lia=ore.getOutline();
  if (!validateLineAttributes(ore.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),ore.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final Bounds bo=ore.getBounds();
  final Ellipse2D.Double e2d=new Ellipse2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(e2d);
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","public void drawOval(OvalRenderEvent ore) throws ChartException {
  iv.modifyEvent(ore);
  final LineAttributes lia=ore.getOutline();
  if (!validateLineAttributes(ore.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),ore.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final Bounds bo=ore.getBounds();
  final Ellipse2D.Double e2d=new Ellipse2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(e2d);
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.984427894380501
75851,"public void fillArc(ArcRenderEvent are) throws ChartException {
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      _g2d.setClip(fArea);
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
    }
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}","public void fillArc(ArcRenderEvent are) throws ChartException {
  iv.modifyEvent(are);
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cl=(ColorDefinition)flBackground;
    final Color clrPrevious=_g2d.getColor();
    final Color currentColor=(Color)_ids.getColor(cl);
    _g2d.setColor(currentColor);
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setColor(clrPrevious);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    final Paint pPrevious=_g2d.getPaint();
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      Shape prevClip=_g2d.getClip();
      Area ar2=new Area(fArea);
      if (prevClip != null) {
        Area ar1=new Area(prevClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
      _g2d.fill(fArea);
      _g2d.setClip(prevClip);
    }
 else {
      _g2d.fill(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
    _g2d.setPaint(pPrevious);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    final Bounds bo=are.getBounds();
    final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
    Shape shPreviousClip=_g2d.getClip();
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        fArea.intersect(ar1);
      }
      _g2d.setClip(fArea);
    }
 else {
      final Shape shArc=new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle()));
      Area ar2=new Area(shArc);
      if (shPreviousClip != null) {
        Area ar1=new Area(shPreviousClip);
        ar2.intersect(ar1);
      }
      _g2d.setClip(ar2);
    }
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shPreviousClip);
  }
}",0.9985003586098976
75852,"public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  final Fill flBackground=validateMultipleFill(pre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Location[] loa=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(loa);
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    final double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMinX,dMinY);
    }
 else     if (dAngleInDegrees == -90) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMinX,dMaxY);
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMaxX,dMaxY - (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY + (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY);
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(new Polygon(i2a[0],i2a[1],loa.length));
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    final Size szImage=_ids.getSize(img);
    final int iXRepeat=(int)(Math.ceil((dMaxX - dMinX) / szImage.getWidth()));
    final int iYRepeat=(int)(Math.ceil((dMaxY - dMinY) / szImage.getHeight()));
    final ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(dMinX + i * szImage.getWidth()),(int)(dMinY + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  iv.modifyEvent(pre);
  final Fill flBackground=validateMultipleFill(pre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Location[] loa=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(loa);
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    final double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMinX,dMinY);
    }
 else     if (dAngleInDegrees == -90) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMinX,dMaxY);
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(dMinX,dMaxY);
      p2dEnd=new Point2D.Double(dMaxX,dMaxY - (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY + (dMaxX - dMinX) * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(dMinX,dMinY);
      p2dEnd=new Point2D.Double(dMaxX,dMinY);
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(new Polygon(i2a[0],i2a[1],loa.length));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(new Polygon(i2a[0],i2a[1],loa.length));
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final double dMinX=BaseRenderer.getX(loa,IConstants.MIN);
    final double dMaxX=BaseRenderer.getX(loa,IConstants.MAX);
    final double dMinY=BaseRenderer.getY(loa,IConstants.MIN);
    final double dMaxY=BaseRenderer.getY(loa,IConstants.MAX);
    final Size szImage=_ids.getSize(img);
    final int iXRepeat=(int)(Math.ceil((dMaxX - dMinX) / szImage.getWidth()));
    final int iYRepeat=(int)(Math.ceil((dMaxY - dMinY) / szImage.getHeight()));
    final ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(dMinX + i * szImage.getWidth()),(int)(dMinY + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}",0.9752336448598132
75853,"public void drawRectangle(RectangleRenderEvent rre) throws ChartException {
  final LineAttributes lia=rre.getOutline();
  if (!validateLineAttributes(rre.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),rre.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth() - 1,bo.getHeight() - 1));
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","public void drawRectangle(RectangleRenderEvent rre) throws ChartException {
  iv.modifyEvent(rre);
  final LineAttributes lia=rre.getOutline();
  if (!validateLineAttributes(rre.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),rre.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth() - 1,bo.getHeight() - 1));
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.9844908968307484
75854,"public void drawArea(AreaRenderEvent are) throws ChartException {
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final GeneralPath gp=new GeneralPath();
  PrimitiveRenderEvent pre;
  for (int i=0; i < are.getElementCount(); i++) {
    pre=are.getElement(i);
    if (pre instanceof ArcRenderEvent) {
      final ArcRenderEvent acre=(ArcRenderEvent)pre;
      final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
      gp.append(a2d,true);
    }
 else     if (pre instanceof LineRenderEvent) {
      final LineRenderEvent lre=(LineRenderEvent)pre;
      final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
      gp.append(l2d,true);
    }
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(gp);
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","public void drawArea(AreaRenderEvent are) throws ChartException {
  iv.modifyEvent(are);
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final GeneralPath gp=new GeneralPath();
  PrimitiveRenderEvent pre;
  for (int i=0; i < are.getElementCount(); i++) {
    pre=are.getElement(i);
    if (pre instanceof ArcRenderEvent) {
      final ArcRenderEvent acre=(ArcRenderEvent)pre;
      final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
      gp.append(a2d,true);
    }
 else     if (pre instanceof LineRenderEvent) {
      final LineRenderEvent lre=(LineRenderEvent)pre;
      final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
      gp.append(l2d,true);
    }
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(gp);
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.9914783253056688
75855,"public void drawText(TextRenderEvent tre) throws ChartException {
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  _tr.renderShadowAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
_tr.renderTextAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
_tr.renderTextInBlock(this,tre.getBlockBounds(),tre.getBlockAlignment(),tre.getLabel());
break;
}
}","public void drawText(TextRenderEvent tre) throws ChartException {
  iv.modifyEvent(tre);
  if (!tre.getLabel().isVisible())   return;
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  _tr.renderShadowAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
_tr.renderTextAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
_tr.renderTextInBlock(this,tre.getBlockBounds(),tre.getBlockAlignment(),tre.getLabel());
break;
}
}",0.953551912568306
75856,"public void drawLine(LineRenderEvent lre) throws ChartException {
  final LineAttributes lia=lre.getLineAttributes();
  if (!validateLineAttributes(lre.getSource(),lia) || lia.getColor() == null) {
    return;
  }
  if (lia.getColor().isSetTransparency() && lia.getColor().getTransparency() == 0) {
    return;
  }
  final Location loStart=lre.getStart();
  final Location loEnd=lre.getEnd();
  Stroke sPrevious=null, sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor((Color)_ids.getColor(lia.getColor()));
  _g2d.draw(new Line2D.Double(loStart.getX(),loStart.getY(),loEnd.getX(),loEnd.getY()));
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","public void drawLine(LineRenderEvent lre) throws ChartException {
  iv.modifyEvent(lre);
  final LineAttributes lia=lre.getLineAttributes();
  if (!validateLineAttributes(lre.getSource(),lia) || lia.getColor() == null) {
    return;
  }
  if (lia.getColor().isSetTransparency() && lia.getColor().getTransparency() == 0) {
    return;
  }
  final Location loStart=lre.getStart();
  final Location loEnd=lre.getEnd();
  Stroke sPrevious=null, sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor((Color)_ids.getColor(lia.getColor()));
  _g2d.draw(new Line2D.Double(loStart.getX(),loStart.getY(),loEnd.getX(),loEnd.getY()));
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.9848584595128372
75857,"public void drawArc(ArcRenderEvent are) throws ChartException {
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
    Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
    Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
    Area fArea=new Area(outerArc);
    fArea.exclusiveOr(new Area(innerArc));
    Shape prevClip=_g2d.getClip();
    Area ar2=new Area(fArea);
    if (prevClip != null) {
      Area ar1=new Area(prevClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    _g2d.draw(fArea);
    _g2d.setClip(prevClip);
  }
 else {
    _g2d.draw(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
  }
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","public void drawArc(ArcRenderEvent are) throws ChartException {
  iv.modifyEvent(are);
  final LineAttributes lia=are.getOutline();
  if (!validateLineAttributes(are.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),are.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  Stroke sPrevious=null;
  Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
    Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
    Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
    Area fArea=new Area(outerArc);
    fArea.exclusiveOr(new Area(innerArc));
    Shape prevClip=_g2d.getClip();
    Area ar2=new Area(fArea);
    if (prevClip != null) {
      Area ar1=new Area(prevClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    _g2d.draw(fArea);
    _g2d.setClip(prevClip);
  }
 else {
    _g2d.draw(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
  }
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.9935229512813292
75858,"/** 
 * The constructor.
 */
public SwingRendererImpl(){
  final PluginSettings ps=PluginSettings.instance();
  try {
    _ids=ps.getDisplayServer(""String_Node_Str"");
    _tr=new SwingTextRenderer((SwingDisplayServer)_ids);
  }
 catch (  ChartException pex) {
    logger.log(pex);
  }
}","/** 
 * The constructor.
 */
public SwingRendererImpl(){
  final PluginSettings ps=PluginSettings.instance();
  try {
    _ids=ps.getDisplayServer(""String_Node_Str"");
    iv=new InteractiveRenderer();
    _tr=new SwingTextRenderer((SwingDisplayServer)_ids);
  }
 catch (  ChartException pex) {
    logger.log(pex);
  }
}",0.943894389438944
75859,"public void drawImage(ImageRenderEvent pre) throws ChartException {
  if (pre.getImage() == null || pre.getLocation() == null) {
    return;
  }
  java.awt.Image img=null;
  if (pre.getImage() instanceof EmbeddedImage) {
    try {
      byte[] data=Base64.decodeBase64(((EmbeddedImage)pre.getImage()).getData().getBytes());
      img=createImage(data);
    }
 catch (    Exception ilex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
    }
  }
 else {
    try {
      final String sUrl=pre.getImage().getURL();
      img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
    }
 catch (    ChartException ilex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
    }
catch (    MalformedURLException muex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
    }
  }
  if (img == null) {
    return;
  }
  Location loc=pre.getLocation();
  Position pos=pre.getPosition();
  if (pos == null) {
    pos=Position.INSIDE_LITERAL;
  }
  ImageObserver io=(ImageObserver)_ids.getObserver();
  int width=img.getWidth(io);
  int height=img.getHeight(io);
  int x=(int)loc.getX();
  int y=(int)loc.getY();
switch (pos.getValue()) {
case Position.INSIDE:
case Position.OUTSIDE:
    x-=width / 2;
  y-=height / 2;
break;
case Position.LEFT:
x-=width;
y-=height / 2;
break;
case Position.RIGHT:
y-=height / 2;
break;
case Position.ABOVE:
x-=width / 2;
y-=height;
break;
case Position.BELOW:
x-=width / 2;
break;
}
_g2d.drawImage(img,x,y,width,height,io);
}","public void drawImage(ImageRenderEvent pre) throws ChartException {
  iv.modifyEvent(pre);
  if (pre.getImage() == null || pre.getLocation() == null) {
    return;
  }
  java.awt.Image img=null;
  if (pre.getImage() instanceof EmbeddedImage) {
    try {
      byte[] data=Base64.decodeBase64(((EmbeddedImage)pre.getImage()).getData().getBytes());
      img=createImage(data);
    }
 catch (    Exception ilex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
    }
  }
 else {
    try {
      final String sUrl=pre.getImage().getURL();
      img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
    }
 catch (    ChartException ilex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
    }
catch (    MalformedURLException muex) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
    }
  }
  if (img == null) {
    return;
  }
  Location loc=pre.getLocation();
  Position pos=pre.getPosition();
  if (pos == null) {
    pos=Position.INSIDE_LITERAL;
  }
  ImageObserver io=(ImageObserver)_ids.getObserver();
  int width=img.getWidth(io);
  int height=img.getHeight(io);
  int x=(int)loc.getX();
  int y=(int)loc.getY();
switch (pos.getValue()) {
case Position.INSIDE:
case Position.OUTSIDE:
    x-=width / 2;
  y-=height / 2;
break;
case Position.LEFT:
x-=width;
y-=height / 2;
break;
case Position.RIGHT:
y-=height / 2;
break;
case Position.ABOVE:
x-=width / 2;
y-=height;
break;
case Position.BELOW:
x-=width / 2;
break;
}
_g2d.drawImage(img,x,y,width,height,io);
}",0.992755905511811
75860,"public void fillArea(AreaRenderEvent are) throws ChartException {
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final GeneralPath gp=new GeneralPath();
  PrimitiveRenderEvent pre;
  for (int i=0; i < are.getElementCount(); i++) {
    pre=are.getElement(i);
    if (pre instanceof ArcRenderEvent) {
      final ArcRenderEvent acre=(ArcRenderEvent)pre;
      final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
      gp.append(a2d,true);
    }
 else     if (pre instanceof LineRenderEvent) {
      final LineRenderEvent lre=(LineRenderEvent)pre;
      final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
      gp.append(l2d,true);
    }
  }
  if (flBackground instanceof ColorDefinition) {
    _g2d.setColor((Color)_ids.getColor((ColorDefinition)flBackground));
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
  }
  _g2d.fill(gp);
}","public void fillArea(AreaRenderEvent are) throws ChartException {
  iv.modifyEvent(are);
  final Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final GeneralPath gp=new GeneralPath();
  PrimitiveRenderEvent pre;
  for (int i=0; i < are.getElementCount(); i++) {
    pre=are.getElement(i);
    if (pre instanceof ArcRenderEvent) {
      final ArcRenderEvent acre=(ArcRenderEvent)pre;
      final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
      gp.append(a2d,true);
    }
 else     if (pre instanceof LineRenderEvent) {
      final LineRenderEvent lre=(LineRenderEvent)pre;
      final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
      gp.append(l2d,true);
    }
  }
  if (flBackground instanceof ColorDefinition) {
    _g2d.setColor((Color)_ids.getColor((ColorDefinition)flBackground));
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    Bounds bo=are.getBounds();
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
  }
  _g2d.fill(gp);
}",0.9960970643135924
75861,"public void setProperty(String sProperty,Object oValue){
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
    _lhmAllTriggers.clear();
    Object obj=_iun.peerInstance();
    if (obj instanceof JComponent) {
      JComponent jc=(JComponent)obj;
      if (_eh != null) {
        jc.removeMouseListener(_eh);
        jc.removeMouseMotionListener(_eh);
        jc.removeKeyListener(_eh);
        jc.removeFocusListener(_eh);
      }
      _eh=new SwingEventHandler(_lhmAllTriggers,_iun,getULocale());
      jc.addMouseListener(_eh);
      jc.addMouseMotionListener(_eh);
      jc.addKeyListener(_eh);
      jc.addFocusListener(_eh);
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.GRAPHICS_CONTEXT)) {
    _g2d=(Graphics2D)oValue;
    _g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{_g2d},getULocale()));
  }
 else   if (sProperty.equals(IDeviceRenderer.DPI_RESOLUTION)) {
    getDisplayServer().setDpiResolution(((Integer)oValue).intValue());
  }
}","public void setProperty(String sProperty,Object oValue){
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
    iv.setUpdateNotifier(_iun);
    _lhmAllTriggers.clear();
    Object obj=_iun.peerInstance();
    if (obj instanceof JComponent) {
      JComponent jc=(JComponent)obj;
      if (_eh != null) {
        jc.removeMouseListener(_eh);
        jc.removeMouseMotionListener(_eh);
        jc.removeKeyListener(_eh);
        jc.removeFocusListener(_eh);
      }
      _eh=new SwingEventHandler(iv,_lhmAllTriggers,_iun,getULocale());
      jc.addMouseListener(_eh);
      jc.addMouseMotionListener(_eh);
      jc.addKeyListener(_eh);
      jc.addFocusListener(_eh);
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.GRAPHICS_CONTEXT)) {
    _g2d=(Graphics2D)oValue;
    _g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);
    _g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
    logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{_g2d},getULocale()));
  }
 else   if (sProperty.equals(IDeviceRenderer.DPI_RESOLUTION)) {
    getDisplayServer().setDpiResolution(((Integer)oValue).intValue());
  }
}",0.9878934624697336
75862,"public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  final Fill flBackground=validateMultipleFill(rre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        String imageData=((EmbeddedImage)flBackground).getData();
        if (imageData == null) {
          imageData=""String_Node_Str"";
        }
        byte[] data=Base64.decodeBase64(imageData.getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(r2d);
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  iv.modifyEvent(rre);
  final Fill flBackground=validateMultipleFill(rre.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=normalizeBounds(rre.getBounds());
  final Rectangle2D.Double r2d=new Rectangle2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(r2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        String imageData=((EmbeddedImage)flBackground).getData();
        if (imageData == null) {
          imageData=""String_Node_Str"";
        }
        byte[] data=Base64.decodeBase64(imageData.getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(r2d);
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(r2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(r2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(r2d.x + i * szImage.getWidth()),(int)(r2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}",0.9971188776149316
75863,"public void fillOval(OvalRenderEvent ore) throws ChartException {
  final Fill flBackground=validateMultipleFill(ore.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=ore.getBounds();
  final Ellipse2D.Double e2d=new Ellipse2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(e2d);
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(e2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(e2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(e2d.x + i * szImage.getWidth()),(int)(e2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}","public void fillOval(OvalRenderEvent ore) throws ChartException {
  iv.modifyEvent(ore);
  final Fill flBackground=validateMultipleFill(ore.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  final Bounds bo=ore.getBounds();
  final Ellipse2D.Double e2d=new Ellipse2D.Double(bo.getLeft(),bo.getTop(),bo.getWidth(),bo.getHeight());
  if (flBackground instanceof ColorDefinition) {
    final ColorDefinition cd=(ColorDefinition)flBackground;
    _g2d.setColor((Color)_ids.getColor(cd));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof Gradient) {
    final Gradient g=(Gradient)flBackground;
    final ColorDefinition cdStart=g.getStartColor();
    final ColorDefinition cdEnd=g.getEndColor();
    double dAngleInDegrees=g.getDirection();
    final double dAngleInRadians=((-dAngleInDegrees * Math.PI) / 180.0);
    if (dAngleInDegrees < -90 || dAngleInDegrees > 90) {
      throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{new Double(dAngleInDegrees)},Messages.getResourceBundle(getULocale()));
    }
    Point2D.Double p2dStart, p2dEnd;
    if (dAngleInDegrees == 90) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees == -90) {
      p2dEnd=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
    }
 else     if (dAngleInDegrees > 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop() + bo.getHeight());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getHeight() - bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else     if (dAngleInDegrees < 0) {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop() + bo.getWidth() * Math.abs(Math.tan(dAngleInRadians)));
    }
 else {
      p2dStart=new Point2D.Double(bo.getLeft(),bo.getTop());
      p2dEnd=new Point2D.Double(bo.getLeft() + bo.getWidth(),bo.getTop());
    }
    _g2d.setPaint(new GradientPaint(p2dStart,(Color)_ids.getColor(cdStart),p2dEnd,(Color)_ids.getColor(cdEnd)));
    _g2d.fill(e2d);
  }
 else   if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
    java.awt.Image img=null;
    if (flBackground instanceof EmbeddedImage) {
      try {
        byte[] data=Base64.decodeBase64(((EmbeddedImage)flBackground).getData().getBytes());
        img=createImage(data);
      }
 catch (      Exception ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
    }
 else {
      try {
        final String sUrl=((org.eclipse.birt.chart.model.attribute.Image)flBackground).getURL();
        img=(java.awt.Image)_ids.loadImage(new URL(sUrl));
      }
 catch (      ChartException ilex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,ilex);
      }
catch (      MalformedURLException muex) {
        throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,muex);
      }
    }
    final Shape shClip=_g2d.getClip();
    Area ar2=new Area(e2d);
    if (shClip != null) {
      Area ar1=new Area(shClip);
      ar2.intersect(ar1);
    }
    _g2d.setClip(ar2);
    final Size szImage=_ids.getSize(img);
    int iXRepeat=(int)(Math.ceil(e2d.width / szImage.getWidth()));
    int iYRepeat=(int)(Math.ceil(e2d.height / szImage.getHeight()));
    ImageObserver io=(ImageObserver)_ids.getObserver();
    for (int i=0; i < iXRepeat; i++) {
      for (int j=0; j < iYRepeat; j++) {
        _g2d.drawImage(img,(int)(e2d.x + i * szImage.getWidth()),(int)(e2d.y + j * szImage.getHeight()),io);
      }
    }
    _g2d.setClip(shClip);
  }
}",0.997007156798959
75864,"public void drawPolygon(PolygonRenderEvent pre) throws ChartException {
  final LineAttributes lia=pre.getOutline();
  if (!validateLineAttributes(pre.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),pre.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final Location[] la=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(la);
  Stroke sPrevious=null;
  final Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(new Polygon(i2a[0],i2a[1],la.length));
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}","public void drawPolygon(PolygonRenderEvent pre) throws ChartException {
  iv.modifyEvent(pre);
  final LineAttributes lia=pre.getOutline();
  if (!validateLineAttributes(pre.getSource(),lia)) {
    return;
  }
  final Color cFG=(Color)validateEdgeColor(lia.getColor(),pre.getBackground(),_ids);
  if (cFG == null || cFG.getAlpha() == 0) {
    return;
  }
  final Location[] la=pre.getPoints();
  final int[][] i2a=getCoordinatesAsInts(la);
  Stroke sPrevious=null;
  final Stroke sCurrent=getCachedStroke(lia);
  if (sCurrent != null) {
    sPrevious=_g2d.getStroke();
    _g2d.setStroke(sCurrent);
  }
  _g2d.setColor(cFG);
  _g2d.draw(new Polygon(i2a[0],i2a[1],la.length));
  if (sPrevious != null) {
    _g2d.setStroke(sPrevious);
  }
}",0.9841924398625428
75865,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds boRect=((RectangleRenderEvent)pre).getBounds();
    elm=svggc.createRect(boRect.getLeft(),boRect.getTop(),boRect.getWidth(),boRect.getHeight());
  }
 else   if (pre instanceof AreaRenderEvent) {
    AreaRenderEvent are=(AreaRenderEvent)pre;
    final GeneralPath gp=new GeneralPath();
    PrimitiveRenderEvent subPre;
    for (int i=0; i < are.getElementCount(); i++) {
      subPre=are.getElement(i);
      if (subPre instanceof ArcRenderEvent) {
        final ArcRenderEvent acre=(ArcRenderEvent)subPre;
        final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
        gp.append(a2d,true);
      }
 else       if (subPre instanceof LineRenderEvent) {
        final LineRenderEvent lre=(LineRenderEvent)subPre;
        final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
        gp.append(l2d,true);
      }
    }
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  ivRenderer.prepareInteractiveEvent(elm,ie,triggers);
}","public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds boRect=((RectangleRenderEvent)pre).getBounds();
    elm=svggc.createRect(boRect.getLeft(),boRect.getTop(),boRect.getWidth(),boRect.getHeight());
  }
 else   if (pre instanceof AreaRenderEvent) {
    AreaRenderEvent are=(AreaRenderEvent)pre;
    final GeneralPath gp=new GeneralPath();
    PrimitiveRenderEvent subPre;
    for (int i=0; i < are.getElementCount(); i++) {
      subPre=are.getElement(i);
      if (subPre instanceof ArcRenderEvent) {
        final ArcRenderEvent acre=(ArcRenderEvent)subPre;
        final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
        gp.append(a2d,true);
      }
 else       if (subPre instanceof LineRenderEvent) {
        final LineRenderEvent lre=(LineRenderEvent)subPre;
        final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
        gp.append(l2d,true);
      }
    }
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof LineRenderEvent) {
    final GeneralPath gp=new GeneralPath();
    final LineRenderEvent lre=(LineRenderEvent)pre;
    final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
    gp.append(l2d,true);
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  ivRenderer.prepareInteractiveEvent(elm,ie,triggers);
}",0.9484066767830044
75866,"private void createCube(IDocArchiveWriter writter) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new org.eclipse.birt.data.engine.olap.api.cube.CubeMaterializer(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
}","private void createCube(IDocArchiveWriter writter) throws BirtException, IOException {
  CubeMaterializer cubeMaterializer=new org.eclipse.birt.data.engine.olap.api.cube.CubeMaterializer(System.getProperty(""String_Node_Str""),""String_Node_Str"");
  IDocumentManager documentManager=cubeMaterializer.getDocumentManager();
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
  cubeMaterializer.saveCubeToReportDocument(""String_Node_Str"",writter,null);
  cubeMaterializer.close();
}",0.9938244375827084
75867,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
      cubeMaterializer.close();
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
      cubeMaterializer.close();
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.9604449938195304
75868,"/** 
 * @param cubeName
 * @return
 * @throws IOException
 * @throws DataException
 */
private ICube loadCube(CubeQueryExecutor executor) throws DataException, IOException {
  ICube cube=null;
  IDocumentManager documentManager;
  documentManager=getDocumentManager(executor);
  cube=CubeQueryExecutorHelper.loadCube(executor.getCubeQueryDefinition().getName(),documentManager,new StopSign());
  return cube;
}","/** 
 * @param cubeName
 * @return
 * @throws IOException
 * @throws DataException
 */
private ICube loadCube(IDocumentManager documentManager,CubeQueryExecutor executor) throws DataException, IOException {
  ICube cube=null;
  cube=CubeQueryExecutorHelper.loadCube(executor.getCubeQueryDefinition().getName(),documentManager,new StopSign());
  return cube;
}",0.8478543563068921
75869,"protected void perform(boolean undo){
  boolean doAdd=(undo && !isAdd || !undo && isAdd);
  if (doAdd) {
    list.add(listRef.getIndex(),value);
    if (listRef.getDepth() == 1) {
      CachedMemberRef memberRef=new CachedMemberRef(listRef.getPropDefn(),listRef.getIndex());
      Structure.StructureContext structContext=new Structure.StructureContext(element,memberRef);
      ((Structure)value).setContext(structContext);
    }
 else {
      Structure.StructureContext structContext=new Structure.StructureContext(element,listRef.getPropDefn().getName());
      ((Structure)value).setContext(structContext);
    }
  }
 else {
    list.remove(listRef.getIndex());
  }
}","protected void perform(boolean undo){
  boolean doAdd=(undo && !isAdd || !undo && isAdd);
  if (doAdd) {
    list.add(listRef.getIndex(),value);
    IPropertyDefn propDefn=listRef.getPropDefn();
    if (listRef.getDepth() == 1 && propDefn.isList() && propDefn.getStructDefn() != null) {
      CachedMemberRef memberRef=new CachedMemberRef(listRef.getPropDefn(),listRef.getIndex());
      Structure.StructureContext structContext=new Structure.StructureContext(element,memberRef);
      ((Structure)value).setContext(structContext);
    }
 else {
      Structure.StructureContext structContext=new Structure.StructureContext(element,listRef.getPropDefn().getName());
      ((Structure)value).setContext(structContext);
    }
  }
 else {
    list.remove(listRef.getIndex());
  }
}",0.9261559696342304
75870,"protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (needSort.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        inputParameter.setFixedOrder(!getProperty(CHECKBOX_SORT));
      }
      if (!inputParameter.isFixedOrder()) {
        if (dirtyProperties.containsKey(CHECKBOX_DISTINCT)) {
          inputParameter.setDistinct(!getProperty(CHECKBOX_DISTINCT));
        }
        if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
        }
        if (sortDirectionChooser.getText().equals(NONE_DISPLAY_TEXT)) {
          inputParameter.setSortDirection(null);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputParameter.setName(nameEditor.getText());
    inputParameter.setPromptText(UIUtil.convertToModelString(promptTextEditor.getText(),true));
    String newControlType=getSelectedControlType();
    if (PARAM_CONTROL_COMBO.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(false);
    }
 else     if (PARAM_CONTROL_LIST.equals(newControlType)) {
      newControlType=DesignChoiceConstants.PARAM_CONTROL_LIST_BOX;
      inputParameter.setMustMatch(true);
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.MUCH_MATCH_PROP,null);
    }
    inputParameter.setControlType(newControlType);
    if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
      defaultValue=DEUtil.convertToXMLString(DataTypeUtil.toDate(defaultValue,ULocale.US));
    }
    inputParameter.setDefaultValue(defaultValue);
    inputParameter.setDataType(DATA_TYPE_CHOICE_SET.findChoiceByDisplayName(dataTypeChooser.getText()).getName());
    PropertyHandle selectionChioceList=inputParameter.getPropertyHandle(ScalarParameterHandle.SELECTION_LIST_PROP);
    selectionChioceList.setValue(null);
    if (isStatic()) {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
      if (!DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX.equals(newControlType) && !DesignChoiceConstants.PARAM_CONTROL_CHECK_BOX.equals(newControlType)) {
        for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
          SelectionChoice choice=(SelectionChoice)iter.next();
          if (isValidValue(choice.getValue()) == null) {
            selectionChioceList.addItem(choice);
          }
        }
      }
      inputParameter.setDataSetName(null);
      inputParameter.setValueExpr(null);
      inputParameter.setLabelExpr(null);
    }
 else {
      inputParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC);
      inputParameter.setDataSetName(dataSetChooser.getText());
      inputParameter.setValueExpr(getExpression(columnChooser.getText()));
      if (displayTextChooser.getText().equals(LABEL_NULL)) {
        inputParameter.setLabelExpr(""String_Node_Str"");
      }
 else {
        inputParameter.setLabelExpr(getExpression(displayTextChooser.getText()));
      }
    }
    inputParameter.setHelpText(UIUtil.convertToModelString(helpTextEditor.getText(),false));
    inputParameter.setCategory(formatCategroy);
    inputParameter.setPattern(formatPattern);
    if (isStatic() && (PARAM_CONTROL_COMBO.equals(getSelectedControlType()) || DesignChoiceConstants.PARAM_CONTROL_RADIO_BUTTON.equals(getSelectedControlType())) && !containValue(null,defaultValue,COLUMN_VALUE)) {
      defaultValue=null;
    }
    if (dirtyProperties.containsKey(CHECKBOX_HIDDEN)) {
      inputParameter.setHidden(getProperty(CHECKBOX_HIDDEN));
    }
    if (dirtyProperties.containsKey(CHECKBOX_ISREQUIRED)) {
      inputParameter.setIsRequired(getProperty(CHECKBOX_ISREQUIRED));
    }
    if (doNotEcho.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_DO_NOT_ECHO)) {
        inputParameter.setConcealValue(getProperty(CHECKBOX_DO_NOT_ECHO));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.CONCEAL_VALUE_PROP,null);
    }
    if (needSort.isEnabled()) {
      if (dirtyProperties.containsKey(CHECKBOX_SORT)) {
        inputParameter.setFixedOrder(!getProperty(CHECKBOX_SORT));
      }
      if (!inputParameter.isFixedOrder()) {
        if (dirtyProperties.containsKey(CHECKBOX_DISTINCT)) {
          inputParameter.setDistinct(!getProperty(CHECKBOX_DISTINCT));
        }
        if (sortKeyChooser.getText().equals(CHOICE_DISPLAY_TEXT)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_LABEL);
        }
 else         if (sortKeyChooser.getText().equals(CHOICE_VALUE_COLUMN)) {
          inputParameter.setSortBy(DesignChoiceConstants.PARAM_SORT_VALUES_VALUE);
        }
        if (sortDirectionChooser.getText().equals(CHOICE_ASCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_ASC);
        }
 else         if (sortDirectionChooser.getText().equals(CHOICE_DESCENDING)) {
          inputParameter.setSortDirection(DesignChoiceConstants.SORT_DIRECTION_DESC);
        }
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.FIXED_ORDER_PROP,null);
    }
    if (!isStatic() && !StringUtil.isBlank(listLimit.getText())) {
      try {
        inputParameter.setListlimit(Integer.parseInt(listLimit.getText()));
      }
 catch (      NumberFormatException ex) {
        ExceptionHandler.openErrorMessageBox(ERROR_TITLE_INVALID_LIST_LIMIT,MessageFormat.format(ERROR_MSG_INVALID_LIST_LIMIT,new Object[]{Integer.toString(Integer.MAX_VALUE)}));
      }
    }
 else {
      inputParameter.setProperty(ScalarParameterHandle.LIST_LIMIT_PROP,null);
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  setResult(inputParameter);
  super.okPressed();
}",0.9802301563883152
75871,"public void buildStyle(IContent element,StringBuffer styleBuffer){
  IStyle style;
  if (isEmbeddable) {
    style=element.getStyle();
  }
 else {
    style=element.getInlineStyle();
  }
  AttributeBuilder.buildStyle(styleBuffer,style,parentEmitter);
  AttributeBuilder.checkHyperlinkTextDecoration(element.getComputedStyle(),styleBuffer);
}","public void buildStyle(IContent element,StringBuffer styleBuffer){
  buildSimpleStyle(element,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(element.getComputedStyle(),styleBuffer);
}",0.6901669758812616
75872,"/** 
 * Handles the style of a cell
 * @param cell:the cell content
 * @param styleBuffer:the buffer to store the tyle building result.
 */
protected void buildCellBaseStyle(ICellContent cell,StringBuffer styleBuffer){
  IStyle style=null;
  if (isEmbeddable) {
    style=cell.getStyle();
  }
 else {
    style=cell.getInlineStyle();
  }
  AttributeBuilder.buildCellStyle(styleBuffer,style,parentEmitter);
  int columnCount=-1;
  IStyle cellStyle=null, cellComputedStyle=null;
  IStyle rowStyle=null, rowComputedStyle=null;
  cellStyle=cell.getStyle();
  cellComputedStyle=cell.getComputedStyle();
  IRowContent row=(IRowContent)cell.getParent();
  if (null != row) {
    rowStyle=row.getStyle();
    rowComputedStyle=row.getComputedStyle();
    ITableContent table=row.getTable();
    if (null != table) {
      columnCount=table.getColumnCount();
    }
  }
  if (null == rowStyle || cell.getColumn() < 0 || columnCount < 1) {
    if (null != cellStyle) {
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_TOP,cellStyle.getBorderTopWidth(),cellStyle.getBorderTopStyle(),cellStyle.getBorderTopColor(),0,null,null,null,0);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,cellStyle.getBorderRightWidth(),cellStyle.getBorderRightStyle(),cellStyle.getBorderRightColor(),0,null,null,null,0);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_BOTTOM,cellStyle.getBorderBottomWidth(),cellStyle.getBorderBottomStyle(),cellStyle.getBorderBottomColor(),0,null,null,null,0);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,cellStyle.getBorderLeftWidth(),cellStyle.getBorderLeftStyle(),cellStyle.getBorderLeftColor(),0,null,null,null,0);
    }
  }
 else   if (null == cellStyle) {
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_TOP,null,null,null,0,rowStyle.getBorderTopWidth(),rowStyle.getBorderTopStyle(),rowStyle.getBorderTopColor(),0);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,null,null,null,0,rowStyle.getBorderRightWidth(),rowStyle.getBorderRightStyle(),rowStyle.getBorderRightColor(),0);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_BOTTOM,null,null,null,0,rowStyle.getBorderBottomWidth(),rowStyle.getBorderBottomStyle(),rowStyle.getBorderBottomColor(),0);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,null,null,null,0,rowStyle.getBorderLeftWidth(),rowStyle.getBorderLeftStyle(),rowStyle.getBorderLeftColor(),0);
  }
 else {
    int cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_TOP_WIDTH);
    int rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_TOP_WIDTH);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_TOP,cellStyle.getBorderTopWidth(),cellStyle.getBorderTopStyle(),cellStyle.getBorderTopColor(),cellWidthValue,rowStyle.getBorderTopWidth(),rowStyle.getBorderTopStyle(),rowStyle.getBorderTopColor(),rowWidthValue);
    if ((cell.getColumn() + cell.getColSpan()) == columnCount) {
      cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_RIGHT_WIDTH);
      rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_RIGHT_WIDTH);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,cellStyle.getBorderRightWidth(),cellStyle.getBorderRightStyle(),cellStyle.getBorderRightColor(),cellWidthValue,rowStyle.getBorderRightWidth(),rowStyle.getBorderRightStyle(),rowStyle.getBorderRightColor(),rowWidthValue);
    }
 else {
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,cellStyle.getBorderRightWidth(),cellStyle.getBorderRightStyle(),cellStyle.getBorderRightColor(),0,null,null,null,0);
    }
    cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_BOTTOM_WIDTH);
    rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_BOTTOM_WIDTH);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_BOTTOM,cellStyle.getBorderBottomWidth(),cellStyle.getBorderBottomStyle(),cellStyle.getBorderBottomColor(),cellWidthValue,rowStyle.getBorderBottomWidth(),rowStyle.getBorderBottomStyle(),rowStyle.getBorderBottomColor(),rowWidthValue);
    if (cell.getColumn() == 0) {
      cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_LEFT_WIDTH);
      rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_LEFT_WIDTH);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,cellStyle.getBorderLeftWidth(),cellStyle.getBorderLeftStyle(),cellStyle.getBorderLeftColor(),cellWidthValue,rowStyle.getBorderLeftWidth(),rowStyle.getBorderLeftStyle(),rowStyle.getBorderLeftColor(),rowWidthValue);
    }
 else {
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,cellStyle.getBorderLeftWidth(),cellStyle.getBorderLeftStyle(),cellStyle.getBorderLeftColor(),0,null,null,null,0);
    }
  }
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
}","/** 
 * Handles the style of a cell
 * @param cell:the cell content
 * @param styleBuffer:the buffer to store the tyle building result.
 */
protected void buildCellBaseStyle(ICellContent cell,StringBuffer styleBuffer){
  IStyle style=null;
  if (isEmbeddable) {
    style=cell.getStyle();
  }
 else {
    style=cell.getInlineStyle();
  }
  AttributeBuilder.buildCellStyle(styleBuffer,style,parentEmitter);
  int columnCount=-1;
  IStyle cellStyle=null, cellComputedStyle=null;
  IStyle rowStyle=null, rowComputedStyle=null;
  cellStyle=cell.getStyle();
  cellComputedStyle=cell.getComputedStyle();
  IRowContent row=(IRowContent)cell.getParent();
  if (null != row) {
    rowStyle=row.getStyle();
    rowComputedStyle=row.getComputedStyle();
    ITableContent table=row.getTable();
    if (null != table) {
      columnCount=table.getColumnCount();
    }
  }
  if (null == rowStyle || cell.getColumn() < 0 || columnCount < 1) {
    if (null != cellStyle) {
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_TOP,cellStyle.getBorderTopWidth(),cellStyle.getBorderTopStyle(),cellStyle.getBorderTopColor(),0,null,null,null,0);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,cellStyle.getBorderRightWidth(),cellStyle.getBorderRightStyle(),cellStyle.getBorderRightColor(),0,null,null,null,0);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_BOTTOM,cellStyle.getBorderBottomWidth(),cellStyle.getBorderBottomStyle(),cellStyle.getBorderBottomColor(),0,null,null,null,0);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,cellStyle.getBorderLeftWidth(),cellStyle.getBorderLeftStyle(),cellStyle.getBorderLeftColor(),0,null,null,null,0);
    }
  }
 else   if (null == cellStyle) {
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_TOP,null,null,null,0,rowStyle.getBorderTopWidth(),rowStyle.getBorderTopStyle(),rowStyle.getBorderTopColor(),0);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,null,null,null,0,rowStyle.getBorderRightWidth(),rowStyle.getBorderRightStyle(),rowStyle.getBorderRightColor(),0);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_BOTTOM,null,null,null,0,rowStyle.getBorderBottomWidth(),rowStyle.getBorderBottomStyle(),rowStyle.getBorderBottomColor(),0);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,null,null,null,0,rowStyle.getBorderLeftWidth(),rowStyle.getBorderLeftStyle(),rowStyle.getBorderLeftColor(),0);
  }
 else {
    int cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_TOP_WIDTH);
    int rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_TOP_WIDTH);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_TOP,cellStyle.getBorderTopWidth(),cellStyle.getBorderTopStyle(),cellStyle.getBorderTopColor(),cellWidthValue,rowStyle.getBorderTopWidth(),rowStyle.getBorderTopStyle(),rowStyle.getBorderTopColor(),rowWidthValue);
    if ((cell.getColumn() + cell.getColSpan()) == columnCount) {
      cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_RIGHT_WIDTH);
      rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_RIGHT_WIDTH);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,cellStyle.getBorderRightWidth(),cellStyle.getBorderRightStyle(),cellStyle.getBorderRightColor(),cellWidthValue,rowStyle.getBorderRightWidth(),rowStyle.getBorderRightStyle(),rowStyle.getBorderRightColor(),rowWidthValue);
    }
 else {
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_RIGHT,cellStyle.getBorderRightWidth(),cellStyle.getBorderRightStyle(),cellStyle.getBorderRightColor(),0,null,null,null,0);
    }
    cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_BOTTOM_WIDTH);
    rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_BOTTOM_WIDTH);
    buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_BOTTOM,cellStyle.getBorderBottomWidth(),cellStyle.getBorderBottomStyle(),cellStyle.getBorderBottomColor(),cellWidthValue,rowStyle.getBorderBottomWidth(),rowStyle.getBorderBottomStyle(),rowStyle.getBorderBottomColor(),rowWidthValue);
    if (cell.getColumn() == 0) {
      cellWidthValue=getBorderWidthValue(cellComputedStyle,IStyle.STYLE_BORDER_LEFT_WIDTH);
      rowWidthValue=getBorderWidthValue(rowComputedStyle,IStyle.STYLE_BORDER_LEFT_WIDTH);
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,cellStyle.getBorderLeftWidth(),cellStyle.getBorderLeftStyle(),cellStyle.getBorderLeftColor(),cellWidthValue,rowStyle.getBorderLeftWidth(),rowStyle.getBorderLeftStyle(),rowStyle.getBorderLeftColor(),rowWidthValue);
    }
 else {
      buildCellRowBorder(styleBuffer,HTMLTags.ATTR_BORDER_LEFT,cellStyle.getBorderLeftWidth(),cellStyle.getBorderLeftStyle(),cellStyle.getBorderLeftColor(),0,null,null,null,0);
    }
  }
}",0.9933430413979611
75873,"/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(foreign,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(foreign.getComputedStyle(),styleBuffer);
}","/** 
 * Build the style of foreign content.
 */
public void buildForeignStyle(IForeignContent foreign,StringBuffer styleBuffer,int display,String url){
  IStyle style=foreign.getStyle();
  handleShrink(display,style,foreign.getHeight(),foreign.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=foreign.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildSimpleStyle(foreign,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(foreign.getComputedStyle(),styleBuffer);
}",0.9964454976303316
75874,"/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildStyle(text,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(text.getComputedStyle(),styleBuffer);
}","/** 
 * Build the style of text content.
 */
public void buildTextStyle(ITextContent text,StringBuffer styleBuffer,int display,String url){
  IStyle style=text.getStyle();
  handleShrink(display,style,text.getHeight(),text.getWidth(),styleBuffer);
  if (url != null) {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_BLOCK | HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
 else {
    setDisplayProperty(display,HTMLEmitterUtil.DISPLAY_INLINE_BLOCK,styleBuffer);
  }
  String textAlign=text.getComputedStyle().getTextAlign();
  if (textAlign != null) {
    styleBuffer.append(""String_Node_Str"");
    styleBuffer.append(textAlign);
    styleBuffer.append(""String_Node_Str"");
  }
  buildSimpleStyle(text,styleBuffer);
  AttributeBuilder.checkHyperlinkTextDecoration(text.getComputedStyle(),styleBuffer);
}",0.9963144963144964
75875,"public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=null;
    if (isCascadingParameter(parameter)) {
      group=getCascadingGroup(parameter);
    }
    if (group != null && DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
      return getCascadingParameterList(parameter);
    }
 else     if (parameter.getDataSetName() != null) {
      return getChoicesFromParameterQuery(parameter);
    }
 else     if (group != null) {
      return getCascadingParameterList(parameter);
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(true,parameter.getPattern(),ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}","public Collection getSelectionList(String name){
  usingParameterValues();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  ScalarParameterHandle parameter=(ScalarParameterHandle)report.findParameter(name);
  if (parameter == null) {
    return Collections.EMPTY_LIST;
  }
  String selectionType=parameter.getValueType();
  String dataType=parameter.getDataType();
  boolean fixedOrder=parameter.isFixedOrder();
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(parameter.getSortBy());
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(parameter.getSortDirection());
  if (DesignChoiceConstants.PARAM_VALUE_TYPE_DYNAMIC.equals(selectionType)) {
    CascadingParameterGroupHandle group=null;
    if (isCascadingParameter(parameter)) {
      group=getCascadingGroup(parameter);
    }
    if (group != null && DesignChoiceConstants.DATA_SET_MODE_SINGLE.equals(group.getDataSetMode())) {
      return getCascadingParameterList(parameter);
    }
 else     if (parameter.getDataSetName() != null) {
      return getChoicesFromParameterQuery(parameter);
    }
 else     if (group != null) {
      return getCascadingParameterList(parameter);
    }
  }
 else   if (DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC.equals(selectionType)) {
    Iterator iter=parameter.choiceIterator();
    ArrayList choices=new ArrayList();
    while (iter.hasNext()) {
      SelectionChoiceHandle choice=(SelectionChoiceHandle)iter.next();
      String label=report.getMessage(choice.getLabelKey(),locale);
      if (label == null) {
        label=choice.getLabel();
      }
      Object value=getStringValue(choice.getValue(),dataType);
      choices.add(new SelectionChoice(label,value));
    }
    if (!fixedOrder)     Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,parameter.getPattern(),sortDirectionValue,ULocale.forLocale(locale)));
    return choices;
  }
  return Collections.EMPTY_LIST;
}",0.943089430894309
75876,"/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder,boolean isDistinct,String sortDirection,String sortBy){
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(sortDirection);
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(sortBy);
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataRequestSession dteSession=getDataSession();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      Map checkPool=new HashMap();
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        value=convertToType(value,dataType);
        if (isDistinct) {
          if (!checkPool.containsKey(value)) {
            checkPool.put(value,value);
            choices.add(new SelectionChoice(label,value));
            count++;
          }
        }
 else {
          choices.add(new SelectionChoice(label,value));
          count++;
        }
        if ((limit != 0) && (count >= limit)) {
          break;
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale)));
  return choices;
}","/** 
 * get selection choices from the data set.
 * @param dataSetName data set name
 * @param labelStmt label statement
 * @param valueStmt value statement
 * @param dataType value type
 * @return
 */
private Collection createDynamicSelectionChoices(String pattern,String dataSetName,String labelStmt,String valueStmt,String dataType,int limit,boolean fixedOrder,boolean isDistinct,String sortDirection,String sortBy){
  boolean sortDirectionValue=""String_Node_Str"".equalsIgnoreCase(sortDirection);
  boolean sortByLabel=""String_Node_Str"".equalsIgnoreCase(sortBy);
  ArrayList choices=new ArrayList();
  ReportDesignHandle report=(ReportDesignHandle)this.runnable.getDesignHandle();
  DataSetHandle dataSet=report.findDataSet(dataSetName);
  if (dataSet != null) {
    try {
      IDataEngine dataEngine=executionContext.getDataEngine();
      DataRequestSession dteSession=getDataSession();
      dataEngine.defineDataSet(dataSet);
      ScriptExpression labelExpr=null;
      if (labelStmt != null && labelStmt.length() > 0) {
        labelExpr=new ScriptExpression(labelStmt);
      }
      ScriptExpression valueExpr=new ScriptExpression(valueStmt);
      QueryDefinition queryDefn=new QueryDefinition();
      queryDefn.setDataSetName(dataSetName);
      if (limit > 0) {
        queryDefn.setMaxRows(limit);
      }
      Iterator paramIter=dataSet.paramBindingsIterator();
      while (paramIter.hasNext()) {
        ParamBindingHandle binding=(ParamBindingHandle)paramIter.next();
        String paramName=binding.getParamName();
        String paramExpr=binding.getExpression();
        queryDefn.getInputParamBindings().add(new InputParameterBinding(paramName,new ScriptExpression(paramExpr)));
      }
      String labelColumnName=LABEL_PREFIX;
      ;
      String valueColumnName=VALUE_PREFIX;
      ;
      if (labelExpr != null) {
        queryDefn.addResultSetExpression(labelColumnName,labelExpr);
      }
      queryDefn.addResultSetExpression(valueColumnName,valueExpr);
      queryDefn.setAutoBinding(true);
      IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
      IQueryResults result=query.execute(executionContext.getSharedScope());
      IResultIterator iter=result.getResultIterator();
      int count=0;
      Map checkPool=new HashMap();
      while (iter.next()) {
        String label=null;
        if (labelExpr != null) {
          label=iter.getString(labelColumnName);
        }
        Object value=iter.getValue(valueColumnName);
        value=convertToType(value,dataType);
        if (isDistinct) {
          if (!checkPool.containsKey(value)) {
            checkPool.put(value,value);
            choices.add(new SelectionChoice(label,value));
            count++;
          }
        }
 else {
          choices.add(new SelectionChoice(label,value));
          count++;
        }
        if ((limit != 0) && (count >= limit)) {
          break;
        }
      }
    }
 catch (    BirtException ex) {
      ex.printStackTrace();
    }
  }
  if (!fixedOrder)   Collections.sort(choices,new SelectionChoiceComparator(sortByLabel,pattern,sortDirectionValue,ULocale.forLocale(locale)));
  return choices;
}",0.9969893836159088
75877,"/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}","/** 
 * Creates a PdfAction.
 * @param hyperlink the hyperlink.
 * @param bookmark the bookmark.
 * @param target if target equals ""_blank"", the target will be opened in a new window, else the target will be opened in the current window.
 * @return the created PdfAction.
 */
private PdfAction createPdfAction(String hyperlink,String bookmark,String target,int type){
  if (""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target) || ""String_Node_Str"".equalsIgnoreCase(target)|| ""String_Node_Str"".equalsIgnoreCase(target)) {
    return new PdfAction(hyperlink);
  }
 else {
    if (type == IHyperlinkAction.ACTION_BOOKMARK) {
      return PdfAction.gotoLocalPage(bookmark,false);
    }
 else {
      return PdfAction.gotoRemotePage(hyperlink,bookmark,false,false);
    }
  }
}",0.90736984448952
75878,"public static IDesignElement getElement(org.eclipse.birt.report.model.api.simpleapi.IDesignElement element){
  if (element == null)   return null;
  if (element instanceof IReportDesign)   return new ReportDesign((IReportDesign)element);
  if (element instanceof IDataItem)   return new DataItem((IDataItem)element);
  if (element instanceof IGrid)   return new Grid((IGrid)element);
  if (element instanceof IImage)   return new Image((IImage)element);
  if (element instanceof ILabel)   return new Label((ILabel)element);
  if (element instanceof IList)   return new List((IList)element);
  if (element instanceof ITable)   return new Table((ITable)element);
  if (element instanceof IDynamicText)   return new DynamicText((IDynamicText)element);
  if (element instanceof ITextItem)   return new TextItem((ITextItem)element);
  return new DesignElement(element);
}","public static IDesignElement getElement(org.eclipse.birt.report.model.api.simpleapi.IDesignElement element){
  if (element == null)   return null;
  if (element instanceof IReportDesign)   return new ReportDesign((IReportDesign)element);
  if (element instanceof IDataItem)   return new DataItem((IDataItem)element);
  if (element instanceof IGrid)   return new Grid((IGrid)element);
  if (element instanceof IImage)   return new Image((IImage)element);
  if (element instanceof ILabel)   return new Label((ILabel)element);
  if (element instanceof IList)   return new List((IList)element);
  if (element instanceof ITable)   return new Table((ITable)element);
  if (element instanceof IDynamicText)   return new DynamicText((IDynamicText)element);
  if (element instanceof ITextItem)   return new TextItem((ITextItem)element);
  if (element instanceof IReportItem)   return new ReportItem((IReportItem)element);
  if (element instanceof IReportElement)   return new ReportElement((IReportElement)element);
  return new DesignElement(element);
}",0.9063317634746206
75879,"public DataItem(org.eclipse.birt.report.model.api.simpleapi.IDataItem dataItem){
  super(null);
  designElementImpl=dataItem;
}","public DataItem(org.eclipse.birt.report.model.api.simpleapi.IDataItem dataItem){
  super(dataItem);
}",0.8771929824561403
75880,"public DynamicText(org.eclipse.birt.report.model.api.simpleapi.IDynamicText dynamicTextImpl){
  super(null);
  designElementImpl=dynamicTextImpl;
}","public DynamicText(org.eclipse.birt.report.model.api.simpleapi.IDynamicText dynamicTextImpl){
  super(dynamicTextImpl);
}",0.8955223880597015
75881,"public Grid(org.eclipse.birt.report.model.api.simpleapi.IGrid gridImpl){
  super(null);
  designElementImpl=gridImpl;
}","public Grid(org.eclipse.birt.report.model.api.simpleapi.IGrid gridImpl){
  super(gridImpl);
}",0.8679245283018868
75882,"public Image(org.eclipse.birt.report.model.api.simpleapi.IImage imageImpl){
  super(null);
  designElementImpl=imageImpl;
}","public Image(org.eclipse.birt.report.model.api.simpleapi.IImage imageImpl){
  super(imageImpl);
}",0.8727272727272727
75883,"public Label(org.eclipse.birt.report.model.api.simpleapi.ILabel labelImpl){
  super(null);
  designElementImpl=labelImpl;
}","public Label(org.eclipse.birt.report.model.api.simpleapi.ILabel labelImpl){
  super(labelImpl);
}",0.8727272727272727
75884,"public IReportElement getReportElement(String name){
  org.eclipse.birt.report.model.api.simpleapi.IReportElement tmpElement=((org.eclipse.birt.report.model.api.simpleapi.IReportDesign)designElementImpl).getReportElement(name);
  return (IReportElement)ElementUtil.getElement(tmpElement);
}","public IReportElement getReportElement(String name){
  org.eclipse.birt.report.model.api.simpleapi.IReportElement tmpElement=((org.eclipse.birt.report.model.api.simpleapi.IReportDesign)designElementImpl).getReportElement(name);
  IDesignElement retElement=ElementUtil.getElement(tmpElement);
  if (retElement instanceof IReportElement)   return (IReportElement)retElement;
  return null;
}",0.7540500736377025
75885,"/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.getFile();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}","/** 
 * Outputs the image
 * @param ele the IMG element instance
 */
protected void outputImg(Element ele,HashMap cssStyles,IContent content){
  String src=ele.getAttribute(""String_Node_Str"");
  if (src != null) {
    IImageContent image=new ImageContent(content);
    addChild(content,image);
    handleStyle(ele,cssStyles,image);
    if (!FileUtil.isLocalResource(src)) {
      image.setImageSource(IImageContent.IMAGE_URL);
      image.setURI(src);
    }
 else {
      ReportDesignHandle handle=content.getReportContent().getDesign().getReportDesign();
      URL url=handle.findResource(src,IResourceLocator.IMAGE);
      if (url != null) {
        src=url.toString();
      }
      image.setImageSource(IImageContent.IMAGE_FILE);
      image.setURI(src);
    }
    if (null != ele.getAttribute(""String_Node_Str"") && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setWidth(DimensionType.parserUnit(ele.getAttribute(""String_Node_Str"")));
    }
    if (ele.getAttribute(""String_Node_Str"") != null && !""String_Node_Str"".equals(ele.getAttribute(""String_Node_Str""))) {
      image.setAltText(ele.getAttribute(""String_Node_Str""));
    }
  }
}",0.99457111834962
75886,"/** 
 * To test add/remove methods on aggregateOn and argument lists.
 * @throws Exception
 */
public void testSimpleListProperties() throws Exception {
  createDesign();
  DataItemHandle data=designHandle.getElementFactory().newDataItem(""String_Node_Str"");
  designHandle.getBody().add(data);
  ComputedColumn column=StructureFactory.createComputedColumn();
  column.setName(""String_Node_Str"");
  column.setExpression(""String_Node_Str"");
  ComputedColumnHandle columnHandle=data.addColumnBinding(column,false);
  columnHandle.addArgument(""String_Node_Str"");
  List arguments=columnHandle.getArgumentList();
  assertEquals(1,arguments.size());
  columnHandle.removeArgument(""String_Node_Str"");
  arguments=columnHandle.getArgumentList();
  assertEquals(0,arguments.size());
  columnHandle.addAggregateOn(""String_Node_Str"");
  List aggregates=columnHandle.getAggregateOnList();
  assertEquals(1,aggregates.size());
  columnHandle.removeAggregateOn(""String_Node_Str"");
  aggregates=columnHandle.getAggregateOnList();
  assertEquals(0,aggregates.size());
}","/** 
 * To test add/remove methods on aggregateOn and argument lists.
 * @throws Exception
 */
public void testSimpleListProperties() throws Exception {
  createDesign();
  DataItemHandle data=designHandle.getElementFactory().newDataItem(""String_Node_Str"");
  designHandle.getBody().add(data);
  ComputedColumn column=StructureFactory.createComputedColumn();
  column.setName(""String_Node_Str"");
  column.setExpression(""String_Node_Str"");
  column.setAggregateOn(""String_Node_Str"");
  column.addAggregateOn(""String_Node_Str"");
  assertEquals(2,column.getAggregateOnList().size());
  column.clearAggregateOnList();
  assertEquals(0,column.getAggregateOnList().size());
  ComputedColumnHandle columnHandle=data.addColumnBinding(column,false);
  columnHandle.addArgument(""String_Node_Str"");
  List arguments=columnHandle.getArgumentList();
  assertEquals(1,arguments.size());
  columnHandle.removeArgument(""String_Node_Str"");
  arguments=columnHandle.getArgumentList();
  assertEquals(0,arguments.size());
  columnHandle.addAggregateOn(""String_Node_Str"");
  List aggregates=columnHandle.getAggregateOnList();
  assertEquals(1,aggregates.size());
  columnHandle.removeAggregateOn(""String_Node_Str"");
  aggregates=columnHandle.getAggregateOnList();
  assertEquals(0,aggregates.size());
  columnHandle.setAggregateOn(""String_Node_Str"");
  columnHandle.addAggregateOn(""String_Node_Str"");
  assertEquals(2,columnHandle.getAggregateOnList().size());
  columnHandle.clearAggregateOnList();
  assertEquals(0,columnHandle.getAggregateOnList().size());
}",0.8118735543562067
75887,"/** 
 * Returns the list containing levels to be aggregated on.
 * @return the list containing levels to be aggregated on
 */
public List getAggregateOnList(){
  List aggregateOns=(List)getProperty(ComputedColumn.AGGREGATEON_MEMBER);
  if (aggregateOns == null)   return null;
  return Collections.unmodifiableList(aggregateOns);
}","/** 
 * Returns the list containing levels to be aggregated on.
 * @return the list containing levels to be aggregated on
 */
public List getAggregateOnList(){
  List aggregateOns=(List)getProperty(ComputedColumn.AGGREGATEON_MEMBER);
  if (aggregateOns == null)   return Collections.EMPTY_LIST;
  return Collections.unmodifiableList(aggregateOns);
}",0.961764705882353
75888,"/** 
 * Removes an aggregate level from the list.
 * @param aggreValue the aggregate name. For listing elements, this can be ""All"" or the name of a single group.
 */
public void removeAggregateOn(String aggreValue){
  if (aggregrateOn == null)   return;
  aggregrateOn.remove(aggreValue);
}","/** 
 * Removes an aggregate level from the list.
 * @param aggreValue the aggregate name. For listing elements, this can be ""All"" or the name of a single group.
 */
public void removeAggregateOn(String aggreValue){
  if (aggregateOn == null)   return;
  aggregateOn.remove(aggreValue);
}",0.9965397923875432
75889,"/** 
 * Returns the list containing levels to be aggregated on.
 * @return the list containing levels to be aggregated on
 */
public List getAggregateOnList(){
  return (List)getProperty(null,AGGREGATEON_MEMBER);
}","/** 
 * Returns the list containing levels to be aggregated on.
 * @return the list containing levels to be aggregated on
 */
public List getAggregateOnList(){
  List value=(List)getProperty(null,AGGREGATEON_MEMBER);
  if (value == null)   return Collections.EMPTY_LIST;
  return (List)value;
}",0.8149606299212598
75890,"/** 
 * Adds an aggregate level to the list.
 * @param aggreValue the aggregate name. For listing elements, this can be ""All"" or the name of a single group.
 */
public void addAggregateOn(String aggreValue){
  if (aggregrateOn == null)   aggregrateOn=new ArrayList();
  aggregrateOn.add(aggreValue);
}","/** 
 * Adds an aggregate level to the list.
 * @param aggreValue the aggregate name. For listing elements, this can be ""All"" or the name of a single group.
 */
public void addAggregateOn(String aggreValue){
  if (aggregateOn == null)   aggregateOn=new ArrayList();
  aggregateOn.add(aggreValue);
}",0.994991652754591
75891,"/** 
 * Tests one report design including an inexistent library. And test status of elements that extends library elements.
 * @throws Exception if any exception
 */
public void testLoadDesignWithInexistentLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  List libraries=designHandle.getAllLibraries();
  assertEquals(1,libraries.size());
  LibraryHandle libHandle=(LibraryHandle)libraries.get(0);
  assertFalse(libHandle.isValid());
  assertEquals(DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND,((ErrorDetail)libHandle.getErrorList().get(0)).getErrorCode());
  ReportElementHandle element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertTrue(element.isValidLayoutForCompoundElement());
  element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertFalse(element.isValidLayoutForCompoundElement());
  element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertFalse(element.isValidLayoutForCompoundElement());
  element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertFalse(element.isValidLayoutForCompoundElement());
}","/** 
 * Tests one report design including an inexistent library. And test status of elements that extends library elements.
 * @throws Exception if any exception
 */
public void testLoadDesignWithInexistentLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  List libraries=designHandle.getAllLibraries();
  assertEquals(1,libraries.size());
  LibraryHandle libHandle=(LibraryHandle)libraries.get(0);
  assertFalse(libHandle.isValid());
  assertEquals(""String_Node_Str"",libHandle.getRelativeFileName());
  assertEquals(DesignParserException.DESIGN_EXCEPTION_FILE_NOT_FOUND,((ErrorDetail)libHandle.getErrorList().get(0)).getErrorCode());
  ReportElementHandle element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertTrue(element.isValidLayoutForCompoundElement());
  element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertFalse(element.isValidLayoutForCompoundElement());
  element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertFalse(element.isValidLayoutForCompoundElement());
  element=(ReportElementHandle)designHandle.findElement(""String_Node_Str"");
  assertFalse(element.isValidLayoutForCompoundElement());
}",0.9713797522426314
75892,"/** 
 * Tests one report design includes three libraries.
 * @throws Exception if any exception
 */
public void testLoadDesignWithThreeLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  List libraries=designHandle.getAllLibraries();
  assertEquals(3,libraries.size());
  LibraryHandle libraryHandle1=(LibraryHandle)libraries.get(0);
  LibraryHandle libraryHandle2=(LibraryHandle)libraries.get(1);
  assertTrue(libraryHandle1.isValid());
  assertTrue(libraryHandle2.isValid());
  PropertyHandle propHandle=designHandle.getPropertyHandle(ReportDesignHandle.LIBRARIES_PROP);
  ArrayList list=propHandle.getListValue();
  assertEquals(3,list.size());
  IncludedLibrary includeLibrary=(IncludedLibrary)list.get(0);
  assertEquals(""String_Node_Str"",includeLibrary.getFileName());
  assertEquals(""String_Node_Str"",includeLibrary.getNamespace());
  includeLibrary=(IncludedLibrary)list.get(1);
  assertEquals(""String_Node_Str"",includeLibrary.getFileName());
  assertEquals(""String_Node_Str"",includeLibrary.getNamespace());
  includeLibrary=(IncludedLibrary)list.get(2);
  assertEquals(""String_Node_Str"",includeLibrary.getFileName());
  assertEquals(""String_Node_Str"",includeLibrary.getNamespace());
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.AUTHOR_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.HELP_GUIDE_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.CREATED_BY_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.TITLE_ID_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.TITLE_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.COMMENTS_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.DESCRIPTION_ID_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.DESCRIPTION_PROP));
  PropertyHandle colorPalette=libraryHandle2.getPropertyHandle(Library.COLOR_PALETTE_PROP);
  List colors=colorPalette.getListValue();
  assertEquals(2,colors.size());
  CustomColor color=(CustomColor)colors.get(0);
  assertEquals(""String_Node_Str"",color.getName());
  assertEquals(111,color.getRGB());
  assertEquals(""String_Node_Str"",color.getDisplayNameID());
  assertEquals(""String_Node_Str"",color.getDisplayName());
  color=(CustomColor)colors.get(1);
  assertEquals(""String_Node_Str"",color.getName());
  assertEquals(222,color.getRGB());
  assertEquals(""String_Node_Str"",color.getDisplayNameID());
  PropertyHandle configVarHandle=libraryHandle2.getPropertyHandle(Library.CONFIG_VARS_PROP);
  List configVars=configVarHandle.getListValue();
  assertEquals(4,configVars.size());
  ConfigVariable var=(ConfigVariable)configVars.get(0);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(""String_Node_Str"",var.getValue());
  var=(ConfigVariable)configVars.get(1);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(""String_Node_Str"",var.getValue());
  var=(ConfigVariable)configVars.get(2);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(""String_Node_Str"",var.getValue());
  var=(ConfigVariable)configVars.get(3);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(null,var.getValue());
  PropertyHandle imageHandle=libraryHandle2.getPropertyHandle(Library.IMAGES_PROP);
  List images=imageHandle.getListValue();
  assertEquals(3,images.size());
  EmbeddedImage image=(EmbeddedImage)images.get(0);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getType(design));
  assertEquals(""String_Node_Str"",new String(Base64.encodeBase64(image.getData(design))).substring(0,11));
  image=(EmbeddedImage)images.get(1);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getType(design));
  assertEquals(""String_Node_Str"",new String(Base64.encodeBase64(image.getData(design))).substring(0,15));
  image=(EmbeddedImage)images.get(2);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getType(design));
  assertEquals(""String_Node_Str"",new String(Base64.encodeBase64(image.getData(design))));
}","/** 
 * Tests one report design includes three libraries.
 * @throws Exception if any exception
 */
public void testLoadDesignWithThreeLibrary() throws Exception {
  openDesign(""String_Node_Str"");
  List libraries=designHandle.getAllLibraries();
  assertEquals(3,libraries.size());
  LibraryHandle libraryHandle1=(LibraryHandle)libraries.get(0);
  LibraryHandle libraryHandle2=(LibraryHandle)libraries.get(1);
  assertTrue(libraryHandle1.isValid());
  assertTrue(libraryHandle2.isValid());
  PropertyHandle propHandle=designHandle.getPropertyHandle(ReportDesignHandle.LIBRARIES_PROP);
  ArrayList list=propHandle.getListValue();
  assertEquals(3,list.size());
  IncludedLibrary includeLibrary=(IncludedLibrary)list.get(0);
  assertEquals(""String_Node_Str"",includeLibrary.getFileName());
  assertEquals(""String_Node_Str"",includeLibrary.getNamespace());
  assertEquals(includeLibrary.getFileName(),libraryHandle1.getRelativeFileName());
  includeLibrary=(IncludedLibrary)list.get(1);
  assertEquals(""String_Node_Str"",includeLibrary.getFileName());
  assertEquals(""String_Node_Str"",includeLibrary.getNamespace());
  assertEquals(includeLibrary.getFileName(),libraryHandle2.getRelativeFileName());
  includeLibrary=(IncludedLibrary)list.get(2);
  assertEquals(""String_Node_Str"",includeLibrary.getFileName());
  assertEquals(""String_Node_Str"",includeLibrary.getNamespace());
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.AUTHOR_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.HELP_GUIDE_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.CREATED_BY_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.TITLE_ID_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.TITLE_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.COMMENTS_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.DESCRIPTION_ID_PROP));
  assertEquals(""String_Node_Str"",libraryHandle2.getStringProperty(Library.DESCRIPTION_PROP));
  PropertyHandle colorPalette=libraryHandle2.getPropertyHandle(Library.COLOR_PALETTE_PROP);
  List colors=colorPalette.getListValue();
  assertEquals(2,colors.size());
  CustomColor color=(CustomColor)colors.get(0);
  assertEquals(""String_Node_Str"",color.getName());
  assertEquals(111,color.getRGB());
  assertEquals(""String_Node_Str"",color.getDisplayNameID());
  assertEquals(""String_Node_Str"",color.getDisplayName());
  color=(CustomColor)colors.get(1);
  assertEquals(""String_Node_Str"",color.getName());
  assertEquals(222,color.getRGB());
  assertEquals(""String_Node_Str"",color.getDisplayNameID());
  PropertyHandle configVarHandle=libraryHandle2.getPropertyHandle(Library.CONFIG_VARS_PROP);
  List configVars=configVarHandle.getListValue();
  assertEquals(4,configVars.size());
  ConfigVariable var=(ConfigVariable)configVars.get(0);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(""String_Node_Str"",var.getValue());
  var=(ConfigVariable)configVars.get(1);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(""String_Node_Str"",var.getValue());
  var=(ConfigVariable)configVars.get(2);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(""String_Node_Str"",var.getValue());
  var=(ConfigVariable)configVars.get(3);
  assertEquals(""String_Node_Str"",var.getName());
  assertEquals(null,var.getValue());
  PropertyHandle imageHandle=libraryHandle2.getPropertyHandle(Library.IMAGES_PROP);
  List images=imageHandle.getListValue();
  assertEquals(3,images.size());
  EmbeddedImage image=(EmbeddedImage)images.get(0);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getType(design));
  assertEquals(""String_Node_Str"",new String(Base64.encodeBase64(image.getData(design))).substring(0,11));
  image=(EmbeddedImage)images.get(1);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getType(design));
  assertEquals(""String_Node_Str"",new String(Base64.encodeBase64(image.getData(design))).substring(0,15));
  image=(EmbeddedImage)images.get(2);
  assertEquals(""String_Node_Str"",image.getName());
  assertEquals(""String_Node_Str"",image.getType(design));
  assertEquals(""String_Node_Str"",new String(Base64.encodeBase64(image.getData(design))));
}",0.9806210600046696
75893,"/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  String pluginPath=plugin.getStateLocation().toOSString();
  System.setProperty(BIRT_VIEWER_WORKING_PATH,pluginPath);
}","/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
}",0.8946098149637972
75894,"/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}","/** 
 * validate whether the parameter value is a valid value for the parameter
 * @param p the parameter to be verified
 * @param paramValue the value for the parameter
 * @return true if the given parameter value is valid; false otherwise
 */
private boolean validateScalarParameter(ScalarParameterHandle paramHandle){
  String paramName=paramHandle.getName();
  Object paramValue=runValues.get(paramName);
  String type=paramHandle.getDataType();
  if (paramValue == null) {
    if (!paramHandle.isRequired())     return true;
    log.log(Level.SEVERE,""String_Node_Str"",paramName);
    return false;
  }
  String source=paramHandle.getValidate();
  if (source != null && source.length() != 0) {
    Object result=executionContext.evaluate(source);
    if (!(result instanceof Boolean) || !((Boolean)result).booleanValue()) {
      log.log(Level.SEVERE,""String_Node_Str"",source);
      return false;
    }
  }
  if (DesignChoiceConstants.PARAM_TYPE_DECIMAL.equals(type) || DesignChoiceConstants.PARAM_TYPE_FLOAT.equals(type)) {
    if (paramValue instanceof Number)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(type)) {
    if (paramValue instanceof Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(type)) {
    if (paramValue instanceof java.sql.Date)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(type)) {
    if (paramValue instanceof java.sql.Time)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_STRING.equals(type)) {
    String value=paramValue.toString().trim();
    if (paramHandle.isRequired() && value.equals(""String_Node_Str"")) {
      log.log(Level.SEVERE,""String_Node_Str"",paramName);
      return false;
    }
    return true;
  }
 else   if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(type)) {
    if (paramValue instanceof Boolean)     return true;
    log.log(Level.SEVERE,""String_Node_Str"",new String[]{paramValue.toString(),paramName});
    return false;
  }
  return true;
}",0.933911159263272
75895,"/** 
 * convert path from System Properties Definition. For example: ${java.io.tmpdir}
 * @param path
 * @return
 */
protected static String convertSystemPath(String path){
  if (path == null)   return path;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(path);
  if (m.find()) {
    String sysPath=DataUtil.trimSepEnd(System.getProperty(m.group(1).trim()));
    return DataUtil.trimString(sysPath) + m.group(2).trim();
  }
  return path;
}","/** 
 * convert path from System Properties Definition. For example: ${java.io.tmpdir}
 * @param path
 * @return
 */
protected static String convertSystemPath(String path){
  if (path == null)   return path;
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(path);
  if (m.find()) {
    String sysPath=DataUtil.trimSepEnd(System.getProperty(m.group(1).trim()));
    if (sysPath.length() <= 0)     return DataUtil.trimSepFirst(m.group(2).trim());
 else     return sysPath + m.group(2).trim();
  }
  return path;
}",0.907177033492823
75896,"public void endCell(ICellContent cell){
  if ((cell == leafCell) && (false == cellFilled)) {
    writer.text(""String_Node_Str"");
  }
  leafCell=null;
  cellFilled=false;
  if (pop()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  if (enableMetadata) {
    metadataEmitter.endCell(cell);
  }
  if (isCellInTableHead(cell)) {
    writer.closeTag(HTMLTags.TAG_TH);
  }
 else {
    writer.closeTag(HTMLTags.TAG_TD);
  }
}","public void endCell(ICellContent cell){
  leafCell=null;
  cellFilled=false;
  if (pop()) {
    return;
  }
  logger.log(Level.FINE,""String_Node_Str"");
  if (enableMetadata) {
    metadataEmitter.endCell(cell);
  }
  if (isCellInTableHead(cell)) {
    writer.closeTag(HTMLTags.TAG_TH);
  }
 else {
    writer.closeTag(HTMLTags.TAG_TD);
  }
}",0.88
75897,"public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells()) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,start,columnNumber,finished);
  int height=specifiedHeight;
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || lastCell.getRowSpan() < 0)) {
      if (cell != null) {
        row.remove(start + i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan(unresolvedRow,ca));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (height > 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells()) {
    mergeDropCell(rowArea);
  }
}","public void updateRow(RowArea rowArea,int specifiedHeight,boolean finished){
  hasDropCell=!finished;
  Row lastRow=getPreviousRow();
  if (lastRow == null && existDropCells()) {
    lastRow=unresolvedRow;
  }
  Row row=new Row(rowArea,start,columnNumber,finished);
  int height=specifiedHeight;
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell != null) {
        row.remove(start + i);
      }
      if (lastCell.getRowSpan() == 2) {
        if (lastCell instanceof DummyCell) {
          height=Math.max(height,lastCell.getHeight());
        }
 else {
          height=Math.max(height,lastCell.getHeight() - lastRow.getArea().getHeight());
        }
      }
      i=i + lastCell.getColSpan() - 1;
    }
 else {
      if (cell != null) {
        if (cell.getRowSpan() == 1) {
          height=Math.max(height,cell.getHeight());
        }
      }
      if (cell == null) {
        ICellContent cellContent=null;
        if (unresolvedRow != null) {
          CellArea ca=unresolvedRow.getCell(i);
          if (ca != null) {
            ICellContent cc=(ICellContent)ca.getContent();
            cellContent=new ClonedCellContent(cc,getRowSpan(unresolvedRow,ca));
          }
        }
        if (cellContent == null) {
          cellContent=tableContent.getReportContent().createCellContent();
          cellContent.setColumn(i);
          cellContent.setColSpan(1);
          cellContent.setRowSpan(1);
          cellContent.setParent(rowArea.getContent());
        }
        int startColumn=cellContent.getColumn();
        int endColumn=cellContent.getColSpan() + startColumn;
        CellArea emptyCell=AreaFactory.createCellArea(cellContent);
        resolveBorderConflict(emptyCell,false);
        IStyle areaStyle=emptyCell.getStyle();
        areaStyle.setProperty(IStyle.STYLE_PADDING_TOP,IStyle.NUMBER_0);
        areaStyle.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
        emptyCell.setWidth(getCellWidth(startColumn,endColumn));
        emptyCell.setPosition(layoutInfo.getXPosition(i),0);
        rowArea.addChild(emptyCell);
        i=i + emptyCell.getColSpan() - 1;
      }
    }
  }
  if (specifiedHeight == 0 && isEmptyRow(row)) {
    height=getHeightOfEmptyRow(row);
  }
  if (height >= 0) {
    Iterator iter=rowArea.getChildren();
    while (iter.hasNext()) {
      CellArea cell=(CellArea)iter.next();
      if (cell.getRowSpan() == 1) {
        cell.setHeight(height);
        verticalAlign(cell);
      }
    }
    rowArea.setHeight(height);
  }
  if (firstRow && existDropCells()) {
    mergeDropCell(rowArea);
  }
}",0.8714961776483436
75898,"public void addRow(RowArea rowArea,boolean finished,boolean repeated){
  if (!repeated) {
    firstRow=false;
  }
  hasDropCell=!finished;
  Row lastRow=(Row)rows.getCurrent();
  Row row=new Row(rowArea,start,columnNumber,finished,repeated);
  int rowHeight=rowArea.getHeight();
  HashSet dropCells=new HashSet();
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (cell != null && (cell.getRowSpan() > 1 || cell.getRowSpan() < 0)) {
      hasDropCell=true;
    }
    if (lastCell != null && (lastCell.getRowSpan() > 1 || lastCell.getRowSpan() < 0)) {
      if (cell == null) {
        DummyCell dummyCell=null;
        if (lastCell instanceof DummyCell) {
          DummyCell refDummy=((DummyCell)lastCell);
          dummyCell=new DummyCell(refDummy.getCell());
          if (lastCell.getRowSpan() > 0) {
            dummyCell.setRowSpan(lastCell.getRowSpan() - 1);
          }
 else {
            dummyCell.setRowSpan(lastCell.getRowSpan());
          }
          dummyCell.setHeight(refDummy.getHeight() - rowHeight);
        }
 else {
          dummyCell=new DummyCell(lastCell);
          if (lastCell.getRowSpan() > 0) {
            dummyCell.setRowSpan(lastCell.getRowSpan() - 1);
          }
 else {
            dummyCell.setRowSpan(lastCell.getRowSpan());
          }
          dummyCell.setHeight(lastCell.getHeight() - lastRow.getArea().getHeight() - rowHeight);
        }
        row.addArea(dummyCell);
        if (dummyCell.getRowSpan() == 1) {
          if (dummyCell.getHeight() < 0) {
            CellArea cArea=dummyCell.getCell();
            if (!dropCells.contains(cArea)) {
              cArea.setHeight(cArea.getHeight() - dummyCell.getHeight());
              verticalAlign(cArea);
              dropCells.add(cArea);
            }
          }
        }
 else {
          hasDropCell=true;
        }
        i=i + dummyCell.getColSpan() - 1;
      }
    }
  }
  rows.add(row);
}","public void addRow(RowArea rowArea,boolean finished,boolean repeated){
  if (!repeated) {
    firstRow=false;
  }
  hasDropCell=!finished;
  Row lastRow=(Row)rows.getCurrent();
  Row row=new Row(rowArea,start,columnNumber,finished,repeated);
  int rowHeight=rowArea.getHeight();
  HashSet dropCells=new HashSet();
  for (int i=0; i < columnNumber; i++) {
    CellArea lastCell=null;
    if (lastRow != null) {
      lastCell=lastRow.getCell(start + i);
    }
    CellArea cell=row.getCell(start + i);
    if (cell != null && (cell.getRowSpan() > 1 || isDropCell(cell))) {
      hasDropCell=true;
    }
    if (lastCell != null && (lastCell.getRowSpan() > 1 || isDropCell(lastCell))) {
      if (cell == null) {
        DummyCell dummyCell=null;
        if (lastCell instanceof DummyCell) {
          DummyCell refDummy=((DummyCell)lastCell);
          dummyCell=new DummyCell(refDummy.getCell());
          if (lastCell.getRowSpan() > 0) {
            dummyCell.setRowSpan(lastCell.getRowSpan() - 1);
          }
 else {
            dummyCell.setRowSpan(lastCell.getRowSpan());
          }
          dummyCell.setHeight(refDummy.getHeight() - rowHeight);
        }
 else {
          dummyCell=new DummyCell(lastCell);
          if (lastCell.getRowSpan() > 0) {
            dummyCell.setRowSpan(lastCell.getRowSpan() - 1);
          }
 else {
            dummyCell.setRowSpan(lastCell.getRowSpan());
          }
          dummyCell.setHeight(lastCell.getHeight() - lastRow.getArea().getHeight() - rowHeight);
        }
        row.addArea(dummyCell);
        if (dummyCell.getRowSpan() == 1) {
          if (dummyCell.getHeight() < 0) {
            CellArea cArea=dummyCell.getCell();
            if (!dropCells.contains(cArea)) {
              cArea.setHeight(cArea.getHeight() - dummyCell.getHeight());
              verticalAlign(cArea);
              dropCells.add(cArea);
            }
          }
        }
 else {
          hasDropCell=true;
        }
        i=i + dummyCell.getColSpan() - 1;
      }
    }
  }
  rows.add(row);
}",0.9818716315531604
75899,"protected boolean existDropCells(){
  if (unresolvedRow != null) {
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=unresolvedRow.getCell(start + i);
      if (cell != null && cell.getRowSpan() < 0) {
        return true;
      }
    }
  }
  return false;
}","protected boolean existDropCells(){
  if (unresolvedRow != null) {
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=unresolvedRow.getCell(start + i);
      if (cell != null && isDropCell(cell)) {
        return true;
      }
    }
  }
  return false;
}",0.7113594040968343
75900,"public void resolveAll(){
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean hasDropCell=false;
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    if (cell != null) {
      if (cell.getRowSpan() < 0 || cell.getRowSpan() > 1) {
        height=Math.max(height,cell.getHeight());
        hasDropCell=true;
      }
    }
  }
  if (hasDropCell) {
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    if (delta > 0) {
      row.getArea().setHeight(height);
    }
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=row.getCell(start + i);
      if (cell == null) {
        continue;
      }
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
 else       if (rowSpan == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
  if (hasDropCell || (row != null && !row.finished)) {
    unresolvedRow=row;
  }
}","public void resolveAll(){
  if (rows.size() == 0 || !hasDropCell) {
    return;
  }
  Row row=(Row)rows.getCurrent();
  int rowHeight=row.getArea().getHeight();
  int height=rowHeight;
  boolean hasDropCell=false;
  for (int i=0; i < columnNumber; i++) {
    CellArea cell=row.getCell(start + i);
    if (cell != null) {
      if (isDropCell(cell) || cell.getRowSpan() > 1) {
        height=Math.max(height,cell.getHeight());
        hasDropCell=true;
      }
    }
  }
  if (hasDropCell) {
    HashSet dropCells=new HashSet();
    int delta=height - rowHeight;
    if (delta > 0) {
      row.getArea().setHeight(height);
    }
    for (int i=0; i < columnNumber; i++) {
      CellArea cell=row.getCell(start + i);
      if (cell == null) {
        continue;
      }
      int rowSpan=cell.getRowSpan();
      if (rowSpan < 0 || rowSpan > 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          int cellHeight=cell.getHeight();
          int refHeight=ref.getHeight();
          if (!dropCells.contains(ref)) {
            ref.setHeight(refHeight - cellHeight + delta);
            verticalAlign(ref);
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
 else       if (rowSpan == 1) {
        if (cell instanceof DummyCell) {
          CellArea ref=((DummyCell)cell).getCell();
          if (!dropCells.contains(ref)) {
            ref.setHeight(ref.getHeight() + delta);
            if (delta > 0) {
              verticalAlign(ref);
            }
            dropCells.add(ref);
          }
        }
 else {
          cell.setHeight(height);
          verticalAlign(cell);
        }
      }
    }
  }
  if (hasDropCell || (row != null && !row.finished)) {
    unresolvedRow=row;
  }
}",0.9904658131299372
75901,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(BarChart.TYPE_LITERAL) || currentChart.getType().equals(TubeChart.TYPE_LITERAL) || currentChart.getType().equals(ConeChart.TYPE_LITERAL)) {
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          ((BarSeries)series).setRiser(RiserType.TRIANGLE_LITERAL);
        }
      }
    }
 else     if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          ((BarSeries)series).setRiser(RiserType.TRIANGLE_LITERAL);
          if (!currentChart.getSubType().equals(sNewSubType)) {
            if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
              if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
                ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
              }
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      ((BarSeries)series).setRiser(RiserType.TRIANGLE_LITERAL);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if ((currentChart instanceof ChartWithAxes)) {
    if (currentChart.getType().equals(LineChart.TYPE_LITERAL) || currentChart.getType().equals(AreaChart.TYPE_LITERAL) || currentChart.getType().equals(StockChart.TYPE_LITERAL)|| currentChart.getType().equals(ScatterChart.TYPE_LITERAL)|| currentChart.getType().equals(BubbleChart.TYPE_LITERAL)|| currentChart.getType().equals(DifferenceChart.TYPE_LITERAL)|| currentChart.getType().equals(GanttChart.TYPE_LITERAL)) {
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      ArrayList axisTypes=new ArrayList();
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
          if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
            ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
          }
          ((Axis)axes.get(i)).setPercent(true);
        }
 else {
          ((Axis)axes.get(i)).setPercent(false);
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            series.setStacked(true);
          }
 else {
            series.setStacked(false);
          }
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
          ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
          axisTypes.add(((Axis)axes.get(i)).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getType(),axisTypes));
    }
 else {
      currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
      EList axes=((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes();
      for (int i=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
              ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            ((Axis)axes.get(i)).setPercent(true);
          }
 else {
            ((Axis)axes.get(i)).setPercent(false);
          }
        }
        EList seriesdefinitions=((Axis)axes.get(i)).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
          ((BarSeries)series).setRiser(RiserType.TRIANGLE_LITERAL);
          if (!currentChart.getSubType().equals(sNewSubType)) {
            if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
              if (!ChartPreviewPainter.isLivePreviewActive() && !isNumbericAxis((Axis)axes.get(i))) {
                ((Axis)axes.get(i)).setType(AxisType.LINEAR_LITERAL);
              }
              series.setStacked(true);
            }
 else {
              series.setStacked(false);
            }
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).setCategoryAxis(true);
    ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    if (helperModel.getType().equals(PieChart.TYPE_LITERAL) || helperModel.getType().equals(MeterChart.TYPE_LITERAL)) {
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((SeriesDefinition)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList seriesdefinitions=((Axis)((Axis)((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().clear();
        ((SeriesDefinition)seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
 else {
      return null;
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(CHART_TITLE);
  }
  if (currentChart instanceof ChartWithAxes && !((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=((SeriesDefinition)seriesdefinitions.get(j)).getDesignTimeSeries();
      ((BarSeries)series).setRiser(RiserType.TRIANGLE_LITERAL);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  return currentChart;
}",0.9659721892648664
75902,"private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=pl.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setTop(bo.getTop());
  boTitle.setWidth(szTitle.getWidth());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (pl.isSetWidthHint()) {
    plotWidthHint=pl.getWidthHint();
  }
  if (pl.isSetHeightHint()) {
    plotHeightHint=pl.getHeightHint();
  }
  double plotLeft, plotTop;
  Position lgPos=lg.getPosition();
  if (isRightToLeft) {
    if (lgPos == Position.RIGHT_LITERAL) {
      lgPos=Position.LEFT_LITERAL;
    }
 else     if (lgPos == Position.LEFT_LITERAL) {
      lgPos=Position.RIGHT_LITERAL;
    }
  }
  Anchor plotAnchor=pl.getAnchor();
  if (isRightToLeft) {
switch (plotAnchor.getValue()) {
case Anchor.EAST:
      plotAnchor=Anchor.WEST_LITERAL;
    break;
case Anchor.NORTH_EAST:
  plotAnchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
plotAnchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
plotAnchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
plotAnchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
plotAnchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (lgPos.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
boLegend.setLeft(plotLeft + boPlot.getWidth());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
boTitle.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + boLegend.getWidth();
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + szTitle.getWidth() + boLegend.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop() + boLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + boLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - boLegend.getHeight()) : plotHeightHint);
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boTitle.setWidth(bo.getWidth());
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
boLegend.setTop(plotTop + boPlot.getHeight());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != pl && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
}
}","private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=pl.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setTop(bo.getTop());
  boTitle.setWidth(szTitle.getWidth());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (pl.isSetWidthHint()) {
    plotWidthHint=pl.getWidthHint();
  }
  if (pl.isSetHeightHint()) {
    plotHeightHint=pl.getHeightHint();
  }
  double plotLeft, plotTop;
  Position lgPos=lg.getPosition();
  if (isRightToLeft) {
    if (lgPos == Position.RIGHT_LITERAL) {
      lgPos=Position.LEFT_LITERAL;
    }
 else     if (lgPos == Position.LEFT_LITERAL) {
      lgPos=Position.RIGHT_LITERAL;
    }
  }
  Anchor plotAnchor=pl.getAnchor();
  if (isRightToLeft) {
switch (plotAnchor.getValue()) {
case Anchor.EAST:
      plotAnchor=Anchor.WEST_LITERAL;
    break;
case Anchor.NORTH_EAST:
  plotAnchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
plotAnchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
plotAnchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
plotAnchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
plotAnchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (lgPos.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
boLegend.setLeft(plotLeft + boPlot.getWidth());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
boTitle.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + boLegend.getWidth();
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + szTitle.getWidth() + boLegend.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
if (szTitle.getHeight() + boPlot.getHeight() + szLegend.getHeight() > bo.getHeight()) {
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
}
 else {
boLegend.setHeight(szLegend.getHeight());
}
plotLeft=bo.getLeft();
plotTop=bo.getTop() + boLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + boLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
if (szTitle.getHeight() + boPlot.getHeight() + szLegend.getHeight() > bo.getHeight()) {
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
}
 else {
boLegend.setHeight(szLegend.getHeight());
}
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boTitle.setWidth(bo.getWidth());
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
boLegend.setTop(plotTop + boPlot.getHeight());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != pl && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
}
}",0.9922014622258326
75903,"public Object get(String arg0,Scriptable scope){
  try {
    return it.getValue(arg0);
  }
 catch (  BirtException e) {
    return null;
  }
}","public Object get(String arg0,Scriptable scope){
  try {
    if (""String_Node_Str"".equalsIgnoreCase(arg0) || ""String_Node_Str"".equalsIgnoreCase(arg0)) {
      return new Integer(it.getCurrentIterator().getRowIndex());
    }
    if (""String_Node_Str"".equalsIgnoreCase(arg0)) {
      return new JSResultIteratorObject(it.getParent());
    }
    return it.getCurrentIterator().getValue(arg0);
  }
 catch (  BirtException e) {
    return null;
  }
}",0.4531516183986371
75904,"/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,Object source){
  if (source instanceof IResultIterator) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((IResultIterator)source));
  }
 else   if (source instanceof ICubeCursor) {
    Scriptable scope=((ICubeCursor)source).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}","/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,Object source,Object parent){
  if (source instanceof ILinkedResultIterator) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResultIterator)source));
  }
 else   if (source instanceof ICubeCursor) {
    Scriptable scope=((ICubeCursor)source).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}",0.988626421697288
75905,"JSResultIteratorObject(IResultIterator it){
  this.it=it;
}","JSResultIteratorObject(ILinkedResultIterator it){
  this.it=it;
}",0.9516129032258064
75906,"RowArea(IRowContent row){
  super(row);
  style.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,IStyle.NUMBER_0);
}","RowArea(IRowContent row){
  super(row);
  style.setProperty(IStyle.STYLE_BORDER_TOP_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_BORDER_LEFT_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_BORDER_RIGHT_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_BORDER_BOTTOM_WIDTH,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_MARGIN_TOP,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_MARGIN_LEFT,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_MARGIN_RIGHT,IStyle.NUMBER_0);
  style.setProperty(IStyle.STYLE_MARGIN_BOTTOM,IStyle.NUMBER_0);
}",0.7152466367713004
75907,"public void seek(int index) throws IOException {
  if (index >= length) {
    return;
  }
  if (index >= aggregationResultRow.size()) {
    for (int i=0; i <= index - aggregationResultRow.size(); i++) {
      aggregationResultRow.add(AggregationResultSetSaveUtil.loadAggregationRow(inputStream));
    }
  }
  currentPosition=index;
  resultObject=(AggregationResultRow)aggregationResultRow.get(index);
}","public void seek(int index) throws IOException {
  if (index >= length) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ length);
  }
  if (index >= aggregationResultRow.size()) {
    for (int i=0; i <= index - aggregationResultRow.size(); i++) {
      aggregationResultRow.add(AggregationResultSetSaveUtil.loadAggregationRow(inputStream));
    }
  }
  currentPosition=index;
  resultObject=(AggregationResultRow)aggregationResultRow.get(index);
}",0.8921348314606742
75908,"public void seek(int index) throws IOException {
  if (index >= aggregationResultRow.size()) {
    return;
  }
  currentPosition=index;
  resultObject=(IAggregationResultRow)aggregationResultRow.get(index);
}","public void seek(int index) throws IOException {
  if (index >= aggregationResultRow.size()) {
    throw new IndexOutOfBoundsException(""String_Node_Str"" + index + ""String_Node_Str""+ aggregationResultRow.size());
  }
  currentPosition=index;
  resultObject=(IAggregationResultRow)aggregationResultRow.get(index);
}",0.7754318618042226
75909,"/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,Object source,Object parent){
  if (source instanceof ILinkedResultIterator) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResultIterator)source));
  }
 else   if (source instanceof ICubeCursor) {
    Scriptable scope=((ICubeCursor)source).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}","/** 
 * This method is used to register the Java Script Objects which are defined in the scope of source ResultSet ( might be IResultSet or CubeCursor ) to target scope. One possible client of this method is Report Engine. A classic use case is that instead of register its own ""row"" object  the Report Engine can simply call this method with proper argument so that the ""row"" object registered in IResultIterator's scope, that is, JSResultSetRow, can be accessed by engine using engine scope. 
 * @param targetScope
 * @param source
 */
public static void registerJSObject(Scriptable targetScope,Object source){
  if (source instanceof ILinkedResultIterator) {
    targetScope.put(""String_Node_Str"",targetScope,new JSResultIteratorObject((ILinkedResultIterator)source));
  }
 else   if (source instanceof ICubeCursor) {
    Scriptable scope=((ICubeCursor)source).getScope();
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
    targetScope.put(""String_Node_Str"",targetScope,scope.get(""String_Node_Str"",scope));
  }
}",0.9939077458659704
75910,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9887271019257868
75911,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReference() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9937775473165672
75912,"private void createCube() throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath,cubeName);
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}","private void createCube(DataEngine engine) throws BirtException, IOException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(documentPath + engine.hashCode(),cubeName);
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,TestFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,TestFactTable.DIM0_L2Col);
  iterator.setLevelMember(2,TestFactTable.DIM0_L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),13);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(TestFactTable.DIM1_L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),5);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.close();
}",0.9909557565387436
75913,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter=new SortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter=new SortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9893048128342246
75914,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9902120717781404
75915,"/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test binding ""row"" reference
 * @throws Exception
 */
public void testBindingRowReferenceCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  IBinding binding9=new Binding(""String_Node_Str"");
  binding9.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding9);
  IBinding binding10=new Binding(""String_Node_Str"");
  binding10.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding10);
  IBinding binding11=new Binding(""String_Node_Str"");
  binding11.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding11);
  IBinding binding12=new Binding(""String_Node_Str"");
  binding12.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding12);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9940711462450592
75916,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotalCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.993002915451895
75917,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9873684210526316
75918,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.989394608926204
75919,"/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter=new SortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Simple sort on 1 level
 * @throws Exception
 */
public void testSort1() throws Exception {
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter=new SortDefinition();
  sorter.setExpression(""String_Node_Str"");
  sorter.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9347296639064784
75920,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9900826446280993
75921,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9900249376558604
75922,"/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter2, filter out all level11 = CN and level21 > 2000.
 * @throws Exception
 */
public void testFilter2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter1=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  IFilterDefinition filter2=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_GE,""String_Node_Str""));
  cqd.addFilter(filter1);
  cqd.addFilter(filter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9893852277753208
75923,"/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use part of dimension levels.
 * @throws Exception
 */
public void testBasic1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.988522238163558
75924,"/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Complex sort on multiple levels
 * @throws Exception
 */
public void testSort2Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9907585675779744
75925,"/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testGrandTotal() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IBinding binding6=new Binding(""String_Node_Str"");
  binding6.setExpression(new ScriptExpression(""String_Node_Str""));
  binding6.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding6.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding6);
  IBinding binding7=new Binding(""String_Node_Str"");
  binding7.setExpression(new ScriptExpression(""String_Node_Str""));
  binding7.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  binding7.addAggregateOn(""String_Node_Str"");
  binding7.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(binding7);
  IBinding binding8=new Binding(""String_Node_Str"");
  binding8.setExpression(new ScriptExpression(""String_Node_Str""));
  binding8.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  cqd.addBinding(binding8);
  SortDefinition sorter1=new SortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter2=new SortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  SortDefinition sorter3=new SortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.992590305649892
75926,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9882926829268291
75927,"/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Filter1, filter out all level11 == CN.
 * @throws Exception
 */
public void testFilter1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  IFilterDefinition filter=new FilterDefinition(new ConditionalExpression(""String_Node_Str"",IConditionalExpression.OP_EQ,""String_Node_Str""));
  cqd.addFilter(filter);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9884169884169884
75928,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.990765679107349
75929,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort1() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9870898332436794
75930,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort2() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9892328398384926
75931,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3Cache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort3Cache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9913978494623656
75932,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSortCache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevel(null);
  sorter4.setAxisQualifierValue(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevel(null);
  sorter5.setAxisQualifierValue(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSortCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevel(null);
  sorter4.setAxisQualifierValue(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevel(null);
  sorter5.setAxisQualifierValue(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9929328621908128
75933,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort5() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter1.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter1.setTargetLevel(level13);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9876160990712074
75934,"/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevel(null);
  sorter4.setAxisQualifierValue(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevel(null);
  sorter5.setAxisQualifierValue(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test grand total
 * @throws Exception
 */
public void testAggrSort() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  ILevelDefinition level11=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level12=hier1.createLevel(""String_Node_Str"");
  ILevelDefinition level13=hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  ILevelDefinition level21=hier2.createLevel(""String_Node_Str"");
  createSortTestBindings(cqd);
  CubeSortDefinition sorter1=new CubeSortDefinition();
  sorter1.setExpression(""String_Node_Str"");
  sorter1.setAxisQualifierLevel(null);
  sorter1.setAxisQualifierValue(null);
  sorter1.setTargetLevel(level21);
  sorter1.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter2=new CubeSortDefinition();
  sorter2.setExpression(""String_Node_Str"");
  sorter2.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter2.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter2.setTargetLevel(level12);
  sorter2.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter3=new CubeSortDefinition();
  sorter3.setExpression(""String_Node_Str"");
  sorter3.setAxisQualifierLevel(new ILevelDefinition[]{level21});
  sorter3.setAxisQualifierValue(new Object[]{""String_Node_Str""});
  sorter3.setTargetLevel(level11);
  sorter3.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter4=new CubeSortDefinition();
  sorter4.setExpression(""String_Node_Str"");
  sorter4.setAxisQualifierLevel(null);
  sorter4.setAxisQualifierValue(null);
  sorter4.setTargetLevel(level13);
  sorter4.setSortDirection(ISortDefinition.SORT_DESC);
  CubeSortDefinition sorter5=new CubeSortDefinition();
  sorter5.setExpression(""String_Node_Str"");
  sorter5.setAxisQualifierLevel(null);
  sorter5.setAxisQualifierValue(null);
  sorter5.setTargetLevel(level11);
  sorter5.setSortDirection(ISortDefinition.SORT_DESC);
  cqd.addSort(sorter1);
  cqd.addSort(sorter2);
  cqd.addSort(sorter3);
  cqd.addSort(sorter4);
  cqd.addSort(sorter5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  printCube(cursor,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",""String_Node_Str"");
}",0.9925117004680188
75935,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasicCache() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasicCache() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  cqd.setCacheQueryResults(true);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  cqd.setQueryResultsID(queryResults.getID());
  pcq=engine.prepare(cqd,null);
  queryResults=pcq.execute(null);
  cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.9896640826873384
75936,"/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  this.createCube();
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Test use all dimension levels.
 * @throws Exception
 */
public void testBasic() throws Exception {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition dim1=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier1=dim1.createHierarchy(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  hier1.createLevel(""String_Node_Str"");
  IDimensionDefinition dim2=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition hier2=dim2.createHierarchy(""String_Node_Str"");
  hier2.createLevel(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IBinding binding1=new Binding(""String_Node_Str"");
  binding1.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding1);
  IBinding binding2=new Binding(""String_Node_Str"");
  binding2.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding2);
  IBinding binding3=new Binding(""String_Node_Str"");
  binding3.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding3);
  IBinding binding4=new Binding(""String_Node_Str"");
  binding4.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding4);
  IBinding binding5=new Binding(""String_Node_Str"");
  binding5.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(binding5);
  DataEngine engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  this.createCube(engine);
  IPreparedCubeQuery pcq=engine.prepare(cqd,null);
  ICubeQueryResults queryResults=pcq.execute(null);
  CubeCursor cursor=queryResults.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  this.printCube(cursor,columnEdgeBindingNames,""String_Node_Str"",""String_Node_Str"");
}",0.988737681839512
75937,"/** 
 * without measure
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorWithoutMeasure() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,null,null,null,null,null);
    dataCursor.getObject(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof OLAPException);
  }
}","/** 
 * without measure
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorWithoutMeasure() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,null,null,null,null,null);
    dataCursor.getObject(""String_Node_Str"");
  }
 catch (  Exception e) {
    assertTrue(e instanceof OLAPException);
  }
}",0.9691107644305772
75938,"/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  printCubeAlongDimension(dataCursor,countryCursor,cityCursor,productCursor,null);
}","/** 
 * without row edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel2() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  printCubeAlongDimension(dataCursor,countryCursor,cityCursor,productCursor,null);
}",0.609690957649752
75939,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorOnCountry() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List grandBindingNames=new ArrayList();
  grandBindingNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,grandBindingNames);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.6448576135561308
75940,"protected void setUp() throws Exception {
  super.setUp();
  new CubeCreator().createCube();
  this.scope=new ImporterTopLevel();
}","protected void setUp() throws Exception {
  super.setUp();
  this.scope=new ImporterTopLevel();
  de=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null));
  new CubeCreator().createCube(de);
}",0.473551637279597
75941,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9824374667376264
75942,"/** 
 * test populate data along dimension cursor
 */
public void testCursorModel4(){
  try {
    ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
    cqd.createMeasure(""String_Node_Str"");
    cqd.createMeasure(""String_Node_Str"");
    IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
    IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
    IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
    timeHier.createLevel(""String_Node_Str"");
    IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
    IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
    geographyHier.createLevel(""String_Node_Str"");
    geographyHier.createLevel(""String_Node_Str"");
    geographyHier.createLevel(""String_Node_Str"");
    IBinding rowGrandTotal=new Binding(""String_Node_Str"");
    rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
    rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
    rowGrandTotal.addAggregateOn(""String_Node_Str"");
    IBinding columnGrandTotal=new Binding(""String_Node_Str"");
    columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
    columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
    columnGrandTotal.addAggregateOn(""String_Node_Str"");
    columnGrandTotal.addAggregateOn(""String_Node_Str"");
    columnGrandTotal.addAggregateOn(""String_Node_Str"");
    cqd.addBinding(rowGrandTotal);
    cqd.addBinding(columnGrandTotal);
    BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
    CubeCursor dataCursor=cubeView.getCubeCursor();
    List columnEdgeBindingNames=new ArrayList();
    columnEdgeBindingNames.add(""String_Node_Str"");
    columnEdgeBindingNames.add(""String_Node_Str"");
    columnEdgeBindingNames.add(""String_Node_Str"");
    List rowEdgeBindingNames=new ArrayList();
    rowEdgeBindingNames.add(""String_Node_Str"");
    List measureBindingNames=new ArrayList();
    measureBindingNames.add(""String_Node_Str"");
    measureBindingNames.add(""String_Node_Str"");
    List dimCursorOnColumn=cubeView.getColumnEdgeView().getEdgeCursor().getDimensionCursor();
    List dimCursorOnRow=cubeView.getRowEdgeView().getEdgeCursor().getDimensionCursor();
    this.printCubeAlongDimension(dataCursor,(DimensionCursor)dimCursorOnColumn.get(0),(DimensionCursor)dimCursorOnColumn.get(1),(DimensionCursor)dimCursorOnColumn.get(2),(DimensionCursor)dimCursorOnRow.get(0));
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * test populate data along dimension cursor
 */
public void testCursorModel4(){
  try {
    ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
    cqd.createMeasure(""String_Node_Str"");
    cqd.createMeasure(""String_Node_Str"");
    IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
    IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
    IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
    timeHier.createLevel(""String_Node_Str"");
    IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
    IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
    IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
    geographyHier.createLevel(""String_Node_Str"");
    geographyHier.createLevel(""String_Node_Str"");
    geographyHier.createLevel(""String_Node_Str"");
    IBinding rowGrandTotal=new Binding(""String_Node_Str"");
    rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
    rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
    rowGrandTotal.addAggregateOn(""String_Node_Str"");
    IBinding columnGrandTotal=new Binding(""String_Node_Str"");
    columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
    columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
    columnGrandTotal.addAggregateOn(""String_Node_Str"");
    columnGrandTotal.addAggregateOn(""String_Node_Str"");
    columnGrandTotal.addAggregateOn(""String_Node_Str"");
    cqd.addBinding(rowGrandTotal);
    cqd.addBinding(columnGrandTotal);
    BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
    CubeCursor dataCursor=cubeView.getCubeCursor();
    List columnEdgeBindingNames=new ArrayList();
    columnEdgeBindingNames.add(""String_Node_Str"");
    columnEdgeBindingNames.add(""String_Node_Str"");
    columnEdgeBindingNames.add(""String_Node_Str"");
    List rowEdgeBindingNames=new ArrayList();
    rowEdgeBindingNames.add(""String_Node_Str"");
    List measureBindingNames=new ArrayList();
    measureBindingNames.add(""String_Node_Str"");
    measureBindingNames.add(""String_Node_Str"");
    List dimCursorOnColumn=cubeView.getColumnEdgeView().getEdgeCursor().getDimensionCursor();
    List dimCursorOnRow=cubeView.getRowEdgeView().getEdgeCursor().getDimensionCursor();
    this.printCubeAlongDimension(dataCursor,(DimensionCursor)dimCursorOnColumn.get(0),(DimensionCursor)dimCursorOnColumn.get(1),(DimensionCursor)dimCursorOnColumn.get(2),(DimensionCursor)dimCursorOnRow.get(0));
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.981957353745216
75943,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  printCubeAlongDimension(dataCursor,null,null,null,timeCursor);
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel3() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  printCubeAlongDimension(dataCursor,null,null,null,timeCursor);
}",0.702181633688483
75944,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel6() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_COUNTDISTINCT_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel6() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_COUNTDISTINCT_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9808990931892726
75945,"/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel5() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(BuiltInAggregationFactory.TOTAL_AVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * without column edge
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel5() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(CubeCreator.cubeName);
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding rowGrandAvg=new Binding(""String_Node_Str"");
  rowGrandAvg.setAggrFunction(BuiltInAggregationFactory.TOTAL_AVE_FUNC);
  rowGrandAvg.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandAvg.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(rowGrandAvg);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    this.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,null,null,null);
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.979344877947006
75946,"protected void setUp() throws Exception {
  super.setUp();
  new CubeCreator().createCube();
  this.scope=new ImporterTopLevel();
}","protected void setUp() throws Exception {
  super.setUp();
  this.scope=new ImporterTopLevel();
  de=(DataEngineImpl)DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null));
  new CubeCreator().createCube(de);
}",0.473551637279597
75947,"/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,this.scope,DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,scope,null,null)));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  columnCursor.beforeFirst();
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(productCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(productCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(productCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(productCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(13);
  try {
    countryCursor.getObject(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  productCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 5);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 1);
  assertTrue(productCursor.getEdgeStart() == 1);
  assertTrue(productCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(6);
  assertTrue(countryCursor.getEdgeStart() == 6);
  assertTrue(countryCursor.getEdgeEnd() == 7);
  assertTrue(cityCursor.getEdgeStart() == 6);
  assertTrue(cityCursor.getEdgeEnd() == 6);
  assertTrue(productCursor.getEdgeStart() == 6);
  assertTrue(productCursor.getEdgeEnd() == 6);
  columnCursor.setPosition(4);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 5);
  assertTrue(cityCursor.getEdgeStart() == 4);
  assertTrue(cityCursor.getEdgeEnd() == 5);
  assertTrue(productCursor.getEdgeStart() == 4);
  assertTrue(productCursor.getEdgeEnd() == 4);
  columnCursor.setPosition(12);
  assertTrue(countryCursor.getEdgeStart() == 10);
  assertTrue(countryCursor.getEdgeEnd() == 12);
  assertTrue(cityCursor.getEdgeStart() == 12);
  assertTrue(cityCursor.getEdgeEnd() == 12);
  assertTrue(productCursor.getEdgeStart() == 12);
  assertTrue(productCursor.getEdgeEnd() == 12);
  columnCursor.beforeFirst();
  columnCursor.setPosition(13);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  columnCursor.beforeFirst();
  Object obj1, obj2, obj3;
  while (columnCursor.next()) {
    obj1=countryCursor.getObject(""String_Node_Str"");
    print(obj1);
    obj2=cityCursor.getObject(""String_Node_Str"");
    print(obj2);
    obj3=productCursor.getObject(""String_Node_Str"");
    print(obj3);
  }
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
}","/** 
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel1() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=new CubeQueryDefinition(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  cqd.createMeasure(""String_Node_Str"");
  IEdgeDefinition columnEdge=cqd.createEdge(ICubeQueryDefinition.ROW_EDGE);
  IDimensionDefinition timeDim=columnEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition timeHier=timeDim.createHierarchy(""String_Node_Str"");
  timeHier.createLevel(""String_Node_Str"");
  IEdgeDefinition rowEdge=cqd.createEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IDimensionDefinition geographyDim=rowEdge.createDimension(""String_Node_Str"");
  IHierarchyDefinition geographyHier=geographyDim.createHierarchy(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  geographyHier.createLevel(""String_Node_Str"");
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor();
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  DimensionCursor countryCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(0);
  DimensionCursor cityCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(1);
  DimensionCursor productCursor=(DimensionCursor)columnCursor.getDimensionCursor().get(2);
  DimensionCursor timeCursor=(DimensionCursor)rowCursor.getDimensionCursor().get(0);
  columnCursor.beforeFirst();
  assertTrue(countryCursor.isBeforeFirst());
  assertTrue(cityCursor.isBeforeFirst());
  assertTrue(productCursor.isBeforeFirst());
  columnCursor.afterLast();
  assertTrue(countryCursor.isAfterLast());
  assertTrue(cityCursor.isAfterLast());
  assertTrue(productCursor.isAfterLast());
  columnCursor.first();
  assertTrue(columnCursor.isFirst());
  assertTrue(countryCursor.isFirst());
  assertTrue(cityCursor.isFirst());
  assertTrue(productCursor.isFirst());
  columnCursor.last();
  assertTrue(columnCursor.last());
  assertTrue(countryCursor.last());
  assertTrue(cityCursor.last());
  assertTrue(productCursor.last());
  columnCursor.setPosition(5);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.previous();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.setPosition(13);
  try {
    countryCursor.getObject(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.relative(6);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  columnCursor.next();
  columnCursor.next();
  productCursor.setPosition(1);
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.beforeFirst();
  columnCursor.next();
  countryCursor.next();
  assertTrue(countryCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(cityCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  assertTrue(productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str""));
  columnCursor.afterLast();
  try {
    productCursor.getObject(""String_Node_Str"").equals(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
  columnCursor.beforeFirst();
  columnCursor.setPosition(1);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 5);
  assertTrue(cityCursor.getEdgeStart() == 0);
  assertTrue(cityCursor.getEdgeEnd() == 1);
  assertTrue(productCursor.getEdgeStart() == 1);
  assertTrue(productCursor.getEdgeEnd() == 1);
  columnCursor.setPosition(6);
  assertTrue(countryCursor.getEdgeStart() == 6);
  assertTrue(countryCursor.getEdgeEnd() == 7);
  assertTrue(cityCursor.getEdgeStart() == 6);
  assertTrue(cityCursor.getEdgeEnd() == 6);
  assertTrue(productCursor.getEdgeStart() == 6);
  assertTrue(productCursor.getEdgeEnd() == 6);
  columnCursor.setPosition(4);
  assertTrue(countryCursor.getEdgeStart() == 0);
  assertTrue(countryCursor.getEdgeEnd() == 5);
  assertTrue(cityCursor.getEdgeStart() == 4);
  assertTrue(cityCursor.getEdgeEnd() == 5);
  assertTrue(productCursor.getEdgeStart() == 4);
  assertTrue(productCursor.getEdgeEnd() == 4);
  columnCursor.setPosition(12);
  assertTrue(countryCursor.getEdgeStart() == 10);
  assertTrue(countryCursor.getEdgeEnd() == 12);
  assertTrue(cityCursor.getEdgeStart() == 12);
  assertTrue(cityCursor.getEdgeEnd() == 12);
  assertTrue(productCursor.getEdgeStart() == 12);
  assertTrue(productCursor.getEdgeEnd() == 12);
  columnCursor.beforeFirst();
  columnCursor.setPosition(13);
  assertTrue(countryCursor.getEdgeStart() == -1);
  assertTrue(countryCursor.getEdgeEnd() == -1);
  columnCursor.beforeFirst();
  Object obj1, obj2, obj3;
  while (columnCursor.next()) {
    obj1=countryCursor.getObject(""String_Node_Str"");
    print(obj1);
    obj2=cityCursor.getObject(""String_Node_Str"");
    print(obj2);
    obj3=productCursor.getObject(""String_Node_Str"");
    print(obj3);
  }
  try {
    countryCursor.getObject(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  OLAPException e) {
  }
}",0.9930247305009512
75948,"public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  return new PreparedCubeQuery(query,this.session.getSharedScope(),this.context);
}","public IPreparedCubeQuery prepare(ICubeQueryDefinition query,Map appContext) throws BirtException {
  return new PreparedCubeQuery(query,this.session,this.context);
}",0.9512893982808024
75949,"/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  objectFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  OatFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  OatFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  dataFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  dataFile.setLength(0);
}","/** 
 * @param dirName
 * @param managerName
 * @throws IOException
 * @throws DataException
 */
private void create(String dirName,String managerName) throws IOException, DataException {
  documentObjectMap=new HashMap();
  File file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!new File(dirName).exists()) {
      new File(dirName).mkdirs();
    }
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  objectFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  objectFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  OatFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  OatFile.setLength(0);
  file=new File(dirName + File.separatorChar + managerName+ ""String_Node_Str"");
  if (!file.exists()) {
    if (!file.createNewFile()) {
      throw new DataException(ResourceConstants.OLAPFILE_CREATE_FAIL,file.getAbsolutePath());
    }
  }
  dataFile=new BufferedRandomAccessFile(file,""String_Node_Str"",1024);
  dataFile.setLength(0);
}",0.9691044192412984
75950,"/** 
 * Get the document manager.
 * @param executor
 * @return
 * @throws DataException
 * @throws IOException
 */
private IDocumentManager getDocumentManager(CubeQueryExecutor executor) throws DataException, IOException {
  if (executor.getContext().getMode() == DataEngineContext.DIRECT_PRESENTATION || executor.getContext().getMode() == DataEngineContext.MODE_GENERATION) {
    return DocumentManagerFactory.loadFileDocumentManager(executor.getContext().getTmpdir(),executor.getCubeQueryDefinition().getName());
  }
 else {
    return DocumentManagerFactory.createRADocumentManager(executor.getContext().getDocReader());
  }
}","/** 
 * Get the document manager.
 * @param executor
 * @return
 * @throws DataException
 * @throws IOException
 */
private IDocumentManager getDocumentManager(CubeQueryExecutor executor) throws DataException, IOException {
  if (executor.getContext().getMode() == DataEngineContext.DIRECT_PRESENTATION || executor.getContext().getMode() == DataEngineContext.MODE_GENERATION) {
    return DocumentManagerFactory.loadFileDocumentManager(executor.getContext().getTmpdir() + executor.getSession().getEngine().hashCode(),executor.getCubeQueryDefinition().getName());
  }
 else {
    return DocumentManagerFactory.createRADocumentManager(executor.getContext().getDocReader());
  }
}",0.9640397857689365
75951,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      cubeMaterializer=new org.eclipse.birt.data.engine.olap.api.cube.CubeMaterializer(this.sessionContext.getDataEngineContext().getTmpdir(),cubeHandle.getQualifiedName());
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=new org.eclipse.birt.data.engine.olap.api.cube.CubeMaterializer(this.sessionContext.getDataEngineContext().getTmpdir(),cubeHandle.getQualifiedName());
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    CubeMaterializer cubeMaterializer=null;
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      cubeMaterializer=createCubeMaterializer(cubeHandle);
      createCube((TabularCubeHandle)cubeHandle,cubeMaterializer);
      cubeMaterializer.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),null);
    }
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage());
  }
}",0.4899103139013453
75952,"protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    String resultSetID=loadResultSetID(parentResult,queryID);
    IBaseQueryResults queryResults=null;
    if (resultSetID == null) {
      IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
      if (parentResult != null) {
        queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),context.getSharedScope());
      }
 else {
        queryResults=dteSession.execute(pQuery,null,context.getSharedScope());
      }
    }
 else {
      queryResults=dteSession.getQueryResults(resultSetID);
    }
    CubeResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
    }
 else {
      resultSet=new CubeResultSet(this,context,resultSet,query,(ICubeQueryResults)queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}","protected IBaseResultSet doExecuteCube(IBaseResultSet parentResult,ICubeQueryDefinition query){
  String queryID=(String)queryIDMap.get(query);
  try {
    String resultSetID=loadResultSetID(parentResult,queryID);
    IBaseQueryResults queryResults=null;
    query.setQueryResultsID(resultSetID);
    IBasePreparedQuery pQuery=dteSession.prepare(query,context.getAppContext());
    if (parentResult != null) {
      queryResults=dteSession.execute(pQuery,parentResult.getQueryResults(),context.getSharedScope());
    }
 else {
      queryResults=dteSession.execute(pQuery,null,context.getSharedScope());
    }
    CubeResultSet resultSet=null;
    if (parentResult == null) {
      resultSet=new CubeResultSet(this,context,query,(ICubeQueryResults)queryResults);
    }
 else {
      resultSet=new CubeResultSet(this,context,resultSet,query,(ICubeQueryResults)queryResults);
    }
    return resultSet;
  }
 catch (  BirtException be) {
    logger.log(Level.SEVERE,be.getMessage());
    context.addException(be);
    return null;
  }
}",0.9288040949278734
75953,"/** 
 * layout the content and its children. It can be called in three status: 1. start, the first time it is called, in this status, it first check if it need page-break-before, 2. inprogress, the second or more time it is called. In this status, it tries to layout the content and its children to the current page. 3. end, the last time it is called. In this status, it means all the content has been layout, it is the time to handle the page-break-after.
 */
public boolean layout(){
switch (status) {
case STATUS_INTIALIZE:
    if (handleVisibility()) {
      status=STATUS_END;
      return false;
    }
  if (isPageBreakBefore() && !context.isPageEmpty()) {
    status=STATUS_START;
    context.endContentWithPageBreak(null);
    return true;
  }
case STATUS_START:
context.startContent(content);
case STATUS_INPROGRESS:
if (status == STATUS_INPROGRESS) {
context.continueContent(content);
}
start();
boolean hasNext=layoutChildren();
end();
if (isChildrenFinished()) {
status=STATUS_END;
}
 else {
status=STATUS_INPROGRESS;
}
if (hasNext) {
context.endContentWithPageBreak(content);
return true;
}
context.endContent(content);
if (isPageBreakAfter()) {
return true;
}
return false;
}
return false;
}","/** 
 * layout the content and its children. It can be called in three status: 1. start, the first time it is called, in this status, it first check if it need page-break-before, 2. inprogress, the second or more time it is called. In this status, it tries to layout the content and its children to the current page. 3. end, the last time it is called. In this status, it means all the content has been layout, it is the time to handle the page-break-after.
 */
public boolean layout(){
switch (status) {
case STATUS_INTIALIZE:
    if (handleVisibility()) {
      status=STATUS_END;
      return false;
    }
  if (isPageBreakBefore()) {
    status=STATUS_START;
    context.endContentWithPageBreak(null);
    return true;
  }
case STATUS_START:
context.startContent(content);
case STATUS_INPROGRESS:
if (status == STATUS_INPROGRESS) {
context.continueContent(content);
}
start();
boolean hasNext=layoutChildren();
end();
if (isChildrenFinished()) {
status=STATUS_END;
}
 else {
status=STATUS_INPROGRESS;
}
if (hasNext) {
context.endContentWithPageBreak(content);
return true;
}
context.endContent(content);
if (isPageBreakAfter()) {
return true;
}
return false;
}
return false;
}",0.989103101424979
75954,"public boolean layout(){
  boolean hasNext=super.layout();
  if (!context.getSkipPageHint()) {
    context.setPageEmpty(false);
  }
  return hasNext;
}","public boolean layout(){
  boolean hasNext=super.layout();
  if (!context.getSkipPageHint() && !hasNext) {
    context.setPageEmpty(false);
  }
  return hasNext;
}",0.961783439490446
75955,"public void fillArc(ArcRenderEvent are) throws ChartException {
  Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground)) {
    return;
  }
  Bounds bo=BoundsImpl.create(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight());
  final Rectangle r=new Rectangle((int)((bo.getLeft() + dTranslateX) * dScale),(int)((bo.getTop() + dTranslateY) * dScale),(int)Math.ceil(bo.getWidth() * dScale),(int)Math.ceil(bo.getHeight() * dScale));
  Path pt=new Path(((SwtDisplayServer)_ids).getDevice());
  if (are.getInnerRadius() >= 0 && (are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
    Bounds rctOuter, rctInner;
    if (are.getOuterRadius() > 0) {
      rctOuter=BoundsImpl.create(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getOuterRadius())) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getOuterRadius())) * dScale),(2 * are.getOuterRadius() * dScale),(2 * are.getOuterRadius() * dScale));
    }
 else {
      rctOuter=BoundsImpl.create(((bo.getLeft() + dTranslateX) * dScale),((bo.getTop() + dTranslateY) * dScale),(bo.getWidth() * dScale),(bo.getHeight() * dScale));
    }
    if (are.getInnerRadius() > 0) {
      rctInner=BoundsImpl.create(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getInnerRadius())) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getInnerRadius())) * dScale),(2 * are.getInnerRadius() * dScale),(2 * are.getInnerRadius() * dScale));
    }
 else {
      rctInner=BoundsImpl.create(((bo.getLeft() + dTranslateX + bo.getWidth() / 2d) * dScale),((bo.getTop() + dTranslateY + bo.getHeight() / 2d) * dScale),0,0);
    }
    double startAngle=Math.toRadians(-are.getStartAngle());
    double stopAngle=Math.toRadians(-are.getStartAngle() - are.getAngleExtent());
    double xsOuter=(rctOuter.getLeft() + (Math.cos(startAngle) * 0.5 + 0.5) * rctOuter.getWidth());
    double ysOuter=(rctOuter.getTop() + (Math.sin(startAngle) * 0.5 + 0.5) * rctOuter.getHeight());
    double xeInner=(rctInner.getLeft() + (Math.cos(stopAngle) * 0.5 + 0.5) * rctInner.getWidth());
    double yeInner=(rctInner.getTop() + (Math.sin(stopAngle) * 0.5 + 0.5) * rctInner.getHeight());
    pt.addArc((float)rctOuter.getLeft(),(float)rctOuter.getTop(),(float)rctOuter.getWidth(),(float)rctOuter.getHeight(),(float)are.getStartAngle(),(float)are.getAngleExtent());
    pt.lineTo((float)xeInner,(float)yeInner);
    pt.addArc((float)rctInner.getLeft(),(float)rctInner.getTop(),(float)rctInner.getWidth(),(float)rctInner.getHeight(),(float)(are.getStartAngle() + are.getAngleExtent()),(float)-are.getAngleExtent());
    pt.lineTo((float)xsOuter,(float)ysOuter);
  }
 else {
    if (are.getStyle() == ArcRenderEvent.SECTOR || (are.getStyle() == ArcRenderEvent.CLOSED && Math.abs(are.getAngleExtent()) >= 360)) {
      double xc=((are.getTopLeft().getX() + dTranslateX + are.getWidth() / 2d) * dScale);
      double yc=((are.getTopLeft().getY() + dTranslateY + are.getHeight() / 2d) * dScale);
      double xs=0, ys=0;
      double angle=Math.toRadians(-are.getStartAngle());
      xs=((are.getTopLeft().getX() + dTranslateX + (Math.cos(angle) * 0.5 + 0.5) * are.getWidth()) * dScale);
      ys=((are.getTopLeft().getY() + dTranslateY + (Math.sin(angle) * 0.5 + 0.5) * are.getHeight()) * dScale);
      if (are.getStyle() == ArcRenderEvent.CLOSED) {
        pt.addArc((float)((are.getTopLeft().getX() + dTranslateX) * dScale),(float)((are.getTopLeft().getY() + dTranslateY) * dScale),(float)(are.getWidth() * dScale),(float)(are.getHeight() * dScale),(float)are.getStartAngle(),(float)are.getAngleExtent());
        pt.lineTo((float)xs,(float)ys);
      }
 else       if (are.getStyle() == ArcRenderEvent.SECTOR) {
        pt.addArc((float)((are.getTopLeft().getX() + dTranslateX) * dScale),(float)((are.getTopLeft().getY() + dTranslateY) * dScale),(float)(are.getWidth() * dScale),(float)(are.getHeight() * dScale),(float)are.getStartAngle(),(float)are.getAngleExtent());
        pt.lineTo((float)xc,(float)yc);
        pt.lineTo((float)xs,(float)ys);
      }
    }
 else     if (are.getStyle() == ArcRenderEvent.OPEN || are.getStyle() == ArcRenderEvent.CLOSED) {
      double angle=Math.toRadians(-are.getStartAngle());
      double xs=((are.getTopLeft().getX() + dTranslateX + (Math.cos(angle) * 0.5 + 0.5) * are.getWidth()) * dScale);
      double ys=((are.getTopLeft().getY() + dTranslateY + (Math.sin(angle) * 0.5 + 0.5) * are.getHeight()) * dScale);
      pt.addArc((float)((are.getTopLeft().getX() + dTranslateX) * dScale),(float)((are.getTopLeft().getY() + dTranslateY) * dScale),(float)(are.getWidth() * dScale),(float)(are.getHeight() * dScale),(float)are.getStartAngle(),(float)are.getAngleExtent());
      pt.lineTo((float)xs,(float)ys);
    }
  }
  try {
    if (flBackground instanceof ColorDefinition) {
      fillPathColor(pt,(ColorDefinition)flBackground);
    }
 else     if (flBackground instanceof Gradient) {
      fillPathGradient(pt,(Gradient)flBackground,r);
    }
 else     if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
      fillPathImage(pt,(org.eclipse.birt.chart.model.attribute.Image)flBackground);
    }
  }
  finally {
    pt.dispose();
  }
}","public void fillArc(ArcRenderEvent are) throws ChartException {
  Fill flBackground=validateMultipleFill(are.getBackground());
  if (isFullTransparent(flBackground) || are.getAngleExtent() == 0) {
    return;
  }
  Bounds bo=BoundsImpl.create(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight());
  final Rectangle r=new Rectangle((int)((bo.getLeft() + dTranslateX) * dScale),(int)((bo.getTop() + dTranslateY) * dScale),(int)Math.ceil(bo.getWidth() * dScale),(int)Math.ceil(bo.getHeight() * dScale));
  Path pt=new Path(((SwtDisplayServer)_ids).getDevice());
  if (are.getInnerRadius() >= 0 && (are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) || (are.getInnerRadius() > 0 && are.getOuterRadius() <= 0)) {
    Bounds rctOuter, rctInner;
    if (are.getOuterRadius() > 0) {
      rctOuter=BoundsImpl.create(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getOuterRadius())) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getOuterRadius())) * dScale),(2 * are.getOuterRadius() * dScale),(2 * are.getOuterRadius() * dScale));
    }
 else {
      rctOuter=BoundsImpl.create(((bo.getLeft() + dTranslateX) * dScale),((bo.getTop() + dTranslateY) * dScale),(bo.getWidth() * dScale),(bo.getHeight() * dScale));
    }
    if (are.getInnerRadius() > 0) {
      rctInner=BoundsImpl.create(((bo.getLeft() + dTranslateX + (bo.getWidth() / 2d - are.getInnerRadius())) * dScale),((bo.getTop() + dTranslateY + (bo.getHeight() / 2d - are.getInnerRadius())) * dScale),(2 * are.getInnerRadius() * dScale),(2 * are.getInnerRadius() * dScale));
    }
 else {
      rctInner=BoundsImpl.create(((bo.getLeft() + dTranslateX + bo.getWidth() / 2d) * dScale),((bo.getTop() + dTranslateY + bo.getHeight() / 2d) * dScale),0,0);
    }
    double startAngle=Math.toRadians(-are.getStartAngle());
    double stopAngle=Math.toRadians(-are.getStartAngle() - are.getAngleExtent());
    double xsOuter=(rctOuter.getLeft() + (Math.cos(startAngle) * 0.5 + 0.5) * rctOuter.getWidth());
    double ysOuter=(rctOuter.getTop() + (Math.sin(startAngle) * 0.5 + 0.5) * rctOuter.getHeight());
    double xeInner=(rctInner.getLeft() + (Math.cos(stopAngle) * 0.5 + 0.5) * rctInner.getWidth());
    double yeInner=(rctInner.getTop() + (Math.sin(stopAngle) * 0.5 + 0.5) * rctInner.getHeight());
    pt.addArc((float)rctOuter.getLeft(),(float)rctOuter.getTop(),(float)rctOuter.getWidth(),(float)rctOuter.getHeight(),(float)are.getStartAngle(),(float)are.getAngleExtent());
    pt.lineTo((float)xeInner,(float)yeInner);
    pt.addArc((float)rctInner.getLeft(),(float)rctInner.getTop(),(float)rctInner.getWidth(),(float)rctInner.getHeight(),(float)(are.getStartAngle() + are.getAngleExtent()),(float)-are.getAngleExtent());
    pt.lineTo((float)xsOuter,(float)ysOuter);
  }
 else {
    if (are.getStyle() == ArcRenderEvent.SECTOR || (are.getStyle() == ArcRenderEvent.CLOSED && Math.abs(are.getAngleExtent()) >= 360)) {
      double xc=((are.getTopLeft().getX() + dTranslateX + are.getWidth() / 2d) * dScale);
      double yc=((are.getTopLeft().getY() + dTranslateY + are.getHeight() / 2d) * dScale);
      double xs=0, ys=0;
      double angle=Math.toRadians(-are.getStartAngle());
      xs=((are.getTopLeft().getX() + dTranslateX + (Math.cos(angle) * 0.5 + 0.5) * are.getWidth()) * dScale);
      ys=((are.getTopLeft().getY() + dTranslateY + (Math.sin(angle) * 0.5 + 0.5) * are.getHeight()) * dScale);
      if (are.getStyle() == ArcRenderEvent.CLOSED) {
        pt.addArc((float)((are.getTopLeft().getX() + dTranslateX) * dScale),(float)((are.getTopLeft().getY() + dTranslateY) * dScale),(float)(are.getWidth() * dScale),(float)(are.getHeight() * dScale),(float)are.getStartAngle(),(float)are.getAngleExtent());
        pt.lineTo((float)xs,(float)ys);
      }
 else       if (are.getStyle() == ArcRenderEvent.SECTOR) {
        pt.addArc((float)((are.getTopLeft().getX() + dTranslateX) * dScale),(float)((are.getTopLeft().getY() + dTranslateY) * dScale),(float)(are.getWidth() * dScale),(float)(are.getHeight() * dScale),(float)are.getStartAngle(),(float)are.getAngleExtent());
        pt.lineTo((float)xc,(float)yc);
        pt.lineTo((float)xs,(float)ys);
      }
    }
 else     if (are.getStyle() == ArcRenderEvent.OPEN || are.getStyle() == ArcRenderEvent.CLOSED) {
      double angle=Math.toRadians(-are.getStartAngle());
      double xs=((are.getTopLeft().getX() + dTranslateX + (Math.cos(angle) * 0.5 + 0.5) * are.getWidth()) * dScale);
      double ys=((are.getTopLeft().getY() + dTranslateY + (Math.sin(angle) * 0.5 + 0.5) * are.getHeight()) * dScale);
      pt.addArc((float)((are.getTopLeft().getX() + dTranslateX) * dScale),(float)((are.getTopLeft().getY() + dTranslateY) * dScale),(float)(are.getWidth() * dScale),(float)(are.getHeight() * dScale),(float)are.getStartAngle(),(float)are.getAngleExtent());
      pt.lineTo((float)xs,(float)ys);
    }
  }
  try {
    if (flBackground instanceof ColorDefinition) {
      fillPathColor(pt,(ColorDefinition)flBackground);
    }
 else     if (flBackground instanceof Gradient) {
      fillPathGradient(pt,(Gradient)flBackground,r);
    }
 else     if (flBackground instanceof org.eclipse.birt.chart.model.attribute.Image) {
      fillPathImage(pt,(org.eclipse.birt.chart.model.attribute.Image)flBackground);
    }
  }
  finally {
    pt.dispose();
  }
}",0.9972757162987318
75956,"/** 
 * Sets the value of the given property, which is extension property.
 * @param propName the name of the property
 * @param value the value to set
 */
private void setExtensionPropertyValue(String propName,Object value){
  if (value != null)   extensionPropValues.put(propName,value);
 else   extensionPropValues.remove(propName);
}","/** 
 * Sets the value of the given property, which is extension property.
 * @param propName the name of the property
 * @param value the value to set
 */
private void setExtensionPropertyValue(ElementPropertyDefn prop,Object value){
  String propName=prop.getName();
  Object oldValue=extensionPropValues.get(propName);
  if (prop.getTypeCode() == IPropertyType.ELEMENT_REF_TYPE) {
    ElementRefValue oldRef=(ElementRefValue)oldValue;
    ReferenceValueUtil.updateReference(element,oldRef,(ReferenceValue)value,prop);
  }
  if (value != null)   extensionPropValues.put(propName,value);
 else   extensionPropValues.remove(propName);
}",0.6618705035971223
75957,"/** 
 * Computes value precision if more precise than existing one For instance 3.4 has a precision of 0.1 and 1400 has a precision of 100. That is the position where the first significant digit appears, or in double representation, the value of the exponent
 * @param precision
 * @param value
 * @return
 */
protected static double getPrecision(double precision,double pValue){
  double value=Math.abs(pValue);
  if (value == 0) {
    if (precision < 0)     return precision;
 else     if (precision >= 0)     return 1;
  }
  if (precision == 0) {
    precision=Math.pow(10,Math.floor(Math.log(value) / Math.log(10)));
  }
  double check=value / precision;
  int loopCounter=0;
  while (Math.floor(check) != check && loopCounter < 20) {
    loopCounter++;
    precision/=10;
    check=value / precision;
  }
  if (loopCounter == 20)   logger.log(ILogger.WARNING,""String_Node_Str"" + value);
  return precision;
}","/** 
 * Computes value precision if more precise than existing one For instance 3.4 has a precision of 0.1 and 1400 has a precision of 100. That is the position where the first significant digit appears, or in double representation, the value of the exponent
 * @param precision
 * @param value
 * @return
 */
protected static double getPrecision(double precision,double pValue,FormatSpecifier fs,ULocale locale){
  double value=Math.abs(pValue);
  if (value == 0) {
    if (precision < 0)     return precision;
 else     if (precision >= 0)     return 1;
  }
  if (precision == 0) {
    precision=Math.pow(10,Math.floor(Math.log(value) / Math.log(10)));
  }
  double check=value / precision;
  int loopCounter=0;
  while (Math.floor(check) != check && loopCounter < 20) {
    loopCounter++;
    precision/=10;
    check=value / precision;
  }
  if (loopCounter == 20)   logger.log(ILogger.WARNING,""String_Node_Str"" + value);
  if (fs != null) {
    if (fs instanceof NumberFormatSpecifier) {
      NumberFormatSpecifier ns=(NumberFormatSpecifier)fs;
      if (ns.isSetFractionDigits()) {
        double multiplier=ns.isSetMultiplier() ? ns.getMultiplier() : 1;
        if (multiplier != 0) {
          double formatPrecision=Math.pow(10,-ns.getFractionDigits()) / multiplier;
          if (precision == 0)           precision=formatPrecision;
 else           precision=Math.max(precision,formatPrecision);
        }
      }
    }
  }
  return precision;
}",0.7555930772477839
75958,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue);
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param scModel
 * @param fs
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,Scale scModel,FormatSpecifier fs,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent) throws ChartException {
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  final DataElement oMinimum=scModel.getMin();
  final DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? new Integer(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    sc=new AutoScale(iType);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bCategoryScale=true;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=0;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale());
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(dStep);
    sc.oStepNumber=oStepNumber;
    sc.setData(dsi);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.dPrecision=dPrecision;
    sc.iMarginPercent=iMarginPercent;
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    sc=new AutoScale(iType,new Double(0),new Double(0));
    sc.oStep=new Double(10);
    sc.oStepNumber=oStepNumber;
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    sc.setData(dsi);
    sc.setDirection(direction);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.bStepFixed=true;
      sc.bMaximumFixed=true;
      sc.bMinimumFixed=true;
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=CDateTime.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    sc=new AutoScale(DATE_TIME,cdtMinAxis,cdtMaxAxis);
    sc.oStep=new Integer(1);
    sc.oStepNumber=oStepNumber;
    sc.oUnit=new Integer(iUnit);
    sc.setDirection(direction);
    sc.fs=fs;
    sc.rtc=rtc;
    sc.bAxisLabelStaggered=ax.isAxisLabelStaggered();
    sc.iLabelShowingInterval=ax.getLableShowingInterval();
    sc.bTickBetweenCategories=ax.isTickBwtweenCategories();
    sc.dZoomFactor=zoomFactor;
    sc.iMarginPercent=iMarginPercent;
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.oMinimum=((DateTimeDataElement)oMinimum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMinimumFixed=true;
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.oMaximum=((DateTimeDataElement)oMaximum).getValueAsCDateTime();
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.bMaximumFixed=true;
    }
    if (sc.bMaximumFixed && sc.bMinimumFixed) {
      if (((CDateTime)sc.oMinimum).after(sc.oMaximum)) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.oMinimum,sc.oMaximum},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.bStepFixed) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().length == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().length == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
  }
  sc.setData(dsi);
  return sc;
}",0.9988524213908652
75959,"public String format(Date date){
  try {
    return dateFormat.format(date);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}","public String format(Date date){
  try {
    if (formatPattern == null || formatPattern.length() == 0) {
      if (date instanceof java.sql.Date) {
        dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
        return dateFormat.format(date);
      }
 else       if (date instanceof java.sql.Time) {
        dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
        return dateFormat.format(date);
      }
    }
    return dateFormat.format(date);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    return null;
  }
}",0.4271844660194174
75960,"/** 
 * define pattern and locale here
 * @param formatString
 */
public void applyPattern(String formatString){
  try {
    this.formatPattern=formatString;
    if (formatString == null || formatString.equals(DATETIME_UNFORMATTED)) {
      formatPattern=""String_Node_Str"";
      dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,com.ibm.icu.text.DateFormat.SHORT,locale);
      return;
    }
 else     if (formatString.equals(DATE_UNFORMATTED)) {
      formatPattern=""String_Node_Str"";
      dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      return;
    }
 else     if (formatString.equals(TIME_UNFORMATTED)) {
      formatPattern=""String_Node_Str"";
      dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
      return;
    }
    if (formatString.length() == 1) {
      char patternTemp=formatString.charAt(0);
switch (patternTemp) {
case 'G':
        dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
      return;
case 'D':
    dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
  return;
case 'd':
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'T':
dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 't':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'f':
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'F':
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 'i':
case 'I':
int timeForm=(patternTemp == 'i') ? com.ibm.icu.text.DateFormat.MEDIUM : com.ibm.icu.text.DateFormat.LONG;
com.ibm.icu.text.DateFormat factoryFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.SHORT,timeForm,locale);
SimpleDateFormat factorySimpleFormat;
try {
factorySimpleFormat=(SimpleDateFormat)factoryFormat;
}
 catch (ClassCastException e) {
dateFormat=factoryFormat;
return;
}
String pattern=factorySimpleFormat.toPattern();
if (pattern.indexOf(""String_Node_Str"") == -1) {
int idx=pattern.indexOf(""String_Node_Str"");
if (idx >= 0) {
StringBuffer strBuf=new StringBuffer(pattern);
strBuf.insert(idx,'y');
pattern=strBuf.toString();
}
}
dateFormat=new SimpleDateFormat(pattern,locale);
return;
case 'g':
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.SHORT,com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'M':
case 'm':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'R':
case 'r':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
dateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
return;
case 's':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'u':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'Y':
case 'y':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
default :
dateFormat=new SimpleDateFormat(formatString,locale);
return;
}
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
}
dateFormat=new SimpleDateFormat(formatString,locale);
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}","/** 
 * define pattern and locale here
 * @param formatString
 */
public void applyPattern(String formatString){
  try {
    this.formatPattern=formatString;
    if (formatString == null || formatString.equals(DATETIME_UNFORMATTED)) {
      formatPattern=""String_Node_Str"";
      dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,com.ibm.icu.text.DateFormat.SHORT,locale);
      return;
    }
 else     if (formatString.equals(DATE_UNFORMATTED)) {
      formatPattern=""String_Node_Str"";
      dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      return;
    }
 else     if (formatString.equals(TIME_UNFORMATTED)) {
      formatPattern=""String_Node_Str"";
      dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
      return;
    }
    if (formatString.length() == 1) {
      char patternTemp=formatString.charAt(0);
switch (patternTemp) {
case 'G':
        dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
      return;
case 'D':
    dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
  return;
case 'd':
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'T':
dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 't':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'f':
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'F':
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
return;
case 'i':
case 'I':
int timeForm=(patternTemp == 'i') ? com.ibm.icu.text.DateFormat.MEDIUM : com.ibm.icu.text.DateFormat.LONG;
com.ibm.icu.text.DateFormat factoryFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.SHORT,timeForm,locale);
SimpleDateFormat factorySimpleFormat;
try {
factorySimpleFormat=(SimpleDateFormat)factoryFormat;
}
 catch (ClassCastException e) {
dateFormat=factoryFormat;
return;
}
String pattern=factorySimpleFormat.toPattern();
if (pattern.indexOf(""String_Node_Str"") == -1) {
int idx=pattern.indexOf(""String_Node_Str"");
if (idx >= 0) {
StringBuffer strBuf=new StringBuffer(pattern);
strBuf.insert(idx,'y');
pattern=strBuf.toString();
}
}
dateFormat=new SimpleDateFormat(pattern,locale);
return;
case 'g':
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.SHORT,com.ibm.icu.text.DateFormat.SHORT,locale);
return;
case 'M':
case 'm':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'R':
case 'r':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
dateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
return;
case 's':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'u':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
case 'Y':
case 'y':
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
default :
dateFormat=new SimpleDateFormat(formatString,locale);
return;
}
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateTimeInstance(com.ibm.icu.text.DateFormat.LONG,com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getDateInstance(com.ibm.icu.text.DateFormat.SHORT,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.LONG,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=com.ibm.icu.text.DateFormat.getTimeInstance(com.ibm.icu.text.DateFormat.MEDIUM,locale);
return;
}
if (formatString.equals(""String_Node_Str"")) {
dateFormat=new SimpleDateFormat(""String_Node_Str"",locale);
return;
}
dateFormat=new SimpleDateFormat(formatString,locale);
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getMessage(),e);
}
}",0.9987897458466278
75961,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasTopBottomNInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  }
  return runningOnRS;
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static boolean runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  if (!queryDefn.usesDetails()) {
    queryDefn.getSorts().clear();
  }
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getContext(),queryResultInfo);
  boolean runningOnRS=GroupDefnUtil.isEqualGroups(queryDefn.getGroups(),rdLoad.loadGroupDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE));
  if (runningOnRS == false)   return false;
  runningOnRS=!hasAggregationInFilter(queryDefn.getFilters());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleRSMap(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getResultSetExpressions(),queryDefn.getResultSetExpressions());
  if (runningOnRS == false)   return false;
  runningOnRS=isCompatibleSubQuery(rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE),queryDefn);
  if (runningOnRS == false)   return false;
  IBaseQueryDefinition qd=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE);
  List filters=qd.getFilters();
  if (FilterDefnUtil.isConflictFilter(filters,queryDefn.getFilters())) {
    runningOnRS=false;
    FilterDefnUtil.getRealFilterList(rdLoad.loadOriginalQueryDefn(StreamManager.ROOT_STREAM,StreamManager.BASE_SCOPE).getFilters(),queryDefn.getFilters());
  }
  if (runningOnRS == false)   return false;
  if (hasSubquery(queryDefn)) {
    if (!QueryDefnUtil.isEqualSorts(queryDefn.getSorts(),qd.getSorts())) {
      runningOnRS=false;
    }
    Collection subqueries=queryDefn.getSubqueries();
    List gps=queryDefn.getGroups();
    if (gps != null && gps.size() > 0) {
      for (int i=0; i < gps.size(); i++) {
        subqueries.addAll(((IGroupDefinition)gps.get(i)).getSubqueries());
      }
    }
    Iterator it=subqueries.iterator();
    while (it.hasNext()) {
      IBaseQueryDefinition query=(IBaseQueryDefinition)it.next();
      if (!query.usesDetails())       query.getSorts().clear();
      if (query.getFilters() != null && query.getFilters().size() > 0) {
        runningOnRS=false;
        break;
      }
      List groups=query.getGroups();
      for (int i=0; i < groups.size(); i++) {
        List groupFilters=((IGroupDefinition)groups.get(i)).getFilters();
        if (groupFilters != null && groupFilters.size() > 0) {
          runningOnRS=false;
          break;
        }
      }
      if (runningOnRS == false)       break;
    }
  }
  if (runningOnRS == false)   return false;
  if (queryDefn.getFilters() != null && queryDefn.getFilters().size() > 0) {
    if (!isFiltersEquals(filters,queryDefn.getFilters()))     runningOnRS=queryDefn.getResultSetExpressions().values() == null || !hasAggregationOnRowObjects(queryDefn.getResultSetExpressions().values().iterator());
  }
  return runningOnRS;
}",0.9969094922737308
75962,"/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  for (int i=0; i < resultSets.length; i++) {
    saveOneResultSet(dataOutputStream,resultSets[i]);
  }
}","/** 
 * @param name
 * @param resultSets
 * @param writer
 * @throws IOException
 */
public static void save(String name,IAggregationResultSet[] resultSets,IDocArchiveWriter writer) throws IOException {
  RAOutputStream outputStream=writer.createRandomAccessStream(name);
  DataOutputStream dataOutputStream=new DataOutputStream(outputStream);
  if (resultSets == null) {
    dataOutputStream.writeInt(-1);
    return;
  }
  dataOutputStream.writeInt(resultSets.length);
  dataOutputStream.close();
  for (int i=0; i < resultSets.length; i++) {
    outputStream=writer.createRandomAccessStream(name + i);
    dataOutputStream=new DataOutputStream(outputStream);
    saveOneResultSet(dataOutputStream,resultSets[i]);
  }
}",0.8882035466461063
75963,"/** 
 * @param name
 * @param reader
 * @throws IOException
 */
public static IAggregationResultSet[] load(String name,IDocArchiveReader reader) throws IOException {
  RAInputStream inputStream=reader.getStream(name);
  DataInputStream dataInputStream=new DataInputStream(inputStream);
  int size=dataInputStream.readInt();
  if (size <= 0) {
    return null;
  }
  IAggregationResultSet[] result=new IAggregationResultSet[size];
  for (int i=0; i < size; i++) {
    result[i]=loadOneResultSet(dataInputStream);
  }
  return result;
}","/** 
 * @param name
 * @param reader
 * @throws IOException
 */
public static IAggregationResultSet[] load(String name,IDocArchiveReader reader) throws IOException {
  RAInputStream inputStream=reader.getStream(name);
  DataInputStream dataInputStream=new DataInputStream(inputStream);
  int size=dataInputStream.readInt();
  inputStream.close();
  if (size <= 0) {
    return null;
  }
  IAggregationResultSet[] result=new IAggregationResultSet[size];
  for (int i=0; i < size; i++) {
    inputStream=reader.getStream(name + i);
    dataInputStream=new DataInputStream(inputStream);
    result[i]=loadOneResultSet(dataInputStream);
  }
  return result;
}",0.8982338099243061
75964,"/** 
 * @param outputStream
 * @param resultSet
 * @throws IOException
 */
private static void saveOneResultSet(DataOutputStream outputStream,IAggregationResultSet resultSet) throws IOException {
  if (resultSet instanceof AggregationResultSet) {
    saveMetaData(outputStream,(AggregationResultSet)resultSet);
    saveAggregationRowSet(outputStream,(AggregationResultSet)resultSet);
  }
}","/** 
 * @param outputStream
 * @param resultSet
 * @throws IOException
 */
private static void saveOneResultSet(DataOutputStream outputStream,IAggregationResultSet resultSet) throws IOException {
  if (resultSet instanceof AggregationResultSet) {
    saveMetaData(outputStream,(AggregationResultSet)resultSet);
    saveAggregationRowSet(outputStream,(AggregationResultSet)resultSet);
  }
  outputStream.close();
}",0.970074812967581
75965,"public void seek(int index) throws IOException {
  if (index >= aggregationResultRow.size()) {
    return;
  }
  currentPosition=index;
  resultObject=(AggregationResultRow)aggregationResultRow.get(index);
}","public void seek(int index) throws IOException {
  if (index >= length) {
    return;
  }
  if (index >= aggregationResultRow.size()) {
    for (int i=0; i <= index - aggregationResultRow.size(); i++) {
      aggregationResultRow.add(AggregationResultSetSaveUtil.loadAggregationRow(inputStream));
    }
  }
  currentPosition=index;
  resultObject=(AggregationResultRow)aggregationResultRow.get(index);
}",0.6557377049180327
75966,"CachedAggregationResultSet(DataInputStream inputStream,int length,String[] levelNames,int[] sortTypes,String[][] keyNames,String[][] attributeNames,int[][] keyDataTypes,int[][] attributeDataTypes,String[] aggregationNames,int[] aggregationDataType) throws IOException {
  this.currentPosition=0;
  this.length=length;
  this.levelNames=levelNames;
  this.sortType=sortTypes;
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.keyDataTypes=keyDataTypes;
  this.attributeDataTypes=attributeDataTypes;
  this.aggregationDataType=aggregationDataType;
  this.aggregationResultNameMap=new HashMap();
  if (aggregationNames != null) {
    for (int i=0; i < aggregationNames.length; i++) {
      aggregationResultNameMap.put(aggregationNames[i],new Integer(i));
    }
  }
  aggregationResultRow=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  for (int i=0; i < length; i++) {
    aggregationResultRow.add(AggregationResultSetSaveUtil.loadAggregationRow(inputStream));
  }
  seek(0);
}","CachedAggregationResultSet(DataInputStream inputStream,int length,String[] levelNames,int[] sortTypes,String[][] keyNames,String[][] attributeNames,int[][] keyDataTypes,int[][] attributeDataTypes,String[] aggregationNames,int[] aggregationDataType) throws IOException {
  this.inputStream=inputStream;
  this.currentPosition=0;
  this.length=length;
  this.levelNames=levelNames;
  this.sortType=sortTypes;
  this.keyNames=keyNames;
  this.attributeNames=attributeNames;
  this.keyDataTypes=keyDataTypes;
  this.attributeDataTypes=attributeDataTypes;
  this.aggregationDataType=aggregationDataType;
  this.aggregationResultNameMap=new HashMap();
  if (aggregationNames != null) {
    for (int i=0; i < aggregationNames.length; i++) {
      aggregationResultNameMap.put(aggregationNames[i],new Integer(i));
    }
  }
  aggregationResultRow=new BufferedStructureArray(AggregationResultRow.getCreator(),Constants.LIST_BUFFER_SIZE);
  seek(0);
}",0.917718324078748
75967,"/** 
 * Tests whether the property is the extension property which holds the serialized XML value for extension model properties. The property type should be XML.
 * @param propName name of the property to check
 * @return true if the property is XML type and holds the serialized XMLvalue for extension model properties, otherwise false
 */
public boolean isExtensionXMLProperty(String propName){
  ExtensionElementDefn extDefn=getExtDefn();
  if (extDefn != null) {
    IPropertyDefn propDefn=extDefn.getProperty(propName);
    if (propDefn != null && IPropertyType.XML_TYPE == propDefn.getTypeCode())     return true;
  }
  return false;
}","/** 
 * Tests whether the property is the extension property which holds the serialized XML value for extension model properties. The property type should be XML.
 * @param propName name of the property to check
 * @return true if the property is XML type and holds the serialized XMLvalue for extension model properties, otherwise false
 */
public boolean isExtensionXMLProperty(String propName){
  ExtensionElementDefn extDefn=getExtDefn();
  if (extDefn != null) {
    ElementPropertyDefn propDefn=(ElementPropertyDefn)extDefn.getProperty(propName);
    if (propDefn != null && propDefn.hasOwnModel() && IPropertyType.XML_TYPE == propDefn.getTypeCode())     return true;
  }
  return false;
}",0.9588631264023936
75968,"static public void startContent(IContent content,IContentEmitter emitter){
  String vformat=content.getStyle().getVisibleFormat();
  if (vformat == null) {
    starter.visit(content,emitter);
  }
 else {
    if (vformat.toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) > 0 || vformat.toLowerCase().indexOf(""String_Node_Str"") > 0) {
      starter.visit(content,emitter);
    }
  }
}","static public void startContent(IContent content,IContentEmitter emitter){
  String vformat=content.getStyle().getVisibleFormat();
  if (vformat == null) {
    starter.visit(content,emitter);
  }
 else {
    if (vformat.toLowerCase().indexOf(emitter.getOutputFormat().toLowerCase()) == -1 && vformat.toLowerCase().indexOf(""String_Node_Str"") == -1) {
      starter.visit(content,emitter);
    }
  }
}",0.9722921914357684
75969,"protected void executeHeader(IReportItemExecutor executor,IContent content){
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      IContent childContent=childExecutor.execute();
      removePageBreak(childContent);
      content.getChildren().add(childContent);
      execute(childExecutor,childContent);
      childExecutor.close();
    }
  }
}","protected void executeHeader(IReportItemExecutor executor,IContent content){
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      IContent childContent=childExecutor.execute();
      removePageBreak(childContent);
      add(content.getChildren(),childContent);
      execute(childExecutor,childContent);
      childExecutor.close();
    }
  }
}",0.8088578088578089
75970,"protected void execute(IReportItemExecutor executor,IContent content){
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      IContent childContent=childExecutor.execute();
      content.getChildren().add(childContent);
      execute(childExecutor,childContent);
      childExecutor.close();
    }
  }
}","protected void execute(IReportItemExecutor executor,IContent content){
  while (executor.hasNextChild()) {
    IReportItemExecutor childExecutor=executor.getNextChild();
    if (childExecutor != null) {
      IContent childContent=childExecutor.execute();
      add(content.getChildren(),childContent);
      execute(childExecutor,childContent);
      childExecutor.close();
    }
  }
}",0.8782383419689119
75971,"public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        nextContent.getParent().getChildren().add(nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}","public boolean hasNextChild(){
  if (!needUpdate) {
    return hasNext;
  }
  if (currentRunIn != null) {
    if (currentRunIn.hasNextChild()) {
      hasNext=true;
      needUpdate=false;
      return hasNext;
    }
 else {
      currentRunIn.close();
    }
  }
  currentRunIn=null;
  while (executor.hasNextChild()) {
    IReportItemExecutor next=executor.getNextChild();
    IContent nextContent=next.execute();
    if (nextContent instanceof IListBandContent) {
      IListBandContent band=(IListBandContent)nextContent;
      if (repeat && (band.getBandType() == IBandContent.BAND_HEADER || band.getBandType() == IBandContent.BAND_GROUP_HEADER)) {
        executeHeader(next,nextContent);
        next.close();
        next=new DOMReportItemExecutor(nextContent);
        next.execute();
        add(nextContent.getParent().getChildren(),nextContent);
      }
      if (next.hasNextChild()) {
        currentRunIn=next;
        break;
      }
    }
 else {
      childExecutor=next;
      childContent=nextContent;
      break;
    }
  }
  if (currentRunIn != null || childContent != null) {
    hasNext=true;
  }
 else {
    hasNext=false;
  }
  needUpdate=false;
  return hasNext;
}",0.9957947855340622
75972,"/** 
 * @return whether the output format is for printing
 */
protected boolean isForPrinting(){
  String outputFormat=getOutputFormat();
  if (""String_Node_Str"".equalsIgnoreCase(outputFormat) || ""String_Node_Str"".equalsIgnoreCase(outputFormat))   return true;
  return false;
}","/** 
 * @return whether the output format is for printing
 */
protected boolean isForPrinting(){
  String outputFormat=getOutputFormat();
  if (""String_Node_Str"".equalsIgnoreCase(outputFormat) || ""String_Node_Str"".equalsIgnoreCase(outputFormat) || ""String_Node_Str"".equalsIgnoreCase(outputFormat))   return true;
  return false;
}",0.9144736842105264
75973,"private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=pl.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setTop(bo.getTop());
  boTitle.setWidth(szTitle.getWidth());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (pl.isSetWidthHint()) {
    plotWidthHint=pl.getWidthHint();
  }
  if (pl.isSetHeightHint()) {
    plotHeightHint=pl.getHeightHint();
  }
  double plotLeft, plotTop;
  Position lgPos=lg.getPosition();
  if (isRightToLeft) {
    if (lgPos == Position.RIGHT_LITERAL) {
      lgPos=Position.LEFT_LITERAL;
    }
 else     if (lgPos == Position.LEFT_LITERAL) {
      lgPos=Position.RIGHT_LITERAL;
    }
  }
  Anchor plotAnchor=pl.getAnchor();
  if (isRightToLeft) {
switch (plotAnchor.getValue()) {
case Anchor.EAST:
      plotAnchor=Anchor.WEST_LITERAL;
    break;
case Anchor.NORTH_EAST:
  plotAnchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
plotAnchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
plotAnchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
plotAnchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
plotAnchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (lgPos.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft() + bo.getWidth() - szLegend.getWidth());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(boTitle.getLeft() - szLegend.getWidth());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setHeight(bo.getHeight());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
boLegend.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + szTitle.getWidth() + szLegend.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(szLegend.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop() + szLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boLegend.setLeft(bo.getLeft());
boLegend.setTop(bo.getTop() + bo.getHeight() - szLegend.getHeight());
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(szLegend.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - boLegend.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
boLegend.setTop(boTitle.getTop() - szLegend.getHeight());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boTitle.setWidth(bo.getWidth());
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != pl && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
}
}","private void doLayout_tmp(IDisplayServer xs,Chart cm,Bounds boFull,RunTimeContext rtc) throws ChartException {
  final boolean isRightToLeft=rtc.isRightToLeft();
  Block bl=cm.getBlock();
  bl.setBounds(boFull);
  Insets ins=bl.getInsets();
  Bounds bo=boFull.adjustedInstance(ins);
  Legend lg=cm.getLegend();
  Plot pl=cm.getPlot();
  TitleBlock tb=cm.getTitle();
  Size szTitle=(!tb.isVisible()) ? SizeImpl.create(0,0) : tb.getPreferredSize(xs,cm,rtc);
  Bounds boPlot=pl.getBounds();
  Bounds boLegend=lg.getBounds();
  Bounds boTitle=tb.getBounds();
  Anchor titleAnchor=tb.getAnchor();
  boTitle.setLeft(bo.getLeft());
  boTitle.setTop(bo.getTop());
  boTitle.setWidth(szTitle.getWidth());
  boTitle.setHeight(szTitle.getHeight());
  Size szLegend=(!lg.isVisible()) ? SizeImpl.create(0,0) : lg.getPreferredSize(xs,cm,rtc);
  if (!lg.isSetPosition()) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,Messages.getString(""String_Node_Str"",ULocale.getDefault()));
  }
  double plotWidthHint=-1, plotHeightHint=-1;
  if (pl.isSetWidthHint()) {
    plotWidthHint=pl.getWidthHint();
  }
  if (pl.isSetHeightHint()) {
    plotHeightHint=pl.getHeightHint();
  }
  double plotLeft, plotTop;
  Position lgPos=lg.getPosition();
  if (isRightToLeft) {
    if (lgPos == Position.RIGHT_LITERAL) {
      lgPos=Position.LEFT_LITERAL;
    }
 else     if (lgPos == Position.LEFT_LITERAL) {
      lgPos=Position.RIGHT_LITERAL;
    }
  }
  Anchor plotAnchor=pl.getAnchor();
  if (isRightToLeft) {
switch (plotAnchor.getValue()) {
case Anchor.EAST:
      plotAnchor=Anchor.WEST_LITERAL;
    break;
case Anchor.NORTH_EAST:
  plotAnchor=Anchor.NORTH_WEST_LITERAL;
break;
case Anchor.SOUTH_EAST:
plotAnchor=Anchor.SOUTH_WEST_LITERAL;
break;
case Anchor.WEST:
plotAnchor=Anchor.EAST_LITERAL;
break;
case Anchor.NORTH_WEST:
plotAnchor=Anchor.NORTH_EAST_LITERAL;
break;
case Anchor.SOUTH_WEST:
plotAnchor=Anchor.SOUTH_EAST_LITERAL;
break;
}
}
switch (lgPos.getValue()) {
case Position.INSIDE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
boLegend.set(0,0,szLegend.getWidth(),szLegend.getHeight());
break;
case Position.RIGHT:
case Position.OUTSIDE:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
break;
case Anchor.WEST:
plotLeft=bo.getLeft() + szTitle.getWidth();
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
if (szTitle.getWidth() + boPlot.getWidth() + boLegend.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
boLegend.setLeft(plotLeft + boPlot.getWidth());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.LEFT:
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(szLegend.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight());
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight()) : plotHeightHint);
plotLeft=bo.getLeft() + szLegend.getWidth();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
boTitle.setLeft(bo.getLeft() + boPlot.getWidth() + boLegend.getWidth());
boTitle.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + boLegend.getWidth();
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - boLegend.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? bo.getHeight() : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
if (boLegend.getWidth() + boPlot.getWidth() + szTitle.getWidth() > bo.getWidth()) {
boLegend.setWidth(bo.getWidth() - boPlot.getWidth() - szTitle.getWidth());
}
boLegend.setHeight(bo.getHeight());
plotLeft=bo.getLeft() + szTitle.getWidth() + boLegend.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boLegend.getWidth()- boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boLegend.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boLegend.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.ABOVE:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - szTitle.getHeight() - szLegend.getHeight()) : plotHeightHint);
boLegend.setTop(bo.getTop());
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop() + boLegend.getHeight();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
plotTop=bo.getTop() + boLegend.getHeight() + szTitle.getHeight();
boLegend.setTop(bo.getTop() + szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
case Position.BELOW:
boPlot.setWidth(plotWidthHint < 0 ? bo.getWidth() : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boTitle.getHeight() - boLegend.getHeight()) : plotHeightHint);
boLegend.setLeft(bo.getLeft());
boLegend.setWidth(bo.getWidth());
boLegend.setHeight(bo.getHeight() - szTitle.getHeight() - boPlot.getHeight());
plotLeft=bo.getLeft();
plotTop=bo.getTop();
switch (titleAnchor.getValue()) {
case Anchor.EAST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setLeft(bo.getLeft() + bo.getWidth() - szTitle.getWidth());
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
break;
case Anchor.WEST:
boPlot.setWidth(plotWidthHint < 0 ? (bo.getWidth() - szTitle.getWidth()) : plotWidthHint);
boPlot.setHeight(plotHeightHint < 0 ? (bo.getHeight() - boLegend.getHeight()) : plotHeightHint);
boTitle.setHeight(bo.getHeight());
boLegend.setWidth(bo.getWidth() - szTitle.getWidth());
boLegend.setLeft(bo.getLeft() + szTitle.getWidth());
plotLeft=bo.getLeft() + szTitle.getWidth();
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boTitle.setTop(bo.getTop() + bo.getHeight() - szTitle.getHeight());
boTitle.setWidth(bo.getWidth());
break;
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boTitle.setWidth(bo.getWidth());
plotTop=bo.getTop() + szTitle.getHeight();
break;
}
boLegend.setTop(plotTop + boPlot.getHeight());
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - szTitle.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - szTitle.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.EAST:
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
plotLeft=plotLeft + bo.getWidth() - boPlot.getWidth();
break;
case Anchor.NORTH:
case Anchor.SOUTH:
plotLeft=plotLeft + (bo.getWidth() - boPlot.getWidth()) / 2;
break;
}
break;
}
switch (titleAnchor.getValue()) {
case Anchor.WEST:
case Anchor.EAST:
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - boLegend.getHeight() - boPlot.getHeight()) / 2;
break;
}
break;
default :
switch (plotAnchor.getValue()) {
case Anchor.SOUTH:
case Anchor.SOUTH_WEST:
case Anchor.SOUTH_EAST:
plotTop=plotTop + bo.getHeight() - szTitle.getHeight() - boLegend.getHeight() - boPlot.getHeight();
break;
case Anchor.WEST:
case Anchor.EAST:
plotTop=plotTop + (bo.getHeight() - szTitle.getHeight() - boLegend.getHeight()- boPlot.getHeight()) / 2;
break;
}
break;
}
boPlot.setLeft(plotLeft);
boPlot.setTop(plotTop);
break;
}
for (Iterator itr=bl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
if (cbl != lg && cbl != pl && cbl != tb) {
layoutBlock(xs,cm,bl.getBounds(),bl.getInsets(),cbl,rtc);
}
}
for (Iterator itr=lg.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,lg.getBounds(),lg.getInsets(),cbl,rtc);
}
for (Iterator itr=tb.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,tb.getBounds(),tb.getInsets(),cbl,rtc);
}
for (Iterator itr=pl.getChildren().iterator(); itr.hasNext(); ) {
Block cbl=(Block)itr.next();
layoutBlock(xs,cm,pl.getBounds(),pl.getInsets(),cbl,rtc);
}
}",0.8753156653253781
75974,"/** 
 * @throws Exception
 */
public void testJSFilterWithCache() throws Exception {
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  ScriptExpression[] bindingExprRow=new ScriptExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_GE,""String_Node_Str"")),new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str""))};
  QueryDefinition queryDefn1=this.createQuery(null,null,null,null,null,null,null,null,filterDefn,bindingNameRow,bindingExprRow);
  queryDefn1.setNeedCache(true);
  IResultIterator resultIt=executeQuery(queryDefn1);
  String queryResultID=resultIt.getQueryResults().getID();
  resultIt.close();
  resultIt=getResultIterator(filterDefn,null,null,true,queryResultID);
  outputQueryResult(resultIt,bindingNameRow);
  checkOutputFile();
}","/** 
 * @throws Exception
 */
public void testJSFilterWithCache() throws Exception {
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  ScriptExpression[] bindingExprRow=new ScriptExpression[]{new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str""),new ScriptExpression(""String_Node_Str"")};
  FilterDefinition[] filterDefn=new FilterDefinition[]{new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_GE,""String_Node_Str"")),new FilterDefinition(new ConditionalExpression(""String_Node_Str"",ConditionalExpression.OP_EQ,""String_Node_Str""))};
  QueryDefinition queryDefn1=this.createQuery(null,null,null,null,null,null,null,null,filterDefn,bindingNameRow,bindingExprRow);
  queryDefn1.setCacheQueryResults(true);
  IResultIterator resultIt=executeQuery(queryDefn1);
  String queryResultID=resultIt.getQueryResults().getID();
  resultIt.close();
  resultIt=getResultIterator(filterDefn,null,null,true,queryResultID);
  outputQueryResult(resultIt,bindingNameRow);
  checkOutputFile();
}",0.9934587080948488
75975,"/** 
 * @param startValue
 * @throws Exception
 * @throws IOException
 */
private void groupOnMonthWithCache(Object startValue) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.MONTH_INTERVAL);
  if (startValue != null)   groupDefn[0].setIntervalStart(startValue);
  groupDefn[0].setIntervalRange(1);
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[4];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  qd.setNeedCache(true);
  String outputStr=getOutputStrForGroupTestWithCache(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}","/** 
 * @param startValue
 * @throws Exception
 * @throws IOException
 */
private void groupOnMonthWithCache(Object startValue) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.MONTH_INTERVAL);
  if (startValue != null)   groupDefn[0].setIntervalStart(startValue);
  groupDefn[0].setIntervalRange(1);
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[4];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  qd.setCacheQueryResults(true);
  String outputStr=getOutputStrForGroupTestWithCache(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}",0.995049504950495
75976,"private void groupOnDayWithCache(Object startValue) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.DAY_INTERVAL);
  if (startValue != null)   groupDefn[0].setIntervalStart(startValue);
  groupDefn[0].setIntervalRange(3);
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[4];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  qd.setNeedCache(true);
  String outputStr=getOutputStrForGroupTestWithCache(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}","private void groupOnDayWithCache(Object startValue) throws Exception, IOException {
  String[] bindingNameGroup=new String[1];
  bindingNameGroup[0]=""String_Node_Str"";
  IBaseExpression[] bindingExprGroup=new IBaseExpression[1];
  bindingExprGroup[0]=new ScriptExpression(""String_Node_Str"");
  GroupDefinition[] groupDefn=new GroupDefinition[]{new GroupDefinition(""String_Node_Str"")};
  groupDefn[0].setKeyExpression(""String_Node_Str"");
  groupDefn[0].setInterval(IGroupDefinition.DAY_INTERVAL);
  if (startValue != null)   groupDefn[0].setIntervalStart(startValue);
  groupDefn[0].setIntervalRange(3);
  String[] bindingNameRow=new String[4];
  bindingNameRow[0]=""String_Node_Str"";
  bindingNameRow[1]=""String_Node_Str"";
  bindingNameRow[2]=""String_Node_Str"";
  bindingNameRow[3]=""String_Node_Str"";
  IBaseExpression[] bindingExprRow=new IBaseExpression[4];
  bindingExprRow[0]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[1]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[2]=new ScriptExpression(""String_Node_Str"");
  bindingExprRow[3]=new ScriptExpression(""String_Node_Str"");
  String[] columnStr=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  QueryDefinition qd=this.createQuery(bindingNameGroup,bindingExprGroup,groupDefn,null,null,null,null,null,null,bindingNameRow,bindingExprRow);
  qd.setCacheQueryResults(true);
  String outputStr=getOutputStrForGroupTestWithCache(30,qd,groupDefn.length,bindingNameRow,columnStr);
  testPrint(outputStr);
  this.checkOutputFile();
}",0.9947984395318596
75977,"private void testCubeAggregation1(IDocumentManager documentManager) throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),-1);
  resultSet[1].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
}","private void testCubeAggregation1(IDocumentManager documentManager) throws IOException, DataException, BirtException {
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(CubeQueryExecutorHelper.loadCube(""String_Node_Str"",documentManager,new StopSign()));
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  aggregations[2]=new AggregationDefinition(null,null,funcitons);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,null);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  assertEquals(resultSet[2].length(),1);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),-1);
  resultSet[1].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0),null);
  assertEquals(resultSet[2].getAggregationValue(0),new Double(28));
  assertEquals(resultSet[3].length(),8);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.UNKNOWN_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(2));
  resultSet[3].seek(2);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(3);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(4));
  resultSet[3].seek(4);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[3].getAggregationValue(0),null);
  resultSet[3].seek(5);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(6));
  resultSet[3].seek(6);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(7));
  resultSet[3].seek(7);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],new Integer(8));
}",0.9831869979450776
75978,"private void testCubeCreate2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[2];
  String[] ColNames=new String[3];
  ColNames[0]=""String_Node_Str"";
  ColNames[1]=""String_Node_Str"";
  ColNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  ColNames=new String[1];
  ColNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[2];
  levelNamesForFilter[0]=""String_Node_Str"";
  levelNamesForFilter[1]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[2]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),4);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),-1);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),1);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(9));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(13));
  assertEquals(resultSet[2].length(),2);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[2].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(6));
  resultSet[2].seek(1);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[3].length(),2);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(6));
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(22));
}","private void testCubeCreate2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[2];
  String[] ColNames=new String[3];
  ColNames[0]=""String_Node_Str"";
  ColNames[1]=""String_Node_Str"";
  ColNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,TestFactTable.L1Col);
  iterator.setLevelMember(1,TestFactTable.L2Col);
  iterator.setLevelMember(2,TestFactTable.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),TestFactTable.L1Col.length);
  ColNames=new String[1];
  ColNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(ColNames);
  iterator.setLevelMember(0,distinct(TestFactTable.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false);
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  TestFactTable factTable2=new TestFactTable();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  Cube cube=new Cube(""String_Node_Str"",documentManager);
  cube.create(dimensions,factTable2,measureColumnName,new StopSign());
  CubeQueryExecutorHelper cubeQueryExcutorHelper=new CubeQueryExecutorHelper(cube);
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{""String_Node_Str""},new Object[]{""String_Node_Str""},true,false);
  cubeQueryExcutorHelper.addFilter(""String_Node_Str"",filter[0]);
  AggregationDefinition[] aggregations=new AggregationDefinition[4];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  String[] levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[2];
  levelNamesForFilter[0]=""String_Node_Str"";
  levelNamesForFilter[1]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[1]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[2]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelNamesForFilter=new String[1];
  levelNamesForFilter[0]=""String_Node_Str"";
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",BuiltInAggregationFactory.TOTAL_SUM_FUNC);
  aggregations[3]=new AggregationDefinition(levelNamesForFilter,sortType,funcitons);
  IAggregationResultSet[] resultSet=cubeQueryExcutorHelper.execute(aggregations,new StopSign());
  CubeQueryExecutorHelper.saveAggregationResultSet(pathName,""String_Node_Str"",resultSet);
  resultSet=CubeQueryExecutorHelper.loadAggregationResultSet(pathName,""String_Node_Str"");
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[0].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),4);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),-1);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[1].getLevelIndex(""String_Node_Str""),1);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  assertEquals(resultSet[1].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(9));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[1].getLevelKeyValue(1)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(13));
  assertEquals(resultSet[2].length(),2);
  assertEquals(resultSet[2].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[2].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[2].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[2].seek(0);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(6));
  resultSet[2].seek(1);
  assertEquals(resultSet[2].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[2].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[3].length(),2);
  assertEquals(resultSet[3].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[3].getLevelIndex(""String_Node_Str""),0);
  assertEquals(resultSet[3].getLevelKeyDataType(""String_Node_Str"",""String_Node_Str""),DataType.STRING_TYPE);
  resultSet[3].seek(0);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(6));
  resultSet[3].seek(1);
  assertEquals(resultSet[3].getLevelKeyValue(0)[0],""String_Node_Str"");
  assertEquals(resultSet[3].getAggregationValue(0),new Double(22));
}",0.9880557398805574
75979,"private static IDocumentManager createRADocumentManager() throws IOException, DataException {
  String pathName=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"";
  ArchiveFile archiveFile=new ArchiveFile(pathName,""String_Node_Str"");
  ArchiveReader reader=new ArchiveReader(archiveFile);
  IDocumentManager documentManager=DocumentManagerFactory.createRADocumentManager(reader);
  return documentManager;
}","private static IDocumentManager createRADocumentManager() throws IOException, DataException {
  ArchiveFile archiveFile=new ArchiveFile(pathName,""String_Node_Str"");
  ArchiveReader reader=new ArchiveReader(archiveFile);
  IDocumentManager documentManager=DocumentManagerFactory.createRADocumentManager(reader);
  return documentManager;
}",0.8779220779220779
75980,"private static IDocArchiveWriter createRAWriter() throws IOException {
  String pathName=System.getProperty(""String_Node_Str"") + File.separator + ""String_Node_Str"";
  ArchiveFile archiveFile=new ArchiveFile(pathName,""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(archiveFile);
  return writer;
}","private static IDocArchiveWriter createRAWriter() throws IOException {
  ArchiveFile archiveFile=new ArchiveFile(pathName,""String_Node_Str"");
  ArchiveWriter writer=new ArchiveWriter(archiveFile);
  return writer;
}",0.5
75981,"/** 
 * Caculate the paste position
 */
private void calculatePositionAndSlotId(){
  DesignElementHandle container=null;
  if (newContainer instanceof DesignElementHandle) {
    slotID=DEUtil.getDefaultSlotID(newContainer);
    container=(DesignElementHandle)newContainer;
  }
 else   if (newContainer instanceof SlotHandle) {
    slotID=((SlotHandle)newContainer).getSlotID();
    container=((SlotHandle)newContainer).getElementHandle();
  }
 else {
    return;
  }
  if (afterHandle != null) {
    position=DEUtil.findInsertPosition(container,afterHandle,slotID);
  }
 else   if (position > -1 && isCut && sourceHandle.getContainer() == container) {
    int oldPosition=DEUtil.findInsertPosition(container,sourceHandle,slotID);
    if (oldPosition < position) {
      position--;
    }
  }
}","/** 
 * Caculate the paste position
 */
private void calculatePositionAndSlotId(){
  DesignElementHandle container=null;
  if (newContainer instanceof DesignElementHandle) {
    slotID=DEUtil.getDefaultSlotID(newContainer);
    if (slotID == -1) {
      contentString=DEUtil.getDefaultContentName(newContainer);
    }
    container=(DesignElementHandle)newContainer;
  }
 else   if (newContainer instanceof SlotHandle) {
    slotID=((SlotHandle)newContainer).getSlotID();
    container=((SlotHandle)newContainer).getElementHandle();
  }
 else {
    return;
  }
  if (afterHandle != null) {
    position=DEUtil.findInsertPosition(container,afterHandle,slotID);
  }
 else   if (position > -1 && isCut && sourceHandle.getContainer() == container) {
    int oldPosition=DEUtil.findInsertPosition(container,sourceHandle,slotID);
    if (oldPosition < position) {
      position--;
    }
  }
}",0.7619047619047619
75982,"/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(DesignElementHandle newHandle) throws ContentException, NameException {
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
    slotHandle.paste(newHandle,position);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
    slotHandle.paste(newHandle,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    try {
      ((PropertyHandle)newContainer).add(newHandle,position);
    }
 catch (    SemanticException e) {
    }
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}","/** 
 * Add this design element to report.
 * @param newHandle The design element to add
 */
private void addHandleToReport(DesignElementHandle newHandle) throws ContentException, NameException, SemanticException {
  SlotHandle slotHandle=null;
  if (newContainer instanceof DesignElementHandle) {
    slotHandle=((DesignElementHandle)newContainer).getSlot(slotID);
  }
 else   if (newContainer instanceof SlotHandle) {
    slotHandle=(SlotHandle)newContainer;
  }
  if (slotHandle != null) {
    slotHandle.paste(newHandle,position);
  }
 else   if (newContainer instanceof PropertyHandle) {
    ((PropertyHandle)newContainer).paste(newHandle,position);
  }
 else   if (newContainer instanceof DesignElementHandle) {
    ((DesignElementHandle)newContainer).getPropertyHandle(contentString).paste(newHandle,position);
  }
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newHandle) + ""String_Node_Str""+ slotHandle.getSlotID()+ ""String_Node_Str""+ DEUtil.getDisplayLabel(slotHandle.getElementHandle())+ ""String_Node_Str""+ position);
  }
}",0.481000481000481
75983,"protected static int handleValidateTargetCanContainElementHandle(DesignElementHandle targetHandle,DesignElementHandle childHandle,boolean validateContainer){
  if (targetHandle instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultSlotID(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ParameterGroupHandle && childHandle instanceof ParameterGroupHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ReportDesignHandle && childHandle instanceof ThemeHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (validateContainer) {
    if (targetHandle.getContainer() == null) {
      return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() == null) {
      if (!targetHandle.getContainerPropertyHandle().getDefn().isList()) {
        return CONTAIN_NO;
      }
    }
 else     if (!targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality()) {
      return CONTAIN_NO;
    }
    if (targetHandle.getClass().equals(childHandle.getClass())) {
      return CONTAIN_PARENT;
    }
    if (targetHandle.getContainerSlotHandle() == null)     return CONTAIN_NO;
 else     return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
  }
  return CONTAIN_NO;
}","protected static int handleValidateTargetCanContainElementHandle(DesignElementHandle targetHandle,DesignElementHandle childHandle,boolean validateContainer){
  if (targetHandle instanceof CascadingParameterGroupHandle) {
    return childHandle.getContainer() == targetHandle ? CONTAIN_THIS : CONTAIN_NO;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultSlotID(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ParameterGroupHandle && childHandle instanceof ParameterGroupHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle instanceof ReportDesignHandle && childHandle instanceof ThemeHandle) {
    return CONTAIN_THIS;
  }
 else   if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),childHandle)) {
    return CONTAIN_THIS;
  }
 else   if (validateContainer) {
    if (targetHandle.getContainer() == null) {
      return CONTAIN_NO;
    }
    if (targetHandle.getContainerSlotHandle() == null) {
      if (!targetHandle.getContainerPropertyHandle().getDefn().isList()) {
        return CONTAIN_NO;
      }
    }
 else     if (!targetHandle.getContainer().getDefn().getSlot(targetHandle.getContainerSlotHandle().getSlotID()).isMultipleCardinality()) {
      return CONTAIN_NO;
    }
    if (targetHandle.getClass().equals(childHandle.getClass())) {
      return CONTAIN_PARENT;
    }
    if (targetHandle.getContainerSlotHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerSlotHandle().getSlotID(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
 else     if (targetHandle.getContainerPropertyHandle() != null) {
      return targetHandle.getContainer().canContain(targetHandle.getContainerPropertyHandle().getPropertyDefn().getName(),childHandle) ? CONTAIN_PARENT : CONTAIN_NO;
    }
  }
  return CONTAIN_NO;
}",0.9116117850953206
75984,"/** 
 * Pastes elements. Includes transaction.
 * @param transferData single or multiple transfer data, every data must be an instance of <code>DesignElementHandle</code> or <code>DesignElement</code>
 * @param targetObj container or sibling. Copy position is after the sibling or the last in the container
 * @return paste result
 */
public static boolean copyHandles(Object transferData,Object targetObj){
  if (getColumnHandle(transferData) != null) {
    return copyColumn(getColumnHandle(transferData),targetObj,false);
  }
  int canContain=handleValidateTargetCanContain(targetObj,transferData,true);
  int position=calculateNextPosition(targetObj,canContain);
  if (position > -1) {
    targetObj=getDesignElementHandle(targetObj).getContainerSlotHandle();
  }
  return copyHandles(transferData,targetObj,position);
}","/** 
 * Pastes elements. Includes transaction.
 * @param transferData single or multiple transfer data, every data must be an instance of <code>DesignElementHandle</code> or <code>DesignElement</code>
 * @param targetObj container or sibling. Copy position is after the sibling or the last in the container
 * @return paste result
 */
public static boolean copyHandles(Object transferData,Object targetObj){
  targetObj=unwrapToModel(targetObj);
  if (getColumnHandle(transferData) != null) {
    return copyColumn(getColumnHandle(transferData),targetObj,false);
  }
  int canContain=handleValidateTargetCanContain(targetObj,transferData,true);
  int position=calculateNextPosition(targetObj,canContain);
  if (position > -1) {
    Object temp=targetObj;
    targetObj=getDesignElementHandle(targetObj).getContainerSlotHandle();
    if (targetObj == null) {
      targetObj=getDesignElementHandle(temp).getContainer();
    }
  }
  return copyHandles(transferData,targetObj,position);
}",0.9010503040353788
75985,"/** 
 * Gets the position after the sibling in the container
 * @param targetObj container or sibling
 * @param canContain <code>CONTAIN_PARENT</code> as sibling, others as container
 * @return the position: after the sibling in the same container, or -1 asthe last position in the container
 */
public static int calculateNextPosition(Object targetObj,int canContain){
  int position=-1;
  if (canContain == CONTAIN_PARENT) {
    DesignElementHandle afterHandle=getDesignElementHandle(targetObj);
    if (afterHandle != null) {
      if (afterHandle.getContainerSlotHandle() != null) {
        position=afterHandle.getContainerSlotHandle().findPosn(afterHandle);
      }
 else       if (afterHandle.getContainerPropertyHandle() != null) {
        position=afterHandle.getContainerPropertyHandle().getContents().indexOf(afterHandle);
      }
      position++;
    }
  }
  return position;
}","/** 
 * Gets the position after the sibling in the container
 * @param targetObj container or sibling
 * @param canContain <code>CONTAIN_PARENT</code> as sibling, others as container
 * @return the position: after the sibling in the same container, or -1 asthe last position in the container
 */
public static int calculateNextPosition(Object targetObj,int canContain){
  int position=-1;
  if (canContain == CONTAIN_PARENT) {
    DesignElementHandle afterHandle=getDesignElementHandle(targetObj);
    if (afterHandle != null) {
      position=afterHandle.getIndex();
      position++;
    }
  }
  return position;
}",0.798140770252324
75986,"public int findInParameter(String parameterName) throws OdaException {
  UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
  throw e;
}","public int findInParameter(String parameterName) throws OdaException {
  UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
  addLog(""String_Node_Str"",e);
  throw e;
}",0.8132780082987552
75987,"public void setNull(int parameterId) throws OdaException {
  assertNotNull(preStat);
  try {
    java.sql.ParameterMetaData pm=this.preStat.getParameterMetaData();
    if (pm == null) {
      this.preStat.setNull(parameterId,java.sql.Types.OTHER);
    }
 else {
      this.preStat.setNull(parameterId,pm.getParameterType(parameterId));
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_NULL_VALUE,e);
  }
}","public void setNull(int parameterId) throws OdaException {
  assertNotNull(preStat);
  try {
    java.sql.ParameterMetaData pm=this.preStat.getParameterMetaData();
    if (pm == null) {
      this.preStat.setNull(parameterId,java.sql.Types.OTHER);
      addLog(""String_Node_Str"",parameterId,""String_Node_Str"");
    }
 else {
      this.preStat.setNull(parameterId,pm.getParameterType(parameterId));
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_NULL_VALUE,e);
  }
}",0.9369369369369368
75988,"public void setDouble(int parameterId,double value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setDouble(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_DUBLE_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setDouble(int parameterId,double value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setDouble(parameterId,value);
    addLog(""String_Node_Str"",parameterId,String.valueOf(value));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_DUBLE_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9223416965352448
75989,"public void setSortSpec(SortSpec sortBy) throws OdaException {
  UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
  logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
  throw e;
}","public void setSortSpec(SortSpec sortBy) throws OdaException {
  UnsupportedOperationException e=new UnsupportedOperationException(""String_Node_Str"");
  addLog(""String_Node_Str"",e);
  throw e;
}",0.8154506437768241
75990,"public void setTimestamp(int parameterId,Timestamp value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setTimestamp(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_TIMESTAMP_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setTimestamp(int parameterId,Timestamp value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setTimestamp(parameterId,value);
    addLog(""String_Node_Str"",parameterId,String.valueOf(value));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_TIMESTAMP_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9246813441483198
75991,"public void setTime(int parameterId,Time value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setTime(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_TIME_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setTime(int parameterId,Time value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setTime(parameterId,value);
    addLog(""String_Node_Str"",parameterId,value.toString());
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_TIME_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9266503667481664
75992,"public void setBigDecimal(int parameterId,BigDecimal value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setBigDecimal(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_BIGDECIMAL_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setBigDecimal(int parameterId,BigDecimal value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setBigDecimal(parameterId,value);
    addLog(""String_Node_Str"",parameterId,String.valueOf(value));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_BIGDECIMAL_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9253731343283582
75993,"public void setInt(int parameterId,int value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setInt(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_INT_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setInt(int parameterId,int value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setInt(parameterId,value);
    addLog(""String_Node_Str"",parameterId,String.valueOf(value));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_INT_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9202453987730062
75994,"public void setString(int parameterId,String value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setString(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_STRING_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setString(int parameterId,String value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setString(parameterId,value);
    addLog(""String_Node_Str"",parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_STRING_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9404617253948968
75995,"public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.preStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    logger.logp(java.util.logging.Level.FINE,Statement.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
}","public void setProperty(String name,String value) throws OdaException {
  if (name == null)   throw new NullPointerException(""String_Node_Str"");
  if (name.equals(""String_Node_Str"")) {
    if (value != null && value.length() > 0) {
      try {
        double secs=Double.parseDouble(value);
        this.preStat.setQueryTimeout((int)secs);
      }
 catch (      SQLException e) {
        logger.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
 else   if (name.equals(ConnectionProfileProperty.PROFILE_NAME_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PROP_KEY) || name.equals(ConnectionProfileProperty.PROFILE_STORE_FILE_PATH_PROP_KEY)) {
  }
 else {
    OdaException e=new OdaException(""String_Node_Str"" + name);
    addLog(""String_Node_Str"",e);
    throw e;
  }
}",0.9270334928229664
75996,"public void setDate(int parameterId,Date value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setDate(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_DATE_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setDate(int parameterId,Date value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setDate(parameterId,value);
    addLog(""String_Node_Str"",parameterId,value.toString());
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_DATE_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.9266503667481664
75997,"public void setBoolean(int parameterId,boolean value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setBoolean(parameterId,value);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_BOOLEAN_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}","public void setBoolean(int parameterId,boolean value) throws OdaException {
  assertNotNull(preStat);
  try {
    this.preStat.setBoolean(parameterId,value);
    addLog(""String_Node_Str"",parameterId,String.valueOf(value));
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_BOOLEAN_VALUE,e);
  }
catch (  RuntimeException e1) {
    rethrowRunTimeException(e1,ERRMSG_SET_PARAMETER + parameterId);
  }
}",0.923258559622196
75998,"/** 
 * Returns if aggregation is defined on given level on specific axis
 * @param measureView
 * @param levelView
 * @param axisType
 * @return
 */
protected boolean isAggregationDefined(MeasureViewHandle measureView,LevelViewHandle levelView,int axisType){
  if (measureView != null) {
    String checkDimensionName=null;
    String checkLevelName=null;
    if (levelView != null) {
      checkDimensionName=((DimensionViewHandle)levelView.getContainer()).getCubeDimensionName();
      checkLevelName=levelView.getCubeLevelName();
    }
    if (axisType == ROW_AXIS_TYPE) {
      int totalColDimensions=crosstab.getDimensionCount(COLUMN_AXIS_TYPE);
      if (totalColDimensions > 0) {
        for (int i=0; i < totalColDimensions; i++) {
          DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
          int totalLevels=dv.getLevelCount();
          for (int j=0; j < totalLevels; j++) {
            LevelViewHandle lv=dv.getLevel(j);
            if ((i == totalColDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
              AggregationCellHandle cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,dv.getCubeDimensionName(),lv.getCubeLevelName());
              if (cell != null) {
                return true;
              }
            }
          }
        }
      }
      if (totalColDimensions == 0 || crosstab.getGrandTotal(COLUMN_AXIS_TYPE) != null) {
        AggregationCellHandle cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,null,null);
        if (cell != null) {
          return true;
        }
      }
    }
 else     if (axisType == COLUMN_AXIS_TYPE) {
      int totalRowDimensions=crosstab.getDimensionCount(ROW_AXIS_TYPE);
      if (totalRowDimensions > 0) {
        for (int i=0; i < totalRowDimensions; i++) {
          DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
          int totalLevels=dv.getLevelCount();
          for (int j=0; j < totalLevels; j++) {
            LevelViewHandle lv=dv.getLevel(j);
            if ((i == totalRowDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
              AggregationCellHandle cell=measureView.getAggregationCell(dv.getCubeDimensionName(),lv.getCubeLevelName(),checkDimensionName,checkLevelName);
              if (cell != null) {
                return true;
              }
            }
          }
        }
      }
      if (totalRowDimensions == 0 || crosstab.getGrandTotal(ROW_AXIS_TYPE) != null) {
        AggregationCellHandle cell=measureView.getAggregationCell(null,null,checkDimensionName,checkLevelName);
        if (cell != null) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Returns if aggregation is defined on given level on specific axis
 * @param measureView
 * @param levelView
 * @param axisType
 * @return
 */
protected boolean isAggregationDefined(MeasureViewHandle measureView,LevelViewHandle levelView,int axisType,List counterAggregationLevels){
  if (measureView != null) {
    String checkDimensionName=null;
    String checkLevelName=null;
    if (levelView != null) {
      checkDimensionName=((DimensionViewHandle)levelView.getContainer()).getCubeDimensionName();
      checkLevelName=levelView.getCubeLevelName();
    }
    int counterAxisType=CrosstabModelUtil.getOppositeAxisType(axisType);
    boolean isInnerMost=levelView != null ? levelView.isInnerMost() : false;
    if (isInnerMost) {
      if (counterAggregationLevels.size() > 0) {
        return true;
      }
      if (crosstab.getGrandTotal(counterAxisType) != null) {
        return true;
      }
    }
    int totalDimensions=crosstab.getDimensionCount(counterAxisType);
    if (totalDimensions > 0) {
      for (int i=0; i < totalDimensions; i++) {
        DimensionViewHandle dv=crosstab.getDimension(counterAxisType,i);
        int totalLevels=dv.getLevelCount();
        for (int j=0; j < totalLevels; j++) {
          LevelViewHandle lv=dv.getLevel(j);
          if ((i == totalDimensions - 1 && j == totalLevels - 1) || lv.getAggregationHeader() != null) {
            AggregationCellHandle cell=null;
            if (axisType == ROW_AXIS_TYPE) {
              cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,dv.getCubeDimensionName(),lv.getCubeLevelName());
            }
 else {
              cell=measureView.getAggregationCell(dv.getCubeDimensionName(),lv.getCubeLevelName(),checkDimensionName,checkLevelName);
            }
            if (cell != null) {
              return true;
            }
          }
        }
      }
    }
    if (totalDimensions == 0 || crosstab.getGrandTotal(counterAxisType) != null) {
      AggregationCellHandle cell=null;
      if (axisType == ROW_AXIS_TYPE) {
        cell=measureView.getAggregationCell(checkDimensionName,checkLevelName,null,null);
      }
 else {
        cell=measureView.getAggregationCell(null,null,checkDimensionName,checkLevelName);
      }
      if (cell != null) {
        return true;
      }
    }
  }
  return false;
}",0.344213649851632
75999,"/** 
 * Gets insert elements actions including extension points.
 */
private RegisterActions[] getInsertElementActions(){
  if (insertElementActions == null) {
    insertElementActions=insertActions;
    List extensionPoints=ExtensionPointManager.getInstance().getExtendedElementPoints();
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    if (!extensionPoints.isEmpty()) {
      insertElementActions=new RegisterActions[insertActions.length + extensionPoints.size() + entries.length];
      for (int i=0; i < insertActions.length; i++) {
        insertElementActions[i]=insertActions[i];
      }
      for (int k=0; k < extensionPoints.size(); k++) {
        ExtendedElementUIPoint point=(ExtendedElementUIPoint)extensionPoints.get(k);
        IElementDefn extension=DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName());
        String displayName=new String();
        displayName=extension.getDisplayName();
        if (displayName.equalsIgnoreCase(""String_Node_Str"")) {
          displayName=""String_Node_Str"" + displayName;
        }
        RegisterActions extAction=new RegisterActions(extension.getName(),displayName);
        insertElementActions[insertActions.length + k]=extAction;
      }
    }
    for (int i=0; i < entries.length; i++) {
      RegisterActions extAction=new RegisterActions(entries[i].getItemName(),entries[i].getLabel());
      insertElementActions[insertActions.length + extensionPoints.size() + i]=extAction;
    }
  }
  return insertElementActions;
}","/** 
 * Gets insert elements actions including extension points.
 */
private RegisterActions[] getInsertElementActions(){
  if (insertElementActions == null) {
    insertElementActions=insertActions;
    List extensionPoints=ExtensionPointManager.getInstance().getExtendedElementPoints();
    PaletteEntryExtension[] entries=EditpartExtensionManager.getPaletteEntries();
    insertElementActions=new RegisterActions[insertActions.length + extensionPoints.size() + entries.length];
    for (int i=0; i < insertActions.length; i++) {
      insertElementActions[i]=insertActions[i];
    }
    if (!extensionPoints.isEmpty()) {
      for (int k=0; k < extensionPoints.size(); k++) {
        ExtendedElementUIPoint point=(ExtendedElementUIPoint)extensionPoints.get(k);
        IElementDefn extension=DEUtil.getMetaDataDictionary().getExtension(point.getExtensionName());
        String displayName=new String();
        displayName=extension.getDisplayName();
        if (displayName.equalsIgnoreCase(""String_Node_Str"")) {
          displayName=""String_Node_Str"" + displayName;
        }
        RegisterActions extAction=new RegisterActions(extension.getName(),displayName);
        insertElementActions[insertActions.length + k]=extAction;
      }
    }
    for (int i=0; i < entries.length; i++) {
      RegisterActions extAction=new RegisterActions(entries[i].getItemName(),entries[i].getLabel());
      insertElementActions[insertActions.length + extensionPoints.size() + i]=extAction;
    }
  }
  return insertElementActions;
}",0.9725848563968668
76000,"public void setKeepWithNext(boolean keepWithNext){
  if (keepWithNext) {
    keepWith=true;
  }
  if (!keepWith) {
    clearCache();
  }
}","public void setKeepWithNext(boolean keepWithNext){
  if (keepWithNext) {
    keepWith=true;
  }
  if (!keepWith && !pageBreakAvoid) {
    clearCache();
  }
}",0.9355932203389832
